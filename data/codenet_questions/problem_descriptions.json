{"p00000": "\n\n<H1>QQ</H1>\n\n\n<p>\nWrite a program which prints multiplication tables in the following format:\n</p>\n\n<pre>\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\n</pre>\n\n<H2>Input</H2>\n\n<p>\nNo input.\n</p>\n\n<H2>Output</H2>\n\n<pre>\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\n</pre>\n\n\n<H2>Template for C</H2>\n\n<pre>\n#include&lt;stdio.h&gt;\n\nint main(){\n\n    return 0;\n}\n</pre>\n\n<H2>Template for C++</H2>\n\n<pre>\n#include&lt;iostream&gt;\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\n</pre>\n\n\n<H2>Template for Java</H2>\n\n<pre>\nclass Main{\n    public static void main(String[] a){\n\n    }\n}\n</pre>", "p00002": "\n<H1>Digit Number</H1>\n\n<p>\nWrite a program which computes the digit number of sum of two integers <var>a</var> and <var>b</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThere are several test cases. Each test case consists of two non-negative integers <var>a</var> and <i>b</i> which are separeted by a space in a line. The input terminates with EOF.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>0 &le; <var>a</var>, <var>b</var> &le; 1,000,000</li>\n<li>The number of datasets &le; 200</li>\n</ul>\n\n<H2>Output</H2>\n\n<p>\nPrint the number of digits of <var>a</var> + <var>b</var> for each data set.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n5 7\n1 99\n1000 999\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n2\n3\n4\n</pre>\n\n\n", "p00001": "\n<H1>List of Top 3 Hills</H1>\n\n<p>\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\n</p>\n\n<p>\nWrite a program which prints heights of the top three mountains in descending order.\n</p>\n\n<H2>Input</H2>\n\n<pre>\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\n</pre>\n\n<h2>Constraints</h2>\n\n<p>\n0 &le; height of mountain (integer) &le; 10,000\n</p>\n\n<H2>Output</H2>\n\n<pre>\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\n</pre>\n\n<H2>Sample Input 1</H2>\n<pre>\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n3776\n2848\n2840\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n900\n900\n800\n</pre>\n", "p00005": "\n<H1>GCD and LCM</H1>\n\n<p>\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given <var>a</var> and <var>b</var>. \n</p>\n\n<H2>Input</H2>\n\n<p>\nInput consists of several data sets. Each data set contains <var>a</var> and <var>b</var> separated by a single space in a line. The input terminates with EOF.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li> 0 &lt; <var>a, b</var> &le; 2,000,000,000</li>\n<li> LCM(<var>a, b</var>) &le; 2,000,000,000</li>\n<li> The number of data sets &le; 50</li>\n</ul>\n\n<H2>Output</H2>\n\n<p>\nFor each data set, print GCD and LCM separated by a single space in a line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n8 6\n50000000 30000000\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n2 24\n10000000 150000000\n</pre>\n\n", "p00006": "\n<H1>Reverse Sequence</H1>\n\n<p>\nWrite a program which reverses a given string <var>str</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\n<var>str</var> (the size of <var>str</var> &le; 20) is given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the reversed <var>str</var> in a line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\nw32nimda\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nadmin23w\n</pre>\n\n\n", "p00003": "\n<H1>Is it a Right Triangle?</H1>\n\n<p>\nWrite a program which judges wheather given length of three side form a right triangle. Print \"<span>YES</span>\" if the given sides (integers) form a right triangle, \"<span>NO</span>\" if not so.\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput consists of several data sets. In the first line, the number of data set, <var>N</var> is given. Then, <var>N</var> lines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li> 1 &le; length of the side &le; 1,000</li>\n<li> <var>N</var> &le; 1,000</li>\n</ul>\n\n\n<H2>Output</H2>\n\n<p>\nFor each data set, print \"<span>YES</span>\" or \"<span>NO</span>\".\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3\n4 3 5\n4 3 6\n8 8 8\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nYES\nNO\nNO\n</pre>\n\n\n", "p00004": "\n<H1>Simultaneous Equation</H1>\n\n<p>\nWrite a program which solve a simultaneous equation:<br>\n<br>\n<var> ax + by = c</var><br>\n<var> dx + ey = f</var><br>\n<br>\n\nThe program should print <var>x</var> and <var>y</var> for given <var>a</var>, <var>b</var>, <var>c</var>, <var>d</var>, <var>e</var> and <var>f</var> (-1,000 &le; <var>a, b, c, d, e, f</var> &le; 1,000). You can suppose that given equation has a unique solution.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be <var>a, b, c, d, e, f</var> separated by a single space. The input terminates with EOF.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each data set, print <var>x</var> and <var>y</var> separated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\n-1.000 2.000\n1.000 4.000\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n0.000 3.000\n0.000 3.000\n</pre>\n\n\n", "p00007": "\n<H1>Debt Hell</H1>\n\n<p>\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\n</p>\n\n<p>\nWrite a program which computes the amount of the debt in <var>n</var> weeks. \n</p>\n\n<H2>Input</H2>\n\n<p>\nAn integer <var>n</var> (0 &le; <var>n</var> &le; 100) is given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the amout of the debt in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n5\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n130000\n</pre>\n\n", "p00008": "\n<H1>Sum of 4 Integers</H1>\n\n<p>\nWrite a program which reads an integer <var>n</var>  and identifies the number of combinations of <var>a, b, c</var> and <var>d</var> (0 &le; <var>a, b, c, d</var> &le; 9) which meet the following equality:<br>\n<br>\n<var>a + b + c + d = n</var><br>\n<br>\n\nFor example, for <var>n</var> = 35, we have 4 different combinations of (<var>a, b, c, d</var>): (<var>8, 9, 9, 9</var>), (<var>9, 8, 9, 9</var>), (<var>9, 9, 8, 9</var>), and (<var>9, 9, 9, 8</var>).\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several datasets. Each dataset consists of <var>n</var> (1 &le; <var>n</var> &le; 50) in a line. The number of datasets is less than or equal to 50.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the number of combination in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n35\n1\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n4\n4\n</pre>\n\n\n\n", "p00009": "\n<H1>Prime Number</H1>\n\n<p>\nWrite a program which reads an integer <var>n</var> and prints the number of prime numbers which are less than or equal to <var>n</var>. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets. Each dataset has an integer <var>n</var> (1 &le; <var>n</var> &le; 999,999) in a line.\n</p>\n\n<p>\nThe number of datasets is less than or equal to 30.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, prints the number of prime numbers.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n10\n3\n11\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n4\n2\n5\n</pre>\n\n", "p00010": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n<H1>Circumscribed Circle of A Triangle.</H1>\n\n<p>\nWrite a program which prints the central coordinate $(p_x, p_y)$ and the radius $r$ of a circumscribed circle of a triangle which is constructed by three points $(x_1, y_1)$, $(x_2, y_2)$ and $(x_3, y_3)$ on the plane surface. \n</p>\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets. In the first line, the number of datasets $n$ is given. Each dataset consists of:<br/>\n<br/>\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$<br/>\n<br/>\n\nin a line. All the input are real numbers.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print $p_x$, $p_y$ and $r$ separated by a space in a line. Print the solution to three places of decimals. Round off the solution to three decimal places.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>$-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3 \\leq 100$</li>\n<li>$ n \\leq 20$</li>\n</ul>\n\n<H2>Sample Input</H2>\n\n<pre>\n1\n0.0 0.0 2.0 0.0 2.0 2.0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n1.000 1.000 1.414\n</pre>\n\n\n", "p00012": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>A Point in a Triangle</H1>\n\n<p>\nThere is a triangle formed by three points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$ on a plain.\n</p>\n<p>\nWrite a program which prints \"<span>YES</span>\" if a point $P$ $(x_p, y_p)$ is in the triangle and \"<span>NO</span>\" if not.\n</p>\n\n<!--\n<p>\nYou can suppose that P is never on the points nor sides of the triangle.\n</p>\n-->\n\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets. Each dataset consists of:<br/>\n<br/>\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_p$ $y_p$<br/>\n</p>\n\n<p>\nAll the input are real numbers. Input ends with EOF. The number of datasets is less than or equal to 100.\n</p>\n\n<h2>Constraints</h2>\n<p>\nYou can assume that:\n</p>\n\n<ul>\n<li>$ -100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_p, y_p \\leq 100$</li>\n<li>1.0 $\\leq$ Length of each side of a tringle</li>\n<li>0.001 $\\leq$ Distance between $P$ and each side of a triangle</li>\n</ul>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print \"<span>YES</span>\" or \"<span>NO</span>\" in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n0.0 0.0 2.0 0.0 2.0 2.0 1.5 0.5\n0.0 0.0 1.0 4.0 5.0 3.0 -1.0 3.0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nYES\nNO\n</pre>\n\n\n", "p00015": "\n<H1>National Budget</H1>\n\n<p>\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\n</p>\n\n<p>\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\n</p>\n\n<p>\nIf given integers or the sum have more than 80 digits, print \"overflow\".\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets. In the first line, the number of datasets <var>N</var> (1 &le; <var>N</var> &le; 50) is given. Each dataset consists of 2 lines:\n</p>\n\n<pre>\nThe first integer\nThe second integer\n</pre>\n\n<p>\nThe integer has at most 100 digits.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the sum of given integers in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow\n</pre>\n\n\n", "p00017": "\n<H1>Caesar Cipher</H1>\n\n<p>\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\n<pre>\nthis is a pen\n</pre>\n<p>\nis would become:\n</p>\n<pre>\nuijt jt b qfo\n</pre>\n\n<p>\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\n</p>\n\n\n<H2>Input</H2>\n<p>\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\n</p>\n\n<p>\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\n</p>\n\n<p>\nThe number of datasets is less than or equal to 20.\n</p>\n\n\n\n<H2>Output</H2>\n\n<p>\nPrint decoded texts in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nthis is the picture that i took in the trip.\n</pre>\n\n\n", "p00018": "\n<H1>Sorting Five Numbers</H1>\n\n<p>\nWrite a program which reads five numbers and sorts them in descending order.\n</p>\n\n<H2>Input</H2>\n<p>\nInput consists of five numbers <var>a</var>, <var>b</var>, <var>c</var>, <var>d</var> and  <var>e</var> (-100000 &le; <var>a</var>, <var>b</var>, <var>c</var>, <var>d</var>,<var>e</var> &le; 100000). The five numbers are separeted by a space.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n3 6 9 7 5\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n9 7 6 5 3\n</pre>\n\n\n\n", "p00020": "\n<H1>Capitalize</H1>\n\n<p>\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters. \n</p>\n\n<H2>Input</H2>\n\n<p>\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the converted text.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\nthis is a pen.\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nTHIS IS A PEN.\n</pre>\n\n\n", "p00019": "\n<H1>Factorial</H1>\n\n<p>\nWrite a program which reads an integer <var>n</var> and prints the factorial of <var>n</var>. You can assume that <var>n</var> &le; 20.\n</p>\n\n<H2>Input</H2>\n\n<p>\nAn integer <var>n</var> (1 &le; <var>n</var> &le; 20) in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the factorial of <var>n</var> in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n5\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n120\n</pre>\n\n", "p00021": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n<H1>Parallelism</H1>\n\n<p>\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"<span>YES</span>\" and if not prints \"<span>NO</span>\". \n</p>\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:<br/>\n<br/>\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$<br/>\n</p>\n\n<p>\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print \"<span>YES</span>\" or \"<span>NO</span>\" in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nYES\nNO\n</pre>\n\n\n", "p00022": "\n\n<H1>Maximum Sum Sequence</H1>\n\n<p>\nGiven a sequence of numbers <var>a<sub>1</sub></var>, <var>a<sub>2</sub></var>, <var>a<sub>3</sub></var>, ..., <var>a<sub>n</sub></var>, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a <i>contiquous</i> subsequence.\n</p>\n\n<H2>Input</H2>\n<p>\nThe input consists of multiple datasets. Each data set consists of:\n\n<pre>\n<var>n</var>\n<var>a<sub>1</sub></var>\n<var>a<sub>2</sub></var>\n.\n.\n<var>a<sub>n</sub></var>\n</pre>\n\n<p>\nYou can assume that 1 &le; <var>n</var> &le; 5000 and -100000 &le; <var>a<sub>i</sub></var> &le; 100000.\n</p>\n\n<p>\nThe input end with a line consisting of a single 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the maximum sum in a line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n19\n14\n1001\n</pre>\n\n\n", "p00023": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n<H1>Circles Intersection</H1>\n\n<p>\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\n</p>\n<p>\nWrite a program which prints:\n</p>\n<ul>\n<li>\"2\" if $B$ is in $A$,</li>\n<li>\"-2\" if $A$ is in $B$, </li>\n<li>\"1\" if circumference of $A$ and $B$ intersect, and</li>\n<li>\"0\" if $A$ and $B$ do not overlap.</li>\n</ul>\n\n<p>\nYou may assume that $A$ and $B$ are not identical.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:<br/>\n<br/>\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$<br/>\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print 2, -2, 1, or 0 in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n2\n0\n</pre>\n\n\n\n", "p00025": "\n<H1>Hit and Blow</H1>\n\n<p>\nLet's play Hit and Blow game. <i>A</i> imagines four numbers and <i>B</i> guesses the numbers. After <i>B</i> picks out four numbers, <i>A</i> answers:\n</p>\n\n<ul>\n<li> The number of numbers which have the same place with numbers <i>A</i> imagined (Hit) </li>\n<li> The number of numbers included (but different place) in the numbers <i>A</i> imagined (Blow)</li>\n</ul>\n\n<p>\nFor example, if <i>A</i> imagined numbers:\n</p>\n\n<pre>\n9 1 8 2\n</pre>\n<p>\nand <i>B</i> chose:\n</p>\n<pre>\n4 1 5 9\n</pre>\n<p>\n<i>A</i> should say 1 Hit and 1 Blow.\n</p>\n\n\n<p>\nWrite a program which reads four numbers <i>A</i> imagined and four numbers <i>B</i> chose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\n</p>\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset set consists of:\n</p>\n<pre>\n<var>a<sub>1</sub></var> <var>a<sub>2</sub></var> <var>a<sub>3</sub></var> <var>a<sub>4</sub></var>\n<var>b<sub>1</sub></var> <var>b<sub>2</sub></var> <var>b<sub>3</sub></var> <var>b<sub>4</sub></var>\n</pre>\n<p>\n, where <var>a<sub>i</sub></var> (0 &le; <var>a<sub>i</sub></var> &le; 9) is <var>i</var>-th number <i>A</i>  imagined and <var>b<sub>i</sub></var> (0 &le; <var>b<sub>i</sub></var> &le; 9) is <var>i</var>-th number <i>B</i> chose.\n</p>\n\n<p>\nThe input ends with EOF. The number of datasets is less than or equal to 50.\n</P>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n1 1\n3 0\n</pre>\n\n\n\n", "p00027": "\n\n<H1>What day is today?</H1>\n\n<p>\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers <var>m</var> and <var>d</var> separated by a single space in a line. These integers respectively represent the month and the day. \n</p>\n\n<p>\nThe number of datasets is less than or equal to 50.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the day (please see the following words) in a line.\n</p>\n<pre>\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\n</pre>\n\n\n\n<H2>Sample Input</H2>\n\n<pre>\n1 1\n2 29\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nThursday\nSunday\n</pre>\n\n\n", "p00028": "\n<h1>Mode Value</h1>\n\n<p>\nYour task is to write a program which reads a sequence of integers and prints mode values of the sequence.\nThe mode value is the element which occurs most frequently. \n</p>\n\n<H2>Input</H2>\n\n<p>\nA sequence of integers <var>a<sub>i</sub></var> (1 &le; <var>a<sub>i</sub></var> &le; 100). The number of integers is less than or equals to 100.\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the mode values. If there are several mode values, print them in ascending order.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n5\n6\n3\n5\n8\n7\n5\n3\n9\n7\n3\n4\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n3\n5\n</pre>\n\n<p>\nFor example, 3 and 5 respectively occur three times, 7 occurs two times, and others occur only one. So, the mode values are 3 and 5.\n</p>\n\n\n", "p00029": "\n<H1>English Sentence</H1>\n\n<p>\nYour task is to write a program which reads a text and prints two words. The first one is the word which is arise most frequently in the text. The second one is the word which has the maximum number of letters.\n</p>\n\n<p>\nThe text includes only alphabetical characters and spaces. A word is a sequence of letters which is separated by the spaces. \n</p>\n\n<H2>Input</H2>\n\n<p>\nA text is given in a line. You can assume the following conditions:\n</p>\n\n<ul>\n<li>The number of letters in the text is less than or equal to 1000.</li>\n<li> The number of letters in a word is less than or equal to 32.</li>\n<li> There is only one word which is arise most frequently in given text.</li>\n<li> There is only one word which has the maximum number of letters in given text.</li>\n</ul>\n\n<H2>Output</H2>\n\n<p>\nThe two words separated by a space.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\nThank you for your mail and your lectures\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nyour lectures\n</pre>\n\n\n\n", "p00100": "\n<H1>Sale Result</H1>\n\n<p>\nThere is data on sales of your company. Your task is to write a program which identifies good workers.\n</p>\n\n<p>\nThe program should read a list of data where each item includes the employee ID <i>i</i>, the amount of sales <i>q</i> and the corresponding unit price <i>p</i>. Then, the program should print IDs of employees whose total sales proceeds (i.e. sum of p &times; q) is greater than or equal to 1,000,000 in the order of inputting. If there is no such employees, the program should print \"NA\". You can suppose that <i>n</i> &lt; 4000, and each employee has an unique ID. The unit price <i>p</i> is less than or equal to 1,000,000 and the amount of sales <i>q</i> is less than or equal to 100,000.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several datasets. The input ends with a line including a single 0. Each dataset consists of:\n</p>\n<pre class=\"exp\">\n<i>n</i> (the number of data in the list)\n<i>i</i> <i>p</i> <i>q</i>\n<i>i</i> <i>p</i> <i>q</i>\n :\n :\n<i>i</i> <i>p</i> <i>q</i>\n</pre>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print a list of employee IDs or a text \"NA\"\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n4\n1001 2000 520\n1002 1800 450\n1003 1600 625\n1001 200 1220\n2\n1001 100 3\n1005 1000 100\n2\n2013 5000 100\n2013 5000 100\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n1001\n1003\nNA\n2013\n</pre>\n\n\n", "p00101": "\n<H1>Aizu PR</H1>\n\n<p>\nAn English booklet has been created for publicizing Aizu to the world.\nWhen you read it carefully, you found a misnomer (an error in writing) on the last name of Masayuki Hoshina, the lord of the Aizu domain. The booklet says \"Hoshino\" not \"Hoshina\".\n</p>\n\n<p>\nYour task is to write a program which replace all the words \"Hoshino\" with \"Hoshina\". You can assume that the number of characters in a text is less than or equal to 1000.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several datasets. There will be the number of datasets <i>n</i> in the first line. There will be <i>n</i> lines. A line consisting of english texts will be given for each dataset.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the converted texts in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n3\nHoshino\nHashino\nMasayuki Hoshino was the grandson of Ieyasu Tokugawa.\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nHoshina\nHashino\nMasayuki Hoshina was the grandson of Ieyasu Tokugawa.\n</pre>\n\n", "p00103": "\n<H1>Baseball Simulation</H1>\n\n<p>\nIchiro likes baseball and has decided to write a program which simulates baseball.</p>\n\n<p>\nThe program reads events in an inning and prints score in that inning. There are only three events as follows:\n</p>\n\n<p>Single hit</p>\n<ul>\n<li>put a runner on the first base.</li>\n<li>the runner in the first base advances to the second base and the runner in the second base advances to the third base.</li>\n<li>the runner in the third base advances to the home base (and go out of base) and a point is added to the score.</li>\n</ul>\n\n<p>Home run</p>\n<ul>\n<li>all the runners on base advance to the home base.</li>\n<li>points are added to the score by an amount equal to the number of the runners plus one.</li>\n</ul>\n\n<p>Out</p>\n<ul>\n<li>The number of outs is increased by 1.</li>\n<li>The runners and the score remain stationary.</li>\n<li>The inning ends with three-out.</li>\n</ul>\n\n<p>\nIchiro decided to represent these events using \"HIT\", \"HOMERUN\" and \"OUT\", respectively.\n</p>\n\n<p>Write a program which reads events in an inning and prints score in that inning. You can assume that the number of events is less than or equal to 100.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several datasets. In the first line, the number of datasets <i>n</i> is given. Each dataset consists of a list of events (strings) in an inning.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, prints the score in the corresponding inning.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n2\nHIT\nOUT\nHOMERUN\nHIT\nHIT\nHOMERUN\nHIT\nOUT\nHIT\nHIT\nHIT\nHIT\nOUT\nHIT\nHIT\nOUT\nHIT\nOUT\nOUT\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n7\n0\n</pre>\n\n\n", "p00104": "\n\n<H1>Magic Tile</H1>\n\n<p>\nThere is a magic room in a homestead. The room is paved with H &times W tiles. There are five different tiles:\n</p>\n\n<ul>\n<li>Tile with a east-pointing arrow</li>\n<li>Tile with a west-pointing arrow</li>\n<li>Tile with a south-pointing arrow</li>\n<li>Tile with a north-pointing arrow</li>\n<li>Tile with nothing</li>\n</ul>\n<p>\nOnce a person steps onto a tile which has an arrow, the mystic force makes the person go to the next tile pointed by the arrow. If the next tile has an arrow, the person moves to the next, ans so on. The person moves on until he/she steps onto a tile which does not have the arrow (the tile with nothing). The entrance of the room is at the northwest corner.\n</p>\n\n<p>\nYour task is to write a program which simulates the movement of the person in the room. The program should read strings which represent the room and print the last position of the person.\n</p>\n\n<p>\nThe input represents the room as seen from directly above, and up, down, left and right side of the input correspond to north, south, west and east side of the room respectively. The horizontal axis represents <i>x</i>-axis (from 0 to W-1, inclusive) and the vertical axis represents <i>y</i>-axis (from 0 to H-1, inclusive). The upper left tile corresponds to (0, 0).\n</p>\n<p>\nThe following figure shows an example of the input:\n</p>\n\n<pre>\n10 10\n>>>v..>>>v\n...v..^..v\n...>>>^..v\n.........v\n.v<<<<...v\n.v...^...v\n.v...^<<<<\n.v........\n.v...^....\n.>>>>^....\n</pre>\n\n<p>\nCharacters represent tiles as follows:\n</p>\n<pre>\n'>': Tile with a east-pointing arrow\n'<': Tile with a west-pointing arrow \n'^': Tile with a north-pointing arrow \n'v': Tile with a south-pointing arrow \n'.': Tile with nothing\n</pre>\n\n<p>\nIf the person goes in cycles forever, your program should print \"LOOP\". You may assume that the person never goes outside of the room.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. The input ends with a line which contains two 0. Each dataset consists of:\n</p>\n<pre class=\"exp\">\nH W\nH lines where each line contains W characters\n</pre>\n\n<p>\nYou can assume that 0 &lt; W, H &lt; 101.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the coordinate (X, Y) of the person or \"LOOP\" in a line. X and Y should be separated by a space.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n10 10\n>>>v..>>>v\n...v..^..v\n>>>>>>^..v\n.........v\n.v<<<<...v\n.v.v.^...v\n.v.v.^<<<<\n.v.v.....v\n.v...^...v\n.>>>>^....\n6 10\n>>>>>>>>>v\n.........v\n.........v\n>>>>v....v\n^...v....v\n^<<<<<<<<<\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n5 7\nLOOP\n</pre>\n\n\n", "p00106": "\n<H1>Discounts of Buckwheat</H1>\n\n<p>\nAizu is famous for its buckwheat. There are many people who make buckwheat noodles by themselves.\n</p>\n\n<p>\n  One day, you went shopping to buy buckwheat flour. You can visit three shops, A, B and C. The amount in a bag and its unit price for each shop is determined by the follows table. Note that it is discounted when you buy buckwheat flour in several bags.\n</p>\n\n<center>\n<table class=\"withborder\">\n<tr><th></th><th>             Shop A </th><th>    Shop B   </th><th>  Shop C</th></tr>\n<tr><th>  Amount in a bag </th><td>   200g</td><td>   300g</td><td>   500g</td></tr>\n<tr><th> Unit price for a bag (nominal cost)</th><td> 380 yen </td><td>  550 yen </td><td>  850 yen</td></tr>\n<tr><th> Discounted units </th><td> per 5 bags </td><td>per 4 bags </td><td>per 3 bags</td></tr>\n<tr><th> Discount rate</th><td>   reduced by 20 %</td><td>  reduced by 15 %</td><td>  reduced by 12 %</td></tr>\n</table>\n</center>\n<br/>\n\n<p>\n For example, when you buy 12 bags of flour at shop A, the price is reduced by 20 % for 10 bags, but not for other 2 bags. So, the total amount shall be (380 &times; 10) &times; 0.8 + 380 &times; 2 = 3,800 yen.\n</p>\n\n<p>\n  Write a program which reads the amount of flour, and prints the lowest cost to buy them. Note that you should buy the flour of exactly the same amount as the given input.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of multiple datasets. For each dataset, an integer <var>a</var> (500 &le; <var>a</var> &le; 5000, <var>a</var> is divisible by 100) which represents the amount of flour is given in a line.\n</p>\n\n<p>\n  The input ends with a line including a zero. Your program should not process for the terminal symbol. The number of datasets does not exceed 50.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each dataset, print an integer which represents the lowest cost.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n500\n2200\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n850\n3390\n</pre>\n\n\n\n", "p00107": "\n\n\n<H1>Carry a Cheese</H1>\n\n<p>\nJerry is a little mouse. He is trying to survive from the cat Tom. Jerry is carrying a parallelepiped-like piece of cheese of size <i>A</i> &times; <i>B</i> &times; <i>C</i>. It is necessary to trail this cheese to the Jerry's house. There are several entrances in the Jerry's house. Each entrance is a rounded hole having its own radius <i>R</i>. Could you help Jerry to find suitable holes to be survive?\n\n</p>\n\n<p>\nYour task is to create a program which estimates whether Jerry can trail the cheese via each hole.\nThe program should print \"<span>OK</span>\" if Jerry can trail the cheese via the corresponding hole (without touching it). Otherwise the program should print \"<span>NA</span>\".\n</p>\n<p>\nYou may assume that the number of holes is less than 10000.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. The end of input is indicated by a line containing three zeros. Each dataset is formatted as follows:\n</p>\n<pre>\n<i>A B C</i>\n<i>n</i>\n<i>R</i><sub>1</sub>\n<i>R</i><sub>2</sub>\n\n .\n .\n<i>R</i><sub><i>n</i></sub>\n</pre>\n\n<p>\n<i>n</i> indicates the number of holes (entrances) and <i>R<sub>i</sub></i> indicates the radius of <i>i</i>-th hole.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each datasets, the output should have <i>n</i> lines. Each line points the result of estimation of the corresponding hole. \n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n10 6 8\n5\n4\n8\n6\n2\n5\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nNA\nOK\nOK\nNA\nNA\n</pre>\n\n\n", "p00109": "\n\n<H1>Smart Calculator</H1>\n\n<p>\nYour task is to write a program which reads an expression and evaluates it.\n</p>\n\n<ul>\n<li>The expression consists of numerical values, operators and parentheses, and the ends with '='.</li>\n<li>The operators includes +, - , *, / where respectively represents, addition, subtraction, multiplication and division.</li>\n<li> Precedence of the operators is based on usual laws. That is one should perform all multiplication and division first, then addition and subtraction. When two operators have the same precedence, they are applied from left to right.\n</li>\n<li>You may assume that there is no division by zero.</li>\n<li>All calculation is performed as integers, and after the decimal point should be truncated</li>\n<li>Length of the expression will not exceed 100.</li>\n<li>-1 &times 10<sup>9</sup> &le; intermediate results of computation &le; 10<sup>9</sup></li>\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. The first line contains an integer <i>n</i> which represents the number of datasets. There will be <i>n</i> lines where each line contains an expression.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each datasets, prints the result of calculation.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n2\n4-2*3=\n4*(8+4+3)=\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n-2\n60\n</pre>\n\n\n\n", "p00150": "\n<H1>Twin Prime</H1>\n\n<p>\nPrime numbers are widely applied for cryptographic and communication technology.\nA twin prime is a prime number that differs from another prime number by 2.\nFor example, (5, 7) and (11, 13) are twin prime pairs.\n</p>\n\n<p>\nIn this problem, we call the greater number of a twin prime \"size of the twin prime.\"\n</p>\n\n<p>\nYour task is to create a program which reads an integer <i>n</i> and prints a twin prime which has the maximum size among twin primes less than or equals to <i>n</i>\n</p>\n\n<p>\nYou may assume that 5 &le; <i>n</i> &le; 10000.\n</p>\n\n\n<H2>Input</H2>\n<p>\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset is formatted as follows:\n</p>\n<pre>\n<i>n</i> (integer)\n</pre>\n\n<H2>Output</H2>\n<p>\nFor each dataset, print the twin prime <i>p</i> and <i>q</i> (<i>p</i> &lt; <i>q</i>). <i>p</i> and <i>q</i> should be separated by a single space.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n12\n100\n200\n300\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n5 7\n71 73\n197 199\n281 283\n</pre>", "p00354": "\n\n<!--<H1>X-th day of September</H1>-->\n<h1>Day of Week</h1>\n\n\n<p>\n  The 9th day of September 2017 is Saturday. Then, what day of the week is the X-th of September 2017? \n</p>\n\n<p>\n  Given a day in September 2017, write a program to report what day of the week it is.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>X</var>\n</pre>\n<p>\n  The input line specifies a day <var>X</var> (1 &le; <var>X</var> &le; 30) in September 2017.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\nOutput what day of the week it is in a line. Use the following conventions in your output: \"<span>mon</span>\" for Monday, \"<span>tue</span>\" for Tuesday, \"<span>wed</span>\" for Wednesday, \"<span>thu</span>\" for Thursday, \"<span>fri</span>\" for Friday, \"<span>sat</span>\" for Saturday, and \"<span>sun</span>\" for Sunday.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n1\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\nfri\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n9\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\nsat\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n30\n</pre>\n\n<h2>Sample Output 3</h2>\n<pre>\nsat\n</pre>\n", "p00355": "\n\n<H1>Reservation System</H1>\n\n<p>\nThe supercomputer system L in the PCK Research Institute performs a variety of calculations upon request from external institutes, companies, universities and other entities. To use the L system, you have to reserve operation time by specifying the start and end time. No two reservation periods are allowed to overlap each other.\n</p>\n\n<p>\n  Write a program to report if a new reservation overlaps with any of the existing reservations. Note that the coincidence of start and end times is not considered to constitute an overlap. All the temporal data is given as the elapsed time from the moment at which the L system starts operation.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>a</var> <var>b</var>\n<var>N</var>\n<var>s_1</var> <var>f_1</var>\n<var>s_2</var> <var>f_2</var>\n:\n<var>s_N</var> <var>f_N</var>\n</pre>\n\n<p>\nThe first line provides new reservation information, i.e., the start time <var>a</var> and end time <var>b</var> (0 &le; <var>a</var> &lt; <var>b</var> &le; 1000) in integers. The second line specifies the number of existing reservations <var>N</var> (0 &le; <var>N</var> &le; 100). Subsequent <var>N</var> lines provide temporal information for the <var>i</var>-th reservation: start time <var>s_i</var> and end time <var>f_i</var> (0 &le; <var>s_i</var> &lt; <var>f_i</var> &le; 1000) in integers. No two existing reservations overlap.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Output \"1\" if the new reservation temporally overlaps with any of the existing ones, or \"0\" otherwise.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n5 7\n3\n1 4\n4 5\n7 10\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n0\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n3 7\n3\n7 10\n1 4\n4 5\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n1\n</pre>\n", "p00357": "<H1>Trampoline</H1>\n\n<p>\n  A plurality of trampolines are arranged in a line at 10 m intervals. Each trampoline has its own maximum horizontal distance within which the jumper can jump safely. Starting from the left-most trampoline, the jumper jumps to another trampoline within the allowed jumping range. The jumper wants to repeat jumping until he/she reaches the right-most trampoline, and then tries to return to the left-most trampoline only through jumping. Can the jumper complete the roundtrip without a single stepping-down from a trampoline?\n</p>\n\n<p>\n  Write a program to report if the jumper can complete the journey using the list of maximum horizontal reaches of these trampolines. Assume that the trampolines are points without spatial extent.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>N</var>\n<var>d_1</var>\n<var>d_2</var>\n:\n<var>d_N</var>\n</pre>\n\n<p>\nThe first line provides the number of trampolines <var>N</var> (2 &le; <var>N</var> &le; 3 &times; 10<sup>5</sup>). Each of the subsequent <var>N</var> lines gives the maximum allowable jumping distance in integer meters for the <var>i</var>-th trampoline <var>d_i</var> (1 &le; <var>d_i</var> &le; 10<sup>6</sup>).\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  Output \"<span>yes</span>\" if the jumper can complete the roundtrip, or \"<span>no</span>\" if he/she cannot.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n20\n5\n10\n1\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\nno\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n3\n10\n5\n10\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\nno\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n4\n20\n30\n1\n20\n</pre>\n\n<h2>Sample Output 3</h2>\n<pre>\nyes\n</pre>\n", "p00360": "<H1>Swapping Characters</H1>\n\n\n<p>\n  You are given a string and a number <var>k</var>. You are suggested to generate new strings by swapping any adjacent pair of characters in the string up to <var>k</var> times. Write a program to report the lexicographically smallest string among them.\n  \n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>s</var>\n<var>k</var>\n</pre>\n\n<p>\nThe first line provides a string <var>s</var>. The second line provides the maximum number of swapping operations <var>k</var> (0 &le; <var>k</var> &le; 10<sup>9</sup>). The string consists solely of lower-case alphabetical letters and has a length between 1 and 2 &times; 10<sup>5</sup>.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  Output the lexicographically smallest string.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\npckoshien\n3\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\nckopshien\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\npckoshien\n10\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\ncekophsin\n</pre>\n", "p00361": "<!--<H1>Modification of Road Network</H1>-->\n<h1>Road Improvement</h1>\n\n<p>\nAizu is a country famous for its rich tourism resources and has <var>N</var> cities, each of which is uniquely identified with a number (0 to <var>N</var>-1). It has a road network consisting of <var>M</var> one-way roads connecting a city to another.\n</p>\n\n<p>\n  All the roads connecting the cities in Aizu have a row of cherry trees along their routes. For enhancing the cherry-viewing experience, a proposal was made to modify the road network so that a tourist can travel around all the roads. To achieve this target, it was decided to construct several one-way roads, each connecting two cities and abiding by the following rules.\n</p>\n\n<ul>\n<li>The newly constructed road is for one-way traffic</li>\n<li>Starting from any city, a tourist is able to make a roundtrip and return to the city, whereby he/she drives all the roads exhaustively, including the newly constructed ones. Multiple passages of some of the roads are allowed.</li>\n</ul>\n\n<p>\n  You, as a tourism promotion officer, are assigned with the task of writing a program for the road construction project.\n</p>\n\n<p>\n  Write a program to determine the minimum number of roads to be constructed given the road network information in Aizu.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n<pre>\n<var>N</var> <var>M</var>\n<var>s_1</var> <var>t_1</var>\n<var>s_2</var> <var>t_2</var>\n:\n<var>s_M</var> <var>t_M</var>\n</pre>\n\n<p>\nThe first line provides the number of cities <var>N</var> (1 &le; <var>N</var> &le; 10<sup>4</sup>) and roads <var>M</var> (0 &le; <var>M</var> &le; 10<sup>5</sup>). Each of the subsequent <var>M</var> lines provides the numbers assigned to start and destination cities for the <var>i</var>-th road: <var>s_i</var>, <var>t_i</var> (0 &le; <var>s_i</var>, <var>t_i</var> &le; <var>N</var>-1) , where <var>s_i &ne; t_i</var>. (no duplicate appearance of a road)\n  \n</p>\n\n<h2>Output</h2>\n\n<p>\n  Output the minimum number of roads to be newly constructed.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n6 7\n0 2\n2 1\n1 0\n2 3\n4 3\n4 5\n5 4\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n2\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n6 9\n0 2\n2 1\n1 0\n2 3\n4 3\n4 5\n5 4\n5 2\n3 4\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n0\n</pre>\n", "p00369": "<H1>Paper Fortune</H1>\n\n<p>\nIf you visit Aizu Akabeko shrine, you will find a unique paper fortune on which a number with more than one digit is written. \n</p>\n\n<p>\nEach digit ranges from 1 to 9 (zero is avoided because it is considered a bad omen in this shrine). Using this string of numeric values, you can predict how many years it will take before your dream comes true. Cut up the string into more than one segment and compare their values. The difference between the largest and smallest value will give you the number of years before your wish will be fulfilled. Therefore, the result varies depending on the way you cut up the string. For example, if you are given a string 11121314 and divide it into segments, say, as 1,11,21,3,14, then the difference between the largest and smallest is 21 - 1 = 20. Another division 11,12,13,14 produces 3 (i.e. 14 - 11) years. Any random division produces a game of luck. However, you can search the minimum number of years using a program.\n  \n</p>\n\n<p>\nGiven a string of numerical characters, write a program to search the minimum years before your wish will be fulfilled.\n  \n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>n</var>\n</pre>\n\n<p>\n  An integer <var>n</var> is given. Its number of digits is from 2 to 100,000, and each digit ranges from 1 to 9.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  Output the minimum number of years before your wish will be fulfilled.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n11121314\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n3\n</pre>\n\n\n<h2>Sample Input 2</h2>\n\n<pre>\n123125129\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n6\n</pre>\n\n\n<h2>Sample Input 3</h2>\n\n<pre>\n119138\n</pre>\n\n<h2>Sample Output 3</h2>\n<pre>\n5\n</pre>\n", "p00370": "<H1>Lake Survery</H1>\n\n<p>\n  The Onogawa Expedition is planning to conduct a survey of the Aizu nature reserve. The expedition planner wants to take the shortest possible route from the start to end point of the survey, while the expedition has to go around the coast of the Lake of Onogawa en route. The expedition walks along the coast of the lake, but can not wade across the lake.\n</p>\n\n<p>\n  Based on the base information including the start and end point of the survey and the area of Lake Onogawa as convex polygon data, make a program to find the shortest possible route for the expedition and calculate its distance. Note that the expedition can move along the polygonal lines passing through the nodes, but never enter within the area enclosed by the polygon.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>x_s</var> <var>y_s</var>\n<var>x_g</var> <var>y_g</var>\n<var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>x_2</var> <var>y_2</var>\n:\n<var>x_N</var> <var>y_N</var>\n</pre>\n\n<p>\nThe first line provides the start point of the survey <var>x_s,y_s</var> (0&le;<var>x_s,y_s</var>&le;10<sup>4</sup>), and the second line provides the end point <var>x_g,y_g</var> (0 &le; <var>x_g,y_g</var> &le; 10<sup>4</sup>) all in integers. The third line provides the number of apexes <var>N</var> (3 &le; <var>N</var> &le; 100) of the polygon that represents the lake, and each of the subsequent <var>N</var> lines provides the coordinate of the <var>i</var>-th apex <var>x_i,y_i</var> (0 &le; <var>x_i,y_i</var> &le; 10<sup>4</sup>) in counter-clockwise order. These data satisfy the following criteria:\n\n\n</p>\n<ul>\n<li>Start and end points of the expedition are not within the area enclosed by the polygon nor on boundaries.</li>\n<li>Start and end points of the expedition are not identical, i.e., <var>x_s &ne; x_g</var> or <var>y_s &ne; y_g</var>.</li>\n<li>No duplicate coordinates are given, i.e., if <var>i &ne; j</var> then <var>x_i &ne; x_r</var> or <var>y_i &ne; y_j</var>.</li>\n<li>The area enclosed by the polygon has a positive value.</li>\n<li>Any three coordinates that define an area are not aligned on a line.</li>\n</ul>\n\n\n<h2>Output</h2>\n\n<p>\n\nOutput the distance of the shortest possible expedition route. Any number of decimal places can be selected as long as the error does not exceed &plusmn; 10<sup>-3</sup>.\n  \n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n0 0\n4 0\n4\n1 1\n2 1\n3 3\n1 2\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n4.472136\n</pre>\n\n\n<h2>Sample Input 2</h2>\n\n<pre>\n4 4\n0 0\n4\n1 1\n3 1\n3 3\n1 3\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n6.32455\n</pre>\n", "p00371": "<H1>Lottery Box</H1>\n\n<p>\nA lottery is being held in a corner of the venue of the Aizu festival. Several types of balls are inside the lottery box and each type has its unique integer printed on the surfaces of the balls. An integer <var>T</var> is printed on the lottery box.\n</p>\n\n<p>\nIn the lottery, you first declare two integers <var>A</var> and <var>B</var>, and draw up to <var>M</var> balls from the box. Let the sum of the integers printed on the balls be <var>S</var>. You can get a wonderful gift if the following two criteria are met: <var>S</var> divided by <var>T</var> gives a remainder greater than or equal to <var>A</var>, and <var>S</var> divided by <var>T</var> gives a quotient (fractional portion dropped) greater than or equal to <var>B</var>.\n</p>\n\n\n<p>\n  Write a program to determine if you have any chance of getting the gift given the following information: the number of ball types, ball-type specific integers, the maximum number of balls to be drawn from the box, the integer printed on the lottery box, and two integers declared before drawing. Assume that each ball type has sufficient (&ge;M) population in the box. Note also that there may be a chance of getting the gift even without drawing any ball.\n</p>\n\n  \n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>N</var> <var>M</var> <var>T</var>\n<var>a_1</var>\n<var>a_2</var>\n:\n<var>a_N</var>\n<var>Q</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n:\n<var>A_Q</var> <var>B_Q</var>\n</pre>\n\n<p>\nThe first line provides the number of ball types <var>N</var>(1&le;<var>N</var>&le;10<sup>5</sup>), the maximum number of balls you can draw from the box <var>M</var>(1&le;<var>M</var>&le;10<sup>5</sup>), and the integer printed on the box <var>T</var>(1&le;<var>T</var>&le;1000). Each of the subsequent <var>N</var> lines provides an integer <var>a_i</var> (1&le;<var>a_i</var>&le;10<sup>9</sup>) printed on the <var>i</var>-th ball type. The next line following these provides the number of declarations <var>Q</var> (1&le;<var>Q</var>&le;10<sup>5</sup>). Each of the <var>Q</var> lines following this provides a pair of integers <var>A_i</var> (0 &le; <var>A_i</var> &lt; <var>T</var>), <var>B_i</var> (0 &le; <var>B_i</var> &le; 10<sup>9</sup>) that constitute the <var>i</var>-th declaration.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  Output a line for each pair of declaration <var>A</var> and <var>B</var> that contains \"<span>yes</span>\" if there is a chance of getting the gift or \"<span>no</span>\" otherwise.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n3 2 7\n8\n3\n6\n5\n2 2\n3 2\n4 1\n6 1\n6 0\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\nyes\nno\nyes\nno\nyes\n</pre>\n", "p00373": "<H1>Aerial Photos</H1>\n\n<p>\nHideyo has come by two aerial photos of the same scale and orientation. You can see various types of buildings, but some areas are hidden by clouds. Apparently, they are of the same area, and the area covered by the second photograph falls entirely within the first. However, because they were taken at different time points, different shapes and distribution of clouds obscure identification where the area in the second photograph is located in the first. There may even be more than one area within the first that the second fits equally well.\n</p>\n\n<p>\n  A set of pixel information is given for each of the photographs. Write a program to extract candidate sub-areas within the first photograph that compare with the second equally well and output the number of the candidates.\n</p>\n\n<h2>Input</h2>\n\n<p>\nThe input is given in the following format.\n</p>\n\n<pre>\n<var>AW</var> <var>AH</var> <var>BW</var> <var>BH</var>\n<var>arow<sub>1</sub></var>\n<var>arow<sub>2</sub></var>\n:\n<var>arow<sub>AH</sub></var>\n<var>brow<sub>1</sub></var>\n<var>brow<sub>2</sub></var>\n:\n<var>brow<sub>BH</sub></var>\n</pre>\n\n<p>\nThe first line provides the number of pixels in the horizontal and the vertical direction <var>AW</var> (1 &le; <var>AW</var> &le; 800) and <var>AH</var> (1 &le; <var>AH</var> &le; 800) for the first photograph, followed by those for the second <var>BW</var> (1 &le; <var>BW</var> &le; 100) and <var>BH</var> (1 &le; <var>BH</var> &le; 100) (<var>AW</var> &ge; <var>BW</var> and<var>AH</var> &ge; <var>BH</var>). Each of the subsequent <var>AH</var> lines provides pixel information (<var>arow<sub>i</sub></var>) of the <var>i</var>-th row from the top of the first photograph. Each of the <var>B</var>H lines that follows provides pixel information (<var>brow<sub>i</sub></var>) of the <var>i</var>-th row from the top of the second photograph.\n\n</p>\n\n<p>\n  Each of the pixel information <var>arow<sub>i</sub></var> and <var>brow<sub>i</sub></var> is a string of length <var>AW</var> and <var>BW</var>, respectively, consisting of upper/lower-case letters, numeric characters, or \"<span>?</span>\". Each one character represents a pixel, whereby upper/lower-case letters and numeric characters represent a type of building, and \"<span>?</span>\" indicates a cloud-covered area.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  Output the number of the candidates.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n5 5 3 3\nAF??z\nW?p88\n???Hk\npU?m?\nF???c\nF??\np?8\n?H?\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n4\n</pre>\n\n\n<h2>Sample Input 2</h2>\n\n<pre>\n6 5 4 2\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaaaa\naaaa\naaaa\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n12\n</pre>\n", "p00374": "<H1>Iron Bars</H1>\n\n<p>\nA boy PCK had <var>N</var> straight iron bars, which were serially indexed. Unfortunately, the first <var>M</var> bars (0 &le; <var>M</var> &le; <var>N</var>) among them were bent during transportation. They all suffered a perpendicular bend at one point.\n</p>\n\n<p>\n  He is planning to make a cube using a set of bars selected using the following rules: <var>X</var> bars from bent ones, <var>Y</var> bars from straight ones, where <var>2X + Y = 12</var>. Any two bars can be jointed only at the apexes of the cube. He wants to count how many types of rectangular parallelepipeds (hereafter RP) he can make using these bars.\n</p>\n\n<p>\nMake a program to count out types (different shapes) of RPs that PCK can make using the following information: the number of bars and length of each one, position of the bend, and the number of bars to be used to construct an RP. Note that any two RPs similar in shape are considered identical: namely if the length of three defining sides of two RPs coincide if arranged in increasing/decreasing order (e.g., three sides of RP <var>i</var> and <var>j</var> are <var>A_i, B_i, C_i</var>, and <var>A_j, B_j</var> and <var>C_j</var> in increasing order, then the relations <var>A_i = A_j, B_i = B_j</var>, and <var>C_i = C_j</var> hold. Note also that the bars are sufficiently thin to allow you to consider them as idealized lines.\n  \n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>N</var> <var>M</var> <var>X</var> <var>Y</var>\n<var>a_1</var>\n<var>a_2</var>\n:\n<var>a_N</var>\n<var>b_1</var>\n<var>b_2</var>\n:\n<var>b_M</var>\n</pre>\n\n<p>\nThe first line provides the total number of iron bars and bent bars, and those straight and bent bars used to construct an RP: <var>N</var> (6 &le; <var>N</var> &le; 6000), <var>M</var> (0 &le; <var>M</var> &le; <var>N</var>), <var>X</var> (0 &le; <var>X</var> &le; 6), and <var>Y</var> (0 &le; <var>Y</var> &le; 12). The following relations always hold for them: <var>2X+Y=12</var>, <var>X+Y</var> &le; <var>N</var>, <var>X</var> &le; <var>M</var>. Each of the subsequent <var>N</var> lines provides the length of the <var>i</var>-th bar <var>a_i</var> (1 &le; <var>a_i</var> &le; 6000) in integers. Furthermore, each of the subsequent <var>M</var> lines provides the location at which the <var>i</var>-th bent bar suffered a perpendicular bend <var>b_i</var> (1 &le; <var>b_i</var> &le; 3000) in centimeters from one end of the bar (note: 1 &le; <var>a_i-b_i</var> &le; 3000).\n  \n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  Output the number of constructible rectangular parallelepipeds.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n18 8 3 6\n4\n3\n3\n3\n3\n2\n2\n2\n1\n1\n1\n1\n1\n2\n2\n3\n3\n3\n1\n1\n1\n1\n1\n1\n1\n1\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n3\n</pre>\n", "p00381": "<h1>Transporter</h1>\n\n<p>\n  In the year 30XX, an expedition team reached a planet and found a warp machine suggesting the existence of a mysterious supercivilization. When you go through one of its entrance gates, you can instantaneously move to the exit irrespective of how far away it is. You can move even to the end of the universe at will with this technology!\n</p>\n<p>\n  The scientist team started examining the machine and successfully identified all the planets on which the entrances to the machine were located. Each of these N planets (identified by an index from $1$ to $N$) has an entrance to, and an exit from the warp machine. Each of the entrances and exits has a letter inscribed on it.\n</p>\n<p>\n  The mechanism of spatial mobility through the warp machine is as follows:\n</p>\n<ul>\n<li>If you go into an entrance gate labeled with c, then you can exit from any gate with label c.</li>\n<li>If you go into an entrance located on the $i$-th planet, then you can exit from any gate located on the $j$-th planet where $i < j$.</li>\n</ul>\n\n<p>\n  Once you have reached an exit of the warp machine on a planet, you can continue your journey by entering into the warp machine on the same planet. In this way, you can reach a faraway planet. Our human race has decided to dispatch an expedition to the star $N$, starting from Star $1$ and using the warp machine until it reaches Star $N$. To evaluate the possibility of successfully reaching the destination. it is highly desirable for us to know how many different routes are available for the expedition team to track.\n</p>\n\n<p>\n  Given information regarding the stars, make a program to enumerate the passages from Star $1$ to Star $N$.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input is given in the following format.\n</p>\n<pre>\n$N$\n$s$\n$t$\n</pre>\n<p>\n  The first line provides the number of the stars on which the warp machine is located $N$ ($2 \\leq N \\leq 100,000$). The second line provides a string $s$ of length $N$, each component of which represents the letter inscribed on the entrance of the machine on the star. By the same token, the third line provides a string $t$ of length $N$ consisting of the letters inscribed on the exit of the machine. Two strings $s$ and $t$ consist all of lower-case alphabetical letters, and the $i$-th letter of these strings corresponds respectively to the entrance and exit of Star $i$ machine.\n</p>\n\n<h2>Output</h2>\n<p>\n  Divide the number of possible routes from Star $1$ to Star $N$ obtained above by 1,000,000,007, and output the remainder.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n6\nabbaba\nbaabab\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n5\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n25\nneihsokcpuziafoytisrevinu\nuniversityofaizupckoshien\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n4\n</pre>\n", "p00387": "<h1>Party Dress</h1>\n<p>\nYae joins a journey plan, in which parties will be held several times during the itinerary. She wants to participate in all of them and will carry several dresses with her. But the number of dresses she can carry with her may be smaller than that of the party opportunities. In that case, she has to wear some of her dresses more than once.  \n</p>\n\n<p>\n  Fashion-conscious Yae wants to avoid that. At least, she wants to reduce the maximum number of times she has to wear the same dress as far as possible.\n</p>\n\n<p>\n  Given the number of dresses and frequency of parties, make a program to determine how she can reduce the maximum frequency of wearing the most reused dress.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input is given in the following format.\n</p>\n<pre>\n$A$ $B$\n</pre>\n\n<p>\n  The input line provides the number of dresses $A$ ($1 \\leq A \\leq 10^5$) and frequency of parties $B$ ($1 \\leq B \\leq 10^5$).\n</p>\n\n\n<h2>Output</h2>\n<p>\n  Output the frequency she has to wear the most reused dress.\n</p>\n\n\n<h2>Sample Input 1</h2>\n<pre>\n3 5\n</pre>\n<h2>Sample Output 1</h2>\n<pre>\n2\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n25 10\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n1 \n</pre>\n", "p00389": "<h1>Pilling Blocks</h1>\n<p>\n  We make a tower by stacking up blocks. The tower consists of several stages and each stage is constructed by connecting blocks horizontally. Each block is of the same weight and is tough enough to withstand the weight equivalent to up to $K$ blocks without crushing.\n</p>\n\n<p>\n  We have to build the tower abiding by the following conditions:\n</p>\n<ul>\n<li>Every stage of the tower has one or more blocks on it.</li>\n<li>Each block is loaded with weight that falls within the withstanding range of the block. The weight loaded on a block in a stage is evaluated by: total weight of all blocks above the stage divided by the number of blocks within the stage.</li>\n</ul>\n\n<p>\n  Given the number of blocks and the strength, make a program to evaluate the maximum height (i.e., stages) of the tower than can be constructed.\n</p>\n\n\n<h2>Input</h2>\n<p>\nThe input is given in the following format.\n</p>\n\n<pre>\n$N$ $K$\n</pre>\n<p>\n  The input line provides the number of blocks available $N$ ($1 \\leq N \\leq 10^5$) and the strength of the block $K$ ($1 \\leq K \\leq 10^5$).\n</p>\n\n<h2>Output</h2>\n<p>\n  Output the maximum possible number of stages.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n4 2\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n3\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n5 2\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n4\n</pre>\n", "p00390": "<h1>Round Table of Sages</h1>\n<p>\n  $N$ sages are sitting around a round table with $N$ seats. Each sage holds chopsticks with his dominant hand to eat his dinner. The following happens in this situation.\n</p>\n\n<ul>\n<li>If sage $i$ is right-handed and a left-handed sage sits on his right, a level of frustration $w_i$ occurs to him. A right-handed sage on his right does not cause such frustration at all.</li>\n<li>If sage $i$ is left-handed and a right-handed sage sits on his left, a level of frustration $w_i$ occurs to him. A left-handed sage on his left does not cause such frustration at all.</li>\n</ul>\n\n<p>\n  You wish you could minimize the total amount of frustration by clever sitting order arrangement.\n</p>\n<p>\n  Given the number of sages with his dominant hand information, make a program to evaluate the minimum frustration achievable.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input is given in the following format.\n</p>\n<pre>\n$N$\n$a_1$ $a_2$ $...$ $a_N$\n$w_1$ $w_2$ $...$ $w_N$ \n</pre>\n\n<p>\nThe first line provides the number of sages $N$ ($3 \\leq N \\leq 10$). The second line provides an array of integers $a_i$ (0 or 1) which indicate if the $i$-th sage is right-handed (0) or left-handed (1). The third line provides an array of integers $w_i$ ($1 \\leq w_i \\leq 1000$) which indicate the level of frustration the $i$-th sage bears.\n</p>\n\n<h2>Output</h2>\n<p>\n  Output the minimum total frustration the sages bear.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n5\n1 0 0 1 0\n2 3 5 1 2\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n3\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n3\n0 0 0\n1 2 3\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n0 \n</pre>\n", "p00392": "<h1>Common-Prime Sort</h1>\n\n<p>\nYou are now examining a unique method to sort a sequence of numbers in increasing order. The method only allows swapping of two numbers that have a common prime factor. For example, a sequence [6, 4, 2, 3, 7] can be sorted using the following steps.\n<br/>\n\n<span>Step 0: 6 4 2 3 7</span> (given sequence)<br/>\n<span>Step 1: 2 4 6 3 7</span> (elements 6 and 2 swapped)<br/>\n<span>Step 2: 2 6 4 3 7</span> (elements 4 and 6 swapped)<br/>\n<span>Step 3: 2 3 4 6 7</span> (elements 6 and 3 swapped)<br/>\n</p>\n\n<p>\n  Depending on the nature of the sequence, however, this approach may fail to complete the sorting. You have given a name \"Coprime sort\" to this approach and are now examining if a given sequence is coprime-sortable.\n</p>\n\n<p>\n  Make a program to determine if a given sequence can be sorted in increasing order by iterating an arbitrary number of swapping operations of two elements that have a common prime number.\n</p>\n\n\n<h2>Input</h2>\n<p>\nThe input is given in the following format.\n</p>\n<pre>\n$N$\n$a_1$ $a_2$ $...$ $a_N$\n</pre>\n\n<p>\nThe first line provides the number of elements included in the sequence $N$ ($2 \\leq N \\leq 10^5$). The second line provides an array of integers $a_i$ ($2 \\leq a_i \\leq 10^5$) that constitute the sequence.\n</p>\n\n<h2>Output</h2>\n<p>\n  Output \"<span>1</span>\" if the sequence is coprime-sortable in increasing order, or \"<span>0</span>\" otherwise.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n5\n6 4 2 3 7\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n1\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n7\n2 9 6 5 6 7 3\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n0\n</pre>\n", "p00398": "<h1>Road Construction</h1>\n\n<p>\nThe Zuia Kingdom has finally emerged through annexation of $N$ cities, which are identified by index from $1$ to $N$. You are appointed the Minister of Transport of the newly born kingdom to construct the inter-city road network.\n</p>\n<p>\nTo simplify the conceptual design planning, you opted to consider each city as a point on the map, so that the $i$-th city can be represented by an coordinate ($x_i, y_i$).\n</p>\n\n<p>\n  The cost of road construction connecting $u$-th and $v$-th cities is equal to the distance $|x_u - x_v|$ or $|y_u - y_v|$, whichever the larger. The notation $|A|$ represents the absolute value of $A$. The object here is to explore the minimum cost required to construct the road network in such a way that people can move between different cities along one or more roads.\n</p>\n\n<p>\n  Make a program to calculate the minimum of total road construction cost from the number of cities and their coordinates.\n</p>\n\n<h2>Input</h2>\n<p>\nThe input is given in the following format.\n</p>\n<pre>\n$N$\n$x_1$ $y_1$\n$x_2$ $y_2$\n...\n$x_N$ $y_N$\n</pre>\n\n<p>\nThe first line provides the number of cities $N$ ($2 \\leq N \\leq 10^5$). Each of the subsequent $N$ lines provides the coordinate of the $i$-th city $x_i, y_i$ ($0 \\leq x_i, y_i \\leq 10^9$) as integers. Note that none of these coordinates coincides if: $i \\ne j$, then $x_i \\ne x_j$ or $y_i \\ne y_j$.\n</p>\n\n<h2>Output</h2>\n<p>\n  Output the minimum road construction cost.\n</p>\n\n\n<h2>Sample Input 1 </h2>\n<pre>\n3\n1 2\n3 4\n10 1\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n9\n</pre>\n<p>\n  The road connecting city 1 and 2 can be constructed at the cost of 2, and that connecting city 2 and 3 at the cost of 7. Therefore, the total cost becomes 9, which is the minimum.\n</p>\n\n<h2>Sample Input 2</h2>\n<pre>\n3\n1 2\n3 4\n3 2\n</pre>\n<h2>Sample Output 2</h2>\n<pre>\n4\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n5\n7 41\n10 0\n99 27\n71 87\n14 25\n</pre>\n\n<h2>Sample Output 3</h2>\n<pre>\n163\n</pre>\n\n", "p00590": "\n\n\n<H1>Pair of Primes</H1>\n\n<p>\n   We arrange the numbers between 1 and N (1 <= N <= 10000) in increasing\norder and decreasing order like this:\n</p>\n<pre>\n1 2 3 4 5 6 7 8 9 . . . N\nN . . . 9 8 7 6 5 4 3 2 1\n</pre>\n\n<p>\nTwo numbers faced each other form a pair. Your task is to compute the number of pairs P such that both\nnumbers in the pairs are prime.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput contains several test cases. Each test case consists of an integer N in\none line.\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each line of input, output P .\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n1\n4\n7\n51\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0\n2\n2\n6\n</pre>\n", "p00592": "\n\n\n\n<H1>Boring Commercial</H1>\n\n<p>\n    Now it is spring holidays. A lazy student has finally passed all final examination, and he decided to just kick back and just watch TV all day. Oh, his\nonly source of entertainment is watching TV. And TV commercial, as usual, are\na big nuisance for him. He can watch any thing on television, but cannot bear\neven a single second of commercial. So to prevent himself from the boredom of\nseeing the boring commercial, he keeps shuffling through the TV channels, so\nthat he can watch programs on different channels without seeing even a single\ncommercial.\n\n</p>\n\n<p>\nGiven the number of channels, and the duration at which the TV commercials\nare showed on each of the channels, you have to write a program which will\nprint the longest interval for which the lazy student can watch the television by\nshuffling between the different channels without ever seeing an TV commercial.\n</p>\n<p>    \nFor example, consider the simplified situation where there are only three\ntelevision channels, and suppose that he is watching TV from 2100 hrs to 2400\nhrs. Suppose that the commercials are displayed at following time on each of\nthe channels.\n</p>\n\n<ul>\n<li> Channel 1: 2100 to 2130, 2200 to 2230 and 2300 to 2330</li>\n<li> Channel 2: 2130 to 2200, 2330 to 2400</li>\n<li> Channel 3: 2100 to 2130, 2330 to 2400</li>\n</ul>\n\n<p>\n    Then in this case, he can watch TV without getting interrupted by commercials for full 3 hours by watching Channel 2 from 2100 to 2130, then Channel 3\nfrom 2130 to 2330, and then Channel 1 from 2330 to 2400.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input will consist of several cases. In each case, the first line of the input\nwill be n, the number of channels, which will then be followed by p and q, the\ntime interval between which he will be watching the TV. It will be followed by\n2n lines, giving the time slots for each of the channels. For each channel, the\nfirst line will be k, the number of commercial slots, and it will then be followed\nby 2k numbers giving the commercial slots in order.\n</p>\n<p>\n    The input will be terminated by values 0 for each of n, p, q. This case should\nnot be processed.\n</p>\n\n<H2>Output</H2>\n\n\n\n<p>\nFor each case, you have to output the maximum duration (in minutes) for which\nhe can watch television without seeing any commercial.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n1 2100 2400\n1\n2130 2200\n3 2100 2400\n3\n2100 2130 2200 2230 2300 2330\n2\n2130 2200 2330 2400\n2\n2100 2130 2330 2400\n0 0 0\n\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n120\n180\n</pre>\n", "p00595": "\n<H1><font color=\"#000000\">Problem A:</font> Greatest Common Divisor</H1>\n\n<p>\nPlease find the greatest common divisor of two natural numbers. A clue is: The Euclid's algorithm is a way to resolve this task.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input file consists of several lines with pairs of two natural numbers in each line. The numbers do not exceed 100000.\n</p>\n\n<p>\nThe number of pairs (datasets) is less than 50.\n</p>\n\n<H2>Output</H2>\n\n<p>\nYour program has to print the greatest common divisor for each pair of input numbers. Print each result on a new line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n57 38\n60 84\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n19\n12\n</pre>", "p00596": "\n<H1><font color=\"#000000\">Problem B:</font> Dominoes Arrangement</H1>\n\n<pre>\n[0, 0]\n[0, 1]  [1, 1]\n[0, 2]  [1, 2]  [2, 2]\n[0, 3]  [1, 3]  [2, 3]  [3, 3]\n[0, 4]  [1, 4]  [2, 4]  [3, 4]  [4, 4]\n[0, 5]  [1, 5]  [2, 5]  [3, 5]  [4, 5]  [5, 5]\n[0, 6]  [1, 6]  [2, 6]  [3, 6]  [4, 6]  [5, 6]  [6, 6]\n</pre>\n\n<p>\nConsider the standard set of 28 western dominoes as shown in the above figure. Given a subset of the standard set dominoes, decide whether this subset can be arranged in a straight row in accordance with the familiar playing rule that touching ends must match. For example, the subset [1, 1], [2, 2], [1, 2] can be arranged in a row (as [1, 1] followed by [1, 2] followed by [2, 2]), while the subset [1, 1], [0, 3], [1, 4] can not be arranged in one row. Note that as in usual dominoes playing any pair [i, j] can also be treated as [j, i].\n</p>\n\n<p>\nYour task is to write a program that takes as input any subset of the dominoes and output either yes (if the input subset can be arranged in one row) or no (if the input set can not be arranged in one row).\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput file consists of pairs of lines. The first line of each pair is the number of elements N (1 &le; N &le; 18) in the subset, and the second line is the elements of the subset separated by blanks, see the input sample below.\n</p>\n\n<p>\nThe number of pairs (datasets) is less than 30.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each pair of lines of the input file, the corresponding output is either Yes or No, based on whether the input subset can be arranged in one line or not.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n6\n13 23 14 24 15 25\n10\n00 01 11 02 12 22 03 13 23 33\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nYes\nNo\n</pre>", "p00598": "\n<H1><font color=\"#000000\">Problem D:</font> Operations with Finite Sets</H1>\n\n<p>\nLet <i>A, B, C, D, E</i> be sets of integers and let <i>U</i> is a universal set that includes all sets under consideration. All elements in any set are different (no repetitions).\n</p>\n\n<p>\nu - <b>union</b> of two sets, <i>AuB</i> = {<i>x &isin; U</i> : <i>x &isin; A</i> or <i>x &isin; B</i>} is the set of all elements which belong to <i>A</i> or <i>B</i>.\n</p>\n\n<p>\ni - <b>intersection</b> of two sets, <i>AiB</i> = {<i>x &isin; U</i> : <i>x &isin; A</i> and <i>x &isin; B</i>} is the set of all elements which belong to both <i>A</i> and <i>B</i>.\n</p>\n\n<p>\nd - <b>difference</b> of two sets, <i>AdB</i> = {<i>x &isin; U</i> : <i>x &isin; A</i>, <i>x &notin; B</i>} is the set of those elements of <i>A</i> which do not belong to <i>B</i>.\n</p>\n\n<p>\ns - <b>symmetric difference</b> of two sets, <i>AsB</i> = (<i>AdB</i>)<i>u</i>(<i>BdA</i>) consists of those elements which belong to <i>A</i> or <i>B</i> but not to both.\n</p>\n\n<p>\nc - <b>complement</b> of a set, <i>cA</i> = {<i>x &isin; U</i> : <i>x &notin; A</i>}, is set of elements which belong to <i>U</i> but do not belong to <i>A</i>. Unary operator <i>c</i> has higest precedence.\n</p>\n\n\n<p>\nThe universal set <i>U</i> is defined as a union of all sets specified in data. \n</p>\n\n<p>\nYour task is to determine the result of an expression, which includes sets, set operations and parenthesis (any number of parenthesis and any correct enclosure of parenthesis may take place).\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput consists of several pairs of lines difining sets and one pair of lines defining an expression. Each pair of lines for set definition includes the following.\n</p>\n\n<p>\n<i>Line 1</i>: Set name (A, B, C, D, E), number of elements in a set.\n</p>\n<p>\n<i>Line 2</i>: Set elements separated by blanks.\n</p>\n<p>\nPair of lines for expression definition:\n</p>\n<p>\n<i>Line 1</i>: R 0\n</p>\n<p>\n<i>Line 2</i>: Expression consisting of set names, operators and parenthesis (no blanks).\n</p>\n\n<p>\nNumber of sets can vary from 1 to 5. Set names can be specified in any order. Each set consists of 1-100 elements. Pair of lines for expression definition signals the end of data set. Input file includes several data sets. The number of datasets is less than 20.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each data set, the output should contain one line with resulting set elements sorted in ascending order separated by blanks. If the result contains no set elements then the line should contain the text NULL.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\nA 3\n1 3 -1\nB 4\n3 1 5 7\nD 1\n5\nR 0\ncAiBdD\nC 3\n1 2 3\nA 4\n2 10 8 3\nB 3\n2 4 8\nR 0\n(As(AiB))uC\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n7\n1 2 3 10\n</pre>", "p00600": "\n<H1><font color=\"#000000\">Problem F:</font> Computation of Minimum Length of Pipeline</H1>\n\n<p>\nThe Aizu Wakamatsu city office decided to lay a hot water pipeline covering the whole area of the city to heat houses. The pipeline starts from some hot springs and connects every district in the city. The pipeline can fork at a hot spring or a district, but no cycle is allowed. The city office wants to minimize the length of pipeline in order to build it at the least possible expense.\n</p>\n\n<p>\nWrite a program to compute the minimal length of the pipeline. The program reads an input that consists of the following three parts:\n</p>\n\n<H2>Input</H2>\n\n\n<ul>\n<li>The first part consists of two positive integers in one line, which represent the number <i>s</i> of hot springs and the number <i>d</i> of districts in the city, respectively.</li>\n<li>The second part consists of <i>s</i> lines: each line contains <i>d</i> non-negative integers. The <i>i</i>-th integer in the <i>j</i>-th line represents the distance between the <i>j</i>-th hot spring and the <i>i</i>-th district if it is non-zero. If zero it means they are not connectable due to an obstacle between them.</li>\n<li>The third part consists of <i>d</i>-1 lines. The <i>i</i>-th line has <i>d - i</i> non-negative integers. The <i>i</i>-th integer in the <i>j</i>-th line represents the distance between the <i>j</i>-th and the (<i>i</i> + <i>j</i>)-th districts if it is non-zero. The meaning of zero is the same as mentioned above.</li>\n</ul>\n\n<p>\nFor the sake of simplicity, you can assume the following:\n</p>\n\n\n<ul>\n<li>The number of hot springs and that of districts do not exceed 50.</li>\n<li>Each distance is no more than 100.</li>\n<li>Each line in the input file contains at most 256 characters.</li>\n<li>Each number is delimited by either whitespace or tab.</li>\n</ul>\n\n\n<p>\nThe input has several test cases. The input terminate with a line which has two 0. The number of test cases is less than 20.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the minimum length of pipeline for each test case.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 5\n12 8 25 19 23\n9 13 16 0 17\n20 14 16 10 22\n17 27 18 16\n9 7 0\n19 5\n21\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n38\n</pre>\n\n\n<H2>Hint</H2>\n<p>\nThe first line correspondings to the first part: there are three hot springs and five districts. The following three lines are the second part: the distances between a hot spring and a district. For instance, the distance between the first hot spring and the third district is 25. The last four lines are the third part: the distances between two districts. For instance, the distance between the second and the third districts is 9. The second hot spring and the fourth district are not connectable The second and the fifth districts are not connectable, either.\n</p>", "p00604": "\n<H1><font color=\"#000000\">Problem J:</font> Cheating on ICPC</H1>\n\n<p>\n Peter loves any kinds of cheating.  A week before ICPC, he broke into Doctor's PC and sneaked a look at all the problems that would be given in ICPC.  He solved the problems, printed programs out, and brought into ICPC.  Since electronic preparation is strictly prohibited, he had to type these programs again during the contest.\n</p>\n<p>\n\n  Although he believes that he can solve every problems thanks to carefully debugged programs, he still has to find an optimal strategy to make certain of his victory.\n</p>\n<p>\n  Teams are ranked by following rules.\n</p>\n\n\n<ol>\n  <li>   Team that solved more problems is ranked higher.</li>\n  <li>  In case of tie (solved same number of problems), team that received less Penalty is ranked higher.</li>\n</ol>\n\n\n<p>\n  Here, Penalty is calculated by these rules.\n</p>\n\n\n<ol>\n  <li>   When the team solves a problem, time that the team spent to solve it (i.e. (time of submission) - (time of beginning of the contest)) are added to penalty.</li>\n  <li>  For each submittion that doesn't solve a problem, 20 minutes of Penalty are added.  However, if the problem wasn't solved eventually, Penalty for it is not added.</li>\n</ol>\n\n\n<p>\n  You must find that order of solving will affect result of contest.  For example, there are three problem named A, B, and C, which takes 10 minutes, 20 minutes, and 30 minutes to solve, respectively.  If you solve A, B, and C in this order, Penalty will be 10 + 30 + 60 = 100 minutes.  However, If you do in reverse order, 30 + 50 + 60 = 140 minutes of Penalty will be given.\n</p>\n<p>\n  Peter can easily estimate time to need to solve each problem (actually it depends only on length of his program.)  You, Peter's teammate, are asked to calculate minimal possible Penalty when he solve all the problems.\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput file consists of multiple datasets.  The first line of a dataset is non-negative integer N (0 &le; N  &le; 100) which stands for number of problem.  Next N Integers P[1], P[2], ..., P[N] (0 &le; P[i] &le; 10800) represents time to solve problems.\n</p>\n<p>\n  Input ends with EOF. The number of datasets is less than or equal to 100.<!--when N = 0.  You should output nothing in this case.-->\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput minimal possible Penalty, one line for one dataset.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3\n10 20 30\n7\n56 26 62 43 25 80 7\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n100\n873\n</pre>\n", "p00603": "\n<H1><font color=\"#000000\">Problem I:</font> Riffle Shuffle</H1>\n<p>\n There are a number of ways to shuffle a deck of cards.  Riffle shuffle is one such example.  The following is how to perform riffle shuffle.\n</p>\n<p>\n  There is a deck of <i>n</i> cards.  First, we divide it into two decks; deck A which consists of the top half of it and deck B of the bottom half.  Deck A will have one more card when <i>n</i> is odd. \n</p>\n<p>\n  Next, <i>c</i> cards are pulled from bottom of deck A and are stacked on deck C, which is empty initially.  Then <i>c</i> cards are pulled from bottom of deck B and stacked on deck C, likewise.  This operation is repeated until deck A and B become empty.  When the number of cards of deck A(B) is less than <i>c</i>, all cards are pulled.\n  Finally we obtain shuffled deck C.  See an example below:\n</p>\n\n<pre>\n  - A single riffle operation where n = 9, c = 3\n    \n    for given deck [0 1 2 3 4 5 6 7 8]  (right is top)\n\n    - Step 0\n    deck A [4 5 6 7 8]\n    deck B [0 1 2 3]\n    deck C []\n\n    - Step 1\n    deck A [7 8]\n    deck B [0 1 2 3]\n    deck C [4 5 6]\n\n    - Step 2\n    deck A [7 8]\n    deck B [3]\n    deck C [4 5 6 0 1 2]\n\n    - Step 3\n    deck A []\n    deck B [3]\n    deck C [4 5 6 0 1 2 7 8]\n\n    - Step 4\n    deck A []\n    deck B []\n    deck C [4 5 6 0 1 2 7 8 3]\n\n    shuffled deck [4 5 6 0 1 2 7 8 3]\n</pre>\n<p>\n  This operation, called riffle operation, is repeated several times.\n</p>\n\n<p>\n  Write a program that simulates Riffle shuffle and answer which card will be finally placed on the top of the deck.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n The input consists of multiple data sets. Each data set starts with a line containing two positive integers <i>n</i>(1 &le; <i>n</i> &le; 50) and <i>r</i>(1 &le; <i>r</i> &le; 50); <i>n</i> and <i>r</i> are the number of cards in the deck and the number of riffle operations, respectively.\n</p>\n<p>\n  <i>r</i> more positive integers follow, each of which represents a riffle operation. These riffle operations are performed in the listed order.  Each integer represents <i>c</i>, which is explained above.\n</p>\n<p>\n  The end of the input is indicated by EOF. The number of data sets is less than 100.<!--a line which contains two zeros.-->\n</p>\n\n<H2>Output</H2>\n\n<p>\n For each data set in the input, your program should print the number of the top card after the shuffle.  Assume that at the beginning the cards are numbered from 0 to <i>n</i>-1, from the bottom to the top.  Each number should be written in a sparate line without any superfluous characters such as leading or following spaces.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n9 1\n3\n9 4\n1 2 3 4\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3\n0\n</pre>\n", "p00605": "\n<H1><font color=\"#000000\">Problem A:</font> Vampirish Night</H1>\n\n<p>\nThere is a vampire family of <i>N</i> members.  Vampires are also known as extreme gourmets.  Of course vampires' foods are human blood.  However, not all kinds of blood is acceptable for them.  Vampires drink blood that <i>K</i> blood types of ones are mixed, and each vampire has his/her favorite amount for each blood type.\n</p>\n<p>\nYou, cook of the family, are looking inside a fridge to prepare dinner.  Your first task is to write a program that judges if all family members' dinner can be prepared using blood in the fridge.\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput file consists of a number of data sets.\nOne data set is given in following format:\n</p>\n<pre>\n<i>N K</i>\n<i>S</i><sub>1</sub> <i>S</i><sub>2</sub> ... <i>S<sub>K</sub></i>\n<i>B</i><sub>11</sub> <i>B</i><sub>12</sub> ... <i>B</i><sub>1<i>K</i></sub>\n<i>B</i><sub>21</sub> <i>B</i><sub>22</sub> ... <i>B</i><sub>2<i>K</i></sub>\n:\n<i>B</i><sub><i>N</i>1</sub> <i>B</i><sub><i>N</i>2</sub> ... <i>B</i><sub><i>NK</i></sub>\n</pre>\n\n<p>\n<i>N</i> and <i>K</i> indicate the number of family members and the number of blood types respectively.</p>\n<p>\n<i>S<sub>i</sub></i> is an integer that indicates the amount of blood of the <i>i</i>-th blood type that is in a fridge.\n</p>\n<p>\n<i>B<sub>ij</sub></i> is an integer that indicates the amount of blood of the <i>j</i>-th blood type that the <i>i</i>-th vampire uses.\n</p>\n<p>\nThe end of input is indicated by a case where <i>N</i> = <i>K</i> = 0.  You should print nothing for this data set.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each set, print \"<span>Yes</span>\" if everyone's dinner can be prepared using blood in a fridge, \"<span>No</span>\" otherwise (without quotes). \n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>Judge data includes at most 100 data sets.</li>\n<li>1 &le; <i>N</i> &le; 100</li>\n<li>1 &le; <i>K</i> &le; 100</li>\n<li>0 &le; <i>S<sub>i</sub></i> &le; 100000</li>\n<li>0 &le; <i>B<sub>ij</sub></i> &le; 1000</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n<pre>\n2 3\n5 4 5\n1 2 3\n3 2 1\n3 5\n1 2 3 4 5\n0 1 0 1 2\n0 1 1 2 2\n1 0 3 1 1\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nYes\nNo\n</pre>\n\n\n", "p00607": "\n<H1><font color=\"#000000\">Problem C:</font> Emacs-like Editor</H1>\n\n<p>\nEmacs is a text editor which is widely used by many programmers.\n</p>\n<p>\nThe advantage of Emacs is that we can move a cursor without arrow keys and the mice. For example, the cursor can be moved right, left, down, and up by pushing <span>f</span>, <span>b</span>, <span>n</span>, <span>p</span> with the Control Key respectively. In addition, cut-and-paste can be performed without the mouse.\n</p>\n\n<p>\nYour task is to write a program which simulates key operations in the Emacs-like editor. The program should read a text and print the corresponding edited text.\n</p>\n\n<p>\nThe text consists of several lines and each line consists of zero or more alphabets and space characters. A line, which does not have any character, is a blank line.\n</p>\n\n<p>\nThe editor has a cursor which can point out a character or the end-of-line in the corresponding line. The cursor can also point out the end-of-line in a blank line.\n</p>\n<p>\nIn addition, the editor has a buffer which can hold either a string (a sequence of characters) or a linefeed.\n</p>\n\n<p>\nThe editor accepts the following set of commands (If the corresponding line is a blank line, the word \"the first character\" should be \"the end-of-line\"):\n</p>\n\n<ul>\n<li>\n<span>a</span><br>\nMove the cursor to the first character of the current line.\n</li>\n\n<li>\n<span>e</span><br>\nMove the cursor to the end-of-line of the current line.\n</li>\n\n<li>\n<span>p</span><br>\nMove the cursor to the first character of the next upper line, if it exists.<br>\nIf there is no line above the current line, move the cursor to the first character of the current line.\n</li>\n\n<li>\n<span>n</span><br>\nMove the cursor to the first character of the next lower line, if it exists.<br>\nIf there is no line below the current line, move the cursor to the first character of the current line.\n</li>\n\n<li>\n<span>f</span><br>\nMove the cursor by one character to the right, unless the cursor points out the end-of-line.<br>\nIf the cursor points out the end-of-line and there is a line below the current line, move the cursor to the first character of the next lower line. Otherwise, do nothing.\n</li>\n\n<li>\n<span>b</span><br>\nMove the cursor by one character to the left, unless the cursor points out the first character.<br>\nIf the cursor points out the first character and there is a line above the current line, move the cursor to the end-of-line of the next upper line. Otherwise, do nothing.\n</li>\n\n<li>\n<span>d</span><br>\nIf the cursor points out a character, delete the character (Characters and end-of-line next to the deleted character are shifted to the left).<br>\nIf the cursor points out the end-of-line and there is a line below, the next lower line is appended to the end-of-line of the current line (Lines below the current line are shifted to the upper). <br>Otherwise, do nothing.\n</li>\n\n<li>\n<span>k</span><br>\nIf the cursor points out the end-of-line and there is a line below the current line, perform the command <span>d</span> mentioned above, and record a linefeed on the buffer.<br>\nIf the cursor does not point out the end-of-line, cut characters between the cursor (inclusive) and the end-of-line, and record them on the buffer. <!--Move the cursor to the end-of-line of the original line.--> After this operation, the cursor indicates the end-of-line of the current line.\n</li>\n\n<li>\n<span>y</span><br>\nIf the buffer is empty, do nothing.<br>\nIf the buffer is holding a linefeed, insert the linefeed at the cursor. The cursor moves to the first character of the new line.<br>\nIf the buffer is holding characters, insert the characters at the cursor. The cursor moves to the character or end-of-line which is originally pointed by the cursor.\n</li>\n\n</ul>\n\n<p>\nThe cursor position just after reading the text is the beginning of the first line, and the initial buffer is empty.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of only one data-set which includes two parts. The first part gives a text consisting of several lines. The end of the text is indicated by a line (without quotes):\n\n<pre>\n\"END_OF_TEXT\"\n</pre>\n\n<p>\nThis line should not be included in the text.\n</p>\n\n<p>\nNext part gives a series of commands. Each command is given in a line. The end of the commands is indicated by a character '<span>-</span>'.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor the input text, print the text edited by the commands.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>The number of lines in the text given as input &le; 10</li>\n<li>The number of characters in a line given as input &le; 20 </li>\n<li>The number of commands &le; 300 </li>\n<li>The maximum possible number of lines in the text during operations &le; 100 </li>\n<li>The maximum possible number of characters in a line during operations &le; 1000 </li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\nhyo\nni\nEND_OF_TEXT\nf\nd\nf\nf\nk\np\np\ne\ny\na\nk\ny\ny\nn\ny\n-\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nhonihoni\nhoni\n</pre>\n\n", "p00609": "\n<H1><font color=\"#000000\">Problem E:</font> Amazing Graze</H1>\n\n<p>\nIn 2215 A.D., a war between two planets, ACM and ICPC, is being more and more intense.\n</p>\n<p>\nACM introduced new combat planes.  These planes have a special system that is called Graze, and fighting power of a plane increases when it is close to energy bullets that ICPC combat planes shoot.\n</p>\n<p>\nBoth combat planes and energy bullets have a shape of a sphere with a radius of <i>R</i>.  Precisely, fighting power of a plane is equivalent to the number of energy bullet where distance from the plane is less than or equals to 2<i>R</i>.\n</p>\n<p>\nYou, helper of captain of intelligence units, are asked to analyze a war situation.  The information given to you is coordinates of <i>AN</i> combat planes and <i>BN</i> energy bullets.  Additionally, you know following things:\n</p>\n<ul>\n<li> All combat planes and energy bullet has same <i>z</i>-coordinates. In other word, <i>z</i>-coordinate can be ignored.</li>\n<li> No two combat planes, no two energy bullets, and no pair of combat plane and energy bullet collide (i.e. have positive common volume) each other.</li>\n</ul>\n\n<p>\nYour task is to write a program that outputs total fighting power of all combat planes.\n</p>\n\n\n\n<H2>Input</H2>\n\n<p>\nInput file consists of a number of data sets.\nOne data set is given in following format:\n</p>\n\n<pre>\n<i>AN BN R</i>\n<i>XA</i><sub>1</sub> <i>YA</i><sub>1</sub>\n<i>XA</i><sub>2</sub> <i>YA</i><sub>2</sub>\n:\n<i>XA<sub>AN</sub></i> <i>YA<sub>AN</sub></i>\n<i>XB</i><sub>1</sub> <i>YB</i><sub>1</sub>\n<i>XB</i><sub>2</sub> <i>YB</i><sub>2</sub>\n:\n<i>XB<sub>BN</sub></i> <i>YB<sub>BN</sub></i>\n</pre>\n\n<p>\n<i>AN</i>, <i>BN</i>, <i>R</i> are integers that describe the number of combat planes, energy bullets, and their radius respectively.\n</p>\n<p>\nFollowing <i>AN</i> lines indicate coordinates of the center of combat planes.  Each line has two integers that describe <i>x</i>-coordinate and <i>y</i>-coordinate.\n</p>\n<p>\nFollowing <i>BN</i> lines indicate coordinates of the center of energy bullets, in the same format as that of combat planes.\n</p>\n<p>\nInput ends when <i>AN</i> = <i>BN</i> = 0.  You should output nothing for this case.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each data set, output the total fighting power.\n</p>\n\n<H2>Constraints</H2>\n<ul>\n<li>Jude data includes at most 20 data sets.</li>\n<li>1 &le; <i>AN</i>, <i>BN</i> &le; 100000</li>\n<li>0 &lt; <i>R</i> &le; 10 </li>\n<li>0 &le; (coordinate values) &lt; 10000</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n2 2 1\n0 0\n0 4\n2 2\n2 8\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2\n</pre>\n\n", "p00613": "\n<H1><font color=\"#000000\">Problem I:</font> A Piece of Cake</H1>\n\n<p>\nIn the city, there are two pastry shops.  One shop was very popular because its cakes are pretty tasty.  \nHowever, there was a man who is displeased at the shop.  He was an owner of another shop.  Although cause of his shop's unpopularity is incredibly awful taste of its cakes, he never improved it.  He was just growing hate, ill, envy, and jealousy.\n</p>\n<p>\nFinally, he decided to vandalize the rival.\n</p>\n<p>\nHis vandalize is to mess up sales record of cakes. The rival shop sells <i>K</i> kinds of cakes and sales quantity is recorded for each kind. He calculates sum of sales quantities for all pairs of cakes. Getting <i>K</i>(<i>K</i>-1)/2 numbers, then he rearranges them randomly, and replace an original sales record with them.\n</p>\n<p>\nAn owner of the rival shop is bothered.  Could you write, at least, a program that finds total sales quantity of all cakes for the pitiful owner?\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput file contains several data sets.\nA single data set has following format:\n</p>\n\n<pre>\n<i>K</i>\n<i>c</i><sub>1</sub> <i>c</i><sub>2</sub> ... <i>c</i><sub><i>K</i>&times;(<i>K</i>-1)/2</sub>\n</pre>\n\n<p>\n<i>K</i> is an integer that denotes how many kinds of cakes are sold.  <i>c<sub>i</sub></i> is an integer that denotes a number written on the card.\n</p>\n<p>\nThe end of input is denoted by a case where <i>K</i> = 0.  You should output nothing for this case.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each data set, output the total sales quantity in one line.\n</p>\n\n<H2>Constraints</H2>\n<ul>\n<li>Judge data contains at most 100 data sets.</li>\n<li>2 &le; <i>K</i> &le; 100</li>\n<li>0 &le; <i>c<sub>i</sub></i> &le; 100 </li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n2\n2\n3\n5 4 3\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2\n6\n</pre>\n\n", "p00614": "\n<H1><font color=\"#000000\">Problem J:</font> ICPC: Ideal Coin Payment and Change</H1>\n\n<p>\nTaro, a boy who hates any inefficiencies, pays coins so that the number of coins to be returned as change is minimized in order to do smoothly when he buys something.\n</p>\n\n<p>\nOne day, however, he doubt if this way is really efficient.  When he pays more number of coins, a clerk consumes longer time to find the total value.  Maybe he should pay with least possible number of coins.\n</p>\n<p>\nThinking for a while, he has decided to take the middle course.  So he tries to minimize total number of paid coins and returned coins as change.\n</p>\n<p>\nNow he is going to buy a product of P yen having several coins.  Since he is not good at calculation, please write a program that computes the minimal number of coins.\n</p>\n<p>\nYou may assume following things:\n</p>\n<ul>\n<li>There are 6 kinds of coins, 1 yen, 5 yen, 10 yen, 50 yen, 100 yen and 500 yen.</li>\n<li>The total value of coins he has is at least <i>P</i> yen.</li>\n<li>A clerk will return the change with least number of coins.</li>\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\nInput file contains several data sets.\nOne data set has following format:\n</p>\n<pre>\n<i>P</i> <i>N</i><sub>1</sub> <i>N</i><sub>5</sub> <i>N</i><sub>10</sub> <i>N</i><sub>50</sub> <i>N</i><sub>100</sub> <i>N</i><sub>500</sub>\n</pre>\n<p>\n<i>N<sub>i</sub></i> is an integer and is the number of coins of <i>i</i> yen that he have.\n</p>\n<p>\nThe end of input is denoted by a case where <i>P</i> = 0.  You should output nothing for this data set.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput total number of coins that are paid and are returned.\n</p>\n\n<H2>Constraints</H2>\n<ul>\n<li>Judge data contains at most 100 data sets.</li>\n<li>0 &le; <i>N<sub>i</sub></i> &le; 1000  </li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n123 3 0 2 0 1 1\n999 9 9 9 9 9 9\n0 0 0 0 0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n6\n3\n</pre>\n\n", "p00637": "\n<H1><font color=\"#000000\">Problem A:</font> Citation Format</H1>\n\n<p>\nTo write a research paper, you should definitely follow the structured format. This format, in many cases, is strictly defined, and students who try to write their papers have a hard time with it.\n</p>\n\n<p>\nOne of such formats is related to citations. If you refer several pages of a material, you should enumerate their page numbers in ascending order. However, enumerating many page numbers waste space, so you should use the following abbreviated notation:\n</p>\n\n<p>\nWhen you refer all pages between page <i>a</i> and page <i>b</i> (<i>a</i> &lt; <i>b</i>), you must use the notation \"<i>a</i>-<i>b</i>\". For example, when you refer pages 1, 2, 3, 4, you must write \"1-4\" not \"1 2 3 4\". You must not write, for example, \"1-2 3-4\", \"1-3 4\", \"1-3 2-4\" and so on. When you refer one page and do not refer the previous and the next page of that page, you can write just the number of that page, but you must follow the notation when you refer successive pages (more than or equal to 2). Typically, commas are used to separate page numbers, in this problem we use space to separate the page numbers.\n</p>\n\n<p>\nYou, a kind senior, decided to write a program which generates the abbreviated notation for your junior who struggle with the citation.\n</p>\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets.\n</p>\n\n<p>\nThe first line of the dataset indicates the number of pages <i>n</i>.\n</p>\n\n<p>\nNext line consists of <i>n</i> integers. These integers are arranged in ascending order and they are differ from each other.\n</p>\n\n<p>\nInput ends when <i>n</i> = 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the abbreviated notation in a line. Your program should not print extra space. Especially, be careful about the space at the end of line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <i>n</i> &le; 50</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n5\n1 2 3 5 6\n3\n7 8 9\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1-3 5-6\n7-9\n</pre>\n\n\n", "p00638": "\n<H1><font color=\"#000000\">Problem B:</font> Old Bridges</H1>\n\n<p>\nLong long ago, there was a thief. Looking for treasures, he was running about all over the world. One day, he heard a rumor that there were islands that had large amount of treasures, so he decided to head for there.\n</p>\n\n<p>\nFinally he found <i>n</i> islands that had treasures and one island that had nothing. Most of islands had seashore and he can land only on an island which had nothing. He walked around the island and found that there was an old bridge between this island and each of all other <i>n</i> islands.\n</p>\n\n<p>\nHe tries to visit all islands one by one and pick all the treasures up. Since he is afraid to be stolen, he visits with bringing all treasures that he has picked up. He is a strong man and can bring all the treasures at a time, but the old bridges will break if he cross it with taking certain or more amount of treasures.\n</p>\n\n<p>\nPlease write a program that judges if he can collect all the treasures and can be back to the island where he land on by properly selecting an order of his visit.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets.\n</p>\n\n<p>\nThe first line of each dataset contains an integer <i>n</i>.\nNext <i>n</i> lines represents information of the islands. Each line has two integers, which means the amount of treasures of the island and the maximal amount that he can take when he crosses the bridge to the islands, respectively.\n</p>\n<p>\nThe end of input is represented by a case with <i>n</i> = 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, if he can collect all the treasures and can be back, print \"<span>Yes</span>\" Otherwise print \"<span>No</span>\"\n\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1  &le; <i>n</i> &le; 25</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n3\n2 3\n3 6\n1 2\n3\n2 3\n3 5\n1 2\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nYes\nNo\n</pre>\n\n", "p00639": "<H1><font color=\"#000000\">Problem C:</font> Accelerated Railgun</H1>\n\n<p>\nShe catched the thrown coin that draws parabolic curve with her sparkling fingers. She is an ESPer. Yes, she is an electro-master who has the third strongest power among more than one million ESPers in the city. Being flicked by her thumb, the coin is accelerated by electromagnetic force and is shot as Fleming's right-hand rule. Even if she holds back the initial velocity of the coin exceeds three times of the speed of sound. The coin that is shot in such velocity is heated because of air friction and adiabatic compression. As a result coin melts and shines in orange. This is her special ability, called railgun. The strength of railgun can make a hole of two meters in diameter on a concrete wall.\n</p>\n<p>\nShe had defeated criminals such as post office robberies and bank robberies in the city with her ability. And today, she decided to destroy a laboratory that is suspected to making some inhumane experiments on human body. Only her railgun can shoot it.\n</p>\n<p>\nThe railgun with a coin cannot destroy the laboratory because of lack of power. Since she have found a powered-suit nearby, so she decided to use it as a projectile. However, in this case it is difficult to take sight properly because the suit is much bigger and heavier than coins. Therefore she only can shoot the suit with certain velocity vector from her current position. Depending on the position of the laboratory, her railgun may not hit it and become a firework.\n</p>\n<p>\nTherefore she asked cooperation to the strongest ESPer in the city. He can change direction of a moving object as one of uncountable application of his ESP. Let's consider a 2-dimensional plane where the laboratory is on the origin (0, 0). She shoots a projectile from <i>P</i> = (<i>px</i>, <i>py</i>) with velocity vector <i>V</i> = (<i>vx</i>, <i>vy</i>). His ESP makes a virtual wall of radius <i>R</i> (= 1.0) centered on the origin. When projectile collides with the wall, it is reflected so that incident angle will be equal to reflection angle.\n</p>\n<p>\nRange of railgun is limited to <i>D</i>, because air friction decreases velocity of projectile and heat may melts projectile completely. Under these conditions, please write a program that judges if the railgun hits the laboratory. Size of the laboratory and the suit is ignorablly small. After the railgun is shot, it is allowed to pass through <i>P</i> again.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets.\n</p>\n\n<p>\nThe first line of each dataset contains a real number <i>D</i>.\n</p>\n\n<p>\nNext line contains 4 real numbers, which means <i>px</i>, <i>py</i>, <i>vx</i>, <i>vy</i>, respectively.\n</p>\n\n<p>\nInput terminates when <i>D</i> = 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, if the railgun hits, output the distance it moved until hits. Otherwise output '<span>impossible</span>' (without quotes).\n</p>\n<p>\nYou can print any number of digits and answer with an error less than 1.0e-6 will be accepted. \n</p>\n\n\n<H2>Constraints</H2>\n\n<ul>\n<li>Judge data never include dataset where the answer is (<i>D</i> - 1.0e-3) or bigger. </li>\n<li>0.0001 &le; |V| &le; 0.9999</li>\n<li>0.0001 &le; |P| &le; 0.9999</li>\n<li>D &le; 50</li>\n\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n10.0\n0.5 0.0 -0.2 0.0\n1.0\n0.1 0.0 0.2 0.2\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0.50000000\nimpossible\n</pre>\n\n\n", "p00640": "\n<H1><font color=\"#000000\">Problem D:</font> Distorted Love</H1>\n\n<p>\nSaying that it is not surprising that people want to know about their love, she has checked up his address, name, age, phone number, hometown, medical history, political party and even his sleeping position, every piece of his personal information. The word \"privacy\" is not in her dictionary. A person like her is called \"stoker\" or \"<i>yandere</i>\", but it doesn't mean much to her.\n</p>\n\n\n<p>\nTo know about him, she set up spyware to his PC. This spyware can record his mouse operations while he is browsing websites. After a while, she could successfully obtain the record from the spyware in absolute secrecy.\n</p>\n\n<p>\nWell, we want you to write a program which extracts web pages he visited from the records.\n</p>\n\n<p>\nAll pages have the same size <i>H</i> &times; <i>W</i> where upper-left corner is (0, 0) and lower right corner is (<i>W</i>, <i>H</i>). A page includes several (or many) rectangular buttons (parallel to the page). Each button has a link to another page, and when a button is clicked the browser leads you to the corresponding page.\n</p>\n\n\n<p>\nHis browser manages history and the current page in the following way:\n</p>\n\n<p>\nThe browser has a buffer of 1-dimensional array with enough capacity to store pages, and a pointer to indicate a page in the buffer. A page indicated by the pointer is shown on the browser. At first, a predetermined page is stored and the pointer indicates that page. When the link button is clicked, all pages recorded in the right side from the pointer are removed from the buffer. Then, the page indicated by the link button is stored into the right-most position of the buffer, and the pointer moves to right. As a result, the user browse the page indicated by the button.\n</p>\n\n<p>\nThe browser also has special buttons 'back to the previous page' (back button) and 'forward to the next page' (forward button). When the user clicks the back button, the pointer moves to left, and the user clicks the forward button, the pointer moves to right. But in both cases, if there are no such pages in the buffer, nothing happen.\n</p>\n\n<p>\nThe record consists of the following operations:\n</p>\n\n<pre>\nclick x y\n</pre>\n\n<p>\nIt means to click (<i>x</i>, <i>y</i>). If there is a button on the point (<i>x</i>, <i>y</i>), he moved to the corresponding page. If there is nothing in the point, nothing happen. The button is clicked if <i>x</i>1 &le; <i>x</i> &le; <i>x</i>2 and <i>y</i>1 &le; <i>y</i> &le; <i>y</i>2 where <i>x</i>1, <i>x</i>2 means the leftmost and rightmost coordinate and <i>y</i>1, <i>y</i>2 means the topmost and bottommost coordinate of the corresponding button respectively.\n</p>\n\n<pre>\nback\n</pre>\n\n<p>\nIt means to click the Back button.\n</p>\n\n<pre>\nforward\n</pre>\n\n<p>\nIt means to click the Forward button.\n</p>\n\n<p>\nIn addition, there is a special operation <span>show</span>. Your program should print the name of current page for each <span>show</span> operation.\n</p>\n\n\n<p>\nBy the way, setting spyware into computers of others may conflict with the law. Do not attempt, or you will be reprimanded by great men.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets.\n</p>\n\n<p>\nEach dataset starts with an integer <i>n</i> which represents the number of pages in the dataset.\n</p>\n\n<p>\nNext line contains two integers <i>W</i> and <i>H</i>.\n</p>\n\n<p>\nNext, information of each page are given. Each page starts with a string of characters and <i>b</i>[<i>i</i>], the number of buttons the page has. Following <i>b</i>[<i>i</i>] lines give information of buttons. Each button consists of four integers representing the coordinate (<i>x</i>1, <i>y</i>1) of upper left corner and the coordinate (<i>x</i>2, <i>y</i>2) of lower right corner of the button and a string of characters, which represents the name of page that the link of the button represents.\n</p>\n\n<p>\nNext, the number of operation <i>m</i> is given. Following <i>m</i> lines represent the record of operations. Please see the above description for the operation.\n</p>\n\n<p>\nThe first page is stored in the buffer at first.\n</p>\n\n<p>\nInput ends when <i>n</i> = 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the name of current page for each <span>show</span> operation.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <i>n</i> &le; 100</li>\n<li><i>b</i>[<i>i</i>] &le; 100</li>\n<li>1 &le; the number of characters in the name &le; 20</li>\n<li>Buttons are not touch, overlapped nor run over from the browser.</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n3\n800 600\nindex 1\n500 100 700 200 profile\nprofile 2\n100 100 400 200 index\n100 400 400 500 link\nlink 1\n100 100 300 200 index\n9\nclick 600 150\nshow\nclick 200 450\nshow\nback\nback\nshow\nforward\nshow\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nprofile\nlink\nindex\nprofile\n</pre>\n\n", "p00641": "\n<H1><font color=\"#000000\">Problem E:</font> Huge Family</H1>\n\n<p>\nMr. Dango's family has extremely huge number of members. Once it had about 100 members, and now it has as many as population of a city. It is jokingly guessed that the member might fill this planet in near future. They all have warm and gracious personality and are close each other.\n</p>\n\n<p>\nThey usually communicate by a phone. Of course, They are all taking a family plan. This family plan is such a thing: when <i>a</i> choose <i>b</i>, and <i>b</i> choose <i>a</i> as a partner, a family plan can be applied between them and then the calling fee per unit time between them discounted to <i>f</i>(<i>a</i>, <i>b</i>), which is cheaper than a default fee. Each person can apply a family plan at most 2 times, but no same pair of persons can apply twice. Now, choosing their partner appropriately, all members of Mr. Dango's family applied twice.\n</p>\n<p>\nSince there are huge number of people, it is very difficult to send a message to all family members by a phone call. Mr. Dang have decided to make a phone calling network that is named '<i>clan</i>' using the family plan. Let us present a definition of <i>clan</i>.\n</p>\n\n<p>\nLet <i>S</i> be an any subset of all phone calls that family plan is applied. <i>Clan</i> is <i>S</i> such that:\n<ol>\n<li> For any two persons (let them be <i>i</i> and <i>j</i>), if <i>i</i> can send a message to <i>j</i> through phone calls that family plan is applied (directly or indirectly), then <i>i</i> can send a message to <i>j</i> through only phone calls in <i>S</i> (directly or indirectly).</li>\n<li> Meets condition 1 and a sum of the calling fee per unit time in <i>S</i> is minimized.</li>\n</ol>\n</p>\n\n<p>\n<i>Clan</i> allows to send a message efficiently. For example, we suppose that one have sent a message through all calls related to him in the clan. Additionaly we suppose that every people follow a rule, \"when he/she receives a message through a call in clan, he/she relays the message all other neibors in respect to clan.\" Then, we can prove that this message will surely be derivered to every people that is connected by all discounted calls, and that the message will never be derivered two or more times to same person.\n</p>\n\n<p>\nBy the way, you are given information about application of family plan of Mr. Dango's family. Please write a program that calculates that in how many ways a different clan can be constructed. You should output the answer modulo 10007 because it may be very big.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several datasets.\n</p>\n\n<p>\nThe first line of each dataset contains an integer <i>n</i>, which indicates the number of members in the family.\n</p>\n\n<p>\nNext <i>n</i> lines represents information of the <i>i</i>-th member with four integers. The first two integers respectively represent <i>b</i>[0] (the partner of <i>i</i>) and f(<i>i</i>, <i>b</i>[0]) (the calling fee per unit time between <i>i</i> and <i>b</i>[0]). The following two integers represent <i>b</i>[1] and <i>f</i>(<i>i</i>, <i>b</i>[1]) in the same manner.\n</p>\n\n<p>\nInput terminates with a dataset where n = 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the number of <i>clan</i> modulo 10007.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>3 &le; <i>n</i> &le; 100,000</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n3\n1 1 2 3\n0 1 2 2\n1 2 0 3\n7\n1 2 2 1\n0 2 3 2\n0 1 3 1\n2 1 1 2\n5 3 6 2\n4 3 6 1\n4 2 5 1\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n2\n</pre>\n\n", "p00642": "\n<H1><font color=\"#000000\">Problem F:</font> Ben Toh</H1>\n\n<p>\nAs usual, those who called wolves get together on 8 p.m. at the supermarket. The thing they want is only one, a box lunch that is labeled half price. Scrambling for a few discounted box lunch, they fiercely fight every day. And those who are blessed by hunger and appetite the best can acquire the box lunch, while others have to have cup ramen or something with tear in their eyes.\n</p>\n\n<p>\nA senior high school student, Sato, is one of wolves. A dormitry he lives doesn't serve a dinner, and his parents don't send so much money. Therefore he absolutely acquire the half-priced box lunch and save his money. Otherwise he have to give up comic books and video games, or begin part-time job.\n</p>\n\n<p>\nSince Sato is an excellent wolf, he can acquire the discounted box lunch in 100% probability on the first day. But on the next day, many other wolves cooperate to block him and the probability to get a box lunch will be 50%. Even though he can get, the probability to get will be 25% on the next day of the day. Likewise, if he gets a box lunch on a certain day, the probability to get on the next day will be half. Once he failed to get a box lunch, probability to get would be back to 100%.\n</p>\n\n<p>\nHe continue to go to supermaket and try to get the discounted box lunch for <i>n</i> days. Please write a program to computes the expected value of the number of the discounted box lunches he can acquire.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets.\n</p>\n\n<p>\nInput for a single dataset is given as a single integer <i>n</i>.\n</p>\n\n<p>\nInput terminates with a dataset where <i>n</i> = 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, write a line that contains an expected value. You may print any number of digits after the decimal point. Answers that have an error less than 1.0e-2 will be accepted.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <i>n</i> &le; 100,000</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n1\n2\n3\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1.00000000\n1.50000000\n2.12500000\n</pre>\n\n", "p00643": "\n<H1><font color=\"#000000\">Problem G:</font> Rolling Dice</H1>\n\n<p>\nThe north country is conquered by the great shogun-sama (which means\nking). Recently many beautiful dice which were made by order of the\ngreat shogun-sama were given to all citizens of the country. All\ncitizens received the beautiful dice with a tear of delight. Now they\nare enthusiastically playing a game with the dice.\n</p>\n\n<p>\nThe game is played on grid of <i>h</i> * <i>w</i> cells that each of which has a\nnumber, which is designed by the great shogun-sama's noble philosophy.\nA player put his die on a starting cell and move it to a destination\ncell with rolling the die. After rolling the die once, he takes a\npenalty which is multiple of the number written on current cell and\nthe number printed on a bottom face of the die, because of malicious\nconspiracy of an enemy country. Since the great shogun-sama strongly\nwishes, it is decided that the beautiful dice are initially put so\nthat 1 faces top, 2 faces south, and 3 faces east. You will find that\nthe number initially faces north is 5, as sum of numbers on opposite\nfaces of a die is always 7. Needless to say, idiots those who move his\ndie outside the grid are punished immediately.\n</p>\n\n<p>\nThe great shogun-sama is pleased if some citizens can move the\nbeautiful dice with the least penalty when a grid and a starting cell\nand a destination cell is given. Other citizens should be sent to coal\nmine (which may imply labor as slaves). Write a program so that\ncitizens can deal with the great shogun-sama's expectations.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of each data set has two numbers <i>h</i> and <i>w</i>, which stands\nfor the number of rows and columns of the grid.\n</p>\n\n<p>\nNext <i>h</i> line has <i>w</i> integers, which stands for the number printed on the\ngrid. Top-left corner corresponds to northwest corner.\n</p>\n\n<p>\nRow number and column number of the starting cell are given in the\nfollowing line, and those of the destination cell are given in the next\nline. Rows and columns are numbered 0 to <i>h</i>-1, 0 to <i>w</i>-1, respectively.\n</p>\n\n<p>\nInput terminates when <i>h</i> = <i>w</i> = 0.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the least penalty.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <i>h</i>, <i>w</i> &le; 10</li>\n<li>0 &le; number assinged to a cell &le; 9</li>\n<li>the start point and the goal point are different.</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n1 2\n8 8\n0 0\n0 1\n3 3\n1 2 5\n2 8 3\n0 1 2\n0 0\n2 2\n3 3\n1 2 5\n2 8 3\n0 1 2\n0 0\n1 2\n2 2\n1 2\n3 4\n0 0\n0 1\n2 3\n1 2 3\n4 5 6\n0 0\n1 2\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n24\n19\n17\n6\n21\n</pre>\n\n", "p00644": "\n<H1><font color=\"#000000\">Problem H:</font> Winter Bells</H1>\n\n<p>\nThe best night ever in the world has come! It's 8 p.m. of December 24th, yes, the night of Cristmas Eve. Santa Clause comes to a silent city with ringing bells. Overtaking north wind, from a sleigh a reindeer pulls she shoot presents to soxes hanged near windows for children.\n</p>\n<p>\nThe sleigh she is on departs from a big christmas tree on the fringe of the city. Miracle power that the christmas tree spread over the sky like a web and form a paths that the sleigh can go on. Since the paths with thicker miracle power is easier to go, these paths can be expressed as undirected weighted graph.\n</p>\n\n<p>\nDerivering the present is very strict about time. When it begins dawning the miracle power rapidly weakens and Santa Clause can not continue derivering any more. Her pride as a Santa Clause never excuses such a thing, so she have to finish derivering before dawning.\n</p>\n\n<p>\nThe sleigh a reindeer pulls departs from christmas tree (which corresponds to 0th node), and go across the city to the opposite fringe (<i>n</i>-1 th node) along the shortest path. Santa Clause create presents from the miracle power and shoot them from the sleigh the reindeer pulls at his full power. If there are two or more shortest paths, the reindeer selects one of all shortest paths with equal probability and go along it.\n</p>\n\n<p>\nBy the way, in this city there are <i>p</i> children that wish to see Santa Clause and are looking up the starlit sky from their home. Above the <i>i</i>-th child's home there is a cross point of the miracle power that corresponds to <i>c</i>[<i>i</i>]-th node of the graph. The child can see Santa Clause if (and only if) Santa Clause go through the node.\n</p>\n\n<p>\nPlease find the probability that each child can see Santa Clause.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nInput consists of several datasets.\n</p>\n\n<p>\nThe first line of each dataset contains three integers <i>n</i>, <i>m</i>, <i>p</i>, which means the number of nodes and edges of the graph, and the number of the children. Each node are numbered 0 to <i>n</i>-1.\n</p>\n\n<p>\nFollowing <i>m</i> lines contains information about edges. Each line has three integers. The first two integers means nodes on two endpoints of the edge. The third one is weight of the edge.\n</p>\n\n<p>\nNext <i>p</i> lines represent <i>c</i>[<i>i</i>] respectively.\n</p>\n\n<p>\nInput terminates when <i>n</i> = <i>m</i> = <i>p</i> = 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output <i>p</i> decimal values in same order as input. Write a blank line after that.\n</p>\n<p>\nYou may output any number of digit and may contain an error less than 1.0e-6.\n</p>\n\n<H2>Constraints</H2>\n<ul>\n<li>3 &le; <i>n</i> &le; 100</li>\n<li>There are no parallel edges and a edge whose end points are identical.</li>\n<li> 0 &lt; weight of the edge &lt; 10000</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n3 2 1\n0 1 2\n1 2 3\n1\n4 5 2\n0 1 1\n0 2 1\n1 2 1\n1 3 1\n2 3 1\n1\n2\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1.00000000\n\n0.50000000\n0.50000000\n\n</pre>\n", "p00645": "\n<H1><font color=\"#000000\">Problem I:</font> Mysterious Onslaught</H1>\n\n<p>\nIn 2012, human beings have been exposed to fierce onslaught of unidentified mysterious extra-terrestrial creatures. We have exhaused because of the long war and can't regist against them any longer. Only you, an excellent wizard, can save us. Yes, it's time to stand up!\n</p>\n<p>\nThe enemies are dispatched to the earth with being aligned like an <i>n</i> * <i>n</i> square. Appearently some of them have already lost their fighting capabilities for some unexpected reason. You have invented a highest grade magic spell 'MYON' to defeat them all. An attack of this magic covers any rectangles (which is parallel to axis). Once you cast a spell \"myon,\" then all the enemies which the magic covers will lose their fighting capabilities because of tremendous power of the magic. However, the magic seems to activate enemies' self-repairing circuit. Therefore if any enemy which have already lost its fighting capability is exposed to the magic, the enemy repossesses its fighting capability. You will win the war when all the enemies will lose their fighting capabilities.\n</p>\n\n<p>\nLet me show an example. An array of enemies below have dispatched:\n</p>\n\n<pre>\n1 1 1 1 1\n1 0 0 0 1\n1 0 1 0 1\n1 0 0 0 1\n1 1 1 1 1\n</pre>\n\n<p>\nHere, '<span>0</span>' means an enemy that doesn't possess fighting capability, and '<span>1</span>' means an enemy that possesses.\nFirst, you cast a spell \"<span>myon</span>\" with covering all the enemies, which results in;\n </p>\n\n<pre>\n0 0 0 0 0\n0 1 1 1 0\n0 1 0 1 0\n0 1 1 1 0\n0 0 0 0 0\n</pre>\n<p>\nNext, cast once again with covering central 3 * 3 enemies.\n</p>\n\n<pre>\n0 0 0 0 0\n0 0 0 0 0\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 0 0\n</pre>\n\n<p>\nNow you can defeat them all by casting a spell covers remaining one. Therefore you can cast \"<span>myonmyonmyon</span>,\" which is the shortest spell for this case.\n</p>\n<p>\nYou are given the information of the array. Please write a program that generates the shortest spell that can defeat them all.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe first line of each test case has an integer <i>n</i>. Following <i>n</i> lines are information of an array of enemies. The format is same as described in the problem statement.\n</p>\n\n<p>\nInput terminates when n = 0.\nYou may assume that one or more enemy have fighting capability.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the shortest spell. \n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <i>n</i> &le; 5</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n5\n1 1 1 1 1\n1 0 0 0 1\n1 0 1 0 1\n1 0 0 0 1\n1 1 1 1 1\n3\n1 1 1\n1 1 1\n1 1 1\n5\n1 1 1 1 0\n1 1 1 1 0\n1 0 0 0 1\n0 1 1 1 1\n0 1 1 1 1\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nmyonmyonmyon\nmyon\nmyonmyon\n</pre>\n\n\n", "p00646": "\n<H1><font color=\"#000000\">Problem J:</font> No Story</H1>\n\n<p>\nSince I got tired to write long problem statements, I decided to make this problem statement short. For given positive integer <i>L</i>, how many pairs of positive integers <i>a</i>, <i>b</i> (<i>a</i> &le; <i>b</i>) such that LCM(<i>a</i>, <i>b</i>) = <i>L</i> are there? Here, LCM(<i>a</i>, <i>b</i>) stands for the least common multiple of <i>a</i> and <i>b</i>.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nFor each dataset, an integer <i>L</i> is given in a line. Input terminates when <i>L</i> = 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the number of pairs of <i>a</i> and <i>b</i>.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <i>L</i> &le; 10<sup>12</sup></li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n12\n9\n2\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n8\n3\n2\n</pre>\n\n", "p00647": "\n<h1>Problem A: It's our delight!!</h1>\n<p>\nYou are a student of University of Aizu.\nAnd you work part-time at a restaurant.\n</p>\n\n<p>\nStaffs of the restaurant are well trained to be delighted to provide more delicious products faster.\n</p>\n\n<p>\nThe speed providing products particularly depends on skill of the staff.\nSo, the manager of the restaurant want to know how long it takes to provide products.\n</p>\n\n<p>\nThough some restaurants employ a system which calculates how long it takes to provide products automatically,\nthe restaurant where you work employs a system which calculates it manually.\n</p>\n\n<p>\nYou, a student of University of Aizu, want to write a program to calculate it, and you hope that your program makes the task easier.\nYou are given the checks in a day.\nIf the length of time it takes to provide the products of a check is shorter than or equal to 8 minutes, it is \"ok\" check.\nWrite a program to output the ratio of \"ok\" checks to the total in percentage.\n</p>\n<h2>Input</h2>\n<p>\nThe input consists of multiple datasets.\nThe last dataset is followed by a line containing a single zero.\nYou don't have to process this data.\nThe first line of each dataset contains a single integer <i>n</i>.\n<p>\n<i>n</i> (0 &lt; <i> n </i> &le; 100) is the number of checks.\nEach of following <i> n </i> lines gives the details of a check in the following format.\n<pre>\n<i>hh:mm MM</i>\n</pre>\n<p>\n<i>hh:mm</i> is the clock time to print the check.\n<i>MM</i> is minute of the clock time to provide products.\nThe clock time is expressed according to the 24 hour clock.<br>\nFor example, \"eleven one PM\" is expressed by \"23:01\".<br>\nYou can assume that the all of products are provided within fifteen minutes.\nThe restaurant is open from AM 11:00 to AM 02:00.\nAfter AM 02:00, no check is printed.\nAlso at AM 02:00, no check is printed.\n</p>\n<h2>Output</h2>\n<p>\nYour program has to print in the following format for each dataset.\n</p>\n<pre>\nlunch <i>L</i>\ndinner <i>D</i>\nmidnight <i>M</i>\n</pre>\n<p>\n<i> L </i> is ratio of \"ok\" check printed to the total in lunch time.\n<i> D </i> is ratio of \"ok\" check printed to the total in  dinner time.\n<i> M </i> is ratio of \"ok\" check printed to the total in midnight time.\nYou can truncate digits number after the decimal point of the ratio on the percentage. Lunch, dinner, and midnight times are defined as follows:\n</p>\n<pre>\nLunch time is 11:00 ~ 14:59.\nDinner time is 18:00 ~ 20:59.\nMidnight time is 21:00 ~ 01:59.\n</pre>\n<p>\nIf a check is not printed in the three range of time, you don't have to process it.\nIf no check is in the range of time, you should print \"no guest\".\n</p>\n\n<h2>Sample input</h2>\n<pre>\n5\n12:57 59\n20:12 15\n12:19 21\n18:52 03\n16:09 14\n0\n</pre>\n\n<h2>Sample output</h2>\n<pre>\nlunch 100\ndinner 50\nmidnight no guest\n</pre>\n\n<h2>Hint</h2>\n<p>\nIf you want to read three integers in the following format,<br>\ninteger:integer(space)integer<br>\nyou can read them by scanf(\"%d%*c%d%d\",&a, &b, &c); in C.\n</p>\n\n<!--\n<hr>\n<div class=\"dat\" style=\"font-size:10pt\">\nThe University of Aizu Programming Contest 2011<br>\nProblemsetter: Tetsuya Shiota<br>\n</div>\n-->", "p00648": "\n<h1>Problem B: Watchin' TVA</h1>\n<p>\nAnimation is one of methods for making movies and in Japan, it is popular to broadcast as a television program or perform as a movie. Many people, especially the young, love one. And here is an anime lover called Jack. We say he is an mysterious guy with uncertain age. He likes anime which are broadcasted in midnight and early morning especially.\n</p>\n<p>\nIn his room, there is a huge piece of paper on the wall. He writes a timetable of TV anime on it. In his house, he can watch all Japanese TV anime programs that are broadcasted in Japan using a secret and countrywide live system. However he can not watch all anime and must give up to watch some programs because they are \"broadcasted at the same time\" in a season. Here, programs are \"broadcasted at the same time\" means that two or more programs have one or more common minutes in broadcasting time. Increasing the number of anime programs in recent makes him nervous. Actually, some people buy DVDs after the program series ends or visit a web site called vhefoo. Anyway, he loves to watch programs on his live system. Of course, he is not able to watch two or more programs at the same time. However, as described above, he must give up some programs broadcasted at the same time. Therefore, he has a set of programs <i>F</i> and he watches programs in a set <i>F</i> absolutely.\n</p>\n<p>\nYour task is to write a program that reads a timetable and outputs the maximum number of watchable programs, keeping that Jack watches all programs in the set <i>F</i>. Of course, there are multiple choices of programs, so we want the number of programs he can watch. If two or more programs in a set <i>F</i> are broadcasted at the same time, you must give Jack an unfortunate announcement. In this case, your program outputs -1. In addition, each anime program is a program of 30 minutes.\n</p>\n<h2>Input</h2>\n<p>\nInput consists of multiple datasets.<br>\nA dataset is given in a following format.\n</p>\n<pre>\n<i>N</i>\n<i>PROGRAM<sub>1</sub></i>\n<i>PROGRAM<sub>2</sub></i>\n...\n<i>PROGRAM<sub>N</sub></i>\n<i>P</i>\n<i>FAV<sub>1</sub></i>\n<i>FAV<sub>2</sub></i>\n...\n<i>FAV<sub>P</sub></i>\n</pre>\n<p>\n<i>N</i> is the number of programs in a season.<br>\n<i>PROGRAM<sub>i</sub></i>(1&le;<i>i</i>&le;<i>N</i>)is a string which has the following format.\n</p>\n<pre>\n<i>name</i> <i>weekday</i> <i>start</i>\n</pre>\n<ul>\n<li><i>name</i> is a program name. This is a a string having between 1 and 32 characters and these names do not overlap each other program. A name consists of alphanumeric characters and '_'(underscore).</li>\n<li><i>weekday</i> is a broadcasting weekday about the corresponding program. This is an integer. 0 means Sunday and 1 is Monday and so on (2:Tuesday, 3:Wednesday, 4:Thursday, 5:Friday, 6:Saturday).</li>\n<li><i>start</i> is a starting time of the program broadcasting. This is an integer between 600 and 2929. First one or two digits represent hour and the last two digits represent minute. If the hour has one digit it will be a representation \"900\" for example. Note: a program may have an integer more than or equal to 2400 as <i>start</i>, if the program begins the next day. For example, a program begins from 2500 on Monday should be interpreted as a program begins from 0100 on Tuesday.<font color=\"#880000\"> There are no input the minute of <i>start</i> exceeds 59. And when the hour of <i>start</i> is equal to 29, there are no input the minute of <i>start</i> exceeds 29.</font></li>\n</ul>\n<p>\n<i>P</i> is an integer and represents the number of elements in the set <i>F</i>.  And <i>FAV<sub>i</sub></i>(1&le;<i>i</i>&le;<i>P</i>&le;<i>N</i>) is a string for a program name which Jack watches absolutely. You can assume names which are not given in program descriptions will not appear in the set <i>F</i>.<br>\nThe last line contains a single 0 which represents the end of input.\n</p>\n<h2>Constraints</h2>\n<p>\nThe number of datasets is less than or equal to 400.<br>\n1&le;<i>N</i>&le;500\n</p>\n<h2>Output</h2>\n<p>\nFor each dataset, output an integer <i>S</i> that represents maximum number of programs Jack can watch in the following format.\n</p>\n<pre>\n<i>S</i>\n</pre>\n<h2>Sample Input</h2>\n<pre>\n1\ngalaxy_angel 0 600\n1\ngalaxy_angel\n11\nA 0 600\nB 0 610\nC 0 610\nD 0 610\nE 0 640\nEE 0 700\nF 0 710\nG 0 710\nH 0 710\nI 0 740\nJ 0 750\n2\nB\nH\n42\nnchj 6 2620\nanhnnnmewbktthsrn 4 2515\ngntmdsh 1 1800\nachnnl 4 2540\nhnskirh 0 2200\naonexrcst 0 1700\ndgdys 6 2330\nhdnnara 4 2525\ndnpaonntssotk 4 2555\nddmnwndrlnd 6 2500\nC 4 2445\nastrttnomch 0 2330\nseknnqasr 1 2630\nsftnt 4 2630\nstnsgt 2 2605\ndrrnenmknmrmr 4 2610\nhnzm 6 2713\nyndmsoazzlsn 6 2658\nmrahlcalv 4 2615\nhshzrhkkrhs 1 900\nortchntsbshni 0 2430\nkmnmzshrski 1 2530\nsktdnc 4 1800\ngykkybrkjhkirkhn 2 2459\ntrk 0 900\n30zzsinhkntiik 3 2700\nsngkotmmmirprdx 1 2600\nyran 2 2529\ntntissygntinybu 1 2614\nskiichhtki 5 2505\ntgrbnny 6 2558\ndnbrsnki 3 1927\nyugozxl 1 1930\nfrbllchrmn 1 1928\nfjrg 1 1955\nshwmngtr 0 2200\nxmn 5 2200\nrngnkkrskitikihn 0 2100\nszysz 0 1254\nprttyrythmaulrdrm 6 1000\nsckiesfrntrqst 5 1820\nmshdr 1 2255\n1\nmrahlcalv\n0\n</pre>\n<h2>Output for the Sample Input</h2>\n<pre>\n1\n4\n31\n</pre>\n<h2>Hint</h2>\n<p>\nSecond dataset: He can watch program E after watching B. Then he can choose a program either I or J after watching H. Therefore he can watch maximum 4 programs.\n</p>\n", "p00650": "\n<H1>Problem D: The House of Huge Family</H1>\n<p>\nMr. Dango's family has an extremely huge number of members.\nOnce it had about 100 members, and now it has as many as population of a city.\nIt is jokingly guessed that the member might fill this planet in the near future.\n</p>\n\n<p>\nMr. Dango's family, the huge family, is getting their new house.\nScale of the house is as large as that of town.\n</p>\n\n<p>\nThey all had warm and gracious personality and were close each other.\nHowever, in this year the two members of them became to hate each other.\nSince the two members had enormous influence in the family, they were split into two groups.\n</p>\n\n<p>\nThey hope that the two groups don't meet each other in the new house.\nThough they are in the same building, they can avoid to meet each other by adjusting passageways.\n</p>\n\n<p>\nNow, you have a figure of room layout. Your task is written below.\n</p>\n\n<p>\nYou have to decide the two groups each room should belong to.\nBesides you must make it impossible that they move from any rooms belonging to one group to any rooms belonging to the other group.\nAll of the rooms need to belong to exactly one group.\nAnd any group has at least one room.\n</p>\n\n<p>\nTo do the task, you can cancel building passageway.\nBecause the house is under construction, to cancel causes some cost.\nYou'll be given the number of rooms and information of passageway.\nYou have to do the task by the lowest cost.\n</p>\n<p>\nPlease answer the lowest cost.\n</p>\n<p>\nBy characteristics of Mr. Dango's family, they move very slowly.\nSo all passageways are escalators.\nBecause of it, the passageways are one-way.\n</p>\n\n<h2>Input</h2>\n<p>\nThe input consists of multiple datasets.\nEach dataset is given in the following format.\n</p>\n<pre>\n<i>n</i> <i>m</i>\n<i>X<sub>1</sub> Y<sub>1</sub> C<sub>1</sub></i>\n...\n<i>X<sub>m</sub> Y<sub>m</sub> C<sub>m</sub></i>\n</pre>\n<p>\nAll numbers in each datasets are integers.\nThe integers in each line are separated by a space.\n</p>\n\n<p>\nThe first line of each datasets contains two integers.\n<i>n</i> is the number of rooms in the house, m is the number of passageways in the house.\nEach room is indexed from 0 to <i>n</i>-1.\n</p>\n\n<p>\nEach of following <i> m </i> lines gives the details of the passageways in the house.\nEach line contains three integers.\nThe first integer <i>X<sub>i</sub></i> is an index of the room, the starting point of the passageway.\nThe second integer <i>Y<sub>i</sub></i> is an index of the room, the end point of the passageway.\nThe third integer <i>C<sub>i</sub></i> is the cost to cancel construction of the passageway.\nThe passageways, they are escalators, are one-way.\nThe last dataset is followed by a line containing two zeros (separated by a space).\n</p>\n\n<H2>Constraints</h2>\n<ul>\n<li>2 &le; <i> n </i> &le; 100</li>\n<li>-10,000 &le; <i>C<sub>i</sub></i> &le; 10,000</li>\n<li><i>Y<sub>1</sub></i> ... <i>Y<sub>m</sub></i> can't be duplicated integer by each other.</li>\n</ul>\n\n<h2>Output</h2>\n<p>\nFor each dataset, print the lowest cost in a line. You may assume that the all of integers of both the answers and the input can be represented by 32 bits signed integers.\n</p>\n\n<h2>Sample input</h2>\n<pre>\n3 2\n0 1 2\n1 2 1\n2 1\n0 1 100\n2 1\n0 1 0\n2 1\n0 1 -1\n0 0\n</pre>\n\n<h2>Sample output</h2>\n<pre>\n1\n100\n0\n-1\n</pre>\n\n", "p00653": "\n<H1>Problem G: School of Killifish</H1>\n<p>\nJon is the leader of killifish.\nJon have a problem in these days.\nJon has a plan to built new town in a pond.\nOf course new towns should have a school for children. But there are some natural enemies in a pond.\nJon thinks that the place of a school should be the safest place in a pond for children.\n</p>\n\n<p>\nJon has asked by some construction companies to make construction plans and Jon has <i> q </i> construction plans now.\nThe plan is selected by voting. But for each plan, the safest place for the school should be decided before voting.\n</p>\n\n<p>\nA pond is expressed by a 2D grid whose size is <i>r*c</i>.\nThe grid has <i>r</i> rows and <i>c</i> columns. The coordinate of the top-left cell is (0,0). The coordinate of the bottom-right cell is expressed as (<i>r</i>-1,<i>c</i>-1).\nEach cell has an integer which implies a dangerousness.\nThe lower value implies safer than the higher value.\n<i>q</i> plans are given by four integer <i>r1</i> ,<i>c1</i> ,<i>r2</i> and <i>c2</i> which represent the subgrid. \nThe top-left corner is (<i>r1</i>,<i>c1</i>) and the bottom-right corner is (<i>r2</i>,<i>c2</i>).\n</p>\n\n<p>\nYou have the <i>r*c</i> grid and <i>q</i> plans. Your task is to find the safest point for each plan.\nYou should find the lowest value in the subgrid.\n</p>\n\n<h2>Input</h2>\n<p>\nInput consists of multiple datasets.<br>\nEach dataset is given in the following format.\n</p>\n\n<pre>\n<i>r</i> <i>c</i> <i>q</i>\n<i>grid<sub>0,0</sub></i> <i>grid<sub>0,1</sub></i> ... <i>grid<sub>0,c-1</sub></i>\n...\n<i>grid<sub>r-1,0</sub></i> ... <i>grid<sub>r-1,c-1</sub></i>\n<i>r1</i> <i>c1</i> <i>r2</i> <i>c2</i>\n...\n<i>r1</i> <i>c1</i> <i>r2</i> <i>c2</i>\n</pre>\n\n<p>\nThe first line consists of 3 integers, <i>r</i> ,<i>c</i> , and <i>q</i> .\nNext <i>r</i> lines have <i>c</i> integers.\n<i>grid<sub>i,j</sub></i> means a dangerousness of the grid.\nAnd you can assume 0 &le; <i>grid<sub>i,j</sub></i> &le; 2<sup>31</sup>-1.\nAfter that, <i>q</i> queries, <i>r1</i>, <i>c1</i>, <i>r2</i> and <i>c2</i>,  are given.\n</p>\n\n<p>\nThe dataset satisfies following constraints.<br>\n<i>r*c</i> &le; 10<sup>6</sup><br>\n<i>q</i> &le; 10<sup>4</sup><br>\nFor each query, you can assume that <i>r1</i>&le; <i>r2</i> and <i>c1</i> &le; <i>c2</i> .\n\nIf <i> r * c </i> &le; 250000, <i>q</i> &le; 100 is assured.\nIf <i> r * c </i> &gt; 250000, Input consists of only that case.\n</p>\n\n<h2>Output</h2>\n<p>\nFor each query you should print the lowest value in the subgrid in a line.\n</p>\n\n<H2>Sample input</H2>\n<pre>\n3 3 4\n1 2 3\n4 2 2\n2 1 1\n0 0 2 2\n0 0 1 1\n1 0 1 0\n0 1 1 2\n1 10 4\n1 2 3 4 5 6 7 8 9 10\n0 0 0 9\n0 0 0 4\n0 5 0 9\n0 4 0 5\n0 0 0\n</pre>\n\n<h2>Sample output</h2>\n<pre>\n1\n1\n4\n2\n1\n1\n6\n5\n</pre>\n\n", "p00654": "\n<H1>Problem H: Squid Multiplication</H2>\n<p>\nSquid Eiko loves mathematics.\nEspecially she loves to think about integer.\nOne day, Eiko found a math problem from a website.\n</p>\n\n<p>\n\"A sequence <i>b</i> ={<i>a<sub>i</sub></i> + <i>a<sub>j</sub></i> | <i>i</i> &lt <i>j</i> }  is generated from a sequence <i>a</i> ={<i>a<sub>0</sub></i> , ... , <i>a<sub>n</sub></i> | <i>a<sub>i</sub></i> is even if <i>i</i> is 0, otherwise <i>a<sub>i</sub></i> is odd}. Given the sequence <i>b</i> , find the sequence <i>a</i> .\"\n</p>\n\n<p>\nThis problem is easy for Eiko and she feels boring. So, she made a new problem by modifying this problem .\n</p>\n\n<p>\n\"A sequence <i>b</i> ={<i>a<sub>i</sub></i> *<i>a<sub>j</sub></i> | <i>i</i> &lt; <i>j</i> }  is generated from a sequence <i>a</i> ={ <i>a<sub>0</sub></i>, ... , <i>a<sub>n</sub></i> | <i>a<sub>i</sub></i> is even if <i> i </i> is 0, otherwise <i>a<sub>i</sub></i> is odd}. Given the sequence <i>b</i> , find the sequence <i>a</i> .\"\n</p>\n\n<p>\nYour task is to solve the problem made by Eiko.\n</p>\n\n<h2>Input</h2>\n<p>\nInput consists of multiple datasets.<br>\nEach dataset is given by following formats.\n</p>\n<pre>\n<i>n</i>\n<i>b<sub>0</sub></i> <i>b<sub>1</sub></i> ... <i>b<sub>n*(n+1)/2-1</sub></i>\n</pre>\n\n<p>\n<i>n</i> is the number of odd integers in the sequence <i>a</i>. The range of <i>n</i> is 2 &le; <i>n</i> &le; 250.\n<i>b<sub>i</sub></i> is separated by a space.\nEach <i>b<sub>i</sub></i> is 1 &le; <i>b<sub>i</sub></i> &le; 2<sup>63</sup>-1.\nThe end of the input consists of a single 0.\n</pre>\n\n<h2>Output</h2>\n<p>\nFor each dataset, you should output two lines.\nFirst line contains <i>a<sub>0</sub></i>, an even number in the sequence <i>a</i>.\nThe second line contains <i>n</i> odd elements separated by a space. The odd elements are sorted by increasing order.\nYou can assume that the result is greater than or equal to 1 and less than or equal to 2<sup>31</sup>-1.\n</p>\n\n<h2>Sample input</h2>\n<pre>\n3\n6 10 14 15 21 35\n2\n30 42 35\n0\n</pre>\n\n<h2>Sample output</h2>\n<pre>\n2\n3 5 7\n6\n5 7\n</pre>\n", "p00656": "\n<h1>Problem J: BD Shelf</h1>\n<p>\nRemember the boy called Jack. He likes anime, especially programs broadcasting in midnight or early morning. In his room, there is a big shelf and it is kept organized well. And there are anime BD/DVDs which he watched or gave up because of overlapping of broadcasting time with other animes.  His money is tight, but he succeeded to get <i>W</i> hundreds dollars because of an unexpected event. And he came up with enhancing the content of his BD shelf.\n</p>\n<p>\nHe is troubled about the usage of the unexpected income. He has a good judge for anime to choose the anime he can enjoy because he is a great anime lover. Therefore, first of all, he listed up expectable animes and assigned each anime a value that represents \"a magnitude of expectation\". Moreover Jack tagged a mysterious string M for each anime. However Jack did not tell you the meaning of the string M.\n</p>\n<p>\nYour task is to write a program that reads a string <i>X</i> and that maximizes the sum of magnitudes of expectation when Jack bought BD/DVD boxes of anime with the budget of <i>W</i> hundreds dollars. Here, Jack must buy anime's BD/DVD box that have a string <i>X</i> as a sub-string of the string <i>M</i> assigned the anime. If he can not buy any boxes, output -1.\n</p>\n<p>\nA sequence of string <i>X</i> is given in order in the input as query. Assume two strings <i>X<sub>1</sub></i> and <i>X<sub>2</sub></i> are given as string <i>X</i>, and <i>X<sub>1</sub></i> is the prefix of <i>X<sub>2</sub></i>.  If <i>X<sub>1</sub></i> is given in the input preceding <i>X<sub>2</sub></i>, you must not buy an anime which has the minimum magnitude of expectation among animes extracted by <i>X<sub>1</sub></i> in the calculation for <i>X<sub>2</sub></i>.  And vice versa (<i>X<sub>1</sub></i> is the prefix of <i>X<sub>2</sub></i> and if <i>X<sub>2</sub></i> is given in the input preceding <i>X<sub>1</sub></i>, ...) .\nFor example, If three strings \"a\", \"abc\" and \"ab\" are given in this order in the input, In the processing for string \"abc\", you must not extract an anime which has the minimum magnitude of expectation among animes extracted by the processing of the string \"a\". In the processing for string \"ab\", you must not extract an anime has minimum magnitude of expectation among animes extracted by the processing of the string \"abc\" and \"a\".\n</p>\n<h2>Input</h2>\n<p>\nInput consists of multiple datasets.<br>\nA dataset is given in the following format.\n<p>\n<pre>\n<i>N</i> <i>W</i>\n<i>string<sub>1</sub></i> <i>expectation<sub>1</sub></i> <i>price<sub>1</sub></i>\n<i>string<sub>2</sub></i> <i>expectation<sub>2</sub></i> <i>price<sub>2</sub></i>\n...\n<i>string<sub>N</sub></i> <i>expectation<sub>N</sub></i> <i>price<sub>N</sub></i>\n<i>Q</i>\n<i>query<sub>1</sub></i>\n<i>query<sub>2</sub></i>\n...\n<i>query<sub>Q</sub></i>\n</pre>\n<p>\n<i>N</i> is an integer that represents the number of anime. Following <i>N</i> lines contains the information of each anime.<br>\n<i>string<sub>i</sub></i>(1&le;<i>i</i>&le;<i>N</i>) is a string consists of lowercase letters that represents string <i>M</i> assigned <i>i</i>-th anime by Jack. No two characters in this string are same.<br>\n<i>expectation<sub>i</sub></i>(1&le;<i>i</i>&le;<i>N</i>) is a natural number that represents a magnitude of expectation of the <i>i</i>-th anime.<br>\n<i>price<sub>i</sub></i>(1&le;<i>i</i>&le;<i>N</i>) is a natural number that represents a price(cost) in hundreds to buy the <i>i</i>-th anime.\n<i>Q</i> is an integer that represents the number of queries.<br>\n<i>query<sub>i</sub></i>(1&le;<i>i</i>&le;<i>Q</i>) is a string consists of lowercase letters. This is a string <i>X</i> described in the problem statement.<br>\n<i>N</i>=<i>W</i>=0 shows the end of the input.\n</p>\n<h2>Constraints</h2>\n<p>\nThere are 4 test cases. This is given by the following order.<br>\nIn the first testcase, 4 datasets satisfy <i>N</i>&le;10 and <i>Q</i>&le;10, 6 datasets satisfy <i>N</i>&le;5000 and <i>Q</i>&le;5000.<br>\nIn the 2nd, 3rd and 4th testcase, each satisfies <i>N</i>&le;20000 and <i>Q</i>&le;20000.<br>\nThe time limit for this problem is the limit for each testcase.<br>\n1&le;<i>N</i>&le;20000<br>\n1&le;<i>W</i>&le;20<br>\n1&le;(the length of <i>string<sub>i</sub></i>(1&le;<i>i</i>&le;<i>N</i>))&le;10<br>\n1&le;<i>price<sub>i</sub></i>(1&le;<i>i</i>&le;<i>N</i>)&le;20<br>\n1&le;<i>expectation<sub>i</sub></i>(1&le;<i>i</i>&le;<i>N</i>)&le;7000000<br>\n1&le;<i>Q</i>&le;20000<br>\n1&le;(the length of <i>query<sub>i</sub></i>(1&le;<i>i</i>&le;<i>Q</i>))&le;5<br>\nIt is assured that all values for expectation are different.\n</p>\n<h2>Output</h2>\n<p>\nFor each query, output an integer <i>S</i> on a line that represents the maximum sum of magnitudes of expectation in the following format.\n<pre>\n<i>S</i>\n</pre>\n</p>\n<h2>Sample Input</h2>\n<pre>\n3 4\nabc 1 1\nabc 10 1\nabc 100 1\n3\na\nabc\nab\n3 4\nab 1 1\nab 10 1\nabc 100 1\n3\nabc\nab\na\n3 4\nabc 1 1\nabc 10 1\nabc 100 1\n3\nab\nab\nab\n8 20\nabcdef 100 2\nbcdef 200 1\ncfghj 300 3\nksjirto 400 6\nksitoew 500 2\nqwertyl 600 2\nkjhbvc 700 2\nedfghucb 800 1\n10\nks\ncd\nhj\ne\na\ng\nh\nj\ni\na\n0 0\n</pre>\n<h2>Output for the Sample Input</h2>\n<pre>\n111\n110\n100\n100\n11\n10\n111\n110\n100\n900\n300\n300\n2200\n100\n1100\n1500\n1400\n900\n-1\n</pre>\n", "p00655": "\n\n<H1>Problem I: FIMO sequence</H1>\n<p>\nYour task is to simulate the sequence defined in the remaining part of the problem description.\n</p>\n\n<p>\nThis sequence is empty at first.\n<i> i </i>-th element of this sequence is expressed as <i> a<sub>i</sub> </i>.\nThe first element of this sequence is <i> a<sub>1</sub> </i> if the sequence is not empty.\nThe operation is given by integer from 0 to 9.\nThe operation is described below.\n</p>\n\n<p>\n0:\nThis query is given with some integer <i>x</i>.\nIf this query is given, the integer x is inserted into the sequence.\nIf the sequence is empty, <i>a<sub>1</sub></i> = <i>x</i>.\nIf the sequence has <i>n</i> elements, <i>a<sub>n+1</sub></i> = <i>x</i>.\nSame integer will not appear more than once as <i>x</i>.\n</p>\n\n<p>\n1:\nIf this query is given, one element in the sequence is deleted.\nThe value in the middle of the sequence is deleted.\nIf the sequence has <i>n</i> elements and <i> n </i> is even, <i> a<sub>n/2</sub> </i> will be deleted.\nIf <i> n </i> is odd, <i> a<sub>&lceil;n/2&rceil;</sub> </i> will be deleted.\nThis query is not given when the sequence is empty.\n\nAssume that the sequence has <i> a<sub>1</sub> </i>=1,<i> a<sub>2</sub> </i>=2,<i> a<sub>3</sub> </i>=3,<i> a<sub>4</sub> </i>=4 and <i> a<sub>5</sub> </i>=5.\nIn this case, <i> a<sub>3</sub> </i> will be deleted.\nAfter deletion, the sequence will be <i> a<sub>1</sub> </i>=1, <i> a<sub>2</sub> </i>=2,<i> a<sub>3</sub> </i>=4,<i> a<sub>4</sub> </i>=5.\n\nAssume that the sequence has <i> a<sub>1</sub> </i>=1,<i> a<sub>2</sub> </i>=2,<i> a<sub>3</sub> </i>=3 and <i> a<sub>4</sub> </i>=4,\nIn this case, <i> a<sub>2</sub> </i> will be deleted.\nAfter deletion, the sequence will be <i> a<sub>1</sub> </i>=1,<i> a<sub>2</sub> </i>=3, <i> a<sub>3</sub> </i>=4.\n</p>\n\n<p>\n2:\nThe first half of the sequence is defined by the index from 1 to &lceil;<i>n</i>/2&rceil; .\nIf this query is given, you should compute the minimum element of the first half of the sequence.\nThis query is not given when the sequence is empty.\n</p>\n\n<p>\nLet me show an example.<br>\nAssume that the sequence is {6,2,3,4,5,1,8}.\nIn this case, the minimum element of the first half of the sequence, {6,2,3,4} is 2.\n</p>\n\n\n<p>\n3:\nThe latter half of the sequence is elements that do not belong to the first half of the sequence.\nIf this query is given, you should compute the minimum element of the latter half of the sequence.\nThis query is not given when the sequence is empty.\n</p>\n\n<p>\nLet me show an example.<br>\nAssume that the sequence is {6,2,3,4,5,1,8}.\nIn this case the answer for this query is 1 from {5,1,8}.\n</p>\n\n<p>\n4:\nThis query is given with an integer <i>i</i>.\nAssume that deletion is repeated until the sequence is empty.\nSome elements in the first half of the sequence will become the answer for query 2.\nYou should compute the <i> i </i>-th minimum element from the answers.\nThis query is not given when the sequence is empty.\nYou can assume that <i> i </i>-th minimum element exists when this query is given.\n</p>\n\n<p>\nLet me show an example.\n</p>\n<pre>\nAssume that deletion will be repeated to the sequence {6,2,3,4,5,1,8}.\n{6,2,3,4,5,1,8} The minimum element in the first half of the sequence is 2.\n{6,2,3,5,1,8}   The minimum element in the first half of the sequence is 2.\n{6,2,5,1,8}     The minimum element in the first half of the sequence is 2.\n{6,2,1,8}       The minimum element in the first half of the sequence is 2.\n{6,1,8}         The minimum element in the first half of the sequence is 1.\n{6,8}           The minimum element in the first half of the sequence is 6.\n{8}             The minimum element in the first half of the sequence is 8.\n{}              The first half of the sequence is empty.\n</pre>\n<p>\nFor the initial state, {6,2,3,4} is the first half of the sequence.\n2 and 6 become the minimum element of the first half of the sequence.\nIn this example, the 1-st minimum element is 2 and the 2-nd is 6.\n</p>\n\n<p>\n5:\nThis query is given with an integer <i> i </i>.\nAssume that deletion is repeated until the sequence is empty.\nSome elements in the latter half of the sequence will become the answer for query 3.\nYou should compute the <i> i </i>-th minimum element from the answers.\nThis query is not given when the sequence is empty.\nYou can assume that <i> i </i>-th minimum element exists when this query is given.\n</p>\n\n<p>\nLet me show an example.\n</p>\n<pre>\nAssume that deletion will be repeated to the sequence {6,2,3,4,5,1,8}.\n{6,2,3,4,5,1,8} The minimum elemets in the latter half of the sequence is 1.\n{6,2,3,5,1,8}   The minimum elemets in the latter half of the sequence is 1.\n{6,2,5,1,8}     The minimum elemets in the latter half of the sequence is 1.\n{6,2,1,8}       The minimum elemets in the latter half of the sequence is 1.\n{6,1,8}         The minimum elemets in the latter half of the sequence is 8.\n{6,8}           The minimum elemets in the latter half of the sequence is 8.\n{8}             The latter half of the sequence is empty.\n{}              The latter half of the sequence is empty.\n</pre>\n<p>\nFor the initial state, {5,1,8} is the latter half of the sequence.\n1 and 8 becomes the minimum element of the latter half ot the sequence.\nIn this example, the 1-st minimum element is 1 and the 2-nd is 8.\n</p>\n\n<p>\n6:\nIf this query is given, you should compute the maximum element of the first half of the sequence.\nThis query is not given when the sequence is empty.\n</p>\n<p>\nLet me show an example.<br>\nAssume that the sequence is {1,3,2,5,9,6,7}.\nIn this case, the maximum element of the first half of the sequence,{1,3,2,5}, is 5.\n</p>\n\n<p>\n7:\nIf this query is given, you should compute the maximum element of the latter half of the sequence.\nThis query is not given when the sequence is empty.\n</p>\n\n<p>\nLet me show an example.<br>\nAssume that the sequence is {1,3,2,5,9,6,7}.\nIn this case, the maximum element of the latter half of the sequence,{9,6,7}, is 9.\n</p>\n\n<p>\n8:\nThis query is given with an integer <i> i </i>.\nAssume that deletion is repeated until the sequence is empty.\nSome elements in the first half of the sequence will become the answer for query 6.\nYou should compute the <i> i </i>-th maximum element from the answers.\nThis query is not given when the sequence is empty.\nYou can assume that <i> i </i>-th maximum elements exists when this query is given.\n</p>\n\n<p>Let me show an example.</p>\n<pre>\nAssume that deletion will be repeated to the sequence {1,3,2,5,9,6,7}.\n{1,3,2,5,9,6,7} The maximum element in the first half of the sequence is 5.\n{1,3,2,9,6,7}   The maximum element in the first half of the sequence is 3.\n{1,3,9,6,7}     The maximum element in the first half of the sequence is 9.\n{1,3,6,7}       The maximum element in the first half of the sequence is 3.\n{1,6,7}         The maximum element in the first half of the sequence is 6.\n{1,7}           The maximum element in the first half of the sequence is 1.\n{7}             The maximum element in the first half of the sequence is 7.\n{}              The first half of the sequence is empty.\n</pre>\n<p>\nFor the initial state, {1,3,2,5} is the first half of the sequence.\n1,3 and 5 becomes the maximum element of the first half of the sequence.\nIn this example, the 1-st maximum element is 5, the 2-nd is 3 and the 3-rd is 1.\n</p>\n\n<p>\n9:\nThis query is given with an integer <i> i </i>.\nAssume that deletion is repeated until the sequence is empty.\nSome elements in the latter half of the sequence will become the answer for query 7.\nYou should compute the <i> i </i>-th maximum element from the answers.\nThis query is not given when the sequence is empty.\nYou can assume that <i> i </i>-th maximum elements exists when this query is given.\n</p>\n\n<p>Let me show an example.</p>\n<pre>\nAssume that deletion will be repeated to the sequence {1,3,2,5,9,6,7}.\n{1,3,2,5,9,6,7} The maximum element in the latter half of the sequence is 9.\n{1,3,2,9,6,7}   The maximum element in the latter half of the sequence is 9.\n{1,3,9,6,7}     The maximum element in the latter half of the sequence is 7.\n{1,3,6,7}       The maximum element in the latter half of the sequence is 7.\n{1,6,7}         The maximum element in the latter half of the sequence is 7.\n{1,7}           The maximum element in the latter half of the sequence is 7.\n{7}             The latter half of the sequence is empty.\n{}              The latter half of the sequence is empty.\n</pre>\n<p>\nFor the initial state, {9,6,7} is the latter half of the sequence.\n7 and 9 becomes the maximum element of the latter half of the sequence.\nIn this example, the 1-st maximum element is 9 and the 2-nd is 7.\n</p>\n\n<h2>Input</h2>\n<p>\nInput consists of multiple test cases.\nThe first line is the number of queries.\nFollowing q lines are queries.\n</p>\n<pre>\n<i>q</i>\n<i>query<sub>0</sub></i>\n...\n<i>query<sub>i</sub></i>\n...\n<i>qurey_<sub>q-1</sub></i>\n</pre>\n\n<p>\nThe sum of the number of queries in the input data is less than 200001.\nIf <i>query<sub>i</sub></i> = 0, 4, 5, 8, and 9 are consists of pair of integers.\nOther queries are given with a single integer.\nYou can assume that the length of the sequence doesn't exceed 20000.\n</p>\n\n<h2>Output</h2>\n<p>\nIf the query is 0, you don't output any numbers.\nIf the query is 1, you should output the deleted number.\nFor other queries, you should output the computed value.\nFor each case, you should output \"end\" (without quates) after you process all queries.\n</p>\n\n<h2>Sample input</h2>\n<pre>\n5\n0 1\n0 2\n0 3\n0 4\n1\n6\n0 1\n0 2\n0 3\n0 4\n0 5\n1\n31\n0 6\n0 2\n0 3\n0 4\n0 5\n0 1\n0 8\n4 1\n4 2\n5 1\n5 2\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n1\n32\n0 1\n0 3\n0 2\n0 5\n0 9\n0 6\n0 7\n8 1\n8 2\n8 3\n9 1\n9 2\n6\n7\n1\n6\n7\n1\n6\n7\n1\n6\n7\n1\n6\n7\n1\n6\n7\n1\n6\n1\n0\n</pre>\n\n<h2>Sample output</h2>\n<pre>\n2\nend\n3\nend\n2\n6\n1\n8\n2\n1\n4\n2\n1\n3\n2\n1\n5\n2\n1\n2\n1\n8\n1\n6\n8\n6\n8\n8\nend\n5\n3\n1\n9\n7\n5\n9\n5\n3\n9\n2\n9\n7\n9\n3\n7\n3\n6\n7\n6\n1\n7\n1\n7\n7\nend\n</pre>\n", "p00657": "\n<H1>Problem K: Rearranging Seats</H1>\n<p>\nHaruna is a high school student.\nShe must remember the seating arrangements in her class because she is a class president.\nIt is too difficult task to remember if there are so many students.\n</p>\n\n<p>\nThat is the reason why seating rearrangement is depress task for her.\nBut students have a complaint if seating is fixed.\n</p>\n\n<p>\nOne day, she made a rule that all students must move but they don't move so far as the result of seating rearrangement.\n</p>\n\n<p>\nThe following is the rule.\nThe class room consists of <i>r*c</i> seats.\nEach <i>r</i> row has <i>c</i> seats.\nThe coordinate of the front row and most left is (1,1). The last row and right most is (<i>r</i>,<i>c</i>).\nAfter seating rearrangement, all students must move next to their seat.\nIf a student sit (<i>y</i>,<i>x</i>) before seating arrangement, his/her seat must be (<i>y</i>,<i>x</i>+1) , (<i>y</i>,<i>x</i>-1), (<i>y</i>+1,<i>x</i>) or (<i>y</i>-1,<i>x</i>).\nThe new seat must be inside of the class room. For example (0,1) or (<i>r</i>+1,<i>c</i>) is not allowed.\n</p>\n\n<p>\nYour task is to check whether it is possible to rearrange seats based on the above rule.\n</p>\n\n<H2>Input</h2>\n<p>\nInput consists of multiple datasets.\nEach dataset consists of 2 integers.\nThe last input contains two 0.\nA dataset is given by the following format.\n</p>\n<pre>\n<i>r</i> <i>c</i>\n</pre>\n<p>\nInput satisfies the following constraint.<br>\n1 &le; <i>r</i> &le; 19, 1 &le; <i>c</i> &le; 19\n</p>\n\n<h2>Output</h2>\n<p>\nPrint \"yes\" without quates in one line if it is possible to rearrange the seats, otherwise print \"no\" without quates in one line.\n</p>\n\n<h2>Sample Input</h2>\n<pre>\n1 1\n2 2\n0 0\n</pre>\n\n<h2>Sample Output</h2>\n<pre>\nno\nyes\n</pre>\n\n<h2>Hint</h2>\n<p>\nFor the second case, before seat rearrangement, the state is shown as follows.\n</p>\n<pre>\n1 2\n3 4\n</pre>\n<p>\nThere are some possible arrangements.\nFor example\n</p>\n<pre>\n2 4\n1 3\n</pre>\n<p>\nor\n</p>\n<pre>\n2 1\n4 3\n</pre>\n<p>\nis valid arrangement.\n</p>", "p00658": "\n<H1>Problem L: The Tower</H1>\n<p>\nYour task is to write a program that reads some lines of command for the following game and simulates operations until the player reaches the game over. We call following 2-dimensional grid of <i>m</i> by <i>n</i> characters Tower. The objective of this game is to move blocks in the tower to climb to a goal block. In the following grid, the bottom line is the first row and the top one is the <i>n</i>-th row. The leftmost column is the first column and the rightmost one is the <i>m</i>-th column.\n</p>\n\n<pre>\n.................... (<i>n</i>=13 th row)\n.....#.....G........\n....##.....##.....##\n...####...IIII...###\n..####.....##.....##\n...####B..####....##\n....###....#33##..##\n.....####...#33#3.##\n.##CCCC#####2##.####\n..#####..###.#...###\n...###....###.....#1\n....####..##.......#\nS..###..#.####.....# (1st row)\n</pre>\n\n<p><strong>Explanation of cell marks:</strong></p>\n<ul>\n<li>'#' : Normal block<br>Normal block.</li>\n<li>'I' : Ice block<br>Block made of the ice.  This has different features from the normal one.</li>\n<li>'G' : Goal block<br>If the player climbs to this, game is over and clear.</li>\n<li>'C' : Fixed block<br>The player can not move this directly.</li>\n<li>'B' : Different dimensional block<br>If the player climbs to this, game is over and lose.</li>\n<li>'.' : Space<br>Empty place.</li>\n<li>'3' : Fragile block(3)<br>A fragile block of count 3.</li>\n<li>'2' : Fragile block(2)<br>A fragile block of count 2.</li>\n<li>'1' : Fragile block(1)<br>A fragile block of count 1.  If the count is zero, this block will be broken and become a space.</li>\n<li>'S' : Player<br>The player.</li>\n</ul>\n\n<p><strong>Explanation of relative positions:</strong></p>\n<pre>\n123\n4S5\n678\n</pre>\n<p>\nIn the following description, assume that left up is the position of 1, up(over S) is 2, right up is 3, left is 4, right is 5, left down is 6, down(under S) is 7, right down is 8 for S.\n</p>\n\n<p><strong>Movements of the player</strong><br>\nThe player must not go out of the tower.  The outside of the tower is considered as space cells.\n</p>\n<ul>\n<li>Move<br>The player can move everywhere in the current row as long as some of the following conditions are satisfied.\n<ul>\n<li>The player is in the first row and the target cell is a space.</li>\n<li>There are blocks under the route connecting the current cell and the target cell (horizontal segment) and the target cell is a space.  It is OK that some blocks in the horizontal segment.  And the case that some of blocks under the segment are different dimensional ones, it is also OK.</li>\n</ul>\n</li>\n<li>Climb<br>\nIf the player at the row below the n-th row (from 1st to n-1 th row) and there is a block in the right(left) and both of a cell over the player (up cell) and a right up(left up) cell are space, the player can move to the right up(left up) cell.</li>\n<li>Get down<br>\nIf the player at the row above the 1st row (from 2nd to n-th row), he can get down to right(left) down.  If the direction for getting down is right(left) and if there is no blocks in the right down (left down) cell and the right (left) cell, the player can move to the right down (left down) cell.</li>\n<li>Push<br>\nIf there is a block or continuous blocks in the right or left of the player, he can push the blocks to the direction one cell.  Here, blocks are \"continuous\" if there are two or more blocks and no space exist between them.  However, if there is a fixed block in pushing blocks, the player can not push them.  Pushed blocks will not stop the end of the row of the tower (1st and mth column). If the pushed blocks go out of the tower, this will be vanished.<br>In the result of pushing, a block moved over the ice block continues to move to the pushed direction as long as there is a space in the progress direction, there is an ice block under the block and the pushed block is not vanished.<br>\nIf the pushed block is an ice block, this continues to move to the pushed direction as long as there is a block under the ice block, there is a space in the progress direction and the pushed ice block is not vanished. However, for an ice block in the first row, the below the block do not have to be a space. And here, if the player pushes continuous blocks, pushing movements begin from the most distant block to a nearest block.  Here, the distance is manhattan distance at the gird.</li>\n<li>Pull<br>\nIf there is a block in the right(left) of the player and the left(right) cell is space, the player can pull the block.  However, if the pulling block is fixed one, he can not pull this.  If the player pulls block, the player will move one cell to the direction of pulling.</li>\n</ul>\n\n<p>\n<strong>Automated operations after the player operation:</strong><br>\nAutomated operations occur in the following order.  This repeats in this order as long as the cells of the tower are changed by this operations.  After this operations, the player can do the next operation.\n</p>\n<ul>\n<li>Countdown of fragile blocks<br>\nIf the player over a fragile block moved to somewhere else, that fragile block's count will decrease by one.  However, this count does not change if the player over the fragile block is moved to somewhere else by the automated operations.</li>\n<li>Erasing blocks<br>A block over an different dimensional block will be vanished.</li>\n<li>Falling of the player<br>If there is no block under the player, the player continues to fall as long as satisfying this condition or come to 1st row.</li>\n<li>Falling of blocks<br>If there is no block under a block and left down and right down of a certain block, the block in the row over the 1st row (from 2nd to n-th row) continues to fall as long as satisfying this condition.  Falling of blocks begins from lower blocks of the tower and then lefter blocks.</li>\n</ul>\n\n<p><strong>Conditions for game over:</strong><br>\nAfter the movement of the player or the automated operations, the game is over when the one of next conditions is satisfied.  These conditions are judged in the following order. Note that, the condition (E) should not be judged after the movement of the player.\n</p>\n<ul>\n<li>(A) The player is over the goal block.</li>\n<li>(B) The player is over the different dimensional block.</li>\n<li>(C) The player and a block is in the same cell.</li>\n<li>(D) The goal block is moved from its initial position.</li>\n<li>(E) There is no next commands.</li>\n</ul>\n\n<p>Finally, show some examples.<br>\nDocuments of commands will be give in the description of Input.</p>\n\n<table class=\"withborder\" border=1 style='font-family:monospace;'>\n<caption>Example table</caption>\n<tr><th>Movement or<br>Automated operation</th><th>Before</th><th>After</th><th>Command</th></tr>\n<tr><td>Move</td><td>.#S<br>###</td><td>S#.<br>###</td><td>MOVETO 1</td>\n<tr><td>Climb</td><td>...<br>3S#</td><td>S..<br>3.#</td><td>CLIMB LEFT</td>\n<tr><td>Get down</td><td>S..<br>3.#</td><td>...<br>2S#</td><td>GETDOWN RIGHT</td>\n<tr><td>Push</td><td>.#S#####..<br>###II.I.I.</td><td>.#S.####.#<br>###II.I.I.</td><td>PUSH RIGHT</td>\n<tr><td>Push</td><td>.#SI...<br>###.###</td><td>.#S....<br>###.###</td><td>PUSH RIGHT</td>\n<tr><td>Push</td><td>.#...S#<br>###.###</td><td>.....S.<br>###.###</td><td>PUSH RIGHT</td>\n<tr><td>Pull</td><td>..S#####..<br>###.#.#.#.</td><td>.S#.####..<br>###.#.#.#.</td><td>PULL LEFT</td>\n<tr><td>Falling of the player</td><td>.#S#<br>.#.#<br>.#.#<br>.#.#</td><td>.#.#<br>.#.#<br>.#.#<br>.#S#<td>-</td>\n<tr><td>Falling of blocks</td><td>.###.<br>#...#<br>#...#<br>#...#<br>.#.#</td><td>.#.#.<br>#...#<br>#...#<br>#.#.#<br>.#.#<td>-</td>\n</table>\n\n<h2>Input</h2>\n<p>\nInput consists of multiple datasets.<br>\nA dataset is given in the following format.\n</p>\n<pre>\n<i>n</i> <i>m</i>\n<i>D<sub>n,1</sub></i> <i>D<sub>n,2</sub></i> ... <i>D<sub>n,m</sub></i>\n<i>D<sub>n-1,1</sub></i> <i>D<sub>n-1,2</sub></i> ... <i>D<sub>n-1,m</sub></i>\n...\n<i>D<sub>1,1</sub></i> <i>D<sub>1,2</sub></i> ... <i>D<sub>1,m</sub></i>\n<i>T</i>\n<i>Command<sub>1</sub></i>\n<i>Command<sub>2</sub></i>\n...\n<i>Command<sub>T</sub></i>\n</pre>\n<p>\nHere, <i>m</i>, <i>n</i> is the width and height of the tower.  <i>D<sub>i,j</sub></i>(1&le;<i>i</i>&le;<i>n</i> and 1&le;<i>j</i>&le;<i>m</i>) is a mark of the cell.  The explanation of marks described above.  <i>Command<sub>k</sub></i>(1&le;<i>k</i>&le;<i>T</i>) is the <i>k</i>-th player operation (movement). This is a string and one of following strings.\n</p>\n\n<pre>\n\"MOVETO s\"  means move to <i>s</i>-th column cell in the same row.\n\"PUSH RIGHT\" means push right block(s).\n\"PUSH LEFT\" means push left block(s).\n\"PULL RIGHT\" means pull the left block to right.\n\"PULL LEFT\" means pull the right block to left.\n\"GETDOWN RIGHT\" means get down to right down.\n\"GETDOWN LEFT\" means get down to left down.\n\"CLIMB RIGHT\" means climb to the right block.\n\"CLIMB LEFT\" means climb to the left block.\n</pre>\n\n<p>\nSome of commands are invalid.  You must ignore these commands.  And after game is over, the command input may continue in case.  In this case, you must also ignore following commands.  <i>m</i>=<i>n</i>=0 shows the end of input.\n</p>\n\n<h2>Constraints</h2>\n<p>\n3&le;<i>m</i>&le;50<br>\n3&le;<i>n</i>&le;50<br>\nCharacters 'S' and 'G' will appear exactly once in the tower description.\n</p>\n<h2>Output</h2>\n<p>\nEach dataset, output a string that represents the result of the game in the following format.\n</p>\n<pre>\n<i>Result</i>\n</pre>\n<p>Here, <i>Result</i> is a string and one of the following strings (quotes for clarity).</p>\n<ul>\n<li>\"Game Over : Cleared\" (A)</li>\n<li>\"Game Over : Death by Hole\" (B)</li>\n<li>\"Game Over : Death by Block\" (C)</li>\n<li>\"Game Over : Death by Walking Goal\" (D)</li>\n<li>\"Game Over : Gave Up\" (E)</li>\n</ul>\n<h2>Sample Input</h2>\n<pre>\n8 8\n........\n........\n....###.\n...#.#.G\nS#B...##\n#ICII.I#\n#..#.#.#\n.#..#.#.\n7\nPUSH RIGHT\nMOVETO 2\nCLIMB RIGHT\nCLIMB RIGHT\nGETDOWN RIGHT\nCLIMB RIGHT\nGETDOWN RIGHT\n8 8\n........\n........\n........\n...G....\nS#B.....\n#ICIIIII\n#..#.#.#\n.#..#.#.\n4\nPUSH RIGHT\nMOVETO 2\nCLIMB RIGHT\nCLIMB RIGHT\n8 8\n........\n....#.#.\n.....#.G\n...#..#.\nS#B....#\n#ICIII.#\n#..#.#.#\n.#..#.#.\n8\nPUSH RIGHT\nMOVETO 2\nCLIMB RIGHT\nCLIMB RIGHT\nCLIMB RIGHT\nGETDOWN RIGHT\nCLIMB RIGHT\nGETDOWN RIGHT\n0 0\n</pre>\n<h2>Sample Output</h2>\n<pre>\nGame Over : Death by Hole\nGame Over : Cleared\nGame Over : Death by Walking Goal\n</pre>", "p00683": "\n<H1>A Simple Offline Text Editor</H1>\n<P>A text editor is a useful software tool that can help people in various situations including writing and programming. Your job in this problem is to construct an offline text editor, i.e., to write a program that first reads a given text and a sequence of editing commands and finally reports the text obtained by performing successively the commands in the given sequence.</P>\n<P>The editor has a text buffer and a cursor. The target text is stored in the text buffer and most editing commands are performed around the cursor. The cursor has its position that is either the beginning of the text, the end of the text, or between two consecutive characters in the text. The initial cursor position (i.e., the cursor position just after reading the initial text) is the beginning of the text.</P> \n<P>A text manipulated by the editor is a single line consisting of a sequence of characters, each of which must be one of the following: 'a' through 'z', 'A' through 'Z', '0' through '9', '.' (period), ',' (comma), and ' ' (blank). You can assume that any other characters never occur in the text buffer. You can also assume that the target text consists of at most 1,000 characters at any time. The definition of words in this problem is a little strange: a word is a non-empty character sequence delimited by not only blank characters but also the cursor. For instance, in the following text with a cursor represented as '^', </P><DIR>\n<DIR>\n\n<P>He^llo, World.</P></DIR>\n</DIR>\n\n<P>the words are the following.</P><DIR>\n<DIR>\n\n<P>He</P>\n<P>llo,</P>\n<P>World.</P></DIR>\n</DIR>\n\n<P>Notice that punctuation characters may appear in words as shown in this example.</P>\n<P>The editor accepts the following set of commands. In the command list, \"<I>any-text</I>\" represents any text surrounded by a pair of double quotation marks such as \"abc\" and \"Co., Ltd.\".</P>\n<P ALIGN=\"CENTER\"><CENTER><TABLE BORDER CELLSPACING=1 CELLPADDING=6 WIDTH=584>\n<TR><TD WIDTH=\"23%\" VALIGN=\"TOP\">\n<P><B>Command</B></TD>\n<TD WIDTH=\"77%\" VALIGN=\"TOP\">\n<B><P>Descriptions</B></TD>\n</TR>\n<TR><TD WIDTH=\"23%\" VALIGN=\"TOP\">\n<P>forward char</TD>\n<TD WIDTH=\"77%\" VALIGN=\"TOP\">\n<P>Move the cursor by one character to the right, unless the cursor is already at the end of the text.</TD>\n</TR>\n<TR><TD WIDTH=\"23%\" VALIGN=\"TOP\">\n<P>forward word</TD>\n<TD WIDTH=\"77%\" VALIGN=\"TOP\">\n<P>Move the cursor to the end of the leftmost word in the right. If no words occur in the right, move it to the end of the text.</TD>\n</TR>\n<TR><TD WIDTH=\"23%\" VALIGN=\"TOP\">\n<P>backward char</TD>\n<TD WIDTH=\"77%\" VALIGN=\"TOP\">\n<P>Move the cursor by one character to the left, unless the cursor is already at the beginning of the text.</TD>\n</TR>\n<TR><TD WIDTH=\"23%\" VALIGN=\"TOP\">\n<P>backward word</TD>\n<TD WIDTH=\"77%\" VALIGN=\"TOP\">\n<P>Move the cursor to the beginning of the rightmost word in the left. If no words occur in the left, move it to the beginning of the text.</TD>\n</TR>\n<TR><TD WIDTH=\"23%\" VALIGN=\"TOP\">\n<P>insert \"<I>any-text</I>\"</TD>\n<TD WIDTH=\"77%\" VALIGN=\"TOP\">\n<P>Insert <I>any-text</I> (excluding double quotation marks) at the position specified by the cursor. After performing this command, the new cursor position is at the end of the inserted text. The length of <I>any-text</I> is less than or equal to 100.</TD>\n</TR>\n<TR><TD WIDTH=\"23%\" VALIGN=\"TOP\">\n<P>delete char</TD>\n<TD WIDTH=\"77%\" VALIGN=\"TOP\">\n<P>Delete the character that is right next to the cursor, if it exists.</TD>\n</TR>\n<TR><TD WIDTH=\"23%\" VALIGN=\"TOP\">\n<P>delete word</TD>\n<TD WIDTH=\"77%\" VALIGN=\"TOP\">\n<P>Delete the leftmost word in the right of the cursor. If one or more blank characters occur between the cursor and the word before performing this command, delete these blanks, too.  If no words occur in the right, delete no characters in the text buffer.</TD>\n</TR>\n</TABLE>\n</CENTER></P>\n\n   \n<H2>Input</H2>\n<P>The first input line contains a positive integer, which represents the number of texts the editor will edit. For each text, the input contains the following descriptions:</P>\n\n<UL>\n\n<UL>\n<LI>The first line is an initial text whose length is at most 100.</LI>\n<LI>The second line contains an integer <I>M</I> representing the number of editing commands.</LI>\n<LI>Each of the third through the <I>M</I>+2nd lines contains an editing command.</LI></UL>\n</UL>\n\n<P>You can assume that every input line is in a proper format or has no syntax errors. You can also assume that every input line has no leading or trailing spaces and that just a single blank character occurs between a command name (e.g., forward) and its argument (e.g., char).</P>  \n\n<H2>Output</H2>\n<P>For each input text, print the final text with a character '^' representing the cursor position.  Each output line shall contain exactly a single text with a character '^'.</P>\n<H2>Sample Input</H2>\n<FONT FACE=\"Courier New\">\n<pre>\n3\nA sample input\n9\nforward word\ndelete char\nforward word\ndelete char\nforward word\ndelete char\nbackward word\nbackward word\nforward word\nHallow, Word.\n7\nforward char\ndelete word\ninsert \"ello, \"\nforward word\nbackward char\nbackward char\ninsert \"l\"\n\n3\nforward word\nbackward word\ndelete word\n</pre>\n</FONT>\n\n<H2>Output for the Sample Input</H2>\n<FONT FACE=\"Courier New\">\n<pre>\nAsampleinput^\nHello,  Worl^d.\n^\n</pre>\n</FONT>\n\n", "p00682": "\n<H1>Area of Polygons</H1>\n\n<p>\nPolygons are the most fundamental objects in geometric processing.\nComplex figures are often represented and handled as polygons\nwith many short sides.\nIf you are interested in the processing of geometric data,\nyou'd better try some programming exercises about basic\noperations on polygons.\n</p>\n\n<p>\nYour job in this problem is to write a program that computes the area of polygons.\n</p>\n\n<p>\nA polygon is represented by a sequence of points that are its vertices.\nIf the vertices p<SUB>1</SUB>, p<SUB>2</SUB>, ..., p<SUB>n</SUB> are given, line segments connecting\np<SUB>i</SUB> and p<SUB>i+1</SUB> (1 <= i <= n-1) are sides of the polygon.\nThe line segment connecting p<SUB>n</SUB> and p<SUB>1</SUB> is also a side of the polygon.\n</p>\n\n<p>\nYou can assume that the polygon is not degenerate.\nNamely, the following facts can be assumed without any input data checking.\n</p>\n\n<UL>\n<LI>No point will occur as a vertex more than once.</LI>\n<LI>Two sides can intersect only at a common endpoint (vertex).</LI>\n<LI>The polygon has at least 3 vertices.</LI>\n</UL>\n\n<p>\nNote that the polygon is not necessarily convex.\nIn other words, an inner angle may be larger than 180 degrees.\n</p>\n\n<H2>Input</H2>\n\n<P>The input contains multiple data sets, each representing a polygon.\nA data set is given in the following format.</P>\n\n<PRE>\n   n\n   x1 y1\n   x2 y2\n   ...\n   xn yn\n</PRE>\n\n<P>The first integer n is the number of vertices,\nsuch that 3 <= n <= 50.\nThe coordinate of a vertex p<SUB>i</SUB> is given by (x<SUB>i</SUB>, y<SUB>i</SUB>).\nx<SUB>i</SUB> and y<SUB>i</SUB> are integers between 0 and 1000 inclusive.\nThe coordinates of vertices are given in the order\nof clockwise visit of them.</P>\n\n<P>The end of input is indicated by a data set with 0 as the value of n.</P>\n\n<H2>Output</H2>\n\n<P>For each data set, your program should output its sequence number\n(1 for the first data set, 2 for the second, etc.) and the area of the polygon separated by a single space. The area should be printed with one digit to the right of the decimal point.</P>\n\n<P>The sequence number and the area should be printed on the same line.\nSince your result is checked by an automatic grading program,\nyou should not insert any extra characters nor lines on the output.\n</P>\n\n<H2>Sample Input</H2>\n<pre>\n3\n1 1\n3 4\n6 0\n\n7\n0 0\n10 10\n0 20\n10 30\n0 40\n100 40\n100 0\n\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1 8.5\n2 3800.0\n</pre>\n\n\n", "p00684": "\n<H1>Calculation of Expressions</H1>\n\n<P>Write a program to calculate values of arithmetic expressions which may\ninvolve complex numbers. Details of the expressions are described below.</P>\n\n<P>In this problem, basic elements of expressions are \nnon-negative integer numbers and\nthe special symbol &quot;<TT>i</TT>&quot;. Integer numbers are  sequences\nof digits of arbitrary length and are in decimal notation. &quot;<TT>i</TT>&quot; denotes the\nunit imaginary number <I>i</I>, i.e. <I>i</I><SUP> 2</SUP> = -1.</P>\n\n<P>Operators appearing in expressions are <TT>+</TT> (addition), <TT>-</TT>\n(subtraction), and <TT>*</TT> (multiplication). Division is excluded from\nthe repertoire of the operators. All three operators are only used as binary\noperators. Unary plus and minus operators (e.g., <TT>-100</TT>) are also\nexcluded from the repertoire. Note that the multiplication symbol <TT>*</TT>\nmay not be omitted in any case. For example, the expression 1+3<I>i</I>\nin mathematics should be written as <TT>1+3*i</TT>.</P>\n\n<P>Usual formation rules of arithmetic expressions apply. Namely, (1) The\noperator <TT>*</TT> binds its operands stronger than the operators <TT>+</TT>\nand <TT>-</TT>. (2) The operators <TT>+</TT> and <TT>-</TT> have the same\nstrength in operand binding. (3) Two operators of the same strength bind\nfrom left to right. (4) Parentheses are used to designate specific order\nof binding.</P>\n\n<P>The consequence of these rules can easily be understood from the following\nexamples.</P>\n\n<BLOCKQUOTE>\n  <BLOCKQUOTE>\n    <P>(1) <TT>3+4*5</TT> is <TT>3+(4*5)</TT>, not <TT>(3+4)*5</TT><BR>\n    (2) <TT>5-6+7</TT> is <TT>(5-6)+7</TT>, not <TT>5-(6+7)</TT><BR>\n    (3) <TT>1+2+3</TT> is <TT>(1+2)+3</TT>, not <TT>1+(2+3)<BR>\n    </TT></P>\n  </BLOCKQUOTE>\n</BLOCKQUOTE>\n\n<P>Your program should successively read expressions, calculate them and\n print their results. Overflow should be detected.</P>\n\n<P>Whenever an abnormal value is yielded as a result of applying an operator\nappearing in the given expression, \nyour program should report that the calculation failed due to overflow. \nBy &quot;an abnormal value&quot;, we mean a value \nwhose real part or imaginary part is\ngreater than 10000 or less than -10000. Here are examples:</P>\n\n<P ALIGN=CENTER><TABLE BORDER=\"1\" CELLSPACING=\"2\" CELLPADDING=\"0\">\n<TR>\n<TD WIDTH=\"50%\"><TT>10000+1+(0-10)</TT></TD>\n<TD WIDTH=\"50%\">overflow, not 9991</TD></TR>\n<TR>\n<TD WIDTH=\"50%\"><TT>(10*i+100)*(101+20*i)</TT></TD>\n<TD WIDTH=\"50%\">9900+3010<I>i </I>, not overflow</TD></TR>\n<TR>\n<TD WIDTH=\"50%\"><TT>4000000-4000000</TT></TD>\n<TD WIDTH=\"50%\">overflow, not 0</TD></TR>\n</TABLE>\n</P>\n\n<P>Note that the law of associativity does not necessarily hold in this\nproblem.  For example, in the first example, \noverflow is detected by interpreting\nthe expression as <TT>(10000+1)+(0-10)</TT> following the binding rules,\nwhereas overflow could not be detected \nif you interpreted it as <TT>10000+(1+(0-10))</TT>.\nMoreover, overflow detection should take place for resulting value of each\noperation.</P>\n\n<P>In the second example, a value which exceeds 10000 appears\nin the calculation process of one multiplication \nif you use the mathematical rule</P>\n\n<BLOCKQUOTE>\n  <P>(<I>a</I>+<I>b i</I>)(<I>c</I>+<I>d</I> <I>i</I>)=(<I>ac</I>-<I>bd</I>)+(<I>ad</I>+<I>bc</I>)<I>i\n  </I>.</P>\n</BLOCKQUOTE>\n\n<P>But the yielded result 9900+3010<I>i </I>does not contain any number\nwhich exceeds 10000 and, therefore, overflow should not be reported.</P>\n\n<P></P>\n\n<H2>Input</H2>\n\n<P>A sequence of lines each of which contains an expression is given as\ninput. Each line consists of less than 100 characters and does not contain\nany blank spaces. You may assume that all expressions given in the sequence\nare syntactically correct.</P>\n\n<H2>Output</H2>\n\n<P>Your program should produce output for each expression line by line.\nIf overflow is detected, output should be \na character string &quot;<TT>overflow</TT>&quot;.\nOtherwise, output should be the resulting value of calculation\nin the following fashion.</P>\n\n<UL>\n  <LI><TT>0</TT> , if the result is 0+0<I>i</I>.\n  <LI><TT>-123</TT> , if the result is -123+0<I>i</I>.\n  <LI><TT>45i</TT> , if the result is 0+45<I>i</I>.\n  <LI><TT>3+1i</TT> , if the result is 3+<I>i</I>.\n  <LI><TT>123-45i</TT> , if the result is 123-45<I>i</I>.\n</UL>\n\n<P>Output should not contain any blanks, surplus <TT>0</TT>,\n<TT>+</TT>, or <TT>-</TT>.</P>\n\n<H2>Sample Input</H2>\n\n<pre>\n(1-10*i)+00007+(3+10*i)\n3+4*i*(4+10*i)\n(102+10*i)*(99+10*i)\n2*i+3+9999*i+4\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n11\n-37+16i\n9998+2010i\noverflow\n</pre>\n\n", "p00685": "\n\n<H1>Board Arrangements for Concentration Games</H1>\n\n<P>You have to organize a wedding party. The program of the\nparty will include a concentration game played by the\nbride and groom. The arrangement of the concentration game\nshould be easy since this game will be played to make the\nparty fun.</P>\n\n<P>We have a 4x4 board and 8 pairs of cards (denoted by `A' to `H')\nfor the concentration game:</P>\n<PRE>\n   +---+---+---+---+ \n   |   |   |   |   |   A A B B\n   +---+---+---+---+   C C D D\n   |   |   |   |   |   E E F F\n   +---+---+---+---+   G G H H\n   |   |   |   |   |\n   +---+---+---+---+ \n   |   |   |   |   |\n   +---+---+---+---+ \n</PRE>\n\n<P>To start the game, it is necessary to arrange all 16 cards\nface down on the board. For example:</P>\n<PRE>\n   +---+---+---+---+ \n   | A | B | A | B |\n   +---+---+---+---+\n   | C | D | C | D |\n   +---+---+---+---+\n   | E | F | G | H |\n   +---+---+---+---+ \n   | G | H | E | F |\n   +---+---+---+---+ \n</PRE>\n\n<P>The purpose of the concentration game is to expose as many\ncards as possible by repeatedly performing the following\nprocedure: (1) expose two cards, (2) keep them open if they\nmatch or replace them face down if they do not.</P>\n\n<P>Since the arrangements should be simple, every pair of cards\non the board must obey the following condition: the\nrelative position of one card to the other card of the pair must be\none of 4 given relative positions.\nThe 4 relative positions are different from one another and\nthey are selected from the following 24 candidates:</P><PRE>\n                                      (1, 0), (2, 0), (3, 0),\n   (-3, 1), (-2, 1), (-1, 1), (0, 1), (1, 1), (2, 1), (3, 1),\n   (-3, 2), (-2, 2), (-1, 2), (0, 2), (1, 2), (2, 2), (3, 2),\n   (-3, 3), (-2, 3), (-1, 3), (0, 3), (1, 3), (2, 3), (3, 3).\n</PRE>\n\n<P>Your job in this problem is to write a program that\nreports the total number of board arrangements which satisfy\nthe given constraint.  For example, if relative positions\n(-2, 1), (-1, 1), (1, 1), (1, 2) are given, the total number\nof board arrangements is two, where the following two\narrangements satisfy the given constraint:</P><PRE>\n     X0  X1  X2  X3             X0  X1  X2  X3\n    +---+---+---+---+          +---+---+---+---+ \n Y0 | A | B | C | D |       Y0 | A | B | C | D | \n    +---+---+---+---+          +---+---+---+---+ \n Y1 | B | A | D | C |       Y1 | B | D | E | C | \n    +---+---+---+---+          +---+---+---+---+ \n Y2 | E | F | G | H |       Y2 | F | A | G | H | \n    +---+---+---+---+          +---+---+---+---+ \n Y3 | F | E | H | G |       Y3 | G | F | H | E | \n    +---+---+---+---+          +---+---+---+---+ \n the relative positions:    the relative positions:\n    A:(1, 1),  B:(-1, 1)       A:(1, 2),  B:(-1, 1)\n    C:(1, 1),  D:(-1, 1)       C:(1, 1),  D:(-2, 1)\n    E:(1, 1),  F:(-1, 1)       E:(1, 2),  F:( 1, 1)\n    G:(1, 1),  H:(-1, 1)       G:(-2, 1), H:(-1, 1)\n</PRE>\n\n<P>Arrangements of the same pattern should be counted only once.  Two\nboard arrangements are said to have the same pattern if they are\nobtained from each other by repeatedly making any two pairs exchange\ntheir positions.  For example, the following two arrangements have the\nsame pattern:\n</P><PRE>\n\n     X0  X1  X2  X3           X0  X1  X2  X3\n    +---+---+---+---+        +---+---+---+---+ \n Y0 | H | G | F | E |     Y0 | A | B | C | D | \n    +---+---+---+---+        +---+---+---+---+ \n Y1 | G | E | D | F |     Y1 | B | D | E | C | \n    +---+---+---+---+        +---+---+---+---+ \n Y2 | C | H | B | A |     Y2 | F | A | G | H | \n    +---+---+---+---+        +---+---+---+---+ \n Y3 | B | C | A | D |     Y3 | G | F | H | E | \n    +---+---+---+---+        +---+---+---+---+ \n</PRE>\nwhere (1) `A' and `H',\n(2) `B' and `G',\n(3) `C' and `F', and\n(4) `D' and `E'\nexchange their positions respectively.\n\n<H2>Input</H2>\n\n<P>The input contains multiple data sets, each representing 4 relative \npositions. A data set is given as a line in the following format.</P>\n\n<DIR><TABLE><TR>\n<TD>x<SUB>1</SUB></TD><TD>y<SUB>1</SUB></TD>\n<TD>x<SUB>2</SUB></TD><TD>y<SUB>2</SUB></TD>\n<TD>x<SUB>3</SUB></TD><TD>y<SUB>3</SUB></TD>\n<TD>x<SUB>4</SUB></TD><TD>y<SUB>4</SUB></TD>\n</TR></TABLE></DIR>\n\n<P>The i-th relative position is given by (x<SUB>i</SUB>, y<SUB>i</SUB>).\nYou may assume that the given relative positions are different from one \nanother and each of them is one of the 24 candidates.</P>\n\n<P>The end of input is indicated by the line which contains\na single number greater than 4.</P>\n\n<H2>Output</H2>\n\n<P>For each data set, your program should output the total number\nof board arrangements (or more precisely, the total number of \npatterns).</P>\n\n<P>Each number should be printed in one line. Since your result is \nchecked by an automatic grading program,\nyou should not insert any extra characters nor lines on the output.\n</p>\n\n<H2>Sample Input</H2>\n<FONT FACE=\"Courier New\">\n<pre>\n-2 1 -1 1 1 1 1 2\n1 0 2 1 2 2 3 3\n5\n</pre>\n</FONT>\n\n<H2>Output for the Sample Input</H2>\n<FONT FACE=\"Courier New\">\n<pre>\n2\n15\n</pre>\n</FONT>\n\n", "p00687": "\n<H1>\nUnable Count</H1>\n\n<BLOCKQUOTE>\n  <P><I>I would, if I could,<BR>\n  If I couldn't how could I?<BR>\n  I couldn't, without I could, could I?<BR>\n  Could you, without you could, could ye?<BR>\n  Could ye? could ye?<BR>\n  Could you, without you could, could ye?</I></P></BLOCKQUOTE>\n\n<P>It is true, as this old rhyme says, that we can only DO what\nwe can DO and we cannot DO what we cannot DO. Changing some of\nDOs with COUNTs, we have another statement that we can only COUNT\nwhat we can DO and we cannot COUNT what we cannot DO, which looks\nrather false. We could count what we could do as well as we could\ncount what we couldn't do.  Couldn't we, if we confine ourselves\nto finite issues?</P>\n\n<P>Surely we can count, in principle, both what we can do and\nwhat we cannot do, if the object space is finite. Yet, sometimes\nwe cannot count in practice what we can do or what we cannot do.\nHere, you are challenged, in a set of all positive integers up\nto (and including) a given bound <I>n</I>, to count\nall the integers that cannot be represented by a formula of\nthe form <I>a</I>*<I>i</I>+<I>b</I>*<I>j</I>, where <I>a</I> and\n<I>b</I> are given positive integers and <I>i</I> and <I>j</I>\nare variables ranging over non-negative integers. You are requested\nto report only the result of the count, i.e. how many integers\nare not representable.\nFor example, given <i>n</i> = 7, <i>a</i> = 2, <i>b</i> = 5,\nyou should answer 2, since 1 and 3 cannot be represented in a\nspecified form, and the other five numbers are representable as follows:</P>\n\n<PRE>\n   2 = 2*1 + 5*0,    4 = 2*2 + 5*0,    5 = 2*0 + 5*1,\n   6 = 2*3 + 5*0,    7 = 2*1 + 5*1.\n</PRE>\n\n<H2>Input</H2>\n\n<P>The input is a sequence of lines. Each line consists of three integers,\n<I>n, a</I> and <I>b, </I>in this order,<I> </I>separated by a\nspace<I>.</I> The integers <I>n</I>, <I>a</I> and <I>b</I> are\nall positive and at most one million, except those in the last\nline. The last line consists of three zeros.</P>\n\n<H2>Output</H2>\n\n<P>For each input line except the last one, your program should\nwrite out a line that contains only the result of the count.</P>\n\n<H2>Sample Input</H2>\n\n<pre>\n10 2 3\n10 2 5\n100 5 25\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n1\n2\n80\n</pre>\n\n", "p00688": "\n<h1>\nFactorization of Quadratic Formula</h1>\n\n<p>As the first step in algebra, students learn quadratic formulas and\ntheir factorization.  Often, the factorization is a severe burden\nfor them.  A large number of students cannot master the factorization;\nsuch students cannot be aware of the elegance of advanced algebra.\nIt might be the case that the factorization increases the number of people\nwho hate mathematics.</p>\n\n<p>Your job here is to write a program which helps students of\nan algebra course.  Given a quadratic formula, your program should report\nhow the formula can be factorized into two linear formulas.\nAll coefficients of quadratic formulas and those of resultant\nlinear formulas are integers in this problem.</p>\n\n<p>The coefficients <i>a</i>, <i>b</i> and <i>c</i> of a quadratic formula\n<i>ax</i><sup>2</sup> + <i>bx</i> + <i>c</i> are given.\nThe values of <i>a</i>, <i>b</i> and <i>c</i> are integers,\nand their absolute values do not exceed 10000.\nFrom these values, your program is requested to find four integers\n<i>p</i>, <i>q</i>, <i>r</i> and <i>s</i>, such that\n<i>ax</i><sup>2</sup> + <i>bx</i> + <i>c</i> =\n(<i>px</i> + <i>q</i>)(<i>rx</i> + <i>s</i>).</p>\n\n<p>Since we are considering integer coefficients only, it is not\nalways possible to factorize a quadratic formula into linear formulas.\nIf the factorization of the given formula is impossible,\nyour program should report that fact.</p>\n\n<h2>Input</h2>\n\n<p>The input is a sequence of lines, each representing\na quadratic formula.\nAn input line is given in the following format.</p>\n\n<blockquote>\n   <i>a</i>  <i>b</i>  <i>c</i>\n</blockquote>\n\n<p>Each of <i>a</i>, <i>b</i> and <i>c</i> is an integer.\nThey satisfy the following inequalities.\n\n<blockquote>\n   0 < <i>a</i> <= 10000\n<br>\n   -10000 <= <i>b</i> <= 10000\n<br>\n   -10000 <= <i>c</i> <= 10000\n</blockquote>\n\n<p>The greatest common divisor of <i>a</i>, <i>b</i> and <i>c</i> is 1.\nThat is, there is no integer <i>k</i>, greater than 1,\nsuch that all of <i>a</i>, <i>b</i> and <i>c</i> are divisible by <i>k</i>.</p>\n\n<p>The end of input is indicated by a line consisting of three 0's.</p>\n\n<h2>Output</h2>\n\n<p>For each input line, your program should output the four integers\n<i>p</i>, <i>q</i>, <i>r</i> and <i>s</i> in a line, if they exist.\nThese integers should be output in this order, separated by\none or more white spaces.\nIf the factorization is impossible, your program should output a line\nwhich contains the string \"Impossible\" only.</p>\n\n<p>The following relations should hold between the values\nof the four coefficients.</p>\n\n<blockquote>\n   <i>p</i> > 0\n<br>\n   <i>r</i> > 0\n<br>\n   (<i>p</i> > <i>r</i>) or (<i>p</i> = <i>r</i> and <i>q</i> >= <i>s</i>)\n</i></blockquote>\n\n<p>These relations, together with the fact that the greatest common\ndivisor of <i>a</i>, <i>b</i> and <i>c</i> is 1,\nassure the uniqueness of the solution.\nIf you find a way to factorize the formula, it is not necessary\nto seek another way to factorize it.</p>\n\n<h2>Sample Input</h2>\n<pre>\n2 5 2\n1 1 1\n10 -7 0\n1 0 -3\n0 0 0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n<pre>\n2 1 1 2\nImpossible\n10 -7 1 0\nImpossible\n</pre>\n\n", "p00691": "\n<H1>\nFermat's Last Theorem\n</H1>\n\n<p>\nIn the 17th century, Fermat wrote that he proved for any integer $n \\geq 3$,\nthere exist no positive integers $x$, $y$, $z$ such that\n$x^n + y^n = z^n$.\nHowever he never disclosed the proof.  Later, this claim was named\nFermat's Last Theorem or Fermat's Conjecture.\n</p>\n\n<p>\nIf Fermat's Last Theorem holds in case of $n$, then it also holds\nin case of any multiple of $n$.\nThus it suffices to prove cases where $n$ is a prime number\nand the special case $n$ = 4.\n</p>\n\n<p>\nA proof for the case $n$ = 4 was found in Fermat's own memorandum.\nThe case $n$ = 3 was proved by Euler in the 18th century.\nAfter that, many mathematicians attacked Fermat's Last Theorem.\nSome of them proved some part of the theorem, which was a\npartial success.\nMany others obtained nothing.\nIt was a long history.\nFinally, Wiles proved Fermat's Last Theorem in 1994.\n</p>\n\n<p>\nFermat's Last Theorem implies that for any integers $n \\geq 3$\nand $z > 1$, it always holds that\n<br/>\n$z^n > $ max { $x^n + y^n | x > 0, y > 0, x^n + y^n \\leq z^n$ }.\n<br/>\n</p>\n<p>\nYour mission is to write a program that verifies this in the case\n$n$ = 3 for a given $z$.  Your program should read in\ninteger numbers greater than 1, and, corresponding to each input\n$z$, it should output the following:\n<br/>\n$z^3 - $ max { $x^3 + y^3 | x > 0, y > 0, x^3 + y^3 \\leq z^3$ }.\n<br/>\n</p>\n\n<H2>Input</H2>\n<p>\nThe input is a sequence of lines each containing one positive integer\nnumber followed by a line containing a zero.  You may assume that all of\nthe input integers are greater than 1 and less than 1111.\n</p>\n\n<H2>Output</H2>\n<p>\nThe output should consist of lines each containing a single\ninteger number.  Each output integer should be\n\n<br/>\n$z^3 - $ max { $x^3 + y^3 | x > 0, y > 0, x^3 + y^3 \\leq z^3$ }.\n<br/>\n\n<p>\nfor the corresponding input integer <I>z</I>.\nNo other characters should appear in any output line.\n</p>\n<H2>Sample Input</H2>\n<pre>\n6\n4\n2\n0\n</pre>\n<H2>Output for the Sample Input</H2>\n<pre>\n27\n10\n6\n</pre>\n\n", "p00693": "\n<h1>\nCyber Guardian\n</h1>\n\n\n<p>In the good old days, the Internet was free from fears and\nterrorism. People did not have to worry about any cyber criminals or mad\ncomputer scientists. Today, however, you are facing atrocious crackers \nwherever you are, unless being disconnected. You have to protect\nyourselves against their attacks.</p>\n\n<p>Counting upon your excellent talent for software construction and\nstrong sense of justice, you are invited to work as a cyber\nguardian. Your ultimate mission is to create a perfect firewall system\nthat can completely shut out any intruders invading networks and protect\nchildren from harmful information exposed on the Net. However, it is\nextremely difficult and none have ever achieved it before. As the first \nstep, instead, you are now requested to write a software simulator\nunder much simpler assumptions.</p>\n\n<p>In general, a firewall system works at the entrance of a local network\nof an organization (e.g., a company or a university) and enforces its local\nadministrative policy. It receives both inbound and outbound packets\n(note: data transmitted on the Net are divided into small segments\ncalled packets) and carefully inspects them one by one whether or not\neach of them is legal. The definition of the legality may\nvary from site to site or depend upon the local administrative\npolicy of an organization. Your simulator should accept data representing\nnot only received packets but also the local administrative policy.</p>\n\n<p>For simplicity in this problem we assume that each network packet\nconsists of three fields: its source address, destination address, and\nmessage body. The source address specifies the computer or appliance\nthat transmits the packet and the destination address specifies the\ncomputer or appliance to which the packet is transmitted. An address\nin your simulator is represented as eight digits such as 03214567 or\n31415926, instead of using the standard notation of IP addresses\nsuch as 192.168.1.1. Administrative policy is described in\nfiltering rules, each of which specifies some collection of\nsource-destination address pairs and defines those packets with the\nspecified address pairs either legal or illegal. </p>\n\n<h2>Input</h2>\n\n<p>The input consists of several data sets, each of which represents\nfiltering rules and received packets in the following format:</p>\n\n<dir>\n<i>n</i> <i>m</i><br>\n<i>rule</i><sub>1</sub><br>\n<i>rule</i><sub>2</sub><br>\n<dir>...</dir><br>\n<i>rule<sub>n</sub></i><br>\n<i>packet</i><sub>1</sub><br>\n<i>packet</i><sub>2</sub><br>\n<dir>...</dir><br>\n<i>packet</i><sub>m</sub><br>\n</dir>\n\n<p>The first line consists of two non-negative integers <i>n</i> and\n<i>m</i>. If both <i>n</i> and <i>m</i> are zeros, this means the end\nof input. Otherwise, <i>n</i> lines, each representing a filtering\nrule, and <i>m</i> lines, each representing an arriving packet, follow\nin this order. You may assume that <i>n</i> and <i>m</i> are less than\nor equal to 1,024.</p>\n\n<p>Each <i>rule<sub>i</sub></i> is in one of the following formats:</p>\n\n<dir>\n<p>permit <i>source-pattern</i> <i>destination-pattern</i></p>\n<p>deny <i>source-pattern</i> <i>destination-pattern</i></p>\n</dir>\n\n<p>A <i>source-pattern</i> or <i>destination-pattern</i> is a\ncharacter string of length eight, where each character is either a\ndigit ('0' to '9') or a wildcard character '?'. For instance,\n\"1????5??\" matches any address whose first and fifth digits are '1'\nand '5', respectively. In general, a wildcard character matches any\nsingle digit while a digit matches only itself.</p>\n\n<p>With the keywords \"permit\" and \"deny\", filtering rules specify\nlegal and illegal packets, respectively. That is, \nif the source and destination addresses of a packed are matched with\n<i>source-pattern</i> and <i>destination-pattern</i>, respectively, it \nis <i>permitted</i> to pass the firewall or the request is\n<i>denied</i> according to the keyword. Note that a permit rule \nand a deny rule can contradict since they may share the same source\nand destination address pair. For the purpose of conflict resolution,\nwe define a priority rule: <i>rule<sub>i</sub></i> has a higher priority over\n<i>rule<sub>j</sub></i> if and only if <i>i</i> &gt; <i>j</i>. For\ncompleteness, we define the default rule: any packet is illegal unless\nbeing explicitly specified legal by some given rule.</p>\n\n<p>A packet is in the following format:</p>\n\n<dir>\n<p><i>source-address</i> <i>destination-address</i> <i>message-body</i></p>\n</dir>\n\n<p>Each of the first two is a character string of length eight that\nconsists solely of digits. The last one is a character string\nconsisting solely of alphanumeric characters ('a' to 'z', 'A' to 'Z',\nand '0' to '9'). Neither whitespaces nor special characters can occur\nin a message body. You may assume that it is not empty and that its\nlength is at most 50. </p>\n\n\n<p>You may also assume that there is exactly one\nspace character between any two adjacent fields in an input line\nrepresenting a rule or a packet.</p>\n\n<h2>Output</h2>\n\n<p>For each data set, print the number of legal packets in the first\nline, followed by all legal packets in the same order as they occur in\nthe data set. Each packet must be written exactly in one line. If the\ndata set includes two packets consisting of the same source and\ndestination addresses and the same message body, you should consider\nthem different packets and so they must be written in different\nlines. Any extra whitespaces or extra empty lines must not be\nwritten. </p>\n\n<h2>Sample Input</h2>\n<pre>2 5\npermit 192168?? ?12??34?\ndeny 19216899 012343?5\n19216711 11233340 HiIamACracker\n19216891 01234345 Hello\n19216899 01234345 HiIamAlsoACracker\n19216809 11200340 World\n00000000 99999999 TheEndOfTheWorld\n1 2\npermit 12345678 23456789\n19216891 01234345 Hello\n12345678 23456789 Hello\n0 0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n<pre>\n2\n19216891 01234345 Hello\n19216809 11200340 World\n1\n12345678 23456789 Hello\n</pre>\n\n", "p00696": "\n<h1>\nMulti-column List\n</h1>\n\n\n<P>Ever since Mr. Ikra became the chief manager of his office,\nhe has had little time for his favorites, programming and debugging.\nSo he wants to check programs in trains to and from his office\nwith program lists.\nHe has wished for the tool that prints source programs \nas multi-column lists so that each column just fits in\na pocket of his business suit.\n</P>\n<P>In this problem, you should help him by making a program that prints\nthe given input text in a multi-column format.  Since his business\nsuits have various sizes of pockets, your program should be flexible\nenough and accept four parameters, (1) the number of lines in a\ncolumn, (2) the number of columns in a page, (3) the width of each\ncolumn, and (4) the width of the column spacing. \nWe assume that a fixed-width font is used for printing and so the\ncolumn width is given as the maximum number of characters in a line.\nThe column spacing is also specified as the number of\ncharacters filling it. \n</P>\n\n<H2>Input</H2>\n<P>In one file, stored are data sets in a form shown below.</P>\n<PRE>\n<I>plen</I><SUB>1</SUB>\n<I>cnum</I><SUB>1</SUB>\n<I>width</I><SUB>1</SUB>\n<I>cspace</I><SUB>1</SUB>\n<I>line</I><SUB>1</SUB><SUB>1</SUB>\n<I>line</I><SUB>1</SUB><SUB>2</SUB>\n....\n<I>line</I><SUB>1</SUB><SUB>i</SUB>\n....\n?\n<I>plen</I><SUB>2</SUB>\n<I>cnum</I><SUB>2</SUB>\n<I>width</I><SUB>2</SUB>\n<I>cspace</I><SUB>2</SUB>\n<I>text</I><SUB>2</SUB>\n<I>line</I><SUB>2</SUB><SUB>1</SUB>\n<I>line</I><SUB>2</SUB><SUB>2</SUB>\n....\n<I>line</I><SUB>2</SUB><SUB>i</SUB>\n....\n?\n0\n</PRE>\n<P>The first four lines of each data set give \npositive integers specifying the output format.\n<I>Plen</I> (1 &lt;= <I>plen</I> &lt;= 100) is the number of lines in a column.\n<I>Cnum</I> is the number of columns in one page.\n<I>Width</I> is the column width, i.e., the number of characters in one column.\n<I>Cspace</I> is the number of spacing characters between each pair of\nneighboring columns.\nYou may assume \n1 &lt;= (<I>cnum</I> * <I>width</I> + <I>cspace</I> * (<I>cnum</I>-1)) &lt;= 50.\n</P>\n<P>The subsequent lines terminated by a line consisting solely of '?'\nare the input text.\nAny lines of the input text do not include any characters except\nalphanumeric characters '0'-'9', 'A'-'Z', and 'a'-'z'.\nNote that some of input lines may be empty. \nNo input lines have more than 1,000 characters.\n</P>\n\n<H2>Output</H2>\n<P>\nPrint the formatted pages in the order of input data sets.\nFill the gaps among them with dot('.') characters.\nIf an output line is shorter than <I>width</I>, also fill its\ntrailing space with dot characters. \nAn input line that is empty shall occupy a single line on an output\ncolumn.\nThis empty output line is naturally filled with dot characters.\nAn input text that is empty, however, shall not occupy any page.\nA line larger than <I>width</I> is wrapped around \nand printed on multiple lines.\nAt the end of each page, print a line consisting only of '#'.\nAt the end of each data set, print a line consisting only of '?'.\n</P>\n\n<H2>Sample Input</H2>\n<PRE>\n6\n2\n8\n1\nAZXU5\n1GU2D4B\nK\nPO4IUTFV\nTHE\nQ34NBVC78\nT\n1961\nXWS34WQ\n\nLNGLNSNXTTPG\nED\nMN\nMLMNG\n?\n4\n2\n6\n2\nQWERTY\nFLHL\n?\n0\n</PRE>\n\n<H2>Output for the Sample Input</H2>\n<P>You Should see the following section with a fixed-width font. </P>\n<PRE>\nAZXU5....8.......\n1GU2D4B..T.......\nK........1961....\nPO4IUTFV.XWS34WQ.\nTHE..............  \nQ34NBVC7.LNGLNSNX\n#\nTTPG.............\nED...............\nMN...............\nMLMNG............\n.................\n.................\n#\n?\nQWERTY........\nFLHL..........\n..............\n..............\n#\n?\n</PRE>\n\n\n\n", "p00698": "\n<H1>\nMissing Numbers\n</H1>\n\n\n<P>\nToshizo is the manager of a convenience store chain in Hakodate.\nEvery day, each of the stores in his chain sends him a table of the\nproducts that they have sold.  Toshizo's job is to compile these\nfigures and calculate how much the stores have sold in total.\n</P>\n \n<P>\nThe type of a table that is sent to Toshizo by the stores looks like this\n(all numbers represent units of products sold):\n<PRE> \n                       Store1      Store2      Store3         Totals\n Product A                 -5          40          70      |    105\n Product B                 20          50          80      |    150\n Product C                 30          60          90      |    180\n -----------------------------------------------------------\n Store's total sales       45         150         240           435\n</PRE>\n<p>\nBy looking at the table, Toshizo can tell at a glance which goods are\nselling well or selling badly, and which stores are paying well and\nwhich stores are too empty. Sometimes, customers will bring products\nback, so numbers in a table can be negative as well as positive.\n</P>\n\n<P>\nToshizo reports these figures to his boss in Tokyo, and together they\nsometimes decide to close stores that are not doing well and sometimes\ndecide to open new stores in places that they think will be profitable.\nSo, the total number of stores managed by Toshizo is not fixed. Also,\nthey often decide to discontinue selling some products that are not\npopular, as well as deciding to stock new items that are likely to be\npopular. So, the number of products that Toshizo has to monitor is also\nnot fixed.\n</P>\n \n<P>\nOne New Year, it is very cold in Hakodate. A water pipe bursts in\nToshizo's office and floods his desk. When Toshizo comes to work, he\nfinds that the latest sales table is not legible. He can make out some\nof the figures, but not all of them. He wants to call his boss in\nTokyo to tell him that the figures will be late, but he knows that his\nboss will expect him to reconstruct the table if at all possible.\n</P>\n \n<P>\nWaiting until the next day won't help, because it is the New Year, and\nhis shops will be on holiday.  So, Toshizo decides either to work out\nthe values for himself, or to be sure that there really is no unique\nsolution. Only then can he call his boss and tell him what has\nhappened.\n</P>\n \n<P>\nBut Toshizo also wants to be sure that a problem like this never\nhappens again. So he decides to write a computer program that all the\nmanagers in his company can use if some of the data goes missing\nfrom their sales tables. For instance, if they have a table like:\n<PRE> \n                  Store 1     Store 2    Store 3            Totals\n Product A              ?           ?         70        |     105\n Product B              ?          50          ?        |     150\n Product C             30          60         90        |     180\n --------------------------------------------------------\n Store's total sales   45         150        240              435\n</PRE>\n<p>\nthen Toshizo's program will be able to tell them the correct figures\nto replace the question marks.\nIn some cases, however, even his program will not be able to replace\nall the question marks, in general.\nFor instance, if a table like:</p>\n<PRE>\n                  Store 1     Store 2            Totals\n Product A              ?           ?        |      40\n Product B              ?           ?        |      40\n ---------------------------------------------\n Store's total sales   40          40               80\n</PRE>\n<p>\nis given, there are infinitely many possible solutions.\nIn this sort of case, his program will just say \"NO\". \nToshizo's program works for any data where the totals row and column\nare still intact.\nCan you reproduce Toshizo's program?\n</P>\n\n</P>\n\n<H2>Input</H2>\n<P>The input consists of multiple data sets, each in the following\nformat:</p>\n<PRE>\n<I>p s</I>\n<I>row</I><SUB>1</SUB>\n<I>row</I><SUB>2</SUB>\n...\n<I>row</I><SUB>p</SUB>\n<I>totals</I>\n</PRE>\n<p>\nThe first line consists of two integers <I>p</I> and <I>s</I>,\nrepresenting the numbers of products and stores, respectively.\nThe former is less than 100 and the latter is less than 10.\n</P>\n\n<P>They are separated by a blank character.\nEach of the subsequent lines represents a row of the table and\nconsists of <I>s</I>+1 elements, each of which is either an integer or\na question mark.\nThe <I>i</I>-th line (1 &lt;= <I>i</I> &lt;= <I>p</I>) corresponds to\nthe <I>i</I>-th product and the last line the totals row.\nThe first <I>s</I> elements in a line represent the sales of each\nstore and the last one the total sales of the product.\nNumbers or question marks in a line are separated by a blank character.\nThere are no missing numbers in the totals column or row. \nThere is at least one question mark in each data set.\n</P>\n\n<P>The known numbers in the table except the totals row and column is\nbetween -1,000 and 1,000, inclusive.\nHowever, unknown numbers, represented by question marks, may not be in\nthis range.\nThe total sales number of each product is between -10,000 and\n10,000, inclusive. \nThe total sales number of each store is between -100,000 and\n100,000, inclusive. \n</P>\n\n<P>There is a blank line between each data set in the input, and the input\nis terminated by a line consisting of a zero. \n</P>\n\n</PRE>\n \n<H2>Output</H2>\n\n<P>When there is a unique solution, your program should print the missing\nnumbers in the occurrence order in the input data set.\nOtherwise, your program should print just \"NO\".\nThe answers of consecutive data sets should be separated by an empty\nline.\nEach non-empty output line contains only a single number or \"NO\".\n</P>\n\n<H2>Sample Input</H2>\n<PRE>\n3 3\n? ? 70 105\n? 50 ? 150\n30 60 90 180\n45 150 240 435\n \n2 2\n? ? 40\n? ? 40\n40 40 80\n\n2 3\n? 30 40 90\n50 60 70 180\n70 90 110 270\n\n0\n</PRE>\n\n<H2>Output for the Sample Input</H2>\n<PRE>\n-5\n40\n20\n80\n \nNO\n\n20\n</PRE>\n\n\n\n\n", "p00701": "\n<h1>\nPile Up!\n</h1>\n\n<p>There are cubes of the same size and a simple robot named Masato. Initially, \nall cubes are on the floor. Masato can be instructed to pick up a cube and put \nit on another cube, to make piles of cubes. Each instruction is of the form \n`pick up cube <i>A</i> and put it on cube <i>B</i> (or on the floor).' </p>\n<p>When he is to pick up a cube, he does so after taking off all the cubes on \nand above it in the same pile (if any) onto the floor. In contrast, when he is \nto put a cube on another, he puts the former on top of the pile including the \nlatter without taking any cubes off. </p>\n<p>When he is instructed to put a cube on another cube and both cubes are \nalready in the same pile, there are two cases. If the former cube is stacked \nsomewhere below the latter, he put off all the cube above it onto the floor. \nAfterwards he puts the former cube on the latter cube. If the former cube is \nstacked somewhere above the latter, he just ignores the instruction. </p>\n<p>When he is instructed to put a cube on the floor, there are also two cases. \nIf the cube is already on the floor (including the case that the cube is stacked \nin the bottom of some pile), he just ignores the instruction. Otherwise, he puts \noff all the cube on and up above the pile (if any) onto the floor before moving \nthe cube onto the floor. </p>\n<p>He also ignores the instruction when told to put a cube on top of itself \n(this is impossible). </p>\n<p>Given the number of the cubes and a series of instructions, simulate actions \nof Masato and calculate the heights of piles when Masato has finished his job. \n</p>\n<h2>Input</h2>\n<p>The input consists of a series of data sets. One data set contains the number \nof cubes as its first line, and a series of instructions, each described in a \nseparate line. The number of cubes does not exceed 100. Each instruction \nconsists of two numbers; the former number indicates which cube to pick up, and \nthe latter number indicates on which cube to put it. The end of the instructions \nis marked by two zeros. </p>\n<p>The end of the input is marked by the line containing a single zero. </p>\n<p>One data set has the following form:</p>\n\n<pre><i>m</i>\n<i>I</i><sub>1</sub> <i>J</i><sub>1</sub>\n<i>I</i><sub>2</sub> <i>J</i><sub>2</sub>\n...\n<i>I</i><sub><i>n</i></sub> <i>J</i><sub><i>n</i></sub>\n0 0\n</pre>\n\n<p>Each cube is identified by its number (1 through <i>m</i>). \n<i>I</i><sub><i>k</i></sub> indicates which cube to pick up and \n<i>J</i><sub><i>k</i></sub> indicates on which cube to put it. The latter may be \nzero, instructing to put the cube on the floor. </p>\n<h2>Output</h2>\n<p>Output the height of each pile (the number of cubes in the pile) in ascending \norder, separated by newlines. A single cube by itself also counts as \"a pile.\" \nEnd of output for one data set should be marked by a line containing the \ncharacter sequence `end' by itself. </p>\n<h2>Sample Input</h2>\n\n<pre>\n3\n1 3\n2 0\n0 0\n4\n4 1\n3 1\n1 2\n0 0\n5\n2 1\n3 1\n4 1\n3 2\n1 1\n0 0\n0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\n1\n2\nend\n1\n1\n2\nend\n1\n4\nend\n</pre>\n\n\n\n", "p00702": "\n<h1>\nKanglish : Analysis on Artificial Language \n</h1>\n\n<p>The late Prof. Kanazawa made an artificial language named Kanglish, which is \nsimilar to English, for studying mythology. Words and sentences of Kanglish are \nwritten with its own special characters called \"Kan-characters\". The size of the \nset of the Kan-characters is 38, i.e., there are 38 different Kan-characters in \nthe set. Since Kan-characters cannot be directly stored in a computer because of \nthe lack of a coded character set, Prof. Kanazawa devised a way to represent \neach Kan-character as an alphabetical letter or an ordered combination of two \nalphabetical letters. Thus, each Kan-character is represented as one of the \nfollowing 26 letters \n</p><blockquote>\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \n  \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", and \"z\", \n</blockquote>or one of the following 12 combinations of letters  \n<blockquote>\"ld\", \"mb\", \"mp\", \"nc\", \"nd\", \"ng\", \"nt\", \"nw\", \"ps\", \"qu\", \"cw\", \n  and \"ts\". </blockquote>\n<p>\nIn addition, the Kan-characters are ordered according to  \nthe above alphabetical representation. The order is named Kan-order in which the  \nKan-character represented by \"a\" is the first one, that by \"b\" is the second,  \nthat by \"z\" is the 26th, that by \"ld\" is the 27th, and that by \"ts\" is the 38th  \n(the last).  \n</p>\n<p></p>\n<p>The representations of words in Kanglish are separated by spaces. Each \nsentence is written in one line, so there are no periods or full stops in \nKanglish. All alphabetical letters are in lower case, i.e., there are no \ncapitalizations. </p>\n<p>We currently have many documents written in Kanglish with the alphabetical \nrepresentation. However, we have lost most of Prof. Kanazawa's work on how they \ncan be translated. To recognize his work, we have decided to first analyze them \nstatistically. The first analysis is to check sequences of consecutive \nKan-characters in words. </p>\n<p>For example, a substring \"ic\" in a word \"quice\" indicates an ordered pair of \ntwo adjacent Kan-characters that are represented by \"i\" and \"c\". For simplicity, \nwe make a rule that, in the alphabetical representation of a word, a \nKan-character is recognized as the longest possible alphabetical representation \nfrom left to right. Thus, a substring \"ncw\" should be considered as a pair of \n\"nc\" and \"w\". It does not consist of \"n\" and \"cw\", nor \"n\", \"c\", and \"w\". </p>\n<p>For each Kan-character, there are 38 possible pairs of that Kan-character and \nanother Kan-character, e.g. \"aa\", \"ab\", ..., \"az\", \"ald\", ..., \"ats\". Thus, \nmathematically, there is a total of 1444 (i.e., 38x38) possible pairs, including \npairs such as \"n\" and \"cw\", which is actually not allowed according to the above \nrule. </p>\n<p>Your job is to write a program that counts how many times each pair occurs in \ninput data. For example, in the sentence </p><pre>\tqua ist qda quang quice</pre>\n<p>\nthe Kan-character represented by \"qu\" appears  \nthree times. There are two occurrences of the pair of \"qu\" and \"a\", and one  \noccurrence of the pair of \"qu\" and \"i\". Note that the alphabetical letter \"q\"  \nappears four times in the example sentence, but the Kan-character represented by  \n\"q\" occurs only once, because \"qu\" represents another Kan-character that is  \ndifferent from the Kan-character represented by \"q\".  \n<p></p>\n<p>For simplicity, a newline at the end of a line is considered as a space. Thus \nin the above example, \"e\" is followed by a space. </p>\n<h2>Input</h2><pre><i>n</i>\n<i>line</i><sub>1</sub>\n<i>line</i><sub>2</sub>\n...\n<i>line</i><sub><i>n</i></sub>\n</pre>\n<p>The first line of the input is an integer <i>n</i>, which indicates the \nnumber of lines that follow. Each line except for the first line represents one \nKanglish sentence. You may assume that <i>n</i> &lt;= 1000 and that each line \nhas at most 59 alphabetical letters including spaces. </p>\n<h2>Output</h2><pre>a <i>kc</i><sub>1</sub> <i>m</i><sub>1</sub>\nb <i>kc</i><sub>2</sub> <i>m</i><sub>2</sub>\nc <i>kc</i><sub>3</sub> <i>m</i><sub>3</sub>\n...\nts <i>kc</i><sub>38</sub> <i>m</i><sub>38</sub>\n</pre>\n<p>The output consists of 38 lines for the whole input lines. Each line of the \noutput has two strings and an integer. In the <i>i</i>-th line in the output, \nthe first string is the alphabetical representation of the <i>i</i>-th \nKan-character in the Kan-order. For example, the first string of the first line \nis \"a\", that of the third line is \"c\", and that of the 37th line is \"cw\". The \nfirst string is followed by a space. </p>\n<p>The second string in the <i>i</i>-th line (denoted by <i>kc<sub>i</sub></i> \nabove) shows the alphabetical representation of a Kan-character that most often \noccurred directly after the first Kan-character. If there are two or more such \nKan-characters, the first one in the Kan-order should be printed. The second \nstring is followed by a space. </p>\n<p>The integer (denoted by <i>m<sub>i</sub></i> above) in the <i>i</i>-th line \nshows the number of times that the second Kan-character occurred directly after \nthe first Kan-character. In other words, the integer shows the number of times \nthat ``the ordered pair of the first Kan-character and the second \nKan-character'' appeared in the input. The integer is followed by a newline. \n</p>\n<p>Suppose the 28th output line is as follows: \n</p><blockquote><pre>mb e 4</pre></blockquote>\n<p>\n\"mb\" is output because it is the 28th character in  \nthe Kanglish alphabet. \"e 4\" means that the pair \"mbe\" appeared 4 times in the  \ninput, and that there were no pairs beginning with \"mb\" that appeared more than  \n4 times.  \n<p></p>\n<p>Note that if the <i>i</i>-th Kan-character does not appear in the input, or \nif the <i>i</i>-th Kan-character is not followed by any other Kan-characters but \nspaces, the second string in the <i>i</i>-th output line should be \"a\" and the \nthird item should be zero. </p>\n<p>Although the output does not include spaces, Kan-characters that appear with \na space in-between is not considered as a pair. Thus, in the following example \n</p><blockquote><pre>abc def</pre></blockquote>\n<p>\n\"d\" is not counted as occurring after \"c\".  \n<p></p>\n<h2>Sample Input</h2>\n<pre>\n3\nnai tiruvantel ar varyuvantel i valar tielyama nu vilya\nqua ist qda quang ncw psts\nsvampti tsuldya jay quadal ciszeriol\n</pre>\n<h2>Output for the Sample Input</h2>\n<pre>\na r 3\nb a 0\nc i 1\nd a 2\ne l 3\nf a 0\ng a 0\nh a 0\ni s 2\nj a 1\nk a 0\nl y 2\nm a 1\nn a 1\no l 1\np a 0\nq d 1\nr i 1\ns t 1\nt i 3\nu v 2\nv a 5\nw a 0\nx a 0\ny a 3\nz e 1\nld y 1\nmb a 0\nmp t 1\nnc w 1\nnd a 0\nng a 0\nnt e 2\nnw a 0\nps ts 1\nqu a 3\ncw a 0\nts u 1\n</pre>\n\n", "p00703": "\n<h1>\nWhat is the Number in my Mind ? \n</h1>\n\n<p>Let us enjoy a number guess game. </p>\n<p>A number containing L digits is in my mind (where 4 &lt;= L &lt;= 10). You \nshould guess what number it is. It is composed of any of the following ten \ndigits:<br></p><pre>\t\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\", and \"9\".\n\n</pre>\n<p></p>\n<p>No digits appear twice in the number. For example, when L = 4, \"1234\" is a \nlegitimate candidate but \"1123\" is not (since \"1\" appears twice). </p>\n<p>The number may begin with \"0\", and a number \"05678\" should be distinct from a \nnumber \"5678\", for example. </p>\n<p>If you and your computer cannot see through my mind by telepathy, a group of \n<b>hints</b> will be needed in order for you to identify the number in my mind. \nA <b>hint</b> is a triple of numbers named <b>try</b>, <b>hit</b>, and \n<b>blow</b>. </p>\n<p>The <b>try</b> is a number containing L decimal digits. No digits appear \ntwice in the <b>try</b>, and this number may also begin with \"0\". </p>\n<p>The <b>hit</b> value indicates the count of digits that the <b>try</b> and \nthe number in my mind have in common, and that are exactly in the same position. \n</p>\n<p>The <b>blow</b> value indicates the count of digits that the <b>try</b> and \nthe number in my mind have in common, but that are NOT in the same position. \n</p>\n<p>They are arranged in one line as follows.<br></p><pre>\t<b>try hit blow</b>\n\n</pre>\n<p></p>\n<p>For example, if L = 4 and the number in my mind is <b>9876</b>, then the \nfollowing is an example of hint-set consisting of legitimate hints.<br></p><pre>\t<b>7360 0 2</b>\n\t<b>2507 0 1</b>\n\t<b>9713 1 1</b>\n\t<b>9678 2 2</b>\n</pre>\n<p>\nThe above hint-set should be sufficient for you to guess the number and  \nthe answer should be <b>9876</b>.<br> \n<p></p>\n<p>In contrast, the following hint-set is not sufficient to guess the \nnumber.<br></p><pre>\t<b>7360 0 2</b>\n\t<b>9713 1 1</b>\n\t<b>9678 2 2</b>\n</pre>\n<p>\nNo number is consistent with the following hint-set.<br><pre>\t<b>9678 2 2</b>\n\t<b>1234 2 2</b>\n</pre>\n<p>\nAnswers for last two hint-sets should be <b>NO</b>.<br> \n<p></p>\n<p>Your job is to write a program identifying the numbers in my mind using given \nhint-sets. </p>\n<h2>Input</h2>\n<p>The input consists of multiple hint-sets as follows. Each of them corresponds \nto a number in my mind. </p><pre><i>&lt; HINT-SET<sub></sub></i><sub>1<i></i></sub><i> &gt;</i>\n<i>&lt; HINT-SET<sub></sub></i><sub>2<i></i></sub><i> &gt;</i>\n<i>. . .</i>\n<i>&lt; HINT-SET<sub>i</sub> &gt;</i>\n<i>. . .</i>\n<i>&lt; HINT-SET<sub>n</sub> &gt;</i>\n</pre>\n<p>A <i>&lt;HINT-SET<sub>i</sub> &gt;</i> is composed of one header line in the \nfollowing format (<i>L</i> and <i>H</i> should be separated by a single space \ncharacter.):<br></p><pre><i>L</i> <i>H</i>\n\n</pre>\n<p>\nand <i>H</i> lines of hints in the following format (1 &lt;= j &lt;=  \n<i>H</i> ) :<br><pre><i>TRY</i><sub>1</sub> <i>HIT</i><sub>1</sub> <i>BLOW</i><sub>1</sub>\n<i>TRY</i><sub>2</sub> <i>HIT</i><sub>2</sub> <i>BLOW</i><sub>2</sub>\n<i>. . .</i>\n<i>TRY<sub>j</sub></i> <i>HIT<sub>j</sub></i> <i>BLOW<sub>j</sub></i>\n<i>. . .</i>\n<i>TRY<sub>H</sub></i> <i>HIT<sub>H</sub></i> <i>BLOW<sub>H</sub></i>\n</pre><p><i>L</i> indicates the number of digits of the number in my mind and  \n<i>TRY<sub>j</sub></i> . <i>HIT<sub>j</sub></i> and <i>BLOW<sub>j</sub></i>  \nindicate hit and blow values between the <i>TRY<sub>j</sub></i> and the number  \nin my mind. (They are separated by a single space character.)  \n<p>The end of the input is indicated by a header line with <i>L</i> = 0 and \n<i>H</i> = 0.<br></p>\n<h2>Output</h2>\n<p>For each hint-set, the answer should be printed, each in a separate line. If \nyou can successfully identify the number for a given hint-set, the answer should \nbe the number. If you cannot identify the number, the answer should be \n<b>NO</b>. </p>\n<h2>Sample Input</h2>\n<pre>\n6 4\n160348 0 4\n913286 2 3\n431289 3 1\n671283 3 3\n10 8\n3827690415 2 8\n0482691573 1 9\n1924730586 3 7\n1378490256 1 9\n6297830541 1 9\n4829531706 3 7\n4621570983 1 9\n9820147536 6 4\n4 4\n2713 0 3\n1247 2 0\n1230 1 1\n1387 2 1\n6 5\n605743 0 4\n593026 2 2\n792456 1 2\n143052 1 3\n093614 3 3\n5 2\n12345 5 0\n67890 0 5\n0 0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n<pre>\n637281\n7820914536\n3287\nNO\nNO\n</pre>\n\n\n", "p00705": "\n\n<H1>\nWhen Can We Meet?\n</H1>\n\n<P>\nThe ICPC committee would like to have its meeting as soon as\npossible to address every little issue of the next contest.  \nHowever, members of the committee are so busy maniacally developing\n(possibly useless) programs that it is very difficult to arrange\ntheir schedules for the meeting.\nSo, in order to settle the meeting date, the chairperson requested every\nmember to send back a list of convenient dates by E-mail.\nYour mission is to help the chairperson, who is now dedicated to other\nissues of the contest, by writing a program that \nchooses the best date from the submitted lists.\nYour program should find the date convenient for the most members.\nIf there is more than one such day, the earliest is the best.\n</P>\n\n<H2>Input</H2>\n<P>\nThe input has multiple data sets, each starting with a line\ncontaining the number of committee members and the quorum of the meeting.\n<BLOCKQUOTE><I>N Q</I></BLOCKQUOTE>\n<p>\nHere, <I>N</I>, meaning the size of the committee, and <I>Q</I>\nmeaning the quorum, are positive integers.  <I>N</I> is less than 50,\nand, of course, <I>Q</I> is less than or equal to <I>N.</I>\n</P>\n<P>\n<I>N</I> lines follow, each describing convenient dates for a\ncommittee\nmember in the following format.\n<BLOCKQUOTE>\n<I>M Date</I><SUB>1</SUB> \n<I>Date</I><SUB>2</SUB> ... <I>Date<SUB>M</SUB></I>\n</BLOCKQUOTE>\n<p>\nHere, <I>M</I> means the number of convenient dates for\nthe member, which is an integer greater than or equal to zero.\nThe remaining items in the line are his/her dates of convenience,\nwhich are positive integers less than 100, that is, 1 means tomorrow, \n2 means the day after tomorrow, and so on.\nThey are in ascending order without any repetition \nand separated by a space character.\nLines have neither leading nor trailing spaces.\n</P>\n<P>\nA line containing two zeros indicates the end of the input.\n</P>\n\n<H2>Output</H2>\n<P>For each data set, print a single line containing the date number\nconvenient for the largest number of committee members.\n  If there is more than one\nsuch date, print the earliest.  However, if no dates are convenient\nfor more than or equal to the quorum number of members, print 0 instead.</P>\n\n<H2>Sample Input</H2>\n<PRE>\n3 2\n2 1 4\n0\n3 3 4 8\n3 2\n4 1 5 8 9\n3 2 5 9\n5 2 4 5 7 9\n3 3\n2 1 4\n3 2 5 9\n2 2 4\n3 3\n2 1 2\n3 1 2 9\n2 2 4\n0 0\n</PRE>\n\n<H2>Output for the Sample Input</H2>\n<PRE>\n4\n5\n0\n2\n</PRE>\n\n\n", "p00708": "\n\n\n<H1>Building a Space Station</H1>\n\n<P>\nYou are a member of the space station engineering team,\nand are assigned a task in the construction process of the station.\nYou are expected to write a computer program to complete the task.\n</P>\n\n<P>\nThe space station is made up with a number of units, called <I>cells.</I>\nAll cells are sphere-shaped, but their sizes are not necessarily uniform.\nEach cell is fixed at its predetermined position\nshortly after the station is successfully put into its orbit.\nIt is quite strange that two cells may be touching each other,\nor even may be overlapping.\nIn an extreme case, a cell may be totally enclosing another one.\nI do not know how such arrangements are possible.\n</P>\n\n<P>\nAll the cells must be connected,\nsince crew members should be able to walk\nfrom any cell to any other cell.\nThey can walk from a cell A to another cell B, if,\n(1) A and B are touching each other or overlapping,\n(2) A and B are connected by a `corridor',\nor (3) there is a cell C such that walking from A to C, and also from B to C\nare both possible.\nNote that the condition (3) should be interpreted transitively.\n</P>\n\n<P>\nYou are expected to design a configuration,\nnamely, which pairs of cells are to be connected with corridors.\nThere is some freedom in the corridor configuration.\nFor example, if there are three cells A, B and C,\nnot touching nor overlapping each other,\nat least three plans are possible in order to connect all three cells.\nThe first is to build corridors A-B and A-C,\nthe second B-C and B-A, the third C-A and C-B.\nThe cost of building a corridor is proportional to its length.\nTherefore, you should choose a plan with the shortest\ntotal length of the corridors.\n</P>\n\n<P>\nYou can ignore the width of a corridor.\nA corridor is built between points on two cells' surfaces.\nIt can be made arbitrarily long, but of course the shortest one is chosen.\nEven if two corridors A-B and C-D intersect in space, they are\nnot considered to form a connection path between (for example) A and C.\nIn other words, you may consider that two corridors never intersect.\n</P>\n\n<H2>Input</H2>\n\n<P>\nThe input consists of multiple data sets.\nEach data set is given in the following format.\n</P>\n\n<BLOCKQUOTE>\n<I>n</I><BR>\n<I>x</I><SUB>1</SUB> <I>y</I><SUB>1</SUB> <I>z</I><SUB>1</SUB> <I>r</I><SUB>1</SUB><BR>\n<I>x</I><SUB>2</SUB> <I>y</I><SUB>2</SUB> <I>z</I><SUB>2</SUB> <I>r</I><SUB>2</SUB><BR>\n...<BR>\n<I>x</I><SUB><I>n</I></SUB> <I>y</I><SUB><I>n</I></SUB> <I>z</I><SUB><I>n</I></SUB> <I>r</I><SUB><I>n</I></SUB><BR>\n</BLOCKQUOTE>\n\n<P>\nThe first line of a data set contains an integer <I>n</I>,\nwhich is the number of cells.\n<I>n</I> is positive, and does not exceed 100.\n</P>\n\n<P>\nThe following <I>n</I> lines are descriptions of cells.\nFour values in a line are <I>x-</I>, <I>y-</I> and <I>z-</I>coordinates of\nthe center, and radius (called <I>r</I> in the rest of the problem) of\nthe sphere, in this order.\nEach value is given by a decimal fraction, with\n3 digits after the decimal point.\nValues are separated by a space character.\n</P>\n\n<P>\nEach of <I>x</I>, <I>y</I>, <I>z</I> and <I>r</I> is positive\nand is less than 100.0.\n</P>\n\n<P>\nThe end of the input is indicated by a line containing a zero.\n</P>\n\n<H2>Output</H2>\n\n<P>\nFor each data set, the shortest total length of the corridors\nshould be printed, each in a separate line.\nThe printed values should have 3 digits after the decimal point.\nThey may not have an error greater than 0.001.\n</P>\n\n<P>\nNote that if no corridors are necessary, that is,\nif all the cells are connected without corridors,\nthe shortest total length of the corridors is 0.000.\n</P>\n\n<H2>Sample Input</H2>\n\n<PRE>\n3\n10.000 10.000 50.000 10.000\n40.000 10.000 50.000 10.000\n40.000 40.000 50.000 10.000\n2\n30.000 30.000 30.000 20.000\n40.000 40.000 40.000 20.000\n5\n5.729 15.143 3.996 25.837\n6.013 14.372 4.818 10.671\n80.115 63.292 84.477 15.120\n64.095 80.924 70.029 14.881\n39.472 85.116 71.369 5.553\n0\n</PRE>\n\n<H2>Output for the Sample Input</H2>\n\n<PRE>\n20.000\n0.000\n73.834\n</PRE>\n\n\n", "p00711": "\n<H1><font color=\"#000\">Problem B:</font> Red and Black</H1>\n\n<P>\n There is a rectangular room, covered with square tiles. Each tile is\ncolored either red or black. A man is standing on a black tile.\nFrom a tile, he can move to one of four adjacent tiles. But he can't \nmove on red tiles, he can move only on black tiles.\n</P>\n\n<P>\n Write a program to count the number of black tiles which he can reach \nby repeating the moves described above. \n</P>\n\n\n<H2>Input</H2>\n\n\n<P>\n The input consists of multiple data sets.\n A data set starts with a line containing two positive integers <I>W</I> and <I>H</I>;\n <I>W</I> and <I>H</I> are the numbers of tiles in the <I>x</I>-\n and <I>y</I>- directions, respectively. <I>W</I> and <I>H</I> are \nnot more than 20.\n</P>\n\n\n\n<P>\n  There are <I>H</I> more lines in the data set, each of which\nincludes <I>W</I> characters. Each character represents the color of a\ntile as follows.\n</P>\n\n<ul>\n<li>'.' - a black tile\n<li>'#' - a red tile\n<li>'@' - a man on a black tile(appears exactly once in a data set)\n</ul>\n\n\n\n<p>\nThe end of the input is indicated by a line consisting of two zeros.\n</p>\n\n\n<H2>Output</H2>\n\n\n<P>\n  For each data set, your program \nshould output a line which contains the number of \ntiles he can reach from the initial tile (including itself).\n</P>\n\n\n<H2>Sample Input</H2>\n\n<PRE>\n6 9\n....#.\n.....#\n......\n......\n......\n......\n......\n#@...#\n.#..#.\n11 9\n.#.........\n.#.#######.\n.#.#.....#.\n.#.#.###.#.\n.#.#..@#.#.\n.#.#####.#.\n.#.......#.\n.#########.\n...........\n11 6\n..#..#..#..\n..#..#..#..\n..#..#..###\n..#..#..#@.\n..#..#..#..\n..#..#..#..\n7 7\n..#.#..\n..#.#..\n###.###\n...@...\n###.###\n..#.#..\n..#.#..\n0 0\n</PRE>\n\n<H2>Output for the Sample Input</H2>\n\n<PRE>\n45\n59\n6\n13\n</PRE>\n\n", "p00715": "\n\n<H1>\n<font color=\"#000\">Problem F:</font> Name the Crossing\n</H1>\n\n<P>\nThe city of Kyoto is well-known for its Chinese plan: streets are\neither North-South or East-West. Some streets are numbered, but most\nof them have real names.\n<br>\nCrossings are named after the two streets crossing there,\ne.g. Kawaramachi-Sanjo is the crossing of Kawaramachi street and Sanjo\nstreet. But there is a problem: which name should come first?\nAt first the order seems quite arbitrary: one says Kawaramachi-Sanjo\n(North-South first) but Shijo-Kawaramachi (East-West first). With some\nexperience, one realizes that actually there\nseems to be an \"order\" on the streets, for instance in the above\nShijo is \"stronger\" than Kawaramachi, which in turn is \"stronger\" than\nSanjo.\nOne can use this order to deduce the names of other crossings.\n</P>\n\n\n\n<P>\nYou are given as input a list of known crossing names X-Y.\nStreets are either North-South or East-West, and only orthogonal streets\nmay cross.\n</P>\n<P>\nAs your list is very incomplete, you start by completing it using\nthe following rule:\n</P>\n<ul>\n<li>\n  two streets A and B have <i>equal strength</i> if (1) to (3) are\n  all true:\n<ol>\n<li> they both cross the same third street C in the input </li>\n<li> there is no street D such that D-A and B-D appear in the input </li>\n<li> there is no street E such that A-E and E-B appear in the input </li>\n</ol>\n</li>\n</ul>\n<P>\nWe use this definition to extend our strength relation:\n</P>\n<ul>\n<li>\n  A is <i>stronger</i> than B, when there is a\n  sequence A = A<sub>1</sub>, A<sub>2</sub>, ..., A<sub><i>n</i></sub> = B,\n  with <i>n</i> at least 2, <br>\n  where, for any <i>i</i> in 1 .. <i>n</i>-1, either\n  A<sub><i>i</i></sub>-A<sub><i>i</i>+1</sub> is an input crossing or\n  A<sub><i>i</i></sub> and A<sub><i>i</i>+1</sub> have equal strength.\n</li>\n</ul>\n<P>\nThen you are asked whether some other possible crossing names X-Y are\nvalid. You should answer affirmatively if you can infer the validity of a\nname, negatively if you cannot. Concretely:\n</P>\n<ul>\n<li>\n  YES    if you can infer that the two streets are orthogonal, and X\n         is stronger than Y\n</li>\n<li>\n  NO     otherwise\n</li>\n</ul>\n\n\n<H2>Input</H2>\n\n\n<P>\nThe input is a sequence of data sets, each of the form\n</P>\n<blockquote>\n<pre><i>N\nCrossing<sub>1</sub>\n...\nCrossing<sub>N</sub>\nM\nQuestion<sub>1</sub>\n...\nQuestion<sub>M</sub>\n</i></pre>\n</blockquote>\n<P>\nBoth <i>Crossing</i>s and <i>Question</i>s are of the form\n</P>\n<blockquote>\n<i>X-Y</i>\n</blockquote>\n<P>\nwhere <i>X</i> and <i>Y</i> are strings of alphanumerical characters,\nof lengths no more than 16. There is no white space, and case matters\nfor alphabetical characters.\n<br>\n<i>N</i> and <i>M</i> are between 1 and 1000 inclusive, and there are\nno more than 200 streets in a data set.\n</P>\n<P>\nThe last data set is followed by a line containing a zero.\n</P>\n\n\n<H2>Output</H2>\n\n\n<P>\nThe output for each data set should be composed of <i>M</i>+1 lines,\nthe first one containing the number of streets\nin the <i>Crossing</i> part of the input, followed by the answers to\neach question, either YES or NO without any spaces.\n</P>\n\n\n<H2>Sample Input</H2>\n<PRE>\n7\nShijo-Kawaramachi\nKarasuma-Imadegawa\nKawaramachi-Imadegawa\nNishioji-Shijo\nKarasuma-Gojo\nTorimaru-Rokujo\nRokujo-Karasuma\n6\nShijo-Karasuma\nImadegawa-Nishioji\nNishioji-Gojo\nShijo-Torimaru\nTorimaru-Gojo\nShijo-Kawabata\n4\n1jo-Midosuji\nMidosuji-2jo\n2jo-Omotesando\nOmotesando-1jo\n4\nMidosuji-1jo\n1jo-Midosuji\nMidosuji-Omotesando\n1jo-1jo\n0\n</PRE>\n\n<H2>Output for the Sample Input</H2>\n<PRE>\n8\nYES\nNO\nYES\nNO\nYES\nNO\n4\nYES\nYES\nNO\nNO\n</PRE>\n\n\n\n", "p00716": "\n\n<h1><font color=\"#000\">Problem A:</font> Ohgas' Fortune</h1>\n\n<p>\nThe Ohgas are a prestigious family based on Hachioji.  The head of the family,\nMr. Nemochi Ohga, a famous wealthy man, wishes to increase his fortune\nby depositing his money to an operation company. You are asked to help\nMr. Ohga maximize his profit by operating the given money during a specified\nperiod.\n</p>\n\n<p>\nFrom a given list of possible operations, \nyou choose an operation to deposit the given fund to. \nYou commit on the single operation throughout the period and\ndeposit all the fund to it.\n\nEach operation specifies an annual interest rate, whether the interest\nis simple or compound, and an annual operation charge.\n\nAn annual operation charge is a constant \nnot depending on the balance of the fund.\n\nThe amount of interest is calculated at the end of every year, by\nmultiplying the balance of the fund under operation by the annual\ninterest rate, and then rounding off its fractional part. For compound\ninterest, it is added to the balance of the fund under operation, and\nthus becomes a subject of interest for the following years.  For\nsimple interest, on the other hand, it is saved somewhere else and\ndoes not enter the balance of the fund under operation (i.e. it is\nnot a subject of interest in the following years).\n\nAn operation charge is then subtracted from the balance of the fund\nunder operation.  You may assume here that you can always pay the\noperation charge (i.e. the balance of the fund under operation is\nnever less than the operation charge).\n\nThe amount of money you obtain after the specified years of operation\nis called ``the final amount of fund.''  For simple interest, it is\nthe sum of the balance of the fund under operation at the end of the\nfinal year, plus the amount of interest accumulated throughout the\nperiod. For compound interest, it is simply the balance of the fund\nunder operation at the end of the final year.\n\n</p>\n\n<p>\nOperation companies use C, C++, Java, etc., to perform their\ncalculations, so they pay a special attention to their interest\nrates. That is, in these companies, an interest rate is always an\nintegral multiple of 0.0001220703125 and between 0.0001220703125 and\n0.125 (inclusive).  0.0001220703125 is a decimal representation of\n1/8192. Thus, interest rates' being its multiples means that they can\nbe represented with no errors under the double-precision binary\nrepresentation of floating-point numbers.\n</p>\n\n<p>\nFor example, if you operate 1000000 JPY for five years with an annual,\ncompound interest rate of 0.03125 (3.125 %) and an annual operation charge of 3000 JPY, the balance changes as\nfollows.\n</p>\n\n<table border>\n<tr align=right rowspan=2><td>The balance of the fund under operation\n(at the beginning of year)</td>\n<td>Interest</td><td>\nThe balance of the fund under operation (at the end of year)</td></tr>\n<tr align=right><td>A</td><td>B = A &times; 0.03125 (and rounding off fractions)</td>\n<td>A + B - 3000</td></tr>\n<tr align=right><td>1000000</td><td>31250</td><td>1028250</td></tr>\n<tr align=right><td>1028250</td><td>32132</td><td>1057382</td></tr>\n<tr align=right><td>1057382</td><td>33043</td><td>1087425</td></tr>\n<tr align=right><td>1087425</td><td>33982</td><td>1118407</td></tr>\n<tr align=right><td>1118407</td><td>34950</td><td>1150357</td></tr>\n</table>\n<p>\nAfter the five years of operation, the final amount of fund is 1150357 JPY.\n</p>\n\n<p>\nIf the interest is simple with all other parameters being equal, \nit looks like:\n</p>\n\n<table border>\n<tr align=right rowspan=2>\n<td>\nThe balance of the fund under operation (at the beginning of year)</td>\n<td>Interest</td>\n<td>The balance of the fund under operation (at the end of year)</td>\n<td>Cumulative interest </td></tr>\n<tr align=right>\n<td>A</td><td>B = A &times; 0.03125 (and rounding off fractions)</td><td>A - 3000</td><td></td>\n</tr>\n<tr align=right><td>1000000</td><td>31250</td><td>997000</td><td>31250</td></tr>\n<tr align=right><td>997000</td><td>31156</td><td>994000</td><td>62406</td></tr>\n<tr align=right><td>994000</td><td>31062</td><td>991000</td><td>93468</td></tr>\n<tr align=right><td>991000</td><td>30968</td><td>988000</td><td>124436</td></tr>\n<tr align=right><td>988000</td><td>30875</td><td>985000</td><td>155311</td></tr>\n</table border>\n\n<p>In this case the final amount of fund is the total of the fund under\noperation, 985000 JPY, and the cumulative interests, 155311 JPY, which\nis 1140311 JPY.\n</p>\n\n<h2>Input</h2>\n<p>\nThe input consists of datasets. The entire input looks like:\n</p>\n\n<blockquote>\n<i>the number of datasets (=m)</i> <br>\n<i>1st dataset</i>                 <br>\n<i>2nd dataset</i>                 <br>\n...                                <br>\n<i>m-th dataset</i>                <br>\n</blockquote>\n\n<p>\nThe number of datasets, <i>m</i>, is no more than 100.\nEach dataset is formatted as follows.\n</p>\n\n<blockquote>\n<i>the initial amount of the fund for operation</i>  <br>\n<i>the number of years of operation</i>              <br>\n<i>the number of available operations (=n)</i>       <br>\n<i>operation 1</i>                                   <br>\n<i>operation 2</i>                                   <br>\n...                                                  <br>\n<i>operation n</i>                                   <br>\n</blockquote>\n\n<p>\nThe initial amount of the fund for operation, the number of years of operation, \nand the number of available operations are all positive integers.\nThe first is no more than 100000000, the second no more than 10, and \nthe third no more than 100.\n</p>\n\n<p>\nEach ``operation'' is formatted as follows.\n</p>\n\n<blockquote>\n<i>simple-or-compound annual-interest-rate annual-operation-charge</i>\n</blockquote>\n\n<p>\nwhere <i>simple-or-compound</i> is a single character of either '0' or '1', \nwith '0' indicating\nsimple interest and '1' compound. <i>annual-interest-rate</i> is represented\nby a decimal fraction and is an integral multiple of 1/8192.\n<i>annual-operation-charge</i> is an integer not exceeding 100000.\n</p>\n\n<h2>Output</h2>\n<p>\nFor each dataset, print a line having a decimal integer indicating the\nfinal amount of fund for the best operation. The best operation is the\none that yields the maximum final amount among the available\noperations. Each line should not have any character other than \nthis number.\n</p>\n\n<p>\nYou may assume the final balance never exceeds 1000000000.\nYou may also assume that at least one operation has the final amount of the\nfund no less than the initial amount of the fund.\n</p>\n\n<h2>Sample Input</h2>\n<pre>\n4\n1000000\n5\n2\n0 0.03125 3000\n1 0.03125 3000\n6620000\n7\n2\n0 0.0732421875 42307\n1 0.0740966796875 40942\n39677000\n4\n4\n0 0.0709228515625 30754\n1 0.00634765625 26165\n0 0.03662109375 79468\n0 0.0679931640625 10932\n10585000\n6\n4\n1 0.0054931640625 59759\n1 0.12353515625 56464\n0 0.0496826171875 98193\n0 0.0887451171875 78966\n</pre>\n\n<h2>Output for the Sample Input</h2>\n<pre>\n1150357\n10559683\n50796918\n20829397\n</pre>\n\n\n\n\n\n\n\n", "p00718": "\n\n<h1><font color=\"#000\">Problem C:</font> Numeral System</h1>\n\n\n<p>\nProf. Hachioji has devised a new numeral system of\nintegral numbers with four lowercase letters \"m\", \"c\", \"x\", \"i\"\nand with eight digits \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\". \nHe doesn't use digit \"0\" nor digit \"1\" in this system.\n</p>\n\n\n<p>\nThe letters \"m\", \"c\", \"x\" and \"i\" correspond to 1000, 100, 10 and 1,\nrespectively, \nand the digits \"2\", ...,\"9\" correspond to 2, ..., 9, respectively.\nThis system has  nothing to do with the Roman numeral system.\n</p>\n\n\n<p>\nFor example,\ncharacter strings\n</p>\n<blockquote>\n    \"5m2c3x4i\", \"m2c4i\"  and   \"5m2c3x\"\n</blockquote>\n<p>\ncorrespond to the integral numbers \n5234 (=5*1000+2*100+3*10+4*1),\n1204 (=1000+2*100+4*1),\n and 5230 (=5*1000+2*100+3*10), \nrespectively.  \nThe parts of strings in the above example, \"5m\", \"2c\", \"3x\" and \"4i\" \nrepresent 5000 (=5*1000), 200 (=2*100), 30 (=3*10) and 4 (=4*1),\nrespectively. \n</p>\n\n\n<p>\nEach of the letters \"m\", \"c\", \"x\" and \"i\" may\n be prefixed by one of the digits\n\"2\", \"3\", ..., \"9\". \nIn that case, the prefix digit and the letter are regarded \nas a pair.\nA pair that consists of a prefix digit and a letter \ncorresponds to an integer that is equal to\nthe original value of the letter multiplied by \nthe value of the prefix digit.\n</p>\n\n\n<p>\nFor each letter \"m\", \"c\", \"x\" and \"i\", \nthe number of its occurrence in a string is at most one.\nWhen it has a prefix digit, it should appear together with the prefix digit.\nThe letters \"m\", \"c\", \"x\" and \"i\" must appear in this order, from left to right.\nMoreover, when a digit exists in a string,\nit should appear as the prefix digit of the following letter.\nEach letter may be omitted in a string, but\nthe whole string must not be empty.\nA string made in this manner is called an <I>MCXI-string</I>.\n</p>\n\n\n<p>\nAn MCXI-string corresponds to a positive integer \nthat is the sum of the values of the letters\nand those of the pairs contained in it as mentioned above. \nThe positive integer corresponding to an MCXI-string is called its\nMCXI-value.\nMoreover, given an integer from 1 to 9999,\nthere is a unique MCXI-string whose MCXI-value is equal \nto the given integer.\nFor example,\nthe MCXI-value of an MCXI-string \"m2c4i\" is \n1204 that is equal to <tt>1000 + 2*100 + 4*1</tt>.\nThere are no MCXI-strings but \"m2c4i\" that correspond to 1204.\nNote\nthat strings \"1m2c4i\", \"mcc4i\", \"m2c0x4i\", and \"2cm4i\" are\nnot valid MCXI-strings. \nThe reasons are use of \"1\",\nmultiple occurrences of \"c\", use of \"0\", and the wrong order of \"c\" and \"m\",\nrespectively.\n</p>\n\n\n<p>\nYour job is to write a program for Prof. Hachioji\nthat reads two MCXI-strings, \ncomputes the sum of their MCXI-values, and\nprints the MCXI-string corresponding to the result.\n</p>\n\n\n<h2>Input</h2>\n\n\n<p>\nThe input is as follows.\nThe first line contains a positive integer <I>n</I> (<= 500) that \nindicates the number of the following lines.  \nThe <I>k</I>+1 th line is the specification of \nthe <I>k</I> th computation (<I>k</I>=1, ..., <I>n</I>).\n</p>\n\n\n<blockquote>\n<I>n</I>                                    <br>\n<I>specification</I><sub>1</sub>            <br>\n<I>specification</I><sub>2</sub>            <br>\n    ...<br>                   \n<I>specification</I><sub><I>n</I></sub>     <br>\n</blockquote>\n\n\n<p>\nEach specification is described in a line:\n<blockquote>\n<I>MCXI-string</I><sub>1</sub> <I>MCXI-string</I><sub>2</sub>\n</blockquote>\n<p>\nThe two MCXI-strings are separated by a space.\n</p>\n\n\n<p>\nYou may assume that the sum of the two MCXI-values \nof the two MCXI-strings in each specification \nis less than or equal to 9999. \n</p>\n\n\n<h2>Output</h2>\n\n\n<p>\nFor each specification,\nyour program should print an MCXI-string in a line.\nIts MCXI-value should be the sum of the two MCXI-values\nof the MCXI-strings in the specification.\nNo other characters should appear in the output.\n</p>\n\n\n<h2>Sample Input</h2>\n<pre>\n10\nxi x9i\ni 9i\nc2x2i 4c8x8i\nm2ci 4m7c9x8i\n9c9x9i i\ni 9m9c9x8i\nm i\ni m\nm9i i\n9m8c7xi c2x8i\n</pre>\n\n\n<h2>Output for the Sample Input</h2>\n<pre>\n3x\nx\n6cx\n5m9c9x9i\nm\n9m9c9x9i\nmi\nmi\nmx\n9m9c9x9i\n</pre>\n\n\n\n\n", "p00719": "\n<h1><font color=\"#000\">Problem D:</font> Traveling by Stagecoach</h1>\n\n<p>\nOnce upon a time, there was a traveler.\n</p>\n\n<p>\nHe plans to travel using stagecoaches (horse wagons).\nHis starting point and destination are fixed,\nbut he cannot determine his route.\nYour job in this problem is to write a program\nwhich determines the route for him.\n</p>\n\n<p>\nThere are several cities in the country,\nand a road network connecting them.\nIf there is a road between two cities, one can travel by a stagecoach\nfrom one of them to the other.\nA coach ticket is needed for a coach ride.\nThe number of horses is specified in each of the tickets.\nOf course, with more horses, the coach runs faster.\n</p>\n\n<p>\nAt the starting point, the traveler has a number of coach tickets.\nBy considering these tickets and the information on the road network,\nyou should find the best possible route that takes him to the destination\nin the shortest time.\nThe usage of coach tickets should be taken into account.\n</p>\n\n<p>\nThe following conditions are assumed.\n</p>\n\n<ul><li> A coach ride takes the traveler from one city to another \ndirectly connected by a road.\nIn other words, on each arrival to a city, he must change the coach. </li>\n<li> Only one ticket can be used for a coach ride between two cities\ndirectly connected by a road. </li>\n<li> Each ticket can be used only once. </li>\n<li> The time needed for a coach ride is the distance between two cities\ndivided by the number of horses. </li>\n<li> The time needed for the coach change should be ignored. </li></ul>\n\n<h2>Input</h2>\n\n<p>\nThe input consists of multiple datasets, each in the following format.\nThe last dataset is followed by a line containing five zeros\n(separated by a space).\n</p>\n\n<blockquote>\n<i>n m p a b</i><br>\n<i>t</i><sub>1</sub> <i>t</i><sub>2</sub> ... <i>t<sub>n</sub></i><br>\n<i>x</i><sub>1</sub> <i>y</i><sub>1</sub> <i>z</i><sub>1</sub><br>\n<i>x</i><sub>2</sub> <i>y</i><sub>2</sub> <i>z</i><sub>2</sub><br>\n...<br>\n<i>x<sub>p</sub></i> <i>y<sub>p</sub></i> <i>z<sub>p</sub></i><br>\n</blockquote>\n\n<p>\nEvery input item in a dataset is a non-negative integer.\nIf a line contains two or more input items, they are separated by a space.\n</p>\n\n<p>\n<i>n</i> is the number of coach tickets.\nYou can assume that the number of tickets is between 1 and 8.\n<i>m</i> is the number of cities in the network.\nYou can assume that the number of cities is between 2 and 30.\n<i>p</i> is the number of roads between cities, which may be zero.\n</p>\n\n<p>\n<i>a</i> is the city index of the starting city.\n<i>b</i> is the city index of the destination city.\n<i>a</i> is not equal to <i>b</i>.\nYou can assume that all city indices in a dataset (including the above two)\nare between 1 and <i>m</i>.\n</p>\n\n<p>\nThe second line of a dataset gives the details of coach tickets.\n<i>t<sub>i</sub></i> is the number of horses specified in the <i>i</i>-th\ncoach ticket (1&lt;=<i>i</i>&lt;=<i>n</i>).\nYou can assume that the number of horses is between 1 and 10.\n</p>\n\n<p>\nThe following <i>p</i> lines give the details of roads between cities.\nThe <i>i</i>-th road connects two cities with city indices\n<i>x<sub>i</sub></i> and <i>y<sub>i</sub></i>,\nand has a distance <i>z<sub>i</sub></i> (1&lt;=<i>i</i>&lt;=<i>p</i>).\nYou can assume that the distance is between 1 and 100.\n</p>\n\n<p>\nNo two roads connect the same pair of cities.\nA road never connects a city with itself.\nEach road can be traveled in both directions.\n</p>\n\n<h2>Output</h2>\n\n<p> \nFor each dataset in the input, one line should be output as specified below.\nAn output line should not contain extra characters such as spaces.\n</p>\n\n<p>\nIf the traveler can reach the destination, the time needed\nfor the best route (a route with the shortest time) should be printed.\nThe answer should not have an error greater than 0.001.\nYou may output any number of digits after the decimal point,\nprovided that the above accuracy condition is satisfied.\n</p>\n\n<p>\nIf the traveler cannot reach the destination,\nthe string \"<tt>Impossible</tt>\" should be printed.\nOne cannot reach the destination either when there are no routes\nleading to the destination, or when the number of tickets is not sufficient.\nNote that the first letter of \"<tt>Impossible</tt>\" is in uppercase,\nwhile the other letters are in lowercase.\n</p>\n\n<h2>Sample Input</h2>\n<pre>\n3 4 3 1 4\n3 1 2\n1 2 10\n2 3 30\n3 4 20\n2 4 4 2 1\n3 1\n2 3 3\n1 3 3\n4 1 2\n4 2 5\n2 4 3 4 1\n5 5\n1 2 10\n2 3 10\n3 4 10\n1 2 0 1 2\n1\n8 5 10 1 5\n2 7 1 8 4 5 6 3\n1 2 5\n2 3 4\n3 4 7\n4 5 3\n1 3 25\n2 4 23\n3 5 22\n1 4 45\n2 5 51\n1 5 99\n0 0 0 0 0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n<pre>\n30.000\n3.667\nImpossible\nImpossible\n2.856\n</pre>\n\n\n\n<!--\n<p>\nSince the number of digits after the decimal point is not specified,\nthe above result is not the only solution.\nFor example, the following result is also acceptable.\n</p>\n\n<pre>\n30.0\n3.66667\nImpossible\nImpossible\n2.85595\n</pre>\n-->\n\n\n", "p00721": "\n<h1><font color=\"#000\">Problem F:</font> Cleaning Robot</h1>\n\n<p>\nHere, we want to solve path planning for a mobile robot cleaning a\nrectangular room floor with furniture.\n</p>\n\n<p>\nConsider the room floor paved with square tiles whose size fits \nthe cleaning robot (1 &times; 1).\nThere are 'clean tiles' and 'dirty tiles', and the robot can change\na 'dirty tile' to a 'clean tile' by visiting the tile.\nAlso there may be some obstacles (furniture) whose size fits a\ntile in the room. If there is an obstacle on a tile, the robot cannot visit \nit.\nThe robot moves to an adjacent tile with one move.\nThe tile onto which the robot moves must be one of four tiles \n(i.e., east, west, north or south) adjacent to the tile where the \nrobot is present. The robot may visit a tile twice or more.\n</p>\n\n<p>\nYour task is to write a program which computes the minimum number of\nmoves for the robot to change all 'dirty tiles' to 'clean tiles', \nif ever possible.\n</p>\n\n<h2>Input</h2>\n\n<p>\nThe input consists of multiple maps, each representing the size \nand arrangement of the room. A map is given in the following format.\n</p>\n<blockquote>\n<i>\nw h<br>\n</i>\n<i>c</i><sub>11</sub> <i>c</i><sub>12</sub> <i>c</i><sub>13</sub> ... <i>c</i><sub>1<i>w</i></sub><br>\n<i>c</i><sub>21</sub> <i>c</i><sub>22</sub> <i>c</i><sub>23</sub> ... <i>c</i><sub>2<i>w</i></sub><br>\n...<br>\n<i>c</i><sub><i>h</i>1</sub> <i>c</i><sub><i>h</i>2</sub> <i>c</i><sub><i>h</i>3</sub> ... <i>c</i><sub><i>hw</i></sub><br>\n</i>\n</blockquote>\n<p>\nThe integers <i>w</i> and <i>h</i> are the lengths of the two sides \nof the floor of the room in terms of widths of floor tiles. <i>w</i> and <i>h</i> \nare less than or equal to 20. The character <i>c<sub>yx</sub></i> represents \nwhat is initially on the tile with coordinates (<i>x, y</i>) as follows. \n</p>\n\n<blockquote>\n'<tt>.</tt>' : a clean tile<br>\n'<tt>*</tt>' : a dirty tile <br>\n'<tt>x</tt>' : a piece of furniture (obstacle) <br>\n'<tt>o</tt>' : the robot (initial position)<br>\n</blockquote>\n\n<p>\nIn the map the number of 'dirty tiles' does not exceed 10.\nThere is only one 'robot'.\n</p>\n<p>\nThe end of the input is indicated by a line containing two zeros. \n</p>\n\n<h2>Output</h2>\n<p> \nFor each map, your program should output a line containing the minimum \nnumber of moves. If the map includes 'dirty tiles' which the robot cannot reach, \nyour program should output -1.\n</p>\n\n\n<h2>Sample Input</h2>\n<pre>\n7 5\n.......\n.o...*.\n.......\n.*...*.\n.......\n15 13\n.......x.......\n...o...x....*..\n.......x.......\n.......x.......\n.......x.......\n...............\nxxxxx.....xxxxx\n...............\n.......x.......\n.......x.......\n.......x.......\n..*....x....*..\n.......x.......\n10 10\n..........\n..o.......\n..........\n..........\n..........\n.....xxxxx\n.....x....\n.....x.*..\n.....x....\n.....x....\n0 0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n<pre>\n8\n49\n-1\n</pre>\n\n\n", "p00722": "\n<h1><font color=\"#000\">Problem A:</font> Dirichlet's Theorem on Arithmetic Progressions</h1>\n\n<p>\nGood evening, contestants.\n</p>\n\n<p>\nIf <i>a</i> and <i>d</i> are relatively prime positive integers,\nthe arithmetic sequence beginning with <i>a</i>\nand increasing by <i>d</i>, i.e.,\n<i>a</i>,\n<i>a</i> + <i>d</i>,\n<i>a</i> + 2<i>d</i>,\n<i>a</i> + 3<i>d</i>,\n<i>a</i> + 4<i>d</i>,\n...,\ncontains infinitely many prime numbers.\nThis fact is known as Dirichlet's Theorem on Arithmetic Progressions,\nwhich had been conjectured by Johann Carl Friedrich Gauss (1777 - 1855)\nand was proved by Johann Peter Gustav Lejeune Dirichlet (1805 - 1859)\nin 1837.\n</p>\n\n\n\n<p>\nFor example,\nthe arithmetic sequence beginning with 2 and increasing by 3,\ni.e.,\n</p>\n\n<blockquote>\n2,\n5,\n8,\n11,\n14,\n17,\n20,\n23,\n26,\n29,\n32,\n35,\n38,\n41,\n44,\n47,\n50,\n53,\n56,\n59,\n62,\n65,\n68,\n71,\n74,\n77,\n80,\n83,\n86,\n89,\n92,\n95,\n98,\n...\n,\n</blockquote>\n\n<p>\ncontains infinitely many prime numbers\n</a></p>\n<!-- end en only -->\n<blockquote>\n2,\n5,\n11,\n17,\n23,\n29,\n41,\n47,\n53,\n59,\n71,\n83,\n89,\n...\n<!-- begin en only -->\n.\n<!-- end en only -->\n</blockquote>\n\n<!-- begin en only -->\n<p>\nYour mission, should you decide to accept it,\nis to write a program to find\nthe <i>n</i>th prime number in this arithmetic sequence\nfor given positive integers <i>a</i>, <i>d</i>, and <i>n</i>.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nAs always, should you or any of your team be tired or confused,\nthe secretary disavow any knowledge of your actions.\nThis judge system will self-terminate in three hours.\nGood luck!\n</p>\n<!-- end en only -->\n\n\n<h2>Input</h2>\n\n<!-- begin en only -->\n<p>\nThe input is a sequence of datasets.\nA dataset is a line containing three positive integers\n<i>a</i>, <i>d</i>, and <i>n</i> separated by a space.\n<i>a</i> and <i>d</i> are relatively prime.\nYou may assume <i>a</i> &lt;= 9307, <i>d</i> &lt;= 346,\nand <i>n</i> &lt;= 210.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nThe end of the input is indicated by a line\ncontaining three zeros separated by a space.\nIt is not a dataset.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\n</p>\n<!-- end en only -->\n\n\n\n<h2>Output</h2>\n\n<!-- begin en only -->\n<p>\nThe output should be composed of\nas many lines as the number of the input datasets.\nEach line should contain a single integer\nand should never contain extra characters.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nThe output integer corresponding to\na dataset <i>a</i>, <i>d</i>, <i>n</i> should be\nthe <i>n</i>th \nprime number among those contained\nin the arithmetic sequence beginning with <i>a</i>\nand increasing by <i>d</i>.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nFYI, it is known that the result is always less than\n10<sup>6</sup> (one million)\nunder this input condition.\n</p>\n<!-- end en only -->\n\n\n<h2>Sample Input</h2>\n\n<pre>\n367 186 151\n179 10 203\n271 37 39\n103 230 1\n27 104 185\n253 50 85\n1 1 1\n9075 337 210\n307 24 79\n331 221 177\n259 170 40\n269 58 102\n0 0 0\n</pre>\n\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\n92809\n6709\n12037\n103\n93523\n14503\n2\n899429\n5107\n412717\n22699\n25673\n</pre>\n", "p00726": "\n<h1><font color=\"#000\">Problem E:</font> <u>The Genome Database of All Space Life</u></h1>\n<!-- end en only -->\n\n\n<p>\nIn 2300, the Life Science Division of Federal Republic of Space starts\na very ambitious project to complete the genome sequencing of all\nliving creatures in the entire universe and develop the genomic\ndatabase of all space life.\nThanks to scientific research over many years, it has been known that\nthe genome of any species consists of at most 26 kinds of\nmolecules, denoted by English capital letters (<i>i.e.</i> <tt>A</tt>\nto <tt>Z</tt>).\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nWhat will be stored into the database are plain strings consisting of\nEnglish capital letters.\nIn general, however, the genome sequences of space life include\nfrequent repetitions and can be awfully long.\nSo, for efficient utilization of storage, we compress <i>N</i>-times\nrepetitions of a letter sequence <i>seq</i> into\n<i>N</i><tt>(</tt><i>seq</i><tt>)</tt>, where <i>N</i> is a natural \nnumber greater than or equal to two and the length of <i>seq</i> is at\nleast one.\nWhen <i>seq</i> consists of just one letter <i>c</i>, we may omit parentheses and write <i>Nc</i>.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nFor example, a fragment of a genome sequence:\n</p><blockquote>\n<tt>ABABABABXYXYXYABABABABXYXYXYCCCCCCCCCC</tt>\n</blockquote>\n<p>can be compressed into:</p>\n<blockquote>\n<tt>4(AB)XYXYXYABABABABXYXYXYCCCCCCCCCC</tt>\n</blockquote>\n<p>by replacing the first occurrence of <tt>ABABABAB</tt> with its compressed form.\nSimilarly, by replacing the following repetitions of <tt>XY</tt>,\n<tt>AB</tt>, and <tt>C</tt>, we get:</p>\n<blockquote>\n<tt>4(AB)3(XY)4(AB)3(XY)10C</tt>\n</blockquote>\n<p>Since <tt>C</tt> is a single letter, parentheses are omitted in this\ncompressed representation.\nFinally, we have:</p>\n<blockquote>\n<tt>2(4(AB)3(XY))10C</tt>\n</blockquote>\n<p>by compressing the repetitions of <tt>4(AB)3(XY)</tt>.\nAs you may notice from this example, parentheses can be nested.\n<p></p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nYour mission is to write a program that uncompress compressed genome\nsequences.\n</p>\n<!-- end en only -->\n\n\n<h2>Input</h2>\n\n\n<!-- begin en only -->\n<p>The input consists of multiple lines, each of which contains a\ncharacter string <i>s</i> and an integer <i>i</i> separated by a\nsingle space. \n</p>\n<!-- end en only -->\n\n\n<!-- begin en only -->\n<p>\nThe character string <i>s</i>, in the aforementioned manner,\nrepresents a genome sequence.\nYou may assume that the length of <i>s</i> is between 1 and 100,\ninclusive.\nHowever, of course, the genome sequence represented by <i>s</i> may be\nmuch, much, and much longer than 100.\nYou may also assume that each natural number in <i>s</i> representing the\nnumber of repetitions is at most 1,000. \n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nThe integer <i>i</i> is at least zero and at most one million. \n</p>\n<!-- end en only -->\n\n\n<!-- begin en only -->\n<p>\nA line containing two zeros separated by a space follows the last input line and indicates\nthe end of the input.\n</p>\n<!-- end en only -->\n\n\n<h2>Output</h2>\n\n<!-- begin en only -->\n<p>\nFor each input line, your program should print a line containing the\n<i>i</i>-th letter in the genome sequence that <i>s</i> represents.\nIf the genome sequence is too short to have the <i>i</i>-th element,\nit should just print a zero.\nNo other characters should be printed in the output lines.\n\nNote that in this problem the index number begins from zero rather\nthan one and therefore the initial letter of a sequence is its zeroth element.\n</p>\n<!-- end en only -->\n\n\n<h2>Sample Input</h2>\n\n<pre>\nABC 3\nABC 0\n2(4(AB)3(XY))10C 30\n1000(1000(1000(1000(1000(1000(NM)))))) 999999\n0 0\n</pre>\n\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\n0\nA\nC\nM\n</pre>\n\n", "p00735": "\n<h1><font color=\"#000000\">Problem B: </font>Monday-Saturday Prime Factors</h1>\n<!-- end en only -->\n\n<p>\nChief Judge's log, stardate 48642.5.\nWe have decided to make a problem from elementary number theory.\nThe problem looks like finding all prime factors of a positive integer,\nbut it is not.\n</p>\n<!-- end en only -->\n<!-- begin en only -->\n<p>\nA positive integer whose remainder divided by 7 is either 1 or 6 is called\na 7<b><i>N</i></b>+{1,6} number.\nBut as it is hard to pronounce,\nwe shall call it a <em>Monday-Saturday number</em>.\n</p>\n<!-- end en only -->\n<!-- begin en only -->\n<p>\nFor Monday-Saturday numbers <I>a</I> and <I>b</I>,\nwe say <I>a</I> is a Monday-Saturday divisor of <I>b</I>\nif there exists a Monday-Saturday number <I>x</I>\nsuch that <I>a</I><I>x</I> = <I>b</I>.\nIt is easy to show that\nfor any Monday-Saturday numbers <I>a</I> and <I>b</I>,\nit holds that <I>a</I> is\na Monday-Saturday divisor of <I>b</I>\nif and only if\n<I>a</I> is a divisor of <I>b</I> in the usual sense.\n</p>\n<!-- end en only -->\n<!-- begin en only -->\n<p>\nWe call a Monday-Saturday number a <em>Monday-Saturday prime</em>\nif it is greater than 1 and has no Monday-Saturday divisors\nother than itself and 1.\nA Monday-Saturday number which is a prime in the usual sense\nis a Monday-Saturday prime\nbut the converse does not always hold.\nFor example, 27 is a Monday-Saturday prime\nalthough it is not a prime in the usual sense.\nWe call a Monday-Saturday prime\nwhich is a Monday-Saturday divisor of a Monday-Saturday number <I>a</I>\na <em>Monday-Saturday prime factor</em> of <I>a</I>.\nFor example, 27 is one of the Monday-Saturday prime factors of 216,\nsince 27 is a Monday-Saturday prime\nand 216 = 27 &times; 8 holds.\n</p>\n<!-- end en only -->\n<p>\n<!-- begin en only -->\nAny Monday-Saturday number greater than 1\ncan be expressed as a product of one or more Monday-Saturday primes.\nThe expression is not always unique\neven if differences in order are ignored.\nFor example,\n<!-- end en only -->\n216 = 6 &times; 6 &times; 6 = 8 &times; 27\n<!-- begin en only -->\nholds.\n<!-- end en only -->\n</p>\n<!-- begin en only -->\n<p>\nOur contestants should write a program that outputs\nall Monday-Saturday prime factors\nof each input Monday-Saturday number.\n</p>\n<!-- end en only -->\n\n\n<h3>Input</h3>\n\n<!-- begin en only -->\n<p>\nThe input is a sequence of lines each of which contains a single\nMonday-Saturday number.\nEach Monday-Saturday number is greater than 1\nand less than 300000 (three hundred thousand).\nThe end of the input is indicated by a line\ncontaining a single digit 1.\n</p>\n<!-- end en only -->\n\n\n<h3>Output</h3>\n\n<!-- begin en only -->\n<p>\nFor each input Monday-Saturday number,\nit should be printed, followed by a colon `:'\nand the list of its Monday-Saturday prime factors on a single line.\nMonday-Saturday prime factors should be listed in ascending order\nand each should be preceded by a space.\nAll the Monday-Saturday prime factors should be printed only once\neven if they divide the input Monday-Saturday number more than once.\n</p>\n<!-- end en only -->\n\n\n<h3>Sample Input</h3>\n\n<pre>\n205920\n262144\n262200\n279936\n299998\n1\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n205920: 6 8 13 15 20 22 55 99\n262144: 8\n262200: 6 8 15 20 50 57 69 76 92 190 230 475 575 874 2185\n279936: 6 8 27\n299998: 299998\n</pre>\n\n", "p00740": "\n<h1><font color=\"#000000\">Problem A:</font> Next Mayor</h1>\n\n<p>\nOne of the oddest traditions of the town of Gameston may be that even\nthe town mayor of the next term is chosen according to the result of a game.\nWhen the expiration of the term of the mayor approaches, at least\nthree candidates, including the mayor of the time, play a game of\npebbles, and the winner will be the next mayor.\n</p>\n\n<p>\nThe rule of the game of pebbles is as follows.\nIn what follows, <I>n</I> is the number of participating candidates.\n</p>\n\n<DL>\n<DT>Requisites\n<DD>A round table, a bowl, and plenty of pebbles.\n<DT>Start of the Game\n<DD>\n\nA number of pebbles are put into the bowl;\nthe number is decided by the Administration Commission using\nsome secret stochastic process.\nAll the candidates, numbered from 0 to <I>n</I>-1 sit around the round table, \nin a counterclockwise order.  Initially, the bowl is handed to the \nserving mayor at the time, who is numbered 0.\n<DT>Game Steps\n<DD>\nWhen a candidate is handed the bowl and if any pebbles are in it,\none pebble is taken out of the bowl and is\nkept, together with those already at hand, if any.\nIf no pebbles are left in the bowl, the candidate puts\nall the kept pebbles, if any, into the bowl.  Then, in either case, the bowl is\nhanded to the next candidate to the right.\n\nThis step is repeated until the winner is decided.\n<DT>End of the Game\n<DD>\nWhen a candidate takes the last pebble in the bowl, and no other\ncandidates keep any pebbles, the game ends and that candidate with all\nthe pebbles is the winner.\n</DL>\n</p>\n\n\n<p>\nA math teacher of Gameston High, through his analysis, concluded that this game will always end within a finite number of steps, although the number of required steps can be very large.\n</p>\n\n\n<h3>Input</h3>\n\n\n<p>\nThe input is a sequence of datasets.  Each dataset is a line\ncontaining two integers <I>n</I> and <I>p</I> separated by a single\nspace.  The integer <I>n</I> is the number of the candidates including\nthe current mayor, and the integer <I>p</I> is the total number of the\npebbles initially put in the bowl.  You may assume 3 &le; <I>n</I> &le; 50\nand 2 &le; <I>p</I> &le; 50.\n</p>\n\n<p>\nWith the settings given in the input datasets, the game will end within 1000000 (one million) steps.\n</p>\n<p>\nThe end of the input is indicated by a line\ncontaining two zeros separated by a single space.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nThe output should be composed of lines corresponding to input datasets\nin the same order, each line of which containing the candidate number\nof the winner.\nNo other characters should appear in the output.\n\n</p>\n\n\n<h3>Sample Input</h3>\n\n<pre>\n3 2\n3 3\n3 50\n10 29\n31 32\n50 2\n50 50\n0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n1\n0\n1\n5\n30\n1\n13\n</pre>\n\n", "p00742": "\n<h1><font color=\"#000000\">Problem C:</font> Verbal Arithmetic</h1>\n\n\n<p>\nLet's think about <i>verbal arithmetic.</i>\n</p>\n\n<p>\nThe material of this puzzle is a summation\nof non-negative integers represented in a decimal format,\nfor example, as follows.\n</p>\n\n<pre>\n    905 +  125 = 1030\n</pre>\n\n<p>\nIn verbal arithmetic, every digit appearing in the equation is masked with an alphabetic character.  A problem which has the above equation as one of its answers, for example, is the following.\n</p>\n\n\n<pre>\n    ACM + IBM = ICPC\n</pre>\n\n\n<p>\nSolving this puzzle means finding possible digit assignments\nto the alphabetic characters in the verbal equation.\n</p>\n\n\n<p>\nThe rules of this puzzle are the following.\n</p>\n\n<ul>\n<li>\nEach integer in the equation is expressed in terms of one or more\ndigits '0'-'9', but all the digits are masked with some alphabetic\ncharacters 'A'-'Z'.\n</li>\n\n<li>\nThe same alphabetic character appearing in multiple places \nof the equation masks the same digit.\nMoreover, all appearances of the same digit are masked with a single\nalphabetic character.\nThat is, different alphabetic characters mean different digits.\n</li>\n\n<li>\nThe most significant digit must not be '0',\nexcept when a zero is expressed as a single digit '0'.\nThat is, expressing numbers as \"00\" or \"0123\" is not permitted.\n</li>\n</ul>\n\n\n<p>\nThere are 4 different digit assignments for the verbal equation above\nas shown in the following table.\n</p>\n\n\n<table border>\n<tr><th>Mask</th><th>A</th><th>B</th><th>C</th><th>I</th><th>M</th><th>P</th></tr>\n<tr><td>Case 1</td><td>9</td><td>2</td><td>0</td><td>1</td><td>5</td><td>3</td></tr>\n\n<tr><td>Case 2</td><td>9</td><td>3</td><td>0</td><td>1</td><td>5</td><td>4</td></tr>\n<tr><td>Case 3</td><td>9</td><td>6</td><td>0</td><td>1</td><td>5</td><td>7</td></tr>\n<tr><td>Case 4</td><td>9</td><td>7</td><td>0</td><td>1</td><td>5</td><td>8</td></tr>\n\n</table>\n\n\n<p>\nYour job is to write a program which solves this puzzle.\n</p>\n\n\n\n<h3>Input</h3>\n\n\n<p>The input consists of a number of datasets.\nThe end of the input is indicated by a line containing a zero.\n\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nThe number of datasets is no more than 100.\nEach dataset is formatted as follows.\n</blockquote>\n<!-- end en only -->\n\n<blockquote>\n<i>N</i> <br />\n<i>STRING</i> <sub>1</sub> <br />\n\n<i>STRING</i> <sub>2</sub> <br />\n... <br />\n<i>STRING</i> <sub><i>N</i></sub> <br />\n</blockquote>\n\n\n<!-- begin en only -->\n<p>\n\nThe first line of a dataset contains an integer <i>N </i> \nwhich is the number of integers appearing in the equation.\nEach of the following <i>N </i>  lines contains a string\ncomposed of uppercase alphabetic characters 'A'-'Z'\nwhich mean masked digits.\n</p>\n<!-- end en only -->\n\n\n<!-- begin en only -->\n<p>Each dataset expresses the following equation.</p>\n<!-- end en only -->\n\n\n<blockquote>\n  <i>STRING</i> <sub>1</sub> + <i>STRING</i> <sub>2</sub> + ... + <i>STRING</i> <sub><i>N</i> -1</sub> = <i>STRING</i> <sub><i>N</i></sub>\n\n</blockquote>\n\n\n<!-- begin en only -->\n<p>\nThe integer <i>N </i>  is greater than 2 and less than 13.\nThe length of <i>STRING</i> <sub><i>i</i></sub> is greater than 0\nand less than 9.\nThe number of different alphabetic characters appearing \nin each dataset is greater than 0 and less than 11.\n</p>\n<!-- end en only -->\n\n\n<h3>Output</h3>\n\n<p>\nFor each dataset, output a single line containing \nthe number of different digit assignments that satisfy the equation.\n</p>\n<p>\nThe output must not contain any superfluous characters.\n</p>\n\n\n<h3>Sample Input</h3>\n\n\n<pre>\n3\nACM\nIBM\nICPC\n3\nGAME\nBEST\nGAMER\n4\nA\nB\nC\nAB\n3\nA\nB\nCD\n3\nONE\nTWO\nTHREE\n3\nTWO\nTHREE\nFIVE\n3\nMOV\nPOP\nDIV\n9\nA\nB\nC\nD\nE\nF\nG\nH\nIJ\n0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n4\n1\n8\n30\n0\n0\n0\n40320\n</pre>\n\n\n", "p00743": "\n<h1><font color=\"#000000\">Problem D:</font> Discrete Speed</h1>\n\n\n<p>\nConsider car trips in a country where there is no friction.\nCars in this country do not have engines.\nOnce a car started to move at a speed, it keeps moving at the same speed.\nThere are acceleration devices on some points on the road,\nwhere a car can increase or decrease its speed by 1.\nIt can also keep its speed there.\nYour job in this problem is to write a program\nwhich determines the route with the shortest time\nto travel from a starting city to a goal city.\n</p>\n\n<p>\nThere are several cities in the country,\nand a road network connecting them.\nEach city has an acceleration device.\nAs mentioned above, if a car arrives at a city at a speed <i>v </i>,\nit leaves the city at one of <i>v </i>- 1, <i>v </i>, or <i>v </i>+ 1.\nThe first road leaving the starting city must be run at the speed 1.\nSimilarly, the last road arriving at the goal city must be run at the speed 1.\n\n</p>\n\n<p>\nThe starting city and the goal city are given.\nThe problem is to find the best route which leads to the goal city\ngoing through several cities on the road network.\nWhen the car arrives at a city, it cannot immediately go back the road\nit used to reach the city.  No U-turns are allowed.\nExcept this constraint, one can choose any route on the road network.\nIt is allowed to visit the same city or use the same road multiple times.\nThe starting city and the goal city may be visited during the trip.\n</p>\n\n<p>\nFor each road on the network, its distance and speed limit are given.\nA car must run a road at a speed less than or equal to its speed limit.\nThe time needed to run a road is the distance divided by the speed.\nThe time needed within cities including that for acceleration or deceleration should be ignored. </li></ul>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n\n\n<blockquote>\n<i>n </i> <i>m </i><br>\n<i>s </i> <i>g </i><br>\n\n<i>x</i><sub> 1</sub> <i>y</i><sub> 1</sub> <i>d</i><sub> 1</sub> <i>c</i><sub> 1</sub><br>\n...<br>\n\n<i>x<sub>m</sub> </i> <i>y<sub>m</sub> </i> <i>d<sub>m</sub> </i> <i>c<sub>m</sub> </i><br>\n</blockquote>\n\n<!-- begin en only -->\n<p>\nEvery input item in a dataset is a non-negative integer.\nInput items in the same line are separated by a space.\n</p>\n\n<p>\nThe first line gives the size of the road network.\n<i>n </i> is the number of cities in the network.\nYou can assume that the number of cities is between 2 and 30, inclusive.\n<i>m </i> is the number of roads between cities, which may be zero.\n</p>\n\n<p>\n\nThe second line gives the trip.\n<i>s </i> is the city index of the starting city.\n<i>g </i> is the city index of the goal city.\n<i>s </i> is not equal to <i>g </i>.\nYou can assume that all city indices in a dataset (including the above two)\nare between 1 and <i>n </i>, inclusive.\n</p>\n\n<p>\n\nThe following <i>m </i> lines give the details of roads between cities.\nThe <i>i </i>-th road connects two cities with city indices\n<i>x<sub>i</sub> </i> and <i>y<sub>i</sub> </i>,\nand has a distance <i>d<sub>i</sub> </i> (1 &le; <i>i </i>&le; <i>m </i>).\nYou can assume that the distance is between 1 and 100, inclusive.\nThe speed limit of the road is specified by <i>c<sub>i</sub> </i>.\nYou can assume that the speed limit is between 1 and 30, inclusive.\n\n</p>\n\n<p>\nNo two roads connect the same pair of cities.\nA road never connects a city with itself.\nEach road can be traveled in both directions.\n</p>\n\n<p>\nThe last dataset is followed by a line containing two zeros\n(separated by a space).\n</p>\n\n\n\n\n<h3>Output</h3>\n\n<p> \nFor each dataset in the input, one line should be output as specified below.\nAn output line should not contain extra characters such as spaces.\n</p>\n\n<p>\nIf one can travel from the starting city to the goal city,\nthe time needed for the best route (a route with the shortest time)\nshould be printed.\nThe answer should not have an error greater than 0.001.\nYou may output any number of digits after the decimal point,\nprovided that the above accuracy condition is satisfied.\n</p>\n\n<p>\nIf it is impossible to reach the goal city,\nthe string \"<tt>unreachable</tt>\" should be printed.\nNote that all the letters of \"<tt>unreachable</tt>\" are in lowercase.\n\n</p>\n\n\n<h3>Sample Input</h3>\n\n\n<pre>\n2 0\n1 2\n5 4\n1 5\n1 2 1 1\n2 3 2 2\n3 4 2 2\n4 5 1 1\n6 6\n1 6\n1 2 2 1\n2 3 2 1\n3 6 2 1\n1 4 2 30\n4 5 3 30\n5 6 2 30\n6 7\n1 6\n1 2 1 30\n2 3 1 30\n3 1 1 30\n3 4 100 30\n4 5 1 30\n5 6 1 30\n6 4 1 30\n0 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>\nunreachable\n4.00000\n5.50000\n11.25664\n</pre>\n\n\n", "p00751": "\n\n\n<h1><font color=\"#000000\">Problem F:</font> Old Memories</h1>\n<!-- end en only -->\n\n\n<!-- begin en only -->\n<p>\nIn 4272 A.D., Master of Programming Literature, Dr. Isaac Cornell Panther-Carol,\nwho has miraculously survived through the three World Computer Virus Wars and reached 90 years old this year,\nwon a Nobel Prize for Literature.\nMedia reported every detail of his life.\nHowever, there was one thing they could not report &mdash; that is, an essay written by him when he was an elementary school boy.\nAlthough he had a copy and was happy to let them see it, \nthe biggest problem was that his copy of the essay was infected by a computer virus several times during the World Computer Virus War III\nand therefore the computer virus could have altered the text.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nFurther investigation showed that his copy was altered indeed. Why could we know that?\nMore than 80 years ago his classmates transferred the original essay to their brain before infection.\nWith the advent of Solid State Brain, one can now retain a text perfectly over centuries once it is transferred to his or her brain.\nNo one could remember the entire text due to the limited capacity,\nbut we managed to retrieve a part of the text from the brain of one of his classmates; sadly, it did not match perfectly to the copy at hand.\nIt would not have happened without virus infection.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nAt the moment, what we know about the computer virus is that each time the virus infects an essay it does one of the following:\n</p>\n<ol>\n <li>the virus inserts one random character to a random position in the text. (e.g., \"ABCD\" &rarr; \"ABCZD\")</li>\n <li>the virus picks up one character in the text randomly, and then changes it into another character. (e.g., \"ABCD\" &rarr; \"ABXD\")</li>\n <li>the virus picks up one character in the text randomly, and then removes it from the text. (e.g., \"ABCD\" &rarr; \"ACD\")</li>\n</ol>\n<p>\nYou also know the maximum number of times the computer virus infected the copy, because you could deduce it from the amount of the intrusion log.\nFortunately, most of his classmates seemed to remember at least one part of the essay (we call it a <i>piece</i> hereafter).\nConsidering all evidences together, the original essay might be reconstructed.\nYou, as a journalist and computer scientist, would like to reconstruct the original essay by writing a computer program to calculate the possible original text(s) that fits to the given pieces and the altered copy at hand.\n\n</p>\n<!-- end en only -->\n\n\n\n<h3>Input</h3>\n\n\n<!-- begin en only -->\n<p>\nThe input consists of multiple datasets. The number of datasets is no more than 100.\nEach dataset is formatted as follows:\n</p>\n<blockquote>\n<i>d n</i><br>\n<i>the altered text</i><br>\n<i>piece<sub>1</sub></i><br>\n<i>piece<sub>2</sub></i><br>\n<i>...</i><br>\n<i>piece<sub>n</sub></i><br>\n</blockquote>\n<p>\nThe first line of a dataset contains two positive integers <i>d</i> (<i>d</i> &le; 2) and <i>n</i> (<i>n</i> &le; 30),\nwhere <i>d</i> is the maximum number of times the virus infected the copy and <i>n</i> is the number of <i>pieces</i>.\n</p><p>\nThe second line is the text of the altered copy at hand. We call it <i>the altered text</i> hereafter.\nThe length of the altered text is less than or equal to 40 characters.\n</p><p>\nThe following <i>n</i> lines are <i>pieces</i>, each of which is a part of the original essay remembered by one of his classmates.\nEach <i>piece</i> has at least 13 characters but no more than 20 characters. All pieces are of the same length.\nCharacters in the altered text and <i>pieces</i> are uppercase letters (`A' to `Z') and a period (`.').\nSince the language he used does not leave a space between words, no spaces appear in the text.\n</p><p>\nA line containing two zeros terminates the input.\n</p>\n<!-- end en only -->\n<!-- begin en only -->\n<p>\nHis classmates were so many that you can assume that any character that appears in the original essay is covered by at least one <i>piece</i>.\nA <i>piece</i> might cover the original essay more than once; the original essay may contain repetitions.\nPlease note that some pieces may not appear in the original essay because some of his classmates might have mistaken to provide irrelevant pieces.\n\n</p>\n<!-- end en only -->\n\n\n\n<h3>Output</h3>\n\n<!-- begin en only -->\n<p>\nBelow we explain what you should output for each dataset.\nSuppose if there are <i>c</i> possibilities for the original essay that fit to the given pieces and the given altered text.\nFirst, print a line containing <i>c</i>.\nIf <i>c</i> is less than or equal to 5, then print in lexicographical order <i>c</i> lines, each of which contains an individual possibility.\nNote that, in lexicographical order, '.' comes before any other characters.\nYou can assume that <i>c</i> is always non-zero.\nThe output should not include any characters other than those mentioned above.\n</p>\n<!-- end en only -->\n\n\n\n<h3>Sample Input</h3>\n\n<pre>\n1 4\nAABBCCDDEEFFGGHHIJJKKLLMMNNOOPP\nAABBCCDDEEFFGG\nCCDDEEFFGGHHII\nFFGGHHIIJJKKLL\nJJKKLLMMNNOOPP\n2 3\nABRACADABRA.ABBRACADABRA.\nABRACADABRA.A\n.ABRACADABRA.\nBRA.ABRACADAB\n2 2\nAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAA\nAAAAAAAAAAAAA\n2 3\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXAXXXXXX\nXXXXXXBXXXXXX\nXXXXXXXXXXXXX\n0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n1\nAABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP\n5\n.ABRACADABRA.ABRACADABRA.\nABRACADABRA.A.ABRACADABRA.\nABRACADABRA.AABRACADABRA.A\nABRACADABRA.ABRACADABRA.\nABRACADABRA.ABRACADABRA.A\n5\nAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAA\n257\n</pre>\n\n\n\n\n", "p00754": "\n<h3><U>The Balance of the World</U></h3>\n<!-- end en only -->\n\n\n<div>   <!-- please enclose each h3 level section with div -->\n<!-- begin en only -->\n<p>\nThe world should be finely balanced.  Positive vs. negative,\nlight vs. shadow, and left vs. right brackets.\nYour mission is to write a program that judges whether a string is balanced\nwith respect to brackets so that we can observe the balance of the\nworld.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nA string that will be given to the program may have two kinds of brackets,\nround (&ldquo;( )&rdquo;) and square (&ldquo;[ ]&rdquo;).\nA string is balanced if and only if the following conditions hold.\n<ul>\n  <li>For every left round bracket (&ldquo;(&rdquo;), there is a corresponding\n    right round bracket (&ldquo;)&rdquo;) in the following part of the string.</li>\n  <li>For every left square bracket (&ldquo;[&rdquo;), there is a corresponding\n    right square bracket (&ldquo;]&rdquo;) in the following part of the string.</li>\n  <li>For every right bracket, there is a left bracket corresponding to it.</li>\n  <li>Correspondences of brackets have to be one to one, that is, a\n    single bracket never corresponds to two or more brackets.</li>\n  <li>For every pair of corresponding left and right brackets,\n    the substring between them is balanced.</li>\n</ul>\n</p>\n<!-- end en only -->\n</div>\n\n<h3>Input</h3>\n\n<div>\n<!-- begin en only -->\n<p>\nThe input consists of one or more lines, each of which being a dataset.\nA dataset is a string that consists of English alphabets,\nspace characters, and two kinds of brackets, round (&ldquo;( )&rdquo;) and square (&ldquo;[ ]&rdquo;),\nterminated by a period.  You can assume that every line has 100\ncharacters or less.\nThe line formed by a single period indicates the end of the input,\nwhich is not a dataset.\n</p>\n<!-- end en only -->\n</div>\n\n<h3>Output</h3>\n<div>\n<!-- begin en only -->\n<p>\nFor each dataset, output &ldquo;yes&rdquo; if the\nstring is balanced, or &ldquo;no&rdquo; otherwise, in a line.\nThere may not be any extra characters in the output.\n</p>\n<!-- end en only -->\n</div>\n\n<h3>Sample Input</h3>\n<div>\n<pre>\nSo when I die (the [first] I will see in (heaven) is a score list).\n[ first in ] ( first out ).\nHalf Moon tonight (At least it is better than no Moon at all].\nA rope may form )( a trail in a maze.\nHelp( I[m being held prisoner in a fortune cookie factory)].\n([ (([( [ ] ) ( ) (( ))] )) ]).\n .\n.\n</pre>\n</div>\n\n<h3>Output for the Sample Input</h3>\n<div>\n<pre>\nyes\nyes\nno\nno\nno\nyes\nyes\n</pre>\n</div>", "p00753": "\n<h3><U>Chebyshev's Theorem</U></h3>\n<!-- end en only -->\n\n\n<div>   <!-- please enclose each h3 level section with div -->\n<!-- begin en only -->\n<p>\nIf <i>n</i> is a positive integer,\nthere exists at least one prime number greater than <i>n</i> and less than or equal to 2<i>n</i>.\nThis fact is known as Chebyshev's theorem or the Bertrand-Chebyshev theorem,\nwhich had been conjectured by Joseph Louis Fran&ccedil;ois Bertrand (1822&ndash;1900)\nand was proven by Pafnuty Lvovich Chebyshev (&#x041f;&#x0430;&#x0444;&#x043d;&#x0443;&#x0442&#x0438;&#x0439; &#x041b;&#x044c;&#x0432;&#x043e;&#x0432;&#x0438;&#x0447; &#x0427;&#x0435;&#x0431;&#x044b;&#x0448;&#x0451;&#x0432;, 1821&ndash;1894) in 1850.\nSrinivasa Aiyangar Ramanujan (1887&ndash;1920) gave an elementary proof in his paper published in 1919.\nPaul Erd&#337;s (1913&ndash;1996) discovered another elementary proof in 1932.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nFor example, there exist 4 prime numbers greater than 10 and less than or equal to 20, i.e. 11, 13, 17 and 19.\nThere exist 3 prime numbers greater than 14 and less than or equal to 28, i.e. 17, 19 and 23.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nYour mission is to write a program that counts the prime numbers greater than <i>n</i> and less than or equal to 2<i>n</i> for each given positive integer <i>n</i>.\nUsing such a program, you can verify Chebyshev's theorem for individual positive integers.\n</p>\n<!-- end en only -->\n\n</div>\n\n<h3>Input</h3>\n\n<div>\n<!-- begin en only -->\n<p>\nThe input is a sequence of datasets.\nA dataset is a line containing a single positive integer <i>n</i>.\nYou may assume <i>n</i>&nbsp;&le;&nbsp;123456.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nThe end of the input is indicated by a line containing a single zero.\nIt is not a dataset.\n</p>\n<!-- end en only -->\n\n</div>\n\n<h3>Output</h3>\n<div>\n<!-- begin en only -->\n<p>\nThe output should be composed of as many lines as the input datasets.\nEach line should contain a single integer and should never contain extra characters.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nThe output integer corresponding to a dataset consisting of an integer <I>n</I> should be the number of the prime numbers <i>p</i> satisfying <i>n</i> &lt; <i>p</i> &le; 2<i>n</i>.\n</p>\n<!-- end en only -->\n</div>\n\n<h3>Sample Input</h3>\n<div>\n<pre>\n1\n10\n13\n100\n1000\n10000\n100000\n0\n</pre>\n</div>\n\n<h3>Output for the Sample Input</h3>\n<div>\n<pre>\n1\n4\n3\n21\n135\n1033\n8392\n</pre>\n</div>", "p00760": "\n\n<h1>Millennium</h1>\n\n<p>\nA wise king declared a new calendar. \"Tomorrow shall be the first day of the calendar, that is, the day 1 of the month 1 of the year 1.  Each year consists of 10 months, from month 1 through month 10, and starts from a <i>big month</i>.  A common year shall start with a big month, followed by <i>small months</i> and big months one after another.  Therefore the first month is a big month, the second month is a small month, the third a big month, ..., and the 10th and last month a small one.  A big month consists of 20 days and a small month consists of 19 days.  However years which are multiples of three, that are year 3, year 6, year 9, and so on, shall consist of 10 big months and no small month.\"</p>\n\n<p>Many years have passed since the calendar started to be used.  For celebration of the millennium day (the year 1000, month 1, day 1), a royal lottery is going to be organized to send gifts to those who have lived as many days as the number chosen by the lottery.  Write a program that helps people calculate the number of days since their birthdate to the millennium day.\n</p>\n\n<!-- end en only -->\n\n\n\n<h3>Input</h3>\n\n<!-- begin en only -->\n<p>\nThe input is formatted as follows.\n</p>\n<!-- end en only -->\n\n\n<blockquote>\n    <i>n</i><br>\n    <i>Y<sub>1</sub> M<sub>1</sub> D<sub>1</sub></i><br>\n    <i>Y<sub>2</sub> M<sub>2</sub> D<sub>2</sub></i><br>\n    ...<br>\n    <i>Y<sub>n</sub> M<sub>n</sub> D<sub>n</sub></i>\n</blockquote>\n\n\n<p>\nHere, the first line gives the number of datasets as a positive integer <i>n</i>, which is less than or equal to 100.  It is followed by <i>n</i> datasets.  Each dataset is formatted in a line and gives three positive integers, <i>Y<sub>i</sub></i> (&lt; 1000), <i>M<sub>i</sub></i> (&le; 10), and <i>D<sub>i</sub></i> (&le; 20), that correspond to the year, month and day, respectively, of a person's birthdate in the king's calendar.  These three numbers are separated by a space.\n</p>\n\n<h3>Output</h3>\n\n<!-- begin en only -->\n<p>\nFor the birthdate specified in each dataset, print in a line the number of days from the birthdate, inclusive, to the millennium day, exclusive.  Output lines should not contain any character other than this number.\n</p>\n<!-- end en only -->\n\n<h3>Sample Input</h3>\n\n<pre>\n8\n1 1 1\n344 3 1\n696 5 1\n182 9 5\n998 8 7\n344 2 19\n696 4 19\n999 10 20\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n196470\n128976\n59710\n160715\n252\n128977\n59712\n1\n</pre>", "p00761": "\n<h1>Recurring Decimals</h1>\n<!-- end en only -->\n\n\n\n<!-- begin en only -->\n<p>\nA decimal representation of an integer can be transformed to another integer by rearranging the order of digits.\nLet us make a sequence using this fact.\n</p>\n<p>\nA non-negative integer <i>a</i><sub>0</sub> and the number of digits <i>L</i> are given first.\nApplying the following rules, we obtain <i>a</i><sub><i>i</i>+1</sub> from <i>a</i><sub><i>i</i></sub>.\n\n<ol>\n  <li> Express the integer <i>a</i><sub><i>i</i></sub> in decimal notation with <i>L</i> digits. Leading zeros are added if necessary. For example, the decimal notation with six digits of the number 2012 is 002012.\n  </li>\n  <li> Rearranging the digits, find the largest possible integer and the smallest possible integer;\n    In the example above, the largest possible integer is 221000 and the smallest is 000122 = 122.\n  </li>\n  <li> A new integer <i>a</i><sub><i>i</i>+1</sub> is obtained by subtracting the smallest possible integer from the largest.\n    In the example above, we obtain 220878 subtracting 122 from 221000.\n  </li>\n</ol>\n</p>\n\n<p>\nWhen you repeat this calculation, you will get a sequence of integers \n<i>a</i><sub>0</sub> , \n<i>a</i><sub>1</sub> , \n<i>a</i><sub>2</sub> , ... .\n</p>\n\n<p>\nFor example, starting with the integer 83268 and with the number of digits 6,\nyou will get the following sequence of integers\n<i>a</i><sub>0</sub> , \n<i>a</i><sub>1</sub> , \n<i>a</i><sub>2</sub> , ... .\n</p>\n<!-- end en only -->\n\n<blockquote>\n<i>a</i><sub>0</sub> = 083268<br>\n<i>a</i><sub>1</sub> = 886320 &minus; 023688 = 862632<br>\n<i>a</i><sub>2</sub> = 866322 &minus; 223668 = 642654<br>\n<i>a</i><sub>3</sub> = 665442 &minus; 244566 = 420876<br>\n<i>a</i><sub>4</sub> = 876420 &minus; 024678 = 851742<br>\n<i>a</i><sub>5</sub> = 875421 &minus; 124578 = 750843<br>\n<i>a</i><sub>6</sub> = 875430 &minus; 034578 = 840852<br>\n<i>a</i><sub>7</sub> = 885420 &minus; 024588 = 860832<br>\n<i>a</i><sub>8</sub> = 886320 &minus; 023688 = 862632<br>\n&nbsp;&nbsp;&nbsp;&hellip;<br>\n</blockquote>\n\n<!-- begin en only -->\n<p>\nBecause the number of digits to express integers is fixed, \nyou will encounter occurrences of the same integer in the sequence\n<i>a</i><sub>0</sub> , \n<i>a</i><sub>1</sub> , \n<i>a</i><sub>2</sub> , ...\neventually.\n\nTherefore you can always find a pair of <i>i</i>&nbsp; and <i>j</i>&nbsp; \nthat satisfies the condition <i>a</i><sub><i>i</i></sub> = <i>a</i><sub><i>j</i></sub> &nbsp;\n(<i>i</i>&nbsp; &gt; <i>j</i>&nbsp; ).\nIn the example above, the pair (<i>i</i>&nbsp;= 8, <i>j</i>&nbsp;= 1) satisfies the condition because <i>a</i><sub>8</sub> = <i>a</i><sub>1</sub> = 862632.\n</p>\n\n<p>\nWrite a program that,\ngiven an initial integer <i>a</i><sub>0</sub> and a number of digits <i>L</i>,\nfinds the smallest <i>i</i> that satisfies the condition <i>a</i><sub><i>i</i></sub> = <i>a</i><sub><i>j</i></sub>  &nbsp; (<i>i</i>&nbsp; &gt; <i>j</i>&nbsp; ).\n\n</p>\n<!-- end en only -->\n\n\n\n<h3>Input</h3>\n\n\n<!-- begin en only -->\n<p>\nThe input consists of multiple datasets.\nA dataset is a line containing two integers <i>a</i><sub>0</sub>&nbsp; and <i>L</i>&nbsp;\nseparated by a space.\n<i>a</i><sub>0</sub>&nbsp; and <i>L</i>&nbsp; \nrepresent the initial integer of the sequence and the number of digits, respectively,\nwhere  \n1 &le; <i>L</i>&nbsp; &le; 6\nand \n0 &le; <i>a</i><sub>0</sub>&nbsp; &lt; 10<sup><i>L</i></sup> .\n</p>\n<p>\nThe end of the input is indicated by a line containing two zeros;\nit is not a dataset.\n</p>\n<!-- end en only -->\n\n\n\n<h3>Output</h3>\n\n<!-- begin en only -->\n<p>\nFor each dataset, \nfind the smallest number <i>i</i>&nbsp; \nthat satisfies the condition\n<i>a</i><sub><i>i</i></sub> = <i>a</i><sub><i>j</i></sub>  &nbsp; (<i>i</i>&nbsp; &gt; <i>j</i>&nbsp; )\nand print a line containing three integers,\n<i>j</i>&nbsp;, \n<i>a</i><sub><i>i</i></sub> &nbsp; and\n<i>i</i>&nbsp; &minus; <i>j</i>.\nNumbers should be separated by a space.\nLeading zeros should be suppressed.\nOutput lines should not contain extra characters.\n</p>\n<p>\nYou can assume that the above <i>i</i>&nbsp; is not\ngreater than 20.\n</p>\n<!-- end en only -->\n\n<h3>Sample Input</h3>\n\n<pre>\n2012 4\n83268 6\n1112 4\n0 1\n99 2\n0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n3 6174 1\n1 862632 7\n5 6174 1\n0 0 1\n1 0 1\n</pre>\n", "p00765": "\n<h1>Generic Poker</h1>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nYou have a deck of <i>N</i> &times; <i>M</i> cards. Each card in the deck has a rank. The range of ranks is 1 through <i>M</i>, and the deck includes <i>N</i> cards of each rank.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nWe denote a card with rank <i>m</i> by <i>m</i> here.\n</p>\n<!-- end en only -->\n\n\n\n<!-- begin en only -->\n<p>\nYou can draw a hand of <i>L</i> cards at random from the deck.\nIf the hand matches the given pattern,\nsome bonus will be rewarded.\nA pattern is described as follows.\n</p>\n<!-- end en only -->\n<pre>\nhand_pattern = card_pattern<sub>1</sub> ' ' card_pattern<sub>2</sub> ' ' ... ' ' card_pattern<sub><i>L</i></sub>\ncard_pattern = '*' | var_plus\nvar_plus = variable | var_plus '+'\nvariable = 'a' | 'b' | 'c'\n</pre>\n<p>\n<dl>\n<dt> hand_pattern\n<dd> \n<!-- begin en only -->\nA hand matches the hand_pattern if each card_pattern in the hand_pattern matches with a distinct card in the hand.\n<!-- end en only -->\n<dt> card_pattern\n<dd> \n<!-- begin en only -->\nIf the card_pattern is an asterisk ('*'), it matches any card. \nCharacters 'a', 'b', and 'c' denote variables and all the occurrences of the same variable match cards of the same rank.\nA card_pattern with a variable followed by plus ('+')\ncharacters matches a card whose rank is the sum of the rank corresponding to the variable\nand the number of plus characters.\n\nYou can assume that, when a hand_pattern includes a card_pattern with\na variable followed by some number of plus characters, it also\nincludes card_patterns with that variable and all smaller numbers (including zero) of plus characters.\nFor example, if 'a+++' appears in a hand_pattern, card_patterns 'a',\n'a+', and 'a++' also appear in the hand_pattern.\n<!-- end en only -->\n</dl>\n</p>\n\n<!-- begin en only -->\n<p>\nThere is no restriction on which ranks different variables mean.\nFor example, 'a' and 'b' may or may not match cards of the same rank.\n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nWe show some example hand_patterns. The pattern\n<pre>\na * b a b \n</pre>\nmatches the hand:\n<pre>\n3 3 10 10 9\n</pre>\nwith 'a's and 'b's meaning 3 and 10 (or 10 and 3),\nrespectively. This pattern also matches the following hand.\n<pre>\n3 3 3 3 9\n</pre>\nIn this case, both 'a's and 'b's mean 3.  The pattern\n<pre>\na a+ a++ a+++ a++++\n</pre>\nmatches the following hand.\n<pre>\n4 5 6 7 8\n</pre>\nIn this case, 'a' should mean 4. \n</p>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nYour mission is to write a program that computes the probability that\na hand randomly drawn from the deck matches the given hand_pattern.\n</p>\n<!-- end en only -->\n\n\n\n<h3>Input</h3>\n\n\n<!-- begin en only -->\n<p>\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n</p>\n<!-- end en only -->\n\n<blockquote>\n<i>N</i> <i>M</i> <i>L</i><br>\n<i>card_pattern<sub>1</sub></i> <i>card_pattern<sub>2</sub></i> ... <i>card_pattern<sub>L</sub></i>\n</blockquote>\n\n<!-- begin en only -->\n<p>\nThe first line consists of three positive integers <i>N</i>, <i>M</i>, and <i>L</i>.\n<i>N</i> indicates the number of cards in each rank, <i>M</i> indicates the number of ranks, and <i>L</i> indicates the number of cards in a hand. <i>N</i>, <i>M</i>, and <i>L</i> are constrained as follows.\n</p>\n<!-- end en only -->\n\n<blockquote>\n1 &le; <i>N</i> &le; 7<br>\n1 &le; <i>M</i> &le; 60<br>\n1 &le; <i>L</i> &le; 7<br>\n<i>L</i> &le; <i>N</i> &times; <i>M</i><br>\n</blockquote>\n\n<!-- begin en only -->\n<p>\nThe second line describes a hand_pattern.\n</p>\n<!-- end en only -->\n\n\n<!-- begin en only -->\n<p>\nThe end of the input is indicated by a line containing three zeros \nseparated by a single space.\n</p>\n<!-- end en only -->\n\n\n\n\n\n<h3>Output</h3>\n\n<!-- begin en only -->\n<p>\nFor each dataset, output a line containing a decimal fraction which means the probability of a hand matching the hand_pattern.\n</p>\n<p>\nThe output should not contain an error greater than 10<sup>&minus;8</sup>.\n</p>\n<p>\nNo other characters should be contained in the output.\n</p>\n<!-- end en only -->\n\n<h3>Sample Input</h3>\n\n<pre>\n1 1 1\na\n3 3 4\na+ * a *\n2 2 3\na a b\n2 2 3\n* * *\n2 2 3\n* b b\n2 2 2\na a\n2 3 3\na a+ a++\n2 6 6\na a+ a++ b b+ b++\n4 13 5\na a * * *\n4 13 5\na a b b *\n4 13 5\na a a * *\n4 13 5\na a+ a++ a+++ a++++\n4 13 5\n* * * * *\n4 13 5\na a a b b\n4 13 5\na a a a *\n7 60 7\na b a b c c *\n7 60 7\n* * * * * * *\n7 60 7\na a+ a++ a+++ a++++ a+++++ a++++++\n1 14 4\nb a+ a a\n0 0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n1.0000000000\n0.8809523810\n1.0000000000\n1.0000000000\n1.0000000000\n0.3333333333\n0.4000000000\n0.1212121212\n0.4929171669\n0.0492196879\n0.0228091236\n0.0035460338\n1.0000000000\n0.0014405762\n0.0002400960\n0.0002967709\n1.0000000000\n0.0000001022\n0.0000000000\n</pre>\n", "p00768": "\n<h3>ICPC Ranking</h3>\n\n<p>\nYour mission in this problem is to write a program\nwhich, given the submission log of an ICPC (International Collegiate Programming Contest),\ndetermines team rankings.\n</p>\n\n<p>\nThe log is a sequence of records of program submission\nin the order of submission.\nA record has four fields: elapsed time, team number,\nproblem number, and judgment.\nThe elapsed time is the time elapsed from the beginning of the contest\nto the submission.\nThe judgment field tells whether the submitted program was\ncorrect or incorrect, and when incorrect,\nwhat kind of an error was found.\n</p>\n\n<p>\nThe team ranking is determined according to the following rules.\nNote that the rule set shown here is one used in the real ICPC World Finals and Regionals,\nwith some detail rules omitted for simplification.\n</p>\n\n<ol>\n<li>\nTeams that solved more problems are ranked higher.\n</li>\n\n<li>\nAmong teams that solve the same number of problems, \nones with smaller total consumed time are ranked higher.\n\n</li>\n\n<li>\nIf two or more teams solved the same number of problems, and their\ntotal consumed times are the same, they are ranked the same.\n</li>\n\n</ol>\n\n<p>\nThe total consumed time is the sum of the consumed time for each problem solved.\nThe consumed time for a solved problem is the elapsed time \nof the accepted submission plus 20 penalty minutes for every previously rejected submission for that problem.\n</p>\n\n<p>\nIf a team did not solve a problem, the consumed time for the problem is zero, and thus even if there are several incorrect submissions, no penalty is given.\n</p>\n\n<p>\nYou can assume that a team never submits a program for a problem\nafter the correct submission for the same problem.\n</p>\n\n<h3>Input</h3>\n\n\n<p>\nThe input is a sequence of datasets each in the following format.\nThe last dataset is followed by a line with four zeros.\n</p>\n\n<blockquote>\n<i>M</i> <i>T</i> <i>P</i> <i>R</i> <br>\n<i>m</i><sub>1</sub> <i>t</i><sub>1</sub> <i>p</i><sub>1</sub> <i>j</i><sub>1</sub> <br>\n<i>m</i><sub>2</sub> <i>t</i><sub>2</sub> <i>p</i><sub>2</sub> <i>j</i><sub>2</sub> <br>\n..... <br>\n<i>m<sub>R</sub></i> <i>t<sub>R</sub></i> <i>p<sub>R</sub></i> <i>j<sub>R</sub></i> <br>\n</blockquote>\n\n<p>\nThe first line of a dataset contains four integers\n<i>M</i>, <i>T</i>, <i>P</i>, and <i>R</i>.\n<i>M</i> is the duration of the contest.\n<i>T</i> is the number of teams.\n<i>P</i> is the number of problems.\n<i>R</i> is the number of submission records.\nThe relations \n120&nbsp;&le;&nbsp;<i>M</i>&nbsp;&le;&nbsp;300,\n1&nbsp;&le;&nbsp;<i>T</i>&nbsp;&le;&nbsp;50,\n1&nbsp;&le;&nbsp;<i>P</i>&nbsp;&le;&nbsp;10,\nand 0&nbsp;&le;&nbsp;<i>R</i>&nbsp;&le;&nbsp;2000\nhold for these values.\nEach team is assigned a team number between 1 and <i>T</i>, inclusive.\nEach problem is assigned a problem number between 1 and <i>P</i>, inclusive.\n</p>\n\n<p>\nEach of the following <i>R</i> lines contains a submission record\nwith four integers\n<i>m<sub>k</sub></i>, <i>t<sub>k</sub></i>,\n<i>p<sub>k</sub></i>, and <i>j<sub>k</sub></i>\n(1&nbsp;&le;&nbsp;<i>k</i>&nbsp;&le;&nbsp;<i>R</i>).\n<i>m<sub>k</sub></i> is the elapsed time.\n<i>t<sub>k</sub></i> is the team number.\n<i>p<sub>k</sub></i> is the problem number.\n<i>j<sub>k</sub></i> is the judgment\n(0 means correct, and other values mean incorrect).\nThe relations\n0&nbsp;&le;&nbsp;<i>m<sub>k</sub></i>&nbsp;&le;&nbsp;<i>M</i>&minus;1,\n1&nbsp;&le;&nbsp;<i>t<sub>k</sub></i>&nbsp;&le;&nbsp;<i>T</i>,\n1&nbsp;&le;&nbsp;<i>p<sub>k</sub></i>&nbsp;&le;&nbsp;<i>P</i>,\nand 0&nbsp;&le;&nbsp;<i>j<sub>k</sub></i>&nbsp;&le;&nbsp;10\nhold for these values.\n</p>\n\n<p>\nThe elapsed time fields are rounded off to the nearest minute.\n</p>\n\n<p>\nSubmission records are given in the order of submission.\nTherefore, if <i>i</i>&nbsp;&lt;&nbsp;<i>j</i>,\nthe <i>i</i>-th submission is done before the <i>j</i>-th submission\n(<i>m<sub>i</sub></i>&nbsp;&le;&nbsp;<i>m<sub>j</sub></i>).\nIn some cases, you can determine the ranking of two teams\nwith a difference less than a minute, by using this fact.\nHowever, such a fact is never used in the team ranking.\nTeams are ranked only using time information in minutes.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nFor each dataset, your program should output team numbers (from 1 to <i>T</i>),\nhigher ranked teams first.\nThe separator between two team numbers should be a comma.\nWhen two teams are ranked the same, the separator between them\nshould be an equal sign.\nTeams ranked the same should be listed\nin decreasing order of their team numbers.\n</p>\n\n\n<h3>Sample Input</h3>\n<pre>\n300 10 8 5\n50 5 2 1\n70 5 2 0\n75 1 1 0\n100 3 1 0\n150 3 2 0\n240 5 5 7\n50 1 1 0\n60 2 2 0\n70 2 3 0\n90 1 3 0\n120 3 5 0\n140 4 1 0\n150 2 4 1\n180 3 5 4\n15 2 2 1\n20 2 2 1\n25 2 2 0\n60 1 1 0\n120 5 5 4\n15 5 4 1\n20 5 4 0\n40 1 1 0\n40 2 2 0\n120 2 3 4\n30 1 1 0\n40 2 1 0\n50 2 2 0\n60 1 2 0\n120 3 3 2\n0 1 1 0\n1 2 2 0\n300 5 8 0\n0 0 0 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n3,1,5,10=9=8=7=6=4=2\n2,1,3,4,5\n1,2,3\n5=2=1,4=3\n2=1\n1,2,3\n5=4=3=2=1\n</pre>\n", "p00769": "\n\n\n<h3>Hierarchical Democracy</h3>\n\n\n<p>\nThe presidential election in Republic of Democratia is carried out through multiple stages as follows.\n</p>\n\n<ol>\n<li>There are exactly two presidential candidates.</li>\n<li>At the first stage, eligible voters go to the polls of his/her electoral district.\nThe winner of the district is the candidate who takes a majority of the votes.\nVoters cast their ballots only at this first stage.</li>\n<li>A district of the <i>k</i>-th stage (<i>k</i> &gt; 1) consists of multiple districts of the (<i>k</i> &minus; 1)-th stage. In contrast, a district of the (<i>k</i> &minus; 1)-th stage is a sub-district of one and only one district of the <i>k</i>-th stage. The winner of a district of the <i>k</i>-th stage is the candidate who wins in a majority of its sub-districts of the (<i>k</i> &minus; 1)-th stage.</li>\n<li>The final stage has just one nation-wide district. The winner of the final stage is chosen as the president.</li>\n</ol>\n\n\n\n<p>\nYou can assume the following about the presidential election of this country.\n</p>\n<ul>\n<li>Every eligible voter casts a vote.</li>\n<li>The number of the eligible voters of each electoral district of the first stage is odd.</li>\n<li>The number of the sub-districts of the (<i>k</i> &minus; 1)-th stage that constitute a district of the <i>k</i>-th stage (<i>k</i> &gt; 1) is also odd.</li>\n</ul>\n<p>\nThis means that each district of every stage has its winner (there is no tie). \n</p>\n\n\n<p>\nYour mission is to write a program that finds a way to win the presidential election with the minimum number of votes.\nSuppose, for instance, that the district of the final stage has three sub-districts of the first stage and that the numbers of the eligible voters of the sub-districts are 123, 4567, and 89, respectively.\nThe minimum number of votes required to be the winner is 107, that is, 62 from the first district and 45 from the third.\nIn this case, even if the other candidate were given all the 4567 votes in the second district, s/he would inevitably be the loser. \nAlthough you might consider this election system unfair, you should accept it as a reality.\n</p>\n\n\n<h3>Input</h3>\n\n\n<p>The entire input looks like:</p>\n<blockquote>\n\n<i>the number of datasets (=n)</i> <br>\n<i>1st dataset</i>                 <br>\n<i>2nd dataset</i>                 <br>\n&hellip;                                <br>\n<i>n-th dataset</i>                <br>\n</blockquote>\n\n\n\n<p>\nThe number of datasets, <i>n</i>, is no more than 100.\n</p>\n\n\n\n<p>\nThe number of the eligible voters of each district and the part-whole relations among districts are denoted as follows.\n</p>\n<ul>\n  <li>An electoral district of the first stage is denoted as [<i>c</i>], where <i>c</i> is the number of the eligible voters of the district.</li>\n  <li>A district of the <i>k</i>-th stage (<i>k</i> &gt; 1) is denoted as [<i>d</i><sub>1</sub><i>d</i><sub>2</sub>&hellip;<i>d<sub>m</sub></i>], where <i>d</i><sub>1</sub>, <i>d</i><sub>2</sub>, &hellip;, <i>d<sub>m</sub></i> denote its sub-districts of the (<i>k</i> &minus; 1)-th stage in this notation.</li>\n</ul>\n\n\n\n<p>\nFor instance, an electoral district of the first stage that has 123 eligible voters is denoted as [123].\nA district of the second stage consisting of three sub-districts of the first stage that have 123, 4567, and 89 eligible voters, respectively, is denoted as [[123][4567][89]].\n</p>\n\n\n\n<p>\nEach dataset is a line that contains the character string denoting the district of the final stage in the aforementioned notation.\nYou can assume the following.\n</p>\n<ul>\n  <li>The character string in each dataset does not include any characters except digits ('0', '1', &hellip;, '9') and square brackets ('[', ']'), and its length is between 11 and 10000, inclusive.</li>\n  <li>The number of the eligible voters of each electoral district of the first stage is between 3 and 9999, inclusive.</li>\n</ul>\n\n\n\n<p>\nThe number of stages is a nation-wide constant.\nSo, for instance, [[[9][9][9]][9][9]] never appears in the input.\n[[[[9]]]] may not appear either since each district of the second or later stage must have multiple sub-districts of the previous stage.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nFor each dataset, print the minimum number of votes required to be the winner of the presidential election in a line.\nNo output line may include any characters except the digits with which the number is written.\n</p>\n\n\n<h3>Sample Input</h3>\n<pre>\n6\n[[123][4567][89]]\n[[5][3][7][3][9]]\n[[[99][59][63][85][51]][[1539][7995][467]][[51][57][79][99][3][91][59]]]\n[[[37][95][31][77][15]][[43][5][5][5][85]][[71][3][51][89][29]][[57][95][5][69][31]][[99][59][65][73][31]]]\n[[[[9][7][3]][[3][5][7]][[7][9][5]]][[[9][9][3]][[5][9][9]][[7][7][3]]][[[5][9][7]][[3][9][3]][[9][5][5]]]]\n[[8231][3721][203][3271][8843]]\n</pre>\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n107\n7\n175\n95\n21\n3599\n</pre>\n\n", "p00772": "\n\n\n\n<h3>Rotate and Rewrite</h3>\n\n\n<p>\nTwo sequences of integers\nA: <i>A</i><sub>1</sub> <i>A</i><sub>2</sub> ... <i>A</i><sub><i>n</i></sub> and\nB: <i>B</i><sub>1</sub> <i>B</i><sub>2</sub> ... <i>B</i><sub><i>m</i></sub> and\na set of <em>rewriting rules</em> of the form\n\"<i>x</i><sub>1</sub> <i>x</i><sub>2</sub> ... <i>x</i><sub><i>k</i></sub> &rarr; <i>y</i>\"\nare given.\nThe following transformations on each of the sequences are allowed\nan arbitrary number of times in an arbitrary order independently.\n</p>\n\n<ul>\n<li>\n<b>Rotate</b>:\n  Moving the first element of a sequence to the last.\n  That is, transforming a sequence <i>c</i><sub>1</sub> <i>c</i><sub>2</sub> ... <i>c</i><sub><i>p</i></sub>\n  to <i>c</i><sub>2</sub> ... <i>c</i><sub><i>p</i></sub> <i>c</i><sub>1</sub>.\n</li>\n<li>\n<b>Rewrite</b>:\n  With a rewriting rule\n  \"<i>x</i><sub>1</sub> <i>x</i><sub>2</sub> ... <i>x</i><sub><i>k</i></sub> &rarr; <i>y</i>\",\n  transforming a sequence\n  <i>c</i><sub>1</sub> <i>c</i><sub>2</sub> ... <i>c</i><sub><i>i</i></sub> <i>x</i><sub>1</sub> <i>x</i><sub>2</sub> ... <i>x</i><sub><i>k</i></sub> <i>d</i><sub>1</sub> <i>d</i><sub>2</sub> ... <i>d</i><sub><i>j</i></sub>\n  to\n<i>c</i><sub>1</sub> <i>c</i><sub>2</sub> ... <i>c</i><sub><i>i</i></sub> <i>y</i> <i>d</i><sub>1</sub> <i>d</i><sub>2</sub> ... <i>d</i><sub><i>j</i></sub>.\n</li>\n</ul>\n\n\n<p>\t\nYour task is to determine whether it is possible to transform the two sequences A and B into the same sequence.\nIf possible, compute the length of the longest of the sequences after such a transformation.\n</p>\n\n\n\n<h3>Input</h3>\n\n\n<p>The input consists of multiple datasets. Each dataset has the following form.</p>\n\n\n<blockquote>\n<i>n m r</i> <br>\n<i>A</i><sub>1</sub> <i>A</i><sub>2</sub> ... <i>A</i><sub><i>n</i></sub><br>\n<i>B</i><sub>1</sub> <i>B</i><sub>2</sub> ... <i>B</i><sub><i>m</i></sub><br>\n<i>R</i><sub>1</sub><br>\n...<br>\n<i>R</i><sub><i>r</i></sub><br>\n</blockquote>\n\n\n<p>\nThe first line of a dataset consists of three positive integers <i>n</i>, <i>m</i>, and <i>r,</i>\nwhere \n<i>n</i> (<i>n</i> &le; 25) is the length of the sequence A,\n<i>m</i> (<i>m</i> &le; 25) is the length of the sequence B, and\n<i>r</i> (<i>r</i> &le; 60) is the number of rewriting rules.\nThe second line contains <i>n</i> integers representing the <i>n</i> elements of A.\nThe third line contains <i>m</i> integers representing the <i>m</i> elements of B.\nEach of the last <i>r</i> lines describes a rewriting rule in the following form.\n</p>\n\n\n\n<blockquote>\n<i>k</i> <i>x</i><sub>1</sub> <i>x</i><sub>2</sub> ... <i>x</i><sub><i>k</i></sub> <i>y</i><br>\n</blockquote>\n\n\n<p>\nThe first <i>k</i> is an integer (2 &le; <i>k</i> &le; 10), which is the length of the left-hand side of the rule.\nIt is followed by <i>k</i> integers <i>x</i><sub>1</sub> <i>x</i><sub>2</sub> ... <i>x</i><sub><i>k</i></sub>,\nrepresenting the left-hand side of the rule.\nFinally comes an integer <i>y</i>, representing the right-hand side.\n</p>\n<p>\nAll of <i>A</i><sub>1</sub>, .., <i>A</i><sub><i>n</i></sub>, <i>B</i><sub>1</sub>, ..., <i>B</i><sub><i>m</i></sub>, <i>x</i><sub>1</sub>, ..., <i>x</i><sub><i>k</i></sub>, and <i>y</i>\nare in the range between 1 and 30, inclusive.\n</p>\n\n\n\n<p>A line \"0 0 0\" denotes the end of the input.</p>\n\n\n<h3>Output</h3>\n\n<p>\nFor each dataset, if it is possible to transform A and B\nto the same sequence, print the length of the longest of\nthe sequences after such a transformation.\nPrint <code>-1</code> if it is impossible.\n</p>\n\n\n<h3>Sample Input</h3>\n\n<pre>\n3 3 3\n1 2 3\n4 5 6\n2 1 2 5\n2 6 4 3\n2 5 3 1\n3 3 2\n1 1 1\n2 2 1\n2 1 1 2\n2 2 2 1\n7 1 2\n1 1 2 1 4 1 2\n4\n3 1 4 1 4\n3 2 4 2 4\n16 14 5\n2 1 2 2 1 3 2 1 3 2 2 1 1 3 1 2\n2 1 3 1 1 2 3 1 2 2 2 2 1 3\n2 3 1 3\n3 2 2 2 1\n3 2 2 1 2\n3 1 2 2 2\n4 2 1 2 2 2\n0 0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n2\n-1\n1\n9\n</pre>\n", "p00773": "\n<h3>Tax Rate Changed</h3>\n\n  <p>\n    VAT (value-added tax) is a tax imposed at a certain rate proportional to the sale price.\n  </p>\n\n  <p>\n    Our store uses the following rules to calculate the after-tax prices.\n    </p>\n\n<ul>\n      <li>\n\tWhen the VAT rate is <i>x</i>%,\n\tfor an item with the before-tax price of <i>p</i> yen,\n\tits after-tax price of the item is <i>p</i>&nbsp;(100+<i>x</i>)&nbsp;/&nbsp;100 yen, fractions rounded off.\n      </li>\n      <li>\n\tThe total after-tax price of multiple items paid at once is\n\tthe sum of after-tax prices of the items.\n      </li>\n    </ul>\n  \n\n  <p>\n    The VAT rate is changed quite often.\n    Our accountant has become aware that\n    \"different pairs of items that had the same total after-tax price\n    may have different total after-tax prices after VAT rate changes.\"\n    For example, when the VAT rate rises from 5% to 8%,\n    a pair of items that had the total after-tax prices of 105 yen before\n    can now have after-tax prices either of 107, 108, or 109 yen, as shown in the table below.\n  </p>\n\n<center>\n  <table border=\"1\"  style=\"border: 1px #aaa solid;\">\n\n    <tbody><tr><th style=\"border: 1px #aaa solid;\">Before-tax prices of two items</th><th style=\"border: 1px #aaa solid;\">After-tax price with 5% VAT</th><th style=\"border: 1px #aaa solid;\">After-tax price with 8% VAT</th></tr>\n\n    <tr><td  style=\"border: 1px #aaa solid;\" align=\"center\">20, 80</td><td  style=\"border: 1px #aaa solid;\"align=\"center\">21 + 84 = 105</td><td  style=\"border: 1px #aaa solid;\" align=\"center\">21 + 86 = 107</td></tr>\n    <tr><td  style=\"border: 1px #aaa solid;\" align=\"center\">2, 99</td><td  style=\"border: 1px #aaa solid;\" align=\"center\">2 + 103 = 105</td><td  style=\"border: 1px #aaa solid;\" align=\"center\">2 + 106 = 108</td></tr>\n    <tr><td  style=\"border: 1px #aaa solid;\" align=\"center\">13, 88</td><td  style=\"border: 1px #aaa solid;\" align=\"center\">13 + 92 = 105</td><td  style=\"border: 1px #aaa solid;\" align=\"center\">14 + 95 = 109</td></tr>\n  </tbody></table>\n</center>\n\n<br>\n\n  <p>\n    Our accountant is examining effects of VAT-rate changes on after-tax prices.\n    You are asked to write a program that calculates the possible maximum\n    total after-tax price of two items with the new VAT rate,\n    knowing their total after-tax price before the VAT rate change.\n  </p>\n\n\n<h3>Input</h3>\n\n\n  <p>\n    The input consists of multiple datasets.\n    Each dataset is in one line,\n    which consists of three integers <i>x</i>, <i>y</i>, and <i>s</i> separated by a space.\n    <i>x</i> is the VAT rate in percent <i>before</i> the VAT-rate change,\n    <i>y</i> is the VAT rate in percent <i>after</i> the VAT-rate change,\n    and <i>s</i> is the sum of after-tax prices of two items <i>before</i> the VAT-rate change.\n    For these integers, 0 &lt; <i>x</i> &lt; 100, 0 &lt; <i>y</i> &lt; 100,\n    10 &lt; <i>s</i> &lt; 1000, and <i>x</i> &#8800; <i>y</i> hold.\n    For before-tax prices of items, all possibilities of 1 yen through <i>s</i>-1 yen should be considered.\n  </p>\n  <p>\n    The end of the input is specified by three zeros separated by a space.\n  </p>\n\n\n\n<h3>Output</h3>\n\n\n  <p>\n    For each dataset,\n    output in a line the possible maximum total after-tax price when the VAT rate is changed to <i>y</i>%.\n  </p>\n\n\n\n<h3>Sample Input</h3>\n\n<pre>5 8 105\n8 5 105\n1 2 24\n99 98 24\n12 13 26\n1 22 23\n1 13 201\n13 16 112\n2 24 50\n1 82 61\n1 84 125\n1 99 999\n99 1 999\n98 99 999\n1 99 11\n99 1 12\n0 0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>109\n103\n24\n24\n26\n27\n225\n116\n62\n111\n230\n1972\n508\n1004\n20\n7\n</pre>\n\n\n\n<h3>Hints</h3>\n\n  <p>\n    In the following table,\n    an instance of a before-tax price pair that has the maximum after-tax price after the VAT-rate change\n    is given for each dataset of the sample input.\n  </p>\n<table border=\"1\" style=\"border: 1px #aaa solid;\">\n\n  <tbody><tr><th style=\"border: 1px #aaa solid;\">Dataset</th><th style=\"border: 1px #aaa solid;\">Before-tax prices</th><th style=\"border: 1px #aaa solid;\">After-tax price with <i>y</i>% VAT</th></tr>\n\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">5 8 105</td>  <td style=\"border: 1px #aaa solid;\"align=\"center\"> 13, 88</td><td style=\"border: 1px #aaa solid;\"align=\"center\"> 14 + 95 = 109</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">8 5 105</td>  <td style=\"border: 1px #aaa solid;\"align=\"center\"> 12, 87</td><td style=\"border: 1px #aaa solid;\"align=\"center\"> 12 + 91 = 103</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">1 2 24</td>   <td style=\"border: 1px #aaa solid;\"align=\"center\">  1, 23</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  1 + 23 =  24</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">99 98 24</td> <td style=\"border: 1px #aaa solid;\"align=\"center\">  1, 12</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  1 + 23 =  24</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">12 13 26</td> <td style=\"border: 1px #aaa solid;\"align=\"center\">  1, 23</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  1 + 25 =  26</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">1 22 23</td>  <td style=\"border: 1px #aaa solid;\"align=\"center\">  1, 22</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  1 + 26 =  27</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">1 13 201</td> <td style=\"border: 1px #aaa solid;\"align=\"center\">  1,199</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  1 +224 = 225</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">13 16 112</td><td style=\"border: 1px #aaa solid;\"align=\"center\"> 25, 75</td><td style=\"border: 1px #aaa solid;\"align=\"center\"> 29 + 87 = 116</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">2 24 50</td>  <td style=\"border: 1px #aaa solid;\"align=\"center\"> 25, 25</td><td style=\"border: 1px #aaa solid;\"align=\"center\"> 31 + 31 =  62</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">1 82 61</td>  <td style=\"border: 1px #aaa solid;\"align=\"center\"> 11, 50</td><td style=\"border: 1px #aaa solid;\"align=\"center\"> 20 + 91 = 111</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">1 84 125</td> <td style=\"border: 1px #aaa solid;\"align=\"center\"> 50, 75</td><td style=\"border: 1px #aaa solid;\"align=\"center\"> 92 +138 = 230</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">1 99 999</td> <td style=\"border: 1px #aaa solid;\"align=\"center\"> 92,899</td><td style=\"border: 1px #aaa solid;\"align=\"center\">183+1789 =1972</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">99 1 999</td> <td style=\"border: 1px #aaa solid;\"align=\"center\">  1,502</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  1 +507 = 508</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">98 99 999</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  5,500</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  9 +995 =1004</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">1 99 11</td>  <td style=\"border: 1px #aaa solid;\"align=\"center\">  1, 10</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  1 + 19 =  20</td></tr>\n  <tr><td style=\"border: 1px #aaa solid;\"align=\"center\">99 1 12</td>  <td style=\"border: 1px #aaa solid;\"align=\"center\">  1,  6</td><td style=\"border: 1px #aaa solid;\"align=\"center\">  1 +  6 =   7</td></tr>\n</tbody></table>\n", "p00776": "\n<h3>Encryption System</h3>\n\n\n<p>\nA programmer developed a new encryption system.\nHowever, his system has an issue that\ntwo or more distinct strings are `encrypted' to the same string.\n</p>\n\n<p>\nWe have a string encrypted by his system. \nTo decode the original string, we want to enumerate all the candidates of the string before the encryption.\nYour mission is to write a program for this task.\n</p>\n\n<p>\nThe encryption is performed taking the following steps. Given a string that consists only of lowercase letters ('a' to 'z').\n</p>\n<ol>\n<li>Change the first 'b' to 'a'. If there is no 'b', do nothing.</li>\n<li>Change the first 'c' to 'b'. If there is no 'c', do nothing.</li>\n...\n<li value=\"25\">Change the first 'z' to 'y'. If there is no 'z', do nothing.</li>\n</ol>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of at most 100 datasets.\nEach dataset is a line containing an encrypted string.\nThe encrypted string consists only of lowercase letters, and contains at least 1 and at most 20 characters.\n</p>\n\n<p>\nThe input ends with a line with a single '#' symbol.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nFor each dataset,\nthe number of candidates <i>n</i> of the string before encryption should be printed in a line first,\nfollowed by lines each containing a candidate of the string before encryption.\nIf <i>n</i> does not exceed 10, print all candidates in dictionary order;\notherwise, print the first five and the last five candidates in dictionary order.\n</p>\n\n<p>\nHere, dictionary order is recursively defined as follows.\nThe empty string comes the first in dictionary order.\nFor two nonempty strings <i>x</i> = <i>x</i><sub>1</sub> ... <i>x</i><sub>k</sub> and <i>y</i> = <i>y</i><sub>1</sub> ... <i>y</i><sub>l</sub>, \nthe string <i>x</i> precedes the string <i>y</i> in dictionary order if \n</p>\n<ul>\n<li><i>x</i><sub>1</sub> precedes <i>y</i><sub>1</sub> in alphabetical order ('a' to 'z'), or</li>\n<li><i>x</i><sub>1</sub> and <i>y</i><sub>1</sub> are the same character and <i>x</i><sub>2</sub> ... <i>x</i><sub>k</sub> precedes <i>y</i><sub>2</sub> ... <i>y</i><sub>l</sub> in dictionary order.</li>\n</ul>\n\n\n<h3>Sample Input</h3>\n\n<pre>enw\nabc\nabcdefghijklmnopqrst\nz\n#\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>1\nfox\n5\nacc\nacd\nbbd\nbcc\nbcd\n17711\nacceeggiikkmmooqqssu\nacceeggiikkmmooqqstt\nacceeggiikkmmooqqstu\nacceeggiikkmmooqrrtt\nacceeggiikkmmooqrrtu\nbcdefghijklmnopqrrtt\nbcdefghijklmnopqrrtu\nbcdefghijklmnopqrssu\nbcdefghijklmnopqrstt\nbcdefghijklmnopqrstu\n0\n</pre>", "p00777": "\n<h3>Bridge Removal</h3>\n\n\n<p>\nICPC islands once had been a popular tourist destination.\nFor nature preservation, however, the government decided to prohibit entrance to the islands,\nand to remove all the man-made structures there.\nThe hardest part of the project is to remove all the bridges connecting the islands.\n</p>\n<p>\nThere are <i>n</i> islands and <i>n</i>-1 bridges.\nThe bridges are built so that all the islands are reachable from all the other islands by\ncrossing one or more bridges.\nThe bridge removal team can choose any island as the starting point, and can repeat either of the\nfollowing steps.\n</p>\n<ul>\n<li>Move to another island by crossing a bridge that is connected to the current island.</li>\n<li>Remove one bridge that is connected to the current island, and stay at the same island after the removal.</li>\n</ul>\n<p>\nOf course, a bridge, once removed, cannot be crossed in either direction.\nCrossing or removing a bridge both takes time proportional to the length of the bridge.\nYour task is to compute the shortest time necessary for removing all the bridges.\nNote that the island where the team starts can differ from where the team finishes the work.\n</p>\n\n<h3>Input</h3>\n\n\n<p>\nThe input consists of at most 100 datasets.\nEach dataset is formatted as follows.\n</p>\n\n<blockquote>\n<i>n</i><br>\n<i>p</i><sub>2</sub> <i>p</i><sub>3</sub> ... <i>p<sub>n</sub></i> <br>\n<i>d</i><sub>2</sub> <i>d</i><sub>3</sub> ... <i>d<sub>n</sub></i>\n</blockquote>\n\n\n<p>\nThe first integer <i>n</i> (3 &#8804; <i>n</i> &#8804; 800) is the number of the islands.\nThe islands are numbered from 1 to <i>n</i>.\nThe second line contains <i>n</i>-1 island numbers <i>p<sub>i</sub></i>\n(1 &#8804; <i>p<sub>i</sub></i> &lt; <i>i</i>), and tells that for each <i>i</i>\nfrom 2 to <i>n</i> the island <i>i</i> and the island <i>p<sub>i</sub></i> are connected by a bridge.\nThe third line contains <i>n</i>-1 integers <i>d<sub>i</sub></i> (1 &#8804; <i>d<sub>i</sub></i> &#8804; 100,000)\neach denoting the length of the corresponding bridge.\nThat is, the length of the bridge connecting the island <i>i</i> and <i>p<sub>i</sub></i>\nis <i>d<sub>i</sub></i>. It takes <i>d<sub>i</sub></i> units of time to cross the bridge, and\nalso the same units of time to remove it.\n\nNote that, with this input format, it is assured that all the islands are reachable each other by\ncrossing one or more bridges.\n</p>\n\n<p>\nThe input ends with a line with a single zero.\n</p>\n\n<h3>Output</h3>\n\n<p>\nFor each dataset, print the minimum time units required to remove all the bridges in a single line.\nEach line should not have any character other than this number.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>4\n1 2 3\n10 20 30\n10\n1 2 2 1 5 5 1 8 8\n10 1 1 20 1 1 30 1 1\n3\n1 1\n1 1\n0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n\n<pre>80\n136\n2\n</pre>", "p00778": "\n<h3>A Die Maker</h3>\n\n\n<p>\nThe work of die makers starts early in the morning.\n</p>\n\n<p>\nYou are a die maker.\nYou receive orders from customers, and make various kinds of dice every day.\nToday, you received an order of a cubic die with six numbers\n<i>t</i><sub>1</sub>, <i>t</i><sub>2</sub>, ..., <i>t</i><sub>6</sub> on whichever faces.\n</p>\n\n<p>\nFor making the ordered die, you use a tool of flat-board shape.\nYou initially have a die with a zero on each face.\nIf you rotate the die by 90 degrees on the tool towards one of northward, southward, eastward, and southward,\nthe number on the face that newly touches the tool is increased by one.\nBy rotating the die towards appropriate directions repeatedly,\nyou may obtain the ordered die.\n</p>\n\n<p>\nThe final numbers on the faces of the die\nis determined by the sequence of directions towards which you rotate the die.\nWe call the string that represents the sequence of directions an <i>operation sequence.</i>\nFormally, we define operation sequences as follows.\nAn operation sequence consists of <i>n</i> characters, where <i>n</i> is the number of rotations made.\nIf you rotate the die eastward in the <i>i</i>-th rotation,\nthe <i>i</i>-th character of the operation sequence is <code>E</code>.\nSimilarly, if you rotate it westward, it is <code>W</code>,\nif southward, it is <code>S</code>, otherwise,\nif northward, it is <code>N</code>.\nFor example, the operation sequence <code>NWS</code> represents\nthe sequence of three rotations, northward first, westward next,\nand finally southward.\n</p>\n\n<p>\nGiven six integers of the customer's order,\ncompute an operation sequence that makes a die to order.\nIf there are two or more possibilities, you should compute the earliest operation sequence in dictionary order.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of multiple datasets.\nThe number of datasets does not exceed 40.\nEach dataset has the following form.\n</p>\n\n<blockquote>\n<i>t</i><sub>1</sub> <i>t</i><sub>2</sub> <i>t</i><sub>3</sub> <i>t</i><sub>4</sub> <i>t</i><sub>5</sub> <i>t</i><sub>6</sub><br>\n<i>p</i> <i>q</i>\n</blockquote>\n\n\n<p>\n<i>t</i><sub>1</sub>, <i>t</i><sub>2</sub>, ..., <i>t</i><sub>6</sub> are integers that represent the order from the customer.\nFurther, <i>p</i> and <i>q</i> are positive integers that specify the output range of the operation sequence (see the details below).\n</p>\n\n<p>\nEach dataset satisfies\n0 &#8804; <i>t</i><sub>1</sub> &#8804; <i>t</i><sub>2</sub> &#8804; ... &#8804; <i>t</i><sub>6</sub> &#8804; 5,000\nand\n1 &#8804; <i>p</i> &#8804; <i>q</i> &#8804; <i>t</i><sub>1</sub>+<i>t</i><sub>2</sub>+...+<i>t</i><sub>6</sub>.\nA line containing six zeros denotes the end of the input.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nFor each dataset,\nprint the subsequence,\nfrom the <i>p</i>-th position to the <i>q</i>-th position, inclusively,\nof the operation sequence that is the earliest in dictionary order.\nIf it is impossible to make the ordered die, print <code>impossible</code>.\n</p>\n\n<p>\nHere, dictionary order is recursively defined as follows.\nThe empty string comes the first in dictionary order.\nFor two nonempty strings <i>x</i> = <i>x</i><sub>1</sub> ... <i>x</i><sub><i>k</i></sub> and <i>y</i> = <i>y</i><sub>1</sub> ... <i>y</i><sub><i>l</i></sub>, the string <i>x</i> precedes the string <i>y</i> in dictionary order if\n</p>\n\n<ul>\n<li> <i>x</i><sub>1</sub> precedes <i>y</i><sub>1</sub> in alphabetical order ('A' to 'Z'), or </li>\n<li> <i>x</i><sub>1</sub> and <i>y</i><sub>1</sub> are the same character and <i>x</i><sub>2</sub> ... <i>x</i><sub><i>k</i></sub> precedes <i>y</i><sub>2</sub> ... <i>y</i><sub><i>l</i></sub> in dictionary order.</li>\n</ul>\n\n\n\n<h3>Sample Input</h3>\n\n<pre>1 1 1 1 1 1\n1 6\n1 1 1 1 1 1\n4 5\n0 0 0 0 0 2\n1 2\n0 0 2 2 2 4\n5 9\n1 2 3 4 5 6\n15 16\n0 1 2 3 5 9\n13 16\n2 13 22 27 31 91\n100 170\n0 0 0 0 0 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n\n<pre>EEENEE\nNE\nimpossible\nNSSNW\nEN\nEWNS\nSNSNSNSNSNSNSNSNSNSNSNSSNSNSNSNSNSNSNSNSNSNSNSNSNSNSNSNSNSNSNSNSNSNWEWE\n</pre>", "p00780": "\n<H1><font color=\"#000\">Problem A:</font>Goldbach's Conjecture</H1>\n\n<p>\n<b>Goldbach's Conjecture:</b> For any even number <i>n</i> greater than or equal to 4, there exists at least one pair of prime numbers <i>p</i><sub>1</sub> and <i>p</i><sub>2</sub> such that <i>n</i> = <i>p</i><sub>1</sub> + <i>p</i><sub>2</sub>.\n</p>\n\n<p>\nThis conjecture has not been proved nor refused yet. No one is sure whether this conjecture actually holds. However, one can find such a pair of prime numbers, if any, for a given even number. The problem here is to write a program that reports the number of all the pairs of prime numbers satisfying the condition in the conjecture for a given even number.\n</p>\n\n<p>\nA sequence of even numbers is given as input. Corresponding to each number, the program should output the number of pairs mentioned above. Notice that we are intereseted in the number of essentially different pairs and therefore you should not count (<i>p</i><sub>1</sub>, <i>p</i><sub>2</sub>) and (<i>p</i><sub>2</sub>, <i>p</i><sub>1</sub>) separately as two different pairs.\n</p>\n\n<H2>Input</H2>\n\n<p>\nAn integer is given in each input line. You may assume that each integer is even, and is greater than or equal to 4 and less than 2<sup>15</sup>. The end of the input is indicated by a number 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nEach output line should contain an integer number. No other characters should appear in the output.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n6\n10\n12\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n2\n1\n</pre>\n", "p00783": "\n<H1><font color=\"#000\">Problem D:</font> Napoleon's Grumble</H1>\n\n<p>\nLegend has it that, after being defeated in Waterloo, Napoleon Bonaparte, in retrospect of his days of glory, talked to himself \"Able was I ere I saw Elba.\" Although, it is quite doubtful that he should have said this in English, this phrase is widely known as a typical <i>palindrome</i>.\n</p>\n\n<p>\nA palindrome is a symmetric character sequence that looks the same when read backwards, right to left. In the above Napoleon's grumble, white spaces appear at the same positions when read backwards. This is not a required condition for a palindrome. The following, ignoring spaces and punctuation marks, are known as the first conversation and the first palindromes by human beings.\n</p>\n\n<pre>\n\"Madam, I'm Adam.\"\n\"Eve.\"\n<i>(by Mark Twain)</i>\n</pre>\n\n<p>\nWrite a program that finds palindromes in input lines.\n</p>\n\n<H2>Input</H2>\n\n<p>\nA multi-line text is given as the input. The input ends at the end of the file.\n</p>\n\n<p>\nThere are at most 100 lines in the input. Each line has less than 1,024 Roman alphabet characters.\n</p>\n\n<H2>Output</H2>\n\n<p>\nCorresponding to each input line, a line consisting of <i>all</i> the character sequences that are palindromes in the input line should be output. However, trivial palindromes consisting of only one or two characters should not be reported.\n</p>\n\n<p>\nOn finding palindromes, any characters in the input except Roman alphabets, such as punctuation characters, digits, space, and tabs, should be ignored. Characters that differ only in their cases should be looked upon as the same character. Whether or not the character sequences represent a proper English word or sentence does not matter.\n</p>\n\n<p>\nPalindromes should be reported all in uppercase characters. When two or more palindromes are reported, they should be separated by a space character. You may report palindromes in any order.\n</p>\n\n<p>\nIf two or more occurrences of the same palindromes are found in the same input line, report only once. When a palindrome overlaps with another, even when one is completely included in the other, both should be reported. However, palindromes appearing in the center of another palindrome, whether or not they also appear elsewhere, should not be reported. For example, for an input line of \"AAAAAA\", two palindromes \"AAAAAA\" and \"AAAAA\" should be output, but not \"AAAA\" nor \"AAA\". For \"AABCAAAAAA\", the output remains the same.\n</p>\n\n<p>\nOne line should be output corresponding to one input line. If an input line does not contain any palindromes, an empty line should be output.\n</p>\n\n\n<H2>Sample Input</H2>\n\n<pre>\nAs the first man said to the\nfirst woman:\n\"Madam, I'm Adam.\"\nShe responded:\n\"Eve.\"\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nTOT\n\nMADAMIMADAM MADAM\nERE DED\nEVE\n</pre>\n\n<p>\nNote that the second line in the output is empty, corresponding to the second input line containing no palindromes. Also note that some of the palindromes in the third input line, namely \"ADA\", \"MIM\", \"AMIMA\", \"DAMIMAD\", and \"ADAMIMADA\", are not reported because they appear at the center of reported ones. \"MADAM\" <i>is</i> reported, as it does not appear in the center, but only once, disregarding its second occurrence.\n</p>\n", "p00786": "\n<H1><font color=\"#000\">Problem G:</font>BUT We Need a Diagram</H1>\n\n<p>\nConsider a data structure called BUT (Binary and/or Unary Tree). A BUT is defined inductively as follows:\n</p>\n\n<ul>\n<li>Let <i>l</i> be a letter of the English alphabet, either lowercase or uppercase (n the sequel, we say simply \"a letter\"). Then, the object that consists only of <i>l</i>, designating <i>l</i> as its label, is a BUT. In this case, it is called a 0-ary BUT.</li>\n<li>Let <i>l</i> be a letter and <i>C</i> a BUT. Then, the object that consists of <i>l</i> and <i>C</i>, designating <i>l</i> as its label and <i>C</i> as its component, is a BUT. In this case, it is called a unary BUT.</li>\n<li>Let <i>l</i> be a letter, <i>L</i> and <i>R</i> BUTs. Then, the object that consists of <i>l</i>, <i>L</i> and <i>R</i>, designating <i>l</i> as its label, <i>L</i> as its left component, and <i>R</i> as its right component, is a BUT. In this case, it is called a binary BUT.</li>\n</ul>\n\n<p>\nA BUT can be represented by a expression in the following way.\n</p>\n\n<ul>\n<li>When a BUT <i>B</i> is 0-ary, its representation is the letter of its label.</li>\n<li>When a BUT <i>B</i> is unary, its representation is the letter of its label followed by the parenthesized representation of its component.</li>\n<li>When a BUT <i>B</i> is binary, its representation is the letter of its label, a left parenthesis, the representation of its left component, a comma, the representation of its right component, and a right parenthesis, arranged in this order.</li>\n</ul>\n\n\n<p>\nHere are examples:\n</p>\n\n<pre>\na\nA(b)\na(a,B)\na(B(c(D),E),f(g(H,i)))\n</pre>\n\n<p>\nSuch an expression is concise, <i>but</i> a diagram is much more appealing to our eyes. We prefer a diagram:\n</p>\n\n<pre>\nD  H i\n-  ---\nc E g\n--- -\n B  f\n ----\n  a\n</pre>\n\n<p>\nto the expression <pre>a(B(c(D),E),f(g(H,i)))</pre>\n</p>\n\n<pre>\nYour mission is to write a program that converts the expression representing a BUT into its diagram. We want to keep a diagram as compact as possible assuming that we display it on a conventional character terminal with a fixed pitch font such as Courier. Let's define the diagram <i>D</i> for BUT <i>B</i> inductively along the structure of <i>B</i> as follows:\n</pre>\n\n<ul>\n<li>When <i>B</i> is 0-ary, <i>D</i> consists only of a letter of its label. The letter is called the root of <i>D</i>, and also called the leaf of <i>D</i></li>\n<li>When <i>B</i> is unary, <i>D</i> consists of a letter <i>l</i> of its label, a minus symbol <i>S</i>, and the diagram <i>C</i> for its component, satisfying the following constraints:\n  <ul>\n    <li><i>l</i> is just below <i>S</i></li>\n    <li>The root of <i>C</i> is just above <i>S</i></li>\n  </ul>\n<i>l</i> is called the root of <i>D</i>, and the leaves of <i>C</i> are called the leaves of <i>D</i>.\n</li>\n<li>When <i>B</i> is binary, <i>D</i> consists of a letter <i>l</i> of its label, a sequence of minus symbols <i>S</i>, the diagram <i>L</i> for its left component, and the diagram <i>R</i> for its right component, satisfying the following constraints:\n  <ul>\n    <li><i>S</i> is contiguous, and is in a line.</li>\n    <li><i>l</i> is just below the central minus symbol of <i>S</i>, where, if the center of <i>S</i> locates on a minus symbol <i>s</i>, <i>s</i> is the central, and if the center of <i>S</i> locates between adjacent minus symbols, the left one of them is the central.</li>\n    <li>The root of <i>L</i> is just above the left most minus symbols of <i>S</i>, and the rot of <i>R</i> is just above the rightmost minus symbol of <i>S</i></li>\n    <li>In any line of <i>D</i>, <i>L</i> and <i>R</i> do not touch or overlap each other.</li>\n    <li>No minus symbols are just above the leaves of <i>L</i> and <i>R</i>.</li>\n  </ul>\n<i>l</i> is called the root of <i>D</i>, and the leaves of <i>L</i> and <i>R</i> are called the leaves of <i>D</i>\n</li>\n</ul>\n\n<H2>Input</H2>\n\n<p>\nThe input to the program is a sequence of expressions representing BUTs. Each expression except the last one is terminated by a semicolon. The last expression is terminated by a period. White spaces (tabs and blanks) should be ignored. An expression may extend over multiple lines. The number of letter, i.e., the number of characters except parentheses, commas, and white spaces, in an expression is at most 80.\n</p>\n\n<p>\nYou may assume that the input is syntactically correct and need not take care of error cases.\n</p>\n\n<H2>Output</H2>\n\n<p>\nEach expression is to be identified with a number starting with 1 in the order of occurrence in the input. Output should be produced in the order of the input.\n</p>\n\n<p>\nFor each expression, a line consisting of the identification number of the expression followed by a colon should be produced first, and then, the diagram for the BUT represented by the expression should be produced.\n</p>\n\n<p>\nFor diagram, output should consist of the minimum number of lines, which contain only letters or minus symbols together with minimum number of blanks required to obey the rules shown above.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\na(A,b(B,C));\nx( y( y( z(z), v( s, t ) ) ), u ) ;\n\na( b( c,\n      d(\n         e(f),\n         g\n       )\n    ),\n   h( i(\n         j(\n            k(k,k),\n            l(l)\n          ),\n         m(m)\n       )\n    )\n );\n\na(B(C),d(e(f(g(h(i(j,k),l),m),n),o),p))\n.\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1:\n B C\n ---\nA b\n---\n a\n2:\nz s t\n- ---\nz  v\n----\n y\n -\n y u\n ---\n  x\n3:\n   k k l\n   --- -\n f  k  l m\n -  ---- -\n e g j   m\n --- -----\nc d    i\n---    -\n b     h\n -------\n    a\n4:\nj k\n---\n i l\n ---\n  h m\n  ---\n   g n\n   ---\n    f o\n    ---\n   C e p\n   - ---\n   B  d\n   ----\n    a\n</pre>\n<!-- from UVA-->\n", "p00788": "\n<H1><font color=\"#000\">Problem A:</font> Rational Irrationals</H1>\n\n<p>\nRational numbers are numbers represented by ratios of two integers. For a prime number <i>p</i>, one of the elementary theorems in the number theory is that there is no rational number equal to &radic;<i>p</i>. Such numbers are called irrational numbers. It is also known that there are rational numbers arbitrarily close to &radic;<i>p</i>\n</p>\n\n<p>\nNow, given a positive integer <i>n</i>, we define a set <i>Q<sub>n</sub></i> of all rational numbers whose elements are represented by ratios of two positive integers both of which are less than or equal to <i>n</i>. For example, <i>Q</i><sub>4</sub> is a set of 11 rational numbers {1/1, 1/2, 1/3, 1/4, 2/1, 2/3, 3/1, 3/2, 3/4, 4/1, 4/3}. 2/2, 2/4, 3/3, 4/2 and 4/4 are not included here because they are equal to 1/1, 1/2, 1/1, 2/1 and 1/1, respectively.\n</p>\n\n<p>\nYour job is to write a program that reads two integers <i>p</i> and <i>n</i> and reports two rational numbers <i>x / y</i> and <i>u / v</i>, where <i>u / v</i> &lt; &radic;<i>p</i> &lt; <i>x / y</i> and there are no other elements of <i>Q<sub>n</sub></i> between <i>u/v</i> and <i>x/y</i>. When <i>n</i> is greater than &radic;<i>p</i>, such a pair of rational numbers always exists.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of lines each of which contains two positive integers, a prime number <i>p</i> and an integer <i>n</i> in the following format.\n</p>\n<pre>\n<i>p n</i>\n</pre>\n\n<p>\nThey are separated by a space character. You can assume that <i>p</i> and <i>n</i> are less than 10000, and that <i>n</i> is greater than &radic;<i>p</i>. The end of the input is indicated by a line consisting of two zeros.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each input line, your program should output a line consisting of the two rational numbers <i>x / y</i> and <i>u / v</i> (<i>x / y</i> &gt; <i>u / v</i>) separated by a space character in the following format.\n</p>\n\n<pre>\n<i>x/y u/v</i>\n</pre>\n\n<p>\nThey should be irreducible. For example, 6/14 and 15/3 are not accepted. They should be reduced to 3/7 and 5/1, respectively.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2 5\n3 10\n5 100\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3/2 4/3\n7/4 5/3\n85/38 38/17\n</pre>\n\n", "p00791": "\n<H1><font color=\"#000\">Problem D:</font> Trapezoids</H1>\n\n<p>\nIf you are a computer user, you should have seen pictures drawn with ASCII characters. Such a picture may not look as good as GIF or Postscript pictures, but is much easier to handle. ASCII pictures can easily be drawn using text editors, and can convey graphical information using only text-based media. Program s extracting information from such pictures may be useful.\n</p>\n\n<p>\nWe are interested in simple pictures of trapezoids, consisting only of asterisk('*') characters and blank spaces. A trapezoid (trapezium in the Queen's English) is a four-side polygon where at least one pair of its sides is parallel. Furthermore, the picture in this problem satisfies the following conditions.\n</p>\n\n<ol>\n<li>All the asterisks in the picture belong to sides of some trapezoid.</li>\n<li>Two sides of a trapezoid are horizontal and the other two are vertical or incline 45 degrees.</li>\n<li>Every side is more than 2 characters long.</li>\n<li>Two distinct trapezoids do not share any asterisk characters.</li>\n<li>Sides of two trapezoids do not touch. That is, asterisks of one trapezoid do not appear in eight neighbors of asterisks of a different trapezoid. For example, the following arrangements never appear.</li>\n</ol>\n\n<pre>\n       ****    |    ****         |   ******\n       *  *    |    *   * ***    |   *   *\n       ****    |    ******* *    |   ****\n    ****       |          ***    |       ****\n    *  *       |                 |       *  *\n    ****       |                 |       ****\n</pre>\n\n<p>\nSome trapezoids may appear inside others. For example, the following is a valid picture.\n</p>\n\n<pre>\n*********\n*       *\n* ***   *\n* *  *  *\n* ***** *\n*       *\n*********\n</pre>\n\n<p>\nYour task is to recognize trapezoids in the picture and to calculate the area of each trapezoid. The area of a trapezoid is the number of characters on or inside its four sides, including the areas of the trapezoids inside it, if any.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input contains several descriptions of pictures. Each of then starts with a line containing an integer <i>h</i> (1 &le; <i>h</i> &le; 1000), where <i>h</i> is the height (number of lines) of the picture. Each line of the picture consists only of asterisk and space characters, and contains less than 80 characters. The lines of the picture do not necessarily have the same length and may contain redundant space characters at the end. After the last picture, and integer zero terminates the input.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each picture, your program should produce output lines each containing two integers <i>m</i> and <i>n</i> is this order, which means there are <i>n</i> trapezoids of area <i>m</i> in the picture. output lines for one picture should be in ascending order on <i>m</i> and count all the trapezoids in the picture.\n</p>\n\n<p>\nOutput lines for two pictures should be separated by a line containing ten hyphen ('-') characters. This separator line should not appear before the output for the first picture nor after the output for the last.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n7\n********\n*      *\n* ***  *\n* * *  *\n* ***  *\n*      *\n********\n9\n\n***\n*  *\n*****     *****\n          *   *\n    ***   *****\n   * *\n  * *\n ***\n11\n    ****                                      *******************\n   *   *  *********                          *                  *\n  ******  *       *    ****                 *  *********        *\n          * ***   *   *  *                 *  *         *       *\n***       * *  *  *  ****  *******        *  *  *** ***  *      *\n* *       * ***** *         *   *        *  *   * *  * *  *     *\n***       *       *          ***        *  *    ***   ***  *    *\n          *********                    *  *                 *   *\n                                      *  *********************  *\n                                     *                          *\n                                    *****************************\n0\n</pre>\n\n<p>\n(Spacing between lines in pictures is made narrower for better appearance. Note that a blank line exists as the first line of the second picture.)\n</p>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n9 1\n56 1\n----------\n12 2\n15 1\n----------\n9 3\n12 2\n15 2\n63 1\n105 1\n264 1\n</pre>\n\n", "p00790": "\n<H1><font color=\"#000\">Problem C:</font> Die Game</H1>\n\n<p>\nLife is not easy. Sometimes it is beyond your control. Now, as contestants of ACM ICPC, you might be just tasting the bitter of life. But don't worry! Do not look only on the dark side of life, but look also on the bright side. Life may be an enjoyable game of chance, like throwing dice. Do or die! Then, at last, you might be able to find the route to victory.\n</p>\n\n<p>\nThis problem comes from a game using a die. By the way, do you know a die? It has nothing to do with \"death.\" A die is a cubic object with six faces, each of which represents a different number from one to six and is marked with the corresponding number of spots. Since it is usually used in pair, \"a die\" is rarely used word. You might have heard a famous phrase \"the die is cast,\" though.\n</p>\n\n<p>\nWhen a game starts, a die stands still on a flat table. During the game, the die is tumbled in all directions by the dealer. You will win the game if you can predict the number seen on the top face at the time when the die stops tumbling.\n</p>\n\n<p>\nNow you are requested to write a program that simulates the rolling of a die. For simplicity, we assume that the die neither slip nor jumps but just rolls on the table in four directions, that is, north, east, south, and west. At the beginning of every game, the dealer puts the die at the center of the table and adjusts its direction so that the numbers one, two, and three are seen on the top, north, and west faces, respectively. For the other three faces, we do not explicitly specify anything but tell you the golden rule: the sum of the numbers on any pair of opposite faces is always seven.\n</p>\n\n<p>\nYour program should accept a sequence of commands, each of which is either \"north\", \"east\", \"south\", or \"west\". A \"north\" command tumbles the die down to north, that is, the top face becomes the new north, the north becomes the new bottom, and so on. More precisely, the die is rotated around its north bottom edge to the north direction and the rotation angle is 9 degrees. Other commands also tumble the die accordingly to their own directions. Your program should calculate the number finally shown on the top after performing the commands in the sequence. Note that the table is sufficiently large and the die never falls off during the game.\n</p>\n<H2>Input</H2>\n\n<p>\nThe input consists of one or more command sequences, each of which corresponds to a single game. The first line of a command sequence contains a positive integer, representing the number of the following command lines in the sequence. You may assume that this number is less than or equal to 1024. A line containing a zero indicates the end of the input. Each command line includes a command that is one of north, east, south, and west. You may assume that no white space occurs in any line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each command sequence, output one line containing solely the number of the top face at the time when the game is finished.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n1\nnorth\n3\nnorth\neast\nsouth\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n5\n1\n</pre>\n\n", "p00789": "\n<H1><font color=\"#000\">Problem B:</font> Square Coins</H1>\n\n<p>\nPeople in Silverland use square coins. Not only they have square shapes but also their values are square numbers. Coins with values of all square numbers up to 289 (= 17<sup>2</sup>), i.e., 1-credit coins, 4-credit coins, 9-credit coins, ..., and 289-credit coins, are available in Silverland.\n</p>\n\n<p>\nThere are four combinations of coins to pay ten credits:\n</p>\n\n<ul>\n<li>ten 1-credit coins,</li>\n<li>one 4-credit coin and six 1-credit coins,</li>\n<li>two 4-credit coins and two 1-credit coins, and</li>\n<li>one 9-credit coin and one 1-credit coin.</li>\n</ul>\n\n<p>\nYour mission is to count the number of ways to pay a given amount using coins of Silverland.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of lines each containing an integer meaning an amount to be paid, followed by a line containing a zero. You may assume that all the amounts are positive and less than 300.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each of the given amount, one line containing a single integer representing the number of combinations of coins should be output. No other characters should appear in the output.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n10\n30\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n4\n27\n</pre>\n", "p00793": "\n<H1><font color=\"#000\">Problem F:</font> Heavenly Jewels</H1>\n\n<p>\nThere is a flat island whose shape is a perfect square. On this island, there are three habitants whose names are IC, PC, and ACM Every day, one jewel is dropped from the heaven. Just as the jewel touches the ground, IC, PC, and ACM leave their houses simultaneously, run with the same speed, and then a person who first touched the jewel can get the jewel. Hence, the person whose house is nearest to the location of the jewel is the winner of that day.\n</p>\n\n<p>\nThey always have a quarrel with each other, and therefore their houses are located at distinct places. The locations of their houses are fixed. This jewel falls at a random point on the island, that is, all points on the island have even chance.\n</p>\n\n<p>\nWhen three are two or more persons whose houses are simultaneously nearest, the last person in the order of\n</p>\n\n<p>\nIC, PC, ACM\n</p>\n\n<p>\nobtains the jewel.\n</p>\n\n<p>\nOur interest is to know the probability for IC to get the jewel under this situation.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input describes one problem instance per line. Each line contains the <i>x</i>- and <i>y</i>-coordinates of IC's home, those of PC's, and those of ACM's in this order. Note that the houses of IC, PC and ACM are located at distinct places. The end of the input is indicated by a line with six zeros.\n</p>\n\n<p>\nThe coordinates of the whole island are given by (0, 10000) &times; (0, 10000) and coordinates of houses are given in integer numbers between 1 and 9999, inclusive. It should be noted that the locations of the jewels are arbitrary places on the island and their coordinate values are not necessarily integers.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each input line, your program should output its sequence number starting from 1, and the probability for the instance. The computed probability values should have errors less than 10<sup>-5</sub>.\n</p>\n\n<p>\nThe sequence number and the probability should be printed on the same line. The two numbers should be separated by a space.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2000 2000 8000 8000 9000 9500\n2500 2500 7500 2500 2500 7500\n0 0 0 0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1 0.50000\n2 0.25000\n</pre>\n\n", "p00795": "\n<H1><font color=\"#000\">Problem H:</font> Co-occurrence Search</H1>\n\n<p>\nA huge amount of information is being heaped on WWW. Albeit it is not well-organized, users can browse WWW as an unbounded source of up-to-date information, instead of consulting established but a little out-of-date encyclopedia. However, you can further exploit WWW by learning more about keyword search algorithms.\n</p>\n<p>\nFor example, if you want to get information on recent comparison between Windows and UNIX, you may expect to get relevant description out of a big bunch of Web texts, by extracting texts that contain both keywords \"Windows\" and \"UNIX\" close together.\n</p>\n<p>\nHere we have a simplified version of this co-occurrence keyword search problem, where the text and keywords are replaced by a string and key characters, respectively. A character string S of length <i>n</i> (1 &le; <i>n</i> &le; 1,000,000) and a set <i>K</i> of <i>k</i> distinct key characters <i>a</i><sub>1</sub>, ..., <i>a<sub>k</sub></i> (1 &le; <i>k</i> &le; 50) are given. Find every shortest substring of <i>S</i> that contains all of the key characters <i>a</i><sub>1</sub>, ..., <i>a<sub>k</sub></i>. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a text file which contains only printable characters (ASCII codes 21 to 7E in hexadecimal) and newlines. No white space such as space or tab appears in the input.\n</p>\n<p>\nThe text is a sequence of the shortest string search problems described above. Each problem consists of character string <i>S<sub>i</sub></i> and key character set <i>K<sub>i</sub></i> (<i>i</i> = 1, 2, ..., <i>p</i>). Every <i>S<sub>i</sub></i> and <i>K<sub>i</sub></i> is followed by an empty line. However, any single newline between successive lines in a string should be ignored; that is, newlines are not part of the string. For various technical reasons, every line consists of at most 72 characters. Each key character set is given in a single line. The input is terminated by consecutive empty lines; <i>p</i> is not given explicitly. \n</p>\n\n<H2>Output</H2>\n\n<p>\nAll of <i>p</i> problems should be solved and their answers should be output in order. However, it is not requested to print all of the shortest substrings if more than one substring is found in a problem, since found substrings may be too much to check them all. Only the number of the substrings together with their representative is requested instead. That is, for each problem <i>i</i>, the number of the shortest substrings should be output followed by the first (or the leftmost) shortest substring <i>s</i><sub><i>i</i>1</sub>, obeying the following format:\n</p>\n\n<pre>\n<i>\n    the number of the shortest substrings for the i-th problem\n    empty line\n    the first line of s<sub>i1</sub>\n    the second line of s<sub>i1</sub>\n    ...\n    the last line of s<sub>i1</sub>\n    empty line for the substring termination \n</i>\n</pre>\n<p>\nwhere each line of the shortest substring <i>s</i><sub><i>i</i>1</sub> except for the last line should consist of exactly 72 characters and the last line (or the single line if the substring is shorter than or equal to 72 characters, of course) should not exceed 72 characters.\n</p>\n<p>\nIf there is no such substring for a problem, the output will be a 0 followed by an empty line; no more successive empty line should be output because there is no substring to be terminated. \n</p>\n\n<H2>Sample Input</H2>\n<pre>\nThefirstexampleistrivial.\n\nmfv\n\nAhugeamountofinformationisbeingheapedonWWW.Albeititisnot\nwell-organized,userscanbrowseWWWasanunboundedsourceof\nup-to-dateinformation,insteadofconsultingestablishedbutalittle\nout-of-dateencyclopedia.However,youcanfurtherexploitWWWby\nlearningmoreaboutkeywordsearchalgorithms.Forexample,ifyou\nwanttogetinformationonrecentcomparisonbetweenWindowsandUNIX,\nyoumayexpecttogetrelevantdescriptionoutofabigbunchofWeb\ntexts,byextractingtextsthatcontainbothkeywords\"Windows\"and\"UNIX\"\nclosetogether.\n\nbWn\n\n3.1415926535897932384626433832795028841971693993751058209749445923078164\n\npi\n\nWagner,Bach,Beethoven,Chopin,Brahms,Hindemith,Ives,Suk,Mozart,Stravinsky\n\nWeary\n\nASCIIcharacterssuchas+,*,[,#,<,},_arenotexcludedinagivenstringas\nthisexampleillustratesbyitself.Youshouldnotforgetthem.Onemorefact\nyoushouldnoticeisthatuppercaselettersandlowercaselettersare\ndistinguishedinthisproblem.Don'tidentify\"g\"and\"G\",forexmaple.\nHowever,weareafraidthatthisexamplegivesyoutoomuchhint!\n\n![GsC_l\n\nETAONRISHDLFCMUGYPWBVKXJQZ\n\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n\nfirstexampleistriv\n\n7\n\nnWWW.Alb\n\n0\n\n1\n\nWagner,Bach,Beethoven,Chopin,Brahms,Hindemith,Ives,Suk,Mozart,Stravinsky\n\n1\n\nCIIcharacterssuchas+,*,[,#,<,},_arenotexcludedinagivenstringasthisexampl\neillustratesbyitself.Youshouldnotforgetthem.Onemorefactyoushouldnoticeis\nthatuppercaselettersandlowercaselettersaredistinguishedinthisproblem.Don\n'tidentify\"g\"and\"G\",forexmaple.However,weareafraidthatthisexamplegivesyo\nutoomuchhint!\n\n1\n\nETAONRISHDLFCMUGYPWBVKXJQZ\n\n</pre>\n\n", "p00797": "\n<H1><font color=\"#000\">Problem B:</font> Family Tree</H1>\n\n<p>\nA professor of anthropology was interested in people living in isolated islands and their history.\nHe collected their family trees to conduct some anthropological experiment. For the experiment,\nhe needed to process the family trees with a computer. For that purpose he translated them\ninto text files. The following is an example of a text file representing a family tree.\n</p>\n\n<pre>\nJohn\n Robert\n  Frank\n  Andrew\n Nancy\n  David\n</pre>\n\n<p>\nEach line contains the given name of a person. The name in the first line is the oldest ancestor\nin this family tree. The family tree contains only the descendants of the oldest ancestor. Their\nhusbands and wives are not shown in the family tree. The children of a person are indented\nwith one more space than the parent. For example, Robert and Nancy are the children of John,\nand Frank and Andrew are the children of Robert. David is indented with one more space than\nRobert, but he is not a child of Robert, but of Nancy. To represent a family tree in this way,\nthe professor excluded some people from the family trees so that no one had both parents in a\nfamily tree.\n</p>\n\n<p>\nFor the experiment, the professor also collected documents of the families and extracted the\nset of statements about relations of two persons in each family tree. The following are some\nexamples of statements about the family above.\n</p>\n\n<pre>\nJohn is the parent of Robert.\nRobert is a sibling of Nancy.\nDavid is a descendant of Robert.\n</pre>\n\n<p>\nFor the experiment, he needs to check whether each statement is true or not. For example, the\nfirst two statements above are true and the last statement is false. Since this task is tedious, he\nwould like to check it by a computer program.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input contains several data sets. Each data set consists of a family tree and a set of\nstatements. The first line of each data set contains two integers <i>n</i> (0 &lt; <i>n</i> &lt; 1000) and <i>m</i> (0 &lt; <i>m</i> &lt; 1000) which represent the number of names in the family tree and the number of\nstatements, respectively. Each line of the input has less than 70 characters.\n</p>\n<p>\nAs a name, we consider any character string consisting of only alphabetic characters. The names\nin a family tree have less than 20 characters. The name in the first line of the family tree has\nno leading spaces. The other names in the family tree are indented with at least one space, i.e.,\nthey are descendants of the person in the first line. You can assume that if a name in the family\ntree is indented with <i>k</i> spaces, the name in the next line is indented with at most <i>k</i> + 1 spaces.\nThis guarantees that each person except the oldest ancestor has his or her parent in the family\ntree. No name appears twice in the same family tree. Each line of the family tree contains no\nredundant spaces at the end.\n</p>\n<p>\nEach statement occupies one line and is written in one of the following formats, where <i>X</i> and\n<i>Y</i> are different names in the family tree.\n</p>\n\n<pre>\n<i>X</i> is a child of <i>Y</i>.\n<i>X</i> is the parent of <i>Y</i>.\n<i>X</i> is a sibling of <i>Y</i>.\n<i>X</i> is a descendant of <i>Y</i>.\n<i>X</i> is an ancestor of <i>Y</i>.\n</pre>\n\n<p>\nNames not appearing in the family tree are never used in the statements. Consecutive words in\na statement are separated by a single space. Each statement contains no redundant spaces at\nthe beginning and at the end of the line.\n</p>\n<p>\nThe end of the input is indicated by two zeros.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each statement in a data set, your program should output one line containing True or False.\nThe first letter of True or False in the output must be a capital. The output for each data set\nshould be followed by an empty line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n6 5\nJohn\n Robert\n  Frank\n  Andrew\n Nancy\n  David\nRobert is a child of John.\nRobert is an ancestor of Andrew.\nRobert is a sibling of Nancy.\nNancy is the parent of Frank.\nJohn is a descendant of Andrew.\n2 1\nabc\n xyz\nxyz is a child of abc.\n0 0\n\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nTrue\nTrue\nTrue\nFalse\nFalse\n\nTrue\n\n</pre>\n\n", "p00800": "\n<H1><font color=\"#000\">Problem E:</font> The Devil of Gravity</H1>\n\n<p>\nHaven't you ever thought that programs written in Java, C++, Pascal, or any other modern computer languages look rather sparse? Although most editors provide sufficient screen space for at least 80 characters or so in a line, the average number of significant characters occurring in a line is just a fraction. Today, people usually prefer readability of programs to efficient use of screen real estate.\n</p>\n<p>\nDr. Faust, a radical computer scientist, believes that editors for real programmers shall be more space efficient. He has been doing research on saving space and invented various techniques for many years, but he has reached the point where no more essential improvements will be expected with his own ideas.\n</p>\n<p>\nAfter long thought, he has finally decided to take the ultimate but forbidden approach. He does not hesitate to sacrifice anything for his ambition, and asks a devil to give him supernatural intellectual powers in exchange with his soul. With the transcendental knowledge and ability, the devil provides new algorithms and data structures for space efficient implementations of editors.\n</p>\n<p>\nThe editor implemented with those evil techniques is beyond human imaginations and behaves somehow strange. The mighty devil Dr. Faust asks happens to be the devil of gravity. The editor under its control saves space with magical magnetic and gravitational forces.\n</p>\n<p>\nYour mission is to defeat Dr. Faust by re-implementing this strange editor without any help of the devil. At first glance, the editor looks like an ordinary text editor. It presents texts in two-dimensional layouts and accepts editing commands including those of cursor movements and character insertions and deletions. A text handled by the devil's editor, however, is partitioned into text segments, each of which is a horizontal block of non-blank characters. In the following figure, for instance, four text segments \"<span>abcdef</span>\", \"<span>ghijkl</span>\", \"<span>mnop</span>\", \"<span>qrstuvw</span>\" are present and the first two are placed in the same row.\n</p>\n<pre>\nabcdef  ghijkl\n     mnop\nqrstuvw\n</pre>\n<p>\nThe editor has the following unique features.\n</p>\n<ol>\n   <li> A text segment without any supporting segments in the row immediately below it falls by the evil gravitational force.</li>\n   <li> Text segments in the same row and contiguous to each other are concatenated by the evil magnetic force.</li>\n</ol>\n<p>\nFor instance, if characters in the segment \"<span>mnop</span>\" in the previous example are deleted, the two segments on top of it fall and we have the following.\n</p>\n<pre>\nabcdef\nqrstuvw ghijkl\n</pre>\n\n<p>\nAfter that, if \"<span>x</span>\" is added at the tail (i.e., the right next of the rightmost column) of the segment \"<span>qrstuvw</span>\", the two segments in the bottom row are concatenated.\n</p>\n<pre>\nabcdef\nqrstuvwxghijkl\n</pre>\n<p>\nNow we have two text segments in this figure. By this way, the editor saves screen space but demands the users' extraordinary intellectual power.\n</p>\n<p>\nIn general, after a command execution, the following rules are applied, where <i>S</i> is a text segment, left(<i>S</i>) and right(<i>S</i>) are the leftmost and rightmost columns of <i>S</i>, respectively, and row(<i>S</i>) is the row number of <i>S</i>.\n</p>\n<ol>\n   <li> If the columns from left(<i>S</i>) to right(<i>S</i>) in the row numbered row(<i>S</i>)-1 (i.e., the row just below <i>S</i>) are empty (i.e., any characters of any text segments do not exist there), <i>S</i> is pulled down to row(<i>S</i>)-1 vertically, preserving its column position. If the same ranges in row(<i>S</i>)-2, row(<i>S</i>)-3, and so on are also empty, <i>S</i> is further pulled down again and again. This process terminates sooner or later since the editor has the ultimate bottom, the row whose number is zero.</li>\n   <li> If two text segments <i>S</i> and <i>T</i> are in the same row and right(<i>S</i>)+1 = left(<i>T</i>), that is, <i>T</i> starts at the right next column of the rightmost character of <i>S</i>, <i>S</i> and <i>T</i> are automatically concatenated to form a single text segment, which starts at left(<i>S</i>) and ends at right(<i>T</i>). Of course, the new segment is still in the original row.</li>\n</ol>\n<p>\nNote that any text segment has at least one character. Note also that the first rule is applied prior to any application of the second rule. This means that no concatenation may occur while falling segments exist. For instance, consider the following case.\n</p>\n<pre>\n   dddddddd\n   cccccccc\nbbbb\naaa\n</pre>\n\n<p>\nIf the last character of the text segment \"<span>bbbb</span>\" is deleted, the concatenation rule is not applied until the two segments \"<span>cccccccc</span>\" and \"<span>dddddddd</span>\" stop falling. This means that \"<span>bbb<span>\" and \"<span>cccccccc</span>\" are not concatenated.\n</p>\n<p>\nThe devil's editor has a cursor and it is always in a single text segment, which we call the current segment. The cursor is at some character position of the current segment or otherwise at its tail. Note that the cursor cannot be a support. For instance, in the previous example, even if the cursor is at the last character of \"<span>bbbb</span>\" and it stays at the same position after the deletion, it cannot support \"<span>cccccccc</span>\" and \"<span>dddddddd</span>\" any more by solely itself and thus those two segments shall fall. Finally, the cursor is at the leftmost \"<span>d</span>\"\n</p>\n<p>\nThe editor accepts the following commands, each represented by a single character.\n</p>\n<ul>\n    <li> F: Move the cursor forward (i.e., to the right) by one column in the current segment. If the cursor is at the tail of the current segment and thus it cannot move any more within the segment, an error occurs.</li>\n    <li> B: Move the cursor backward (i.e., to the left) by one column in the current segment. If the cursor is at the leftmost position of the current segment, an error occurs.</li>\n    <li> P: Move the cursor upward by one row. The column position of the cursor does not change. If the new position would be out of the legal cursor range of any existing text segment, an error occurs.</li>\n    <li> N: Move the cursor downward by one row. The column position of the cursor does not change. If the cursor is in the bottom row or the new position is out of the legal cursor range of any existing text segment, an error occurs.</li>\n    <li> D: Delete the character at the cursor position. If the cursor is at the tail of the current segment and so no character is there, an error occurs. If the cursor is at some character, it is deleted and the current segment becomes shorter by one character. Neither the beginning (i.e., leftmost) column of the current segment nor the column position of the cursor changes. However, if the current segment becomes empty, it is removed and the cursor falls by one row. If the new position would be out of the legal cursor range of any existing text segment, an error occurs.<br>\n\n      Note that after executing this command, some text segments may lose their supports and be pulled down toward the hell. If the current segment falls, the cursor also falls with it.</li>\n    <li> C: Create a new segment of length one immediately above the current cursor position. It consists of a copy of the character under the cursor. If the cursor is at the tail, an error occurs. Also if the the position of the new segment is already occupied by another segment, an error occurs. After executing the command, the created segment becomes the new current segment and the column position of the cursor advances to the right by one column.</li>\n    <li> Lowercase and numeric characters (`<span>a</span>' to `<span>z</span>' and `<span>0</span>' to `<span>9</span>'): Insert the character at the current cursor position. The current segment becomes longer by one character. The cursor moves forward by one column. The beginning column of the current segment does not change.</li>\n</ul>\n<p>\nOnce an error occurs, the entire editing session terminates abnormally. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input contains an integer that represents the number of editing sessions. Each of the following lines contains a character sequence, where the first character is the initial character and the rest represents a command sequence processed during a session. Each session starts with a single segment consisting of the initial character in the bottom row. The initial cursor position is at the tail of the segment. The editor processes each command represented by a character one by one in the manner described above.\n</p>\n<p>\nYou may assume that each command line is non-empty and its length is at most one hundred. A command sequence ends with a newline. \n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each editing session specified by the input, if it terminates without errors, your program should print the current segment at the completion of the session in a line. If an error occurs during the session, just print \"<span>ERROR</span>\" in capital letters in a line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3\n12BC3BC4BNBBDD5\naaaBCNBBBCb\naaaBBCbNBC\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n15234\naba\nERROR\n</pre>\n\n", "p00803": "\n<H1><font color=\"#000\">Problem A:</font> Starship Hakodate-maru</H1>\n\n<p>\nThe surveyor starship Hakodate-maru is famous for her two fuel containers with unbounded capacities. They hold the same type of atomic fuel balls.\n</p>\n<p>\nThere, however, is an inconvenience. The shapes of the fuel containers <i>#</i>1 and <i>#</i>2 are always cubic and regular tetrahedral respectively. Both of the fuel containers should be either empty or filled according to their shapes. Otherwise, the fuel balls become extremely unstable and may explode in the fuel containers. Thus, the number of fuel balls for the container <i>#</i>1 should be a cubic number (<i>n</i><sup>3</sup> for some <i>n</i> = 0, 1, 2, 3,... ) and that for the container <i>#</i>2 should be a tetrahedral number ( <i>n</i>(<i>n</i> + 1)(<i>n</i> + 2)/6 for some <i>n</i> = 0, 1, 2, 3,... ).\n</p>\n<p>\nHakodate-maru is now at the star base Goryokaku preparing for the next mission to create a precise and detailed chart of stars and interstellar matters. Both of the fuel containers are now empty. Commander Parus of Goryokaku will soon send a message to Captain Future of Hakodate-maru on how many fuel balls Goryokaku can supply. Captain Future should quickly answer to Commander Parus on how many fuel balls she requests before her ship leaves Goryokaku. Of course, Captain Future and her omcers want as many fuel balls as possible.\n</p>\n<p>\nFor example, consider the case Commander Parus offers 151200 fuel balls. If only the fuel container <i>#</i>1 were available (i.e. ifthe fuel container <i>#</i>2 were unavailable), at most 148877 fuel balls could be put into the fuel container since 148877 = 53 &times; 53 &times; 53 &lt; 151200 &lt; 54 &times; 54 &times; 54 . If only the fuel container <i>#</i>2 were available, at most 147440 fuel balls could be put into the fuel container since 147440 = 95 &times; 96 &times; 97/6 &lt; 151200 &lt; 96 &times; 97 &times; 98/6 . Using both of the fuel containers <i>#</i>1 and <i>#</i>2, 151200 fuel balls can be put into the fuel containers since 151200 = 39 &times; 39 &times; 39 + 81 &times; 82 &times; 83/6 . In this case, Captain Future's answer should be \"151200\".\n</p>\n<p>\nCommander Parus's offer cannot be greater than 151200 because of the capacity of the fuel storages of Goryokaku. Captain Future and her omcers know that well.\n</p>\n<p>\nYou are a fuel engineer assigned to Hakodate-maru. Your duty today is to help Captain Future with calculating the number of fuel balls she should request. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of at most 1024 positive integers. Each line contains a single integer. The sequence is followed by a zero, which indicates the end of data and should not be treated as input. You may assume that none of the input integers is greater than 151200.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output is composed of lines, each containing a single integer. Each output integer should be the greatest integer that is the sum of a nonnegative cubic number and a nonnegative tetrahedral number and that is not greater than the corresponding input number. No other characters should appear in the output.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n100\n64\n50\n20\n151200\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n99\n64\n47\n20\n151200\n</pre>\n", "p00804": "\n<H1><font color=\"#000\">Problem B:</font> e-Market</H1>\n\n<p>\nThe city of Hakodate recently established a commodity exchange market. To participate in the market, each dealer transmits through the Internet an order consisting of his or her name, the type of the order (buy or sell), the name of the commodity, and the quoted price.\n</p>\n<p>\nIn this market a deal can be made only if the price of a sell order is lower than or equal to the price of a buy order. The price of the deal is the mean of the prices of the buy and sell orders, where the mean price is rounded downward to the nearest integer. To exclude dishonest deals, no deal is made between a pair of sell and buy orders from the same dealer. The system of the market maintains the list of orders for which a deal has not been made and processes a new order in the following manner.\n</p>\n<ul>\n    <li> For a new sell order, a deal is made with the buy order with the highest price in the list satisfying the conditions. If there is more than one buy order with the same price, the deal is made with the earliest of them.</li>\n    <li> For a new buy order, a deal is made with the sell order with the lowest price in the list satisfying the conditions. If there is more than one sell order with the same price, the deal is made with the earliest of them.</li>\n</ul>\n<p>\nThe market opens at 7:00 and closes at 22:00 everyday. When the market closes, all the remaining orders are cancelled. To keep complete record of the market, the system of the market saves all the orders it received everyday.\n</p>\n<p>\nThe manager of the market asked the system administrator to make a program which reports the activity of the market. The report must contain two kinds of information. For each commodity the report must contain informationon the lowest, the average and the highest prices of successful deals. For each dealer, the report must contain information on the amounts the dealer paid and received for commodities. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input contains several data sets. Each data set represents the record of the market on one day. The first line of each data set contains an integer <i>n</i> (<i>n</i> &lt; 1000)  which is the number of orders in the record. Each line of the record describes an order, consisting of the name of the dealer, the type of the order, the name of the commodity, and the quoted price. They are separated by a single space character.\n</p>\n<p>\nThe name of a dealer consists of capital alphabetical letters and is less than 10 characters in length. The type of an order is indicated by a string, \"<span>BUY</span>\" or \"<span>SELL</span>\". The name of a commodity is a single capital letter. The quoted price is a positive integer less than 1000.\n</p>\n<p>\nThe orders in a record are arranged according to time when they were received and the first line of the record corresponds to the oldest order.\n</p>\n<p>\nThe end of the input is indicated by a line containing a zero. \n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output for each data set consists of two parts separated by a line containing two hyphen (`<span>-</span>') characters.\n</p>\n<p>\nThe first part is output for commodities. For each commodity, your program should output the name of the commodity and the lowest, the average and the highest prices of successful deals in one line. The name and the prices in a line should be separated by a space character. The average price is rounded downward to the nearest integer. The output should contain only the commodities for which deals are made and the order of the output must be alphabetic.\n</p>\n<p>\nThe second part is output for dealers. For each dealer, your program should output the name of the dealer, the amounts the dealer paid and received for commodities. The name and the numbers in a line should be separated by a space character. The output should contain all the dealers who transmitted orders. The order of dealers in the output must be lexicographic on their names. The lexicographic order is the order in which words in dictionaries are arranged.\n</p>\n<p>\nThe output for each data set should be followed by a linecontaining ten hyphen (`<span>-</span>') characters. \n</p>\n\n\n<H2>Sample Input</H2>\n<pre>\n3\nPERLIS SELL A 300\nWILKES BUY A 200\nHAMMING SELL A 100\n4\nBACKUS SELL A 10\nFLOYD BUY A 20\nIVERSON SELL B 30\nBACKUS BUY B 40\n7\nWILKINSON SELL A 500\nMCCARTHY BUY C 300\nWILKINSON SELL C 200\nDIJKSTRA SELL B 100\nBACHMAN BUY A 400\nDIJKSTRA BUY A 600\nWILKINSON SELL A 300\n2\nABCD SELL X 10\nABC BUY X 15\n2\nA SELL M 100\nA BUY M 100\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nA 150 150 150\n--\nHAMMING 0 150\nPERLIS 0 0\nWILKES 150 0\n----------\nA 15 15 15\nB 35 35 35\n--\nBACKUS 35 15\nFLOYD 15 0\nIVERSON 0 35\n----------\nA 350 450 550\nC 250 250 250\n--\nBACHMAN 350 0\nDIJKSTRA 550 0\nMCCARTHY 250 0\nWILKINSON 0 1150\n----------\nX 12 12 12\n--\nABC 12 0\nABCD 0 12\n----------\n--\nA 0 0\n----------\n</pre>\n\n", "p00806": "\n<H1><font color=\"#000\">Problem D:</font> 77377</H1>\n\n<p>\nAt the risk of its future, International Cellular Phones Corporation (ICPC) invests its resources in developing new mobile phones, which are planned to be equipped with Web browser, mailer, instant messenger, and many other advanced communication tools. Unless members of ICPC can complete this stiff job, it will eventually lose its market share.\n</p>\n<p>\nYou are now requested to help ICPC to develop intriguing text input software for small mobile terminals. As you may know, most phones today have twelve buttons, namely, ten number buttons from \"<span>0</span>\" to \"<span>9</span>\" and two special buttons \"<span>*</span>\" and \"<span>#</span>\". Although the company is very ambitious, it has decided to follow today's standards and conventions. You should not change the standard button layout, and should also pay attention to the following standard button assignment.\n</p>\n<table border=0>\n<tr>\n<td width=\"80\">button</td><td width=\"80\"> \tletters</td><td width=\"80\"> \tbutton </td><td width=\"80\">letters</td>\n</tr>\n<tr>\n<td>2 </td><td>\ta, b, c </td><td>\t6 </td><td>\tm, n, o</td>\n</tr>\n<tr>\n<td>3 </td><td>\td, e, f </td><td>\t7 </td><td>\tp, q, r, s</td>\n</tr>\n<tr>\n<td>4 </td><td>\tg, h, i \t</td><td>8 </td><td>\tt, u, v</td>\n</tr>\n<tr>\n<td>5 </td><td>\tj, k, l </td><td>\t9 </td><td>\tw, x, y, z</td>\n</tr>\n</table>\n\n<p>\nThis means that you can only use eight buttons for text input.\n</p>\n<p>\nMost users of current ICPC phones are rushed enough to grudge wasting time on even a single button press. Your text input software should be economical of users' time so that a single button press is suffcient for each character input. In consequence, for instance, your program should accept a sequence of button presses \"<span>77377</span>\" and produce the word \"<span>press</span>\". Similarly, it should translate \"<span>77377843288866</span>\" into \"press the button\".\n</p>\n<p>\n\nUmmm... It seems impossible to build such text input software since more than one English letter is represented by a digit!. For instance, \"<span>77377</span>\" may represent not only \"press\" but also any one of 768 (= 4 &times; 4 &times; 3 &times; 4 &times; 4) character strings. However, we have the good news that the new model of ICPC mobile phones has enough memory to keep a dictionary. You may be able to write a program that filters out <i>false words</i>, i.e., strings not listed in the dictionary. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple data sets, each of which represents a dictionary and a sequence of button presses in the following format.\n</p>\n<pre>\n<i>n</i>\n<i>word</i><sub>1</sub>\n.\n.\n.\n<i>word<sub>n</sub></i>\n<i>sequence</i>\n</pre>\n\n<p>\n<i>n</i> in the first line is a positive integer, representing the number of words in the dictionary. The next <i>n</i> lines, each representing a word in the dictionary, only contain lower case letters from `<span>a</span>' to `<span>z</span>'. The order of words in the dictionary is arbitrary (not necessarily in the lexicographic order). No words occur more than once in the dictionary. The last line, sequence, is the sequence of button presses, and only contains digits from `<span>2</span>' to `<span>9</span>'.\n</p>\n<p>\nYou may assume that a dictionary has at most one hundred words and that the length of each word is between one and fifty, inclusive. You may also assume that the number of input digits in the <i>sequence</i> is between one and three hundred, inclusive.\n</p>\n<p>\nA line containing a zero indicates the end of the input. \n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each data set, your program should print all sequences that can be represented by the input sequence of button presses. Each sequence should be a sequence of words in the dictionary, and should appear in a single line. The order of lines does not matter.\n</p>\n<p>\nTwo adjacent words in a line should be separated by a single space character and the last word should be followed by a single period (`<span>.</span>').\n</p>\n<p>\nFollowing those output lines, your program should also print a terminating line consisting solely of two hyphens (`<span>--</span>'). If there are no corresponding sequences of words, your program should only print the terminating line.\n</p>\n<p>\nYou may assume that for each data set the number of output lines is at most twenty, excluding the terminating line. \n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5\npush\npress\nthe\nbutton\nbottom\n77377843288866\n4\ni\nam\ngoing\ngo\n42646464\n3\na\nb\nc\n333\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\npress the button.\n--\ni am going.\ni am go go i.\n--\n--\n</pre>\n\n", "p00808": "\n<H1><font color=\"#000\">Problem F:</font> Young, Poor and Busy</H1>\n\n<p>\nKen and Keiko are young, poor and busy. Short explanation: they are students, and ridden with part-time jobs. To make things worse, Ken lives in Hakodate and Keiko in Tokyo. They want to meet, but since they have neither time nor money, they have to go back to their respective jobs immediately after, and must be careful about transportation costs. Help them find the most economical meeting point.\n</p>\n<p>\nKen starts from Hakodate, Keiko from Tokyo. They know schedules and fares for all trains, and can choose to meet anywhere including their hometowns, but they cannot leave before 8am and must be back by 6pm in their respective towns. Train changes take no time (one can leave the same minute he/she arrives), but they want to meet for at least 30 minutes in the same city. \n</p>\n<p>\nThere can be up to 100 cities and 2000 direct connections, so you should devise an algorithm clever enough for the task. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of data sets.\n</p>\n<p>\nThe first line of a data set contains a single integer, the number of connections in the timetable. It is not greater than 2000.\n</p>\n<p>\nConnections are given one on a line, in the following format.\n</p>\n<pre>\n     <i>Start_city HH</i>:<i>MM Arrival_city HH</i>:<i>MM price</i>\n</pre>\n<p>\n<i>Start_city</i> and <i>Arrival_city</i> are composed of up to 16 alphabetical characters, with only the first one in upper case. Departure and arrival times are given in hours and minutes (two digits each, separated by \":\") from 00:00 to 23:59. Arrival time is strictly after departure time. The <i>price</i> for one connection is an integer between 1 and 10000, inclusive. Fields are separated by spaces.\n</p>\n<p>\nThe end of the input is marked by a line containing a zero. \n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output should contain one integer for each data set, the lowest cost possible. This is the total fare of all connections they use.\n</p>\n<p>\nIf there is no solution to a data set, you should output a zero.\n</p>\n<p>\nThe solution to each data set should be given in a separate line. \n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5\nHakodate 08:15 Morioka 12:30 2500\nMorioka 14:05 Hakodate 17:30 2500\nMorioka 15:30 Hakodate 18:00 3000\nMorioka 14:30 Tokyo 17:50 3000\nTokyo 08:30 Morioka 13:35 3000\n4\nHakodate 08:15 Morioka 12:30 2500\nMorioka 14:04 Hakodate 17:30 2500\nMorioka 14:30 Tokyo 17:50 3000\nTokyo 08:30 Morioka 13:35 3000\n18\nHakodate 09:55 Akita 10:53 3840\nHakodate 14:14 Akita 16:09 1920\nHakodate 18:36 Akita 19:33 3840\nHakodate 08:00 Morioka 08:53 3550\nHakodate 22:40 Morioka 23:34 3550\nAkita 14:23 Tokyo 14:53 2010\nAkita 20:36 Tokyo 21:06 2010\nAkita 08:20 Hakodate 09:18 3840\nAkita 13:56 Hakodate 14:54 3840\nAkita 21:37 Hakodate 22:35 3840\nMorioka 09:51 Tokyo 10:31 2660\nMorioka 14:49 Tokyo 15:29 2660\nMorioka 19:42 Tokyo 20:22 2660\nMorioka 15:11 Hakodate 16:04 3550\nMorioka 23:03 Hakodate 23:56 3550\nTokyo 09:44 Morioka 11:04 1330\nTokyo 21:54 Morioka 22:34 2660\nTokyo 11:34 Akita 12:04 2010\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n11000\n0\n11090\n</pre>\n\n", "p00809": "\n<H1><font color=\"#000\">Problem G:</font> Nim</H1>\n\n<p>\nLet's play a traditional game Nim. You and I are seated across a table and we have a hundred stones on the table (we know the number of stones exactly). We play in turn and at each turn, you or I can remove one to four stones from the heap. You play first and the one who removed the last stone loses.\n</p>\n<p>\nIn this game, you have a winning strategy. To see this, you first remove four stones and leave 96 stones. No matter how I play, I will end up with leaving 92-95 stones. Then you will in turn leave 91 stones for me (verify this is always possible). This way, you can always leave 5<i>k</i> + 1 stones for me and finally I get the last stone, sigh. If we initially had 101 stones, on the other hand, I have a winning strategy and you are doomed to lose.\n</p>\n<p>\nLet's generalize the game a little bit. First, let's make it a team game. Each team has <i>n</i> players and the 2<i>n</i> players are seated around the table, with each player having opponents at both sides. Turns round the table so the two teams play alternately. Second, let's vary the maximum number ofstones each player can take. That is, each player has his/her own maximum number ofstones he/she can take at each turn (The minimum is always one). So the game is asymmetric and may even be unfair.\n</p>\n<p>\nIn general, when played between two teams of experts, the outcome of a game is completely determined by the initial number ofstones and the minimum number of stones each player can take at each turn. In other words, either team has a winning strategy.\n</p>\n<p>\nYou are the head-coach of a team. In each game, the umpire shows both teams the initial number of stones and the maximum number of stones each player can take at each turn. Your team plays first. Your job is, given those numbers, to instantaneously judge whether your team has a winning strategy.\n</p>\n<p>\nIncidentally, there is a rumor that Captain Future and her officers of Hakodate-maru love this game, and they are killing their time playing it during their missions. You wonder where the stones are?. Well, they do not have stones but do have plenty of balls in the fuel containers!. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of lines, followed by the last line containing a zero. Each line except the last is a sequence of integers and has the following format.\n</p>\n<pre>\n<i>n S</i> <i>M</i><sub>1</sub> <i>M</i><sub>2</sub>  ...  <i>M</i><sub>2<i>n</i></sub>\n</pre>\n<p>\nwhere <i>n</i> is the number of players in a team, <i>S</i> the initial number of stones, and <i>M<sub>i</sub></i> the maximum number of stones i th player can take. 1st, 3rd, 5th, ... players are your team's players and 2nd, 4th, 6th, ... the opponents. Numbers are separated by a single space character. You may assume 1 &le; <i>n</i> &le; 10, 1 &le; <i>M<sub>i</sub></i> &le; 16, and 1 &le; <i>S</i> &le; 2<sup>13</sup>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe out put should consist of lines each containing either a one, meaning your team has a winning strategy, or a zero otherwise.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n1 101 4 4\n1 100 4 4\n3 97 8 7 6 5 4 3\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0\n1\n1\n</pre>\n\n\n", "p00810": "\n<H1><font color=\"#000\">Problem H:</font> Super Star</H1>\n\n<p>\nDuring a voyage of the starship Hakodate-maru (see Problem A), researchers found strange synchronized movements of stars. Having heard these observations, Dr. Extreme proposed a theory of \"super stars\". Do not take this term as a description of actors or singers. It is a revolutionary theory in astronomy.\n</p>\n<p>\nAccording to this theory, stars we are observing are not independent objects, but only small portions of larger objects called super stars. A super star is filled with invisible (or transparent) material, and only a number of points inside or on its surface shine. These points are observed as stars by us.\n</p>\n<p>\nIn order to verify this theory, Dr. Extreme wants to build motion equations of super stars and to compare the solutions of these equations with observed movements of stars. As the first step, he assumes that a super star is sphere-shaped, and has the smallest possible radius such that the sphere contains all given stars in or on it. This assumption makes it possible to estimate the volume of a super star, and thus its mass (the density of the invisible material is known).\n</p>\n<p>\nYou are asked to help Dr. Extreme by writing a program which, given the locations of a number of stars, finds the smallest sphere containing all of them in or on it. In this computation, you should ignore the sizes of stars. In other words, a star should be regarded as a point. You may assume the universe is a Euclidean space. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple data sets. Each data set is given in the following format.\n</p>\n<pre>\n<i>n</i>\n<i>x</i><sub>1</sub> <i>y</i><sub>1</sub> <i>z</i><sub>1</sub>\n<i>x</i><sub>2</sub> <i>y</i><sub>2</sub> <i>z</i><sub>2</sub>\n...\n<i>x</i><sub><i>n</i></sub> <i>y</i><sub><i>n</i></sub> <i>z</i><sub><i>n</i></sub>\n</pre>\n\n<p>\nThe first line of a data set contains an integer <i>n</i>, which is the number of points. It satisfies the condition 4 &le; <i>n</i> &le; 30.\n</p>\n<p>\nThe locations of <i>n</i> points are given by three-dimensional orthogonal coordinates: (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>, <i>z<sub>i</sub></i>) (<i>i</i> = 1,..., <i>n</i>). Three coordinates of a point appear in a line, separated by a space character.\n</p>\n<p>\nEach value is given by a decimal fraction, and is between 0.0 and 100.0 (both ends inclusive). Points are at least 0.01 distant from each other.\n</p>\n<p>\nThe end of the input is indicated by a line containing a zero. \n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each data set, the radius ofthe smallest sphere containing all given points should be printed, each in a separate line. The printed values should have 5 digits after the decimal point. They may not have an error greater than 0.00001.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4\n10.00000 10.00000 10.00000\n20.00000 10.00000 10.00000\n20.00000 20.00000 10.00000\n10.00000 20.00000 10.00000\n4\n10.00000 10.00000 10.00000\n10.00000 50.00000 50.00000\n50.00000 10.00000 50.00000\n50.00000 50.00000 10.00000\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n7.07107\n34.64102\n</pre>\n\n", "p00811": "<H1><font color=\"#000\">Problem A:</font> Calling Extraterrestrial Intelligence Again</H1>\n\n<p>\nA message from humans to extraterrestrial intelligence was sent through the Arecibo radio telescope in Puerto Rico on the afternoon of Saturday November l6, l974. The message consisted of l679 bits and was meant to be translated to a rectangular picture with 23 &times; 73  pixels. Since both 23 and 73 are prime numbers, 23 &times; 73  is the unique possible size of the translated rectangular picture each edge of which is longer than l pixel. Of course, there was no guarantee that the receivers would try to translate the message to a rectangular picture. Even if they would, they might put the pixels into the rectangle incorrectly. The senders of the Arecibo message were optimistic.\n</p>\n<p>\nWe are planning a similar project. Your task in the project is to find the most suitable width and height of the translated rectangular picture. The term ``most suitable'' is defined as follows. An integer m greater than 4 is given. A positive fraction <i>a</i>/<i>b</i> less than or equal to 1 is also given. The area of the picture should not be greater than <i>m</i>. Both of the width and the height of the translated picture should be prime numbers. The ratio of the width to the height should not be less than <i>a</i>/<i>b</i> nor greater than 1. You should maximize the area of the picture under these constraints.\n</p>\n<p>\nIn other words, you will receive an integer <i>m</i> and a fraction <i>a</i>/<i>b</i> . It holds that <i>m</i> &gt; 4 and 0 &lt; <i>a</i>/<i>b</i> &le; 1 . You should find the pair of prime numbers <i>p</i>, <i>q</i> such that <i>pq</i> &le; <i>m</i> and <i>a</i>/<i>b</i> &le; <i>p</i>/<i>q</i> &le; 1 , and furthermore, the product <i>pq</i> takes the maximum value among such pairs of two prime numbers. You should report <i>p</i> and <i>q</i> as the \"most suitable\" width and height of the translated picture. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of at most 2000 triplets of positive integers, delimited by a space character in between. Each line contains a single triplet. The sequence is followed by a triplet of zeros, 0 0 0, which indicates the end of the input and should not be treated as data to be processed.\n</p>\n<p>\nThe integers of each input triplet are the integer <i>m</i>, the numerator <i>a</i>, and the denominator <i>b</i> described above, in this order. You may assume 4 &lt; <i>m</i> &lt; 100000 and 1 &le; <i>a</i> &le; <i>b</i> &le; 1000.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output is a sequence of pairs of positive integers. The <i>i</i>-th output pair corresponds to the <i>i</i>-th input triplet. The integers of each output pair are the width <i>p</i> and the height <i>q</i> described above, in this order.\n</p>\n<p>\nEach output line contains a single pair. A space character is put between the integers as a delimiter. No other characters should appear in the output. \n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5 1 2\n99999 999 999\n1680 5 16\n1970 1 1\n2002 4 11\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2 2\n313 313\n23 73\n43 43\n37 53\n</pre>\n\n\n", "p00812": "<H1><font color=\"#000\">Problem B:</font> Equals are Equals</H1>\n\n<p>\nMr. Simpson got up with a slight feeling of tiredness. It was the start of another day of hard work. A bunch of papers were waiting for his inspection on his desk in his office. The papers contained his students' answers to questions in his Math class, but the answers looked as if they were just stains of ink.\n</p>\n<p>\nHis headache came from the ``creativity'' of his students. They provided him a variety of ways to answer each problem. He has his own answer to each problem, which is correct, of course, and the best from his aesthetic point of view.\n</p>\n<p>\nSome of his students wrote algebraic expressions equivalent to the expected answer, but many of them look quite different from Mr. Simpson's answer in terms of their literal forms. Some wrote algebraic expressions not equivalent to his answer, but they look quite similar to it. Only a few of the students' answers were exactly the same as his.\n</p>\n<p>\nIt is his duty to check if each expression is mathematically equivalent to the answer he has prepared. This is to prevent expressions that are equivalent to his from being marked as ``incorrect'', even if they are not acceptable to his aesthetic moral.\n</p>\n<p>\nHe had now spent five days checking the expressions. Suddenly, he stood up and yelled, ``I've had enough! I must call for help.''\n</p>\n<p>\nYour job is to write a program to help Mr. Simpson to judge if each answer is equivalent to the ``correct'' one. Algebraic expressions written on the papers are multi-variable polynomials over variable symbols <i>a</i>, <i>b</i>,..., <i>z</i> with integer coefficients, e.g.,\n\n(<i>a</i> + <i>b</i><sup>2</sup>)(<i>a</i> - <i>b</i><sup>2</sup>), <i>ax</i><sup>2</sup> +2<i>bx</i> + <i>c</i> and (<i>x</i><sup>2</sup> +5<i>x</i> + 4)(<i>x</i><sup>2</sup> + 5<i>x</i> + 6) + 1.\n\n</p>\n<p>\nMr. Simpson will input every answer expression as it is written on the papers; he promises you that an algebraic expression he inputs is a sequence of terms separated by additive operators `<span>+</span>' and `<span>-</span>', representing the sum of the terms with those operators, if any; a term is a juxtaposition of multiplicands, representing their product; and a multiplicand is either (a) a non-negative integer as a digit sequence in decimal, (b) a variable symbol (one of the lowercase letters `<span>a</span>' to `<span>z</span>'), possibly followed by a symbol `<span>^</span>' and a non-zero digit, which represents the power of that variable, or (c) a parenthesized algebraic expression, recursively. Note that the operator `<span>+</span>' or `<span>-</span>' appears only as a binary operator and not as a unary operator to specify the sing of its operand.\n</p>\n<p>\nHe says that he will put one or more space characters before an integer if it immediately follows another integer or a digit following the symbol `<span>^</span>'. He also says he may put spaces here and there in an expression as an attempt to make it readable, but he will never put a space between two consecutive digits of an integer. He remarks that the expressions are not so complicated, and that any expression, having its `<span>-</span>'s replaced with `<span>+</span>'s, if any, would have no variable raised to its 10th power, nor coefficient more than a billion, even if it is fully expanded into a form of a sum of products of coefficients and powered variables. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input to your program is a sequence of blocks of lines. A block consists of lines, each containing an expression, and a terminating line. After the last block, there is another terminating line. A terminating line is a line solely consisting of a period symbol.\n</p>\n<p>\nThe first expression of a block is one prepared by Mr. Simpson; all that follow in a block are answers by the students. An expression consists of lowercase letters, digits, operators `<span>+</span>', `<span>-</span>' and `<span>^</span>', parentheses `<span>(</span>' and `<span>)</span>', and spaces. A line containing an expression has no more than 80 characters. \n</p>\n\n<H2>Output</H2>\n\n<p>\nYour program should produce a line solely consisting of ``<span>yes</span>'' or ``<span>no</span>'' for each answer by the students corresponding to whether or not it is mathematically equivalent to the expected answer. Your program should produce a line solely containing a period symbol after each block.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\na+b+c\n(a+b)+c\na- (b-c)+2\n.\n4ab\n(a - b) (0-b+a) - 1a ^ 2 - b ^ 2\n2 b 2 a\n.\n108 a\n2 2 3 3 3 a\n4 a^1 27\n.\n.\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nyes\nno\n.\nno\nyes\n.\nyes\nyes\n.\n</pre>\n\n\n", "p00817": "<H1><font color=\"#000\">Problem G:</font> True Liars</H1>\n\n<p>\nAfter having drifted about in a small boat for a couple of days, Akira Crusoe Maeda was finally cast ashore on a foggy island. Though he was exhausted and despaired, he was still fortunate to remember a legend of the foggy island, which he had heard from patriarchs in his childhood. This must be the island in the legend.\n</p>\n<p>\nIn the legend, two tribes have inhabited the island, one is divine and the other is devilish; once members of the divine tribe bless you, your future is bright and promising, and your soul will eventually go to Heaven; in contrast, once members of the devilish tribe curse you, your future is bleak and hopeless, and your soul will eventually fall down to Hell.\n</p>\n<p>\nIn order to prevent the worst-case scenario, Akira should distinguish the devilish from the divine. But how? They looked exactly alike and he could not distinguish one from the other solely by their appearances. He still had his last hope, however. The members of the divine tribe are truth-tellers, that is, they always tell the truth and those of the devilish tribe are liars, that is, they always tell a lie.\n</p>\n<p>\nHe asked some of the whether or not some are divine. They knew one another very much and always responded to him \"faithfully\" according to their individual natures (i.e., they always tell the truth or always a lie). He did not dare to ask any other forms of questions, since the legend says that a devilish member would curse a person forever when he did not like the question. He had another piece of useful information: the legend tells the populations of both tribes. These numbers in the legend are trustworthy since everyone living on this island is immortal and none have ever been born at least these millennia.\n</p>\n<p>\nYou are a good computer programmer and so requested to help Akira by writing a program that classifies the inhabitants according to their answers to his inquiries. \n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple data sets, each in the following format:\n</p>\n\n<pre>\n<i>n</i> <i>p</i><sub>1</sub> <i>p</i><sub>2</sub>\n<i>x</i><sub>1</sub> <i>y</i><sub>1</sub> <i>a</i><sub>1</sub>\n<i>x</i><sub>2</sub> <i>y</i><sub>2</sub> <i>a</i><sub>2</sub>\n...\n<i>x</i><sub><i>i</i></sub> <i>y</i><sub><i>i</i></sub> <i>a</i><sub><i>i</i></sub>\n...\n<i>x</i><sub><i>n</i></sub> <i>y</i><sub><i>n</i></sub> <i>a</i><sub><i>n</i></sub>\n</pre>\n\n<p>\nThe first line has three non-negative integers <i>n</i>, <i>p</i><sub>1</sub>, and <i>p</i><sub>2</sub>. <i>n</i> is the number of questions Akira asked. <i>p</i><sub>1</sub> and <i>p</i><sub>2</sub> are the populations of the divine and devilish tribes, respectively, in the legend. Each of the following <i>n</i> lines has two integers <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> and one word <i>a<sub>i</sub></i>. <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> are the identification numbers of inhabitants, each of which is between 1 and <i>p</i><sub>1</sub> + <i>p</i><sub>2</sub>, inclusive. <i>a<sub>i</sub></i> is either \"yes\", if the inhabitant <i>x<sub>i</sub></i> said that the inhabitant <i>y<sub>i</sub></i> was a member of the divine tribe, or \"no\", otherwise. Note that <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> can be the same number since \"are you a member of the divine tribe?\" is a valid question. Note also that two lines may have the same <i>x</i>'s and <i>y</i>'s since Akira was very upset and might have asked the same question to the same one more than once.\n</p>\n<p>\nYou may assume that <i>n</i> is less than 1000 and that <i>p</i><sub>1</sub> and <i>p</i><sub>2</sub> are less than 300. A line with three zeros, i.e., \"0 0 0\", represents the end of the input. You can assume that each data set is consistent and no contradictory answers are included. \n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each data set, if it includes sufficient information to classify all the inhabitants, print the identification numbers of all the divine ones in ascending order, one in a line. In addition, following the output numbers, print \"end\" in a line. Otherwise, i.e., if a given data set does not include sufficient information to identify all the divine members, print \"no\" in a line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2 1 1\n1 2 no\n2 1 no\n3 2 1\n1 1 yes\n2 2 yes\n3 3 yes\n2 2 1\n1 2 yes\n2 3 no\n5 4 3\n1 2 yes\n1 3 no\n4 5 yes\n5 6 yes\n6 7 no\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nno\nno\n1\n2\nend\n3\n4\n5\n6\nend\n</pre>\n\n\n", "p00825": "\n<H1><font color=\"#000\">Problem G:</font> Concert Hall Scheduling</H1>\n\n<p>\nYou are appointed director of a famous concert hall, to save it from bankruptcy. The hall is very\npopular, and receives many requests to use its two fine rooms, but unfortunately the previous\ndirector was not very efficient, and it has been losing money for many years. The two rooms are\nof the same size and arrangement. Therefore, each applicant wishing to hold a concert asks for\na room without specifying which. Each room can be used for only one concert per day.\n</p>\n<p>\nIn order to make more money, you have decided to abandon the previous fixed price policy, and\nrather let applicants specify the price they are ready to pay. Each application shall specify a\nperiod [<i>i</i>, <i>j</i>] and an asking price <i>w</i>, where <i>i</i> and <i>j</i> are respectively the first and last days of the\nperiod (1 &le; <i>i</i> &le; <i>j</i> &le; 365), and <i>w</i> is a positive integer in yen, indicating the amount the applicant\nis willing to pay to use a room for the whole period.\n</p>\n<p>\nYou have received applications for the next year, and you should now choose the applications\nyou will accept. Each application should be either accepted for its whole period or completely\nrejected. Each concert should use the same room during the whole applied period.\n</p>\n<p>\nConsidering the dire economic situation of the concert hall, artistic quality is to be ignored,\nand you should just try to maximize the total income for the whole year by accepting the most\nprofitable applications.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input has multiple data sets, each starting with a line consisting of a single integer n, the\nnumber of applications in the data set. Then, it is followed by <i>n</i> lines, each of which represents\none application with a period [<i>i</i>, <i>j</i>] and an asking price <i>w</i> yen in the following format.\n</p>\n<pre><i>\n        i j w\n</i></pre>\n<p>\nA line containing a single zero indicates the end of the input.\n</p>\n<p>\nThe maximum number of applications in a data set is one thousand, and the maximum asking\nprice is one million yen.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each data set, print a single line containing an integer, the maximum total income in yen\nfor the data set.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4\n1 2 10\n2 3 10\n3 3 10\n1 3 10\n6\n1 20 1000\n3 25 10000\n5 15 5000\n22 300 5500\n10 295 9000\n7 7 6000\n8\n32 251 2261\n123 281 1339\n211 235 5641\n162 217 7273\n22 139 7851\n194 198 9190\n119 274 878\n122 173 8640\n0\n\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n30\n25500\n38595\n</pre>\n\n", "p00836": "\n<H1><font color=\"#000\">Problem A:</font> Sum of Consecutive Prime Numbers</H1>\n\n<p>\nSome positive integers can be represented by a sum of one or more consecutive prime numbers.\nHow many such representations does a given positive integer have? For example, the integer 53\nhas two representations 5 + 7 + 11 + 13 + 17 and 53. The integer 41 has three representations\n2 + 3 + 5 + 7 + 11 + 13, 11 + 13 + 17, and 41. The integer 3 has only one representation, which is\n3. The integer 20 has no such representations. Note that summands must be consecutive prime\nnumbers, so neither 7 + 13 nor 3 + 5 + 5 + 7 is a valid representation for the integer 20.\n</p>\n<p>\nYour mission is to write a program that reports the number of representations for the given\npositive integer.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of positive integers each in a separate line. The integers are between 2\nand 10 000, inclusive. The end of the input is indicated by a zero.\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output should be composed of lines each corresponding to an input line except the last zero.\nAn output line includes the number of representations for the input integer as the sum of one\nor more consecutive prime numbers. No other characters should be inserted in the output.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n3\n17\n41\n20\n666\n12\n53\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n1\n2\n3\n0\n0\n1\n2\n</pre>\n\n", "p00848": "\n<H1><font color=\"#000\">Problem D:</font> Sum of Different Primes</H1>\n\n<p>\nA positive integer may be expressed as a sum of different prime numbers (primes), in one way or\nanother. Given two positive integers <i>n</i> and <i>k</i>, you should count the number of ways to express\n<i>n</i> as a sum of <i>k</i> different primes. Here, two ways are considered to be the same if they sum up\nthe same set of the primes. For example, 8 can be expressed as 3 + 5 and 5+ 3 but they are not\ndistinguished.\n</p>\n<p>\nWhen <i>n</i> and <i>k</i> are 24 and 3 respectively, the answer is two because there are two sets {2, 3, 19} and {2, 5, 17} whose sums are equal to 24. There are no other sets of three primes that sum up\nto 24. For <i>n</i> = 24 and <i>k</i> = 2, the answer is three, because there are three sets {5, 19}, {7,17} and {11, 13}. For <i>n</i> = 2 and <i>k</i> = 1, the answer is one, because there is only one set {2} whose\nsum is 2. For <i>n</i> = 1 and <i>k</i> = 1, the answer is zero. As 1 is not a prime, you shouldn't count\n{1}. For <i>n</i> = 4 and <i>k</i> = 2, the answer is zero, because there are no sets of two diffrent primes\nwhose sums are 4.\n</p>\n<p>\nYour job is to write a program that reports the number of such ways for the given <i>n</i> and <i>k</i>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets followed by a line containing two zeros separated by a space.\nA dataset is a line containing two positive integers <i>n</i> and <i>k</i> separated by a space. You may\nassume that <i>n</i> &le; 1120 and <i>k</i> &le; 14.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output should be composed of lines, each corresponding to an input dataset. An output\nline should contain one non-negative integer indicating the number of ways for <i>n</i> and <i>k</i> specified in the corresponding dataset. You may assume that it is less than 2<sup>31</sup>.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n24 3\n24 2\n2 1\n1 1\n4 2\n18 3\n17 1\n17 3\n17 4\n100 5\n1000 10\n1120 14\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2\n3\n1\n0\n0\n2\n1\n0\n1\n55\n200102899\n2079324314\n</pre>\n\n\n\n\n", "p00850": "\n<H1><font color=\"#000\">Problem F:</font> Power Calculus</H1>\n\n<p>\nStarting with <i>x</i> and repeatedly multiplying by <i>x</i>, we can compute <i>x</i><sup>31</sup> with thirty multiplications:\n</p>\n\n<center>\n<p>\n      <i>x</i><sup>2</sup> = <i>x</i> &times; <i>x</i>, <i>x</i><sup>3</sup> = <i>x</i><sup>2</sup> &times;  <i>x</i>, <i>x</i><sup>4</sup> = <i>x</i><sup>3</sup> &times; <i>x</i>, ... , <i>x</i><sup>31</sup> = <i>x</i><sup>30</sup> &times;  <i>x</i>.\n</p>\n</center>\n<p>\nThe operation of squaring can appreciably shorten the sequence of multiplications. The following is a way to compute x<sup>31</sup> with eight multiplications:\n</p>\n\n<center>\n<p>\n      <i>x</i><sup>2</sup> = <i>x</i> &times; <i>x</i>, <i>x</i><sup>3</sup> = <i>x</i><sup>2</sup> &times; <i>x</i>, <i>x</i><sup>6</sup> = <i>x</i><sup>3</sup> &times; <i>x</i><sup>3</sup>, <i>x</i><sup>7</sup> = <i>x</i><sup>6</sup> &times; <i>x</i>, <i>x</i><sup>14</sup> = <i>x</i><sup>7</sup> &times; <i>x</i><sup>7</sup>,<br>\n      <i>x</i><sup>15</sup> = <i>x</i><sup>14</sup> &times; <i>x</i>, <i>x</i><sup>30</sup> = <i>x</i><sup>15</sup> &times; <i>x</i><sup>15</sup>, <i>x</i><sup>31</sup> = <i>x</i><sup>30</sup> &times; <i>x</i>.\n</p>\n</center>\n\n<p>\nThis is not the shortest sequence of multiplications to compute <i>x</i><sup>31</sup>. There are many ways with only seven multiplications. The following is one of them:\n</p>\n\n<center>\n<p>\n      <i>x</i><sup>2</sup> = <i>x</i> &times; <i>x</i>, <i>x</i><sup>4</sup> = <i>x</i><sup>2</sup> &times; <i>x</i><sup>2</sup>, <i>x</i><sup>8</sup> = <i>x</i><sup>4</sup> &times; <i>x</i><sup>4</sup>, <i>x</i><sup>10</sup> = <i>x</i><sup>8</sup> &times; <i>x</i><sup>2</sup>,<br>\n      <i>x</i><sup>20</sup> = <i>x</i><sup>10</sup> &times; <i>x</i><sup>10</sup>, <i>x</i><sup>30</sup> = <i>x</i><sup>20</sup> &times; <i>x</i><sup>10</sup>, <i>x</i><sup>31</sup> = <i>x</i><sup>30</sup> &times; <i>x</i>.\n</p>\n</center>\n\n<p>\nThere however is no way to compute <i>x</i><sup>31</sup> with fewer multiplications. Thus this is one of the\nmost eficient ways to compute <i>x</i><sup>31</sup> only by multiplications.\n</p>\n\n<p>\nIf division is also available, we can find a shorter sequence of operations. It is possible to\ncompute <i>x</i><sup>31</sup> with six operations (five multiplications and one division):\n</p>\n\n<center>\n<p>\n      <i>x</i><sup>2</sup> = <i>x</i> &times; <i>x</i>, <i>x</i><sup>4</sup> = <i>x</i><sup>2</sup> &times; <i>x</i><sup>2</sup>, <i>x</i><sup>8</sup> = <i>x</i><sup>4</sup> &times; <i>x</i><sup>4</sup>, <i>x</i><sup>16</sup> = <i>x</i><sup>8</sup> &times; <i>x</i><sup>8</sup>, <i>x</i><sup>32</sup>  = <i>x</i><sup>16</sup> &times; <i>x</i><sup>16</sup>,<br>\n      <i>x</i><sup>31</sup> = <i>x</i><sup>32</sup> &divide; <i>x</i>.\n</p>\n</center>\n\n<p>\nThis is one of the most eficient ways to compute <i>x</i><sup>31</sup> if a division is as fast as a multiplication.\n</p>\n<p>\nYour mission is to write a program to find the least number of operations to compute <i>x<sup>n</sup></i>\nby multiplication and division starting with <i>x</i> for the given positive integer <i>n</i>. Products and\nquotients appearing in the sequence of operations should be <i>x</i> to a positive integer's power. In\nother words, <i>x</i><sup>-3</sup>, for example, should never appear.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of one or more lines each containing a single integer <i>n</i>. <i>n</i> is positive and\nless than or equal to 1000. The end of the input is indicated by a zero.\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nYour program should print the least total number of multiplications and divisions required to\ncompute <i>x<sup>n</sup></i> starting with <i>x</i> for the integer <i>n</i>. The numbers should be written each in a separate\nline without any superfluous characters such as leading or trailing spaces.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n1\n31\n70\n91\n473\n512\n811\n953\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0\n6\n8\n9\n11\n9\n13\n12\n</pre>\n\n\n\n\n", "p00852": "\n<H1><font color=\"#000\">Problem H:</font> The Best Name for Your Baby</H1>\n\n<p>\nIn the year 29XX, the government of a small country somewhere on the earth introduced a law restricting first names of the people only to traditional names in their culture, in order to preserve their cultural uniqueness. The linguists of the country specifies a set of rules once every year, and only names conforming to the rules are allowed in that year. In addition, the law also requires each person to use a name of a specific length calculated from one's birth date because\notherwise too many people would use the same very popular names. Since the legislation of that law, the common task of the parents of new babies is to find the name that comes first in the alphabetical order among the legitimate names of the given length because names earlier in the alphabetical order have various benefits in their culture.\n</p>\n<p>\nLegitimate names are the strings consisting of only lowercase letters that can be obtained by\nrepeatedly applying the rule set to the initial string \"S\", a string consisting only of a single uppercase S.\n</p>\n<p>\nApplying the rule set to a string is to choose one of the rules and apply it to the string. Each\nof the rules has the form <i>A</i> -&gt; <i>&alpha;</i>, where <i>A</i> is an uppercase letter and <i>&alpha;</i> is a string of lowercase and/or uppercase letters. Applying such a rule to a string is to replace an occurrence of the\nletter <i>A</i> in the string to the string <i>&alpha;</i>. That is, when the string has the form \"<i>&beta;A&gamma;</i>\", where <i>&beta;</i> and\n<i>&gamma;</i> are arbitrary (possibly empty) strings of letters, applying the rule rewrites it into the string \"<i>&beta;&alpha;&gamma;</i>\". If there are two or more occurrences of A in the original string, an arbitrary one of them\ncan be chosen for the replacement.\n</p>\n<p>\nBelow is an example set of rules.\n</p>\n\n<pre>\nS -&gt; aAB  (1)\nA -&gt;      (2)\nA -&gt; Aa   (3)\nB -&gt; AbbA (4)\n</pre>\n\n<p>\nApplying the rule (1) to \"S\", \"aAB\" is obtained. Applying (2) to it results in \"aB\", as A is replaced by an empty string. Then, the rule (4) can be used to make it \"aAbbA\". Applying (3) to the first occurrence of A makes it \"aAabbA\". Applying the rule (2) to the A at the end results in \"aAabb\". Finally, applying the rule (2) again to the remaining A results in \"aabb\". As no uppercase letter remains in this string, \"aabb\" is a legitimate name. \n</p>\n<p>\nWe denote such a rewriting process as follows.\n</p>\n\n<pre>\n  (1)     (2)    (4)       (3)        (2)       (2)\nS --&gt; aAB --&gt; aB --&gt; aAbbA --&gt; aAabbA --&gt; aAabb --&gt; aabb\n</pre>\n\n<p>\nLinguists of the country may sometimes define a ridiculous rule set such as follows.\n</p>\n\n<pre>\nS -&gt; sA (1)\nA -&gt; aS (2)\nB -&gt; b  (3)\n</pre>\n\n<p>\nThe only possible rewriting sequence with this rule set is:\n</p>\n\n\n<pre>\n  (1)    (2)     (1)      (2)\nS --&gt; sA --&gt; saS --&gt; sasA --&gt; ...\n</pre>\n\n<p>\nwhich will never terminate. No legitimate names exist in this case. Also, the rule (3) can never be used, as its left hand side, B, does not appear anywhere else.\n</p>\n<p>\nIt may happen that no rules are supplied for some uppercase letters appearing in the rewriting steps. In its extreme case, even S might have no rules for it in the set, in which case there are no legitimate names, of course. Poor nameless babies, sigh!\n</p>\n<p>\nNow your job is to write a program that finds the name earliest in the alphabetical order among the legitimate names of the given length conforming to the given set of rules.\n</p>\n\n\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets, followed by a line containing two zeros separated by a space representing the end of the input. Each dataset starts with a line including two integers <i>n</i> and <i>l</i> separated by a space, where <i>n</i> (1 &le; <i>n</i> &le; 50) is the number of rules and <i>l</i> (0 &le; <i>l</i> &le; 20) is the required length of the name. After that line, <i>n</i> lines each representing a rule follow. Each of these lines starts with one of uppercase letters, A to Z, followed by the character \"=\" (instead of \"-&gt;\") and then followed by the right hand side of the rule which is a string of letters A to\nZ and a to z. The length of the string does not exceed 10 and may be zero. There appears no space in the lines representing the rules.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output consists of the lines showing the answer to each dataset in the same order as the input. Each line is a string of lowercase letters, a to z, which is the first legitimate name conforming to the rules and the length given in the corresponding input dataset. When the given set of rules has no conforming string of the given length, the corresponding line in the output should show a single hyphen, \"-\". No other characters should be included in the output.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4 3\nA=a\nA=\nS=ASb\nS=Ab\n2 5\nS=aSb\nS=\n1 5\nS=S\n1 0\nS=S\n1 0\nA=\n2 0\nA=\nS=AA\n4 5\nA=aB\nA=b\nB=SA\nS=A\n4 20\nS=AAAAAAAAAA\nA=aA\nA=bA\nA=\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nabb\n-\n-\n-\n-\n\naabbb\naaaaaaaaaaaaaaaaaaaa\n</pre>\n\n\n\n\n", "p00853": "\n<H1><font color=\"#000\">Problem I:</font> Enjoyable Commutation</H1>\n\n<p>\nIsaac is tired of his daily trip to his ofice, using the same shortest route everyday. Although this saves his time, he must see the same scenery again and again. He cannot stand such a boring commutation any more.\n</p>\n<p>\nOne day, he decided to improve the situation. He would change his route everyday at least slightly. His new scheme is as follows. On the first day, he uses the shortest route. On the second day, he uses the second shortest route, namely the shortest except one used on the first day. In general, on the <i>k</i>-th day, the <i>k</i>-th shortest route is chosen. Visiting the same place twice on a route should be avoided, of course.\n</p>\n<p>\nYou are invited to help Isaac, by writing a program which finds his route on the <i>k</i>-th day. The problem is easily modeled using terms in the graph theory. Your program should find the <i>k</i>-th shortest path in the given directed graph.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n\n<pre>\n       <i>n    m    k    a   b</i>\n       <i>x</i><sub>1</sub>   <i>y</i><sub>1</sub>   <i>d</i><sub>1</sub>\n       <i>x</i><sub>2</sub>   <i>y</i><sub>2</sub>   <i>d</i><sub>2</sub>\n       ...\n       <i>x</i><sub><i>m</i></sub>   <i>y</i><sub><i>m</i></sub>   <i>d</i><sub><i>m</i></sub>\n</pre>\n\n<p>\nEvery input item in a dataset is a non-negative integer. Two or more input items in a line are separated by a space.\n</p>\n<p>\n<i>n</i> is the number of nodes in the graph. You can assume the inequality 2 &le; <i>n</i> &le; 50. <i>m</i> is the number of (directed) edges. <i>a</i> is the start node, and <i>b</i> is the goal node. They are between 1 and <i>n</i>, inclusive. You are required to find the <i>k</i>-th shortest path from <i>a</i> to <i>b</i>. You can assume 1 &le; <i>k</i> &le; 200 and <i>a</i> &ne; <i>b</i>.\n</p>\n<p>\nThe <i>i</i>-th edge is from the node <i>x<sub>i</sub></i> to <i>y<sub>i</sub></i> with the length <i>d<sub>i</sub></i> (1 &le; <i>i</i> &le; <i>m</i>). Both <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> are between 1 and <i>n</i>, inclusive. <i>d<sub>i</sub></i> is between 1 and 10000, inclusive. You can directly go from <i>x<sub>i</sub></i> to <i>y<sub>i</sub></i>, but not from <i>y<sub>i</sub></i> to <i>x<sub>i</sub></i> unless an edge from <i>y<sub>i</sub></i> to <i>x<sub>i</sub></i> is explicitly given. The edge connecting the same pair of nodes is unique, if any, that is, if <i>i</i> &ne; <i>j</i>, it is never the case that <i>x<sub>i</sub></i> equals <i>x<sub>j</sub></i> and <i>y<sub>i</sub></i> equals <i>y<sub>j</sub></i>. Edges are not connecting a node to itself, that is, <i>x<sub>i</sub></i> never equals <i>y<sub>i</sub></i> . Thus the inequality 0 &le; <i>m</i> &le; <i>n</i>(<i>n</i> - 1) holds.\n</p>\n\n<p>\nNote that the given graph may be quite unrealistic as a road network. Both the cases <i>m</i> = 0 and <i>m</i> = <i>n</i>(<i>n</i> - 1) are included in the judges' data.\n</p>\n<p>\nThe last dataset is followed by a line containing five zeros (separated by a space).\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset in the input, one line should be output as specified below. An output line should not contain extra characters such as spaces.\n</p>\n\n<p>\nIf the number of distinct paths from <i>a</i> to <i>b</i> is less than <i>k</i>, the string <span>None</span> should be printed. Note that the first letter of <span>None</span> is in uppercase, while the other letters are in lowercase.\n</p>\n\n<p>\nIf the number of distinct paths from <i>a</i> to <i>b</i> is <i>k</i> or more, the node numbers visited in the <i>k</i>-th shortest path should be printed in the visited order, separated by a hyphen (minus sign). Note that <i>a</i> must be the first, and <i>b</i> must be the last in the printed line.\n</p>\n\n<p>\nIn this problem the term <i>shorter</i> (thus <i>shortest</i> also) has a special meaning. A path <i>P</i> is defined to be shorter than <i>Q</i>, if and only if one of the following conditions holds.\n</p>\n\n<ol>\n    <li> The length of <i>P</i> is less than the length of <i>Q</i>. The length of a path is defined to be the sum of lengths of edges on the path.</li>\n    <li> The length of <i>P</i> is equal to the length of <i>Q</i>, and <i>P</i>'s sequence of node numbers comes earlier than <i>Q</i>'s in the dictionary order. Let's specify the latter condition more precisely. Denote <i>P</i>'s sequence of node numbers by <i>p</i><sub>1</sub>, <i>p</i><sub>2</sub>,..., <i>p<sub>s</sub></i>, and <i>Q</i>'s by <i>q</i><sub>1</sub>, <i>q</i><sub>2</sub>,..., <i>q<sub>t</sub></i>. <i>p</i><sub>1</sub> = <i>q</i><sub>1</sub> = <i>a</i> and <i>p<sub>s</sub></i> = <i>q<sub>t</sub></i> = <i>b</i> should be observed. The sequence <i>P</i> comes earlier than <i>Q</i> in the dictionary order, if for some <i>r</i> (1 &le; <i>r</i> &le; <i>s</i> and <i>r</i> &le; <i>t</i>), <i>p</i><sub>1</sub> = <i>q</i><sub>1</sub>,..., <i>p</i><sub><i>r</i>-1</sub> = <i>q</i><sub><i>r</i>-1</sub>, and <i>p<sub>r</sub></i> &lt; <i>q<sub>r</sub></i> (<i>p<sub>r</sub></i> is numerically smaller than <i>q<sub>r</sub></i>).\n</ol>\n\n<p>\nA path visiting the same node twice or more is not allowed.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5 20 10 1 5\n1 2 1\n1 3 2\n1 4 1\n1 5 3\n2 1 1\n2 3 1\n2 4 2\n2 5 2\n3 1 1\n3 2 2\n3 4 1\n3 5 1\n4 1 1\n4 2 1\n4 3 1\n4 5 2\n5 1 1\n5 2 1\n5 3 1\n5 4 1\n4 6 1 1 4\n2 4 2\n1 3 2\n1 2 1\n1 4 3\n2 3 1\n3 4 1\n3 3 5 1 3\n1 2 1\n2 3 1\n1 3 1\n0 0 0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1-2-4-3-5\n1-2-3-4\nNone\n</pre>\n\n<p>\nIn the case of the first dataset, there are 16 paths from the node 1 to 5. They are ordered as follows (The number in parentheses is the length of the path).\n</p>\n\n<pre>\n1 (3) 1-2-3-5          9 (5) 1-2-3-4-5\n2 (3) 1-2-5           10 (5) 1-2-4-3-5\n3 (3) 1-3-5           11 (5) 1-2-4-5\n4 (3) 1-4-3-5         12 (5) 1-3-4-5\n5 (3) 1-4-5           13 (6) 1-3-2-5\n6 (3) 1-5             14 (6) 1-3-4-2-5\n7 (4) 1-4-2-3-5       15 (6) 1-4-3-2-5\n8 (4) 1-4-2-5         16 (8) 1-3-2-4-5\n</pre>\n\n\n\n\n\n", "p00855": "\n<H1><font color=\"#000\">Problem B:</font> Prime Gap</H1>\n\n<p>\nThe sequence of <i>n</i> - 1 consecutive composite numbers (positive integers that are not prime and\nnot equal to 1) lying between two successive prime numbers <i>p</i> and <i>p</i> + <i>n</i> is called a <i>prime</i> gap of length <i>n</i>. For example, (24, 25, 26, 27, 28) between 23 and 29 is a prime gap of length 6.\n</p>\n<p>\nYour mission is to write a program to calculate, for a given positive integer <i>k</i>, the length of the prime gap that contains <i>k</i>. For convenience, the length is considered 0 in case no prime gap\ncontains <i>k</i>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of lines each of which contains a single positive integer. Each positive\ninteger is greater than 1 and less than or equal to the 100000th prime number, which is 1299709.\nThe end of the input is indicated by a line containing a single zero.\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output should be composed of lines each of which contains a single non-negative integer. It\nis the length of the prime gap that contains the corresponding positive integer in the input if it\nis a composite number, or 0 otherwise. No other characters should occur in the output.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n10\n11\n27\n2\n492170\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n4\n0\n6\n0\n114\n</pre>\n\n\n\n\n", "p00860": "\n<H1><font color=\"#000\">Problem G:</font> The Morning after Halloween</H1>\n\n<p>\nYou are working for an amusement park as an operator of an <i>obakeyashiki</i>, or a haunted house,\nin which guests walk through narrow and dark corridors. The house is proud of their lively\nghosts, which are actually robots remotely controlled by the operator, hiding here and there in\nthe corridors. One morning, you found that the ghosts are not in the positions where they are\nsupposed to be. Ah, yesterday was Halloween. Believe or not, paranormal spirits have moved\nthem around the corridors in the night. You have to move them into their right positions before\nguests come. Your manager is eager to know how long it takes to restore the ghosts.\n</p>\n\n<p>\nIn this problem, you are asked to write a program that, given a floor map of a house, finds the\nsmallest number of steps to move all ghosts to the positions where they are supposed to be.\n</p>\n\n<p>\nA floor consists of a matrix of square cells. A cell is either a wall cell where ghosts cannot move\ninto or a corridor cell where they can.\n</p>\n\n<p>\nAt each step, you can move any number of ghosts simultaneously. Every ghost can either stay\nin the current cell, or move to one of the corridor cells in its 4-neighborhood (i.e. immediately\nleft, right, up or down), if the ghosts satisfy the following conditions:\n</p>\n\n<ol>\n<li> No more than one ghost occupies one position at the end of the step.</li>\n<li> No pair of ghosts exchange their positions one another in the step.</li>\n</ol>\n\n\n<p>\nFor example, suppose ghosts are located as shown in the following (partial) map, where a sharp sign ('<span>#</span></i>) represents a wall cell and 'a', 'b', and 'c' ghosts.\n</p>\n<pre>\n                                                 ####\n                                                  ab#\n                                                 #c##\n                                                 ####\n</pre>\n\n<p>\nThe following four maps show the only possible positions of the ghosts after one step.\n</p>\n\n<pre>\n                                   ####      ####     ####     ####\n                                    ab#      a b#     acb#     ab #\n                                   #c##      #c##     # ##     #c##\n                                   ####      ####     ####     ####\n</pre>\n\n\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of at most 10 datasets, each of which represents a floor map of a house. The format of a dataset is as follows.\n</p>\n\n<pre>\n<i>w h n</i>\n<i>c</i><sub>11</sub><i>c</i><sub>12</sub>...<i>c</i><sub>1<i>w</i></sub>\n<i>c</i><sub>21</sub><i>c</i><sub>22</sub>...<i>c</i><sub>2<i>w</i></sub>\n. . ..       .\n..           .\n          .\n..           .\n<i>c</i><sub><i>h</i>1</sub><i>c</i><sub><i>h</i>2</sub>...<i>c</i><sub><i>h</i><i>w</i></sub>\n</pre>\n\n<p>\n<i>w</i>, <i>h</i> and <i>n</i> in the first line are integers, separated by a space. <i>w</i> and <i>h</i> are the floor width\nand height of the house, respectively. <i>n</i> is the number of ghosts. They satisfy the following constraints.\n</p>\n<center>\n<p>\n                            4 &le; <i>w</i> &le; 16\n</p>\n<p>\n      4 &le; <i>h</i> &le; 16\n</p>\n<p>\n      1 &le; <i>n</i> &le; 3\n</p>\n</center>\n\n<p>\nSubsequent <i>h</i> lines of <i>w</i> characters are the floor map. Each of <i>c<sub>ij</sub></i> is either:\n</p>\n\n<ul>\n    <li>a '<span>#</span>' representing a wall cell,</li>\n   <li> a lowercase letter representing a corridor cell which is the initial position of a ghost,</li>\n   <li> an uppercase letter representing a corridor cell which is the position where the ghost corresponding to its lowercase letter is supposed to be, or</li>\n   <li> a space representing a corridor cell that is none of the above.</li>\n</ul>\n\n<p>\nIn each map, each of the first <i>n</i> letters from a and the first n letters from A appears once and\nonly once. Outermost cells of a map are walls; i.e. all characters of the first and last lines are\nsharps; and the first and last characters on each line are also sharps. All corridor cells in a\nmap are connected; i.e. given a corridor cell, you can reach any other corridor cell by following\ncorridor cells in the 4-neighborhoods. Similarly, all wall cells are connected. Any 2 &times; 2 area on\nany map has at least one sharp. You can assume that every map has a sequence of moves of ghosts that restores all ghosts to the positions where they are supposed to be.\n</p>\n<p>\nThe last dataset is followed by a line containing three zeros separated by a space.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset in the input, one line containing the smallest number of steps to restore ghosts\ninto the positions where they are supposed to be should be output. An output line should not\ncontain extra characters such as spaces.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5 5 2\n#####\n#A#B#\n#   #\n#b#a#\n#####\n16 4 3\n################\n## ########## ##\n#    ABCcba    #\n################\n16 16 3\n################\n### ##    #   ##\n##  #  ##   # c#\n#  ## ########b#\n# ##  # #   #  #\n#  # ##   # # ##\n##  a#  # # #  #\n### ## #### ## #\n##   #   #  #  #\n#  ##### # ## ##\n####   #B# #   #\n##  C#   #   ###\n#  # # ####### #\n# ######  A##  #\n#        #    ##\n################\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n7\n36\n77\n</pre>\n\n\n\n\n", "p00862": "\n<H1><font color=\"#000\">Problem I:</font> Most Distant Point from the Sea</H1>\n\n<p>\nThe main land of Japan called Honshu is an island surrounded by the sea. In such an island, it\nis natural to ask a question: \"Where is the most distant point from the sea?\" The answer to\nthis question for Honshu was found in 1996. The most distant point is located in former Usuda\nTown, Nagano Prefecture, whose distance from the sea is 114.86 km.\n</p>\n\n<p>\nIn this problem, you are asked to write a program which, given a map of an island, finds the\nmost distant point from the sea in the island, and reports its distance from the sea. In order to\nsimplify the problem, we only consider maps representable by convex polygons.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset represents a map of an island, which is a convex polygon. The format of a dataset is as follows.\n</p>\n<pre>\n<i>n</i>\n<i>x</i><sub>1</sub>    <i>y</i><sub>1</sub>\n   .\n   .\n   .\n<i>x</i><sub><i>n</i></sub>    <i>y</i><sub><i>n</i></sub>\n</pre>\n\n<p>\nEvery input item in a dataset is a non-negative integer. Two input items in a line are separated by a space.\n</p>\n<p>\n<i>n</i> in the first line is the number of vertices of the polygon, satisfying 3 &le; <i>n</i> &le; 100. Subsequent\n<i>n</i> lines are the <i>x</i>- and <i>y</i>-coordinates of the <i>n</i> vertices. Line segments (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>) - (<i>x</i><sub><i>i</i>+1</sub>, <i>y</i><sub><i>i</i>+1</sub>) (1 &le; <i>i</i> &le; <i>n</i> - 1) and the line segment (<i>x<sub>n</sub></i>, <i>y<sub>n</sub></i>) - (<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>) form the border of the polygon in counterclockwise order. That is, these line segments see the inside of the polygon in the left of their directions. All coordinate values are between 0 and 10000, inclusive.\n</p>\n\n<p>\nYou can assume that the polygon is simple, that is, its border never crosses or touches itself. As stated above, the given polygon is always a convex one.\n</p>\n\n<p>\nThe last dataset is followed by a line containing a single zero.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset in the input, one line containing the distance of the most distant point from\nthe sea should be output. An output line should not contain extra characters such as spaces.\n</p>\n\n<p>\nThe answer should not have an error greater than 0.00001 (10<sup>-5</sup> ). You may output any number\nof digits after the decimal point, provided that the above accuracy condition is satisfied.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4\n0 0\n10000 0\n10000 10000\n0 10000\n3\n0 0\n10000 0\n7000 1000\n6\n0 40\n100 20\n250 40\n250 70\n100 90\n0 70\n3\n0 0\n10000 10000\n5000 5001\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n5000.000000\n494.233641\n34.542948\n0.353553\n</pre>\n\n\n\n\n", "p00865": "\n<H1><font color=\"#000\">Problem B:</font> Expected Allowance</H1>\n\n<p>\nHideyuki is allowed by his father Ujisato some 1000 yen bills every month for his pocket money.\nIn the first day of every month, the number of bills is decided as follows. Ujisato prepares <i>n</i>\npieces of <i>m</i>-sided dice and declares the cutback <i>k</i>. Hideyuki rolls these dice. The number of\nbills given is the sum of the spots of the rolled dice decreased by the cutback. Fortunately to\nHideyuki, Ujisato promises him to give at least one bill, even if the sum of the spots does not\nexceed the cutback. Each of the dice has spots of 1 through m inclusive on each side, and the\nprobability of each side is the same.\n</p>\n<p>\nIn this problem, you are asked to write a program that finds the expected value of the number\nof given bills.\n</p>\n\n<p>\nFor example, when <i>n</i> = 2, <i>m</i> = 6 and <i>k</i> = 3, the probabilities of the number of bills being 1, 2, 3, 4, 5, 6, 7, 8 and 9 are 1/36 + 2/36 + 3/36, 4/36, 5/36, 6/36, 5/36, 4/36, 3/36, 2/36 and 1/36, respectively.\n</p>\n<p>\nTherefore, the expected value is\n</p>\n\n<p>\n(1/36 + 2/36 + 3/36) &times; 1 + 4/36 &times; 2 + 5/36 &times; 3 + 6/36 &times; 4 + 5/36 &times; 5 + 4/36 &times 6 + 3/36 &times 7 + 2/36 &times 8 + 1/36 &times 9, which is approximately 4.11111111.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of lines each of which contains three integers n, m and k in this order.\nThey satisfy the following conditions.\n</p>\n\n<p>\n1 &le; <i>n</i><br>\n2 &le; <i>m</i><br>\n0 &le; <i>k</i> &lt; <i>nm</i><br>\n<i>nm</i> &times; <i>m<sup>n</sup></i> &lt 100000000 (10<sup>8</sup>)<br>\n</p>\n\n<p>\nThe end of the input is indicated by a line containing three zeros.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output should be comprised of lines each of which contains a single decimal fraction. It is\nthe expected number of bills and may have an error less than 10<sup>-7</sup> . No other characters should\noccur in the output.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2 6 0\n2 6 3\n3 10 9\n13 3 27\n1 2008 3\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n7.00000000\n4.11111111\n7.71000000\n1.42902599\n1001.50298805\n</pre>\n\n\n", "p00866": "\n<H1><font color=\"#000\">Problem C:</font> Stopped Watches</H1>\n\n<p>\nIn the middle of Tyrrhenian Sea, there is a small volcanic island called Chronus. The island\nis now uninhabited but it used to be a civilized island. Some historical records imply that the\nisland was annihilated by an eruption of a volcano about 800 years ago and that most of the\npeople in the island were killed by pyroclastic flows caused by the volcanic activity. In 2003, a\nEuropean team of archaeologists launched an excavation project in Chronus Island. Since then,\nthe project has provided many significant historic insights. In particular the discovery made\nin the summer of 2008 astonished the world: the project team excavated several mechanical\nwatches worn by the victims of the disaster. This indicates that people in Chronus Island had\nsuch a highly advanced manufacturing technology.\n</p>\n<p>\nShortly after the excavation of the watches, archaeologists in the team tried to identify what\ntime of the day the disaster happened, but it was not successful due to several difficulties. First,\nthe extraordinary heat of pyroclastic flows severely damaged the watches and took away the\nletters and numbers printed on them. Second, every watch has a perfect round form and one\ncannot tell where the top of the watch is. Lastly, though every watch has three hands, they\nhave a completely identical look and therefore one cannot tell which is the hour, the minute,\nor the second (It is a mystery how the people in Chronus Island were distinguishing the three hands. Some archaeologists\nguess that the hands might be painted with different colors, but this is only a hypothesis, as the paint was lost\nby the heat.\n). This means that we cannot decide the time indicated by a watch uniquely;\nthere can be a number of candidates. We have to consider different rotations of the watch.\nFurthermore, since there are several possible interpretations of hands, we have also to consider\nall the permutations of hands.\n</p>\n<p>\nYou are an information archaeologist invited to the project team and are asked to induce the\nmost plausible time interval within which the disaster happened, from the set of excavated\nwatches.\n</p>\n<p>\nIn what follows, we express a time modulo 12 hours. We write a time by the notation <i>hh</i>:<i>mm</i>:<i>ss</i>,\nwhere <i>hh</i>, <i>mm</i>, and <i>ss</i> stand for the hour (<i>hh</i> = 00, 01, 02, . . . , 11), the minute (<i>mm</i> = 00,\n01, 02, . . . , 59), and the second (<i>ss</i> = 00, 01, 02, . . . , 59), respectively. The time starts from\n00:00:00 and counts up every second 00:00:00, 00:00:01, 00:00:02, . . ., but it reverts to 00:00:00\nevery 12 hours.\n</p>\n<p>\nThe watches in Chronus Island obey the following conventions of modern analog watches.\n</p>\n\n<ul>\n<li>A watch has three hands, i.e. the hour hand, the minute hand, and the second hand,\nthough they look identical as mentioned above.</li>\n<li>Every hand ticks 6 degrees clockwise in a discrete manner. That is, no hand stays between\nticks, and each hand returns to the same position every 60 ticks.</li>\n<li>The second hand ticks every second.</li>\n<li>The minute hand ticks every 60 seconds.</li>\n<li>The hour hand ticks every 12 minutes.</li>\n</ul>\n\n<p>\nAt the time 00:00:00, all the three hands are located at the same position.\n</p>\n<p>\nBecause people in Chronus Island were reasonably keen to keep their watches correct and pyroclastic flows spread over the island quite rapidly, it can be assumed that all the watches were\nstopped in a short interval of time. Therefore it is highly expected that the time the disaster\nhappened is in the shortest time interval within which all the excavated watches have at least\none candidate time.\n</p>\n<p>\nYou must calculate the shortest time interval and report it to the project team.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets, each of which is formatted as follows.\n</p>\n<p>\n      <i>n</i><br>\n       <i>s<sub>1</sub> t<sub>1</sub> u<sub>1</sub></i><br>\n       <i>s<sub>2</sub> t<sub>2</sub> u<sub>2</sub></i><br>\n            .<br>\n            .<br>\n            .<br>\n       <i>s<sub>n</sub> t<sub>n</sub> u<sub>n</sub></i><br>\n</p>\n<p>\nThe first line contains a single integer <i>n</i> (2 &le; <i>n</i> &le; 10), representing the number of the watches.\nThe three numbers <i>s<sub>i</sub></i> , <i>t<sub>i</sub></i> , <i>u<sub>i</sub></i> in each line are integers such that 0 &le; <i>s<sub>i</sub></i> ,<i>t<sub>i</sub></i> , <i>u<sub>i</sub></i> &le; 59 and they specify\nthe positions of the three hands by the number of ticks relative to an arbitrarily chosen position.\n</p>\n<p>\nNote that the positions of the hands of a watch can be expressed in many different ways. For\nexample, if a watch was stopped at the time 11:55:03, the positions of hands can be expressed\ndifferently by rotating the watch arbitrarily (e.g. 59 55 3, 0 56 4, 1 57 5, etc.) and as well by\npermuting the hour, minute, and second hands arbitrarily (e.g. 55 59 3, 55 3 59, 3 55 59, etc.).\n</p>\n<p>\nThe end of the input is indicated by a line containing a single zero.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the shortest time interval within which all the watches given in the\ndataset have at least one candidate time. The output must be written in a single line in the\nfollowing format for each dataset.\n</p>\n<p>\n       <i>hh</i>:<i>mm</i>:<i>ss</i> <i>h'h'</i>:<i>m'm'</i>:<i>s's'</i>\n</p>\n\n<p>\nEach line contains a pair of times <i>hh</i>:<i>mm</i>:<i>ss</i> and, <i>h'h'</i>:<i>m'm'</i>:<i>s's'</i> indicating that the shortest\ninterval begins at hh:mm:ss and ends at <i>h'h'</i>:<i>m'm'</i>:<i>s's'</i> inclusive. The beginning time and the\nending time are separated by a single space and each of them should consist of hour, minute,\nand second in two digits separated by colons. No extra characters should appear in the output.\n</p>\n<p>\nIn calculating the shortest interval, you can exploit the facts that every watch has at least one\ncandidate time and that the shortest time interval contains 00:00:00 only if the interval starts\nfrom 00:00:00 (i.e. the shortest interval terminates before the time reverts to 00:00:00).\n</p>\n<p>\nIf there is more than one time interval that gives the shortest, output the one that first comes\nafter 00:00:00 inclusive.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3\n8 8 18\n32 32 32\n57 2 57\n5\n49 3 49\n7 30 44\n27 21 21\n33 56 56\n21 46 4\n3\n45 52 28\n36 26 36\n20 55 50\n10\n33 8 39\n50 57 43\n35 21 12\n21 17 11\n16 21 58\n45 40 53\n45 30 53\n39 1 8\n55 48 30\n7 48 15\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n00:00:00 00:00:10\n06:14:56 06:32:09\n07:27:37 07:32:02\n05:17:40 05:21:03\n</pre>\n\n\n", "p00870": "\n<H1><font color=\"#000\">Problem G:</font> Search of Concatenated Strings</H1>\n\n<p>\nThe amount of information on the World Wide Web is growing quite rapidly. In this information\nexplosion age, we must survive by accessing only the Web pages containing information relevant\nto our own needs. One of the key technologies for this purpose is keyword search. By using\nwell-known search engines, we can easily access those pages containing useful information about\nthe topic we want to know.\n</p>\n<p>\nThere are many variations in keyword search problems. If a single string is searched in a given\ntext, the problem is quite easy. If the pattern to be searched consists of multiple strings, or\nis given by some powerful notation such as regular expressions, the task requires elaborate\nalgorithms to accomplish efficiently.\n</p>\n<p>\nIn our problem, a number of strings (element strings) are given, but they are not directly\nsearched for. Concatenations of all the element strings in any order are the targets of the search\nhere.\n</p>\n<p>\nFor example, consider three element strings aa, b and ccc are given. In this case, the following\nsix concatenated strings are the targets of the search, i.e. they should be searched in the text.\n</p>\n\n<pre align=\"center\">\naabccc\naacccb\nbaaccc\nbcccaa\ncccaab\ncccbaa\n</pre>\n\n<p>\nThe text may contain several occurrences of these strings. You are requested to count the\nnumber of occurrences of these strings, or speaking more precisely, the number of positions of\noccurrences in the text.\n</p>\n<p>\nTwo or more concatenated strings may be identical. In such cases, it is necessary to consider\nsubtle aspects of the above problem statement. For example, if two element strings are x and\nxx, the string xxx is an occurrence of both the concatenation of x and xx and that of xx and x.\nSince the number of positions of occurrences should be counted, this case is counted as one, not\ntwo.\n</p>\n<p>\nTwo occurrences may overlap. For example, the string xxxx has occurrences of the concatenation\nxxx in two different positions. This case is counted as two.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a number of datasets, each giving a set of element strings and a text. The\nformat of a dataset is as follows.\n</p>\n\n<pre>\n<i>n m</i>\n<i>e</i><sub>1</sub>\n<i>e</i><sub>2</sub>\n.\n.\n.\n<i>e</i><sub>n</sub>\n<i>t</i><sub>1</sub>\n<i>t</i><sub>2</sub>\n.\n.\n.\n<i>t</i><sub>m</sub>\n</pre>\n\n<p>\nThe first line contains two integers separated by a space. <i>n</i> is the number of element strings. <i>m</i>\nis the number of lines used to represent the text. <i>n</i> is between 1 and 12, inclusive.\n</p>\n<p>\nEach of the following n lines gives an element string. The length (number of characters) of an\nelement string is between 1 and 20, inclusive.\nThe last <i>m</i> lines as a whole give the text. Since it is not desirable to have a very long line, the\ntext is separated into m lines by newlines, but these newlines should be ignored. They are not\nparts of the text. The length of each of these lines (not including the newline) is between 1 and\n100, inclusive. The length of the text is between 1 and 5000, inclusive.\n</p>\n<p>\nThe element strings and the text do not contain characters other than lowercase letters.\n</p>\n<p>\nThe end of the input is indicated by a line containing two zeros separated by a space.\n</p>\n<p>\n<b>CAUTION!</b> Although the sample input contains only small datasets, note that 12! &times; 5000 is far larger than 2<sup>31</sup> .\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset in the input, one line containing the number of matched positions should be\noutput. An output line should not contain extra characters.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 1\naa\nb\nccc\naabccczbaacccbaazaabbcccaa\n3 1\na\nb\nc\ncbbcbcbabaacabccaccbaacbccbcaaaccccbcbcbbcacbaacccaccbbcaacbbabbabaccc\n3 4\naaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n0 0\n\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n5\n12\n197\n</pre>\n\n\n", "p00875": "\n<H1><font color=\"#000\">Problem B:</font> Repeated Substitution with Sed</H1>\n\n<p>\nDo you know \"sed,\" a tool provided with Unix? Its most popular use is to substitute every\noccurrence of a string <i.&alpha;</i> contained in the input string (actually each input line) with another\nstring <i>&beta;</i>. More precisely, it proceeds as follows.\n</p>\n\n<ol>\n   <li> Within the input string, every non-overlapping (but possibly adjacent) occurrences of <i>&alpha;</i> are\n      marked. If there is more than one possibility for non-overlapping matching, the leftmost\n      one is chosen.</li>\n   <li> Each of the marked occurrences is substituted with <i>&beta;</i> to obtain the output string; other\n      parts of the input string remain intact.</li>\n</ol>\n\n<p>\nFor example, when <i>&alpha;</i> is \"<span>aa</span>\" and <i>&beta;</i> is \"<span>bca</span>\", an input string \"<span>aaxaaa</span>\" will produce \"<span>bcaxbcaa</span>\",\nbut not \"<span>aaxbcaa</span>\" nor \"<span>bcaxabca</span>\". Further application of the same substitution to the string\n\"<span>bcaxbcaa</span>\" will result in \"<spna>bcaxbcbca</span>\", but this is another substitution, which is counted as the\nsecond one.\n</p>\n<p>\nIn this problem, a set of substitution pairs (<i>&alpha;<sub>i</sub></i>, <i>&beta;<sub>i</sub></i>) (<i>i</i> = 1, 2, ... , <i>n</i>), an initial string <i>&gamma;</i>, and a\nfinal string <i>&delta;</i> are given, and you must investigate how to produce <i>&delta;</i> from <i>&gamma;</i> with a minimum\nnumber of substitutions. A single substitution (<i>&alpha;<sub>i</sub></i>, <i>&beta;<sub>i</sub></i>) here means simultaneously substituting\nall the non-overlapping occurrences of <i>&alpha;<sub>i</sub></i>, in the sense described above, with <i>&beta;<sub>i</sub></i>.\n</p>\n\n<p>\nYou may use a specific substitution (<i>&alpha;<sub>i</sub></i>, <i>&beta;<sub>i</sub></i> ) multiple times, including zero times.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n\n<p>\n      <i>n</i><br>\n      <i>&alpha;</i><sub>1</sub> <i>&beta;</i><sub>1</sub><br>\n      <i>&alpha;</i><sub>2</sub> <i>&beta;</i><sub>2</sub><br>\n      .<br>\n      .<br>\n      .<br>\n      <i>&alpha;</i><sub><i>n</i></sub> <i>&beta;</i><sub><i>n</i></sub><br>\n      <i>&gamma;</i></br>\n      <i>&delta;</i></br>\n</p>\n\n<p>\n<i>n</i> is a positive integer indicating the number of pairs. <i>&alpha;<sub>i</sub></i> and <i>&beta;<sub>i</sub></i> are separated by a single space.\nYou may assume that 1 &le; |<i>&alpha;<sub>i</sub></i>| &lt; |<i>&beta;<sub>i</sub></i>| &le; 10 for any <i>i</i> (|<i>s</i>| means the length of the string <i>s</i>),\n\n<i>&alpha;<sub>i</sub></i> &ne; <i>&alpha;<sub>j</sub></i> for any <i>i</i> &ne; <i>j</i>, <i>n</i> &le; 10 and 1 &le; |<i>&gamma;</i>| &lt; |<i>&delta;</i>| &le; 10. All the strings consist solely of lowercase\nletters. The end of the input is indicated by a line containing a single zero.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the minimum number of substitutions to obtain <i>&delta;</i> from <i>&gamma;</i>. If <i>&delta;</i> cannot\nbe produced from <i>&gamma;</i> with the given set of substitutions, output <span>-1</span>.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\na bb\nb aa\na\nbbbbbbbb\n1\na aa\na\naaaaa\n3\nab aab\nabc aadc\nad dee\nabc\ndeeeeeeeec\n10\na abc\nb bai\nc acf\nd bed\ne abh\nf fag\ng abe\nh bag\ni aaj\nj bbb\na\nabacfaabe\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3\n-1\n7\n4\n</pre>\n\n", "p00884": "\n<H1><font color=\"#000\">Problem A:</font> Membership Management</H1>\n\n<p>\nPeter is a senior manager of Agile Change Management (ACM) Inc., where each employee is a member of one or more task groups. Since ACM is agile, task groups are often reorganized and their members frequently change, so membership management is his constant headache.\n</p>\n\n<p>\nPeter updates the membership information whenever any changes occur: for instance, the following line written by him means that Carol and Alice are the members of the Design Group.\n</p>\n\n<pre>\ndesign:carol,alice.\n</pre>\n\n<p>\nThe name preceding the colon is the group name and the names following it specify its members.\n</p>\n\n<p>\nA smaller task group may be included in a larger one. So, a group name can appear as a member of another group, for instance, as follows. \n</p>\n\n<pre>\ndevelopment:alice,bob,design,eve.\n</pre>\n\n<p>\nSimply unfolding the design above gives the following membership specification, which is equivalent to the original.\n</p>\n\n<pre>\ndevelopment:alice,bob,carol,alice,eve.\n</pre>\n\n<p>\nIn this case, however, alice occurs twice. After removing one of the duplicates, we have the following more concise specification.\n</p>\n\n<pre>\ndevelopment:alice,bob,carol,eve.\n</pre>\n\n<p>\nYour mission in this problem is to write a program that, given group specifications, identifies group members.\n</p>\n\n<p>\nNote that Peter's specifications can include deeply nested groups. In the following, for instance, the group one contains a single member dave.\n</p>\n\n<pre>\none:another.\nanother:yetanother.\nyetanother:dave.\n</pre>\n\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets, each being in the following format.\n</p>\n\n<p>\n<i>n</i><br>\n<i>group</i><sub>1</sub><span>:</span><i>member</i><sub>1,1</sub>,...,<i>member</i><sub>1,<i>m</i><sub>1</sub></sub><span>.</span><br>\n<span>.</span><br>\n<span>.</span><br>\n<span>.</span><br>\n<i>group</i><sub><i>i</i></sub><span>:</span><i>member</i><sub><i>i</i>,1</sub>,...,<i>member</i><sub><i>i</i>,<i>m</i><sub><i>i</i></sub></sub><span>.</span><br>\n<span>.</span><br>\n<span>.</span><br>\n<span>.</span><br>\n<i>group</i><sub><i>n</i></sub><span>:</span><i>member</i><sub><i>n</i>,1</sub>,...,<i>member</i><sub><i>n</i>,<i>m</i><sub><i>n</i></sub></sub><span>.</span><br>\n</p>\n\n<p>\nThe first line contains n, which represents the number of groups and is a positive integer no more than 100. Each of the following n lines contains the membership information of a group: <i>group</i><sub><i>i</i></sub> (1 &le; <i>i</i> &le; <i>n</i>) is the name of the <i>i</i>-th task group and is followed by a colon (<span>:</span>) and then the list of its <i>m<sub>i</sub></i> member s that are delimited by a comma (<span>,</span>) and terminated by a period (<span>.</span>).\n</p>\n\n<p>\nThose group names are mutually different. Each <i>m<sub>i</sub></i> (1 &le; <i>i</i> &le; <i>n</i>) is between 1 and 10, inclusive. A <i>member</i> is another group name if it is one of <i>group</i><sub>1</sub>, <i>group</i><sub>2</sub>,..., or groupn. Otherwise it is an employee name.\n</p>\n\n<p>\nThere are no circular (or recursive) definitions of group(s). You may assume that <i>m<sub>i</sub></i> member names of a group are mutually different.\n</p>\n\n<p>\nEach group or employee name is a non-empty character string of length between 1 and 15, inclusive, and consists of lowercase letters.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing a zero.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the number of employees included in the first group of the dataset, that is <i>group</i><sub>1</sub>, in a line. No extra characters should occur in the output.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\ndevelopment:alice,bob,design,eve.\ndesign:carol,alice.\n3\none:another.\nanother:yetanother.\nyetanother:dave.\n3\nfriends:alice,bob,bestfriends,carol,fran,badcompany.\nbestfriends:eve,alice.\nbadcompany:dave,carol.\n5\na:b,c,d,e.\nb:c,d,e,f.\nc:d,e,f,g.\nd:e,f,g,h.\ne:f,g,h,i.\n4\naa:bb.\ncc:dd,ee.\nff:gg.\nbb:cc.\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n4\n1\n6\n4\n2\n</pre>\n\n", "p00889": "\n<H1><font color=\"#000\">Problem F:</font> Find the Multiples</H1>\n\n<p>\nYou are given a sequence <i>a</i><sub>0</sub><i>a</i><sub>1</sub>...<i>a</i><sub><i>N</i>-1</sub> digits and a prime number <i>Q</i>. For each <i>i</i> &le; <i>j</i> with <i>a<sub>i</sub></i> &ne; 0, the subsequence <i>a</i><sub><i>i</i></sub><i>a</i><sub></i>i</i>+1</sub>...<i>a<sub>j</sub></i> can be read as a decimal representation of a positive integer. Subsequences with leading zeros are not considered. Your task is to count the number of pairs (<i>i</i>, <i>j</i>) such that the corresponding subsequence is a multiple of <i>Q</i>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of at most 50 datasets. Each dataset is represented by a line containing four integers <i>N</i>, <i>S</i>, <i>W</i>, and <i>Q</i>, separated by spaces, where 1 &le; <i>N</i> &le; 10<sup>5</sup>, 1 &le; <i>S</i> &le; 10<sup>9</sup>, 1 &le; <i>W</i> &le; 10<sup>9</sup>, and <i>Q</i> is a prime number less than 10<sup>8</sup>. The sequence <i>a</i><sub>0</sub>...<i>a</i><sub><i>N</i>-1</sub> of length <i>N</i> is generated by the following code, in which ai is written as <span>a[i]</span>.\n</p>\n\n<pre>\n    int g = S;\n    for(int i=0; i&lt;N; i++) {\n        a[i] = (g/7) % 10;\n        if( g%2 == 0 ) { g = (g/2); }\n        else           { g = (g/2) ^ W; }\n    }\n</pre>\n\n<p>\n<b>Note:</b> the operators <span>/</span>, <span>%</span>, and <span>^</span> are the integer division, the modulo, and the bitwise exclusiveor, respectively. The above code is meant to be a random number generator. The intended solution does not rely on the way how the sequence is generated. \n</p>\n<p>\nThe end of the input is indicated by a line containing four zeros separated by spaces.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the answer in a line. You may assume that the answer is less than 2<sup>30</sup>.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 32 64 7\n4 35 89 5\n5 555 442 3\n5 777 465 11\n100000 666 701622763 65537\n0 0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2\n4\n6\n3\n68530\n</pre>\n\n<p>\nIn the first dataset, the sequence is 421. We can find two multiples of <i>Q</i> = 7, namely, 42 and 21.\n</p>\n\n<p>\nIn the second dataset, the sequence is 5052, from which we can find 5, 50, 505, and 5 being the multiples of <i>Q</i> = 5. Notice that we don't count 0 or 05 since they are not a valid representation of positive integers. Also notice that we count 5 twice, because it occurs twice in different positions.\n</p>\n\n<p>\nIn the third and fourth datasets, the sequences are 95073 and 12221, respectively.\n</p>\n\n\n", "p00891": "\n<H1><font color=\"#000\">Problem H:</font> Where's Wally</H1>\n\n<p>\nDo you know the famous series of children's books named \"Where's Wally\"? Each of the books contains a variety of pictures of hundreds of people. Readers are challenged to find a person called Wally in the crowd.\n</p>\n\n<p>\nWe can consider \"Where's Wally\" as a kind of pattern matching of two-dimensional graphical images. Wally's figure is to be looked for in the picture. It would be interesting to write a computer program to solve \"Where's Wally\", but this is not an easy task since Wally in the pictures may be slightly different in his appearances. We give up the idea, and make the problem much easier to solve. You are requested to solve an easier version of the graphical pattern matching problem.\n</p>\n\n<p>\nAn image and a pattern are given. Both are rectangular matrices of bits (in fact, the pattern is always square-shaped). 0 means white, and 1 black. The problem here is to count the number of occurrences of the pattern in the image, i.e. the number of squares in the image exactly matching the pattern. Patterns appearing rotated by any multiples of 90 degrees and/or turned over forming a mirror image should also be taken into account.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets each in the following format.\n</p>\n\n<p>\n<i>w h p</i><br>\nimage data<br>\npattern data<br>\n</p>\n\n<p>\nThe first line of a dataset consists of three positive integers <i>w</i>, <i>h</i> and <i>p</i>. <i>w</i> is the width of the image and <i>h</i> is the height of the image. Both are counted in numbers of bits. <i>p</i> is the width and height of the pattern. The pattern is always square-shaped. You may assume 1 &le; <i>w</i> &le; 1000, 1 &le; <i>h</i> &le; 1000, and 1 &le; <i>p</i> &le; 100.\n</p>\n\n<p>\nThe following <i>h</i> lines give the image. Each line consists of &lceil;<i>w</i>/6&rceil; (which is equal to &&lfloor;(<i>w</i>+5)/6&rfloor;) characters, and corresponds to a horizontal line of the image. Each of these characters represents six bits on the image line, from left to right, in a variant of the BASE64 encoding format. The encoding rule is given in the following table. The most significant bit of the value in the table corresponds to the leftmost bit in the image. The last character may also represent a few bits beyond the width of the image; these bits should be ignored.\n</p>\n\n<table>\n<tr>\n<td>character</td><td>value (six bits)</td>\n</tr>\n<tr><td>A-Z</td><td>0-25</td></tr>\n<tr><td>a-z</td><td>26-51</td></tr>\n<tr><td>0-9</td><td>52-61</td></tr>\n<tr><td>+</td><td>62</td></tr>\n<tr><td>/</td><td>63</td></tr>\n</table>\n\n<p>\nThe last p lines give the pattern. Each line consists of &lceil;<i>p</i>/6&rceil; characters, and is encoded in the same way as the image.\n</p>\n\n<p>\nA line containing three zeros indicates the end of the input. The total size of the input does not\nexceed two megabytes.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset in the input, one line containing the number of matched squares in the image should be output. An output line should not contain extra characters.\n</p>\n\n<p>\nTwo or more matching squares may be mutually overlapping. In such a case, they are counted separately. On the other hand, a single square is never counted twice or more, even if it matches both the original pattern and its rotation, for example.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n48 3 3\ngAY4I4wA\ngIIgIIgg\nw4IAYAg4\ng\ng\nw\n153 3 3\nkkkkkkkkkkkkkkkkkkkkkkkkkg\nSSSSSSSSSSSSSSSSSSSSSSSSSQ\nJJJJJJJJJJJJJJJJJJJJJJJJJI\ng\nQ\nI\n1 1 2\nA\nA\nA\n384 3 2\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\nBCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/A\nCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/AB\nA\nA\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n8\n51\n0\n98\n</pre>\n\n", "p00894": "\n<H1><font color=\"#000\">Problem A: </font> Gift from the Goddess of Programming  </H1>\n\n<p>\nThe goddess of programming is reviewing a thick logbook, which is a yearly record of visitors\nto her holy altar of programming. The logbook also records her visits at the altar.\n</p>\n\n<p>\nThe altar attracts programmers from all over the world because one visitor is chosen every\nyear and endowed with a gift of miracle programming power by the goddess. The endowed\nprogrammer is chosen from those programmers who spent the longest time at the altar during\nthe goddess's presence. There have been enthusiastic visitors who spent very long time at the\naltar but failed to receive the gift because the goddess was absent during their visits.\n</p>\n\n<p>\nNow, your mission is to write a program that finds how long the programmer to be endowed\nstayed at the altar during the goddess's presence.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. The number of datasets is less than 100. Each dataset is\nformatted as follows.\n</p>\n\n<p>\n<i>n<br>\nM</i><sub>1</sub><i>/D</i><sub>1</sub><i> h</i><sub>1</sub>:<i>m</i><sub>1</sub><i>e</i><sub>1</sub><i> p</i><sub>1</sub><br>\n<i>M</i><sub>2</sub>/D</i><sub>2</sub><i> h</i><sub>2</sub>:<i>m</i><sub>2</sub><i>e</i><sub>2</sub><i> p</i><sub>2</sub><br>\n.<br>\n.<br>\n.<br>\n<i>M</i><sub>n</sub>/D</i><sub>n</sub><i> h</i><sub>n</sub>:<i>m</i><sub>n</sub><i>e</i><sub>n</sub><i> p</i><sub>n</sub><br>\n</p>\n\n<p>\nThe first line of a dataset contains a positive even integer, n &le; 1000, which denotes the number\nof lines of the logbook. This line is followed by <i>n</i> lines of space-separated data, where <i>M</i><sub>i</sub><i>/D</i><sub>i</sub>\nidentifies the month and the day of the visit, <i>h</i><sub>i</sub>:<i>m</i><sub>i</sub> represents the time of either the entrance\nto or exit from the altar, <i>e</i><sub>i</sub> is either I for entrance, or O for exit, and <i>p</i><sub>i</sub> identifies the visitor.\n</p>\n\n<p>\nAll the lines in the logbook are formatted in a fixed-column format. Both the month and the\nday in the month are represented by two digits. Therefore April 1 is represented by 04/01 and\nnot by 4/1. The time is described in the 24-hour system, taking two digits for the hour, followed\nby a colon and two digits for minutes, 09:13 for instance and not like 9:13. A programmer is\nidentified by an ID, a unique number using three digits. The same format is used to indicate\nentrance and exit of the goddess, whose ID is 000.\n</p>\n\n<p>\nAll the lines in the logbook are sorted in ascending order with respect to date and time. Because\nthe altar is closed at midnight, the altar is emptied at 00:00. You may assume that each time\nin the input is between 00:01 and 23:59, inclusive.\n</p>\n\n<p>\nA programmer may leave the altar just after entering it. In this case, the entrance and exit\ntime are the same and the length of such a visit is considered 0 minute. You may assume for\nsuch entrance and exit records, the line that corresponds to the entrance appears earlier in the\ninput than the line that corresponds to the exit. You may assume that at least one programmer\nappears in the logbook.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing a single zero.\n</p>\n\n<H2>Output</H2>\n<p>\nFor each dataset, output the total sum of the blessed time of the endowed programmer. The\nblessed time of a programmer is the length of his/her stay at the altar during the presence of\nthe goddess. The endowed programmer is the one whose total blessed time is the longest among\nall the programmers. The output should be represented in minutes. Note that the goddess of\nprogramming is not a programmer.\n</p>\n\n\n<H2>Sample Input</H2>\n<pre>\n14\n04/21 09:00 I 000\n04/21 09:00 I 001\n04/21 09:15 I 002\n04/21 09:30 O 001\n04/21 09:45 O 000\n04/21 10:00 O 002\n04/28 09:00 I 003\n04/28 09:15 I 000\n04/28 09:30 I 004\n04/28 09:45 O 004\n04/28 10:00 O 000\n04/28 10:15 O 003\n04/29 20:00 I 002\n04/29 21:30 O 002\n20\n06/01 09:00 I 001\n06/01 09:15 I 002\n06/01 09:15 I 003\n06/01 09:30 O 002\n06/01 10:00 I 000\n06/01 10:15 O 001\n06/01 10:30 I 002\n06/01 10:45 O 002\n06/01 11:00 I 001\n06/01 11:15 O 000\n06/01 11:30 I 002\n06/01 11:45 O 001\n06/01 12:00 O 002\n06/01 12:15 I 000\n06/01 12:30 I 002\n06/01 12:45 O 000\n06/01 13:00 I 000\n06/01 13:15 O 000\n06/01 13:30 O 002\n06/01 13:45 O 003\n0\n</pre>\n<H2>Output for the Sample Input</H2>\n<pre>\n45\n120\n</pre>", "p00896": "\n<H1><font color=\"#000\">Problem C: </font>Weaker than Planned </H1>\n\n<p>\nThe committee members of the Kitoshima programming contest had decided to use crypto-graphic software for their secret communication. They had asked a company, Kodai Software,\nto develop cryptographic software that employed a cipher based on highly sophisticated mathematics.\n</p>\n\n<p>\nAccording to reports on IT projects, many projects are not delivered on time, on budget, with\nrequired features and functions. This applied to this case. Kodai Software failed to implement\nthe cipher by the appointed date of delivery, and asked to use a simpler version that employed\na type of substitution cipher for the moment. The committee members got angry and strongly\nrequested to deliver the full specification product, but they unwillingly decided to use this inferior\nproduct for the moment.\n</p>\n\n<p>\nIn what follows, we call the text before encryption, plaintext, and the text after encryption,<i>\nciphertext</i>.\n</p>\n\n<p>\nThis simple cipher substitutes letters in the plaintext, and its substitution rule is specified with\na set of pairs. A pair consists of two letters and is unordered, that is, the order of the letters\nin the pair does not matter. A pair (A, B) and a pair (B, A) have the same meaning. In one\nsubstitution rule, one letter can appear in at most one single pair. When a letter in a pair\nappears in the plaintext, the letter is replaced with the other letter in the pair. Letters not\nspecified in any pairs are left as they are.\n</p>\n\n<p>\nFor example, by substituting the plaintext\n</p>\n<pre>\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n</pre>\n\n<p>\nwith the substitution rule {(A, Z), (B, Y)} results in the following ciphertext.\n</p>\n<pre>\nZYCDEFGHIJKLMNOPQRSTUVWXBA\n</pre>\n\t\n<p>\nThis may be a big chance for us, because the substitution rule seems weak against cracking.\nWe may be able to know communications between committee members. The mission here is to\ndevelop a deciphering program that finds the plaintext messages from given ciphertext messages.\n</p>\n\n<p>\nA ciphertext message is composed of one or more ciphertext words. A ciphertext word is\ngenerated from a plaintext word with a substitution rule. You have a list of candidate words \ncontaining the words that can appear in the plaintext; no other words may appear. Some words\nin the list may not actually be used in the plaintext.\n</p>\n\n<p>\nThere always exists at least one sequence of candidate words from which the given ciphertext\nis obtained by some substitution rule. There may be cases where it is impossible to uniquely\nidentify the plaintext from a given ciphertext and the list of candidate words.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets, each of which contains a ciphertext message and a list\nof candidate words in the following format.\n</p>\n\n<p>\n<i>n</i><br>\n<i>word</i><sub>1</sub><br>\n.<br>\n.<br>\n.<br>\n<i>word</i><sub>n</sub><br>\n<i>sequence</i>\n</p>\n\n<p>\n<i>n</i> in the first line is a positive integer, representing the number of candidate words. Each of the\nnext <i>n</i> lines represents one of the candidate words. The last line, sequence, is a sequence of one\nor more ciphertext words separated by a single space and terminated with a period.\n</p>\n\n<p>\nYou may assume the number of characters in each <i>sequence</i> is more than 1 and less than or\nequal to 80 including spaces and the period. The number of candidate words in the list, <i>n</i>, does\nnot exceed 20. Only 26 uppercase letters, A to Z, are used in the words and the length of each\nword is from 1 to 20, inclusive.\n</p>\n\n<p>\nA line of a single zero indicates the end of the input.\n</p>\n\n<H2>Output</H2>\n<p>\nFor each dataset, your program should print the deciphered message in a line. Two adjacent\nwords in an output line should be separated by a single space and the last word should be\nfollowed by a single period. When it is impossible to uniquely identify the plaintext, the output\nline should be a single hyphen followed by a single period.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4\nA\nAND\nCAT\nDOG\nZ XUW ZVX Z YZT.\n2\nAZ\nAY\nZA.\n2\nAA\nBB\nCC.\n16\nA\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nABCDEFGHIJKLMNO\nA B C D E F G H I J K L M N O ABCDEFGHIJKLMNO.\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nA DOG AND A CAT.\nAZ.\n-.\nA B C D E F G H I J K L M N O ABCDEFGHIJKLMNO.\n</pre>", "p00897": "\n<H1><font color=\"#000\">Problem D: </font>Long Distance Taxi </H1>\n\n<p>\nA taxi driver, Nakamura, was so delighted because he got a passenger who wanted to go to a\ncity thousands of kilometers away. However, he had a problem. As you may know, most taxis in\nJapan run on liquefied petroleum gas (LPG) because it is cheaper than gasoline. There are more\nthan 50,000 gas stations in the country, but less than one percent of them sell LPG. Although\nthe LPG tank of his car was full, the tank capacity is limited and his car runs 10 kilometer per\nliter, so he may not be able to get to the destination without filling the tank on the way. He\nknew all the locations of LPG stations.\nYour task is to write a program that finds the best way from the current location to the destination without running out of gas.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several datasets, and each dataset is in the following format.\n</p>\n\n<p>\n<i>N M cap<br>\nsrc dest</i><br>\n<i>c</i><sub>1,1</sub> <i>c</i><sub>1,2</sub> <i>d</i><sub>1</sub><br>\n<i>c</i><sub>2,1</sub> <i>c</i><sub>2,2</sub> <i>d</i><sub>2</sub><br>\n.<br>\n.<br>\n.<br>\n<i>c</i><sub>N,1</sub> <i>c</i><sub>N,2</sub> <i>d</i><sub>N</sub><br>\n<i>s</i><sub>1</sub><br>\n<i>s</i><sub>2</sub><br>\n.<br>\n.<br>\n.<br>\n<i>s</i><sub>M</sub>\n\n<p>\nThe first line of a dataset contains three integers (<i>N, M, cap</i>), where <i>N</i> is the number of roads\n(1 &le; <i>N</i> &le; 3000),<i>M</i> is the number of LPG stations (1&le; <i>M</i> &le; 300), and <i>cap</i> is the tank capacity\n(1 &le; <i>cap</i> &le; 200) in liter. The next line contains the name of the current city (<i>src</i>) and the name\nof the destination city (<i>dest</i>). The destination city is always different from the current city.\nThe following <i>N</i> lines describe roads that connect cities. The road i (1 &le; <i>i</i> &le; N) connects two\ndifferent cities <i>c</i><sub>i,1</sub> and <i>c</i><sub>i,2</sub> with an integer distance <i>d</i><sub>i</sub> (0 &lt; <i>d</i><sub>i</sub> &le; 2000) in kilometer, and he can\ngo from either city to the other. You can assume that no two different roads connect the same\npair of cities. The columns are separated by a single space. The next <i>M</i> lines (<i>s</i><sub>1</sub>,<i>s</i><sub>2</sub>,...,<i>s</i><sub>M</sub>) indicate the names of the cities with LPG station. \nYou can assume that a city with LPG station has at least one road.\n</p>\n\n<p>\nThe name of a city has no more than 15 characters. Only English alphabet ('A' to 'Z' and 'a'\nto 'z', case sensitive) is allowed for the name.\n</p>\n\n<p>\nA line with three zeros terminates the input.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output a line containing the length (in kilometer) of the shortest possible\njourney from the current city to the destination city. If Nakamura cannot reach the destination,\noutput \"-1\" (without quotation marks). You must not output any other characters.\nThe actual tank capacity is usually a little bit larger than that on the specification sheet, so\nyou can assume that he can reach a city even when the remaining amount of the gas becomes\nexactly zero. In addition, you can always fill the tank at the destination so you do not have to\nworry about the return trip.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n6 3 34\nTokyo Kyoto\nTokyo Niigata 335\nTokyo Shizuoka 174\nShizuoka Nagoya 176\nNagoya Kyoto 195\nToyama Niigata 215\nToyama Kyoto 296\nNagoya\nNiigata\nToyama\n6 3 30\nTokyo Kyoto\nTokyo Niigata 335\nTokyo Shizuoka 174\nShizuoka Nagoya 176\nNagoya Kyoto 195\nToyama Niigata 215\nToyama Kyoto 296\nNagoya\nNiigata\nToyama\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n846\n-1\n</pre>", "p00899": "\n<H1><font color=\"#000\">Problem F: </font>City Merger</H1>\n\n<p>\nRecent improvements in information and communication technology have made it possible to provide municipal service to a wider area more quickly and with less costs. Stimulated by this, and probably for saving their not sufficient funds, mayors of many cities started to discuss on mergers of their cities.\n</p>\n\n<p>\nThere are, of course, many obstacles to actually put the planned mergers in practice. Each city has its own culture of which citizens are proud. One of the largest sources of friction is with the name of the new city. All citizens would insist that the name of the new city should have the original name of their own city at least as a part of it. Simply concatenating all the original names would, however, make the name too long for everyday use.\n</p>\n\n<p>\nYou are asked by a group of mayors to write a program that finds the shortest possible name for the new city that includes all the original names of the merged cities. If two or more cities have common parts, they can be overlapped. For example, if &quot;FUKUOKA&quot;, &quot;OKAYAMA&quot;, and &quot;YAMAGUCHI&quot; cities are to be merged, &quot;FUKUOKAYAMAGUCHI&quot; is such a name that include all three of the original city names. Although this includes all the characters of the city name &quot;FUKUYAMA&quot; in this order, it does not appear as a consecutive substring, and thus &quot;FUKUYAMA&quot; is not considered to be included in the name.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. Each dataset begins with a line containing a positive integer <i>n</i> (<i>n</i> &le; 14), which denotes the number of cities to be merged. The following <i>n</i> lines contain the names of the cities in uppercase alphabetical letters, one in each line. You may assume that none of the original city names has more than 20 characters. Of course, no two cities have the same name.\n</p>\n\n<p>\nThe end of the input is indicated by a line consisting of a zero.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the length of the shortest possible name of the new city in one line. The output should not contain any other characters.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3<br>FUKUOKA<br>OKAYAMA<br>YAMAGUCHI<br>3<br>FUKUOKA<br>FUKUYAMA<br>OKAYAMA<br>2<br>ABCDE<br>EDCBA<br>4<br>GA<br>DEFG<br>CDDE<br>ABCD<br>2<br>ABCDE<br>C<br>14<br>AAAAA<br>BBBBB<br>CCCCC<br>DDDDD<br>EEEEE<br>FFFFF<br>GGGGG<br>HHHHH<br>IIIII<br>JJJJJ<br>KKKKK<br>LLLLL<br>MMMMM<br>NNNNN<br>0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\n16<br>19<br>9<br>9<br>5<br>70\n</pre>", "p00900": "\n<H1><font color=\"#000\">Problem G: </font>Captain Q&prime;s Treasure</H1>\n\n<p>\nYou got an old map, which turned out to be drawn by the infamous pirate &ldquo;Captain Q&rdquo;. It shows the locations of a lot of treasure chests buried in an island.\n</p>\n\n<p>\nThe map is divided into square sections, each of which has a digit on it or has no digit. The digit represents the number of chests in its 9 neighboring sections (the section itself and its 8 neighbors). You may assume that there is at most one chest in each section.\n</p>\n\n<p>\nAlthough you have the map, you can't determine the sections where the chests are buried. Even the total number of chests buried in the island is unknown. However, it is possible to calculate the minimum number of chests buried in the island. Your mission in this problem is to write a program that calculates it.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n</p>\n\n<p>\n<i>h w<br>\nmap</i>\n</p>\n\n<p>\nThe first line of a dataset consists of two positive integers <i>h</i> and <i>w</i>. <i>h</i> is the height of the map and w is the width of the map. You may assume 1&le;<i>h</i>&le;15 and 1&le;<i>w</i>&le;15.\n</p>\n\n<p>\nThe following h lines give the map. Each line consists of w characters and corresponds to a horizontal strip of the map. Each of the characters in the line represents the state of a section as follows.\n</p>\n\n<p>\n&lsquo;.&rsquo;: The section is not a part of the island (water). No chest is here.\n</p>\n\n<p>\n&lsquo;*&rsquo;: The section is a part of the island, and the number of chests in its 9 neighbors is not known.\n</p>\n\n<p>\n&lsquo;0&rsquo;-&lsquo;9&rsquo;: The section is a part of the island, and the digit represents the number of chests in its 9 neighbors.\n</p>\n\n<p>\nYou may assume that the map is not self-contradicting, i.e., there is at least one arrangement of chests. You may also assume the number of sections with digits is at least one and at most 15.\n</p>\n\n<p>\nA line containing two zeros indicates the end of the input.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output a line that contains the minimum number of chests. The output should not contain any other character.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n5 6<br>*2.2**<br>..*...<br>..2...<br>..*...<br>*2.2**<br>6 5<br>.*2*.<br>..*..<br>..*..<br>..2..<br>..*..<br>.*2*.<br>5 6<br>.1111.<br>**...*<br>33....<br>**...0<br>.*2**.<br>6 9<br>....1....<br>...1.1...<br>....1....<br>.1..*..1.<br>1.1***1.1<br>.1..*..1.<br>9 9<br>*********<br>*4*4*4*4*<br>*********<br>*4*4*4*4*<br>*********<br>*4*4*4*4*<br>*********<br>*4*4*4***<br>*********<br>0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>6<br>5<br>5<br>6<br>23</pre>", "p00903": "\n<H1><font color=\"#000\">Problem J:</font>Round Trip</H1>\n\n<p>\nJim is planning to visit one of his best friends in a town in the mountain area. First, he leaves his hometown and goes to the destination town. This is called the go phase. Then, he comes back to his hometown. This is called the return phase. You are expected to write a program to find the minimum total cost of this trip, which is the sum of the costs of the go phase and the return phase.\n</p>\n\n<p>\nThere is a network of towns including these two towns. Every road in this network is one-way, i.e., can only be used towards the specified direction. Each road requires a certain cost to travel.\n</p>\n\n<p>\nIn addition to the cost of roads, it is necessary to pay a specified fee to go through each town on the way. However, since this is the visa fee for the town, it is not necessary to pay the fee on the second or later visit to the same town.\n</p>\n\n<p>\nThe altitude (height) of each town is given. On the go phase, the use of descending roads is inhibited. That is, when going from town <i>a</i> to <i>b</i>, the altitude of <i>a</i> should not be greater than that of <i>b</i>. On the return phase, the use of ascending roads is inhibited in a similar manner. If the altitudes of <i>a</i> and <i>b</i> are equal, the road from <i>a</i> to <i>b</i> can be used on both phases.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n\n<p>\n<i>n m<br>\nd<sub>2</sub> e<sub>2</sub><br>\nd<sub>3</sub> e<sub>3</sub><br>\n.<br>\n.<br>\n.<br>\nd<sub>n-1</sub>\te<sub>n-1</sub><br>\na<sub>1</sub> b<sub>1</sub> c<sub>1</sub><br>\na<sub>2</sub> b<sub>2</sub> c<sub>2</sub><br>\n.<br>\n.<br>\n.<br> \na<sub>m</sub> b<sub>m</sub> c<sub>m</sub>\n</i>\n</p>\n\n<p>\nEvery input item in a dataset is a non-negative integer. Input items in a line are separated by a space.\n</p>\n\n<p>\n<i>n</i> is the number of towns in the network. <i>m</i> is the number of (one-way) roads. You can assume the inequalities 2 &le; <i>n</i> &le; 50 and 0 &le; <i>m</i> &le; <i>n</i>(<i>n</i>&minus;1) hold. Towns are numbered from 1 to <i>n</i>, inclusive. The town 1 is Jim's hometown, and the town <i>n</i> is the destination town.\n</p>\n\n<p>\n<i>d<sub>i</sub></i> is the visa fee of the town <i>i</i>, and <i>e<sub>i</sub></i> is its altitude. You can assume 1 &le; <i>d<sub>i</sub></i> &le; 1000 and 1&le;<i>e<sub>i</sub></i> &le; 999 for 2&le;<i>i</i>&le;<i>n</i>&minus;1. The towns 1 and <i>n</i> do not impose visa fee. The altitude of the town 1 is 0, and that of the town n is 1000. Multiple towns may have the same altitude, but you can assume that there are no more than 10 towns with the same altitude.\n</p>\n\n<p>\nThe <i>j</i>-th road is from the town <i>a<sub>j</sub></i> to <i>b<sub>j</sub></i> with the cost <i>c<sub>j</sub></i> (1 &le; <i>j</i> &le; <i>m</i>). You can assume 1 &le; <i>a<sub>j</sub></i> &le; <i>n</i>, 1 &le; <i>b<sub>j</sub></i> &le; <i>n</i>, and 1 &le; <i>c<sub>j</sub></i> &le; 1000. You can directly go from <i>a<sub>j</sub></i> to <i>b<sub>j</sub></i>, but not from <i>b<sub>j</sub></i> to <i>a<sub>j</sub></i> unless a road from <i>b<sub>j</sub></i> to <i>a<sub>j</sub></i> is separately given. There are no two roads connecting the same pair of towns towards the same direction, that is, for any <i>i</i> and <i>j</i> such that <i>i</i> &ne; <i>j</i>, <i>a<sub>i</sub></i> &ne; <i>a<sub>j</sub></i> or <i>b<sub>i</sub></i> &ne; <i>b<sub>j</sub></i>. There are no roads connecting a town to itself, that is, for any <i>j</i>, <i>a<sub>j</sub></i> &ne; <i>b<sub>j</sub></i>.\n</p>\n\n<p>\nThe last dataset is followed by a line containing two zeros (separated by a space).\n</p>\n\n<H2>Output</H2>\n<p>\nFor each dataset in the input, a line containing the minimum total cost, including the visa fees, of the trip should be output. If such a trip is not possible, output &ldquo;-1&rdquo;.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 6\n3 1\n1 2 1\n2 3 1\n3 2 1\n2 1 1\n1 3 4\n3 1 4\n3 6\n5 1\n1 2 1\n2 3 1\n3 2 1\n2 1 1\n1 3 4\n3 1 4\n4 5\n3 1\n3 1\n1 2 5\n2 3 5\n3 4 5\n4 2 5\n3 1 5\n2 1\n2 1 1\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n7\n8\n36\n-1\n</pre>", "p00904": "\n<H1><font color=\"#000\">Problem A: </font> Ginkgo Numbers</H1>\n\n<p>\nWe will define Ginkgo numbers and multiplication on Ginkgo numbers.\n</p>\n\n<p>\nA <i>Ginkgo number</i> is a pair &lt;<i>m</i>, <i>n</i>&gt; where <i>m</i> and <i>n</i> are integers. For example, &lt;1, 1&gt;, &lt;-2, 1&gt; and &lt;-3,-1&gt; are Ginkgo numbers.\n</p>\n\n<p>\nThe multiplication on Ginkgo numbers is defined by &lt;<i>m</i>, <i>n</i>&gt; &middot; &lt;<i>x</i>, <i>y</i>&gt; = &lt;<i>mx</i> &minus; <i>ny</i>, <i>my</i> + <i>nx</i>&gt;. For example, &lt;1, 1&gt; &middot; &lt;-2, 1&gt; = &lt;-3,-1&gt;.\n</p>\n\n<p>\nA Ginkgo number &lt;<i>m</i>, <i>n</i>&gt; is called a divisor of a Ginkgo number &lt;<i>p</i>, <i>q</i>&gt; if there exists a Ginkgo number &lt;<i>x</i>, <i>y</i>&gt; such that &lt;<i>m</i>, <i>n</i>&gt; &middot; &lt;<i>x</i>, <i>y</i>&gt; = &lt;<i>p</i>, <i>q</i>&gt;.\n</p>\n\n<p>\nFor any Ginkgo number &lt;<i>m</i>, <i>n</i>&gt;, Ginkgo numbers &lt;1, 0&gt;, &lt;0, 1&gt;, &lt;-1, 0&gt;, &lt;0,-1&gt;, &lt;<i>m</i>, <i>n</i>&gt;, &lt;-<i>n</i>,<i>m</i>&gt;, &lt;-<i>m</i>,-<i>n</i>&gt; and &lt;<i>n</i>,-<i>m</i>&gt; are divisors of &lt;<i>m</i>, <i>n</i>&gt;. If <i>m</i><sup>2</sup>+<i>n</i><sup>2</sup> &gt; 1, these Ginkgo numbers are distinct. In other words, any Ginkgo number such that <i>m</i><sup>2</sup> + <i>n</i><sup>2</sup> &gt; 1 has at least eight divisors.\n</p>\n\n<p>\nA Ginkgo number &lt;<i>m</i>, <i>n</i>&gt; is called a prime if <i>m</i><sup>2</sup>+<i>n</i><sup>2</sup> &gt; 1 and it has exactly eight divisors. Your mission is to check whether a given Ginkgo number is a prime or not.\n</p>\n\n<p>\nThe following two facts might be useful to check whether a Ginkgo number is a divisor of another Ginkgo number.\n</p>\n\n<ul>\n<li> Suppose <i>m</i><sup>2</sup> + <i>n</i><sup>2</sup> &gt; 0. Then, &lt;<i>m</i>, <i>n</i>&gt; is a divisor of &lt;<i>p</i>, <i>q</i>&gt; if and only if the integer <i>m</i><sup>2</sup> + <i>n</i><sup>2</sup> is a common divisor of <i>mp</i> + <i>nq</i> and <i>mq</i> &minus; <i>np</i>.</li>\n<li> If &lt;<i>m</i>, <i>n</i>&gt; &middot; &lt;<i>x</i>, <i>y</i>&gt; = &lt;<i>p</i>, <i>q</i>&gt;, then (<i>m</i><sup>2</sup> + <i>n</i><sup>2</sup>)(<i>x</i><sup>2</sup> + <i>y</i><sup>2</sup>) = <i>p</i><sup>2</sup> + <i>q</i><sup>2</sup>.</li>\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input contains a single integer, which is the number of datasets.\n</p>\n\n<p>\nThe rest of the input is a sequence of datasets. Each dataset is a line containing two integers <i>m</i> and <i>n</i>, separated by a space. They designate the Ginkgo number &lt;<i>m</i>, <i>n</i>&gt;. You can assume 1 &lt; <i>m</i><sup>2</sup> + <i>n</i><sup>2</sup> &lt; 20000.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output a character '<span>P</span>' in a line if the Ginkgo number is a prime. Output a character '<span>C</span>' in a line otherwise.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n8\n10 0\n0 2\n-3 0\n4 2\n0 -13\n-4 1\n-2 -1\n3 -1\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nC\nC\nP\nC\nC\nP\nP\nC\n</pre>", "p00905": "\n<H1><font color=\"#000\">Problem B: </font>Stylish</H1>\n\n<p>\n<i>Stylish</i> is a programming language whose syntax comprises <i>names</i>, that are sequences of Latin alphabet letters, three types of <i>grouping symbols</i>, periods ('.'), and newlines. Grouping symbols, namely round brackets ('(' and ')'), curly brackets ('{' and '}'), and square brackets ('[' and ']'), must match and be nested properly. Unlike most other programming languages, Stylish uses periods instead of whitespaces for the purpose of term separation. The following is an example of a Stylish program.\n</p>\n\n<pre>\n1 ( Welcome .to\n2 ......... Stylish )\n3 { Stylish .is\n4 .....[.( a. programming . language .fun .to. learn )\n5 .......]\n6 ..... Maybe .[\n7 ....... It. will .be.an. official . ICPC . language\n8 .......]\n9 .....}\n</pre>\n\n\n<p>\nAs you see in the example, a Stylish program is indented by periods. The <i>amount of indentation</i> of a line is the number of leading periods of it.\n</p>\n\n<p>\nYour mission is to visit Stylish masters, learn their indentation styles, and become the youngest Stylish master. An indentation style for <i>well-indented</i> Stylish programs is defined by a triple of integers, (<i>R</i>, <i>C</i>, <i>S</i>), satisfying 1 &le; <i>R</i>, <i>C</i>, <i>S</i> &le; 20. <i>R</i>, <i>C</i> and <i>S</i> are amounts of indentation introduced by an open round bracket, an open curly bracket, and an open square bracket, respectively.\n</p>\n\n<p>\nIn a well-indented program, the amount of indentation of a line is given by <i>R</i>(<i>r<sub>o</sub></i> &minus; <i>r<sub>c</sub></i>) + <i>C</i>(<i>c<sub>o</sub></i> &minus; <i>c<sub>c</sub></i>) + <i>S</i>(<i>s<sub>o</sub></i> &minus; <i>s<sub>c</sub></i>), where <i>r<sub>o</sub></i>, <i>c<sub>o</sub></i>, and <i>s<sub>o</sub></i> are the numbers of occurrences of open round, curly, and square brackets in all preceding lines, respectively, and <i>r<sub>c</sub></i>, <i>c<sub>c</sub></i>, and <i>s<sub>c</sub></i> are those of close brackets. The first line has no indentation in any well-indented program.\n</p>\n\n<p>\nThe above example is formatted in the indentation style (<i>R</i>, <i>C</i>, <i>S</i>) = (9, 5, 2). The only grouping symbol occurring in the first line of the above program is an open round bracket. Therefore the amount of indentation for the second line is 9 &middot; (1 &minus; 0) + 5 &middot; (0 &minus; 0) + 2 &middot;(0 &minus; 0) = 9. The first four lines contain two open round brackets, one open curly bracket, one open square bracket, two close round brackets, but no close curly nor square bracket. Therefore the amount of indentation for the fifth line is 9 &middot; (2 &minus; 2) + 5 &middot; (1 &minus; 0) + 2 &middot; (1 &minus; 0) = 7.\n</p>\n\n<p>\nStylish masters write only well-indented Stylish programs. Every master has his/her own indentation style.\n</p>\n\n<p>\nWrite a program that imitates indentation styles of Stylish masters.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. The first line of a dataset contains two integers <i>p</i> (1 &le; <i>p</i> &le; 10) and <i>q</i> (1 &le; <i>q</i> &le; 10). The next <i>p</i> lines form a well-indented program <i>P</i> written by a\nStylish master and the following <i>q</i> lines form another program <i>Q</i>. You may assume that every line of both programs has at least one character and at most 80 characters. Also, you may assume that no line of <i>Q</i> starts with a period.\n</p>\n\n<p>\nThe last dataset is followed by a line containing two zeros.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nApply the indentation style of <i>P</i> to <i>Q</i> and output the appropriate amount of indentation for each line of <i>Q</i>. The amounts must be output in a line in the order of corresponding lines of <i>Q</i> and they must be separated by a single space. The last one should not be followed by trailing spaces. If the appropriate amount of indentation of a line of <i>Q</i> cannot be determined uniquely through analysis of <i>P</i>, then output <span>-1</span> for that line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5 4\n(Follow.my.style\n.........starting.from.round.brackets)\n{then.curly.brackets\n.....[.and.finally\n.......square.brackets.]}\n(Thank.you\n{for.showing.me\n[all\nthe.secrets]})\n4 2\n(This.time.I.will.show.you\n.........(how.to.use.round.brackets)\n.........[but.not.about.square.brackets]\n.........{nor.curly.brackets})\n(I.learned\nhow.to.use.round.brackets)\n4 2\n(This.time.I.will.show.you\n.........(how.to.use.round.brackets)\n.........[but.not.about.square.brackets]\n.........{nor.curly.brackets})\n[I.have.not.learned\nhow.to.use.square.brackets]\n2 2\n(Be.smart.and.let.fear.of\n..(closed.brackets).go)\n(A.pair.of.round.brackets.enclosing\n[A.line.enclosed.in.square.brackets])\n1 2\nTelling.you.nothing.but.you.can.make.it\n[One.liner.(is).(never.indented)]\n[One.liner.(is).(never.indented)]\n2 4\n([{Learn.from.my.KungFu\n...}])\n((\n{{\n[[\n]]}}))\n1 2\nDo.not.waste.your.time.trying.to.read.from.emptiness\n(\n)\n2 3\n({Quite.interesting.art.of.ambiguity\n....})\n{\n(\n)}\n2 4\n({[\n............................................................]})\n(\n{\n[\n]})\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0 9 14 16\n0 9\n0 -1\n0 2\n0 0\n0 2 4 6\n0 -1\n0 -1 4\n0 20 40 60\n</pre>", "p00906": "\n<H1><font color=\"#000\">Problem C: </font>One-Dimensional Cellular Automaton</H1>\n\n<p>\nThere is a one-dimensional cellular automaton consisting of <i>N</i> cells. Cells are numbered from 0 to <i>N</i> &minus; 1.\n</p>\n\n<p>\nEach cell has a state represented as a non-negative integer less than <i>M</i>. The states of cells evolve through discrete time steps. We denote the state of the i-th cell at time t as <i>S</i>(<i>i</i>, <i>t</i>). The state at time <i>t</i> + 1 is defined by the equation \n</p>\n\n<p style=\"text-align:center\">\n<i>S</i>(<i>i</i>, <i>t</i> + 1) = (<i>A</i> &times; <i>S</i>(<i>i</i> &minus; 1, <i>t</i>) + <i>B</i> &times; <i>S</i>(<i>i</i>, <i>t</i>) + <i>C</i> &times; <i>S</i>(<i>i</i> + 1, <i>t</i>)) mod <i>M</i>,  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(1)\n</p>\n\n<p>\nwhere <i>A</i>, <i>B</i> and <i>C</i> are non-negative integer constants. For <i>i</i> &lt; 0 or <i>N</i> &le; <i>i</i>, we define <i>S</i>(<i>i</i>, <i>t</i>) = 0.\n</p>\n\n<p>\nGiven an automaton definition and initial states of cells, your mission is to write a program that computes the states of the cells at a specified time <i>T</i>.\n</p>\n\n\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n</p>\n\n<p>\n<i>N M A B C T</i><br/>\n<i>S</i>(0, 0) <i>S</i>(1, 0) ... <i>S</i>(<i>N</i> &minus; 1, 0)<br/>\n</p>\n\n<p>\nThe first line of a dataset consists of six integers, namely <i>N</i>, <i>M</i>, <i>A</i>, <i>B</i>, <i>C</i> and <i>T</i>. <i>N</i> is the number of cells. <i>M</i> is the modulus in the equation (1). <i>A</i>, <i>B</i> and <i>C</i> are coefficients in the equation (1). Finally, <i>T</i> is the time for which you should compute the states.\n</p>\n\n<p>\nYou may assume that 0 &lt; <i>N</i> &le; 50, 0 &lt; <i>M</i> &le; 1000, 0 &le; <i>A</i>, <i>B</i>, <i>C</i> &lt; <i>M</i> and 0 &le; <i>T</i> &le; 10<sup>9</sup>.\n</p>\n\n<p>\nThe second line consists of <i>N</i> integers, each of which is non-negative and less than <i>M</i>. They represent the states of the cells at time zero.\n</p>\n\n<p>\nA line containing six zeros indicates the end of the input.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output a line that contains the states of the cells at time <i>T</i>. The format of the output is as follows.\n</p>\n\n<p style=\"text-align:center\">\n<i>S</i>(0, <i>T</i>) <i>S</i>(1, <i>T</i>) ... <i>S</i>(<i>N</i> &minus; 1, <i>T</i>)\n</p>\n\n<p>\nEach state must be represented as an integer and the integers must be separated by a space.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5 4 1 3 2 0\n0 1 2 0 1\n5 7 1 3 2 1\n0 1 2 0 1\n5 13 1 3 2 11\n0 1 2 0 1\n5 5 2 0 1 100\n0 1 2 0 1\n6 6 0 2 3 1000\n0 1 2 0 1 4\n20 1000 0 2 3 1000000000\n0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1\n30 2 1 0 1 1000000000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n30 2 1 1 1 1000000000\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n30 5 2 3 1 1000000000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0 1 2 0 1\n2 0 0 4 3\n2 12 10 9 11\n3 0 4 2 1\n0 4 2 0 4 4\n0 376 752 0 376 0 376 752 0 376 0 376 752 0 376 0 376 752 0 376\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 1 3 2 2 2 3 3 1 4 3 1 2 3 0 4 3 3 0 4 2 2 2 2 1 1 2 1 3 0\n</pre>", "p00907": "\n<H1><font color=\"#000\">Problem D: </font> Find the Outlier</H1>\n\n<p>\nProfessor Abacus has just built a new computing engine for making numerical tables. It was designed to calculate the values of a polynomial function in one variable at several points at a time. With the polynomial function <i>f</i>(<i>x</i>) = <i>x</i><sup>2</sup> + 2<i>x</i> + 1, for instance, a possible expected calculation result is 1 (= <i>f</i>(0)), 4 (= <i>f</i>(1)), 9 (= <i>f</i>(2)), 16 (= <i>f</i>(3)), and 25 (= <i>f</i>(4)).\n</p>\n\n<p>\nIt is a pity, however, the engine seemingly has faulty components and exactly one value among those calculated simultaneously is always wrong. With the same polynomial function as above, it can, for instance, output 1, 4, 12, 16, and 25 instead of 1, 4, 9, 16, and 25.\n</p>\n\n<p>\nYou are requested to help the professor identify the faulty components. As the first step, you should write a program that scans calculation results of the engine and finds the wrong values.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets, each representing a calculation result in the following format.\n</p>\n\n<p>\n<i>d</i><br/>\n<i>v</i><sub>0</sub><br/>\n<i>v</i><sub>1</sub><br/>\n...<br/>\n<i>v</i><sub><i>d</i>+2</sub><br/>\n</p>\n\n<p>\nHere, <i>d</i> in the first line is a positive integer that represents the degree of the polynomial, namely, the highest exponent of the variable. For instance, the degree of 4<i>x</i><sup>5</sup> + 3<i>x</i> + 0.5 is five and that of 2.4<i>x</i> + 3.8 is one. <i>d</i> is at most five.\n</p>\n\n<p>\nThe following <i>d</i> + 3 lines contain the calculation result of <i>f</i>(0), <i>f</i>(1), ... , and <i>f</i>(<i>d</i> + 2) in this order, where <i>f</i> is the polynomial function. Each of the lines contains a decimal fraction between -100.0 and 100.0, exclusive.\n</p>\n\n<p>\nYou can assume that the wrong value, which is exactly one of <i>f</i>(0), <i>f</i>(1), ... , and <i>f</i>(<i>d</i>+2), has an error greater than 1.0. Since rounding errors are inevitable, the other values may also have errors but they are small and never exceed 10<sup>-6</sup>.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing a zero.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output <i>i</i> in a line when <i>v<sub>i</sub></i> is wrong.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n1.0\n4.0\n12.0\n16.0\n25.0\n1\n-30.5893962764\n5.76397083962\n39.3853798058\n74.3727663177\n4\n42.4715310246\n79.5420238202\n28.0282396675\n-30.3627807522\n-49.8363481393\n-25.5101480106\n7.58575761381\n5\n-21.9161699038\n-48.469304271\n-24.3188578417\n-2.35085940324\n-9.70239202086\n-47.2709510623\n-93.5066246072\n-82.5073836498\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2\n1\n1\n6\n</pre>", "p00909": "\n<H1><font color=\"#000\">Problem F: </font>Never Wait for Weights</H1>\n\n<p>\nIn a laboratory, an assistant, Nathan Wada, is measuring weight differences between sample pieces pair by pair. He is using a balance because it can more precisely measure the weight difference between two samples than a spring scale when the samples have nearly the same weight.\n</p>\n\n<p>\nHe is occasionally asked the weight differences between pairs of samples. He can or cannot answer based on measurement results already obtained.\n</p>\n\n<p>\nSince he is accumulating a massive amount of measurement data, it is now not easy for him to promptly tell the weight differences. Nathan asks you to develop a program that records measurement results and automatically tells the weight differences.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. The first line of a dataset contains two integers <i>N</i> and <i>M</i>. <i>N</i> denotes the number of sample pieces (2 &le; <i>N</i> &le; 100,000). Each sample is assigned a unique number from 1 to <i>N</i> as an identifier. The rest of the dataset consists of <i>M</i> lines (1 &le; <i>M</i> &le; 100,000), each of which corresponds to either a measurement result or an inquiry. They are given in chronological order.\n</p>\n<p>\nA measurement result has the format,\n</p>\n\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;! <i>a b w</i>\n</p>\n\n<p>\nwhich represents the sample piece numbered <i>b</i> is heavier than one numbered <i>a</i> by <i>w</i> micrograms (<i>a</i> &ne; <i>b</i>). That is, <i>w</i> = <i>w<sub>b</sub></i> &minus; <i>w<sub>a</sub></i>, where <i>w<sub>a</sub></i> and <i>w<sub>b</sub></i> are the weights of <i>a</i> and <i>b</i>, respectively. Here, <i>w</i> is a non-negative integer not exceeding 1,000,000.\n</p>\n\n<p>\nYou may assume that all measurements are exact and consistent. \n</p>\n\n<p>\nAn inquiry has the format,\n</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;? <i>a b</i>\n</p>\n\n<p>\nwhich asks the weight difference between the sample pieces numbered <i>a</i> and <i>b</i> (<i>a</i> &ne; <i>b</i>).\n</p>\n\n<p>\nThe last dataset is followed by a line consisting of two zeros separated by a space.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each inquiry, ? <i>a</i> <i>b</i>, print the weight difference in micrograms between the sample pieces numbered <i>a</i> and <i>b</i>, <i>w<sub>b</sub></i> &minus; <i>w<sub>a</sub></i>, followed by a newline if the weight difference can be computed based on the measurement results prior to the inquiry. The difference can be zero, or negative as well as positive. You can assume that its absolute value is at most 1,000,000. If the difference cannot be computed based on the measurement results prior to the inquiry, print <span>UNKNOWN</span> followed by a newline.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2 2\n! 1 2 1\n? 1 2\n2 2\n! 1 2 1\n? 2 1\n4 7\n! 1 2 100\n? 2 3\n! 2 3 100\n? 2 3\n? 1 3\n! 4 3 150\n? 4 1\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n-1\nUNKNOWN\n100\n200\n-50\n</pre>", "p00911": "\n<H1><font color=\"#000\">Problem H: </font>Company Organization</H1>\n\n<p>\nYou started a company a few years ago and fortunately it has been highly successful. As the growth of the company, you noticed that you need to manage employees in a more organized way, and decided to form several groups and assign employees to them.\n</p>\n\n<p>\nNow, you are planning to form n groups, each of which corresponds to a project in the company. Sometimes you have constraints on members in groups. For example, a group must be a subset of another group because the former group will consist of senior members of the latter group, the members in two groups must be the same because current activities of the two projects are closely related, the members in two groups must not be exactly the same to avoid corruption, two groups cannot have a common employee because of a security reason, and two groups must have a common employee to facilitate collaboration.\n</p>\n\n<p>\nIn summary, by letting <i>X<sub>i</sub></i> (<i>i</i> = 1, ... , <i>n</i>) be the set of employees assigned to the <i>i</i>-th group, we have five types of constraints as follows.\n</p>\n\n<ol>\n<li> <i>X<sub>i</sub></i> &sube; <i>X<sub>j</sub></i></li>\n<li> <i>X<sub>i</sub></i> = <i>X<sub>j</sub></i></li>\n<li> <i>X<sub>i</sub></i> &ne; <i>X<sub>j</sub></i></li>\n<li> <i>X<sub>i</sub></i> &cap; <i>X<sub>j</sub></i> = &empty;</li>\n<li> <i>X<sub>i</sub></i> &cap; <i>X<sub>j</sub></i> &ne; &empty;</li>\n</ol>\n\n<p>\nSince you have listed up constraints without considering consistency, it might be the case that you cannot satisfy all the constraints. Constraints are thus ordered according to their priorities, and you now want to know how many constraints of the highest priority can be satisfied.\n</p>\n\n<p>\nYou do not have to take ability of employees into consideration. That is, you can assign anyone to any group. Also, you can form groups with no employee. Furthermore, you can hire or fire as many employees as you want if you can satisfy more constraints by doing so.\n</p>\n\n<p>\nFor example, suppose that we have the following five constraints on three groups in the order of their priorities, corresponding to the first dataset in the sample input.\n</p>\n\n<ul>\n<li><i>X</i><sub>2</sub> &sube; <i>X</i><sub>1</sub></li>\n<li><i>X</i><sub>3</sub> &sube; <i>X</i><sub>2</sub></li>\n<li><i>X</i><sub>1</sub> &sube; <i>X</i><sub>3</sub></li>\n<li><i>X</i><sub>1</sub> &ne; <i>X</i><sub>3</sub></li>\n<li><i>X</i><sub>3</sub> &sube; <i>X</i><sub>1</sub></li>\n</ul>\n\n<p>\nBy assigning the same set of employees to <i>X</i><sub>1</sub>, <i>X</i><sub>2</sub>, and <i>X</i><sub>3</sub>, we can satisfy the first three constraints. However, no matter how we assign employees to <i>X</i><sub>1</sub>, <i>X</i><sub>2</sub>, and <i>X</i><sub>3</sub>, we cannot satisfy the first four highest priority constraints at the same time. Though we can satisfy the first three constraints and the fifth constraint at the same time, the answer should be three.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several datasets. The first line of a dataset consists of two integers <i>n</i> (2 &le; <i>n</i> &le; 100) and <i>m</i> (1 &le; <i>m</i> &le; 10000), which indicate the number of groups and the number of constraints, respectively. Then, description of <i>m</i> constraints follows. The description of each constraint consists of three integers <i>s</i> (1 &le; <i>s</i> &le; 5), <i>i</i> (1 &le; <i>i</i> &le; <i>n</i>), and <i>j</i> (1 &le; <i>j</i> &le; <i>n</i>, <i>j</i> &ne;= <i>i</i>), meaning a constraint of the <i>s</i>-th type imposed on the <i>i</i>-th group and the <i>j</i>-th group. The type number of a constraint is as listed above. The constraints are given in the descending order of priority.\n</p>\n\n<p>\nThe input ends with a line containing two zeros.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the number of constraints of the highest priority satisfiable at the same time.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4 5\n1 2 1\n1 3 2\n1 1 3\n3 1 3\n1 3 1\n4 4\n1 2 1\n1 3 2\n1 1 3\n4 1 3\n4 5\n1 2 1\n1 3 2\n1 1 3\n4 1 3\n5 1 3\n2 3\n1 1 2\n2 1 2\n3 1 2\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3\n4\n4\n2\n</pre>", "p00914": "\n<H1><font color=\"#000\">Problem A: </font>Equal Sum Sets</H1>\n\n<p>\nLet us consider sets of positive integers less than or equal to <var>n</var>. Note that all elements of a set are different. Also note that the order of elements doesn't matter, that is, both {3, 5, 9} and {5, 9, 3} mean the same set.\n</p>\n\n<p>\nSpecifying the number of set elements and their sum to be <var>k</var> and <var>s</var>, respectively, sets satisfying the conditions are limited. When <var>n</var> = 9, <var>k</var> = 3 and <var>s</var> = 23, {6, 8, 9} is the only such set. There may be more than one such set, in general, however. When <var>n</var> = 9, <var>k</var> = 3 and <var>s</var> = 22, both {5, 8, 9} and {6, 7, 9} are possible.\n</p>\n\n<p>\nYou have to write a program that calculates the number of the sets that satisfy the given conditions.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. The number of datasets does not exceed 100.\n</p>\n\n<p>\nEach of the datasets has three integers <var>n</var>, <var>k</var> and <var>s</var> in one line, separated by a space. You may assume 1 &le; <var>n</var> &le; 20, 1 &le; <var>k</var> &le; 10 and 1 &le; <var>s</var> &le; 155.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing three zeros. \n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output for each dataset should be a line containing a single integer that gives the number of the sets that satisfy the conditions. No other characters should appear in the output.\n</p>\n\n<p>\nYou can assume that the number of sets does not exceed 2<sup>31</sup> - 1.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n9 3 23\n9 3 22\n10 3 28\n16 10 107\n20 8 102\n20 10 105\n20 10 155\n3 4 3\n4 2 11\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n2\n0\n20\n1542\n5448\n1\n0\n0\n</pre>", "p00919": "\n<H1><font color=\"#000\">Problem F: </font>Directional Resemblance</H1>\n\n<p>\nVectors have their directions and two vectors make an angle between them. Given a set of three-dimensional vectors, your task is to find the pair among them that makes the smallest angle.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. A dataset specifies a set of three-dimensional vectors, some of which are directly given in the dataset and the others are generated by the procedure described below.\n</p>\n\n<p>\nEach dataset is formatted as follows.\n</p>\n\n<pre>\n<var>m</var> <var>n</var> <var>S</var> <var>W</var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var> <var>z<sub>1</sub></var>\n<var>x<sub>2</sub></var> <var>y<sub>2</sub></var> <var>z<sub>2</sub></var>\n:\n<var>x<sub>m</sub></var> <var>y<sub>m</sub></var> <var>z<sub>m</sub></var>\n</pre>\n\n<p>\nThe first line contains four integers <var>m</var>, <var>n</var>, <var>S</var>, and <var>W</var>.\n</p>\n\n<p>\nThe integer <var>m</var> is the number of vectors whose three components are directly specified in the\ndataset. Starting from the second line, <var>m</var> lines have the three components of <var>m</var> vectors. The <var>i</var>-th line of which indicates the vector <var>v<sub>i</sub></var> = (<var>x<sub>i</sub></var>, <var>y<sub>i</sub></var>, <var>z<sub>i</sub></var>). All the vector components are positive integers less than or equal to 100.\n</p>\n\n<p>\nThe integer <var>n</var> is the number of vectors generated by the following procedure.\n</p>\n\n<pre>\nint g = S;\nfor(int i=m+1; i<=m+n; i++) {\n  x[i] = (g/7)    %100 + 1;\n  y[i] = (g/700)  %100 + 1;\n  z[i] = (g/70000)%100 + 1;\n  if( g%2 == 0 ) { g = (g/2); }\n  else           { g = (g/2) ^ W; }\n}\n</pre>\n\n<p>\nFor <var>i = m + 1, . . . , m + n</var>, the <var>i</var>-th vector <var>v<sub>i</sub></var> of the set has three components <span>x[i]</span>, <span>y[i]</span>, and <span>z[i]</span> generated by this procedure.\n</p>\n\n<p>\nHere, values of <span>S</span> and <span>W</span> are the parameters <var>S</var> and <var>W</var> given in the first line of the dataset. You may assume 1 &le; <var>S</var> &le; 10<sup>9</sup> and 1 &le; <var>W</var> &le; 10<sup>9</sup>.\n</p>\n\n<p>\nThe total number of vectors satisfies 2 &le; <var>m + n</var> &le; 12 &times; 10<sup>4</sup>. Note that exactly the same vector may be specified twice or more in a single dataset.\n</p>\n\n<p>\nA line containing four zeros indicates the end of the input. The total of <var>m+n</var> for all the datasets in the input never exceeds 16 &times; 10<sup>5</sup>.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the pair of vectors among the specified set with the smallest non-zero angle in between. It is assured that there are at least two vectors having different directions.\n</p>\n\n<p>\nVectors should be indicated by their three components. The output for a pair of vectors <var>v<sub>a</sub></var> and <var>v<sub>b</sub></var> should be formatted in a line as follows.\n</p>\n\n<pre>\n<var>x<sub>a</sub></var> <var>y<sub>a</sub></var> <var>z<sub>a</sub></var> <var>x<sub>b</sub></var> <var>y<sub>b</sub></var> <var>z<sub>b</sub></var>\n</pre>\n\n<p>\nTwo vectors (<var>x<sub>a</sub></var>, <var>y<sub>a</sub></var>, <var>z<sub>a</sub></var>) and (<var>x<sub>b</sub></var>, <var>y<sub>b</sub></var>, <var>z<sub>b</sub></var>) are ordered in the dictionary order, that is, <var>v<sub>a</sub></var> &lt; <var>v<sub>b</sub></var> if <var>x<sub>a</sub></var> &lt; <var>x<sub>b</sub></var>, or if <var>x<sub>a</sub> = x<sub>b</sub></var> and <var>y<sub>a</sub></var> &lt; <var>y<sub>b</sub></var>, or if <var>x<sub>a</sub> = x<sub>b</sub></var>, <var>y<sub>a</sub> = y<sub>b</sub></var> and <var>z<sub>a</sub></var> &lt; <var>z<sub>b</sub></var>. When a vector pair is output, the smaller vector in this order should be output first.\n</p>\n\n<p>\nIf more than one pair makes the equal smallest angle, the pair that is the smallest among them in the dictionary order between vector pairs should be output. The pair (<var>v<sub>i</sub></var>, <var>v<sub>j</sub></var>) is smaller than the pair (<var>v<sub>k</sub></var>, <var>v<sub>l</sub></var>) if <var>v<sub>i</sub></var> &lt; <var>v<sub>k</sub></var>, or if <var>v<sub>i</sub> = v<sub>k</sub></var> and <var>v<sub>j</sub></var> &lt; <var>v<sub>l</sub></var>.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4 0 2013 1124\n1 1 1\n2 2 2\n2 1 1\n1 2 1\n2 100 131832453 129800231\n42 40 46\n42 40 46\n0 100000 7004674 484521438\n0 0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1 1 1 1 2 1\n42 40 46 83 79 91\n92 92 79 99 99 85\n</pre>", "p00920": "\n<H1><font color=\"#000\">Problem G: </font>Longest Chain</H1>\n\n<p>\nLet us compare two triples <var>a = (x<sub>a</sub>, y<sub>a</sub>, z<sub>a</sub>)</var> and <var>b = (x<sub>b</sub>, y<sub>b</sub>, z<sub>b</sub>)</var> by a partial order &ang; defined as follows.\n<br/>\n<center>\n<var>a</var> &ang; <var>b</var> &hArr; <var>x<sub>a</sub></var> &lt; <var>x<sub>b</sub></var> and <var>y<sub>a</sub></var> &lt; <var>y<sub>b</sub></var> and <var>z<sub>a</sub></var> &lt; <var>z<sub>b</sub></var>\n<br/>\n</center>\n<br/>\n<p>\nYour mission is to find, in the given set of triples, the longest ascending series <var>a<sub>1</sub></var> &ang; <var>a<sub>2</sub></var> &ang; ...  &ang; <var>a<sub>k</sub></var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets, each specifying a set of triples formatted as follows.\n</p>\n\n<pre>\n<var>m</var> <var>n</var> <var>A</var> <var>B</var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var> <var>z<sub>1</sub></var>\n<var>x<sub>2</sub></var> <var>y<sub>2</sub></var> <var>z<sub>2</sub></var>\n...\n<var>x<sub>m</sub></var> <var>y<sub>m</sub></var> <var>z<sub>m</sub></var>\n</pre>\n\n<p>\nHere, <var>m</var>, <var>n</var>, <var>A</var> and <var>B</var> in the first line, and all of <var>x<sub>i</sub></var>, <var>y<sub>i</sub></var> and <var>z<sub>i</sub></var> (<var>i</var> = 1, . . . , <var>m</var>) in the following lines are non-negative integers.\n</p>\n\n<p>\nEach dataset specifies a set of <var>m + n</var> triples. The triples <var>p<sub>1</sub></var> through <var>p<sub>m</sub></var> are explicitly specified in the dataset, the <var>i</var>-th triple <var>p<sub>i</sub></var> being (<var>x<sub>i</sub>, y<sub>i</sub>, z<sub>i</sub>)</var>. The remaining <var>n</var> triples are specified by parameters <var>A</var> and <var>B</var> given to the following generator routine.\n</p>\n\n<pre>\nint a = A, b = B, C = ~(1<<31), M = (1<<16)-1;\nint r() {\n  a = 36969 * (a & M) + (a >> 16);\n  b = 18000 * (b & M) + (b >> 16);\n  return (C & ((a << 16) + b)) % 1000000;\n}\n</pre>\n\n<p>\nRepeated 3<var>n</var> calls of <span>r()</span> defined as above yield values of <var>x<sub>m+1</sub></var>, <var>y<sub>m+1</sub></var>, <var>z<sub>m+1</sub></var>, <var>x<sub>m+2</sub></var>, <var>y<sub>m+2</sub></var>, <var>z<sub>m+2</sub></var>, ..., <var>x<sub>m+n</sub></var>, <var>y<sub>m+n</sub></var>, and <var>z<sub>m+n</sub></var>, in this order.\n</p>\n\n<p>\nYou can assume that 1 &le; <var>m + n</var> &le; 3 &times; 10<sup>5</sup>, 1 &le; <var>A,B</var> &le; 2<sup>16</sup>, and 0 &le; <var>x<sub>k</sub>, y<sub>k</sub>, z<sub>k</sub></var> &lt; 10<sup>6</sup> for 1 &le; <var>k</var> &le; <var>m + n</var>.\n</p>\n\n<p>\nThe input ends with a line containing four zeros. The total of <var>m + n</var> for all the datasets does not exceed 2 &times; 10<sup>6</sup>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the length of the longest ascending series of triples in the specified set. If <var>p<sub>i<sub>1</sub></sub></var> &ang; <var>p<sub>i<sub>2</sub></sub></var> &ang; ... &ang; <var>p<sub>i<sub>k</sub></sub></var> is the longest, the answer should be <var>k</var>.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n6 0 1 1\n0 0 0\n0 2 2\n1 1 1\n2 0 2\n2 2 0\n2 2 2\n5 0 1 1\n0 0 0\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n10 0 1 1\n3 0 0\n2 1 0\n2 0 1\n1 2 0\n1 1 1\n1 0 2\n0 3 0\n0 2 1\n0 1 2\n0 0 3\n0 10 1 1\n0 0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3\n5\n1\n3\n</pre>", "p00924": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem A:\nBit String Reordering\n</h2>\n\n<p>\n  You have to reorder a given bit string as specified. The only operation allowed is swapping adjacent bit pairs. Please write a program that calculates the minimum number of swaps required.\n</p>\n\n<p>\n  The initial bit string is simply represented by a sequence of bits, while the target is specified by a <i>run-length code</i>. The run-length code of a bit string is a sequence of the lengths of maximal consecutive sequences of zeros or ones in the bit string. For example, the run-length code of \"011100\" is \"1 3 2\". Note that there are two different bit strings with the same run-length code, one starting with zero and the other starting with one. The target is either of these two.\n</p>\n\n<p>\n  In Sample Input 1, bit string \"100101\" should be reordered so that its run-length code is \"1 3 2\", which means either \"100011\" or \"011100\". At least four swaps are required to obtain \"011100\". On the other hand, only one swap is required to make \"100011\". Thus, in this example, 1 is the answer.\n</p>\n\n<h3>Input</h3>\n\n\n<p>\nThe input consists of a single test case. The test case is formatted as follows. <br>\n<br>\n$N$ $M$<br>\n$b_1$ $b_2$ . . . $b_N$<br>\n$p_1$ $p_2$ . . . $p_M$<br>\n<br>\n\n\nThe first line contains two integers $N$ ($1 \\leq N \\leq 15$) and $M$ ($1 \\leq M \\leq N$). The second line\nspecifies the initial bit string by $N$ integers. Each integer $b_i$ is either 0 or 1. The third line contains the run-length code, consisting of $M$ integers. Integers $p_1$ through $p_M$ represent the lengths of consecutive sequences of zeros or ones in the bit string, from left to right. Here, $1 \\leq p_j$ for $1 \\leq j \\leq M$ and $\\sum^{M}_{j=1} p_j = N$ hold. It is guaranteed that the initial bit string can be reordered into a bit string with its run-length code $p_1, . . . , p_M$.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nOutput the minimum number of swaps required\n</p>\n\n\n\n<h3>Sample Input 1</h3>\n\n<pre>6 3\n1 0 0 1 0 1\n1 3 2</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>1</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>7 2\n1 1 1 0 0 0 0\n4 3</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>12</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>15 14\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 2</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>7</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>1 1\n0\n1</pre>\n\n<h3>Sample Output 4</h3>\n\n<pre>0</pre>\n", "p00926": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem C:\nShopping\n</h2>\n\n<p>\n  Your friend will enjoy shopping. She will walk through a mall along a straight street, where $N$ individual shops (numbered from 1 to $N$) are aligned at regular intervals. Each shop has one door and is located at the one side of the street. The distances between the doors of the adjacent shops are the same length, i.e. a unit length. Starting shopping at the entrance of the mall, she visits shops in order to purchase goods. She has to go to the exit of the mall after shopping.\n</p>\n\n<p>\n  She requires some restrictions on visiting order of shops. Each of the restrictions indicates that she shall visit a shop before visiting another shop. For example, when she wants to buy a nice dress before choosing heels, she shall visit a boutique before visiting a shoe store. When the boutique is farther than the shoe store, she must pass the shoe store before visiting the boutique, and go back to the shoe store after visiting the boutique.\n</p>\n\n<p>\n  If only the order of the visiting shops satisfies all the restrictions, she can visit other shops in any order she likes.\n</p>\n\n<p>\n  Write a program to determine the minimum required walking length for her to move from the entrance to the exit.\n</p>\n\n<p>\n  Assume that the position of the door of the shop numbered $k$ is $k$ units far from the entrance, where the position of the exit is $N + 1$ units far from the entrance.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The input consists of a single test case.<br>\n  <br>\n$N$ $m$<br>\n$c_1$ $d_1$<br>\n.<br>\n.<br>\n.<br>\n$c_m$ $d_m$<br>\n  <br>\n  \n  The first line contains two integers $N$ and $m$, where $N$ ($1 \\leq N \\leq 1000$) is the number of shops, and $m$ ($0 \\leq m \\leq 500$) is the number of restrictions. Each of the next $m$ lines contains two integers $c_i$ and $d_i$ ($1 \\leq c_i < d_i \\leq N$) indicating the $i$-th restriction on the visiting order, where she must visit the shop numbered $c_i$ after she visits the shop numbered $d_i$ ($i = 1, . . . , m$).\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       </p>\n<p>\n  There are no pair of $j$ and $k$ that satisfy $c_j = c_k$ and $d_j = d_k$.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nOutput the minimum required walking length for her to move from the entrance to the exit. You should omit the length of her walk in the insides of shops.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>10 3\n3 7\n8 9\n2 5</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>23</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>10 3\n8 9\n6 7\n2 4</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>19</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>10 0</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>11</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>10 6\n6 7\n4 5\n2 5\n6 9\n3 5\n6 8</pre>\n\n<h3>Sample Output 4</h3>\n\n<pre>23</pre>\n\n<h3>Sample Input 5</h3>\n\n<pre>1000 8\n3 4\n6 1000\n5 1000\n7 1000\n8 1000\n4 1000\n9 1000\n1 2</pre>\n\n<h3>Sample Output 5</h3>\n\n<pre>2997</pre>", "p00935": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem A\nDecimal Sequences</h2>\n\n<p>\nHanako learned the conjecture that all the non-negative integers appear in the infinite digit sequence of the decimal representation of $\\pi$ = 3.14159265..., the ratio of a circle's circumference to its diameter. After that, whenever she watches a sequence of digits, she tries to count up non-negative integers whose decimal representations appear as its subsequences.\n</p>\n\n<p>\nFor example, given a sequence \"<span>3 0 1</span>\", she finds representations of five non-negative integers 3, 0, 1, 30 and 301 that appear as its subsequences.\n</p>\n\n<p>\nYour job is to write a program that, given a finite sequence of digits, outputs the smallest non-negative integer not appearing in the sequence. In the above example, 0 and 1 appear, but 2 does not. So, 2 should be the answer.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case.<br>\n<br>\n\n$n$<br>\n$d_1$ $d_2$ ... $d_n$<br>\n<br>\n\n$n$ is a positive integer that indicates the number of digits. Each of $d_k$'s $(k = 1, ... ,  n)$ is a digit. There is a space or a newline between $d_k$ and $d_{k+1}$ $(k = 1, ..., n - 1)$.\n</p>\n\n<p>\nYou can assume that $1 \\leq n \\leq 1000$.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nPrint the smallest non-negative integer not appearing in the sequence.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>3\n3 0 1</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>2</pre>\n\n\n\n<h3>Sample Input 2</h3>\n\n<pre>11\n9 8 7 6 5 4 3 2 1 1 0</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>12</pre>\n\n\n\n<h3>Sample Input 3</h3>\n\n<pre>10\n9 0 8 7 6 5 4 3 2 1</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>10</pre>\n\n\n<h3>Sample Input 4</h3>\n\n<pre>100\n3 6 7 5 3 5 6 2 9 1 2 7 0 9 3 6 0 6 2\n6 1 8 7 9 2 0 2 3 7 5 9 2 2 8 9 7 3 6\n1 2 9 3 1 9 4 7 8 4 5 0 3 6 1 0 6 3 2\n0 6 1 5 5 4 7 6 5 6 9 3 7 4 5 2 5 4 7\n4 4 3 0 7 8 6 8 8 4 3 1 4 9 2 0 6 8 9\n2 6 6 4 9</pre>\n\n<h3>Sample Output 4</h3>\n\n<pre>11</pre>\n\n\n<h3>Sample Input 5</h3>\n\n<pre>100\n7 2 7 5 4 7 4 4 5 8 1 5 7 7 0 5 6 2 0\n4 3 4 1 1 0 6 1 6 6 2 1 7 9 2 4 6 9 3\n6 2 8 0 5 9 7 6 3 1 4 9 1 9 1 2 6 4 2\n9 7 8 3 9 5 5 2 3 3 8 4 0 6 8 2 5 5 0\n6 7 1 8 5 1 4 8 1 3 7 3 3 5 3 0 6 0 6\n5 3 2 2 2</pre>\n\n<h3>Sample Output 5</h3>\n\n<pre>86</pre>\n\n\n<h3>Sample Input 6</h3>\n\n<pre>1\n3</pre>\n\n<h3>Sample Output 6</h3>\n\n<pre>0</pre>\n", "p00939": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem E\nBringing Order to Disorder</h2>\n\n<p>\nA sequence of digits usually represents a number, but we may define an alternative interpretation. In this problem we define a new interpretation with the order relation $\\prec$ among the digit sequences of the same length defined below.\n</p>\n\n<p>\nLet $s$ be a sequence of $n$ digits, $d_1d_2 ... d_n$, where each $d_i$ $(1 \\leq i \\leq n)$ is one of 0, 1, ... , and 9. Let sum($s$), prod($s$), and int($s$) be as follows:<br>\n<br>\nsum($s$) = $d_1 + d_2 + ... + d_n$<br>\nprod($s$) = $(d_1 + 1) \\times (d_2 + 1) \\times  ... \\times (d_n + 1)$<br>\nint($s$) = $d_1 \\times 10^{n-1} + d_2 \\times 10^{n-2} + ... + d_n \\times 10^0$<br>\n<br>\n\nint($s$) is the integer the digit sequence $s$ represents with normal decimal interpretation.\n</p>\n\n<p>\nLet $s_1$ and $s_2$ be sequences of the same number of digits. Then $s_1 \\prec s_2$ ($s_1$ is less than $s_2$) is satisfied if and only if one of the following conditions is satisfied.\n</p>\n\n<ol>\n<li> sum($s_1$) $<$ sum($s_2$)</li>\n<li> sum($s_1$) $=$ sum($s_2$) and prod($s_1$) $<$ prod($s_2$)</li>\n<li> sum($s_1$) $=$ sum($s_2$), prod($s_1$) $=$ prod($s_2$), and int($s_1$) $<$ int($s_2$)</li>\n</ol>\n\n<p>\nFor 2-digit sequences, for instance, the following relations are satisfied.<br>\n<br>\n\n$00 \\prec 01 \\prec 10 \\prec 02 \\prec 20 \\prec 11 \\prec 03 \\prec 30 \\prec 12 \\prec 21 \\prec ... \\prec 89 \\prec 98 \\prec 99$<br>\n</p>\n\n<p>\nYour task is, given an $n$-digit sequence $s$, to count up the number of $n$-digit sequences that are less than $s$ in the order $\\prec$ defined above.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case in a line.<br>\n<br>\n$d_1d_2 ... d_n$<br>\n<br>\n\n$n$ is a positive integer at most 14. Each of $d_1, d_2, ...,$  and $d_n$ is a digit.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nPrint the number of the $n$-digit sequences less than $d_1d_2 ... d_n$ in the order defined above.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>20</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>4</pre>\n\n\n\n<h3>Sample Input 2</h3>\n\n<pre>020</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>5</pre>\n\n\n\n<h3>Sample Input 3</h3>\n\n<pre>118</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>245</pre>\n\n\n\n\n<h3>Sample Input 4</h3>\n\n<pre>11111111111111</pre>\n\n<h3>Sample Output 4</h3>\n\n<pre>40073759</pre>\n\n\n\n<h3>Sample Input 5</h3>\n\n<pre>99777222222211</pre>\n\n<h3>Sample Output 5</h3>\n\n<pre>23733362467675</pre>", "p00941": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem G\nDo Geese See God?</h2>\n\n<p>\nA palindrome is a sequence of characters which reads the same backward or forward. Famous ones include \"dogeeseseegod\" (\"Do geese see God?\"), \"amoreroma\" (\"Amore, Roma.\") and \"risetovotesir\" (\"Rise to vote, sir.\").\n</p>\n\n<p>\nAn ancient sutra has been handed down through generations at a temple on Tsukuba foothills. They say the sutra was a palindrome, but some of the characters have been dropped through transcription.\n</p>\n\n<p>\nA famous scholar in the field of religious studies was asked to recover the original. After long repeated deliberations, he concluded that no information to recover the original has been lost, and that the original can be reconstructed as the shortest palindrome including all the characters of the current sutra in the same order. That is to say, the original sutra is obtained by adding some characters before, between, and/or behind the characters of the current.\n</p>\n\n<p>\nGiven a character sequence, your program should output one of the shortest palindromes containing the characters of the current sutra preserving their order. One of the shortest? Yes, more than one shortest palindromes may exist. Which of them to output is also specified as its rank among the candidates in the lexicographical order.\n</p>\n\n<p>\nFor example, if the current sutra is cdba and 7th is specified, your program should output <span>cdabadc</span> among the 8 candidates, <span>abcdcba</span>, <span>abdcdba</span>, <span>acbdbca</span>, <span>acdbdca</span>, <span>cabdbac</span>, <span>cadbdac</span>, <span>cdabadc</span> and <span>cdbabdc</span>.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The test case is formatted as follows.<br>\n<br>\n\n$S$<br>\n$k$<br>\n</br>\n\nThe first line contains a string $S$ composed of lowercase letters from '<span>a</span>' to '<span>z</span>'. The length of $S$ is greater than 0, and less than or equal to 2000. The second line contains an integer $k$ which represents the rank in the lexicographical order among the candidates of the original sutra. $1 \\leq k \\leq 10^{18}$.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nOutput the $k$-th string in the lexicographical order among the candidates of the original sutra. If the number of the candidates is less than $k$, output <span>NONE</span>.\n</p>\n\n<p>\nThough the first lines of the Sample Input/Output 7 are folded at the right margin, they are actually single lines.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>crc\n1</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>crc</pre>\n\n\n<h3>Sample Input 2</h3>\n\n<pre>icpc\n1</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>icpci</pre>\n\n\n<h3>Sample Input 3</h3>\n\n<pre>hello\n1</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>heolloeh</pre>\n\n\n<h3>Sample Input 4</h3>\n\n<pre>hoge\n8</pre>\n\n<h3>Sample Output 4</h3>\n\n<pre>hogegoh</pre>\n\n\n<h3>Sample Input 5</h3>\n\n<pre>hoge\n9</pre>\n\n<h3>Sample Output 5</h3>\n\n<pre>NONE</pre>\n\n\n<h3>Sample Input 6</h3>\n\n<pre>bbaaab\n2</pre>\n\n<h3>Sample Output 6</h3>\n\n<pre>NONE</pre>\n\n\n\n<h3>Sample Input 7</h3>\n\n<pre>thdstodxtksrnfacdsohnlfuivqvqsozdstwa\nszmkboehgcerwxawuojpfuvlxxdfkezprodne\nttawsyqazekcftgqbrrtkzngaxzlnphynkmsd\nsdleqaxnhehwzgzwtldwaacfczqkfpvxnalnn\nhfzbagzhqhstcymdeijlbkbbubdnptolrmemf\nxlmmzhfpshykxvzbjmcnsusllpyqghzhdvljd\nxrrebeef\n11469362357953500</pre>\n\n<h3>Sample Output 7</h3>\n\n<pre>feeberrthdstodxtksrnfacdjsohnlfuivdhq\nvqsozhgdqypllstwausnzcmjkboehgcerzvwx\nakyhswuojpfhzumvmlxxdfkmezmprlotpndbu\nbbkblnjiedttmawsyqazekcftgshqbrhrtkzn\ngaxbzfhnnlanxvphyfnkqmzcsdfscaawdleqa\nxtnhehwzgzwhehntxaqeldwaacsfdsczmqknf\nyhpvxnalnnhfzbxagnzktrhrbqhsgtfckezaq\nyswamttdeijnlbkbbubdnptolrpmzemkfdxxl\nmvmuzhfpjouwshykaxwvzrecgheobkjmcznsu\nawtsllpyqdghzosqvqhdviuflnhosjdcafnrs\nktxdotsdhtrrebeef</pre>\n\n", "p00944": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem J\nPost Office Investigation</h2>\n\n\n<p>\nIn this country, all international mails from abroad are first gathered to the central post office, and then delivered to each destination post office relaying some post offices on the way. The delivery routes between post offices are described by a directed graph $G = (V,E)$, where $V$ is the set of post offices and $E$ is the set of possible mail forwarding steps. Due to the inefficient operations, you cannot expect that the mails are delivered along the shortest route.\n</p>\n\n<p>\nThe set of post offices can be divided into a certain number of groups. Here, a group is defined as a set of post offices where mails can be forwarded from any member of the group to any other member, directly or indirectly. The number of post offices in such a group does not exceed 10.\n</p>\n\n<p>\nThe post offices frequently receive complaints from customers that some mails are not delivered yet. Such a problem is usually due to system trouble in a single post office, but identifying which is not easy. Thus, when such complaints are received, the customer support sends staff to check the system of each candidate post office. Here, the investigation cost to check the system of the post office $u$ is given by $c_u$, which depends on the scale of the post office.\n</p>\n\n<p>\nSince there are many post offices in the country, and such complaints are frequently received, reducing the investigation cost is an important issue. To reduce the cost, the post service administration determined to use the following scheduling rule: When complaints on undelivered mails are received by the post offices $w_1, ..., w_k$ one day, staff is sent on the next day to investigate a single post office $v$ with the lowest investigation cost among candidates. Here, the post office $v$ is a candidate if all mails from the central post office to the post offices $w_1, ... , w_k$ must go through $v$. If no problem is found in the post office $v$, we have to decide the order of investigating other post offices, but the problem is left to some future days.\n</p>\n\n<p>\nYour job is to write a program that finds the cost of the lowest-cost candidate when the list of complained post offices in a day, described by $w_1, ... , w_k$, is given as a query.\n</p>\n\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case, formatted as follows.<br>\n<br>\n\n$n$ $m$<br>\n$u_1$ $v_1$<br>\n...<br>\n$u_m$ $v_m$<br>\n$c_1$<br>\n...<br>\n$c_n$<br>\n$q$<br>\n$k_1$ $w_{11}$ ... $w_{1k_1}$<br>\n...<br>\n$k_q$ $w_{q1}$ ... $w_{qk_q}$<br>\n<br>\n\n$n$ is the number of post offices $(2 \\leq n \\leq 50,000)$, which are numbered from 1 to $n$. Here, post office 1 corresponds to the central post office. $m$ is the number of forwarding pairs of post offices $(1 \\leq m \\leq 100,000)$. The pair, $u_i$ and $v_i$, means that some of the mails received at post office $u_i$ are forwarded to post office $v_i$ $(i = 1, ..., m)$. $c_j$ is the investigation cost for the post office $j$ $(j = 1,  ..., n, 1 \\leq c_j \\leq 10^9)$. $q$ $(q \\geq 1)$ is the number of queries, and each query is specified by a list of post offices which received undelivered mail complaints. $k_i$ $(k_i \\geq 1)$ is the length of the list and $w_{i1}, ...,  w_{ik_i}$ are the distinct post offices in the list. $\\sum_{i=1}^{q} k_i \\leq 50,000$.\n</p>\n\n<p>\nYou can assume that there is at least one delivery route from the central post office to all the post offices.\n</p>\n\n\n\n<h3>Output</h3>\n\n<p>\nFor each query, you should output a single integer that is the lowest cost of the candidate of troubled post office.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>8 8\n1 2\n1 3\n2 4\n2 5\n2 8\n3 5\n3 6\n4 7\n1000\n100\n100\n10\n10\n10\n1\n1\n3\n2 8 6\n2 4 7\n2 7 8</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>1000\n10\n100</pre>\n\n\n\n<h3>Sample Input 2</h3>\n\n<pre>10 12\n1 2\n2 3\n3 4\n4 2\n4 5\n5 6\n6 7\n7 5\n7 8\n8 9\n9 10\n10 8\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n3\n2 3 4\n3 6 7 8\n3 9 6 3</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>8\n5\n8</pre>\n", "p00945": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem K\nMin-Max Distance Game</h2>\n\n<p>\nAlice and Bob are playing the following game. Initially, $n$ stones are placed in a straight line on a table. Alice and Bob take turns alternately. In each turn, the player picks one of the stones and removes it. The game continues until the number of stones on the straight line becomes two. The two stones are called <i>result stones</i>. Alice's objective is to make the result stones as distant as possible, while Bob's is to make them closer.\n</p>\n\n<p>\nYou are given the coordinates of the stones and the player's name who takes the first turn. Assuming that both Alice and Bob do their best, compute and output the distance between the result stones at the end of the game.\n</p>\n\n\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case with the following format.<br>\n<br>\n\n$n$ $f$<br>\n$x_1$ $x_2$ ... $x_n$<br>\n<br>\n\n$n$ is the number of stones $(3 \\leq n \\leq 10^5)$. $f$ is the name of the first player, either Alice or Bob. For each $i$, $x_i$ is an integer that represents the distance of the $i$-th stone from the edge of the table. It is guaranteed that $0 \\leq x_1 < x_2 < ... < x_n \\leq 10^9$ holds.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nOutput the distance between the result stones in one line.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>5 Alice\n10 20 30 40 50</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>30</pre>\n\n\n\n<h3>Sample Input 2</h3>\n\n<pre>5 Bob\n2 3 5 7 11</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>2</pre>\n", "p00946": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem A\nRearranging a Sequence\n</h2>\n\n<p>\nYou are given an ordered sequence of integers, ($1, 2, 3, ..., n$). Then, a number of requests will be given. Each request specifies an integer in the sequence. You need to move the specified integer to the head of the sequence, leaving the order of the rest untouched. Your task is to find the order of the elements in the sequence after following all the requests successively.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case of the following form.<br/>\n<br/>\n$n$ $m$<br/>\n$e_1$<br/>\n...<br/>\n$e_m$<br/>\n</p>\n\n<p>\nThe integer $n$ is the length of the sequence ($1 \\leq n \\leq 200000$). The integer $m$ is the number of requests ($1 \\leq m \\leq 100000$). The following $m$ lines are the requests, namely $e_1, ...,  e_m$, one per line. Each request $e_i$ ($1 \\leq i \\leq m$) is an integer between 1 and $n$, inclusive, designating the element to move. Note that, the integers designate the integers themselves to move, not their positions in the sequence.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nOutput the sequence after processing all the requests. Its elements are to be output, one per line, in the order in the sequence.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>5 3\n4\n2\n5</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>5\n2\n4\n1\n3</pre>\n\n<br/>\n\n<h3>Sample Input 2</h3>\n\n<pre>10 8\n1\n4\n7\n3\n4\n10\n1\n3</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>3\n1\n10\n4\n7\n2\n5\n6\n8\n9</pre>\n\n<p>\nIn Sample Input 1, the initial sequence is (1, 2, 3, 4, 5). The first request is to move the integer 4 to the head, that is, to change the sequence to (4, 1, 2, 3, 5). The next request to move the integer 2 to the head makes the sequence (2, 4, 1, 3, 5). Finally, 5 is moved to the head, resulting in (5, 2, 4, 1, 3).\n</p>", "p00949": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem D\nHidden Anagrams\n</h2>\n\n<p>\nAn <i>anagram</i> is a word or a phrase that is formed by rearranging the letters of another. For instance, by rearranging the letters of \"William Shakespeare,\" we can have its anagrams \"I am a weakish speller,\" \"I'll make a wise phrase,\" and so on. Note that when $A$ is an anagram of $B$, $B$ is an anagram of $A$.\n</p>\n\n<p>\nIn the above examples, differences in letter cases are ignored, and word spaces and punctuation symbols are freely inserted and/or removed. These rules are common but not applied here; only exact matching of the letters is considered.\n</p>\n\n<p>\nFor two strings $s_1$ and $s_2$ of letters, if a substring $s'_1$ of $s_1$ is an anagram of a substring $s'_2$ of $s_2$, we call $s'_1$ a <i>hidden anagram</i> of the two strings, $s_1$ and $s_2$. Of course, $s'_2$ is also a <i>hidden anagram</i> of them.\n</p>\n\n<p>\nYour task is to write a program that, for given two strings, computes the length of the longest hidden anagrams of them.\n</p>\n\n<p>\nSuppose, for instance, that \"anagram\" and \"grandmother\" are given. Their substrings \"nagr\" and \"gran\" are hidden anagrams since by moving letters you can have one from the other. They are the longest since any substrings of \"grandmother\" of lengths five or more must contain \"d\" or \"o\" that \"anagram\" does not. In this case, therefore, the length of the longest hidden anagrams is four. Note that a substring must be a sequence of letters occurring <i>consecutively</i> in the original string and so \"nagrm\" and \"granm\" are not hidden anagrams.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case in two lines.<br/>\n<br/>\n$s_1$<br/>\n$s_2$<br/>\n</p>\n\n<p>\n$s_1$ and $s_2$ are strings consisting of lowercase letters (a through z) and their lengths are between 1 and 4000, inclusive.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nOutput the length of the longest hidden anagrams of $s_1$ and $s_2$. If there are no hidden anagrams, print a zero.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>anagram\ngrandmother</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>4</pre>\n\n<br/>\n\n<h3>Sample Input 2</h3>\n\n<pre>williamshakespeare\niamaweakishspeller</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>18</pre>\n\n<br/>\n\n<h3>Sample Input 3</h3>\n\n<pre>aaaaaaaabbbbbbbb\nxxxxxabababxxxxxabab</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>6</pre>\n\n<br/>\n\n<h3>Sample Input 4</h3>\n\n<pre>abababacdcdcd\nefefefghghghghgh</pre>\n\n<h3>Sample Output 4</h3>\n\n<pre>0</pre>\n\n\n\n", "p00950": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem E\nInfallibly Crack Perplexing Cryptarithm\n</h2>\n\n<p>\n  You are asked to crack an encrypted equation over binary numbers.\n</p>\n\n<p>\n  The original equation consists only of binary digits (\"0\" and \"1\"), operator symbols (\"+\", \"-\", and \"*\"), parentheses (\"(\" and \")\"), and an equal sign (\"=\"). The encryption replaces some occurrences of characters in an original arithmetic equation by letters. Occurrences of one character are replaced, if ever, by the same letter. Occurrences of two different characters are never replaced by the same letter. Note that the encryption does not always replace all the occurrences of the same character; some of its occurrences may be replaced while others may be left as they are. Some characters may be left unreplaced. Any character in the Roman alphabet, in either lowercase or uppercase, may be used as a replacement letter. Note that cases are significant, that is, \"a\" and \"A\" are different letters. Note that not only digits but also operator symbols, parentheses and even the equal sign are possibly replaced.\n</p>\n\n<p>\n  The arithmetic equation is derived from the start symbol of $Q$ of the following context-free grammar.<br/>\n  <br/>\n\n  $Q ::= E=E$<br/>\n  $E ::= T | E+T | E-T$<br/>\n  $T ::= F | T*F $<br/>\n  $F ::= N | -F | (E) $<br/>\n  $N ::= 0 | 1B $<br/>\n  $B ::= \\epsilon | 0B | 1B$<br/>\n  <br/>\nHere, $\\epsilon$ means empty.\n</p>\n\n<p>\n  As shown in this grammar, the arithmetic equation should have one equal sign. Each side of the equation is an expression consisting of numbers, additions, subtractions, multiplications, and negations. Multiplication has precedence over both addition and subtraction, while negation precedes multiplication. Multiplication, addition and subtraction are left associative. For example, <span>x-y+z</span> means <span>(x-y)+z</span>, not <span>x-(y+z)</span>. Numbers are in binary notation, represented by a sequence of binary digits, 0 and 1. Multi-digit numbers always start with 1. Parentheses and negations may appear redundantly in the equation, as in <span>((--x+y))+z</span>.\n</p>\n\n<p>\nWrite a program that, for a given encrypted equation, counts the number of different possible original correct equations. Here, an equation should conform to the grammar and it is correct when the computed values of the both sides are equal.\n</p>\n\n<p>\n  For Sample Input 1, C must be = because any equation has one <span>=</span> between two expressions. Then, because <span>A</span> and <span>M</span> should be different, although there are equations conforming to the grammar, none of them can be correct.\n</p>\n\n<p>\n  For Sample Input 2, the only possible correct equation is <span>-0=0</span>.\n</p>\n\n<p>\nFor Sample Input 3 (B-A-Y-L-zero-R), there are three different correct equations, <span>0=-(0)</span>, <span>0=(-0)</span>, and <span>-0=(0)</span>. Note that one of the two occurrences of zero is not replaced with a letter in the encrypted equation.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case which is a string of Roman alphabet characters, binary digits, operator symbols, parentheses and equal signs. The input string has at most 31 characters.\n</p>\n\n\n\n<h3>Output</h3>\n\n<p>\nPrint in a line the number of correct equations that can be encrypted into the input string.\n</p>\n\n\n\n<h3>Sample Input 1</h3>\n\n<pre>ACM</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>0</pre>\n\n<br/>\n\n<h3>Sample Input 2</h3>\n\n<pre>icpc</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>1</pre>\n\n<br/>\n\n<h3>Sample Input 3</h3>\n\n<pre>BAYL0R</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>3</pre>\n\n<br/>\n\n<h3>Sample Input 4</h3>\n\n<pre>-AB+AC-A</pre>\n\n<h3>Sample Output 4</h3>\n\n<pre>1</pre>\n\n<br/>\n\n<h3>Sample Input 5</h3>\n\n<pre>abcdefghi</pre>\n\n<h3>Sample Output 5</h3>\n\n<pre>0</pre>\n\n<br/>\n\n<h3>Sample Input 6</h3>\n\n<pre>111-10=1+10*10</pre>\n\n<h3>Sample Output 6</h3>\n\n<pre>1</pre>\n\n<br/>\n\n<h3>Sample Input 7</h3>\n\n<pre>0=10-1</pre>\n\n<h3>Sample Output 7</h3>\n\n<pre>0</pre>\n\n\n\n\n\n", "p00953": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>Problem H\n  Animal Companion in Maze \n</h2>\n\n<p>\n  George, your pet monkey, has escaped, slipping the leash!\n</p>\n\n<p>\n  George is hopping around in a maze-like building with many rooms. The doors of the rooms, if any, lead directly to an adjacent room, not through corridors. Some of the doors, however, are one-way: they can be opened only from one of their two sides.\n</p>\n\n<p>\n  He repeats randomly picking a door he can open and moving to the room through it. You are chasing him but he is so quick that you cannot catch him easily. He never returns immediately to the room he just has come from through the same door, believing that you are behind him. If any other doors lead to the room he has just left, however, he may pick that door and go back.\n</p>\n\n<p>\n  If he cannot open any doors except one through which he came from, voila, you can catch him there eventually.\n</p>\n\n<p>\n  You know how rooms of the building are connected with doors, but you don't know in which room George currently is.\n</p>\n\n<p>\nIt takes one unit of time for George to move to an adjacent room through a door.\n</p>\n\n<p>\nWrite a program that computes how long it may take before George will be confined in a room. You have to find the longest time, considering all the possibilities of the room George is in initially, and all the possibilities of his choices of doors to go through.\n</p>\n\n<p>\n  Note that, depending on the room organization, George may have possibilities to continue hopping around forever without being caught.\n</p>\n\n<p>\nDoors may be on the ceilings or the floors of rooms; the connection of the rooms may not be drawn as a planar graph.\n</p>\n\n\n\n<h3>Input</h3>\n\n<p>\n  The input consists of a single test case, in the following format.<br/>\n  <br/>\n$n$ $m$<br/>\n$x_1$ $y_1$ $w_1$<br/>\n.<br/>\n.<br/>\n.<br/>\n$x_m$ $y_m$ $w_m$<br/>\n</p>\n\n<p>\n  The first line contains two integers $n$ ($2 \\leq n \\leq 100000$) and $m$ ($1 \\leq m \\leq 100000$), the number of rooms and doors, respectively. Next $m$ lines contain the information of doors. The $i$-th line of these contains three integers $x_i$, $y_i$ and $w_i$ ($1 \\leq x_i \\leq n, 1 \\leq y_i \\leq n, x_i \\ne y_i, w_i = 1$ or $2$), meaning that the $i$-th door connects two rooms numbered $x_i$ and $y_i$, and it is one-way from $x_i$ to $y_i$ if $w_i = 1$, two-way if $w_i = 2$.\n</p>\n  \n\n\n<h3>Output</h3>\n\n<p>\nOutput the maximum number of time units after which George will be confined in a room. If George has possibilities to continue hopping around forever, output \"<span>Infinite</span>\".\n</p>\n\n\n\n<h3>Sample Input 1</h3>\n\n<pre>2 1\n1 2 2</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>1</pre>\n\n<br/>\n\n<h3>Sample Input 2</h3>\n\n<pre>2 2\n1 2 1\n2 1 1</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>Infinite</pre>\n\n<br/>\n\n<h3>Sample Input 3</h3>\n\n<pre>6 7\n1 3 2\n3 2 1\n3 5 1\n3 6 2\n4 3 1\n4 6 1\n5 2 1</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>4</pre>\n\n<br/>\n\n<h3>Sample Input 4</h3>\n\n<pre>3 2\n1 3 1\n1 3 1</pre>\n\n\n<h3>Sample Output 4</h3>\n\n<pre>1</pre>\n\n\n\n", "p00954": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem I\n  Skinny Polygon \n</h2>\n\n<p>\nYou are asked to find a polygon that satisfies all the following conditions, given two integers, $x_{bb}$ and $y_{bb}$.\n</p>\n<ul>\n  <li> The number of vertices is either 3 or 4.</li>\n  <li> Edges of the polygon do not intersect nor overlap with other edges, i.e., they do not share any points with other edges except for their endpoints.</li>\n  <li> The $x$- and $y$-coordinates of each vertex are integers. </li>\n  <li> The $x$-coordinate of each vertex is between 0 and $x_{bb}$, inclusive. Similarly, the $y$-coordinate is between 0 and $y_{bb}$, inclusive.</li>\n  <li> At least one vertex has its $x$-coordinate 0.</li>\n  <li> At least one vertex has its $x$-coordinate $x_{bb}$.</li>\n  <li> At least one vertex has its $y$-coordinate 0.</li>\n  <li> At least one vertex has its $y$-coordinate $y_{bb}$.</li>\n  <li> <b>The area of the polygon does not exceed 25000.</b></li>\n</ul>\n\n<p>\n  The polygon may be non-convex.\n  </p>\n\n\n<h3>Input</h3>\n\n<p>\n  The input consists of multiple test cases. The first line of the input contains an integer $n$, which is the number of the test cases ($1 \\leq n \\leq 10^5$). Each of the following $n$ lines contains a test case formatted as follows.<br/>\n  <br/>\n  $x_{bb}$ $y_{bb}$<br/>\n  <br/>\n  $x_{bb}$ and $y_{bb}$ ($2 \\leq x_{bb} \\leq 10^9, 2 \\leq y_{bb} \\leq 10^9$) are integers stated above.\n  </p>\n\n\n\n<h3>Output</h3>\n\n<p>\n  For each test case, output description of one polygon satisfying the conditions stated above, in the following format.<br/>\n  <br/>\n$v$<br/>\n$x_1$ $y_1$<br/>\n.  <br/>\n.  <br/>\n.  <br/>\n$x_v$ $y_v$<br/>\n</p>\n\n<p>\nHere, $v$ is the number of vertices, and each pair of $x_i$ and $y_i$ gives the coordinates of the $i$-th vertex, $(x_i, y_i)$. The first vertex $(x_1, y_1)$ can be chosen arbitrarily, and the rest should be listed either in clockwise or in counterclockwise order.\n</p>\n\n<p>\nWhen more than one polygon satisfies the conditions, any one of them is acceptable. You can prove that, with the input values ranging as stated above, there is at least one polygon satisfying the conditions.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>2\n5 6\n1000000000 2</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>4\n5 6\n0 6\n0 0\n5 0\n3\n1000000000 0\n0 2\n999999999 0</pre>\n", "p00955": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem J\nCover the Polygon with Your Disk\n</h2>\n\n<p>\nA convex polygon is drawn on a flat paper sheet. You are trying to place a disk in your hands to cover as large area of the polygon as possible. In other words, the intersection area of the polygon and the disk should be maximized.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case, formatted as follows. All input items are integers.<br/>\n<br/>\n$n$ $r$<br/>\n$x_1$ $y_1$<br/>\n.<br/>\n.<br/>\n.<br/>\n$x_n$ $y_n$<br/>\n</p>\n\n<p>\n$n$ is the number of vertices of the polygon ($3 \\leq n \\leq 10$). $r$ is the radius of the disk ($1 \\leq r \\leq 100$).\n$x_i$ and $y_i$ give the coordinate values of the $i$-th vertex of the polygon ($1 \\leq i \\leq n$). Coordinate values satisfy $0 \\leq x_i \\leq 100$ and $0 \\leq y_i \\leq 100$.\n</p>\n\n<p>\nThe vertices are given in counterclockwise order. As stated above, the given polygon is convex. In other words, interior angles at all of its vertices are less than 180$^{\\circ}$. Note that the border of a convex polygon never crosses or touches itself.\n</p>\n\n\n\n<h3>Output</h3>\n\n<p>\nOutput the largest possible intersection area of the polygon and the disk. The answer should not have an error greater than 0.0001 ($10^{-4}$).\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>4 4\n0 0\n6 0\n6 6\n0 6</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>35.759506</pre>\n\n<br/>\n\n<h3>Sample Input 2</h3>\n\n<pre>3 1\n0 0\n2 1\n1 3</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>2.113100</pre>\n\n<br/>\n\n<h3>Sample Input 3</h3>\n\n<pre>3 1\n0 0\n100 1\n99 1</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>0.019798</pre>\n\n<br/>\n\n<h3>Sample Input 4</h3>\n\n<pre>4 1\n0 0\n100 10\n100 12\n0 1</pre>\n\n<h3>Sample Output 4</h3>\n\n<pre>3.137569</pre>\n\n<br/>\n\n<h3>Sample Input 5</h3>\n\n<pre>10 10\n0 0\n10 0\n20 1\n30 3\n40 6\n50 10\n60 15\n70 21\n80 28\n90 36</pre>\n\n<h3>Sample Output 5</h3>\n\n<pre>177.728187</pre>\n\n\n\n<br/>\n\n<h3>Sample Input 6</h3>\n\n<pre>10 49\n50 0\n79 10\n96 32\n96 68\n79 90\n50 100\n21 90\n4 68\n4 32\n21 10</pre>\n\n<h3>Sample Output 6</h3>\n\n<pre>7181.603297</pre>\n\n\n\n\n\n\n\n\n", "p00956": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem K\nBlack and White Boxes\n</h2>\n\n<p>\nAlice and Bob play the following game.\n</p>\n\n<ol>\n<li> There are a number of straight piles of boxes. The boxes have the same size and are painted either black or white.\n</li>\n\n<li> Two players, namely Alice and Bob, take their turns alternately. Who to play first is decided by a fair random draw.\n</li>\n\n<li> In Alice's turn, she selects a black box in one of the piles, and removes the box together with all the boxes above it, if any. If no black box to remove is left, she loses the game.\n</li>\n\n<li> In Bob's turn, he selects a white box in one of the piles, and removes the box together with all the boxes above it, if any. If no white box to remove is left, he loses the game. \n</li>\n</ol>\n\n<p>\nGiven an initial configuration of piles and who plays first, the game is a <i>definite perfect information game</i>. In such a game, one of the players has sure win provided he or she plays best. The draw for the first player, thus, essentially decides the winner.\n</p>\n\n<p>\nIn fact, this seemingly boring property is common with many popular games, such as chess. The chess game, however, is complicated enough to prevent thorough analyses, even by supercomputers, which leaves us rooms to enjoy playing.\n</p>\n\n<p>\nThis game of box piles, however, is not as complicated. The best plays may be more easily found. Thus, initial configurations should be fair, that is, giving both players chances to win. A configuration in which one player can always win, regardless of who plays first, is undesirable.\n</p>\n\n<p>\nYou are asked to arrange an initial configuration for this game by picking a number of piles from the given candidate set. As more complicated configuration makes the game more enjoyable, you are expected to find the configuration with the maximum number of boxes among fair ones.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case, formatted as follows.<br/>\n<br/>\n$n$<br/>\n$p_1$<br/>\n.<br/>\n.<br/>\n.<br/>\n$p_n$<br/>\n</p>\n\n<p>\nA positive integer $n$ ($\\leq 40$) is the number of candidate piles. Each $p_i$ is a string of characters <span>B</span> and <span>W</span>, representing the $i$-th candidate pile. <span>B</span> and <span>W</span> mean black and white boxes, respectively. They appear in the order in the pile, from bottom to top. The number of boxes in a candidate pile does not exceed 40.\n</p>\n\n<h3>Output</h3>\n<p>\nOutput in a line the maximum possible number of boxes in a fair initial configuration consisting of some of the candidate piles. If only the empty configuration is fair, output a zero.\n</p>\n\n\n\n<h3>Sample Input 1</h3>\n\n<pre>4\nB\nW\nWB\nWB</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>5</pre>\n\n<br/>\n\n<h3>Sample Input 2</h3>\n\n<pre>6\nB\nW\nWB\nWB\nBWW\nBWW</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>10</pre>", "p00959": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<h2>Problem C\n  Medical Checkup\n  </h2>\n\n<p>\n  Students of the university have to go for a medical checkup, consisting of lots of checkup items, numbered 1, 2, 3, and so on.\n</p>\n\n<p>\n  Students are now forming a long queue, waiting for the checkup to start. Students are also numbered 1, 2, 3, and so on, from the top of the queue. They have to undergo checkup items in the order of the item numbers, not skipping any of them nor changing the order. The order of students should not be changed either.\n</p>\n\n<p>\n  Multiple checkup items can be carried out in parallel, but each item can be carried out for only one student at a time. Students have to wait in queues of their next checkup items until all the others before them finish.\n</p>\n\n<p>\n  Each of the students is associated with an integer value called <i>health condition</i>. For a student with the health condition $h$, it takes $h$ minutes to finish each of the checkup items. You may assume that no interval is needed between two students on the same checkup item or two checkup items for a single student.\n</p>\n\n<p>\n  Your task is to find the items students are being checked up or waiting for at a specified time $t$.\n</p>\n\n\n<h3>Input</h3>\n<p>\n  The input consists of a single test case in the following format.\n</p>\n\n<pre>\n$n$ $t$\n$h_1$\n...\n$h_n$\n</pre>\n\n<p>\n  $n$ and $t$ are integers. $n$ is the number of the students ($1 \\leq n \\leq 10^5$). $t$ specifies the time of our concern ($0 \\leq t \\leq 10^9$). For each $i$, the integer $h_i$ is the health condition of student $i$ ($1 \\leq h_ \\leq 10^9$).\n</p>\n\n<h3>Output</h3>\n\n<p>\n  Output $n$ lines each containing a single integer. The $i$-th line should contain the checkup item number of the item which the student $i$ is being checked up or is waiting for, at ($t+0.5$) minutes after the checkup starts. You may assume that all the students are yet to finish some of the checkup items at that moment.\n  </p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n3 20\n5\n7\n3\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n5\n3\n2\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n5 1000000000\n5553\n2186\n3472\n2605\n1790\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n180083\n180083\n180082\n180082\n180082\n</pre>", "p00961": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<h2>Problem E\n  Black or White\n</h2>\n\n<p>\n  Here lies a row of a number of bricks each painted either black or white. With a single stroke of your brush, you can overpaint a part of the row of bricks at once with either black or white paint. Using white paint, all the black bricks in the painted part become white while originally white bricks remain white; with black paint, white bricks become black and black ones remain black. The number of bricks painted in one stroke, however, is limited because your brush cannot hold too much paint at a time. For each brush stroke, you can paint any part of the row with any number of bricks up to the limit.\n</p>\n\n<p>\n  In the first case of the sample input, the initial colors of four bricks are black, white, white, and black. You can repaint them to white, black, black, and white with two strokes: the first stroke paints all four bricks white and the second stroke paints two bricks in the middle black.\n</p>\n\n<p>\n  Your task is to calculate the minimum number of brush strokes needed to change the brick colors as specified. Never mind the cost of the paints.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The input consists of a single test case formatted as follows.\n</p>\n\n<pre> \n$n$ $k$\n$s$\n$t$\n</pre>\n\n<p>\n  The first line contains two integers $n$ and $k$ ($1 \\leq k \\leq n \\leq 500 000$). $n$ is the number of bricks in the row and $k$ is the maximum number of bricks painted in a single stroke. The second line contains a string $s$ of $n$ characters, which indicates the initial colors of the bricks. The third line contains another string $t$ of $n$ characters, which indicates the desired colors of the bricks. All the characters in both s and t are either <span>B</span> or <span>W</span> meaning black and white, respectively.\n  </p>\n\n<h3>Output</h3>\n<p>\n  Output the minimum number of brush strokes required to repaint the bricks into the desired colors.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n4 4\nBWWB\nWBBW\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n2\n</pre>\n\n\n<h3>Sample Input 2</h3>\n<pre>\n4 3\nBWWB\nWBBW\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n3\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n4 3\nBWWW\nBWWW\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n0\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n7 1\nBBWBWBW\nWBBWWBB\n</pre>\n\n<h3>Sample Output 4</h3>\n<pre>\n4\n</pre>", "p00962": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n\n<h2>Problem F\n  Pizza Delivery\n  </h2>\n\n<p>\n  Alyssa is a college student, living in New Tsukuba City. All the streets in the city are one-way. A new social experiment starting tomorrow is on alternative traffic regulation reversing the one-way directions of street sections. Reversals will be on one single street section between two adjacent intersections for each day; the directions of all the other sections will not change, and the reversal will be canceled on the next day.\n</p>\n\n<p>\nAlyssa orders a piece of pizza everyday from the same pizzeria. The pizza is delivered along the shortest route from the intersection with the pizzeria to the intersection with Alyssa's house.\n</p>\n\n<p>\n  Altering the traffic regulation may change the shortest route. Please tell Alyssa how the social experiment will affect the pizza delivery route.\n</p>\n\n<h3>Input</h3>\n<p>\n  The input consists of a single test case in the following format.\n</p>\n\n<pre>\n$n$ $m$\n$a_1$ $b_1$ $c_1$\n...\n$a_m$ $b_m$ $c_m$\n</pre>\n\n<p>\n  The first line contains two integers, $n$, the number of intersections, and $m$, the number of street sections in New Tsukuba City ($2 \\leq n \\leq 100 000, 1 \\leq m \\leq 100 000$). The intersections are numbered $1$ through $n$ and the street sections are numbered $1$ through $m$.\n</p>\n\n<p>\n  The following $m$ lines contain the information about the street sections, each with three integers $a_i$, $b_i$, and $c_i$ ($1 \\leq a_i  n, 1 \\leq b_i \\leq n, a_i \\ne b_i, 1 \\leq c_i \\leq 100 000$). They mean that the street section numbered $i$ connects two intersections with the one-way direction from $a_i$ to $b_i$, which will be reversed on the $i$-th day. The street section has the length of $c_i$. Note that there may be more than one street section connecting the same pair of intersections.\n</p>\n\n<p>\n  The pizzeria is on the intersection 1 and Alyssa's house is on the intersection 2. It is guaranteed that at least one route exists from the pizzeria to Alyssa's before the social experiment starts.\n</p>\n\n<h3>Output</h3>\n<p>\n  The output should contain $m$ lines. The $i$-th line should be\n</p>\n<ul>\n<li> <span>HAPPY</span> if the shortest route on the $i$-th day will become shorter,</li>\n<li> <span>SOSO</span> if the length of the shortest route on the $i$-th day will not change, and</li>\n<li> <span>SAD</span> if the shortest route on the $i$-th day will be longer or if there will be no route from the pizzeria to Alyssa's house.</li>\n</ul>\n\n<p>\n  Alyssa doesn't mind whether the delivery bike can go back to the pizzeria or not.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n4 5\n1 3 5\n3 4 6\n4 2 7\n2 1 18\n2 3 12\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\nSAD\nSAD\nSAD\nSOSO\nHAPPY\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n7 5\n1 3 2\n1 6 3\n4 2 4\n6 2 5\n7 5 6\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\nSOSO\nSAD\nSOSO\nSAD\nSOSO\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n10 14\n1 7 9\n1 8 3\n2 8 4\n2 6 11\n3 7 8\n3 4 4\n3 2 1\n3 2 7\n4 8 4\n5 6 11\n5 8 12\n6 10 6\n7 10 8\n8 3 6\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\nSOSO\nSAD\nHAPPY\nSOSO\nSOSO\nSOSO\nSAD\nSOSO\nSOSO\nSOSO\nSOSO\nSOSO\nSOSO\nSAD\n</pre>", "p00964": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<h2>Problem H\n  Homework\n</h2>\n\n<p>\n  Taro is a student of Ibaraki College of Prominent Computing. In this semester, he takes two courses, mathematics and informatics. After each class, the teacher may assign homework. Taro may be given multiple assignments in a single class, and each assignment may have a different deadline. Each assignment has a unique ID number.\n</p>\n\n<p>\n  Everyday after school, Taro completes at most one assignment as follows. First, he decides which course's homework to do at random by ipping a coin. Let $S$ be the set of all the unfinished assignments of the chosen course whose deadline has not yet passed. If $S$ is empty, he plays a video game without doing any homework on that day even if there are unfinished assignments of the other course. Otherwise, with $T \\subseteq S$ being the set of assignments with the nearest deadline among $S$, he completes the one with the smallest assignment ID among $T$.\n</p>\n\n<p>\n  The number of assignments Taro will complete until the end of the semester depends on the result of coin ips. Given the schedule of homework assignments, your task is to compute the maximum and the minimum numbers of assignments Taro will complete.\n</p>\n\n\n<h3>Input</h3>\n<p>\n  The input consists of a single test case in the following format.\n</p>\n\n<pre>\n$n$ $m$\n$s_1$ $t_1$\n...\n$s_n$ $t_n$\n</pre>\n\n<p>\n  The first line contains two integers $n$ and $m$ satisfying $1 \\leq m < n \\leq 400$. $n$ denotes the total number of assignments in this semester, and $m$ denotes the number of assignments of the mathematics course (so the number of assignments of the informatics course is $n - m$). Each assignment has a unique ID from $1$ to $n$; assignments with IDs $1$ through $m$ are those of the mathematics course, and the rest are of the informatics course. The next $n$ lines show the schedule of assignments. The $i$-th line of them contains two integers $s_i$ and $t_i$ satisfying $1 \\leq s_i \\leq t_i \\leq 400$, which means that the assignment of ID $i$ is given to Taro on the $s_i$-th day of the semester, and its deadline is the end of the $t_i$-th day.\n</p>\n\n<h3>Output</h3>\n<p>\n  In the first line, print the maximum number of assignments Taro will complete. In the second line, print the minimum number of assignments Taro will complete.\n  </p>\n\n<h3>Sample Input 1</h3>\n<pre>\n6 3\n1 2\n1 5\n2 3\n2 6\n4 5\n4 6\n</pre>\n<h3>Sample Output 1</h3>\n<pre>\n6\n2\n</pre>\n  \n<h3>Sample Input 2</h3>\n<pre>\n6 3\n1 1\n2 3\n4 4\n1 1\n2 4\n3 3\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n4\n3\n</pre>\n\n", "p00967": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<h2>Problem K\n  Counting Cycles\n</h2>\n\n<p>\n  Given an undirected graph, count the number of simple cycles in the graph. Here, a simple cycle is a connected subgraph all of whose vertices have degree exactly two.\n</p>\n\n<h3>Input</h3>\n<p>\n  The input consists of a single test case of the following format.\n</p>\n\n<pre>\n$n$ $m$\n$u_1$ $v_1$\n...\n$u_m$ $v_m$\n</pre>\n\n<p>\n  A test case represents an undirected graph $G$.\n</p>\n\n<p>\n  The first line shows the number of vertices $n$ ($3 \\leq n \\leq 100 000$) and the number of edges $m$ ($n - 1 \\leq m \\leq n + 15$). The vertices of the graph are numbered from $1$ to $n$.\n</p>\n\n<p>\nThe edges of the graph are specified in the following $m$ lines. Two integers $u_i$ and $v_i$ in the\n$i$-th line of these m lines mean that there is an edge between vertices $u_i$ and $v_i$. Here, you can assume that $u_i < v_i$ and thus there are no self loops.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   </p>\n\n<p>\n  For all pairs of $i$ and $j$ ($i \\ne j$), either $u_i \\ne u_j$ or $v_i \\ne v_j$ holds. In other words, there are no parallel edges.\n</p>\n\n<p>\n  You can assume that $G$ is connected.\n</p>\n\n\n<h3>Output</h3>\n<p>\n  The output should be a line containing a single number that is the number of simple cycles in the graph.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n3\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n7 9\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n2 3\n4 5\n6 7\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n3\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n7\n</pre>\n", "p00968": "<h2>Digits Are Not Just Characters</h2>\n\n<p>\n  Mr. Manuel Majorana Minore made a number of files with numbers in their names. He wants to have a list of the files, but the file listing command commonly used lists them in an order different from what he prefers, interpreting digit sequences in them as ASCII code sequences, not as numbers. For example, the files <span>file10</span>, <span>file20</span> and <span>file3</span> are listed in this order.\n</p>\n\n<p>\nWrite a program which decides the orders of file names interpreting digit sequences as numeric\nvalues.\n</p>\n\n<p>\n  Each file name consists of uppercase letters (from '<span>A</span>' to '<span>Z</span>'), lowercase letters (from '<span>a</span>' to '<span>z</span>'), and digits (from '<span>0</span>' to '<span>9</span>').\n</p>\n\n<p>\nA file name is looked upon as a sequence of items, each being either a letter or a number. Each\nsingle uppercase or lowercase letter forms a letter item. Each consecutive sequence of digits forms a number item.\n</p>\n\n<p>\n  Two item are ordered as follows.\n</p>\n\n<ul>\n<li> Number items come before letter items.</li>\n<li> Two letter items are ordered by their ASCII codes.</li>\n<li> Two number items are ordered by their values when interpreted as decimal numbers.</li>\n</ul>\n\n<p>\n  Two file names are compared item by item, starting from the top, and the order of the first different corresponding items decides the order of the file names. If one of them, say $A$, has more items than the other, $B$, and all the items of $B$ are the same as the corresponding items of $A$, $B$ should come before.\n</p>\n\n<p>\n  For example, three file names in Sample Input 1, <span>file10</span>, <span>file20</span>, and <span>file3</span> all start with the same sequence of four letter items <span>f</span>, <span>i</span>, <span>l</span>, and <span>e</span>, followed by a number item, 10, 20, and 3, respectively. Comparing numeric values of these number items, they are ordered as <span>file3</span> $<$ <span>file10</span> $<$ <span>file20</span>.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\n  The input consists of a single test case of the following format.\n</p>\n<pre>\n$n$\n$s_0$\n$s_1$\n:\n$s_n$\n</pre>\n\n<p>\n  The integer $n$ in the first line gives the number of file names ($s_1$ through $s_n$) to be compared with the file name given in the next line ($s_0$). Here, $n$ satisfies $1 \\leq n \\leq 1000$.\n</p>\n\n<p>\n  The following $n + 1$ lines are file names, $s_0$ through $s_n$, one in each line. They have at least one and no more than nine characters. Each of the characters is either an uppercase letter, a lowercase letter, or a digit.\n</p>\n\n<p>\n  Sequences of digits in the file names never start with a digit zero (0).\n</p>\n\n\n<h3>Output</h3>\n\n<p>\n  For each of the file names, $s_1$ through $s_n$, output one line with a character indicating whether it should come before $s_0$ or not. The character should be \"<span>-</span>\" if it is to be listed before $s_0$; otherwise, it should be \"<span>+</span>\", including cases where two names are identical.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n2\nfile10\nfile20\nfile3\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n+\n-\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n11\nX52Y\nX\nX5\nX52\nX52Y\nX52Y6\n32\nABC\nXYZ\nx51y\nX8Y\nX222\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n-\n-\n-\n+\n+\n-\n-\n+\n+\n-\n+\n</pre>\n", "p00969": "<h2>Arithmetic Progressions</h2>\n\n<p>\n  An arithmetic progression is a sequence of numbers $a_1, a_2, ..., a_k$ where the difference of consecutive members $a_{i+1} - a_i$ is a constant ($1 \\leq i \\leq k-1$). For example, the sequence 5, 8, 11, 14, 17 is an arithmetic progression of length 5 with the common difference 3.\n</p>\n\n<p>\nIn this problem, you are requested to find the longest arithmetic progression which can be formed selecting some numbers from a given set of numbers. For example, if the given set of numbers is {0, 1, 3, 5, 6, 9}, you can form arithmetic progressions such as 0, 3, 6, 9 with the common difference 3, or 9, 5, 1 with the common difference -4. In this case, the progressions 0, 3, 6, 9\nand 9, 6, 3, 0 are the longest.\n</p>\n\n\n<h3>Input</h3>\n<p>\n  The input consists of a single test case of the following format.\n</p>\n<pre>\n$n$\n$v_1$ $v_2$ ... $v_n$\n</pre>\n\n<p>\n  $n$ is the number of elements of the set, which is an integer satisfying $2 \\leq n \\leq 5000$. Each $v_i$ ($1 \\leq i \\leq n$) is an element of the set, which is an integer satisfying $0 \\leq v_i \\leq 10^9$. $v_i$'s are all different, i.e., $v_i \\ne v_j$ if $i \\ne j$.\n</p>\n\n\n<h3>Output</h3>\n<p>\n  Output the length of the longest arithmetic progressions which can be formed selecting some numbers from the given set of numbers.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n6\n0 1 3 5 6 9\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n4\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n7\n1 4 7 3 2 6 5\n</pre>\n\n</h3>Sample Output 2</h3>\n<pre>\n7\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n5\n1 2 4 8 16\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n2\n</pre>\n", "p00971": "<h2>Shortest Common Non-Subsequence</h2>\n\n<p>\nA subsequence of a sequence $P$ is a sequence that can be derived from the original sequence $P$ by picking up some or no elements of $P$ preserving the order. For example, \"<span>ICPC</span>\" is a subsequence of \"<span>MICROPROCESSOR</span>\".\n</p>\n\n<p>\n  A common subsequence of two sequences is a subsequence of both sequences. The famous longest common subsequence problem is finding the longest of common subsequences of two given sequences.\n</p>\n\n<p>\n  In this problem, conversely, we consider <i>the shortest common non-subsequence problem</i>: Given two sequences consisting of 0 and 1, your task is to find the shortest sequence also consisting of 0 and 1 that is a subsequence of <i>neither</i> of the two sequences.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The input consists of a single test case with two lines. Both lines are sequences consisting only of 0 and 1. Their lengths are between 1 and 4000, inclusive.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\n  Output in one line the shortest common non-subsequence of two given sequences. If there are two or more such sequences, you should output the lexicographically smallest one. Here, a sequence $P$ is lexicographically smaller than another sequence $Q$ of the same length if there exists $k$ such that $P_1 = Q_1, ... , P_{k-1} = Q_{k-1}$, and $P_k < Q_k$, where $S_i$ is the $i$-th character of a sequence $S$.\n</p>\t\t\t\n\n<h3>Sample Input 1</h3>\n<pre>\n0101\n1100001\n</pre>\n<h3>Sample Output 1</h3>\n<pre>\n0010\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n101010101\n010101010\n</pre>\n<h3>Sample Output 2</h3>\n<pre>\n000000\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n11111111\n00000000\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n01\n</pre>\n\n", "p00972": "<h2>Eulerian Flight Tour</h2>\n\n<p>\n  You have an airline route map of a certain region. All the airports in the region and all the <i>non-stop routes</i> between them are on the map. Here, a non-stop route is a flight route that provides non-stop flights in both ways.\n</p>\n\n<p>\n  Named after the great mathematician Leonhard Euler, an <i>Eulerian tour</i> is an itinerary visiting all the airports in the region taking a single flight of every non-stop route available in the region. To be precise, it is a list of airports, satisfying all of the following.\n</p>\n\n<ul>\n<li> The list begins and ends with the same airport.</li>\n<li> There are non-stop routes between pairs of airports adjacent in the list.</li>\n<li> All the airports in the region appear <i>at least once</i> in the list. Note that it is allowed to have some airports appearing multiple times.</li>\n<li> For all the airport pairs with non-stop routes in between, there should be <i>one and only one adjacent appearance</i> of two airports of the pair in the list in either order.</li>\n</ul>\n\n<p>\n  It may not always be possible to find an Eulerian tour only with the non-stop routes listed in the map. Adding more routes, however, may enable Eulerian tours. Your task is to find a set of additional routes that enables Eulerian tours.\n</p>\n\n\n<h3>Input</h3>\n<p>\n  The input consists of a single test case.\n</p>\n<pre>\n$n$ $m$\n$a_1$ $b_1$\n...\n$a_m$ $b_m$\n</pre>\n\n<p>\n  $n$ ($3 \\leq n \\leq 100$) is the number of airports. The airports are numbered from 1 to $n$. $m$ ($0 \\leq m \\leq \\frac{n(n-1)}{2}$) is the number of pairs of airports that have non-stop routes. Among the $m$ lines following it, integers $a_i$ and $b_i$ on the $i$-th line of them ($1 \\leq i \\leq m$) are airport numbers between which a non-stop route is operated. You can assume $1 \\leq a_i < b_i \\leq n$, and for any $i \\ne j$, either $a_i \\ne a_j$ or $b_i \\ne b_j$ holds.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  Output a set of additional non-stop routes that enables Eulerian tours. If two or more different sets will do, any one of them is acceptable. The output should be in the following format.\n</p>\n\n<pre>\n$k$\n$c_1$ $d_1$\n...\n$c_k$ $d_k$\n</pre>\n<p>\n  $k$ is the number of non-stop routes to add, possibly zero. Each of the following $k$ lines should have a pair of integers, separated by a space. Integers $c_i$ and $d_i$ in the $i$-th line ($c_i < d_i$) are airport numbers specifying that a non-stop route is to be added between them. These pairs, ($c_i, d_i$) for $1 \\leq i \\leq k$, should be distinct and should not appear in the input.\n</p>\n\n<p>\n  If adding new non-stop routes can never enable Eulerian tours, output <span>-1</span> in a line.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n4 2\n1 2\n3 4\n</pre>\n<h3>Sample Output 1</h3>\n<pre>\n2\n1 4\n2 3\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n6 9\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n</pre>\n<h3>Sample Output 2</h3>\n<pre>\n-1\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n6 7\n1 2\n1 3\n1 4\n2 3\n4 5\n4 6\n5 6\n</pre>\n<h3>Sample Output 3</h3>\n<pre>\n3\n1 5\n2 4\n2 5\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n4 3\n2 3\n2 4\n3 4\n</pre>\n<h3>Sample Output 4</h3>\n<pre>\n-1\n</pre>\n\n<h3>Sample Input 5</h3>\n<pre>\n5 5\n1 3\n1 4\n2 4\n2 5\n3 5\n</pre>\n<h3>Sample Output 5</h3>\n<pre>\n0\n</pre>\n\n", "p00974": "<h3>What Goes Up Must Come Down</h3>\n\n<p>\n  Several cards with numbers printed on them are lined up on the table.\n</p>\n\n<p>\n  We'd like to change their order so that first some are in non-decreasing order of the numbers on them, and the rest are in non-increasing order. For example, (1, 2, 3, 2, 1), (1, 1, 3, 4, 5, 9, 2), and (5, 3, 1) are acceptable orders, but (8, 7, 9) and (5, 3, 5, 3) are not.\n</p>\n\n<p>\n  To put it formally, with $n$ the number of cards and $b_i$ the number printed on the card at the $i$-th position ($1 \\leq i \\leq n$) after reordering, there should exist $k \\in \\{1, ... n\\}$ such that ($b_i \\leq b_{i+1} \\forall _i \\in \\{1, ... k - 1\\}$) and ($b_i \\geq b_{i+1} \\forall _i \\in \\{k, ..., n - 1\\}$) hold.\n</p>\n\n<p>\n  For reordering, the only operation allowed at a time is to swap the positions of an adjacent card pair. We want to know the minimum number of swaps required to complete the reorder.\n</p>\n\n<h3>Input</h3>\n<p>\n  The input consists of a single test case of the following format.\n</p>\n<pre>\n$n$\n$a_1$ ... $a_n$\n</pre>\n\n<p>\n  An integer $n$ in the first line is the number of cards ($1 \\leq n \\leq 100 000$). Integers $a_1$ through $a_n$ in the second line are the numbers printed on the cards, in the order of their original positions ($1 \\leq a_i \\leq 100 000$).\n</p>\n\n<h3>Output</h3>\n\n<p>\n  Output in a line the minimum number of swaps required to reorder the cards as specified.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n7\n3 1 4 1 5 9 2\n</pre>\n<h3> Sample Output 1</h3>\n<pre>\n3\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n9\n10 4 6 3 15 9 1 1 12\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n8\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n8\n9 9 8 8 7 7 6 6\n</pre>\n<h3>Sample Output 3</h3>\n<pre>\n0\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n6\n8 7 2 5 4 6\n</pre>\n<h3>Sample Output 4</h3>\n<pre>\n4\n</pre>\n", "p00977": "<h2>Colorful Tree</h2>\n\n<p>\n  A tree structure with some colors associated with its vertices and a sequence of commands on it are given. A command is either an update operation or a query on the tree. Each of the update operations changes the color of a specified vertex, without changing the tree structure. Each of the queries asks the number of edges in the minimum connected subgraph of the tree that contains all the vertices of the specified color.\n  </p>\n\n<p>\n  Your task is to find answers of each of the queries, assuming that the commands are performed in the given order.\n  </p>\n\n<h3>Input</h3>\n<p>\n  The input consists of a single test case of the following format.\n</p>\n<pre>\n$n$\n$a_1$ $b_1$\n...\n$a_{n-1}$ $b_{n-1}$\n$c_1 ... c_n$\n$m$\n$command_1$\n...\n$command_m$\n</pre>\n\n<p>\n  The first line contains an integer $n$ ($2 \\leq n \\leq 100 000$), the number of vertices of the tree. The vertices are numbered 1 through $n$. Each of the following $n - 1$ lines contains two integers $a_i$ ($1 \\leq a_i \\leq n$) and $b_i$ ($1 \\leq b_i \\leq n$), meaning that the $i$-th edge connects vertices $a_i$ and $b_i$. It is ensured that all the vertices are connected, that is, the given graph is a tree. The next line contains $n$ integers, $c_1$ through $c_n$, where $c_j$ ($1 \\leq c_j \\leq 100 000$) is the initial color of vertex $j$. The next line contains an integer $m$ ($1 \\leq m \\leq 100 000$), which indicates the number of commands. Each of the following $m$ lines contains a command in the following format.\n</p>\n\n<pre>\n$U$ $x_k$ $y_k$\n</pre>\n\n<p>or</p>\n\n<pre>\n$Q$ $y_k$\n</pre>\n\n<p>\n  When the $k$-th command starts with <span>U</span>, it means an update operation changing the color of vertex $x_k$ ($1 \\leq x_k \\leq n$) to $y_k$ ($1 \\leq y_k \\leq 100 000$). When the $k$-th command starts with <span>Q</span>, it means a query asking the number of edges in the minimum connected subgraph of the tree that contains all the vertices of color $y_k$ ($1 \\leq y_k \\leq 100 000$).\n</p>\n\n\n<h3>Output</h3>\n<p>\n  For each query, output the number of edges in the minimum connected subgraph of the tree containing all the vertices of the specified color. If the tree doesn't contain any vertex of the specified color, output <span>-1</span> instead.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n5\n1 2\n2 3\n3 4\n2 5\n1 2 1 2 3\n11\nQ 1\nQ 2\nQ 3\nQ 4\nU 5 1\nQ 1\nU 3 2\nQ 1\nQ 2\nU 5 4\nQ 1\n</pre>\n<h3>Sample Output 1</h3>\n<pre>\n2\n2\n0\n-1\n3\n2\n2\n0\n</pre>\n", "p00978": "<h2>Sixth Sense</h2>\n\n<p>\n  Ms. Future is gifted with precognition. Naturally, she is excellent at some card games since she can correctly foresee every player's actions, except her own. Today, she accepted a challenge from a reckless gambler Mr. Past. They agreed to play a simple two-player trick-taking card game.\n</p>\n\n<p>\n  Cards for the game have a number printed on one side, leaving the other side blank making indistinguishable from other cards.\n</p>\n\n<p>\n  A game starts with the same number, say $n$, of cards being handed out to both players, without revealing the printed number to the opponent.\n</p>\n\n<p>\n  A game consists of $n$ tricks. In each trick, both players pull one card out of her/his hand. The player pulling out the card with the larger number takes this trick. Because Ms. Future is extremely good at this game, they have agreed to give tricks to Mr. Past when both pull out cards with the same number. Once a card is used, it can never be used later in the same game. The game continues until all the cards in the hands are used up. The objective of the game is to take as many tricks as possible.\n</p>\n\n<p>\n  Your mission of this problem is to help Ms. Future by providing a computer program to determine the best playing order of the cards in her hand. Since she has the sixth sense, your program can utilize information that is not available to ordinary people before the game.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The input consists of a single test case of the following format.\n</p>\n<pre>\n$n$\n$p_1$ ... $p_n$\n$f_1$ ... $f_n$\n</pre>\n\n<p>\n  $n$ in the first line is the number of tricks, which is an integer between 2 and 5000, inclusive. The second line represents the Mr. Past's playing order of the cards in his hand. In the $i$-th trick, he will pull out a card with the number $p_i$ ($1 \\leq i \\leq n$). The third line represents the Ms. Future's hand. $f_i$ ($1 \\leq i \\leq n$) is the number that she will see on the $i$-th received card from the dealer. Every number in the second or third line is an integer between 1 and 10 000, inclusive. These lines may have duplicate numbers.\n  </p>\n\n<h3>Output</h3>\n\n<p>\n  The output should be a single line containing $n$ integers $a_1 ... a_n$ separated by a space, where $a_i$ ($1 \\leq i \\leq n$) is the number on the card she should play at the $i$-th trick for maximizing the number of taken tricks. If there are two or more such sequences of numbers, output the lexicographically greatest one among them.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n5\n1 2 3 4 5\n1 2 3 4 5\n</pre>\n<h3> Sample Output 1</h3>\n<pre>\n2 3 4 5 1\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n5\n3 4 5 6 7\n1 3 5 7 9\n</pre>\n<h3>Sample Output 2</h3>\n<pre>\n9 5 7 3 1\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n5\n3 2 2 1 1\n1 1 2 2 3\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n1 3 1 2 2\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n5\n3 4 10 4 9\n2 7 3 6 9\n</pre>\n<h3> Sample Output 4</h3>\n<pre>\n9 7 3 6 2\n</pre>\n", "p01085": "\n\n<h2>Entrance Examination</h2>\n\n<p>\nThe International Competitive Programming College (ICPC) is famous\nfor its research on competitive programming.\nApplicants to the college are required to take its entrance examination.\n</p>\n\n<p>\nThe successful applicants of the examination are chosen as follows.\n</p>\n\n<ul>\n<li>The score of any successful applicant is higher than that of any unsuccessful applicant.</li>\n<li>The number of successful applicants <i>n</i> must be between <i>n</i><sub>min</sub> and <i>n</i><sub>max</sub>, inclusive.\nWe choose <i>n</i> within the specified range that maximizes the <i>gap.</i>\nHere, the <i>gap</i> means the difference between the lowest score of\nsuccessful applicants and the highest score of unsuccessful applicants.\n</li>\n<li> When two or more candidates for <i>n</i> make exactly the same <i>gap,</i>\nuse the greatest <i>n</i> among them.</li>\n</ul>\n\n\n<p>\nLet's see the first couple of examples given in Sample Input below.\nIn the first example, <i>n</i><sub>min</sub> and <i>n</i><sub>max</sub> are two and four, respectively, and there are five applicants whose scores are 100, 90, 82, 70, and 65.\nFor <i>n</i> of two, three and four, the gaps will be 8, 12, and 5, respectively.\nWe must choose three as <i>n</i>, because it maximizes the gap.\n</p>\n\n<p>\nIn the second example, <i>n</i><sub>min</sub> and <i>n</i><sub>max</sub> are two and four, respectively, and there are five applicants whose scores are 100, 90, 80, 75, and 65.\nFor <i>n</i> of two, three and four, the gap will be 10, 5, and 10, \nrespectively. Both two and four maximize the gap, and we must choose the\n greatest number, four.\n</p>\n\n<p>\nYou are requested to write a program that computes the number of successful applicants that satisfies the conditions.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of multiple datasets. Each dataset is formatted as follows.\n</p>\n\n<blockquote>\n<i>m</i> <i>n</i><sub>min</sub> <i>n</i><sub>max</sub><br>\n<i>P</i><sub>1</sub><br>\n<i>P</i><sub>2</sub><br>\n...<br>\n<i>P<sub>m</sub></i><br>\n</blockquote>\n\n<p>\nThe first line of a dataset contains three integers separated by single spaces.\n<i>m</i> represents the number of applicants, <i>n</i><sub>min</sub> represents the minimum number of successful applicants, and <i>n</i><sub>max</sub> represents the maximum number of successful applicants.\nEach of the following <i>m</i> lines contains an integer\n<i>P<sub>i</sub></i>, which represents the score of each applicant.\nThe scores are listed in descending order.\nThese numbers satisfy 0 &lt; <i>n</i><sub>min</sub> &lt; <i>n</i><sub>max</sub> &lt; <i>m</i> &#8804; 200, 0 &#8804; <i>P<sub>i</sub></i> &#8804; 10000 (1 &#8804; <i>i</i> &#8804; <i>m</i>) and  <i>P</i><sub><i>n</i><sub>min</sub></sub> &gt; <i>P</i><sub><i>n</i><sub>max</sub>+1</sub>. These ensure that there always exists an <i>n</i> satisfying the conditions.\n</p>\n\n<p>\nThe end of the input is represented by a line containing three zeros separated by single spaces.\n</p>\n\n\n<h3>Output</h3>\n\n\n<p>\nFor each dataset, output the number of successful applicants in a line.\n</p>\n\n\n\n<h3>Sample Input</h3>\n\n\n<pre>5 2 4\n100\n90\n82\n70\n65\n5 2 4\n100\n90\n80\n75\n65\n3 1 2\n5000\n4000\n3000\n4 2 3\n10000\n10000\n8000\n8000\n4 2 3\n10000\n10000\n10000\n8000\n5 2 3\n100\n80\n68\n60\n45\n0 0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>3\n4\n2\n2\n3\n2\n</pre>", "p01086": "\n<h2>Short Phrase</h2>\n\n\n\n<p>\nA <em>Short Phrase</em> (aka. Tanku) is a fixed verse, inspired by Japanese poetry Tanka and Haiku.\nIt is a sequence of words, each consisting of lowercase letters 'a' to 'z', and must satisfy the following condition:\n</p>\n\n<blockquote>\n(The Condition for a Short Phrase)<br>\nThe sequence of words can be divided into five sections such that the \ntotal number of the letters in the word(s) of the first section is five,\n that of the second is seven, and those of the rest are five, seven, and\n seven, respectively.\n</blockquote>\n\n\n<p>\nThe following is an example of a Short Phrase.\n</p>\n\n\n<blockquote>\n<pre>do the best\nand enjoy today\nat acm icpc\n</pre>\n</blockquote>\n\n\n\n<p>\nIn this example, the sequence of the nine words can be divided into five\n sections (1) \"do\" and \"the\", (2) \"best\" and \"and\", (3) \"enjoy\", (4) \n\"today\" and \"at\", and (5) \"acm\" and \"icpc\" such that they have 5, 7, 5, \n7, and 7 letters in this order, respectively.\nThis surely satisfies the condition of a Short Phrase.\n</p>\n<p>\nNow, <em>Short Phrase Parnassus</em> published by your company has \nreceived a lot of contributions.\nBy an unfortunate accident, however, some irrelevant texts seem to be \nadded at beginnings and ends of contributed Short Phrases.\nYour mission is to write a program that finds the Short Phrase from a \nsequence of words that may have an irrelevant prefix and/or a suffix.\n</p>\n\n\n<h3>Input</h3>\n\n\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n\n\n<blockquote>\n<i>n</i><br>\n<i>w</i><sub>1</sub><br>\n... <br>\n<i>w<sub>n</sub></i><br>\n</blockquote>\n\n\n<p>\nHere, <i>n</i> is the number of words, which is a positive integer not exceeding 40;\n<i>w<sub>i</sub></i> is the <i>i</i>-th word, consisting solely of lowercase letters from 'a' to 'z'.\nThe length of each word is between 1 and 10, inclusive.\nYou can assume that every dataset includes a Short Phrase.\n</p>\n\n<p>\nThe end of the input is indicated by a line with a single zero.\n</p>\n\n\n\n<h3>Output</h3>\n\n\n<p>\nFor each dataset, output a single line containing <i>i</i> where\nthe first word of the Short Phrase is <i>w<sub>i</sub></i>.\nWhen multiple Short Phrases occur in the dataset, you should output the first one.\n</p>\n\n\n\n<h3>Sample Input</h3>\n\n\n<pre>9\ndo\nthe\nbest\nand\nenjoy\ntoday\nat\nacm\nicpc\n14\noh\nyes\nby\nfar\nit\nis\nwow\nso\nbad\nto\nme\nyou\nknow\nhey\n15\nabcde\nfghijkl\nmnopq\nrstuvwx\nyzz\nabcde\nfghijkl\nmnopq\nrstuvwx\nyz\nabcde\nfghijkl\nmnopq\nrstuvwx\nyz\n0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>1\n2\n6\n</pre>", "p01088": "\n<h2>500-yen Saving</h2>\n\n\n<p>\n\"500-yen Saving\" is one of Japanese famous methods to save money. The\nmethod is quite simple; whenever you receive a 500-yen coin in your\nchange of shopping, put the coin to your 500-yen saving box.\nTypically, you will find more than one million yen in your saving box\nin ten years.\n\n</p>\n\n<p>\nSome Japanese people are addicted to the 500-yen saving. They try\ntheir best to collect 500-yen coins efficiently by using 1000-yen bills\nand some coins effectively in their purchasing. For example, you will give\n1320 yen (one 1000-yen bill, three 100-yen coins and two 10-yen coins)\nto pay 817 yen, to receive one 500-yen coin (and three 1-yen coins)\nin the change.\n</p>\n\n<p>\nA friend of yours is one of these 500-yen saving addicts.  He is\nplanning a sightseeing trip and wants to visit a number of souvenir\nshops along his way.  He will visit souvenir shops one by one\naccording to the trip plan. Every souvenir shop sells only one kind of\nsouvenir goods, and he has the complete list of their prices.  He\nwants to collect as many 500-yen coins as possible through buying\nat most one souvenir from a shop.  On his departure,\nhe will start with sufficiently many 1000-yen bills and no coins at\nall.  The order of shops to visit cannot be changed.  As far as he can\ncollect the same number of 500-yen coins, he wants to cut his expenses\nas much as possible.\n</p>\n\n<p>\nLet's say that he is visiting shops with their souvenir prices of 800\nyen, 700 yen, 1600 yen, and 600 yen, in this order.  He can collect at\nmost two 500-yen coins spending 2900 yen, the least expenses to collect\ntwo 500-yen coins, in this case.  After skipping the first shop, the\nway of spending 700-yen at the second shop is by handing over a\n1000-yen bill and receiving three 100-yen coins.  In the next shop,\nhanding over one of these 100-yen coins and two 1000-yen bills for\nbuying a 1600-yen souvenir will make him receive one 500-yen coin. In\nalmost the same way, he can obtain another 500-yen coin at the last\nshop.  He can also collect two 500-yen coins buying at the first shop,\nbut his total expenditure will be at least 3000 yen because he needs\nto buy both the 1600-yen and 600-yen souvenirs in this case.\n</p>\n\n<p>\nYou are asked to make a program to help his collecting 500-yen coins\nduring the trip.  Receiving souvenirs' prices listed in the order\nof visiting the shops, your program is to find the maximum number of\n500-yen coins that he can collect during his trip, and the minimum\nexpenses needed for that number of 500-yen coins.\n</p>\n\n\n<p>\nFor shopping, he can use an arbitrary number of 1-yen, 5-yen, 10-yen,\n50-yen, and 100-yen coins he has, and arbitrarily many 1000-yen bills.\nThe shop always returns the exact change, i.e., the difference between\nthe amount he hands over and the price of the souvenir.  The shop has\nsufficient stock of coins and the change is always composed of the\nsmallest possible number of 1-yen, 5-yen, 10-yen, 50-yen, 100-yen, and\n500-yen coins and 1000-yen bills.  He may use more money than the\nprice of the souvenir, even if he can put the exact money, to obtain\ndesired coins as change; buying a souvenir of 1000 yen, he can hand\nover one 1000-yen bill and five 100-yen coins and receive a 500-yen\ncoin.  Note that using too many coins does no good; handing over ten\n100-yen coins and a 1000-yen bill for a souvenir of 1000 yen, he will\nreceive a 1000-yen bill as the change, not two 500-yen coins.\n</p>\n\n\n<h3>Input</h3>\n\n\n<p>\nThe input consists of at most 50 datasets, each in the following format.\n</p>\n\n\n<blockquote>\n<i>n</i> <br>\n<i>p</i><sub>1</sub><br>\n...<br>\n<i>p<sub>n</sub></i> <br>\n</blockquote>\n\n\n\n\n<p>\n<i>n</i> is the number of souvenir shops, which is a positive integer not\ngreater than 100.\n\n<i>p<sub>i</sub></i> is the price of the souvenir of the <i>i</i>-th souvenir shop.\n\n<i>p<sub>i</sub></i> is a positive integer not greater than 5000.\n</p>\n\n<p>\nThe end of the input is indicated by a line with a single zero.\n</p>\n\n\n<h3>Output</h3>\n\n\n<p>\n\nFor each dataset, print a line containing two integers <i>c</i> and <i>s</i> separated by a space.\n\nHere, <i>c</i> is the maximum number of 500-yen coins that he can get during his\ntrip, and <i>s</i> is the minimum expenses that he need to pay to get <i>c</i>\n500-yen coins.\n\n</p>\n\n\n<h3>Sample Input</h3>\n\n\n<pre>4\n800\n700\n1600\n600\n4\n300\n700\n1600\n600\n4\n300\n700\n1600\n650\n3\n1000\n2000\n500\n3\n250\n250\n1000\n4\n1251\n667\n876\n299\n0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>2 2900\n3 2500\n3 3250\n1 500\n3 1500\n3 2217\n</pre>\n\n", "p01090": "\n<h2>Bridge Construction Planning</h2>\n\n\n<p>\nThere is a city consisting of many small islands, and the citizens live in these islands.\nCitizens feel inconvenience in requiring ferry rides between these islands.\nThe city mayor decided to build bridges connecting all the islands.\n</p>\n\n<p>\nThe city has two construction companies, A and B.\nThe mayor requested these companies for proposals, and obtained proposals in the form:\n\"Company A (or B) can build a bridge between islands <i>u</i> and <i>v</i> in <i>w</i> hundred million yen.\"\n</p>\n\n<p>\nThe mayor wants to accept some of these proposals to make a plan with the lowest budget.\nHowever, if the mayor accepts too many proposals of one company,\nthe other may go bankrupt, which is not desirable for the city with only two construction companies.\nHowever, on the other hand, to avoid criticism on wasteful construction,\nthe mayor can only accept the minimum number (i.e., <i>n</i> &#8722; 1) of bridges for connecting all the islands.\nThus, the mayor made a decision that exactly <i>k</i> proposals by the company A\nand exactly <i>n</i> &#8722; 1 &#8722; <i>k</i> proposals by the company B should be accepted.\n</p>\n\n<p>\nYour task is to write a program that computes the cost of the plan with the lowest budget that satisfies the constraints.\nHere, the cost of a plan means the sum of all the costs mentioned in the accepted proposals.\n</p>\n\n<h3>Input</h3>\n\n\n<p>\nThe input consists of multiple datasets.\nThe number of datasets is at most 30.\nEach dataset is in the following format.\n</p>\n\n<blockquote>\n<i>n</i> <i>m</i> <i>k</i><br>\n<i>u</i><sub>1</sub> <i>v</i><sub>1</sub> <i>w</i><sub>1</sub> <i>l</i><sub>1</sub><br>\n... <br>\n<i>u<sub>m</sub></i> <i>v<sub>m</sub></i> <i>w<sub>m</sub></i> <i>l<sub>m</sub></i><br>\n</blockquote>\n\n\n\n<p>\nThe first line contains three integers <i>n</i>, <i>m</i>, and <i>k</i>, where\n<i>n</i> is the number of islands, <i>m</i> is the total number of proposals,\n and <i>k</i> is the number of proposals that are to be ordered to company A\n(2 &#8804; <i>n</i> &#8804; 200, 1 &#8804; <i>m</i> &#8804; 600, and 0 &#8804; <i>k</i> &#8804; <i>n</i>&#8722;1).\nIslands are identified by integers, 1 through <i>n</i>.\nThe following <i>m</i> lines denote the proposals each of which is described with three integers\n<i>u<sub>i</sub></i>, <i>v<sub>i</sub></i>, <i>w<sub>i</sub></i> and one character <i>l<sub>i</sub></i>,\nwhere\n<i>u<sub>i</sub></i> and <i>v<sub>i</sub></i> denote two bridged islands,\n <i>w<sub>i</sub></i> is the cost of the bridge (in hundred million yen),\nand <i>l<sub>i</sub></i> is the name of the company that submits this proposal\n(1 &#8804; <i>u<sub>i</sub></i> &#8804; <i>n</i>, 1 &#8804; <i>v<sub>i</sub></i> &#8804; <i>n</i>, 1 &#8804; <i>w<sub>i</sub></i> &#8804; 100, and <i>l<sub>i</sub></i> = 'A' or 'B').\nYou can assume that each bridge connects distinct islands, i.e., <i>u<sub>i</sub></i> &#8800; <i>v<sub>i</sub></i>,\nand each company gives at most one proposal for each pair of islands, i.e., {<i>u<sub>i</sub></i>, <i>v<sub>i</sub></i>} &#8800; {<i>u<sub>j</sub></i>, <i>v<sub>j</sub></i>} if <i>i</i> &#8800; <i>j</i> and <i>l<sub>i</sub></i> = <i>l<sub>j</sub></i>.\n</p>\n\n<p>\nThe end of the input is indicated by a line with three zeros separated by single spaces.\n</p>\n\n\n<h3>Output</h3>\n\n\n<p>\nFor each dataset, output a single line containing a single integer that \ndenotes the cost (in hundred million yen) of the plan with the lowest \nbudget.\nIf there are no plans that satisfy the constraints, output &#8722;1.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>4 5 2\n1 2 2 A\n1 3 2 A\n1 4 2 A\n2 3 1 B\n3 4 1 B\n5 8 2\n1 2 1 A\n2 3 1 A\n3 4 3 A\n4 5 3 A\n1 2 5 B\n2 3 5 B\n3 4 8 B\n4 5 8 B\n5 5 1\n1 2 1 A\n2 3 1 A\n3 4 1 A\n4 5 1 B\n3 5 1 B\n4 5 3\n1 2 2 A\n2 4 3 B\n3 4 4 B\n2 3 5 A\n3 1 6 A\n0 0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>5\n16\n-1\n-1\n</pre>", "p01093": "\n<h3>Selection of Participants of an Experiment</h3>\n\n<p>\nDr. Tsukuba has devised a new method of programming training.\nIn order to evaluate the effectiveness of this method,\nhe plans to carry out a control experiment.\nHaving two students as the participants of the experiment,\none of them will be trained under the conventional method\nand the other under his new method.\nComparing the final scores of these two,\nhe will be able to judge the effectiveness of his method.\n</p>\n\n<p>\nIt is important to select two students having the closest possible scores,\nfor making the comparison fair.\nHe has a list of the scores of all students\nwho can participate in the experiment.\nYou are asked to write a program which selects two of them\nhaving the smallest difference in their scores.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n\n<p>\n\n<i>n</i><br>\n<i>a</i><sub>1</sub> <i>a</i><sub>2</sub> &hellip; <i>a<sub>n</sub></i>\n\n</p>\n\n<p>\nA dataset consists of two lines.\nThe number of students <i>n</i> is given in the first line.\n<i>n</i> is an integer satisfying 2 &le; <i>n</i> &le; 1000.\nThe second line gives scores of <i>n</i> students.\n<i>a<sub>i</sub></i> (1 &le; <i>i</i> &le; <i>n</i>) is the score of the <i>i</i>-th student, which is a non-negative integer not greater than 1,000,000.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing a zero.\nThe sum of <i>n</i>'s of all the datasets does not exceed 50,000.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nFor each dataset, select two students with the smallest difference in their scores,\nand output in a line (the absolute value of) the difference.\n</p>\n\n\n<h3>Sample Input</h3>\n\n<pre>\n5\n10 10 10 10 10\n5\n1 5 8 9 11\n7\n11 34 83 47 59 29 70\n0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>\n0\n1\n5\n</pre>\n", "p01094": "\n<h3>Look for the Winner!</h3>\n\n<p>\nThe citizens of TKB City are famous for their deep love in elections and vote counting.\nToday they hold an election for the next chairperson of the electoral commission.\nNow the voting has just been closed and the counting is going to start.\nThe TKB citizens have strong desire to know the winner as early as possible during vote counting.\n</p>\n\n<p>\nThe election candidate receiving the most votes shall be the next chairperson.\nSuppose for instance that we have three candidates <i>A</i>, <i>B</i>, and <i>C</i> and ten votes.\nSuppose also that we have already counted six of the ten votes and the vote counts of <i>A</i>, <i>B</i>, and <i>C</i> are four, one, and one, respectively.\nAt this moment, every candidate has a chance to receive four more votes and so everyone can still be the winner.\nHowever, if the next vote counted is cast for <i>A</i>, <i>A</i> is ensured to be the winner since <i>A</i> already has five votes and <i>B</i> or <i>C</i> can have at most four votes at the end.\nIn this example, therefore, the TKB citizens can know the winner just when the seventh vote is counted. \n</p>\n\n<p>\nYour mission is to write a program that receives every vote counted, one by one, identifies the winner, and determines when the winner gets ensured.\n</p>\n\n\n\n<h3>Input</h3>\n\n\n<p>\nThe input consists of at most 1500 datasets, each consisting of two lines in the following format.\n</p>\n\n<p>\n\n<i>n</i><br>\n<i>c</i><sub>1</sub> <i>c</i><sub>2</sub> &hellip; <i>c<sub>n</sub></i><br>\n\n</p>\n\n<p>\n<i>n</i> in the first line represents the number of votes, and is a positive integer no greater than 100.\nThe second line represents the <i>n</i> votes, separated by a space.\nEach <i>c<sub>i</sub></i> (1 &le; <i>i</i> &le; <i>n</i>) is a single uppercase letter, <i>i.e.</i> one of 'A' through 'Z'.\nThis represents the election candidate for which the <i>i</i>-th vote was cast.\nCounting shall be done in the given order from <i>c</i><sub>1</sub> to <i>c<sub>n</sub></i>.\n</p>\n\n<p>\nYou should assume that at least two stand as candidates even when all the votes are cast for one candidate.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing a zero.\n</p>\n\n\n<h3>Output</h3>\n\n\n<p>\nFor each dataset, unless the election ends in a tie, output a single line containing an uppercase letter <i>c</i> and an integer <i>d</i> separated by a space:\n<i>c</i> should represent the election winner and <i>d</i> should represent after counting how many votes the winner is identified.\nOtherwise, that is, if the election ends in a tie, output a single line containing `TIE'.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>\n1\nA\n4\nA A B B\n5\nL M N L N\n6\nK K K K K K\n6\nX X X Y Z X\n10\nA A A B A C A C C B\n10\nU U U U U V V W W W\n0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>\nA 1\nTIE\nTIE\nK 4\nX 5\nA 7\nU 8\n</pre>", "p01095": "\n<h3>Bamboo Blossoms</h3>\n\n\n<p>\n  The bamboos live for decades, and at the end of their lives,\n  they flower to make their seeds.  Dr. ACM, a biologist, was fascinated\n  by the bamboos in blossom in his travel to Tsukuba.  He liked\n  the flower so much that he was tempted to make a garden where\n  the bamboos bloom annually.  Dr. ACM started research of\n  improving breed of the bamboos, and finally, he established\n  a method to develop bamboo breeds with controlled lifetimes.\n  With this method, he can develop bamboo breeds that flower\n  after arbitrarily specified years.\n</p>\n\n<p>\n  Let us call bamboos that flower <i>k</i> years after sowing\n  \"<i>k</i>-year-bamboos.\"\n  <i>k</i> years after being sowed, <i>k</i>-year-bamboos make\n  their seeds and then die,\n  hence their next generation flowers after another <i>k</i> years.\n  In this way, if he sows seeds of <i>k</i>-year-bamboos, he can\n  see bamboo blossoms every <i>k</i> years.  For example,\n  assuming that he sows seeds of 15-year-bamboos,\n  he can see bamboo blossoms every 15 years;\n  15 years, 30 years, 45 years, and so on, after sowing.\n</p>\n\n<p>\n  Dr. ACM asked you for designing his garden.  His garden is partitioned\n  into blocks, in each of which only a single breed of bamboo can grow.\n  Dr. ACM requested you to decide which breeds of bamboos\n  should he sow in the blocks in order to see bamboo blossoms\n  in at least one block for as many years as possible.\n</p>\n\n<p>\n  You immediately suggested to sow seeds of one-year-bamboos in all blocks.\n  Dr. ACM, however, said that it was difficult to develop a bamboo breed\n  with short lifetime, and would like a plan using only those breeds with\n  long lifetimes.  He also said that, although he could wait for some years\n  until he would see the first bloom, he would like to see it in\n  every following year.\n  Then, you suggested a plan\n  to sow seeds of 10-year-bamboos, for example, in different blocks each year,\n  that is, to sow in a block this year and in another block next year, and so on,\n  for 10 years.  Following this plan, he could see\n  bamboo blossoms in one block every year except for the first 10 years.\n  Dr. ACM objected again saying he had determined to sow in all\n  blocks this year.\n</p>\n\n<p>\n  After all, you made up your mind to make a sowing plan where the bamboos\n  bloom in at least one block for as many consecutive years as possible\n  after the first <i>m</i> years (including this year)\n  under the following conditions:\n  <ul>\n    <li>the plan should use only those bamboo breeds whose\n      lifetimes are <i>m</i> years or longer, and\n    <li>Dr. ACM should sow the seeds in all the blocks only this year.\n  </ul>\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The input consists of at most 50 datasets, each in the following format.\n</p>\n\n<p>\n\n    <i>m</i> <i>n</i><br>\n\n</p>\n\n<p>\n  An integer <i>m</i> (2 &le; <i>m</i> &le; 100) represents the lifetime\n  (in years)\n  of the bamboos with the shortest lifetime that Dr. ACM can use for\n  gardening.\n  An integer <i>n</i> (1 &le; <i>n</i> &le; 500,000) represents the number of blocks.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing two zeros.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\n  No matter how good your plan is, a \"dull-year\" would\n  eventually come, in which the bamboos do not flower in any block.\n  For each dataset, output in a line an integer meaning how many\n  years from now the first dull-year comes after the first <i>m</i> years.\n</p>\n\n<p>\n  Note that the input of <i>m</i> = 2 and <i>n</i> = 500,000\n  (the last dataset of the Sample Input) gives the largest answer.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>\n3 1\n3 4\n10 20\n100 50\n2 500000\n0 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>\n4\n11\n47\n150\n7368791\n</pre>", "p01100": "\n<h3>Gift Exchange Party</h3>\n\n\n<p>\nA gift exchange party will be held at a school in TKB City.\n</p>\n\n<p>\nFor every pair of students who are close friends, one gift must be given from one to the other at this party, but not the other way around.\nIt is decided in advance the gift directions, that is, which student of each pair receives a gift.\nNo other gift exchanges are made.\n</p>\n\n<p>\nIf each pair randomly decided the gift direction,\nsome might receive countless gifts, while some might receive only few or even none.\n</p>\n\n<p>\nYou'd like to decide the gift directions for all the friend pairs\nthat minimize the difference between the smallest and the largest numbers of gifts received by a student.\nFind the smallest and the largest numbers of gifts received\nwhen the difference between them is minimized.\nWhen there is more than one way to realize that, \nfind the way that maximizes the smallest number of received gifts.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of at most 10 datasets, each in the following format.\n</p>\n\n<p>\n\n<i>n</i> <i>m</i><br>\n<i>u</i><sub>1</sub> <i>v</i><sub>1</sub><br>\n... <br>\n<i>u<sub>m</sub></i> <i>v<sub>m</sub></i>\n\n</p>\n\n<p>\n<i>n</i> is the number of students, and <i>m</i> is the number of friendship relations (2 &le; <i>n</i> &le; 100, 1 &le; <i>m</i> &le; <i>n</i> (<i>n</i>-1)/2). \nStudents are denoted by integers between 1 and <i>n</i>, inclusive.\nThe following <i>m</i> lines describe the friendship relations: for each <i>i</i>, student <i>u<sub>i</sub></i> and <i>v<sub>i</sub></i> are close friends (<i>u<sub>i</sub></i> &lt; <i>v<sub>i</sub></i>).\nThe same friendship relations do not appear more than once.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing two zeros.\n</p>\n\n<h3>Output</h3>\n\n<p>\nFor each dataset, output a single line containing two integers <i>l</i> and <i>h</i> separated by a single space.\nHere, <i>l</i> and  <i>h</i> are the smallest and the largest numbers, respectively, of gifts received by a student.\n</p>\n\n\n<h3>Sample Input</h3>\n\n\n<pre>\n3 3\n1 2\n2 3\n1 3\n4 3\n1 2\n1 3\n1 4\n4 6\n1 2\n1 3\n1 4\n2 3\n3 4\n2 4\n0 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n1 1\n0 1\n1 2\n</pre>", "p01101": "\n<h3><u>Taro's Shopping</u></h3>\n\n<p>\nMammy decided to give Taro his first shopping experience.\nMammy tells him to choose any two items he wants from those\nlisted in the shopping catalogue,\nbut Taro cannot decide which two, as all the items look attractive.\nThus he plans to buy the pair of two items with\nthe highest price sum, not exceeding the amount Mammy allows.\nAs getting two of the same item is boring, he wants two different items.\n</p>\n\n<p>\nYou are asked to help Taro select the two items.\nThe price list for all of the items is given.\nAmong pairs of two items in the list,\nfind the pair with the highest price sum\nnot exceeding the allowed amount,\nand report the sum.\nTaro is buying two items, not one, nor three, nor more.\nNote that, two or more items in the list may be priced equally.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n\n\n<pre>\n<i>n</i> <i>m</i>\n<i>a</i><sub>1</sub> <i>a</i><sub>2</sub> ... <i>a<sub>n</sub></i>\n</pre>\n\n\n<p>\nA dataset consists of two lines.\nIn the first line, the number of items <i>n</i> and the maximum\npayment allowed <i>m</i> are given.\n<i>n</i> is an integer satisfying 2 &#8804; <i>n</i> &#8804; 1000.\n<i>m</i> is an integer satisfying 2 &#8804; <i>m</i> &#8804; 2,000,000.\nIn the second line, prices of <i>n</i> items are given.\n<i>a<sub>i</sub></i> (1 &#8804; <i>i</i> &#8804; <i>n</i>) is the price\nof the <i>i</i>-th item.\nThis value is an integer greater than or equal to 1 and\nless than or equal to 1,000,000.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing two zeros.\nThe sum of <i>n</i>'s of all the datasets does not exceed 50,000.\n</p>\n\n\n<h3>Output</h3>\n\n\n<p>\nFor each dataset, find the pair with the highest price sum\nnot exceeding the allowed amount <i>m</i>\nand output the sum in a line.\nIf the price sum of every pair of items exceeds <i>m</i>,\noutput <tt>NONE</tt> instead.\n</p>\n<!-- end en only -->\n\n\n<h3>Sample Input</h3>\n\n\n<pre>3 45\n10 20 30\n6 10\n1 2 5 8 9 11\n7 100\n11 34 83 47 59 29 70\n4 100\n80 70 60 50\n4 20\n10 5 10 16\n0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>40\n10\n99\nNONE\n20\n</pre>\n\n", "p01102": "\n<h3><u>Almost Identical Programs</u></h3>\n\n<p>\nThe programming contest named\n<i>Concours de Programmation Comtemporaine Interuniversitaire</i> (CPCI)\nhas a judging system similar to that of ICPC;\ncontestants have to submit correct outputs for two different inputs\nto be accepted as a correct solution.\n\nEach of the submissions should include the program that generated\nthe output.  A pair of submissions is judged to be a correct\nsolution when, in addition to the correctness of the outputs, they\ninclude an identical program.\n</p>\n<p>\nMany contestants, however, do not stop including a different version\nof their programs in their second submissions, after modifying a\nsingle string literal in their programs representing \nthe input file name, attempting to process different input.\n\nThe organizers of CPCI are exploring the possibility of showing a\nspecial error message for such <em>close</em> submissions, \nindicating contestants what's wrong with such submissions.\n\nYour task is to detect such close submissions.\n</p>\n\n\n<h3>Input</h3>\n\n\n<p>\nThe input consists of at most 100 datasets, each in the following format.\n</p>\n\n<pre>\n<i>s</i><sub>1</sub>\n<i>s</i><sub>2</sub>\n</pre>\n\n<p>\nEach of <i>s</i><sub>1</sub> and <i>s</i><sub>2</sub> is\na string written in a line, with the length between 1 and 200, inclusive.\nThey are the first and the second submitted programs respectively.\n\nA program consists of lowercase letters (<tt>a</tt>, <tt>b</tt>, ..., <tt>z</tt>), uppercase letters (<tt>A</tt>, <tt>B</tt>, ..., <tt>Z</tt>),\ndigits (<tt>0</tt>, <tt>1</tt>, ..., <tt>9</tt>), double quotes (<tt>\"</tt>), and semicolons (<tt>;</tt>).\nWhen double quotes occur in a program, there are always even number of them.\n</p>\n\n\n<p>\nThe end of the input is indicated by a line containing one '<tt>.</tt>' (period).\n</p>\n\n\n<h3>Output</h3>\n\n\n\n<p>\nFor each dataset, print the judge result in a line.\n</p>\n<p>\nIf the given two programs are identical, print <tt>IDENTICAL</tt>.\nIf two programs differ with only one corresponding string literal, print <tt>CLOSE</tt>.\nOtherwise, print <tt>DIFFERENT</tt>.\n\nA string literal is a possibly empty sequence of characters between an\nodd-numbered occurrence of a double quote and the next occurrence of\na double quote.\n</p>\n\n\n<h3>Sample Input</h3>\n\n\n<pre>print\"hello\";print123\nprint\"hello\";print123\nread\"B1input\";solve;output;\nread\"B2\";solve;output;\nread\"C1\";solve;output\"C1ans\";\nread\"C2\";solve;output\"C2ans\";\n\"\"\"\"\"\"\"\"\n\"\"\"42\"\"\"\"\"\nslow\"program\"\nfast\"code\"\n\"super\"fast\"program\"\n\"super\"faster\"program\"\nX\"\"\nX\nI\"S\"\"CREAM\"\nI\"CE\"\"CREAM\"\n11\"22\"11\n1\"33\"111\n.\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>IDENTICAL\nCLOSE\nDIFFERENT\nCLOSE\nDIFFERENT\nDIFFERENT\nDIFFERENT\nCLOSE\nDIFFERENT\n</pre>", "p01109": "<h3>Income Inequality</h3>\n<!-- end en only -->\n\n\n\n<!-- begin en only -->\n<p>\nWe often compute the average as the first step\nin processing statistical data.\nYes, the average is a good tendency measure of data,\nbut it is not always the best.\nIn some cases, the average may hinder the understanding\nof the data.\n</p>\n\n<p>\nFor example, consider the national income of a country.\nAs the term <i>income inequality</i> suggests,\na small number of people earn a good portion of the gross national income\nin many countries.\nIn such cases, the average income computes much higher than the\nincome of the vast majority.\nIt is not appropriate to regard the average as the income of typical people.\n</p>\n\n<p>\nLet us observe the above-mentioned phenomenon in some concrete data.\nIncomes of <i>n</i> people, <i>a</i><sub>1</sub>, ... ,\n<i>a<sub>n</sub></i>, are given.\nYou are asked to write a program that reports the number of people\nwhose incomes are less than or equal to the average\n(<i>a</i><sub>1</sub> + ... + <i>a<sub>n</sub></i>) / <i>n</i>.\n</p>\n<!-- end en only -->\n\n\n\n\n<h3>Input</h3>\n\n\n\n<!-- begin en only -->\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n<!-- end en only -->\n\n<blockquote>\n<p>\n<i>n</i><br>\n<i>a</i><sub>1</sub> <i>a</i><sub>2</sub> ... <i>a<sub>n</sub></i>\n</p>\n</blockquote>\n\n<!-- begin en only -->\n<p>\nA dataset consists of two lines.\nIn the first line, the number of people <i>n</i> is given.\n<i>n</i> is an integer satisfying 2 &#8804; <i>n</i> &#8804; 10&#8239;000.\nIn the second line, incomes of <i>n</i> people are given.\n<i>a<sub>i</sub></i> (1 &#8804; <i>i</i> &#8804; <i>n</i>) is the income\nof the <i>i</i>-th person.\nThis value is an integer greater than or equal to 1 and\nless than or equal to 100&#8239;000.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing a zero.\nThe sum of <i>n</i>'s of all the datasets does not exceed 50&#8239;000.\n</p>\n<!-- end en only -->\n\n\n\n\n<h3>Output</h3>\n\n\n\n<!-- begin en only -->\n<p>\nFor each dataset, output the number of people whose incomes are\nless than or equal to the average.\n</p>\n<!-- end en only -->\n\n\n\n\n<h3>Sample Input</h3>\n\n\n<pre>7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>7\n3\n9\n1\n4\n</pre>\n\n", "p01111": "<h3>Skyscraper \"MinatoHarukas\"</h3>\n<!-- end en only -->\n\n\n\n<!-- begin en only -->\n<p>\nMr.&nbsp;Port plans to start a new business renting one or more floors\nof the new skyscraper with one giga floors, MinatoHarukas.\n \nHe wants to rent as many vertically adjacent floors as possible, \nbecause he wants to show advertisement on as many vertically\nadjacent windows as possible.\n\nThe rent for one floor is proportional to the floor number,\nthat is, the rent per month for the <i>n</i>-th floor is <i>n</i> times\nthat of the first floor.\nHere, the ground floor is called the first floor in the American style,\nand basement floors are out of consideration for the renting.\n\nIn order to help Mr.&nbsp;Port, you should write a program that computes\nthe vertically adjacent floors satisfying his requirement and\nwhose total rental cost per month is \n<em><font color=\"#ff0000\">exactly equal</font></em> to his budget.\n</p>\n<!-- end en only -->\n\n\n<!-- begin en only -->\n<p>\nFor example, when his budget is 15 units, \nwith one unit being the rent of the first floor,\nthere are four possible rent plans,\n1+2+3+4+5, 4+5+6, 7+8, and 15. \nFor all of them, the sums are equal to 15.\nOf course in this example the rent of maximal number of the floors \nis that of 1+2+3+4+5, that is, the rent from the first floor to the fifth floor.\n</p>\n\n<!-- end en only -->\n\n\n\n\n<h3>Input</h3>\n\n\n\n<!-- begin en only -->\n<p>\nThe input consists of multiple datasets,\neach in the following format.\n</p>\n<!-- end en only -->\n\n\n<blockquote>\n<p>\n<i>b</i> <br>\n</p>\n</blockquote>\n\n<!-- begin en only -->\n<p>\nA dataset consists of one line,\nthe budget of Mr.&nbsp;Port <i>b</i> as multiples of the rent of the first floor.\n<i>b</i>&nbsp; is a positive integer satisfying 1 &lt; <i>b</i> &lt; 10<sup>9</sup>.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing a zero.\nThe number of datasets does not exceed 1000.\n</p>\n<!-- end en only -->\n\n\n\n\n\n<h3>Output</h3>\n\n\n\n<!-- begin en only -->\n<p>\nFor each dataset, output a single line containing two positive integers\nrepresenting the plan with the maximal number of vertically adjacent floors\nwith its rent price exactly equal to the budget of Mr.&nbsp;Port.\nThe first should be the lowest floor number and\nthe second should be the number of floors.\n</p>\n<!-- end en only -->\n\n\n\n<h3>Sample Input</h3>\n\n\n<pre>15\n16\n2\n3\n9699690\n223092870\n847288609\n900660121\n987698769\n999999999\n0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>1 5\n16 1\n2 1\n1 2\n16 4389\n129 20995\n4112949 206\n15006 30011\n46887 17718\n163837 5994\n</pre>\n", "p01115": "<h3>Expression Mining</h3>\n<!-- end en only -->\n\n\n\n<!-- begin en only -->\n<p>\nConsider an arithmetic expression built by combining single-digit positive integers\nwith addition symbols <tt>+</tt>, multiplication symbols <tt>*</tt>,\nand parentheses <tt>(</tt> <tt>)</tt>,\ndefined by the following grammar rules with the start symbol <tt>E</tt>.\n</p>\n<!-- end en only -->\n\n<pre>  E ::= T | E '+' T\n  T ::= F | T '*' F\n  F ::= '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '(' E ')'\n</pre>\n\n<!-- begin en only -->\n<p>\nWhen such an arithmetic expression is viewed as a string,\nits substring, that is, a contiguous sequence of characters within the string,\nmay again form an arithmetic expression.\n\nGiven an integer <i>n</i> and a string <i>s</i> representing an arithmetic expression,\nlet us count the number of its substrings that can be read as arithmetic expressions\nwith values computed equal to <i>n</i>.\n</p>\n<!-- end en only -->\n\n\n\n<h3>Input</h3>\n\n\n\n<!-- begin en only -->\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n<!-- end en only -->\n\n<blockquote>\n<p>\n<i>n</i><br>\n<i>s</i><br>\n</p>\n</blockquote>\n\n<!-- begin en only -->\n<p>\nA dataset consists of two lines.\nIn the first line, the target value <i>n</i> is given.\n<i>n</i> is an integer satisfying 1 &#8804; <i>n</i> &#8804; 10<sup>9</sup>.\n\nThe string <i>s</i> given in the second line\nis an arithmetic expression conforming to the grammar defined above.\nThe length of <i>s</i> does not exceed 2&times;10<sup>6</sup>.\nThe nesting depth of the parentheses in the string is at most 1000.\n</p>\n<p>\nThe end of the input is indicated by a line containing a single zero.\nThe sum of the lengths of <i>s</i>\nin all the datasets does not exceed 5&times;10<sup>6</sup>.\n</p>\n<!-- end en only -->\n\n\n\n<h3>Output</h3>\n\n\n\n<!-- begin en only -->\n<p>\nFor each dataset, output in one line the number of substrings of <i>s</i> that\nconform to the above grammar and have the value <i>n</i>.\nThe same sequence of characters appearing at different positions should be counted separately.\n</p>\n<!-- end en only -->\n\n\n\n<h3>Sample Input</h3>\n\n\n<pre>3\n(1+2)*3+3\n2\n1*1*1+1*1*1\n587\n1*(2*3*4)+5+((6+7*8))*(9)\n0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>4\n9\n2\n</pre>\n", "p01116": "<h3>For Programming Excellence</h3>\n<!-- end en only -->\n\n\n\n<!-- begin en only -->\n<p>\n  A countless number of skills are required to be an excellent programmer.\n  Different skills have different importance degrees,\n  and the total programming competence is measured by\n  the sum of products of levels and importance degrees of his/her skills.\n</p>\n<p>\n  In this summer season,\n  you are planning to attend a summer programming school.\n  The school offers courses for many of such skills.\n  Attending a course for a skill,\n  your level of the skill will be improved in proportion to the tuition paid,\n  one level per one yen of tuition, however,\n  each skill has its upper limit of the level\n  and spending more money will never improve the skill level further.\n  Skills are not independent: For taking a course for a skill,\n  except for the most basic course,\n  you have to have at least a certain level of its prerequisite skill.\n</p>\n<p>\n  You want to realize the highest possible programming competence measure\n  within your limited budget for tuition fees.\n</p>\n<!-- end en only -->\n    \n\n\n<h3>Input</h3>\n\n\n\n<!-- begin en only -->\n<p>\nThe input consists of no more than 100 datasets, each in the following format.\n</p>\n<!-- end en only -->\n\n<blockquote>\n<p>\n<i>n</i> <i>k</i><br>\n<i>h</i><sub>1</sub> ... <i>h<sub>n</sub></i> <br>\n<i>s</i><sub>1</sub> ... <i>s<sub>n</sub></i> <br>\n<i>p</i><sub>2</sub> ... <i>p<sub>n</sub></i> <br>\n<i>l</i><sub>2</sub> ... <i>l<sub>n</sub></i> <br>\n</p>\n</blockquote>\n\n<!-- begin en only -->\n<ul>\n  <li>\n    The first line has two integers,\n    <i>n</i>, the number of different skills between 2 and 100, inclusive, and\n    <i>k</i>, the budget amount available between 1 and 10<sup>5</sup>, inclusive.\n    In what follows, skills are numbered 1 through <i>n</i>.\n  </li>\n  <li>\n    The second line has <i>n</i> integers\n    <i>h</i><sub>1</sub>...<i>h<sub>n</sub></i>,\n    in which <i>h<sub>i</sub></i> is the maximum level of the skill <i>i</i>,\n    between 1 and 10<sup>5</sup>, inclusive.\n  </li>\n  <li>\n    The third line has <i>n</i> integers\n    <i>s</i><sub>1</sub>...<i>s<sub>n</sub></i>,\n    in which <i>s<sub>i</sub></i> is the importance degree of the skill <i>i</i>,\n    between 1 and 10<sup>9</sup>, inclusive.\n  </li>\n  <li>\n    The fourth line has <i>n</i>&#8722;1 integers\n    <i>p</i><sub>2</sub>...<i>p<sub>n</sub></i>,\n    in which <i>p<sub>i</sub></i> is the prerequisite skill of the skill <i>i</i>,\n    between 1 and <i>i</i>&#8722;1, inclusive.\n    The skill 1 has no prerequisites.\n  </li>\n  <li>\n    The fifth line has <i>n</i>&#8722;1 integers\n    <i>l</i><sub>2</sub>...<i>l<sub>n</sub></i>,\n    in which <i>l<sub>i</sub></i> is the least level of prerequisite skill\n    <i>p<sub>i</sub></i> required to learn the skill <i>i</i>,\n    between 1 and <i>h<sub>p<sub>i</sub></sub></i>&nbsp;, inclusive.\n  </li>\n</ul>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nThe end of the input is indicated by a line containing two zeros.\n</p>\n<!-- end en only -->\n\n\n\n<h3>Output</h3>\n\n\n\n<!-- begin en only -->\n<p>\n  For each dataset, output a single line containing one integer,\n  which is the highest programming competence measure achievable,\n  that is,\n  the maximum sum of the products of\n  levels and importance degrees of the skills,\n  within the given tuition budget,\n  starting with level zero for all the skills.\n  You do not have to use up all the budget.\n</p>\n<!-- end en only -->\n\n\n\n<h3>Sample Input</h3>\n\n\n<pre>3 10\n5 4 3\n1 2 3\n1 2\n5 2\n5 40\n10 10 10 10 8\n1 2 3 4 5\n1 1 2 3\n10 10 10 10\n5 10\n2 2 2 5 2\n2 2 2 5 2\n1 1 2 2\n2 1 2 1\n0 0\n</pre>\n\n\n<h3>Output for the Sample Input</h3>\n\n<pre>18\n108\n35\n</pre>\n", "p01117": "<!-- begin en only -->\n<h3>Scores of Final Examination</h3>\n<!-- end en only -->\n\n<!-- begin en only -->\n<p>\nI am a junior high school teacher.\nThe final examination has just finished, and I have\nall the students' scores of all the subjects.\nI want to know the highest total score among the students,\nbut it is not an easy task as the student scores are\nlisted separately for each subject.\nI would like to ask you, an excellent programmer, to help me\nby writing a program that finds the total score of a student\nwith the highest total score.\n</p>\n<!-- end en only -->\n\n\n<h3>Input</h3>\n\n\n<!-- begin en only -->\n<p>\nThe input consists of multiple datasets, each in the following format.\n</p>\n<!-- end en only -->\n\n<blockquote>\n<p>\n<i>n m</i><br>\n<i>p</i><sub>1,1</sub> <i>p</i><sub>1,2</sub> &hellip; <i>p</i><sub>1,<i>n</i></sub><br>\n<i>p</i><sub>2,1</sub> <i>p</i><sub>2,2</sub> &hellip; <i>p</i><sub>2,<i>n</i></sub><br>\n&hellip;<br>\n<i>p</i><sub><i>m</i>,1</sub> <i>p</i><sub><i>m</i>,2</sub> &hellip; <i>p</i><sub><i>m,n</i></sub><br>\n</p>\n</blockquote>\n\n<!-- begin en only -->\n<p>\nThe first line of a dataset has two integers <i>n</i> and <i>m</i>.\n<i>n</i> is the number of students (1 &le; <i>n</i> &le; 1000).\n<i>m</i> is the number of subjects (1 &le; <i>m</i> &le; 50).\nEach of the following <i>m</i> lines gives <i>n</i> students' scores\nof a subject.\n<i>p</i><sub><i>j,k</i></sub> is an integer representing\nthe <i>k</i>-th student's\nscore of the subject <i>j</i> (1 &le; <i>j</i> &le; <i>m</i>\nand 1 &le; <i>k</i> &le; <i>n</i>).\nIt satisfies 0 &le; <i>p</i><sub><i>j,k</i></sub> &le; 1000.\n</p>\n<!-- end en only -->\n\n\n<!-- begin en only -->\n<p>\nThe end of the input is indicated by a line containing two zeros.\nThe number of datasets does not exceed 100.\n</p>\n<!-- end en only -->\n\n<h3>Output</h3>\n\n\n<!-- begin en only -->\n<p>\nFor each dataset, output the total score of a student with the highest\ntotal score.\nThe total score <i>s</i><sub><i>k</i></sub>\nof the student <i>k</i> is defined by\n<i>s</i><sub><i>k</i></sub> =\n<i>p</i><sub>1,<i>k</i></sub> + &hellip; + <i>p</i><sub><i>m,k</i></sub>.\n</p>\n<!-- end en only -->\n\n<h3>Sample Input</h3>\n\n<pre>\n5 2\n10 20 30 40 50\n15 25 35 45 55\n6 3\n10 20 30 15 25 35\n21 34 11 52 20 18\n31 15 42 10 21 19\n4 2\n0 0 0 0\n0 0 0 0\n0 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n\n<pre>\n105\n83\n0\n</pre>\n\n\n", "p01150": "\n<H1><font color=\"#000\">Problem B:</font> Eight Princes</H1>\n\n<p>\nOnce upon a time in a kingdom far, far away, there lived eight princes. Sadly they were on very\nbad terms so they began to quarrel every time they met.\n</p>\n<p>\nOne day, the princes needed to seat at the same round table as a party was held. Since they\nwere always in bad mood, a quarrel would begin whenever:\n</p>\n\n<ul>\n<li>A prince took the seat next to another prince.</li>\n<li>A prince took the seat opposite to that of another prince (this happens only when the\n      table has an even number of seats), since they would give malignant looks each other.\n</li>\n</ul>\n<p>\nTherefore the seat each prince would seat was needed to be carefully determined in order to\navoid their quarrels. You are required to, given the number of the seats, count the number of\nways to have all eight princes seat in peace.\n</p>\n\n<H2>Input</H2>\n\n<p>\nEach line in the input contains single integer value N , which represents the number of seats on\nthe round table. A single zero terminates the input.\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each input N , output the number of possible ways to have all princes take their seat without\ncausing any quarrels. Mirrored or rotated placements must be counted as different.\n</p>\n<p>\nYou may assume that the output value does not exceed 10<sup>14</sup>.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n8\n16\n17\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0\n0\n685440\n</pre>\n\n\n", "p01155": "\n<H1><font color=\"#000\">Problem A:</font> Ruins</H1>\n\n<p>\nIn 1936, a dictator Hiedler who aimed at world domination had a deep obsession with <i>the Lost Ark</i>. A\nperson with this ark would gain mystic power according to legend. To break the ambition of the dictator,\nACM (the Alliance of Crusaders against Mazis) entrusted a secret task to an archeologist Indiana Johns.\nIndiana stepped into a vast and harsh desert to find the ark.\n</p>\n<p>\nIndiana finally found an underground treasure house at a ruin in the desert. The treasure house seems\nstoring the ark. However, the door to the treasure house has a special lock, and it is not easy to open\nthe door.\n</p>\n<p>\nTo open the door, he should solve a problem raised by two positive integers <i>a</i> and <i>b</i> inscribed on the door.\nThe problem requires him to find the minimum sum of squares of differences for all pairs of two integers\nadjacent in a sorted sequence that contains four positive integers <i>a</i><sub>1</sub>, <i>a</i><sub>2</sub> , <i>b</i><sub>1</sub> and <i>b</i><sub>2</sub> such that <i>a</i> = <i>a</i><sub>1</sub><i>a</i><sub>2</sub>\nand <i>b</i> = <i>b</i><sub>1</sub><i>b</i><sub>2</sub>. Note that these four integers does not need to be different. For instance, suppose 33 and\n40 are inscribed on the door, he would have a sequence 3, 5, 8, 11 as 33 and 40 can be decomposed into\n3 &times; 11 and 5 &times 8 respectively. This sequence gives the sum (5 - 3)<sup>2</sup> + (8 - 5)<sup>2</sup> + (11 - 8)<sup>2</sup> = 22, which is\nthe smallest sum among all possible sorted sequences. This example is included as the first data set in\nthe sample input.\n</p>\n<p>\nOnce Indiana fails to give the correct solution, he will suffer a calamity by a curse. On the other hand,\nhe needs to solve the problem as soon as possible, since many pawns under Hiedler are also searching\nfor the ark, and they might find the same treasure house. He will be immediately killed if this situation\nhappens. So he decided to solve the problem by your computer program.\n</p>\n<p>\nYour task is to write a program to solve the problem presented above.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a series of data sets. Each data set is given by a line that contains two positive\nintegers not greater than 10,000.\n</p>\n<p>\nThe end of the input is represented by a pair of zeros, which should not be processed.\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each data set, print a single integer that represents the minimum square sum in a line. No extra\nspace or text should appear.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n33 40\n57 144\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n22\n94\n</pre>\n", "p01158": "\n<H1><font color=\"#000\">Problem D:</font> Rock Man</H1>\n\n<p>\nYou were the master craftsman in the stone age, and you devoted your life to carving many varieties of\ntools out of natural stones. Your works have ever been displayed respectfully in many museums, even in\n2006 A.D. However, most people visiting the museums do not spend so much time to look at your works.\nSeeing the situation from the Heaven, you brought back memories of those days you had frantically lived.\n</p>\n<p>\nOne day in your busiest days, you got a number of orders for making tools. Each order requested one\ntool which was different from the other orders. It often took some days to fill one order without special\ntools. But you could use tools which you had already made completely, in order to carve new tools more\nquickly. For each tool in the list of the orders, there was exactly one tool which could support carving it.\n</p>\n<p>\nIn those days, your schedule to fill the orders was not so efficient. You are now thinking of making the\nmost efficient schedule, i.e. the schedule for all orders being filled in the shortest days, using the program\nyou are going to write.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a series of test cases. Each case begins with a line containing a single integer <i>N</i>\nwhich represents the number of ordered tools.\n</p>\n<p>\nThen <i>N</i> lines follow, each specifying an order by four elements separated by one or more space: <i>name</i>,\n<i>day</i><sub>1</sub>, <i>sup</i> and <i>day</i><sub>2</sub>. <i>name</i> is the name of the tool in the corresponding order. <i>day</i><sub>1</sub> is the number of\nrequired days to make the tool without any support tool. <i>sup</i> is the name of the tool that can support\ncarving the target tool. <i>day</i><sub>2</sub> is the number of required days make the tool with the corresponding support\ntool.\n</p>\n<p>\nThe input terminates with the case where <i>N</i> = 0. You should not process this case.\n</p>\n<p>\nYou can assume that the input follows the constraints below:\n</p>\n<ul>\n   <li> <i>N</i> &le; 1000;</li>\n   <li> <i>name</i> consists of no longer than 32 non-space characters, and is unique in each case;</li>\n   <li> <i>sup</i> is one of all <i>names</i> given in the same case; and</li>\n   <li> 0 &lt; <i>day</i><sub>2</sub> &lt; <i>day</i><sub>1</sub> &lt; 20000.</li>\n</ul>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, output a single line containing an integer which represents the minimum number of\ndays required to fill all <i>N</i> orders.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3\ngu 20 pa 10\nci 20 gu 10\npa 20 ci 10\n2\ntool 20 tool 10\nproduct 1000 tool 10\n8\nfishhook  21 disk     3\nmill      14 axe      7\nboomerang 56 sundial 28\nflint     35 fishhook 5\naxe       35 flint   14\ndisk      42 disk     2\nsundial   14 disk     7\nhammer    28 mill     7\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n40\n30\n113\n</pre>\n\n\n", "p01163": "\n<H1><font color=\"#000\">Problem A:</font> Space Coconut Crab II</H1>\n\n<p>\nA space hunter, Ken Marineblue traveled the universe, looking for the space coconut crab. The\nspace coconut crab was a crustacean known to be the largest in the universe. It was said that\nthe space coconut crab had a body of more than 400 meters long and a leg span of no shorter\nthan 1000 meters long. Although there were numerous reports by people who saw the space\ncoconut crab, nobody have yet succeeded in capturing it.\n</p>\n<p>\nAfter years of his intensive research, Ken discovered an interesting habit of the space coconut\ncrab. Surprisingly, the space coconut crab went back and forth between the space and the\nhyperspace by phase drive, which was the latest warp technology. As we, human beings, was\nnot able to move to the hyperspace, he had to work out an elaborate plan to capture them.\nFortunately, he found that the coconut crab took a long time to move between the hyperspace\nand the space because it had to keep still in order to charge a sufficient amount of energy for\nphase drive. He thought that he could capture them immediately after the warp-out, as they\nmoved so slowly in the space.\n</p>\n<p>\nHe decided to predict from the amount of the charged energy the coordinates in the space\nwhere the space coconut crab would appear, as he could only observe the amount of the charged\nenergy by measuring the time spent for charging in the hyperspace. His recent spaceship,\nWeapon Breaker, was installed with an artificial intelligence system, CANEL. She analyzed the\naccumulated data and found another surprising fact; the space coconut crab always warped out\nnear to the center of a triangle that satisfied the following conditions:\n</p>\n\n<ul>\n<li>each vertex of the triangle was one of the planets in the universe;</li>\n<li>the length of every side of the triangle was a prime number; and</li>\n<li>the total length of the three sides of the triangle was equal to <i>T</i>, the time duration the\n  space coconut crab had spent in charging energy in the hyperspace before moving to the\n  space.</li>\n</ul>\n\n<p>\nCANEL also devised the method to determine the three planets comprising the triangle from\nthe amount of energy that the space coconut crab charged and the lengths of the triangle sides.\nHowever, the number of the candidate triangles might be more than one.\n</p>\n<p>\nKen decided to begin with calculating how many different triangles were possible, analyzing\nthe data he had obtained in the past research. Your job is to calculate the number of different\ntriangles which satisfies the conditions mentioned above, for each given <i>T</i>.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset comes with a line that contains a single\npositive integer <i>T</i> (1 &le; <i>T</i> &le; 30000).\n</p>\n<p>\nThe end of input is indicated by a line that contains a zero. This should not be processed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the number of different possible triangles in a line. Two triangles are\ndifferent if and only if they are not congruent.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n10\n12\n15\n777\n4999\n5000\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0\n1\n2\n110\n2780\n0\n</pre>\n", "p01165": "\n<H1><font color=\"#000\">Problem C:</font> Disarmament of the Units</H1>\n\n<p>\nThis is a story in a country far away. In this country, two armed groups, ACM and ICPC, have\nfought in the civil war for many years. However, today October 21, reconciliation was approved\nbetween them; they have marked a turning point in their histories.\n</p>\n<p>\nIn this country, there are a number of roads either horizontal or vertical, and a town is built on\nevery endpoint and every intersection of those roads (although only one town is built at each\nplace). Some towns have units of either ACM or ICPC. These units have become unneeded\nby the reconciliation. So, we should make them disarm in a verifiable way simultaneously. All\ndisarmament must be carried out at the towns designated for each group, and only one unit can\nbe disarmed at each town. Therefore, we need to move the units.\n</p>\n<p>\nThe command of this mission is entrusted to you. You can have only one unit moved by a\nsingle order, where the unit must move to another town directly connected by a single road.\nYou cannot make the next order to any unit until movement of the unit is completed. The unit\ncannot pass nor stay at any town another unit stays at. In addition, even though reconciliation\nwas approved, members of those units are still irritable enough to start battles. For these\nreasons, two units belonging to different groups may not stay at towns on the same road. You\nfurther have to order to the two groups alternatively, because ordering only to one group may\ncause their dissatisfaction. In spite of this restriction, you can order to either group first.\n</p>\n<p>\nYour job is to write a program to find the minimum number of orders required to complete the\nmission of disarmament.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<pre>\n<i>n m<sub>A</sub> m<sub>I</sub></i>\n<i>rx</i><sub>1,1</sub> <i>ry</i><sub>1,1</sub> <i>rx</i><sub>1,2</sub> <i>ry</i><sub>1,2</sub>\n...\n<i>rx</i><sub><i>n</i>,1</sub> <i>ry</i><sub><i>n</i>,1</sub> <i>rx</i><sub><i>n</i>,2</sub> <i>ry</i><sub><i>n</i>,2</sub>\n<i>sx</i><sub><i>A</i>,1</sub> <i>sy</i><sub><i>A</i>,1</sub>\n...\n<i>sx</i><sub><i>A</i>,<i>m<sub>A</sub></i></sub> <i>sy</i><sub><i>A</i>,<i>m<sub>A</sub></i></sub>\n<i>sx</i><sub><i>I</i>,1</sub> <i>sy</i><sub><i>I</i>,1</sub>\n...\n<i>sx</i><sub><i>I</i>,<i>m<sub>I</sub></i></sub> <i>sy</i><sub><i>I</i>,<i>m<sub>I</sub></i></sub>\n<i>tx</i><sub><i>A</i>,1</sub> <i>ty</i><sub><i>A</i>,1</sub>\n...\n<i>tx</i><sub><i>A</i>,<i>m<sub>A</sub></i></sub> <i>ty</i><sub><i>A</i>,<i>m<sub>A</sub></i></sub>\n<i>tx</i><sub><i>I</i>,1</sub> <i>ty</i><sub><i>I</i>,1</sub>\n...\n<i>tx</i><sub><i>I</i>,<i>m<sub>I</sub></i></sub> <i>ty</i><sub><i>I</i>,<i>m<sub>I</sub></i></sub>\n</pre>\n\n<p>\n<i>n</i> is the number of roads. <i>m<sub>A</sub></i> and <i>m<sub>I</sub></i> are the number of units in ACM and ICPC respectively\n(<i>m<sub>A</sub></i> &gt; 0, <i>m<sub>I</sub></i> &gt; 0, <i>m<sub>A</sub></i> + <i>m<sub>B</sub></i> &lt; 8). (<i>rx</i><sub><i>i</i>,1</sub>, <i>ry</i><sub><i>i</i>,1</sub> ) and (<i>rx</i><sub><i>i</i>,2</sub>, <i>ry</i><sub><i>i</i>,2</sub> ) indicate the two endpoints of the\n<i>i</i>-th road, which is always parallel to either <i>x</i>-axis or <i>y</i>-axis. A series of (<i>sx</i><sub><i>A</i>,<i>i</i></sub>, <i>sy</i><sub><i>A</i>,<i>i</i></sub> ) indicates\nthe coordinates of the towns where the ACM units initially stay, and a series of (<i>sx</i><sub><i>I</i>,<i>i</i></sub>, <i>sy</i><sub><i>I</i>,<i>i</i></sub> )\nindicates where the ICPC units initially stay. A series of (<i>tx</i><sub><i>A</i>,<i>i</i></sub>, <i>ty</i><sub><i>A</i>,<i>i</i></sub> ) indicates the coordinates\nof the towns where the ACM units can be disarmed, and a series of (<i>tx</i><sub><i>I</i>,<i>i</i></sub> , <i>ty</i><sub><i>I</i>,<i>i</i></sub> ) indicates where\nthe ICPC units can be disarmed.\n</p>\n<p>\nYou may assume the following:\n</p>\n\n<ul>\n<li> the number of towns, that is, the total number of coordinates where endpoints and/or\n  intersections of the roads exist does not exceed 18;</li>\n<li> no two horizontal roads are connected nor ovarlapped; no two vertical roads, either;</li>\n<li> all the towns are connected by roads; and</li>\n<li> no pair of ACM and ICPC units initially stay in the towns on the same road.</li>\n</ul>\n\n<p>\nThe input is terminated by a line with triple zeros, which should not be processed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the minimum required number of orders in a line. It is guaranteed that\nthere is at least one way to complete the mission.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5 1 1\n0 0 2 0\n1 1 2 1\n1 2 3 2\n1 0 1 2\n2 0 2 2\n0 0\n3 2\n2 1\n1 2\n2 1 1\n1 0 1 2\n0 1 2 1\n1 0\n0 1\n1 0\n2 1\n2 1 1\n1 0 1 2\n0 1 2 1\n1 0\n0 1\n1 2\n2 1\n4 1 1\n0 0 2 0\n1 1 3 1\n1 0 1 1\n2 0 2 1\n0 0\n3 1\n1 0\n2 1\n5 1 1\n0 0 2 0\n1 1 2 1\n1 2 3 2\n1 0 1 2\n2 0 2 2\n0 0\n3 2\n3 2\n0 0\n8 3 3\n1 1 3 1\n0 2 4 2\n1 3 5 3\n2 4 4 4\n1 1 1 3\n2 0 2 4\n3 1 3 5\n4 2 4 4\n0 2\n1 1\n2 0\n3 5\n4 4\n5 3\n3 5\n4 4\n5 3\n0 2\n1 1\n2 0\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3\n1\n2\n2\n7\n18\n</pre>\n\n\n", "p01174": "\n<H1><font color=\"#000\">Problem D:</font> Rotation Estimation</H1>\n\n<p>\nMr. Nod is an astrologist and has defined a new constellation. He took two photos of the\nconstellation to foretell a future of his friend. The constellation consists of <i>n</i> stars. The shape\nof the constellation in these photos are the same, but the angle of them are different because\nthese photos were taken on a different day. He foretells a future by the difference of the angle\nof them.\n</p>\n<p>\nYour job is to write a program to calculate the difference of the angle of two constellation.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. Each dataset is given in the following format:\n</p>\n\n<pre>\n<i>n</i>\n<i>x</i><sub>1,1</sub> <i>y</i><sub>1,1</sub>\n...\n<i>x</i><sub>1,<i>n</i></sub> <i>y</i><sub>1,<i>n</i></sub>\n<i>x</i><sub>2,1</sub> <i>y</i><sub>2,1</sub>\n...\n<i>x</i><sub>2,<i>n</i></sub> <i>y</i><sub>2,<i>n</i></sub>\n</pre>\n\n\n\n<p>\nThe first line of each dataset contains a positive integers <i>n</i> (<i>n</i> &le; 1,000). The next <i>n</i> lines contain\ntwo real numbers <i>x</i><sub>1,<i>i</i></sub> and <i>y</i><sub>1,<i>i</i></sub> (|<i>x</i><sub>1,<i>i</i></sub>|, |<i>y</i><sub>1,<i>i</i></sub>| &le; 100), where (<i>x</i><sub>1,<i>i</i></sub> , <i>y</i><sub>1,<i>i</i></sub>) denotes the coordinates of\nthe <i>i</i>-th star of the constellation in the first photo. The next <i>n</i> lines contain two real numbers\n<i>x</i><sub>2,<i>i</i></sub> and <i>y</i><sub>2,<i>i</i></sub> (|<i>x</i><sub>2,<i>i</i></sub>|, |<i>y</i><sub>2,<i>i</i></sub>| &le; 100), where (<i>x</i><sub>2,<i>i</i></sub> , <i>y</i><sub>2,<i>i</i></sub> ) denotes the coordinates of the <i>i</i>-th star of the\nconstellation in the second photo.\n</p>\n<p>\nNote that the ordering of the stars does <i>not</i> matter for the sameness. It is guaranteed that\ndistance between every pair of stars in each photo is larger than 10<sup>-5</sup>.\n</p>\n<p>\nThe input is terminated in case of <i>n</i> = 0. This is not part of any datasets and thus should not\nbe processed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, you should print a non-negative real number which is the difference of the\nangle of the constellation in the first photo and in the second photo. The difference should be in radian, and should not be negative. If there are two or more solutions, you should print\nthe smallest one. The difference may be printed with any number of digits after decimal point,\nprovided the absolute error does not exceed 10<sup>-7</sup>. No extra space or character is allowed.\n\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3\n0.0 0.0\n1.0 1.0\n0.0 1.0\n3.0 3.0\n2.0 2.0\n3.0 2.0\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3.14159265359\n</pre>\n", "p01197": "\n<H1><font color=\"#000\"></font>Rakunarok</H1>\n<!-- Problem F -->\n<p>\nYou are deeply disappointed with the real world, so you have decided to live the rest of your life in the world of\nMMORPG (Massively Multi-Player Online Role Playing Game). You are no more concerned about the time you\nspend in the game: all you need is <i>efficiency</i>.\n</p>\n<p>\nOne day, you have to move from one town to another. In this game, some pairs of towns are connected by roads\nwhere players can travel. Various monsters will raid players on roads. However, since you are a high-level player,\nthey are nothing but the source of experience points. Every road is bi-directional. A path is represented by a\nsequence of towns, where consecutive towns are connected by roads.\n</p>\n<p>\nYou are now planning to move to the destination town through the <i>most efficient</i> path. Here, the efficiency of a\npath is measured by the total experience points you will earn in the path divided by the time needed to travel the\npath.\n</p>\n<p>\nSince your object is moving, not training, you choose only a <i>straightforward</i> path. A path is said straightforward\nif, for any two consecutive towns in the path, the latter is closer to the destination than the former. The <i>distance</i>\nof two towns is measured by the shortest time needed to move from one town to another.\n</p>\n<p>\nWrite a program to find a path that gives the highest efficiency.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line contains a single integer <i>c</i> that indicates the number of cases.\n</p>\n<p>\nThe first line of each test case contains two integers <i>n</i> and <i>m</i> that represent the numbers of towns and roads\nrespectively. The next line contains two integers <i>s</i> and <i>t</i> that denote the starting and destination towns respectively.\nThen <i>m</i> lines follow. The <i>i</i>-th line contains four integers <i>u<sub>i</sub></i>, <i>v<sub>i</sub></i>, <i>e<sub>i</sub></i>, and <i>t<sub>i</sub></i>, where <i>u<sub>i</sub></i> and <i>v<sub>i</sub></i> are two towns connected\nby the <i>i</i>-th road, <i>e<sub>i</sub></i> is the experience points to be earned, and <i>t<sub>i</sub></i> is the time needed to pass the road.\n</p>\n<p>\nEach town is indicated by the town index number from 0 to (<i>n</i> - 1). The starting and destination towns never\ncoincide. <i>n</i>, <i>m</i>, <i>e<sub>i</sub></i>'s and <i>t<sub>i</sub></i>'s are positive and not greater than 1000.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each case output in a single line, the highest possible efficiency. Print the answer with four decimal digits.\nThe answer may not contain an error greater than 10<sup>-4</sup>.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n\n3 3\n0 2\n0 2 240 80\n0 1 130 60\n1 2 260 60\n\n3 3\n0 2\n0 2 180 60\n0 1 130 60\n1 2 260 60\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3.2500\n3.0000\n</pre>\n", "p01201": "\n<H1><font color=\"#000\"></font>Exact Arithmetic</H1>\n<!-- Problem H -->\n<p>\n                                                                 \nLet <i>X</i> be a set of all rational numbers and all numbers of form <i>q</i>&radic;<i>r</i>, where <i>q</i> is a non-zero rational number and <i>r</i>\nis an integer greater than 1. Here <i>r</i> must not have a quadratic number except for 1 as its divisor. Also, let <i>X</i><sup>*</sup> be a\nset of all numbers which can be expressed as a sum of one or more elements in <i>X</i>.\n</p>\n\n<p>\nA machine <i>Y</i> is a stack-based calculator which operates on the values in <i>X</i><sup>*</sup> and has the instructions shown in the table below.\n</p>\n\n<center>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"4\">\n\n<tr>\n<td><p>push <i>n</i></p></td>\n<td><p>Pushes an integer specified in the operand onto the stack.</p></td>\n</tr>\n\n<tr>\n<td><p>add</p></td>\n<td><p>Pops two values <i>x</i><sub>1</sub> and <i>x</i><sub>2</sub> from the top of the stack in this order, then pushes (<i>x</i><sub>2</sub> + <i>x</i><sub>1</sub>).</p></td>\n</tr>\n<tr>\n<td><p>sub</p></td>\n<td><p>Pops two values <i>x</i><sub>1</sub> and <i>x</i><sub>2</sub> from the top of the stack in this order, then pushes (<i>x</i><sub>2</sub> - <i>x</i><sub>1</sub> ).</p></td>\n</tr>\n<tr>\n<td><p>mul</p></td>\n<td><p>Pops two values <i>x</i><sub>1</sub> and <i>x</i><sub>2</sub> from the top of the stack in this order, then pushes (<i>x</i><sub>2</sub> &times <i>x</i><sub>1</sub> ).\n</p></td>\n</tr>\n<tr>\n<td><p>div</p></td>\n<td><p>Pops two values <i>x</i><sub>1</sub> and <i>x</i><sub>2</sub> from the top of the stack in this order, then pushes (<i>x</i><sub>2</sub> &divide; <i>x</i><sub>1</sub>).\n<i>x</i><sub>1</sub> must be a non-zero value in <i>X</i> (<i>not</i> <i>X</i><sup>*</sup>).\n</p></td>\n</tr>\n<tr>\n<td><p>sqrt</p></td>\n<td><p>Pops one value <i>x</i> from the stack and pushes the square root of <i>x</i>. <i>x</i> must be a non-negative rational number.\n</p></td>\n</tr>\n<tr>\n<td><p>disp</p></td>\n<td><p>Pops one value <i>x</i> from the stack, and outputs the string representation of the value <i>x</i> to the display. The representation rules are stated later.\n</p></td>\n</tr>\n<tr>\n<td><p>stop</p></td>\n<td><p>Terminates calculation. The stack must be empty when this instruction is called.\n</p></td>\n</tr>\n</table>\n<p>Table 1: Instruction Set for the Machine Y</p>\n</center>\n\n<p>\nA sufficient number of values must exist in the stack on execution of every instruction. In addition, due to the\nlimitation of the machine Y, no more values can be pushed when the stack already stores as many as 256 values.\nAlso, there exist several restrictions on values to be pushed onto the stack:\n</p>\n\n<ul>\n<li> For rational numbers, neither numerator nor denominator in the irreducible form may exceed 32,768 in its absolute value.</li>\n<li> For any element in <i>X</i> of the form <i>q</i>&radic;<i>r</i> = (<i>a</i>/<i>b</i>)&radic;<i>r</i>, |<i>a</i>&radic;<i>r</i>| &le; 32,768 and |<i>b</i>| &le; 32,768.</li>\n<li> For any element in <i>X</i><sup>*</sup>, each term in the sum must satisfy the above conditions.\n</ul>\n\n<p>\nThe rules for the string representations of the values (on the machine Y) are as follows:\n</p>\n\n<ul>\n<li> A rational number is represented as either an integer or an irreducible fraction with a denominator greater\n  than 1. A fraction is represented as \"&lt;<i>numerator</i>&gt;/&lt;<i>denominator</i>&gt;\". A sign symbol - precedes in case of a negative number.</li>\n<li> A number of the form <i>q</i>&radic;<i>r</i> is represented as \"&lt;<i>string representation of q</i>&gt;<sup>*</sup>sqrt(<i>r</i>)\" except for the case\n  with <i>q</i> = &plusmn;1, in which the number is represented as \"sqrt(<i>r</i>)\" (<i>q</i> = 1) or \"-sqrt(<i>r</i>)\" (<i>q</i> = -1).</li>\n<li> For the sum of two or more elements of <i>X</i>, string representations of all the (non-zero) elements are con-\n  nected using the binary operator +. In this case, all terms with the same rooted number are merged into a\n  single term, and the terms must be shown in the ascending order of its root component. For the purpose of\n  this rule, all rational numbers are regarded to accompany &radic;1.</li>\n<li> There is exactly one space character before and after each of the binary operator +. No space character appears at any other place.</li>\n</ul>\n\n<p>\nThe followings are a few examples of valid string representations:\n</p>\n\n<pre>\n0\n1\n-1/10\n2*sqrt(2) + 1/2*sqrt(3) + -1/2*sqrt(5)\n1/2 + sqrt(10) + -sqrt(30)\n</pre>\n\n<p>\nYour task is to write a program that simulates the machine Y.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of instructions. Each line contains a single instruction. You may assume that every\ninstruction is called in a legal way. The instruction stop appears only once, at the end of the entire input.\n\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the strings which the machine Y will display. Write each string in a line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\npush 1\npush 2\nsqrt\ndiv\npush 1\npush 3\nsqrt\ndiv\nadd\ndisp\npush 8\nsqrt\npush 3\npush 2\nsqrt\nmul\nadd\ndisp\nstop\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1/2*sqrt(2) + 1/3*sqrt(3)\n5*sqrt(2)\n</pre>\n", "p01238": "\n<H1><font color=\"#000\">Problem E:</font> Subdividing a Land</H1>\n\n<p>\nIndigo Real-estate Company is now planning to develop a new housing complex. The entire complex is a square,\nall of whose edges are equally <i>a</i> meters. The complex contains <i>n</i> subdivided blocks, each of which is a <i>b</i>-meter\nsquare. Here both <i>a</i> and <i>b</i> are positive integers.\n</p>\n<p>\nHowever the project is facing a big problem. In this country, a percentage limit applies to the subdivision of a\nland, under the pretext of environmental protection. When developing a complex, the total area of the subdivided\nblocks must not exceed 50% of the area of the complex; in other words, more than or equal to 50% of the newly\ndeveloped housing complex must be kept for green space. As a business, a green space exceeding 50% of the\ntotal area is a <i>dead space</i>. The primary concern of the project is to minimize it.\n</p>\n<p>\nOf course purchasing and developing a land costs in proportion to its area, so the company also wants to minimize\nthe land area to develop as the secondary concern. You, a member of the project, were assigned this task, but can\nno longer stand struggling against the problem with your pencil and paper. So you decided to write a program to\nfind the pair of minimum <i>a</i> and <i>b</i> among those which produce the minimum dead space for given <i>n</i>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple test cases. Each test case comes in a line, which contains an integer <i>n</i>. You may\nassume 1 &le; <i>n</i> &le; 10000.\n</p>\n<p>\nThe end of input is indicated by a line containing a single zero. This line is not a part of the input and should not\nbe processed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, output the case number starting from 1 and the pair of minimum <i>a</i> and <i>b</i> as in the sample\noutput.\n</p>\n<p>\nYou may assume both <i>a</i> and <i>b</i> fit into 64-bit signed integers.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n1\n2\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nCase 1: 3 2\nCase 2: 2 1\n</pre>\n", "p01240": "\n<H1><font color=\"#000\">Problem G:</font> Oil Company</H1>\n\n<p>\nIrving & Cohen Petroleum Corporation has decided to develop a new oil field in an area. A preliminary survey\nhas been done and they created a detailed grid map of the area which indicates the reserve of oil.\n</p>\n<p>\nThey are now planning to construct mining plants on several grid blocks according this map, but they decided\nnot to place any two plants on adjacent positions to avoid spreading of fire in case of blaze. Two blocks are\nconsidered to be adjacent when they have a common edge. You are one of the programmers working for the\ncompany and your task is to write a program which calculates the maximum amount of oil they can mine, given\nthe map of the reserve.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input specifies N, the number of test cases. Then <i>N</i> test cases follow, each of which looks\nlike the following:\n</p>\n<pre>\n       <i>W H</i>\n       <i>r</i><sub>1,1</sub> <i>r</i><sub>2,1</sub> . . . <i>r</i><sub><i>W</i>,1</sub>\n       ...\n       <i>r</i><sub>1,<i>H</i></sub> <i>r</i><sub>2,<i>H</i></sub> . . . <i>r</i><sub><i>W</i>,<i>H</i></sub>\n</pre>\n<p>\nThe first line of a test case contains two integers <i>W</i> and <i>H</i> (1 &le; <i>W</i>, <i>H</i> &le; 20). They specifies the dimension of\nthe area. The next <i>H</i> lines, each of which contains <i>W</i> integers, represent the map of the area. Each integer <i>r</i><sub><i>x</i>,<i>y</i></sub>\n(0 &le; <i>r</i><sub><i>x</i>,<i>y</i></sub> &lt; 10000) indicates the oil reserve at the grid block (<i>x</i>, <i>y</i>).\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each test case, output the case number (starting from 1) and the maximum possible amount of mining in a\nline. Refer to the sample output section about the format.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n2 2\n2 3\n3 5\n3 2\n4 1 1\n2 1 4\n\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nCase 1: 7\nCase 2: 8\n</pre>\n", "p01242": "\n<H1><font color=\"#000\">Problem I:</font> Revenge of Voronoi</H1>\n\n<p>\nA discrete Voronoi diagram is a derivation of a Voronoi diagram. It is represented as a set of pixels. Each of the\ngeneratrices lies on the center of some pixel. Each pixel belongs to the generatrix nearest from the center of the\npixel in the sense of Manhattan distance. The Manhattan distance <i>d</i> between two points (<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>) and (<i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>) is given by the following formula:\n</p>\n<center>\n<p>\n                  <i>d</i> = |<i>x</i><sub>1</sub> - <i>x</i><sub>2</sub>| + |<i>y</i><sub>1</sub> - <i>y</i><sub>2</sub>|\n</p>\n</center>\n<p>\nYour task is to find a set of generatrices which generates a given discrete Voronoi diagram. In the given diagram,\neach generatrix is given a unique lowercase letter as its identifier, and each pixel is represented by the identifier\nof the generatrix the pixel belongs to. If a pixel has multiple generatrices at the same distance from its center, it\nbelongs to the generatrix with the most preceding identifier among them (i.e. the smallest character code).\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple test cases.\n</p>\n<p>\nEach test case begins with a line containing two integers <i>W</i> (1 &le; <i>W</i> &le; 32) and <i>H</i> (1 &le; <i>H</i> &le; 32), which denote the\nwidth and height of the discrete Voronoi diagram.\n</p>\n<p>\nThe following <i>H</i> lines, each of which consists of <i>W</i> letters, give one discrete Voronoi diagram. Each letter\nrepresents one pixel.\n</p>\n<p>\nThe end of input is indicated by a line with two zeros. This is not a part of any test cases.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, print the case number and the coordinates of generatrices as shown in the sample output. Each\ngeneratrix line should consist of its identifier, <i>x</i>-coordinate, and <i>y</i>-coordinate. Generatrices should be printed in\nalphabetical order of the identifiers. Each coordinate is zero-based where (0, 0) indicates the center of the top-left\ncorner pixel of the diagram.\n</p>\n<p>\nYou may assume that every test case has at least one solution. If there are multiple solutions, any one is acceptable.\n</p>\n<p>\nPrint a blank line after every test case including the last one.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4 3\nooxx\nooxx\nooxx\n4 1\nnull\n4 4\naabb\naabb\nccdd\nccdd\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nCase 1:\no 0 0\nx 2 0\nCase 2:\nl 2 0\nn 0 0\nu 1 0\nCase 3:\na 0 0\nb 2 0\nc 0 2\nd 2 2\n</pre>\n", "p01243": "\n<H1><font color=\"#000\">Problem J:</font> Castle Wall</H1>\n\n<p>\nA new lord assumed the position by the death of the previous lord in a Far Eastern province.\n</p>\n<p>\nThe new greedy lord hates concave polygons, because he believes they need much wasted area to be drawn on\npaper. He always wants to modify them to convex ones.\n</p>\n<p>\nHis castle is currently surrounded by a wall forming a concave polygon, when seen from the above. Of course\nhe hates it. He believes more area could be obtained with a wall of a convex polygon. Thus he has ordered his\nvassals to have new walls built so they form a convex polygon.\n</p>\n<p>\nUnfortunately, there is a limit in the budget. So it might be infeasible to have the new walls built completely. The\nvassals has found out that only up to r meters of walls in total can be built within the budget. In addition, the new\nwalls must be built in such a way they connect the polygonal vertices of the present castle wall. It is impossible\nto build both of intersecting walls.\n</p>\n<p>\nAfter long persuasion of the vassals, the new lord has reluctantly accepted that the new walls might not be built\ncompletely. However, the vassals still want to maximize the area enclosed with the present and new castle walls,\nso they can satisfy the lord as much as possible.\n</p>\n<p>\nYour job is to write a program to calculate, for a given integer <i>r</i>, the maximum possible area of the castle with\nthe new walls.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input file contains several test cases.\n</p>\n<p>\nEach case begins with a line containing two positive integers <i>n</i> and <i>r</i>. <i>n</i> is the number of vertices of the concave\npolygon that describes the present castle wall, satisfying 5 &le; <i>n</i> &le; 64. <i>r</i> is the maximum total length of new castle\nwalls feasible within the budget, satisfying 0 &le; <i>r</i> &le; 400.\n</p>\n<p>\nThe subsequent <i>n</i> lines are the <i>x</i>- and <i>y</i>-coordinates of the n vertices. The line segments (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>) - (<i>x</i><sub><i>i</i>+1</sub>, <i>y</i><sub><i>i</i>+1</sub>)\n(1 &le; <i>i</i> &le; <i>n</i> - 1) and (<i>x<sub>n</sub></i>, <i>y<sub>n</sub></i>) - (<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>) form the present castle wall of the concave polygon. Those coordinates are\ngiven in meters and in the counterclockwise order of the vertices.\n</p>\n<p>\nAll coordinate values are integers between 0 and 100, inclusive. You can assume that the concave polygon is\nsimple, that is, the present castle wall never crosses or touches itself.\n</p>\n<p>\nThe last test case is followed by a line containing two zeros.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case in the input, print the case number (beginning with 1) and the maximum possible area enclosed\nwith the present and new castle walls. The area should be printed with exactly one fractional digit.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5 4\n0 0\n4 0\n4 4\n2 2\n0 4\n8 80\n45 41\n70 31\n86 61\n72 64\n80 79\n40 80\n8 94\n28 22\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\ncase 1: 16.0\ncase 2: 3375.0\n</pre>\n", "p01255": "\n<H1><font color=\"#000\">Problem F:</font> Webby Subway</H1>\n\n<p>\nYou are an officer of the Department of Land and Transport in Oykot City. The department has a plan to\nbuild a subway network in the city central of Oykot.\n</p>\n<p>\nIn the plan, <i>n</i> subway lines are built, and each line has two or more stations. Because of technical\nproblems, a rail track between two stations should be straight and should not have any slope. To make\nthings worse, no rail track can contact with another rail track, even on a station. In other words, two\nsubways on the same floor cannot have any intersection.\n</p>\n<p>\nYour job is to calculate the least number of required floors in their plan.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset is formatted as follows:\n</p>\n<pre>\n      <i>N</i>\n      <i>Line</i><sub>1</sub>\n      <i>Line</i><sub>2</sub>\n      ...\n      <i>Line</i><sub><i>N</i></sub>\n</pre>\n<p>\nHere, <i>N</i> is a positive integer that indicates the number of subway lines to be built in the plan (<i>N</i> &le; 22),\nand <i>Line<sub>i</sub></i> is the description of the <i>i</i>-th subway line with the following format:\n</p>\n<pre>\n      <i>S</i>\n      <i>X</i><sub>1</sub> <i>Y</i><sub>1</sub>\n      <i>X</i><sub>2</sub> <i>Y</i><sub>2</sub>\n      ...\n      <i>X</i><sub><i>S</i></sub> <i>Y</i><sub><i>S</i></sub>\n</pre>\n<p>\n<i>S</i> is a positive integer that indicates the number of stations in the line (<i>S</i> &le; 30), and (<i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i>) indicates\nthe coordinates of the <i>i</i>-th station of the line (-10000 &le; <i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i> &le; 10000). The rail tracks are going to\nbe built between two consecutive stations in the description. No stations of the same line have the same\ncoordinates.\n</p>\n<p>\nThe input is terminated by a dataset of <i>N</i> = 0, and it should not be processed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, you should output the least number of required floors.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n2\n0 0\n10 0\n2\n0 10\n10 10\n2\n2\n0 0\n10 10\n2\n0 10\n10 0\n3\n2\n0 0\n10 10\n2\n0 10\n10 0\n2\n1 0\n1 10\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n2\n3\n</pre>\n", "p01258": "\n<H1><font color=\"#000\">Problem I:</font> Memory Match</H1>\n\n<p>\nMemory match is a single-player game which employs a set of 2<i>M</i> cards. Each card is labeled with a\nnumber between 1 and <i>M</i> on its face. For each number <i>i</i> (1 &le; <i>i</i> &le; <i>M</i>), there are exactly two cards which\nhave the number <i>i</i>. At the start of the game, all cards are shuffled and laid face down on a table. In each\nturn you choose two cards and turn them face up. If two numbers on the cards are the same, they are\nremoved from the table. Otherwise, they are turned face down again (this is called a mismatch). When\nyou choose cards, you do not have to turn two cards simultaneously; you can choose the second card\nafter you see the number of the first card. The objective of the game is to remove all the cards with as\nfew mismatches as possible.\n</p>\n<p>\nRoyce A. Mitchell has extraordinary memory, so he can remember all the positions and the numbers of\nthe cards that he has already turned face up. Your task is to write a program that calculates the expected\nnumber of mismatches, on average, when he plays the game optimally.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets.\n</p>\n<p>\nEach dataset consists of one even number <i>N</i> (2 &le; <i>N</i> &le; 1000) which denotes the number of cards in the\nset.\n</p>\n<p>\nThe end of input is indicated by a line that contains a single zero. This is not part of the input and you\nmay not treat this line as a dataset.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the expected number of mismatches. Each output value may have an arbitrary\nnumber of fractional digits, provided that the error is within 10<sup>-6</sup>.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n4\n6\n8\n10\n52\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0.0000000000\n0.6666666667\n1.3333333333\n1.9238095238\n2.5523809524\n15.4435236099\n</pre>\n", "p01262": "\n<H1><font color=\"#000\">Problem C:</font> Adaptive Time Slicing Quantization</H1>\n\n<p>\nNathan O. Davis is a student at the department of integrated systems. Today he learned digital quanti-\nzation in a class. It is a process that approximates analog data (e.g. electrical pressure) by a finite set of\ndiscrete values or integers.\n</p>\n<p>\nHe had an assignment to write a program that quantizes the sequence of real numbers each representing\nthe voltage measured at a time step by the voltmeter. Since it was not fun for him to implement normal\nquantizer, he invented a new quantization method named Adaptive Time Slicing Quantization. This\nquantization is done by the following steps:\n</p>\n<ol>\n   <li> Divide the given sequence of real numbers into arbitrary <i>M</i> consecutive subsequences called\n       frames. They do not have to be of the same size, but each frame must contain at least two ele-\n       ments. The later steps are performed independently for each frame.</li>\n   <li> Find the maximum value <i>V</i><sub>max</sub> and the minimum value <i>V</i><sub>min</sub> of the frame.</li>\n   <li> Define the set of quantized values. The set contains 2<sup><i>L</i></sup> equally spaced values of the interval\n       [<i>V</i><sub>min</sub>, <i>V</i><sub>max</sub>] including the both boundaries. Here, <i>L</i> is a given parameter called a <i>quantization\n       level</i>. In other words, the <i>i</i>-th quantized value <i>q<sub>i</sub></i> (1 &le; <i>i</i> &le; 2<sup><i>L</i></sup>) is given by:\n<br>\n<center>\n<p>                                                                        .\n          <i>q<sub>i</sub></i> = <i>V</i><sub>min</sub> + (<i>i</i> - 1){(<i>V</i><sub>max</sub> - <i>V</i><sub>min</sub>)/(2<sup><i>L</i></sup> - 1)}\n</p>\n</center>\n</li>\n   <li> Round the value of each element of the frame to the closest quantized value.</li>\n</ol>\n\n<p>\nThe key of this method is that we can obtain a better result as choosing more appropriate set of frames in\nthe step 1. The quality of a quantization is measured by the sum of the squares of the quantization errors\nover all elements of the sequence: the less is the better. The quantization error of each element is the\nabsolute difference between the original and quantized values.\n</p>\n<p>\nUnfortunately, Nathan caught a bad cold before he started writing the program and he is still down in his\nbed. So he needs you help. Your task is to implement Adaptive Time Slicing Quantization instead. In\nyour program, the quantization should be performed with the best quality, that is, in such a way the sum\nof square quantization errors is minimized.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset contains two lines. The first line contains three\nintegers <i>N</i> (2 &le; <i>N</i> &le; 256), <i>M</i> (1 &le; <i>M</i> &le; <i>N</i>/2), and <i>L</i> (1 &le; <i>L</i> &le; 8), which represent the number of\nelements in the sequence, the number of frames, and the quantization level. The second line contains <i>N</i>\nreal numbers ranging in [0, 1]. The input is terminated by the dataset with <i>N</i> = <i>M</i> = <i>L</i> = 0, which must not be processed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the minimum sum of square quantization errors in one line. The answer with an\nabsolute error of less than or equal to 10<sup>-6</sup> is considered to be correct.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5 2 1\n0.1 0.2 0.3 0.4 0.5\n6 2 2\n0.1 0.2 0.3 0.4 0.5 0.6\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0.01\n0.00\n</pre>\n", "p01266": "\n<H1><font color=\"#000\">Problem H:</font> Robot Communication</H1>\n\n<p>\nIn the year 21xx, human beings are proliferating across the galaxy. Since the end of the last century,\nthousands of pioneer spaceships have been launched in order to discover new habitation planets.\n</p>\n<p>\nThe Presitener is one of those spaceships, heading toward the Andromeda galaxy. After a long, long\ncruise in the hyperspace, the crew have finally found a very hopeful candidate planet. The next thing to\ndo is to investigate the planet whether it is really suitable for a new resident or not.\n</p>\n<p>\nFor that purpose, the ship is taking some unattended landers. The captain Juclean Dripac decided to\ndrop them to the planet and collect data about it. But unfortunately, these robots are a bit old and not so\nclever that the operator has to program what to do on the planet beforehand of the landing. Many staffs\nincluding you are called for making this important plan.\n</p>\n<p>\nThe most complicated phase in the mission is to gather and integrate all the data collected independently\nby many robots. The robots need to establish all-to-all communication channels to exchange the data,\nonce during the mission. That is, all the robots activate their communication channels all together at the\npredetermined time, and they exchange the data with each other at that time.\n</p>\n<p>\nThey use wireless channels to communicate with each other, so the distance between robots does not limit\nthe connectivity. But the farther two robots goes, the more power they have to use for communication.\nDue to the limitation of the battery capacity, you want to save the transmission power as much as possible.\n</p>\n<p>\nFor a good thing, communication units of the robots also have the routing functionality, each robot only\nhas to talk with the nearest robot. Suppose a graph whose vertices represent robots and edges represent\ncommunication channels established between them. If the graph is connected, all-to-all communication\ncan be established.\n</p>\n<p>\nYour task is to write the program to calculate the minimum total transmission power required for all-\nto-all communication among the robots. Each robot moves linearly on the planet surface. Each pair of\nrobots which communicate each other must occupy one channel, but you can assume enough number of\nchannels are available. The transmission power required for two robots is proportional to the distance\nbetween them, so the cost here is exactly the sum of the distances between each pair of robots which\nestablish a communication channel.\n</p>\n<p>\nYou may also regard the planet surface as a two-dimensional surface, as it is huge enough. The time\nrequired for communicating data among robots are also negligible.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input contains multiple datasets. Each dataset has the format below.\n</p>\n<pre>\n       <i>N T</i>\n       <i>x</i><sub>1</sub> <i>y</i><sub>1</sub> <i>vx</i><sub>1</sub> <i>vy</i><sub>1</sub>\n       ...\n       <i>x</i><sub><i>N</i></sub> <i>y</i><sub><i>N</i></sub> <i>vx</i><sub><i>N</i></sub> <i>vy</i><sub><i>N</i></sub>\n</pre>\n<p>\nThe first line of each dataset contains two integers; <i>N</i> is the number of robots used for gathering data\n(2 &le; <i>N</i> &le; 16), and <i>T</i> is the time limit of the mission (1 &le; <i>T</i> &lt; 1000).\n</p>\n<p>\nEach of the following <i>N</i> lines describes the motion of a robot. (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>) and (<i>vx<sub>i</sub></i>, <i>vy<sub>i</sub></i> ) are the initial landing\nposition and the velocity of the <i>i</i>-th robot, respectively (|<i>x<sub>i</sub></i>|, |<i>y<sub>i</sub></i>| &lt; 100000, |<i>vx<sub>i</sub></i>|, |<i>vy<sub>i</sub></i>| &lt; 1000).\n</p>\n<p>\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and\nshould not be processed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output in a line the minimum communication cost required for all-to-all communication.\nYour program may output an arbitrary number of digits after the decimal point. The absolute error should\nbe less than or equal to 0.001.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4 2\n2 0 0 1\n0 4 1 0\n4 6 0 -1\n6 2 -1 0\n4 6\n2 0 0 1\n0 4 1 0\n4 6 0 -1\n6 2 -1 0\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n6.00000000\n4.24264069\n</pre>\n", "p01273": "\n<H1><font color=\"#000\">Problem A:</font> Infected Computer</H1>\n\n<p>\nAdam Ivan is working as a system administrator at Soy Group, Inc. He is now facing at a big trouble:\na number of computers under his management have been infected by a computer virus. Unfortunately,\nanti-virus system in his company failed to detect this virus because it was very new.\n</p>\n\n<p>\nAdam has identified the first computer infected by the virus and collected the records of all data packets\nsent within his network. He is now trying to identify which computers have been infected. A computer\nis infected when receiving any data packet from any infected computer. The computer is not infected, on\nthe other hand, just by sending data packets to infected computers.\n</p>\n<p>\nIt seems almost impossible for him to list all infected computers by hand, because the size of the packet\nrecords is fairly large. So he asked you for help: write a program that can identify infected computers.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\n<i>N M</i><br>\n<i>t</i><sub>1</sub> <i>s</i><sub>1</sub> <i>d</i><sub>1</sub><br>\n<i>t</i><sub>2</sub> <i>s</i><sub>2</sub> <i>d</i><sub>2</sub><br>\n...<br>\n<i>t<sub>M</sub> s<sub>M</sub> d<sub>M</sub></i><br>\n</p>\n\n<p>\n<i>N</i> is the number of computers; <i>M</i> is the number of data packets; <i>t<sub>i</sub></i> (1 &le; <i>i</i> &le; <i>M</i>) is the time when the <i>i</i>-th\ndata packet is sent; <i>s<sub>i</sub></i> and <i>d<sub>i</sub></i> (1 &le; <i>i</i> &le; <i>M</i>) are the source and destination computers of the <i>i</i>-th data packet\nrespectively. The first infected computer is indicated by the number 1; the other computers are indicated\nby unique numbers between 2 and <i>N</i>.\n</p>\n<p>\nThe input meets the following constraints: 0 &lt; <i>N</i> &le; 20000, 0 &le; <i>M</i> &le; 20000, and 0 &le; <i>t<sub>i</sub></i> &le; 10<sup>9</sup> for\n1 &le; <i>i</i> &le; <i>N</i>; all <i>t<sub>i</sub></i> 's are different; and the source and destination of each packet are always different.\n</p>\n\n<p>\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the number of computers infected by the computer virus.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 2\n1 1 2\n2 2 3\n3 2\n2 3 2\n1 2 1\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3\n1\n</pre>\n", "p01274": "\n<H1><font color=\"#000\">Problem B:</font> Magic Slayer</H1>\n\n<p>\nYou are in a fantasy monster-ridden world. You are a slayer fighting against the monsters with magic\nspells.\n</p>\n\n<p>\nThe monsters have <i>hit points</i> for each, which represent their vitality. You can decrease their hit points\nby your magic spells: each spell gives certain points of <i>damage</i>, by which monsters lose their hit points,\nto either one monster or all monsters in front of you (depending on the spell). Monsters are defeated\nwhen their hit points decrease to less than or equal to zero. On the other hand, each spell may consume\na certain amount of your <i>magic power</i>. Since your magic power is limited, you want to defeat monsters\nusing the power as little as possible.\n</p>\n<p>\nWrite a program for this purpose.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\n<i>N</i><br>\n<i>HP</i><sub>1</sub><br>\n<i>HP</i><sub>2</sub><br>\n...<br>\n<i>HP</i><sub><i>N</i></sub><br>\n<i>M</i><br>\n<i>Name</i><sub>1</sub> <i>MP</i><sub>1</sub> <i>Target</i><sub>1</sub> <i>Damage</i><sub>1</sub><br>\n<i>Name</i><sub>2</sub> <i>MP</i><sub>2</sub> <i>Target</i><sub>2</sub> <i>Damage</i><sub>2</sub><br>\n...<br>\n<i>Name</i><sub><i>M</i></sub> <i>MP</i><sub><i>M</i></sub> <i>Target</i><sub><i>M</i></sub> <i>Damage</i><sub><i>M</i></sub><br>\n</p>\n\n<p>\n<i>N</i> is the number of monsters in front of you (1 &le; <i>N</i> &le; 100); <i>HP<sub>i</sub></i> is the hit points of the <i>i</i>-th monster\n(1 &le; <i>HP<sub>i</sub></i> &le; 100000); <i>M</i> is the number of available magic spells (1 &le; <i>M</i> &le; 100); <i>Name<sub>j</sub></i> is the name\nof the <i>j</i>-th spell, consisting of up to 16 uppercase and lowercase letters; <i>MP<sub>j</sub></i> is the amount of magic\npower consumed by the <i>j</i>-th spell (0 &le; <i>MP<sub>j</sub></i> &le; 99); <i>Target<sub>j</sub></i> is either \"<span>Single</span>\" or \"<span>All</span>\", where these\nindicate the <i>j</i>-th magic gives damage just to a single monster or to all monsters respectively; <i>Damage<sub>j</sub></i> is\nthe amount of damage (per monster in case of \"<span>All</span>\") made by the <i>j</i>-th magic (0 &le; <i>Damage<sub>j</sub></i> &le; 999999).\n</p>\n<p>\nAll the numbers in the input are integers. There is at least one spell that gives non-zero damage to\nmonsters.\n</p>\n\n<p>\nThe last dataset is followed by a line containing one zero. This line is not a part of any dataset and should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, Print in a line the minimum amount of magic power consumed to defeat all the monsters in the input.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3\n8000 15000 30000\n3\nFlare 45 Single 8000\nMeteor 62 All 6000\nUltimate 80 All 9999\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n232\n</pre>\n", "p01277": "\n<H1><font color=\"#000\">Problem E:</font> Symmetry</H1>\n\n<p>\nOpen Binary and Object Group organizes a programming contest every year. Mr. Hex belongs to this\ngroup and joins the judge team of the contest. This year, he created a geometric problem with its solution\nfor the contest. The problem required a set of points forming a line-symmetric polygon for the input.\nPreparing the input for this problem was also his task. The input was expected to cover all edge cases, so\nhe spent much time and attention to make them satisfactory.\n</p>\n<p>\nHowever, since he worked with lots of care and for a long time, he got tired before he finished. So He\nmight have made mistakes - there might be polygons not meeting the condition. It was not reasonable to\nprepare the input again from scratch. The judge team thus decided to find all line-asymmetric polygons\nin his input and fix them as soon as possible. They asked a programmer, just you, to write a program to\nfind incorrect polygons.\n</p>\n<p>\nYou can assume the following:\n</p>\n<ul>\n    <li> Edges of the polygon must not cross or touch each other except for the end points of adjacent\n       edges.</li>\n    <li> It is acceptable for the polygon to have adjacent three vertexes on a line, but in such a case, there\n       must be the vertex symmetric to each of them.</li>\n</ul>\n\n\n<H2>Input</H2>\n\n<!--\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n-->\n<p>\nThe input consists of a set of points in the following format.\n</p>\n\n<p>\n<i>N</i><br>\n<i>x</i><sub>1</sub> <i>y</i><sub>1</sub><br>\n<i>x</i><sub>2</sub> <i>y</i><sub>2</sub><br>\n...<br>\n<i>x</i><sub><i>N</i></sub> <i>y</i><sub><i>N</i></sub><br>\n</p>\n\n\n<p>\nThe first line of the input contains an integer <i>N</i> (3 &le; <i>N</i> &le; 1000), which denotes the number of points.\nThe following <i>N</i> lines describe each point. The <i>i</i>-th line contains two integers <i>x</i><sub>1</sub>, <i>y</i><sub>1</sub> (-10000 &le; <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> &le; 10000), which denote the coordinates of the <i>i</i>-th point.\n</p>\n<p>\nNote that, although the points are the vertexes of a polygon, they are given in an artibrary order, not\nnecessarily clockwise or counterclockwise.\n</p>\n\n<!--\n<p>\nThe last dataset is followed by a line containing one zero. This line is not a part of any dataset and should not be processed.\n</p>\n-->\n\n\n<H2>Output</H2>\n\n<p>\nOutput \"<span>Yes</span>\" in a line if the points can form a line-symmetric polygon, otherwise output \"<span>No</span>\".\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n4\n0 1\n1 0\n0 0\n1 1\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\nYes\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4\n0 1\n1 -1\n0 0\n1 1\n</pre>\n\n<H2>Sample Output 2</H2>\n<pre>\nNo\n</pre>\n<br/>\n\n<H2>Sample Input 3</H2>\n<pre>\n9\n-1 1\n0 1\n1 1\n-1 0\n0 0\n1 0\n-1 -1\n0 -1\n1 -1\n</pre>\n\n<H2>Sample Output 3</H2>\n<pre>\nNo\n</pre>\n<br/>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n3\n-1 -1\n0 0\n1 1\n</pre>\n<H2>Sample Output 4</H2>\n<pre>\nNo\n</pre>\n<br/>\n\n<H2>Sample Input 5</H2>\n<pre>\n4\n0 2\n0 0\n-1 0\n1 0\n</pre>\n\n<H2>Sample Output 5</H2>\n<pre>\nYes\n</pre>", "p01278": "\n<H1><font color=\"#000\">Problem F:</font> Voronoi Island</H1>\n\n<p>\nSome of you know an old story of Voronoi Island. There were N liege lords and they are always involved\nin territorial disputes. The residents of the island were despaired of the disputes.\n</p>\n<p>\nOne day, a clever lord proposed to stop the disputes and divide the island fairly. His idea was to divide the\nisland such that any piece of area belongs to the load of the nearest castle. The method is called Voronoi\nDivision today.\n</p>\n<p>\nActually, there are many aspects of whether the method is fair. According to one historian, the clever\nlord suggested the method because he could gain broader area than other lords.\n</p>\n<p>\nYour task is to write a program to calculate the size of the area each lord can gain. You may assume that\nVoronoi Island has a convex shape.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\n<i>N M</i><br>\n<i>Ix</i><sub>1</sub> <i>Iy</i><sub>1</sub><br>\n<i>Ix</i><sub>2</sub> <i>Iy</i><sub>2</sub><br>\n...<br>\n<i>Ix</i><sub><i>N</i></sub> <i>Iy</i><sub><i>N</i></sub><br>\n<i>Cx</i><sub>1</sub> <i>Cy</i><sub>1</sub><br>\n<i>Cx</i><sub>2</sub> <i>Cy</i><sub>2</sub><br>\n...<br>\n<i>Cx</i><sub><i>M</i></sub> <i>Cy</i><sub><i>M</i></sub><br>\n</p>\n\n<p>\n<i>N</i> is the number of the vertices of Voronoi Island; <i>M</i> is the number of the liege lords; (<i>Ix<sub>i</sub></i>, <i>Iy<sub>i</sub></i>) denotes\nthe coordinate of the <i>i</i>-th vertex; (<i>Cx<sub>i</sub></i>, <i>Cy<sub>i</sub></i> ) denotes the coordinate of the castle of the i-the lord.\n</p>\n<p>\nThe input meets the following constraints: 3 &le; <i>N</i> &le; 10, 2 &le; <i>M</i> &le; 10, -100 &le; <i>Ix<sub>i</sub></i>, <i>Iy<sub>i</sub></i>, <i>Cx<sub>i</sub></i>, <i>Cy<sub>i</sub></i> &le; 100. The\nvertices are given counterclockwise. All the coordinates are integers.\n</p>\n\n\n<p>\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the area gained by each liege lord with an absolute error of at most 10<sup>-4</sup> . You may output any\nnumber of digits after the decimal point. The order of the output areas must match that of the lords in the\ninput.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 3\n0 0\n8 0\n0 8\n2 2\n4 2\n2 4\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n9.0\n11.5\n11.5\n</pre>\n\n", "p01279": "\n<H1><font color=\"#000\">Problem G:</font> Defend the Bases</H1>\n\n<p>\nA country Gizevom is being under a sneak and fierce attack by their foe. They have to deploy one or\nmore troops to every base immediately in order to defend their country. Otherwise their foe would take\nall the bases and declare \"All your base are belong to us.\"\n</p>\n<p>\nYou are asked to write a program that calculates the minimum time required for deployment, given the\npresent positions and marching speeds of troops and the positions of the bases.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\n<i>N M</i><br>\n<i>x</i><sub>1</sub> <i>y</i><sub>1</sub> <i>v</i><sub>1</sub><br>\n<i>x</i><sub>2</sub> <i>y</i><sub>2</sub> <i>v</i><sub>2</sub><br>\n...<br>\n<i>x</i><sub><i>N</i></sub> <i>y</i><sub><i>N</i></sub> <i>v</i><sub><i>N</i></sub><br>\n<i>x'</i><sub>1</sub> <i>y'</i><sub>1</sub><br>\n<i>x'</i><sub>2</sub> <i>y'</i><sub>2</sub><br>\n...<br>\n<i>x'</i><sub><i>M</i></sub> <i>y'</i><sub><i>M</i></sub><br>\n</p>\n\n<p>\n<i>N</i> is the number of troops (1 &le; <i>N</i> &le; 100); <i>M</i> is the number of bases (1 &le; <i>M</i> &le; 100); (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> ) denotes the present position of <i>i</i>-th troop; <i>v<sub>i</sub></i> is the speed of the <i>i</i>-th troop (1 &le; <i>v<sub>i</sub></i> &le; 100); (<i>x'<sub>j</sub></i>, <i>y'<sub>j</sub></i>) is the position of the <i>j</i>-th base.\n</p>\n<p>\nAll the coordinates are integers between 0 and 10000 inclusive.\n</p>\n\n<p>\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the minimum required time in a line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2 2\n10 20 1\n0 10 1\n0 10\n10 0\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n14.14213562\n</pre>\n\n", "p01281": "\n<H1><font color=\"#000\">Problem I:</font> Tatami</H1>\n\n<p>\nA tatami mat, a Japanese traditional floor cover, has a rectangular form with aspect ratio 1:2. When\nspreading tatami mats on a floor, it is prohibited to make a cross with the border of the tatami mats,\nbecause it is believed to bring bad luck.\n</p>\n<p>\nYour task is to write a program that reports how many possible ways to spread tatami mats of the same\nsize on a floor of given height and width.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset cosists of a line which contains two integers <i>H</i> and <i>W</i> in this order, separated with a single\nspace. <i>H</i> and <i>W</i> are the height and the width of the floor respectively. The length of the shorter edge of a\ntatami mat is regarded as a unit length.\n</p>\n<p>\nYou may assume 0 &lt; <i>H</i>, <i>W</i> &le; 20.\n</p>\n\n<p>\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the number of possible ways to spread tatami mats in one line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 4\n4 4\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n4\n2\n</pre>\n\n", "p01282": "\n<H1><font color=\"#000\">Problem J:</font> Revenge of the Round Table</H1>\n\n<p>\nTwo contries A and B have decided to make a meeting to get acquainted with each other. <i>n</i> ambassadors\nfrom A and B will attend the meeting in total.\n</p>\n\n<p>\nA round table is prepared for in the meeting. The ambassadors are getting seated at the round table, but\nthey have agreed that more than k ambassadors from the same country does not sit down at the round\ntable in a row for deeper exchange.\n</p>\n\n<p>\nYour task is to write a program that reports the number of possible arrangements when rotations are not\ncounted. Your program should report the number modulo <i>M</i> = 1000003.\n</p>\n<p>\nLet us provide an example. Suppose <i>n</i> = 4 and <i>k</i> = 2. When rotations are counted as different arrangements, the following six arrangements are possible.\n</p>\n<pre>\n       AABB\n       ABBA\n       BBAA\n       BAAB\n       ABAB\n       BABA\n</pre>\n<p>\nHowever, when rotations are regarded as same, the following two arrangements are possible.\n</p>\n<pre>\n       AABB\n       ABAB\n</pre>\n\n<p>\nTherefore the program should report 2.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset consists of two integers <i>n</i> (1 &le; <i>n</i> &le; 1000) and <i>k</i> (1 &le; k &le; 1000) in one line.\n</p>\n<p>\nIt does not always hold <i>k</i> &lt; <i>n</i>. This means the program should consider cases in which the ambassadors\nfrom only one country attend the meeting.\n</p>\n\n<p>\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the number of possible arrangements modulo <i>M</i> = 1000003 in one line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 1\n3 2\n3 3\n4 2\n10 5\n1000 500\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n0\n2\n4\n2\n90\n570682\n</pre>\n", "p01284": "\n<H1><font color=\"#000\">Problem B:</font> Erratic Sleep Habits</H1>\n\n<p>\nPeter is a person with erratic sleep habits. He goes to sleep at twelve o'lock every midnight. He gets\nup just after one hour of sleep on some days; he may even sleep for twenty-three hours on other days.\nHis sleeping duration changes in a cycle, where he always sleeps for only one hour on the first day of the\ncycle.\n</p>\n<p>\nUnfortunately, he has some job interviews this month. No doubt he wants to be in time for them. He can\ntake anhydrous caffeine to reset his sleeping cycle to the beginning of the cycle anytime. Then he will\nwake up after one hour of sleep when he takes caffeine. But of course he wants to avoid taking caffeine\nas possible, since it may affect his health and accordingly his very important job interviews.\n</p>\n<p>\nYour task is to write a program that reports the minimum amount of caffeine required for Peter to attend\nall his interviews without being late, where the information about the cycle and the schedule of his\ninterviews are given. The time for move to the place of each interview should be considered negligible.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset is given in the following format:\n</p>\n\n<p>\n       <i>T</i><br>\n       <i>t</i><sub>1</sub> <i>t</i><sub>2</sub> ... <i>t<sub>T</sub></i><br>\n       <i>N</i><br>\n       <i>D</i><sub>1</sub> <i>M</i><sub>1</sub><br>\n       <i>D</i><sub>2</sub> <i>M</i><sub>2</sub><br>\n       ...<br>\n       <i>D</i><sub><i>N</i></sub> <i>M</i><sub><i>N</i></sub><br>\n</p>\n\n<p>\n<i>T</i> is the length of the cycle (1 &le; <i>T</i> &le; 30); <i>t<sub>i</sub></i> (for 1 &le; <i>i</i> &le; <i>T</i> ) is the amount of sleep on the <i>i</i>-th day of the\ncycle, given in hours (1 &le; <i>t<sub>i</sub></i> &le; 23); <i>N</i> is the number of interviews (1 &le; <i>N</i> &le; 100); <i>D<sub>j</sub></i> (for 1 &le; <i>j</i> &le; <i>N</i>)\nis the day of the <i>j</i>-th interview (1 &le; <i>D<sub>j</sub></i> &le; 100); <i>M<sub>j</sub></i> (for 1 &le; <i>j</i> &le; <i>N</i>) is the hour when the <i>j</i>-th interview starts (1 &le; <i>M<sub>j</sub></i> &le; 23).\n</p>\n<p>\nThe numbers in the input are all integers. <i>t</i><sub>1</sub> is always 1 as stated above. The day indicated by 1 is the\nfirst day in the cycle of Peter's sleep.\n</p>\n\n<p>\nThe last dataset is followed by a line containing one zero. This line is not a part of any dataset and should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the minimum number of times Peter needs to take anhydrous caffeine.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n1 23\n3\n1 1\n2 1\n3 1\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2\n</pre>\n\n", "p01286": "\n<H1><font color=\"#000\">Problem D:</font> Luigi's Tavern</H1>\n\n<p>\nLuigi's Tavern is a thriving tavern in the Kingdom of Nahaila. The owner of the tavern Luigi supports to\norganize a party, because the main customers of the tavern are adventurers. Each adventurer has a job:\nhero, warrior, cleric or mage.\n</p>\n<p>\nAny party should meet the following conditions:\n</p>\n<ul>\n    <li> A party should have a hero.</li>\n    <li> The warrior and the hero in a party should get along with each other.</li>\n    <li> The cleric and the warrior in a party should get along with each other.</li>\n    <li> The mage and the cleric in a party should get along with each other.</li>\n    <li> It is recommended that a party has a warrior, a cleric, and a mage, but it is allowed that at most\n      <i>N<sub>W</sub></i>, <i>N<sub>C</sub></i> and <i>N<sub>m</sub></i> parties does not have a warrior, a cleric, and a mage respectively.</li>\n    <li> A party without a cleric should have a warrior and a mage.</li>\n</ul>\n\n<p>\nNow, the tavern has <i>H</i> heroes, <i>W</i> warriors, <i>C</i> clerics and <i>M</i> mages. Your job is to write a program to find the maximum number of parties they can form.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\nThe first line of the input contains 7 non-negative integers <i>H</i>, <i>W</i>, <i>C</i>, <i>M</i>, <i>N<sub>W</sub></i>, <i>N<sub>C</sub></i>, and <i>N<sub>M</sub></i>, each of which is less than or equals to 50. The <i>i</i>-th of the following <i>W</i> lines contains the list of heroes who will be getting along with the warrior <i>i</i>. The list begins with a non-negative integer <i>n<sub>i</sub></i> , less than or equals to <i>H</i>. Then the rest of the line should contain ni positive integers, each of which indicates the ID of a hero getting along with the warrior <i>i</i>.\n</p>\n\n<p>\nAfter these lists, the following <i>C</i> lines contain the lists of warriors getting along with the clerics in the same manner. The <i>j</i>-th line contains a list of warriors who will be getting along with the cleric <i>j</i>. Then the last <i>M</i> lines of the input contain the lists of clerics getting along with the mages, of course in the same\nmanner. The <i>k</i>-th line contains a list of clerics who will be getting along with the mage <i>k</i>.\n</p>\n\n<p>\nThe last dataset is followed by a line containing seven negative integers. This line is not a part of any dataset and should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, you should output the maximum number of parties possible.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2 1 1 1 1 1 1\n1 1\n1 1\n1 1\n1 1 1 1 0 0 0\n1 1\n1 1\n1 1\n1 0 1 0 1 0 1\n0\n1 1 0 1 0 1 0\n0\n0\n1 1 0 1 0 1 0\n1 1\n0\n-1 -1 -1 -1 -1 -1 -1\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2\n1\n1\n0\n1\n</pre>\n", "p01287": "\n<H1><font color=\"#000\">Problem E:</font> Colored Octahedra</H1>\n\n<p>\nA young boy John is playing with eight triangular panels. These panels are all regular triangles of the\nsame size, each painted in a single color; John is forming various octahedra with them.\n</p>\n<p>\nWhile he enjoys his playing, his father is wondering how many octahedra can be made of these panels\nsince he is a pseudo-mathematician. Your task is to help his father: write a program that reports the\nnumber of possible octahedra for given panels. Here, a pair of octahedra should be considered identical\nwhen they have the same combination of the colors allowing rotation.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\n      <i>Color</i><sub>1</sub> <i>Color</i><sub>2</sub> ... <i>Color</i><sub>8</sub>\n</p>\n\n<p>\nEach <i>Color<sub>i</sub></i> (1 &le; <i>i</i> &le; 8) is a string of up to 20 lowercase alphabets and represents the color of the <i>i</i>-th\ntriangular panel.\n</p>\n\n\n\n<p>\nThe input ends with EOF.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the number of different octahedra that can be made of given panels.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\nblue blue blue blue blue blue blue blue\nred blue blue blue blue blue blue blue\nred red blue blue blue blue blue blue\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n1\n3\n</pre>\n", "p01288": "<H1><font color=\"#000\">Problem F:</font> Marked Ancestor</H1>\n\n<p>\nYou are given a tree <i>T</i> that consists of <i>N</i> nodes. Each node is numbered from 1 to <i>N</i>, and node 1 is always the root node of <i>T</i>. Consider the following two operations on <i>T</i>:\n</p>\n<ul>\n    <li><span>M v</span>: (Mark) Mark node <span>v</span>.</li>\n    <li><span>Q v</span>: (Query) Print the index of the nearest marked ancestor of node <span>v</span> which is nearest to it. Initially, only the root node is marked. Note that a node is an ancestor of itself.</li>\n</ul>\n\n<p>\nYour job is to write a program that performs a sequence of these operations on a given tree and calculates\nthe value that each Q operation will print. To avoid too large output file, your program is requested to\nprint the sum of the outputs of all query operations. Note that the judges confirmed that it is possible to\ncalculate every output of query operations in a given sequence.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\nThe first line of the input contains two integers <i>N</i> and <i>Q</i>, which denotes the number of nodes in the tree\n<i>T</i> and the number of operations, respectively. These numbers meet the following conditions: 1 &le; <i>N</i> &le; 100000 and 1 &le; <i>Q</i> &le; 100000.\n</p>\n<p>\nThe following <i>N</i> - 1 lines describe the configuration of the tree <i>T</i>. Each line contains a single integer <i>p<sub>i</sub></i> (<i>i</i> = 2, ... , <i>N</i>), which represents the index of the parent of <i>i</i>-th node.\n</p>\n<p>\nThe next <i>Q</i> lines contain operations in order. Each operation is formatted as \"<span>M v</span>\" or \"<span>Q v</span>\", where <i>v</i> is the index of a node.\n</p>\n\n<p>\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the sum of the outputs of all query operations in one line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n6 3\n1\n1\n2\n3\n3\nQ 5\nM 3\nQ 5\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n4\n</pre>\n\n\n", "p01291": "<H1><font color=\"#000\">Problem I:</font> Wind Passages</H1>\n\n<p>\nWind Corridor is a covered passageway where strong wind is always blowing. It is a long corridor of\nwidth W, and there are several pillars in it. Each pillar is a right prism and its face is a polygon (not\nnecessarily convex).\n</p>\n<p>\nIn this problem, we consider two-dimensional space where the positive <i>x</i>-axis points the east and the\npositive <i>y</i>-axis points the north. The passageway spans from the south to the north, and its length is\ninfinity. Specifically, it covers the area 0 &le; <i>x</i> &le; <i>W</i>. The outside of the passageway is filled with walls.\nEach pillar is expressed as a polygon, and all the pillars are located within the corridor without conflicting\nor touching each other.\n</p>\n<p>\nWind blows from the south side of the corridor to the north. For each second, <i>w</i> unit volume of air can\nbe flowed at most if the minimum width of the path of the wind is <i>w</i>. Note that the path may fork and\nmerge, but never overlaps with pillars and walls.\n</p>\n<p>\nYour task in this problem is to write a program that calculates the maximum amount of air that can be\nflowed through the corridor per second.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\nThe first line of the input contains two integers <i>W</i> and <i>N</i>. <i>W</i> is the width of the corridor, and <i>N</i> is the\nnumber of pillars. <i>W</i> and <i>N</i> satisfy the following condition: 1 &le; <i>W</i> &le; 10<sup>4</sup> and 0 &le; <i>N</i> &le; 200.\n</p>\n<p>\nThen, <i>N</i> specifications of each pillar follow. Each specification starts with a line that contains a single\ninteger <i>M</i>, which is the number of the vertices of a polygon (3 &le; <i>M</i> &le; 40). The following <i>M</i> lines describe the shape of the polygon. The <i>i</i>-th line (1 &le; <i>i</i> &le; <i>M</i>) contains two integers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> that denote the coordinate of the <i>i</i>-th vertex (0 &lt; <i>x<sub>i</sub></i> &lt; <i>W</i>, 0 &lt; <i>y<sub>i</sub></i> &lt; 10<sup>4</sup>).\n</p>\n\n<p>\nThe last dataset is followed by a line containing two zeros. This line is not a part of any dataset and should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, your program should print a line that contains the maximum amount of air flow per second, in unit\nvolume. The output may contain arbitrary number of digits after the decimal point, but the absolute error\nmust not exceed 10<sup>-6</sup>.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5 2\n4\n1 1\n1 2\n2 2\n2 1\n4\n3 3\n3 4\n4 4\n4 3\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3.41421356\n</pre>\n\n\n\n", "p01295": "\n<H1><font color=\"#000\">Problem C:</font>Champernowne Constant</H1>\n\n<p>\nChampernown constant is an irrational number represented in decimal by \"<span>0.</span>\" followed by\nconcatenation of all positive integers in the increasing order. The first few digits of this constant\nare: 0.123456789101112...\n</p>\n<p>\nYour task is to write a program that outputs the <i>K</i> digits of Chapnernown constant starting at\nthe <i>N</i>-th place for given two natural numbers <i>K</i> and <i>N</i>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input has multiple lines. Each line has two positive integers <i>N</i> and <i>K</i> (<i>N</i> &le; 10<sup>9</sup>, <i>K</i> &le; 100)\nseparated by a space.\n</p>\n<p>\nThe end of input is indicated by a line with two zeros. This line should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each line, output a line that contains the <i>K</i> digits.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n4 5\n6 7\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n45678\n6789101\n</pre>\n", "p01297": "\n<H1><font color=\"#000\">Problem E:</font> Safe Area</H1>\n\n<p>\nNathan O. Davis is challenging a kind of shooter game. In this game, enemies emit laser beams\nfrom outside of the screen. A laser beam is a straight line with a certain thickness. Nathan\nmoves a circular-shaped machine within the screen, in such a way it does not overlap a laser\nbeam. As in many shooters, the machine is destroyed when the overlap happens.\n</p>\n\n<p>\nNathan is facing an uphill stage. Many enemies attack simultaneously in this stage, so eventually\nlaser beams fill out almost all of the screen. Surprisingly, it is even possible he has no \"safe area\" on the screen. In other words, the machine cannot survive wherever it is located in some\ncases.\n</p>\n\n<p>\nThe world is as kind as it is cruel! There is a special item that helps the machine to survive\nany dangerous situation, even if it is exposed in a shower of laser beams, for some seconds. In\naddition, another straight line (called \"a warning line\") is drawn on the screen for a few seconds\nbefore a laser beam is emit along that line.\n</p>\n\n<p>\nThe only problem is that Nathan has a little slow reflexes. He often messes up the timing to\nuse the special item. But he knows a good person who can write a program to make up his slow\nreflexes - it's you! So he asked you for help.\n</p>\n\n<p>\nYour task is to write a program to make judgement whether he should use the item or not, for\ngiven warning lines and the radius of the machine.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. Each dataset corresponds to one situation with warning\nlines in the following format:\n</p>\n\n<p>\n       <i>W H N R</i><br>\n       <i>x</i><sub>1,1</sub> <i>y</i><sub>1,1</sub> <i>x</i><sub>1,2</sub> <i>y</i><sub>1,2</sub> <i>t</i><sub>1</sub><br>\n       <i>x</i><sub>2,1</sub> <i>y</i><sub>2,1</sub> <i>x</i><sub>2,2</sub> <i>y</i><sub>2,2</sub> <i>t</i><sub>2</sub><br>\n       ...<br>\n       <i>x</i><sub><i>N</i>,1</sub> <i>y</i><sub><i>N</i>,1</sub> <i>x</i><sub><i>N</i>,2</sub> <i>y</i><sub><i>N</i>,2</sub> <i>t<sub>N</sub></i><br>\n</p>\n\n<p>\nThe first line of a dataset contains four integers <i>W</i>, <i>H</i>, <i>N</i> and <i>R</i> (2 &lt; <i>W</i> &le; 640, 2 &lt; <i>H</i> &le; 480,\n0 &le; <i>N</i> &le; 100 and 0 &lt; <i>R</i> &lt; min{<i>W</i>, <i>H</i>}/2). The first two integers <i>W</i> and <i>H</i> indicate the width\nand height of the screen, respectively. The next integer <i>N</i> represents the number of laser beams.\n\n</p>\n\n<p>\nThe last integer <i>R</i> indicates the radius of the machine. It is guaranteed that the output would\nremain unchanged if the radius of the machine would become larger by 10<sup>-5</sup> than <i>R</i>.\n</p>\n\n<p>\nThe following <i>N</i> lines describe the <i>N</i> warning lines. The (<i>i</i>+1)-th line of the dataset corresponds\nto the <i>i</i>-th warning line, which is represented as a straight line which passes through two given\ndifferent coordinates (<i>x</i><sub><i>i</i>,1</sub>, <i>y</i><sub><i>i</i>,1 </sub>) and (<i>x</i><sub><i>i</i>,2</sub> , <i>y</i><sub><i>i</i>,2</sub> ). The last integer <i>t<sub>i</sub></i> indicates the thickness of the\nlaser beam corresponding to the <i>i</i>-th warning line.\n</p>\n\n<p>\nAll given coordinates (<i>x</i>, <i>y</i>) on the screen are a pair of integers (0 &le; <i>x</i> &le; <i>W</i>, 0 &le; <i>y</i> &le; <i>H</i>). Note\nthat, however, the machine is allowed to be located at non-integer coordinates during the play.\n</p>\n\n<p>\nThe input is terminated by a line with four zeros. This line should not be processed.\n</p>\n\n\n\n<H2>Output</H2>\n\n<p>\nFor each case, print \"<span>Yes</span>\" in a line if there is a safe area, or print \"<span>No</span>\" otherwise.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n100 100 1 1\n50 0 50 100 50\n640 480 1 1\n0 0 640 480 100\n0 0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nNo\nYes\n</pre>\n", "p01300": "\n<H1><font color=\"#000\">Problem H:</font> Eleven Lover</H1>\n\n<p>\nEdward Leven loves multiples of eleven very much. When he sees a number, he always tries\nto find consecutive subsequences (or substrings) forming multiples of eleven. He calls such\nsubsequences as 11-sequences. For example, he can find an 11-sequence 781 in a number 17819.\n</p>\n\n<p>\nHe thinks a number which has many 11-sequences is a <i>good</i> number. He would like to find out\na very <i>good</i> number. As the first step, he wants an easy way to count how many 11-sequences\nare there in a given number. Even for him, counting them from a big number is not easy.\nFortunately, one of his friends, you, is a brilliant programmer. He asks you to write a program\nto count the number of 11-sequences. Note that an 11-sequence must be a positive number\nwithout leading zeros.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of lines each of which contains a number consisting of less than or equal\nto 80000 digits.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing a single zero, which should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each input number, output a line containing the number of 11-sequences.\n</p>\n\n<p>\nYou can assume the answer fits in a 32-bit signed integer.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n17819\n1111\n11011\n1234567891011121314151617181920\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n1\n4\n4\n38\n</pre>\n", "p01302": "\n<H1><font color=\"#000\">Problem J:</font> Cave Explorer</H1>\n\n<p>\nMike Smith is a man exploring caves all over the world.\n</p>\n\n<p>\nOne day, he faced a scaring creature blocking his way. He got scared, but in short time he took\nhis knife and then slashed it to attempt to kill it. Then they were split into parts, which soon\ndied out but the largest one. He slashed the creature a couple of times more to make it small\nenough, and finally became able to go forward.\n</p>\n\n<p>\nNow let us think of his situation in a mathematical way. The creature is considered to be a\npolygon, convex or concave. Mike slashes this creature straight with his knife in some direction.\nWe suppose here the direction is given for simpler settings, while the position is arbitrary. Then\nall split parts but the largest one disappears.\n</p>\n\n<p>\nYour task is to write a program that calculates the area of the remaining part when the creature\nis slashed in such a way that the area is minimized.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. Each dataset is given in the following format:\n</p>\n\n<p>\n       <i>n</i><br>\n       <i>v<sub>x</sub> v<sub>y</sub></i><br>\n       <i>x</i><sub>1</sub> <i>y</i><sub>1</sub><br>\n       ...<br>\n       <i>x<sub>n</sub> y<sub>n</sub></i>\n</p>\n\n<p>\nThe first line contains an integer <i>n</i>, the number of vertices of the polygon that represents the\nshape of the creature (3 &le; <i>n</i> &le; 100). The next line contains two integers <i>v<sub>x</sub></i> and <i>v<sub>y</sub></i>, where\n(<i>v<sub>x</sub></i>, <i>v<sub>y</sub></i>) denote a vector that represents the direction of the knife (-10000 &le; <i>v<sub>x</sub></i>, <i>v<sub>y</sub></i> &le; 10000,\n\n<i>v</i><sub><i>x</i></sub><sup>2</sup> + <i>v</i><sub><i>y</i></sub><sup>2</sup> &gt; 0). Then <i>n</i> lines follow. The <i>i</i>-th line contains two integers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i>, where (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>)\ndenote the coordinates of the <i>i</i>-th vertex of the polygon (0 &le; <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> &le; 10000).\n</p>\n\n<p>\nThe vertices are given in the counterclockwise order. You may assume the polygon is always\nsimple, that is, the edges do not touch or cross each other except for end points.\n</p>\n<p>\nThe input is terminated by a line with a zero. This should not be processed.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the minimum possible area in a line. The area may be printed with\nan arbitrary number of digits after the decimal point, but should not contain an absolute error\ngreater than 10<sup>-2</sup>.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n5\n0 1\n0 0\n5 0\n1 1\n5 2\n0 2\n7\n9999 9998\n0 0\n2 0\n3 1\n1 1\n10000 9999\n2 2\n0 2\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2.00\n2.2500000\n</pre>\n", "p01365": "\n<H1><font color=\"#000\">Problem G:</font> Camera Control</H1>\n\n<p>\n\"ACM48\" is one of the most popular dance vocal units in Japan. In this winter, ACM48 is\nplanning a world concert tour. You joined the tour as a camera engineer.\n</p>\n\n<p>\nYour role is to develop software which controls the camera on a stage. For simplicity you can\nregard the stage as 2-dimensional space. You can rotate the camera to an arbitrary direction\nby the software but cannot change its coordinate.\n</p>\n\n<p>\nDuring a stage performance, each member of ACM48 moves along her route and sings the part(s)\nassigned to her. Here, a route is given as a polygonal line.\n</p>\n\n<p>\nYou have to keep focusing the camera on a member during a stage performance. You can change\nthe member focused by the camera if and only if the current and next members are in the same\ndirection from the camera.\n</p>\n\n<p>\nYour task is to write a program which reads the stage performance plan and calculates the\nmaximum time that you can focus the camera on members that are singing.\n</p>\n\n<p>\nYou may assume the following are satisfied:\n</p>\n\n<ul>\n    <li> You can focus the camera on an arbitrary member at the beginning time.</li>\n    <li> Each route of the member does not touch the camera.</li>\n   <li> Each member stays at the last coordinates after she reaches there.</li>\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\nThe input contains multiple test cases. Each test case has the following format:\n</p>\n\n<p>\n      <i>N</i><br>\n      <i>c<sub>x</sub> c<sub>y</sub></i><br>\n      The information of the 1-st member<br>\n      .<br>\n      .<br>\n      .<br>\n      The information of the <i>N</i>-th member<br>\n</p>\n\n<p>\n<i>N</i> (1 &le; <i>N</i> &le; 50) is the number of the members. (<i>c<sub>x</sub></i>, <i>c<sub>y</sub></i>) is the coordinates of the camera. Then\nthe information of the <i>N</i> members follow.\n</p>\n\n<p>\nThe information of the <i>i</i>-th member has the following format:\n</p>\n\n<p>\n      <i>M<sub>i</sub></i><br>\n      <i>x</i><sub><i>i</i>,1</sub> <i>y</i><sub><i>i</i>,1</sub> <i>t</i><sub><i>i</i>,1</sub><br>\n      .<br>\n      .<br>\n      .<br>\n      <i>x</i><sub><i>i</i>,<i>M<sub>i</sub></i></sub> <i>y</i><sub><i>i</i>,<i>M<sub>i</sub></i></sub> <i>t</i><sub><i>i</i>,<i>M<sub>i</sub></i></sub> <br>\n      <i>L<sub>i</sub></i><br>\n      <i>b</i><sub><i>i</i>,1</sub> <i>e</i><sub><i>i</i>,1</sub><br>\n      .<br>\n      .<br>\n      .<br>\n      <i>b</i><sub><i>i</i>,<i>L<sub>i</sub></i></sub>       <i>e</i><sub><i>i</i>,<i>L<sub>i</sub></i></sub> <br>\n\n</p>\n\n<p>\n<i>M<sub>i</sub></i> (1 &le; <i>M<sub>i</sub></i> &le; 100) is the number of the points in the route. (<i>x<sub>i,j</sub></i>, <i>y<sub>i,j</sub></i> ) is the coordinates of the\n<i>j</i>-th in the route. <i>t<sub>i,j</sub></i> (0 = <i>t</i><sub><i>i</i>,0</sub> &lt; <i>t</i><sub><i>i</i>,<i>j</i></sub> &lt; <i>t</i><sub><i>i</i>,<i>j</i>+1</sub> &le; 10<sup>3</sup> for 0 &lt; <i>j</i>) is the time that the <i>i</i>-th member\nreaches the <i>j</i>-th coordinates. <i>L<sub>i</sub></i> (0 &le; <i>L<sub>i</sub></i> &le; 100) is the number of the vocal part. <i>b<sub>i,k</sub></i> and <i>e<sub>i,k</sub></i> (0 &le; <i>b<sub>i,k</sub></i> &lt; <i>e<sub>i,k</sub></i> &lt; <i>b</i><sub><i>i</i>,<i>k</i>+1</sub> &lt; <i>e</i><sub><i>i</i>,<i>k</i>+1</sub> &le; 10<sup>3</sup> ) are the beginning and the ending time of the <i>k</i>-th vocal\npart, respectively.\n</p>\n\n<p>\nAll the input values are integers. You may assume that the absolute of all the coordinates are\nnot more than 10<sup>3</sup> .\n</p>\n<p>\n<i>N</i> = 0 denotes the end of the input. You may not process this as a test case.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the maximum time that you can focus the camera on singing members\nwith an absolute error of at most 10<sup>-6</sup>. You may output any number of digits after the decimal\npoint.\n\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n0 0\n2\n-5 5 0\n5 5 10\n1\n0 6\n2\n5 5 0\n-5 5 10\n1\n6 10\n1\n7 -65\n2\n-65 10 0\n65 1 3\n2\n0 1\n23 24\n2\n0 0\n2\n100 10 0\n-10 10 10\n5\n0 1\n2 3\n4 5\n6 7\n8 9\n2\n10 0 0\n0 10 10\n5\n1 2\n3 4\n5 6\n7 8\n9 10\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n9.00000000\n2.00000000\n5.98862017\n</pre>\n", "p01366": "\n<H1><font color=\"#000\">Problem H:</font> Road Construction</H1>\n\n<p>\nKing Mercer is the king of ACM kingdom. There are one capital and some cities in his kingdom.\nAmazingly, there are no roads in the kingdom now. Recently, he planned to construct roads\nbetween the capital and the cities, but it turned out that the construction cost of his plan is\nmuch higher than expected.\n</p>\n<p>\nIn order to reduce the cost, he has decided to create a new construction plan by removing some\nroads from the original plan. However, he believes that a new plan should satisfy the following\nconditions:\n</p>\n\n<ul>\n    <li> For every pair of cities, there is a route (a set of roads) connecting them.</li>\n    <li> The minimum distance between the capital and each city does not change from his original\n      plan.</li>\n</ul>\n\n<p>\nMany plans may meet the conditions above, but King Mercer wants to know the plan with\nminimum cost. Your task is to write a program which reads his original plan and calculates the\ncost of a new plan with the minimum cost.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several datasets. Each dataset is formatted as follows.\n</p>\n\n<p>\n      <i>N M</i><br>\n      <i>u</i><sub>1</sub>        <i>v</i><sub>1</sub>        <i>d</i><sub>1</sub>        <i>c</i><sub>1</sub> <br>\n      .<br>\n      .<br>\n      .<br>\n      <i>u</i><sub><i>M</i></sub>        <i>v</i><sub><i>M</i></sub>        <i>d</i><sub><i>M</i></sub>        <i>c</i><sub><i>M</i></sub> <br>\n</p>\n\n<p>\nThe first line of each dataset begins with two integers, <i>N</i> and <i>M</i> (1 &le; <i>N</i> &le; 10000, 0 &le; <i>M</i> &le;\n20000). <i>N</i> and <i>M</i> indicate the number of cities and the number of roads in the original plan,\nrespectively.\n</p>\n\n<p>\nThe following <i>M</i> lines describe the road information in the original plan. The <i>i</i>-th line contains\nfour integers, <i>u<sub>i</sub></i>, <i>v<sub>i</sub></i>, <i>d<sub>i</sub></i> and <i>c<sub>i</sub></i> (1 &le; <i>u<sub>i</sub></i>, <i>v<sub>i</sub></i> &le; <i>N</i> , <i>u<sub>i</sub></i> &ne; <i>v<sub>i</sub></i> , 1 &le; <i>d<sub>i</sub></i> &le; 1000, 1 &le; <i>c<sub>i</sub></i> &le; 1000). <i>u<sub>i</sub></i> , <i>v<sub>i</sub></i>, <i>d<sub>i</sub></i>\nand <i>c<sub>i</sub></i> indicate that there is a road which connects <i>u<sub>i</sub></i>-th city and <i>v<sub>i</sub></i>-th city, whose length is <i>d<sub>i</sub></i> and whose cost needed for construction is <i>c<sub>i</sub></i>.\n</p>\n\n<p>\nEach road is bidirectional. No two roads connect the same pair of cities. The 1-st city is the\ncapital in the kingdom.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing two zeros separated by a space. You\nshould not process the line as a dataset.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the minimum cost of a plan which satisfies the conditions in a line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 3\n1 2 1 2\n2 3 2 1\n3 1 3 2\n5 5\n1 2 2 2\n2 3 1 1\n1 4 1 1\n4 5 1 1\n5 3 1 1\n5 10\n1 2 32 10\n1 3 43 43\n1 4 12 52\n1 5 84 23\n2 3 58 42\n2 4 86 99\n2 5 57 83\n3 4 11 32\n3 5 75 21\n4 5 23 43\n5 10\n1 2 1 53\n1 3 1 65\n1 4 1 24\n1 5 1 76\n2 3 1 19\n2 4 1 46\n2 5 1 25\n3 4 1 13\n3 5 1 65\n4 5 1 34\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n3\n5\n137\n218\n</pre>\n", "p01367": "\n<H1><font color=\"#000\">Problem I:</font> Operator</H1>\n\n<p>\nThe customer telephone support center of the computer sales company called JAG is now in-\ncredibly confused. There are too many customers who request the support, and they call the\nsupport center all the time. So, the company wants to figure out how many operators needed\nto handle this situation.\n</p>\n\n<p>\nFor simplicity, let us focus on the following simple simulation.\n</p>\n\n<p>\nLet <i>N</i> be a number of customers. The <i>i</i>-th customer has id <i>i</i>, and is described by three numbers,\n<i>M<sub>i</sub></i>, <i>L<sub>i</sub></i> and <i>K<sub>i</sub></i>. <i>M<sub>i</sub></i> is the time required for phone support, <i>L<sub>i</sub></i> is the maximum stand by time\nuntil an operator answers the call, and <i>K<sub>i</sub></i> is the interval time from hanging up to calling back.\nLet us put these in other words: It takes <i>M<sub>i</sub></i> unit times for an operator to support <i>i</i>-th customer.\nIf the <i>i</i>-th customer is not answered by operators for <i>L<sub>i</sub></i> unit times, he hangs up the call. <i>K<sub>i</sub></i>\nunit times after hanging up, he calls back.\n</p>\n\n<p>\nOne operator can support only one customer simultaneously. When an operator finish a call, he\ncan immediately answer another call. If there are more than one customer waiting, an operator\nwill choose the customer with the smallest id.\n</p>\n\n<p>\nAt the beginning of the simulation, all customers call the support center at the same time. The\nsimulation succeeds if operators can finish answering all customers within <i>T</i> unit times.\n</p>\n\n<p>\nYour mission is to calculate the minimum number of operators needed to end this simulation\nsuccessfully.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input contains multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\n     <i>N T</i><br>\n     <i>M</i><sub>1</sub> <i>L</i><sub>1</sub> <i>K</i><sub>1</sub><br>\n     .<br>\n     .<br>\n     .<br>\n     <i>M</i><sub><i>N</i></sub> <i>L</i><sub><i>N</i></sub> <i>K</i><sub><i>N</i></sub><br>\n</p>\n\n<p>\nThe first line of a dataset contains two positive integers, <i>N</i> and <i>T</i> (1 &le; <i>N</i> &le; 1000, 1 &le; <i>T</i> &le; 1000).\n<i>N</i> indicates the number of customers in the dataset, and <i>T</i> indicates the time limit of the\nsimulation.\n</p>\n\n<p>\nThe following <i>N</i> lines describe the information of customers. The <i>i</i>-th line contains three integers,\n<i>M<sub>i</sub></i>, <i>L<sub>i</sub></i> and <i>K<sub>i</sub></i> (1 &le; <i>M<sub>i</sub></i> &le; <i>T</i> , 1 &le; <i>L<sub>i</sub></i> &le; 1000, 1 &le; <i>K<sub>i</sub></i> &le; 1000), describing <i>i</i>-th customer's\ninformation. <i>M<sub>i</sub></i> indicates the time required for phone support, Li indicates the maximum stand\nby time until an operator answers the call, and Ki indicates the is the interval time from hanging\nup to calling back.\n</p>\n\n<p>\nThe end of input is indicated by a line containing two zeros. This line is not part of any dataset\nand hence should not be processed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the minimum number of operators needed to end the simulation successfully in a line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 300\n100 50 150\n100 50 150\n100 50 150\n3 300\n100 50 150\n100 50 150\n200 50 150\n9 18\n3 1 1\n3 1 1\n3 1 1\n4 100 1\n5 100 1\n5 100 1\n10 5 3\n10 5 3\n1 7 1000\n10 18\n1 2 3\n2 3 4\n3 4 5\n4 5 6\n5 6 7\n6 7 8\n7 8 9\n8 9 10\n9 10 11\n10 11 12\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2\n3\n3\n4\n</pre>\n", "p01368": "\n<H1><font color=\"#000\">Problem J:</font> Merry Christmas</H1>\n\n<p>\nInternational Christmas Present Company (ICPC) is a company to employ Santa and deliver\npresents on Christmas. Many parents request ICPC to deliver presents to their children at\nspecified time of December 24. Although same Santa can deliver two or more presents, because\nit takes time to move between houses, two or more Santa might be needed to finish all the\nrequests on time.\n</p>\n\n<p>\nEmploying Santa needs much money, so the president of ICPC employed you, a great program-\nmer, to optimize delivery schedule. Your task is to write a program to calculate the minimum\nnumber of Santa necessary to finish the given requests on time. Because each Santa has been\nwell trained and can conceal himself in the town, you can put the initial position of each Santa\nanywhere.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of several datasets. Each dataset is formatted as follows.\n</p>\n\n<p>\n      <i>N M L</i><br>\n      <i>u</i><sub>1</sub> <i>v</i><sub>1</sub> <i>d</i><sub>1</sub><br>\n      <i>u</i><sub>2</sub> <i>v</i><sub>2</sub> <i>d</i><sub>2</sub><br>\n      .<br>\n      .<br>\n      .<br>\n      <i>u</i><sub><i>M</i></sub> <i>v</i><sub><i>M</i></sub> <i>d</i><sub><i>M</i></sub><br>\n      <i>p</i><sub>1</sub> <i>t</i><sub>1</sub><br>\n      <i>p</i><sub>2</sub> <i>t</i><sub>2</sub><br>\n      .<br>\n      .<br>\n      .<br>\n      <i>p</i><sub><i>L</i></sub> <i>t</i><sub><i>L</i></sub><br>\n</p>\n\n<p>\nThe first line of a dataset contains three integer, <i>N</i> , <i>M</i> and <i>L</i> (1 &le; <i>N</i> &le; 100, 0 &le; <i>M</i> &le; 1000,\n1 &le; <i>L</i> &le; 1000) each indicates the number of houses, roads and requests respectively.\n</p>\n\n<p>\nThe following <i>M</i> lines describe the road network. The <i>i</i>-th line contains three integers, <i>u<sub>i</sub></i> , <i>v<sub>i</sub></i> ,\nand <i>d<sub>i</sub></i> (0 &le; <i>u<sub>i</sub></i> &lt; <i>v<sub>i</sub></i> &le; <i>N</i> - 1, 1 &le; <i>d<sub>i</sub></i> &le; 100) which means that there is a road connecting houses\n<i>u<sub>i</sub></i> and <i>v<sub>i</sub></i> with <i>d<sub>i</sub></i> length. Each road is bidirectional. There is at most one road between same\npair of houses. Whole network might be disconnected.\n</p>\n\n<p>\nThe next <i>L</i> lines describe the requests. The <i>i</i>-th line contains two integers, <i>p<sub>i</sub></i> and <i>t<sub>i</sub></i> (0 &le; <i>p<sub>i</sub></i> &le;\n<i>N</i> - 1, 0 &le; <i>t<sub>i</sub></i> &le; 10<sup>8</sup> ) which means that there is a delivery request to house <i>p<sub>i</sub></i> on time <i>t<sub>i</sub></i> . There\nis at most one request for same place and time. You can assume that time taken other than\nmovement can be neglectable, and every Santa has the same speed, one unit distance per unit\ntime.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing three zeros separated by a space, and you\nshould not process this as a test case.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the minimum number of Santa necessary to finish all the requests on time.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 2 3\n0 1 10\n1 2 10\n0 0\n1 10\n2 0\n3 2 4\n0 1 10\n1 2 10\n0 0\n1 10\n2 20\n0 40\n10 10 10\n0 1 39\n2 3 48\n3 5 20\n4 8 43\n3 9 10\n8 9 40\n3 4 5\n5 7 20\n1 7 93\n1 3 20\n0 0\n1 100000000\n2 100\n3 543\n4 500\n5 400\n6 300\n7 200\n8 100\n9 100\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2\n1\n4\n</pre>\n", "p01418": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Sleeping Time</H1>\n\n<p>\nMiki is a high school student.\nShe has  a part time job, so she cannot take enough sleep  on weekdays.\nShe wants to take good sleep  on holidays, but she doesn't know  the  best length of sleeping time for her.\n\nShe is now trying to figure that out with the following algorithm:\n</p>\n\n<ol>\n<li> Begin with the numbers <var>K</var>, <var>R</var> and <var>L</var>.</li>\n<li>She  tries to sleep for <var>H=(R+L)/2</var> hours.</li>\n<li>If she feels  the time is longer than or equal to the optimal length, then  update <var>L</var> with <var>H</var>.  Otherwise,  update <var>R</var> with <var>H</var>.</li>\n<li>After repeating step 2 and  3 for <var>K</var>  nights, she decides her optimal sleeping time to be <var>T' = (R+L)/2</var>.</li>\n</ol>\n\n<p>\nIf her feeling  is always correct,  the steps described above should give her a very accurate optimal sleeping time.\nBut unfortunately, she makes mistake in step 3  with the probability <var>P</var>.\n</p>\n\n<p>\n Assume you know  the optimal sleeping time <var>T</var> for Miki.\nYou have to calculate the probability <var>PP</var> that the absolute difference of <var>T'</var> and <var>T</var> is  smaller or equal to <var>E</var>.\nIt is guaranteed that the answer remains unaffected  by the change of <var>E</var> in <var>10^{-10}</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\n\nThe input follows the format shown below\n</p>\n\n<p>\n <var>K</var> <var>R</var> <var>L</var><br/>\n <var>P</var><br/>\n <var>E</var><br/>\n <var>T</var><br/>\n</p>\n\n<p>\n\nWhere the integers  <var>0 \\leq K \\leq 30</var>, <var>0 \\leq R \\leq L \\leq 12</var> are the parameters for the algorithm described above.\n The decimal numbers on the following three lines of the input gives the parameters for the estimation.  You can assume <var>0 \\leq P \\leq 1</var>, <var>0 \\leq E \\leq 12</var>, <var>0 \\leq T \\leq 12</var>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput <var>PP</var> in one line.\n\nThe output should not contain an error greater than <var>10^{-5}</var>.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n3 0 2\n0.10000000000\n0.50000000000\n1.00000000000\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n0.900000\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n3 0 2\n0.10000000000\n0.37499999977\n1.00000000000\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n0.810000\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n3 0 2\n0.10000000000\n0.00000100000\n0.37500000000\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n0.729000\n</pre>\n\n<H2>Sample Input 4</H2>\n\n<pre>\n3 0 2\n0.20000000000\n0.00000100000\n0.37500000000\n</pre>\n\n<H2>Output for the Sample Input 4</H2>\n\n<pre>\n0.512000\n</pre>\n", "p01417": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Calender Colors</H1>\n\n<p>\nTaro  is a member of a programming contest circle.\nIn this circle, the members manage their schedules in the system called <i>Great Web Calender</i>.\n</p>\n\n<p>\n\nTaro has just added some of his friends to his calendar so that he can browse their schedule on his calendar.\nThen he noticed that the system currently displays all the schedules in only one color, mixing the schedules for all his friends.\nThis is  difficult to manage because  it's hard to tell whose schedule each entry is.\n</p>\n\n<p>\nBut actually this calender system has the  feature to change  the color of schedule entries, based on the person who has the entries.\nSo Taro wants to  use that feature to distinguish their plans by color.\n</p>\n\n<p>\nGiven the colors Taro can use and the number of members,\nyour task is to calculate the subset of colors to color all  schedule entries.\nThe colors are given by &quot;Lab color space&quot;.\n</p>\n\n<p>\nIn Lab color space,\nthe   distance between two colors is defined by the square sum of the difference of each element.\nTaro has to pick up the  subset of colors  that maximizes the sum of distances of all color pairs in the set.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is like the following style.\n</p>\n\n<p>\n<var>N</var> <var>M</var><br/>\n<var>L_{0}</var> <var>a_{0}</var> <var>b_{0}</var><br/>\n<var>L_{1}</var> <var>a_{1}</var> <var>b_{1}</var><br/>\n<var>...</var><br/>\n<var>L_{N-1}</var> <var>a_{N-1}</var> <var>b_{N-1}</var><br/>\n</p>\n\n<p>\n\n\nThe first line contains two integers <var>N</var> and <var>M</var> (<var>0 \\leq M \\leq N \\leq 20</var>), where <var>N</var> is the number of colors in the input, and <var>M</var> is the number of friends Taro wants to select the colors for.\nEach of the following <var>N</var> lines contains three decimal integers <var>L</var>(<var>0.0 \\leq L \\leq 100.0</var>), <var>a</var>(<var>-134.0 \\leq a \\leq 220.0</var>) and <var>b</var>(<var>-140.0 \\leq b \\leq 122.0</var>) which represents a single color in Lab color space.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the maximal of the total distance.\nThe output should not contain an error greater than <var>10^{-5}</var>.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n3 2\n0 0 0\n10 10 10\n100 100 100\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n30000.00000000000000000000\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n5 3\n12.0 15.0 9.0\n10.0 -3.0 2.2\n3.5 6.8 9.0\n2.1 4.4 5.9\n1.2 4.0 -5.4\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n1003.44000000000005456968\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n2 1\n1.0 1.0 1.0\n0.0 0.0 0.0\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n0.00000000000000000000\n</pre>\n", "p01420": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Marathon Match</H1>\n\n<p>\n<var>N</var> people run a marathon.\nThere are <var>M</var> resting places on the way.\nFor each resting place, the <var>i</var>-th runner takes a break with probability <var>P_i</var> percent.\nWhen the <var>i</var>-th runner takes a break,  he gets rest for <var>T_i</var> time.\n</p>\n\n<p>\nThe <var>i</var>-th runner runs at constant speed <var>V_i</var>, and\nthe  distance of the marathon is <var>L</var>.\n</p>\n\n<p>\nYou are requested to compute the probability  for each runner to win the first place.\nIf a runner arrives at the goal with another person at the same time, they are not considered to win the first place.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nA dataset is given in the following format:\n</p>\n\n<p>\n<var>N</var> <var>M</var> <var>L</var><br/>\n<var>P_1</var> <var>T_1</var> <var>V_1</var><br/>\n<var>P_2</var> <var>T_2</var> <var>V_2</var><br/>\n<var>...</var><br/>\n<var>P_N</var> <var>T_N</var> <var>V_N</var><br/>\n</p>\n\n<p>\nThe first line of a dataset contains three integers <var>N</var> (<var>1 \\leq N \\leq 100</var>), <var>M</var> (<var>0 \\leq M \\leq 50</var>) and <var>L</var> (<var>1 \\leq L \\leq 100,000</var>).\n<var>N</var> is the number of runners.\n<var>M</var> is the number of resting places.\n<var>L</var> is the  distance of the marathon.\n</p>\n\n<p>\nEach of the following <var>N</var> lines contains three integers <var>P_i</var> (<var>0 \\leq P_i \\leq 100</var>), <var>T_i</var> (<var>0 \\leq T_i \\leq 100</var>) and <var>V_i</var> (<var>0 \\leq V_i \\leq 100</var>) describing the <var>i</var>-th runner.\n<var>P_i</var> is the probability to take a break.\n<var>T_i</var> is the time of resting.\n<var>V_i</var> is the speed.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each runner, you should answer the probability of winning.\nThe <var>i</var>-th line in the output should be the probability that the <var>i</var>-th runner wins the marathon.\nEach number in the output should not contain an error greater than <var>10^{-5}</var>.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n2 2 50\n30 50 1\n30 50 2\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n0.28770000\n0.71230000\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n2 1 100\n100 100 10\n0 100 1\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n0.00000000\n1.00000000\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n3 1 100\n50 1 1\n50 1 1\n50 1 1\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n0.12500000\n0.12500000\n0.12500000\n</pre>\n\n<H2>Sample Input 4</H2>\n\n<pre>\n2 2 50\n30 0 1\n30 50 2\n</pre>\n\n<H2>Output for the Sample Input 4</H2>\n\n<pre>\n0.51000000\n0.49000000\n</pre>\n", "p01421": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Reverse Roads</H1>\n\n<p>\nICP city has an express company whose trucks run from the crossing <var>S</var> to the crossing <var>T</var>.\nThe president of the company is feeling upset because all the roads in the city are one-way, and are severely congested.\nSo, he planned to improve the maximum flow (edge disjoint paths) from the crossing <var>S</var> to the crossing <var>T</var> by reversing the traffic direction on some of the roads.\n</p>\n\n<p>\nYour task is writing a program to calculate the maximized flow from <var>S</var> to <var>T</var> by reversing some roads, and the list of the reversed roads.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of a data set contains two integers <var>N</var> (<var>2 \\leq N \\leq 300</var>) and <var>M</var> (<var>0 \\leq M \\leq {\\rm min} (1\\,000,\\ N(N-1)/2)</var>).\n<var>N</var> is the number of crossings in the city and <var>M</var> is the number of roads.\n</p>\n\n<p>\nThe following <var>M</var> lines describe one-way roads in the city.\nThe <var>i</var>-th line (<var>1</var>-based) contains two integers <var>X_i</var> and <var>Y_i</var> (<var>1 \\leq X_i, Y_i \\leq N</var>, <var>X_i \\neq Y_i</var>).\n<var>X_i</var> is the ID number (<var>1</var>-based) of the starting point of the <var>i</var>-th road and <var>Y_i</var> is that of the terminal point.\nThe last line contains two integers <var>S</var> and <var>T</var> (<var>1 \\leq S, T \\leq N</var>, <var>S \\neq T</var>, <var>1</var>-based).\n</p>\n\n<p>\nThe capacity of each road is <var>1</var>.\n\nYou can assume that <var>i \\neq j</var> implies either <var>X_i \\neq X_j</var> or <var>Y_i \\neq Y_j</var>,\nand either <var>X_i \\neq Y_j</var> or <var>X_j \\neq Y_i</var>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nIn the first line, print the maximized flow by reversing some roads.\nIn the second line, print the number <var>R</var> of the reversed roads.\nIn each of the following <var>R</var> lines, print the ID number (<var>1</var>-based) of a reversed road.\nYou may not print the same ID number more than once.\n</p>\n\n<p>\nIf there are multiple answers which would give us the same flow capacity, you can print any of them.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n2 1\n2 1\n2 1\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n1\n0\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n2 1\n1 2\n2 1\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n1\n1\n1\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n3 3\n3 2\n1 2\n3 1\n1 3\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n2\n2\n1\n3\n</pre>\n", "p01419": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>On or Off</H1>\n\n<p>\nSaving electricity is very important!\n</p>\n\n<p>\nYou are in the office represented as <var>R \\times C</var> grid  that consists of walls and rooms.\nIt is guaranteed that, for any pair of rooms in the office, there exists exactly one route between the two rooms.\nIt takes 1 unit of time for you to move to the next room (that is, the grid adjacent to the current room).\nRooms are so dark that you need to switch on a light when you enter a room.\nWhen you leave the room, you can either leave the light on, or\nof course you can switch off the light. Each room keeps consuming electric power while the light is on.\n</p>\n\n<p>\nToday you have a lot of tasks  across the office.\n Tasks are given as a list of coordinates, and they need to be done in the specified order.  \nTo save electricity, you want to finish all the tasks with the minimal amount of electric power.\n</p>\n\n<p>\nThe problem is not so easy though, because you  will consume electricity not only when light is on, but also when you switch on/off the light.\n\nLuckily, you know the cost of power consumption per  unit time and also the cost to switch on/off the light for all the rooms in the office.\nBesides, you are so smart that you don't need any  time to do the tasks themselves.\nSo please   figure out the optimal strategy  to minimize the amount of electric power consumed.\n</p>\n\n<p>\nAfter you finished all the tasks, please DO NOT leave the light on at any room.\nIt's obviously wasting!\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input contains three positive integers <var>R</var> (<var>0 \\lt R \\leq 50</var>), <var>C</var> (<var>0 \\lt C \\leq 50</var>) and <var>M</var> (<var>2 \\leq M \\leq 1000</var>).\nThe following <var>R</var> lines, which contain <var>C</var> characters each, describe the  layout of the office.\n '.' describes a room and  '#' describes a wall.\n</p>\n\n<p>\n\n\n\nThis is followed by three matrices with <var>R</var> rows, <var>C</var> columns each.\nEvery elements of the matrices are positive integers.\nThe <var>(r, c)</var> element in the first matrix describes the power consumption per unit of time for the room at the coordinate <var>(r, c)</var>.\nThe <var>(r, c)</var> element in the second matrix and the third matrix describe the cost to turn on the light and the cost to turn off the light, respectively, in the room at the coordinate <var>(r, c)</var>.\n</p>\n\n<p>\nEach of the last <var>M</var> lines contains two positive integers, which describe the coodinates of the room for you to do the task.\n</p>\n\n<p>\nNote that you cannot do  the <var>i</var>-th task if  any of the <var>j</var>-th task (<var>0 \\leq j \\leq i</var>) is left undone.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint one integer  that describes the minimal amount of electric power consumed when you finished all the tasks.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n1 3 2\n...\n1 1 1\n1 2 1\n1 1 1\n0 0\n0 2\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n7\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n3 3 5\n...\n.##\n..#\n1 1 1\n1 0 0\n1 1 0\n3 3 3\n3 0 0\n3 3 0\n5 4 5\n4 0 0\n5 4 0\n1 0\n2 1\n0 2\n2 0\n0 0\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n77\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n5 5 10\n#.###\n#....\n###.#\n..#.#\n#....\n0 12 0 0 0\n0 4 3 2 10\n0 0 0 99 0\n11 13 0 2 0\n0 1 1 2 1\n0 4 0 0 0\n0 13 8 2 4\n0 0 0 16 0\n1 1 0 2 0\n0 2 3 1 99\n0 2 0 0 0\n0 12 2 12 2\n0 0 0 3 0\n4 14 0 16 0\n0 2 14 2 90\n0 1\n3 0\n4 4\n1 4\n1 1\n4 4\n1 1\n4 3\n3 0\n1 4\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n777\n</pre>\n", "p01422": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Beautiful Currency</H1>\n\n<p>\nKM country has <var>N</var> kinds of coins and each coin has its value <var>a_i</var>.\n</p>\n\n<p>\nThe king of the  country, Kita_masa, thought that the current currency  system is poor,\nand he decided to make it <i>beautiful</i> by changing the values of some (possibly no) coins.\n</p>\n\n<p>\nA currency  system is called beautiful\nif each coin has an integer value and the (<var>i</var>+1)-th smallest value is divisible by the <var>i</var>-th smallest value for all <var>i</var> (<var>1 \\leq i \\leq N-1</var>).\n</p>\n\n<p>\nFor example, the set <var>{1, 5, 10, 50, 100, 500}</var>  is considered as a beautiful system,\nwhile the set <var>{1, 5, 10, 25, 50, 100}</var>  is NOT,\nbecause <var>25</var> is not divisible by <var>10</var>.\n</p>\n\n<p>\nSince changing the currency  system may confuse citizens,\nthe king, Kita_masa, wants to minimize the maximum value of the confusion ratios.\nHere,  the confusion ratio for the change in the <var>i</var>-th coin is defined as <var>|a_i - b_i| / a_i</var>,\nwhere <var>a_i</var> and <var>b_i</var> is the value of <var>i</var>-th coin before and after the structure changes, respectively.\n</p>\n\n<p>\nNote that Kita_masa can change the value of each existing coin,\nbut he cannot introduce new coins nor eliminate existing coins.\nAfter the modification, the values of two or more coins may coincide. \n</p>\n\n<H2>Input</H2>\n\n<p>\nEach dataset contains two lines.\nThe first line contains a single integer, <var>N</var>,\nand the second line contains <var>N</var> integers, <var>{a_i}</var>.\n</p>\n\n<p>\nYou may assume the following constraints:\n</p>\n\n<p>\n<var>1 \\leq N \\leq 20</var>\n</p>\n\n<p>\n<var>1 \\leq a_1 \\lt a_2 \\lt...  \\lt a_N \\lt 10^5</var>\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput one number  that represents the minimum of the maximum value of the confusion ratios.\nThe value may be printed with an arbitrary number of decimal digits,\nbut may not contain an absolute error greater than or equal to <var>10^{-8}</var>.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n3\n6 11 12\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n0.090909090909\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n3\n6 11 24\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n0.090909090909\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n3\n6 11 30\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n0.166666666667\n</pre>\n", "p01424": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Palindrome Generator</H1>\n\n<p>\nA palidrome craftsperson starts to work in the early morning, \nwith the clear air allowing him to polish up his palindromes.\n</p>\n\n<p>\nOn this morning, he is making his pieces to submit to the International Contest for Palindrome Craftspeople.\n</p>\n\n<p>\nBy the way, in order to make palindromes, he uses a special dictionary which contains a set of words and a set of ordered pairs of the words.\nAny words and any ordered pairs of consecutive words in his palindromes must appear in the dictionary.\n</p>\n\n<p>\nWe already have his dictionary, so let's estimate how long a palindrome he can make.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line in the data set consists of two integers <var>N</var> (<var>1 \\leq N \\leq 100</var>) and <var>M</var> (<var>0 \\leq M \\leq 1\\,000</var>).\n<var>N</var> describes the number of words in the dictionary and <var>M</var> describes the number of ordered pairs of words.\n</p>\n\n<p>\nThe following <var>N</var> lines describe the words he can use.\nThe <var>i</var>-th line (<var>1</var>-based) contains the word <var>i</var>, which consists of only lower-case letters and whose length is between <var>1</var> and <var>10</var>, inclusive.\n</p>\n\n<p>\nThe following <var>M</var> lines describe the ordered pairs of consecutive words he can use.\nThe <var>j</var>-th line (<var>1</var>-based) contains two integers <var>X_j</var> and <var>Y_j</var> (<var>1 \\leq X_j, Y_j \\leq N</var>).\n<var>X_j</var> describes the (<var>1</var>-based) index of the former word in the palindrome and <var>Y_j</var> describes that of the latter word.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the maximal length of the possible palindrome in a line.\nIf he can make no palidromes, print &quot;0&quot;.\nIf he can make arbitrary long palindromes, print &quot;-1&quot;. \n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n2 2\nab\nba\n1 1\n1 2\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n4\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n2 2\nab\nba\n1 1\n2 2\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n0\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n2 2\nab\na\n1 1\n1 2\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n-1\n</pre>\n", "p01423": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Rabbit Party</H1>\n\n<p>\nA rabbit Taro decided to hold a party and invite some friends as guests.\nHe has <var>n</var> rabbit friends, and <var>m</var> pairs of rabbits are also friends with each other.\n\nFriendliness of each pair is expressed  with a positive integer.\nIf two rabbits are not friends, their friendliness is assumed to be 0.\n</p>\n\n<p>\nWhen a rabbit is invited to the party, his satisfaction score is defined as the minimal friendliness with any other guests.\n The satisfaction of the party itself is defined as the sum of satisfaction score  for all the guests.\n</p>\n\n<p>\nTo maximize satisfaction scores for the party,  who should Taro invite?\nWrite a program to calculate the maximal possible satisfaction score for the party.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input contains two integers, <var>n</var> and <var>m</var> (<var>1 \\leq n \\leq 100</var>, <var>0 \\leq m \\leq 100</var>).\nThe rabbits are numbered from <var>1</var> to <var>n</var>.\n</p>\n\n<p>\nEach of the following <var>m</var> lines has three integers, <var>u</var>, <var>v</var> and <var>f</var>.\n<var>u</var> and <var>v</var> (<var>1 \\leq u, v \\leq n</var>, <var>u \\neq v</var>, <var>1 \\leq f \\leq 1,000,000</var>) stands for  the rabbits' number, and <var>f</var> stands for their friendliness.\n</p>\n\n<p>\nYou may assume that the friendliness of  a pair of rabbits will be given at most once.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the maximal possible satisfaction score of the party in a line.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n3 3\n1 2 3\n2 3 1\n3 1 2\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n6\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n2 1\n1 2 5\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n10\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n1 0\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n0\n</pre>\n\n<H2>Sample Input 4</H2>\n\n<pre>\n4 5\n1 2 4\n1 3 3\n2 3 7\n2 4 5\n3 4 6\n</pre>\n\n<H2>Output for the Sample Input 4</H2>\n\n<pre>\n16\n</pre>\n", "p01426": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Vector Compression</H1>\n\n<p>\n\n\n\nYou are recording a result of a secret experiment, which consists of a large set of <var>N</var>-dimensional vectors.\nSince the result may become very large, you are thinking of\ncompressing it. Fortunately you already have a good compression method\nfor vectors with small absolute values, all you have to do is to\npreprocess the vectors and make them small.\n</p>\n\n<p>\n\n\n\n\n\n\nYou can record the set of vectors in any order you like.\nLet's assume you process them in the order <var>v_1</var>, <var>v_2</var>,..., <var>v_M</var>.\nEach vector <var>v_i</var> is recorded either <i>as is</i>, or as a difference vector.\nWhen it is recorded as a difference,\nyou can arbitrarily pick up an already chosen vector <var>v_j (j&lt;i)</var> and a real value <var>r</var>.\nThen the actual vector value recorded is <var>(v_i - r v_j)</var>.\nThe values of <var>r</var> and <var>j</var> do not affect the compression ratio so much, so you don't have to care about them.\n</p>\n\n<p>\nGiven  a set of vectors,\nyour task is to write a program  that calculates the minimum sum of the squared length of the  recorded vectors.\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is like the following style.\n</p>\n\n<p>\n<var>N</var> <var>M</var><br/>\n<var>v_{1,1}</var> <var>v_{1,2}</var> <var>...</var> <var>v_{1,N}</var><br/>\n<var>...</var><br/>\n<var>v_{M,1}</var> <var>v_{M,2}</var> <var>...</var> <var>v_{M,N}</var><br/>\n</p>\n\n<p>\nThe first line contains two integers <var>N</var> and <var>M</var> (<var>1 \\leq N, M \\leq 100</var>),\nwhere <var>N</var> is the dimension of each vector,\nand <var>M</var> is the number of the vectors.\nEach of the following <var>M</var> lines contains <var>N</var> floating point values <var>v_{i,j}</var> (<var>-1.0 \\leq v_{i,j} \\leq 1.0</var>)\nwhich represents the <var>j</var>-th element value of the <var>i</var>-th vector.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the minimum sum of the squared length of the  recorded vectors. \nThe output should not contain an absolute error greater than <var>10^{-6}</var>.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n2 3\n1.0 1.0\n-1.0 0.0\n0.5 0.5\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n1.0\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n1 1\n1.0\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n1.0\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n4 3\n1.0 1.0 0.0 0.0\n-1.0 0.0 -1.0 0.0\n0.5 0.5 0.5 0.5\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n3.0\n</pre>\n", "p01438": "\n<H1><font color=\"#000\">Problem B:</font> Butterfly</H1>\n\n<p>\nClaire is a man-eater. She's a real man-eater. She's going around with dozens of guys. She's dating all the time. And one day she found some conflicts in her date schedule. D'oh!\n</p>\n\n<p>\nSo she needs to pick some dates and give the others up. The dates are set by hours like 13:00 to 15:00. She may have more than one date with a guy. For example, she can have dates with Adam from 10:00 to 12:00 and from 14:00 to 16:00 and with Bob from 12:00 to 13:00 and from 18:00 to 20:00. She can have these dates as long as there is no overlap of time. Time of traveling, time of make-up, trouble from love triangles, and the likes are not of her concern. Thus she can keep all the dates with Adam and Bob in the previous example. All dates are set between 6:00 and 22:00 on the same day.\n</p>\n\n<p>\nShe wants to get the maximum amount of satisfaction in total. Each guy gives her some satisfaction if he has all scheduled dates. Let's say, for example, Adam's satisfaction is 100 and Bob's satisfaction is 200. Then, since she can make it with both guys, she can get 300 in total. Your task is to write a program to satisfy her demand. Then she could spend a few hours with\nyou... if you really want.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a sequence of datasets. Each dataset has the following format:\n</p>\n\n<p>\n<i>N</i><br>\n<i>Guy</i><sub>1</sub><br>\n...<br>\n<i>Guy</i><sub><i>N</i></sub><br>\n</p>\n\n<p>\nThe first line of the input contains an integer N (1 &le; <i>N</i> &le; 100), the number of guys. Then there come the descriptions of guys. Each description is given in this format:\n</p>\n\n<p>\n<i>M L</i><br>\n<i>S</i><sub>1</sub> <i>E</i><sub>1</sub><br>\n...<br>\n<i>S</i><sub><i>M</i></sub> <i>E</i><sub><i>M</i></sub><br>\n</p>\n\n<p>\nThe first line contains two integers <i>M<sub>i</sub></i> (1 &le; <i>M<sub>i</sub></i> &le; 16) and <i>L<sub>i</sub></i> (1 &le; <i>L<sub>i</sub></i> &le; 100,000,000), the number of dates set for the guy and the satisfaction she would get from him respectively. Then <i>M</i> lines follow. The <i>i</i>-th line contains two integers <i>S<sub>i</sub></i> and <i>E<sub>i</sub></i> (6 &le; <i>S<sub>i</sub></i> &lt; <i>E<sub>i</sub></i> &le; 22), the starting and ending time of the <i>i</i>-th date.\n</p>\n\n<p>\nThe end of input is indicated by <i>N</i> = 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output in a line the maximum amount of satisfaction she can get.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2\n2 100\n10 12\n14 16\n2 200\n12 13\n18 20\n4\n1 100\n6 22\n1 1000\n6 22\n1 10000\n6 22\n1 100000\n6 22\n16\n1 100000000\n6 7\n1 100000000\n7 8\n1 100000000\n8 9\n1 100000000\n9 10\n1 100000000\n10 11\n1 100000000\n11 12\n1 100000000\n12 13\n1 100000000\n13 14\n1 100000000\n14 15\n1 100000000\n15 16\n1 100000000\n16 17\n1 100000000\n17 18\n1 100000000\n18 19\n1 100000000\n19 20\n1 100000000\n20 21\n1 100000000\n21 22\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n300\n100000\n1600000000\n</pre>\n", "p01440": "\n<H1><font color=\"#000\">Problem D:</font> Revenge of Champernowne Constant</H1>\n\n<p>\nChampernowne constant is an irrational number. Its decimal representation starts with \"0.\", followed by concatenation of all positive integers in the increasing order.\n</p>\n\n<p>\nYou will be given a sequence <i>S</i> which consists of decimal digits. Your task is to write a program which computes the position of the first occurrence of S in Champernowne constant after the decimal point.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input has multiple test cases. Each line of the input has one digit sequence. The input is terminated by a line consisting only of <span>#</span>.\n</p>\n\n<p>\nIt is guaranteed that each sequence has at least one digit and its length is less than or equal to 100.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each sequence, output one decimal integer described above. You can assume each output value is less than 10<sup>16</sup>.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n45678\n67891011\n21\n314159265358979\n#\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n4\n6\n15\n2012778692735799\n</pre>\n", "p01442": "\n<H1><font color=\"#000\">Problem F:</font> Mysterious Maze</H1>\n\n<p>\nA robot in a two-dimensional maze again. The maze has an entrance and an exit this time, though.\n</p>\n\n<p>\nJust as in the previous problem, the maze is made up of <i>H</i> &times; <i>W</i> grid cells, its upper side faces north, and each cell is either empty or wall. Unlike the previous, on the other hand, one of the empty cells is connected to the entrance and another to the exit.\n</p>\n\n<p>\nThe robot is rather complex - there is some control, but not full. It is associated with a controller that has two buttons, namely <i>forward</i> and <i>turn</i>. The forward button moves the robot forward to the next cell, if possible. The robot can not move into a wall nor outside the maze. The turn button turns the robot as <i>programmed</i>. Here the program is a finite sequence of <i>N</i> commands, each of which is either 'L' (indicating a left turn) or 'R' (a right turn). The first turn follows the first command; the second turn follows the second command; similar for the following turns. The turn button stops working once the commands are exhausted; the forward button still works in such a case though. The robot always turns by 90 degrees at once.\n</p>\n\n<p>\nThe robot is initially put on the entrance cell, directed to the north. Your mission is to determine whether it can reach the exit cell if controlled properly.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is a sequence of datasets. Each dataset is formatted as follows.\n</p>\n\n<p>\n<i>H W N</i><br>\n<i>s</i><sub>1</sub> ... <i>s<sub>N</sub></i><br>\n<i>c</i><sub>1,1</sub><i>c</i><sub>1,2</sub>...<i>c</i><sub>1,<i>W</i></sub><br>\n...<br>\n<i>c</i><sub><i>H</i>,1</sub><i>c</i><sub><i>H</i>,2</sub>...<i>c</i><sub><i>H</i>,<i>W</i></sub><br>\n</p>\n\n<p>\nThe first line of a dataset contains three integers <i>H</i>, <i>W</i> and <i>N</i> (1 &le; <i>H</i>, <i>W</i> &le; 1,000, 1 &le; <i>N</i> &le; 1,000,000).\n</p>\n\n<p>\nThe second line contains a program of <i>N</i> commands.\n</p>\n\n<p>\nEach of the following <i>H</i> lines contains exactly <i>W</i> characters. Each of these characters represents a cell of the maze. \"<span>.</span>\" indicates empty, \"<span>#</span>\" indicates a wall, \"<span>S</span>\" indicates an entrance, and \"<span>G</span>\" indicates an exit. There is exactly one entrance cell and one exit cell.\n</p>\n\n<p>\nThe end of input is indicated by a line with three zeros.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output whether the robot can reach the exit in a line: \"<span>Yes</span>\" if it can or \"<span>No</span>\" otherwise (without quotes).\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n2 2 1\nL\nG.\n#S\n2 2 2\nRR\nG.\n.S\n3 3 6\nLLLLLL\nG#.\n...\n.#S\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nYes\nNo\nYes\n</pre>\n", "p01443": "\n<H1><font color=\"#000\">Problem G:</font> Number Sorting</H1>\n\n<p>\nConsider sets of natural numbers. Some sets can be sorted in the same order numerically and lexicographically. {2, 27, 3125, 9000} is one example of such sets; {2, 27, 243} is not since lexicographic sorting would yield {2, 243, 27}.\n</p>\n\n<p>\nYour task is to write a program that, for the set of integers in a given range [<i>A</i>,<i>B</i>] (i.e. between <i>A</i> and <i>B</i> inclusive), counts the number of non-empty subsets satisfying the above property. Since the resulting number is expected to be very huge, your program should output the number in modulo <i>P</i> given as the input.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset consists of a line with three integers <i>A</i>, <i>B</i>, and <i>P</i> separated by a space. These numbers satisfy the following conditions: 1 &le; <i>A</i> &le; 1,000,000,000, 0 &le; <i>B</i> - <i>A</i> &lt; 100,000, 1 &le; <i>P</i> &le; 1,000,000,000.\n</p>\n\n<p>\nThe end of input is indicated by a line with three zeros.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output the number of the subsets in modulo <i>P</i>.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n1 10 1000\n1 100000 1000000000\n999999999 1000099998 1000000000\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n513\n899507743\n941554688\n</pre>\n", "p01444": "\n<H1><font color=\"#000\">Problem H:</font> Sky Jump</H1>\n\n<p>\nDr. Kay Em, a genius scientist, developed a new missile named \"Ikan-no-i.\" This missile has <i>N</i> jet engines. When the <i>i</i>-th engine is ignited, the missile's velocity changes to (<i>vx<sub>i</sub></i>, <i>vy<sub>i</sub></i>) immediately.\n</p>\n\n<p>\nYour task is to determine whether the missile can reach the given target point (<i>X</i>, <i>Y</i> ). The missile can be considered as a mass point in a two-dimensional plane with the <i>y</i>-axis pointing up, affected by the gravity of 9.8 downward (i.e. the negative <i>y</i>-direction) and initially set at the origin (0, 0). The engines can be ignited at any time in any order. Still, note that at least one of them needs to be ignited to get the missile launched.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format.\n</p>\n<p>\n<i>N</i><br>\n<i>vx</i><sub>1</sub> <i>vy</i><sub>1</sub><br>\n<i>vx</i><sub>2</sub> <i>vy</i><sub>2</sub><br>\n...<br>\n<i>vx</i><sub><i>N</i></sub> <i>vy</i><sub><i>N</i></sub><br>\n<i>X Y</i><br>\n</p>\n\n<p>\nAll values are integers and meet the following constraints: 1 &le; <i>N</i> &le; 1,000, 0 &lt; <i>vx<sub>i</sub></i> &le; 1,000, -1,000 &le; <i>vy<sub>i</sub></i> &le; 1,000, 0 &lt; <i>X</i> &le; 1,000, -1,000 &le; <i>Y</i> &le; 1,000.\n</p>\n\n<p>\nThe end of input is indicated by a line with a single zero.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, output whether the missile can reach the target point in a line: \"<span>Yes</span>\" if it can, \"<span>No</span>\" otherwise.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n1\n1 1\n10 -480\n2\n6 7\n5 5\n4 1\n3\n10 5\n4 4\n8 4\n2 0\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\nYes\nYes\nNo\n</pre>\n", "p01445": "\n<H1><font color=\"#000\">Problem I:</font> Mobile Network</H1>\n\n<p>\nThe trafic on the Internet is increasing these days due to smartphones. The wireless carriers\nhave to enhance their network infrastructure.\n</p>\n\n<p>\nThe network of a wireless carrier consists of a number of base stations and lines. Each line connects two base stations bi-directionally. The bandwidth of a line increases every year and is given by a polynomial <i>f</i>(<i>x</i>) of the year <i>x</i>.\n</p>\n\n<p>\nYour task is, given the network structure, to write a program to calculate the maximal bandwidth between the 1-st and <i>N</i>-th base stations as a polynomial of <i>x</i>.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset has the following format:\n</p>\n\n<p>\n<i>N M</i><br>\n<i>u</i><sub>1</sub> <i>v</i><sub>1</sub> <i>p</i><sub>1</sub><br>\n...<br>\n<i>u</i><sub><i>M</i></sub> <i>v</i><sub><i>M</i></sub> <i>p</i><sub><i>M</i></sub><br>\n</p>\n\n<p>\nThe first line of each dataset contains two integers <i>N</i> (2 &le; <i>N</i> &le; 50) and <i>M</i> (0 &le; <i>M</i> &le; 500), which indicates the number of base stations and lines respectively. The following <i>M</i> lines describe the network structure. The <i>i</i>-th of them corresponds to the <i>i</i>-th network line and contains two integers <i>u<sub>i</sub></i> and <i>v<sub>i</sub></i> and a polynomial <i>p<sub>i</sub></i>. <i>u<sub>i</sub></i> and <i>v<sub>i</sub></i> indicate the indices of base stations (1 &le; <i>u<sub>i</sub></i>, <i>v<sub>i</sub></i> &le; <i>N</i>); <i>p<sub>i</sub></i> indicates the network bandwidth.\n</p>\n\n<p>\nEach polynomial has the form of:\n</p>\n\n<p>\n<i>a<sub>L</sub>x<sup>L</sup></i> + <i>a<sub>L</sub></i>-1</sub><i>x</i><sup><i>L</i>-1</sup> + ... + <i>a</i><sub>2</sub><i>x</i><sup>2</sup> + <i>a</i><sub>1</sub><i>x</i> + <i>a</i><sub>0</sub>\n</p>\n\n<p>\nwhere <i>L</i> (0 &le; <i>L</i> &le; 50) is the degree and <i>a<sub>i</sub></i>'s (0 &le; <i>i</i> &le; <i>L</i>, 0 &le; <i>a<sub>i</sub></i> &le; 100) are the coefficients. In the input,\n</p>\n\n\n<ul>\n<li>each term <i>a<sub>i</sub>x<sup>i</sup></i> (for <i>i</i> &ge; 2) is represented as &lt;<i>a<sub>i</sub></i>&gt;<i>x</i>^&lt;<i>i</i>&gt;\n</li>\n<li>the linear term (<i>a</i><sub>1</sub><i>x</i>) is represented as &lt;<i>a</i><sub>1</sub>&gt;<i>x</i>;\n</li>\n\n<li> the constant (<i>a</i><sub>0</sub>) is represented just by digits;\n</li>\n\n<li> these terms are given in the strictly decreasing order of the degrees and connected by a\nplus sign (\"<span>+</span>\");\n</li>\n\n<li> just like the standard notations, the &lt;<i>a<sub>i</sub></i>&gt; is omitted if <i>a<sub>i</sub></i> = 1 for non-constant terms;\n</li>\n\n<li> similarly, the entire term is omitted if <i>a<sub>i</sub></i> = 0 for any terms; and\n</li>\n\n<li>the polynomial representations contain no space or characters other than digits, \"x\", \"^\", and \"+\".\n</li>\n\n</ul>\n\n<p>\nFor example, 2<i>x</i><sup>2</sup> + 3<i>x</i> + 5 is represented as <span>2x^2+3x+5</span>; 2<i>x</i><sup>3</sup> + <i>x</i> is represented as <span>2x^3+x</span>, not <span>2x^3+0x^2+1x+0</span> or the like. No polynomial is a constant zero, i.e. the one with all the coefficients being zero.\n</p>\n\n\n<p>\nThe end of input is indicated by a line with two zeros. This line is not part of any dataset.\n</ul>\n\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the maximal bandwidth as a polynomial of <i>x</i>. The polynomial should be represented in the same way as the input format except that a constant zero is possible and should be represented by \"0\" (without quotes).\n</p>\n\n<H2>Sample Input</H2>\n<pre>\n3 3\n1 2 x+2\n2 3 2x+1\n3 1 x+1\n2 0\n3 2\n1 2 x\n2 3 2\n4 3\n1 2 x^3+2x^2+3x+4\n2 3 x^2+2x+3\n3 4 x+2\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n<pre>\n2x+3\n0\n2\nx+2\n</pre>\n", "p01457": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Carpenters' Language</H1>\n\n<p>\nInternational Carpenters Professionals Company (ICPC) is a top construction company with a lot of expert carpenters.\nWhat makes ICPC a top company is their original language.\n</p>\n\n<p>\nThe syntax of the language is simply given in CFG as follows:\n</p>\n\n<pre>\nS -&gt; SS | (S) | )S( | &epsilon;\n</pre>\n\n<p>\nIn other words, a right parenthesis can be closed by a left parenthesis and a left parenthesis can be closed by a right parenthesis in this language.\n</p>\n\n<p>\nAlex, a grad student mastering linguistics, decided to study ICPC's language. \nAs a first step of the study, he needs to judge whether a text is well-formed in the language or not.\nThen, he asked you, a great programmer, to write a program for the judgement.\n</p>\n\n<p>\nAlex's request is as follows: You have an empty string S in the beginning, and construct longer string by inserting a sequence of '(' or ')' into the string.\nYou will receive <var>q</var> queries, each of which consists of three elements <var>(p, c, n)</var>, where <var>p</var> is \nthe position to insert, <var>n</var> is the number of characters to insert and <var>c</var> is either '(' or ')', the character to insert.\nFor each query, your program should insert <var>c</var> repeated by <var>n</var> times into the <var>p</var>-th position of S from the beginning.\nAlso it should output, after performing each insert operation, &quot;Yes&quot; if S is in the language and &quot;No&quot; if S is not in the language.\n</p>\n\n<p>\nPlease help Alex to support his study, otherwise he will fail to graduate the college.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line contains one integer <var>q</var> (<var>1 \\leq q \\leq 10^5</var>) indicating the number of queries, follows \n<var>q</var> lines of three elements, <var>p_i</var>, <var>c_i</var>, <var>n_i</var>, separated by a single space (<var>1 \\leq i \\leq q</var>, <var>c_i = '(' or ')'</var>, \n<var>0 \\leq p_i \\leq </var> length of S before <var>i</var>-th query, <var>1 \\leq n \\leq 2^{20}</var>).\nIt is guaranteed that all the queries in the input are valid.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each query, output &quot;Yes&quot; if S is in the language and &quot;No&quot; if S is not in the language.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n3\n0 ( 10\n10 ) 5\n10 ) 5 \n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\nNo\nNo\nYes\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n3\n0 ) 10\n10 ( 5\n10 ( 5\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\nNo\nNo\nYes\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n3\n0 ( 10\n10 ) 20\n0 ( 10\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\nNo\nNo\nYes\n</pre>\n", "p01458": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Kth Sentence</H1>\n\n<p>\nA student, Kita_masa, is taking an English examination.\nIn this examination, he has to write a sentence of length <var>m</var>.\n</p>\n\n<p>\nSince he completely forgot the English grammar, he decided to consider all sentences of length <var>m</var> constructed by concatenating the words he knows and write the <var>K</var>-th sentence among the candidates sorted in lexicographic order.\nHe believes that it must be the correct sentence because <var>K</var> is today's lucky number for him.\n</p>\n\n<p>\nEach word may be used multiple times (or it's also fine not to use it at all) and the sentence does not contain any extra character between words.\nTwo sentences are considered different if the order of the words are different even if the concatenation resulted in the same string.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line contains three integers <var>n</var> (<var>1 \\leq n \\leq 100</var>), <var>m</var> (<var>1 \\leq m \\leq 2000</var>) and <var>K</var> (<var>1 \\leq K \\leq 10^{18}</var>), separated by a single space.\nEach of the following <var>n</var> lines contains a word that Kita_masa knows.\nThe length of each word is between 1 and 200, inclusive, and the words contain only lowercase letters.\nYou may assume all the words given are distinct.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the <var>K</var>-th (1-based) sentence of length <var>m</var> in lexicographic order.\nIf there is no such a sentence, print &quot;-&quot;.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n2 10 2\nhello\nworld\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\nhelloworld\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n3 3 6\na\naa\nb\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\naba\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n2 59 1000000000000000000\na\nb\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n-\n</pre>\n", "p01460": "<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Matrix Operation</H1>\n\n<p>\nYou are a student looking for a job.\nToday you  had an employment examination for an IT company.\nThey  asked you to write an efficient program to  perform several operations.\nFirst, they showed you an <var>N \\times N</var> square matrix and a list of operations.\nAll operations  but one modify the matrix, and the last operation outputs the character in  a specified cell.\nPlease remember that you need to  output the final matrix after you  finish all the operations.\n</p>\n\n<p>\nFollowings are the detail of the operations:\n</p>\n\n<dl>\n<dt> WR r c v </dt><dd> (Write operation) write a integer v into the cell (r,c) (<var>1 \\leq v \\leq 1,000,000</var>)</dd>\n<dt> CP r1 c1 r2 c2 </dt><dd> (Copy operation) copy a character in the cell (r1,c1) into the cell (r2,c2)</dd>\n<dt> SR r1 r2 </dt><dd> (Swap Row operation) swap the r1-th row and r2-th row</dd>\n<dt> SC c1 c2 </dt><dd> (Swap Column operation) swap the c1-th column and c2-th column</dd>\n<dt> RL </dt><dd> (Rotate Left operation) rotate the whole matrix in counter-clockwise direction by 90 degrees</dd>\n<dt> RR </dt><dd> (Rotate Right operation) rotate the whole matrix in clockwise direction by 90 degrees</dd>\n<dt> RH </dt><dd> (Reflect Horizontal operation) reverse the order of the rows</dd>\n<dt> RV </dt><dd> (Reflect Vertical operation) reverse the order of the columns</dd>\n</dl>\n\n<p>\n\n\n\n\n\n\n\n\n\n</p>\n\n<H2>Input</H2>\n\n<p>\nFirst line of each testcase contains nine integers.\nFirst two integers in the line, N and Q, indicate the size of matrix and the number of queries, respectively <var>(1 \\leq N,Q \\leq 40,000)</var>.\nNext three integers, A B, and C, are coefficients to calculate values in initial matrix <var>(1 \\leq A,B,C \\leq 1,000,000)</var>,\nand they are used as follows: <var>A_{r,c} = (r * A + c * B) mod C</var> where r and c are row and column indices, respectively <var>(1\\leq r,c\\leq N)</var>.\nLast four integers, D, E, F, and G, are coefficients to compute the final hash value mentioned in the next section <var>(1 \\leq D \\leq E \\leq N, 1 \\leq F \\leq G \\leq N, E - D \\leq 1,000, G - F \\leq 1,000)</var>.\nEach of next Q lines contains one operation in the format as described above.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput a hash value h computed from the final matrix B by using following pseudo source code.\n</p>\n\n<pre>\nh &lt;- 314159265\nfor r = D...E\n  for c = F...G\n    h &lt;- (31 * h + B_{r,c}) mod 1,000,000,007\n</pre>\n\n<p>\nwhere &quot;&lt;-&quot; is a destructive assignment operator, &quot;for i = S...T&quot; indicates a loop for i from S to T (both inclusive), and &quot;mod&quot; is a remainder operation.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n2 1 3 6 12 1 2 1 2\nWR 1 1 1\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n676573821\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n2 1 3 6 12 1 2 1 2\nRL\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n676636559\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n2 1 3 6 12 1 2 1 2\nRH\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n676547189\n</pre>\n\n<H2>Sample Input 4</H2>\n\n<pre>\n39989 6 999983 999979 999961 1 1000 1 1000\nSR 1 39989\nSC 1 39989\nRL\nRH\nRR\nRV\n</pre>\n\n<H2>Output for the Sample Input 4</H2>\n\n<pre>\n458797120\n</pre>\n\n", "p01461": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Multi-ending Story</H1>\n\n<p>\nYou are a programmer who loves bishojo games (a sub-genre of dating simulation games).\nA game, which is titled &quot;I * C * P * C!&quot; and was released yesterday, has arrived to you just now.\nThis game has multiple endings. When you complete all of those endings, you can get a special figure of the main heroine, Sakuya.\nSo, you want to hurry and play the game!\nBut, let's calm down a bit and think how to complete all of the endings in the shortest time first.\n</p>\n\n<p>\nIn fact, you have a special skill that allows you to know the structure of branching points of games.\nBy using the skill, you have found out that all of the branching points in this game are to select two choices &quot;Yes&quot; or &quot;No&quot;, and once a different choice is taken the branched stories flow to different endings; they won't converge any more, like a binary tree.\nYou also noticed that it takes exactly one minute to proceed the game from a branching point to another branching point or to an ending.\nIn addition, you can assume it only takes negligible time to return to the beginning of the game (``reset'') and to play from the beginning to the first branching point. \n</p>\n\n<p>\nThe game has an additional feature called &quot;Quick Save&quot;, which can significantly reduce the playing time for completion.\nThe feature allows you to record the point where you are currently playing and return there at any time later.\nYou can record any number of times, but you can hold only the last recorded point.\nThat is, when you use Quick Save, you overwrite the previous record. If you want to return to the overwritten point, you must play the game from the beginning once again.\n</p>\n\n<p>\nWell, let's estimate how long it will take for completing all of the endings in the shortest time.\n</p>\n\n<H2>Input</H2>\n\n<p>\nA data set is given in the following format.\n</p>\n\n<p>\nThe first line of the data set contains one integer <var>N</var> (<var>2 \\leq N \\leq 500{,}000</var>), which denotes the number of the endings in this game.\nThe following <var>N-1</var> lines describe the branching points.\nThe <var>i</var>-th line describes the branching point of ID number i and contains two integers <var>Yes_i</var> and <var>No_i</var> (<var>i + 1 \\leq Yes_i, No_i \\leq N</var>), which denote the ID numbers of the next branching points when you select Yes or No respectively.\n<var>Yes_i = N</var> means that you can reach an ending if you select Yes, and so for <var>No_i = N</var>.\nThe branching point with ID 1 is the first branching point.\nThe branching points with ID between 2 and <var>N-1</var> (inclusive) appear exactly once in <var>Yes_i</var>'s and <var>No_i</var>'s.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the shortest time in a line.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n4\n2 3\n4 4\n4 4\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n6\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n5\n5 2\n3 5\n5 4\n5 5\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n8\n</pre>\n", "p01462": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Network Reliability</H1>\n\n<p>\nAn undirected graph is given.\nEach edge of the graph disappears with a constant probability.\nCalculate the probability with which the remained graph is connected.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line contains three integers <var>N</var> (<var>1 \\leq N \\leq 14</var>), <var>M</var> (<var>0 \\leq M \\leq 100</var>) and <var>P</var> (<var>0 \\leq P \\leq 100</var>), separated by a single space.\n<var>N</var> is the number of the vertices and <var>M</var> is the number of the edges. <var>P</var> is the probability represented by a percentage.\n</p>\n\n<p>\nThe following <var>M</var> lines describe the edges.\nEach line contains two integers <var>v_i</var> and <var>u_i</var> (<var>1 \\leq u_i, v_i \\leq N</var>).\n(<var>u_i, v_i</var>) indicates the edge that connects the two vertices <var>u_i</var> and <var>v_i</var>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput a line containing the probability with which the remained graph is connected.\nYour program may output an arbitrary number of digits after the decimal point. However, the absolute error should be <var>10^{-9}</var> or less.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n3 3 50\n1 2\n2 3\n3 1\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n0.500000000000\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n3 3 10\n1 2\n2 3\n3 1\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n0.972000000000\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n4 5 50\n1 2\n2 3\n3 4\n4 1\n1 3\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n0.437500000000\n</pre>\n", "p01463": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Runaway Domino</H1>\n\n<p>\n``Domino effect'' is a famous play using dominoes.\nA player sets up a chain of dominoes stood.\nAfter a chain is formed, the player topples one end of the dominoes.\nThe first domino topples the second domino, the second topples the third and so on.\n</p>\n\n<p>\nYou are playing domino effect.\nBefore you finish to set up a chain of domino,\na domino block started to topple, unfortunately.\nYou have to stop the toppling as soon as possible.\n</p>\n\n<p>\nThe domino chain forms a polygonal line on a two-dimensional coordinate system without self intersections.\nThe toppling starts from a certain point on the domino chain\nand continues toward the both end of the chain.\nIf the toppling starts on an end of the chain, the toppling continue toward the other end.\nThe toppling of a direction stops when you touch the toppling point or the toppling reaches an end of the domino chain.\n</p>\n\n<p>\nYou can assume that:\n</p>\n\n<ul>\n<li> You are a point without volume on the two-dimensional coordinate system.</li>\n<li> The toppling stops soon after touching the toppling point.</li>\n<li> You can step over the domino chain without toppling it.</li>\n</ul>\n\n<p>\nYou will given the form of the domino chain, the starting point of the toppling,\nyour coordinates when the toppling started, the toppling velocity and the your velocity.\nYou are task is to write a program that calculates your optimal move to stop the toppling at the earliest timing and\ncalculates the minimum time to stop the toppling.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line contains one integer <var>N</var>,\nwhich denotes the number of vertices in the polygonal line of the domino chain <var>(2 \\leq N \\leq 1000)</var>.\nThen <var>N</var> lines follow, each consists of two integers <var>x_{i}</var> and <var>y_{i}</var>,\nwhich denote the coordinates of the <var>i</var>-th vertex <var>(-10,000 \\leq x, y \\leq 10000)</var>.\nThe next line consists of three integers <var>x_{t}</var>, <var>y_{t}</var> and <var>v_{t}</var>,\nwhich denote the coordinates of the starting point and the velocity of the toppling.\nThe last line consists of three integers <var>x_{p}</var>, <var>y_{p}</var> and <var>v_{p}</var>,\nwhich denotes the coordinates of you when the toppling started and the velocity <var>(1 \\leq v_{t} \\lt v_{p} \\leq 10)</var>.\nYou may assume that the starting point of the toppling lies on the polygonal line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the minimum time to stop the toppling.\nThe output must have a relative or absolute error less than <var>10^{-6}</var>.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n2\n0 0\n15 0\n5 0 1\n10 10 2\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n5.0\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n3\n-10 0\n0 0\n0 10\n-1 0 1\n3 0 2\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n4.072027\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n2\n0 0\n10 0\n5 0 1\n9 0 3 \n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n2.0\n</pre>\n", "p01465": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Testing Circuits</H1>\n\n<p>\nA Boolean expression is given.\nIn the expression, each variable appears exactly once.\nCalculate the number of variable assignments that make the expression evaluate to true.\n</p>\n\n<H2>Input</H2>\n\n<p>\nA data set consists of only one line.\nThe Boolean expression is given by a string which consists of digits, x, (, ), |, &amp;, and ~.\nOther characters such as spaces are not contained.\nThe expression never exceeds 1,000,000 characters.\nThe grammar of the expressions is given by the following BNF.\n</p>\n\n<pre>\n&lt;expression&gt; ::= &lt;term&gt; | &lt;expression&gt; &quot;|&quot; &lt;term&gt;\n&lt;term&gt; ::= &lt;factor&gt; | &lt;term&gt; &quot;&amp;&quot; &lt;factor&gt;\n&lt;factor&gt; ::= &lt;variable&gt; | &quot;~&quot; &lt;factor&gt; | &quot;(&quot; &lt;expression&gt; &quot;)&quot;\n&lt;variable&gt; ::= &quot;x&quot; &lt;number&gt;\n&lt;number&gt; ::= &quot;1&quot; | &quot;2&quot; |... | &quot;999999&quot; | &quot;1000000&quot;\n</pre>\n\n<p>\nThe expression obeys this syntax and thus you do not have to care about grammatical errors.\nWhen the expression contains N variables, each variable in {x1, x2,..., xN} appears exactly once.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput a line containing the number of variable assignments that make the expression evaluate to true in modulo 1,000,000,007.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n(x1&amp;x2)\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n1\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n(x1&amp;x2)|(x3&amp;x4)|(~(x5|x6)&amp;(x7&amp;x8))\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n121\n</pre>\n", "p01466": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>World Trip</H1>\n\n<p>\nKita_masa is planning a trip around the world.\nThis world has <var>N</var> countries and the country <var>i</var> has <var>M_i</var> cities.\nKita_masa wants to visit every city exactly once, and return back to the starting city.\n</p>\n\n<p>\nIn this world, people can travel only by airplane.\nThere are two kinds of airlines: domestic and international lines.\nSince international airports require special facilities such as customs and passport control,\nonly a few cities in each country have international airports.\n</p>\n\n<p>\nYou are given a list of all flight routes in this world and prices for each route.\nNow it's time to calculate the cheapest route for Kita_masa's world trip!\n</p>\n\n<H2>Input</H2>\n\n<p>\n\n\n</p>\n\n<p>\nThe first line contains two integers <var>N</var> and <var>K</var>, which represent the number of countries and the number of flight routes, respectively.\nThe second line contains <var>N</var> integers, and the <var>i</var>-th integer <var>M_i</var> represents the number of cities in the country <var>i</var>.\nThe third line contains <var>N</var> integers too, and the <var>i</var>-th integer <var>F_i</var> represents the number of international airports in the country <var>i</var>.\nEach of the following <var>K</var> lines contains five integers [Country 1] [City 1] [Country 2] [City 2] [Price].\nThis means that, there is a bi-directional flight route between the [City 1] in [Country 1] and the [City 2] in [Country 2], and its price is [Price].\n</p>\n\n<p>\nNote that cities in each country are numbered from 1, and the cities whose city number is smaller or equal to <var>F_i</var> have international airports.\nThat is, if there is a flight route between the city <var>c_1</var> in the country <var>n_1</var> and the city <var>c_2</var> in the country <var>n_2</var> with <var>n_1 \\neq n_2</var>, it must be <var>c_1 \\leq F_{n_1}</var> and <var>c_2 \\leq F_{n_2}</var>.\nYou can assume that there's no flight route which departs from one city and flies back to the same city, and that at most one flight route exists in this world for each pair of cities.\n</p>\n\n<p>\nThe following constraints hold for each dataset:\n</p>\n\n<ul>\n<li> <var>1 \\leq N \\leq 15</var></li>\n<li> <var>1 \\leq M_i \\leq 15</var></li>\n<li> <var>1 \\leq F_i \\leq 4</var></li>\n<li> <var>sum(F_i) \\leq 15</var></li>\n<li> <var>1 \\leq Price \\leq 10,000</var></li>\n</ul>\n\n<H2>Output</H2>\n\n<p>\nPrint a line that contains a single integer representing the minimum price to make a world trip.\n</p>\n\n<p>\nIf such a trip is impossible, print -1 instead.\n</p>\n\n<H2>Sample Input 1</H2>\n\n<pre>\n4 6\n1 1 1 1\n1 1 1 1\n1 1 2 1 1\n1 1 3 1 2\n1 1 4 1 1\n2 1 3 1 1\n2 1 4 1 2\n3 1 4 1 1\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n\n<pre>\n4\n</pre>\n\n<H2>Sample Input 2</H2>\n\n<pre>\n2 16\n4 4\n2 2\n1 1 1 2 1\n1 1 1 3 2\n1 1 1 4 1\n1 2 1 3 1\n1 2 1 4 2\n1 3 1 4 1\n2 1 2 2 1\n2 1 2 3 2\n2 1 2 4 1\n2 2 2 3 1\n2 2 2 4 2\n2 3 2 4 1\n1 1 2 1 1\n1 1 2 2 2\n1 2 2 1 2\n1 2 2 2 1\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n\n<pre>\n8\n</pre>\n\n<H2>Sample Input 3</H2>\n\n<pre>\n2 2\n2 1\n1 1\n1 1 1 2 1\n1 1 2 1 1\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n\n<pre>\n-1\n</pre>\n", "p01496": "\n<H1><font color=\"#000\">Problem A: </font>Bicube</H1>\n\n<p>\nMary Thomas has a number of sheets of squared paper. Some of squares are painted either in black or some <i>colorful</i> color (such as red and blue) on the front side. Cutting off the unpainted part, she will have eight opened-up unit cubes. A unit cube here refers to a cube of which each face consists of one square.\n</p>\n\n<p>\nShe is going to build those eight unit cubes with the front side exposed and then a bicube with them. A bicube is a cube of the size 2 &times; 2 &times; 2, consisting of eight unit cubes, that satisfies the following conditions:\n</p>\n\n<ul>\n<li> faces of the unit cubes that comes to the inside of the bicube are all black;</li>\n<li> each face of the bicube has a uniform <i>colorful</i> color; and</li>\n<li> the faces of the bicube have colors all different.</li>\n</ul>\n\n<p>\nYour task is to write a program that reads the specification of a sheet of squared paper and decides whether a\nbicube can be built with the eight unit cubes resulting from it.\n</p>\n\n\n\n<H2>Input</H2>\n\n<p>\nThe input contains the specification of a sheet. The first line contains two integers <i>H</i> and <i>W</i>, which denote the height and width of the sheet (3 &le; <i>H</i>, <i>W</i> &le; 50). Then H lines follow, each consisting of <i>W</i> characters. These lines show the squares on the front side of the sheet. A character represents the color of a grid: alphabets and digits ('A' to 'Z', 'a' to 'z', '0' to '9') for colorful squares, a hash ('#') for a black square, and a dot ('.') for an unpainted square. Each alphabet or digit denotes a unique color: squares have the same color if and only if they are represented by the same character.\n</p>\n\n<p>\nEach component of connected squares forms one opened-up cube. Squares are regarded as connected when they have a common edge; those just with a common vertex are not.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint \"<span>Yes</span>\" if a bicube can be built with the given sheet; \"<span>No</span>\" otherwise.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 40\n.a....a....a....a....f....f....f....f...\n#bc#.#cd#.#de#.#eb#.#cb#.#dc#.#ed#.#be#.\n.#....#....#....#....#....#....#....#...\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\nYes\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n5 35\n.a....a....a....a....f....f....f...\n#bc#.#cd#.#de#.#eb#.#cb#.#dc#.#ed#.\n.#..f.#....#....#....#....#....#...\n..e##..............................\n.b#................................\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n<pre>\nYes\n</pre>\n<br/>\n\n<H2>Sample Input 3</H2>\n<pre>\n3 40\n.a....a....a....a....f....f....f....f...\n#bc#.#cd#.#de#.#eb#.#cb#.#dc#.#ed#.#eb#.\n.#....#....#....#....#....#....#....#...\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n<pre>\nNo\n</pre>\n<br/>", "p01498": "\n<H1><font color=\"#000\">Problem D: </font>King Slime</H1>\n\n<p>\nThere is a grid of size <i>W</i> &times; <i>H</i> surrounded by walls. Some cells in the grid are occupied by slimes. The slimes want to unite with each other and become a \"King Slime\".\n</p>\n\n<p>\nIn each move, a slime can move to east, west, south and north direction until it enters a cell occupied by another slime or hit the surrounding wall. If two slimes come together, they unite and become a new slime.\n</p>\n\n<p>\nYour task is write a program which calculates the minimum number of moves that all the slimes unite and become a King Slime. Suppose slimes move one by one and they never move simultaneously.\n</p>\n\n\n\n<H2>Input</H2>\n\n<p>\nThe first line contains three integers <i>N</i> (2 &le; <i>N</i> &le; 40,000), <i>W</i> and <i>H</i> (1 &le; <i>W</i>, <i>H</i> &le; 100,000), which denote the\nnumber of slimes, the width and the height of the grid respectively.\n</p>\n\n<p>\nThe following <i>N</i> lines describe the initial coordinates of the slimes. The <i>i</i>-th line contains two integers <i>x<sub>i</sub></i> (1 &le; <i>x<sub>i</sub></I> &le; <i>W</i>) and <i>y<sub>i</sub></i> (1 &le; <i>y<sub>i</sub></i> &le; <i>H</i>), which indicate the coordinates of the <i>i</i>-th slime . All the coordinates are 1-based.\n</p>\n\n<p>\nYou may assume that each cell is occupied by at most one slime initially.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the minimum number of moves that all the slimes unite and become a King Slime.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 3 3\n1 1\n1 3\n3 1\n3 3\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\n3\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n2 3 3\n2 2\n3 3\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n<pre>\n2\n</pre>\n<br/>\n\n<H2>Sample Input 3</H2>\n<pre>\n2 4 4\n2 2\n3 3\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n<pre>\n3\n</pre>\n<br/>\n\n<H2>Sample Input 4</H2>\n<pre>\n2 4 4\n2 2\n2 3\n</pre>\n\n<H2>Output for the Sample Input 4</H2>\n<pre>\n1\n</pre>\n<br/>", "p01499": "\n<H1><font color=\"#000\">Problem E: </font>Rabbit Game Playing</H1>\n\n<p>\nHonestly, a rabbit does not matter.\n</p>\n\n<p>\nThere is a rabbit playing a stage system action game. In this game, every stage has a difficulty level. The rabbit, which always needs challenges, basically wants to play more difficult stages than he has ever played. However, he sometimes needs rest too. So, to compromise, he admitted to play <i>T</i> or less levels easier stages than the preceding one.\n</p>\n\n<p>\nHow many ways are there to play all the stages at once, while honoring the convention above? Maybe the answer will be a large number. So, let me know the answer modulo 1,000,000,007.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe first line of input contains two integers <i>N</i> and <i>T</i> (1 &le; <i>N</i> &le; 100,000, 1 &le; <i>T</i> &le; 10,000). <i>N</i> is the number of stages, and <i>T</i> is the compromise level.\n</p>\n\n<p>\nThe following <i>N</i> lines describe the difficulty levels of each stage. The <i>i</i>-th line contains one integer <i>D<sub>i</sub></i> (1 &le; <i>D<sub>i</sub></i> &le; 100,000), which is the difficulty level of the <i>i</i>-th stage.\n</p>\n\n<H2>Output</H2>\n\n<p>\nCalculate how many ways to play all the stages at once there are. Print the answer modulo 1,000,000,007 in a line.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 1\n1\n2\n3\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\n4\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n5 3\n9\n2\n6\n8\n8\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n<pre>\n24\n</pre>\n<br/>\n\n<H2>Sample Input 3</H2>\n<pre>\n5 7\n9\n9\n9\n1\n5\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n<pre>\n48\n</pre>\n<br/>", "p01500": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>Problem F:\nRabbit Jumping\n</h2>\n\n<p>\n  There are $K$ rabbits playing on rocks floating in a river. They got tired of playing on the rocks on which they are standing currently, and they decided to move to other rocks. This seemed an easy task initially, but there are so many constraints that they got totally confused.\n</p>\n\n<p>\n  First of all, by one leap, they can only move to a rock within $R$ meters from the current rock. Also, they can never leap over rocks. That is, when they leap in some direction, they should land on the nearest rock in that direction. Furthermore, since they always want to show off that they are courageous, they will never leap to rocks downriver. Finally, since they never want to admit they have been defeated, they never land on a rock if the rock is already visited by other rabbits.\n</p>\n\n<p>\n  In this situation, is it possible for them to move to their destination rocks? If possible, please minimize the sum of their moving distance.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The first line contains two integers $N$ ($1 \\leq N \\leq 100$), $K$ ($1 \\leq K \\leq 3$) and a real number $R$ ($0 \\leq R \\leq 10^4$), which denote the number of rocks, the number of rabbits, and the maximum distance a rabbit can leap, respectively. The second line contains $K$ numbers $s_1, ...,  s_K$ where $s_i$ denote the rock where the $i$-th rabbit is standing. Similarly, the third line contains $K$ numbers $t_1, ..., t_K$ where $t_i$ denote the destination rock for the $i$-th rabbit. $s_1, ..., s_K$ are distinct, and $t_1, ..., t_K$ are distinct. A destination rock of a rabbit is always different from the rock he/she is standing currently.\n</p>\n\n<p>\n  Then the following $N$ lines describe the positions of the rocks. The $i$-th line in this block contains two integers $x_i$ and $y_i$ ($0 \\leq x_i, y_i \\leq 10,000$), which indicate the coordinates of the $i$-th rock. The river flows along Y-axis, toward the direction where Y-coordinate decreases. No pair of rocks has identical coordinates.\n</p>\n\n<p>\nYou may assume that the answer do not change even if you increase $R$ by up to $10^{-5}$.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nIf all the rabbits can move to their destination rocks, print the minimum total distance they need to leap. If not, print \"-1\" (without quotes). Your answer may contain at most $10^{-6}$ of absolute error.\n</p>\n\n\n<h3>Sample Input</h3>\n\n<pre>6 3 1.0\n1 2 3\n4 5 6\n0 0\n1 0\n2 0\n0 1\n1 1\n2 1</pre>\n\n<h3>Output for the Sample Input</h3>\n\n<pre>3</pre>", "p01501": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>Problem G:\nShelter\n</h2>\n\n<p>\n  Taro lives in a town with N shelters. The shape of the town is a convex polygon.\n</p>\n\n<p>\n  He'll escape to the nearest shelter in case of emergency. Given the current location, the cost of escape is defined as the square of the distance to the nearest shelter. Because emergency occurs unpredictably, Taro can be at any point inside the town with the same probability. Calculate the expected cost of his escape.\n  </p>\n\n<h3>Input</h3>\n\n<p>\n  The first line contains two integers $M$ and $N$ ($3 \\leq M \\leq 100,  1 \\leq N \\leq 100$), which denote the number of vertices of the town and the number of shelters respectively.\n</p>\n\n<p>\n  The following $M$ lines describe the coordinates of the vertices of the town in the conunter-clockwise order. The $i$-th line contains two integers $x_i$ and $y_i$ ($-1000 \\leq x_i, y_i \\leq 1000$), which indicate the coordinates of the $i$-th vertex. You may assume the polygon is always simple, that is, the edges do not touch or cross each other except for the end points.\n</p>\n\n<p>\n  Then the following $N$ lines describe the coordinates of the shelters. The $i$-th line contains two integers $x_i$ and $y_i$, which indicate the coordinates of the $i$-th shelter. You may assume that every shelter is strictly inside the town and any two shelters do not have same coordinates.\n  </p>\n\n<h3>Output</h3>\n\n<p>\nOutput the expected cost in a line. The answer with an absolute error of less than or equal to $10^{-4}$ is considered to be correct.\n</p>\n\n\n\n<h3>Sample Input 1</h3>\n\n<pre>4 1\n0 0\n3 0\n3 3\n0 3\n1 1</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>2.0000000000</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>5 2\n2 0\n2 2\n0 2\n-2 0\n0 -2\n0 0\n1 1</pre>\n\n<h3>Sample Output 2</h3>\n\n<pre>1.0000000000</pre>\n\n\n<h3>Sample Input 3</h3>\n\n<pre>4 3\n0 0\n3 0\n3 3\n0 3\n1 1\n1 2\n2 2</pre>\n\n<h3>Sample Output 3</h3>\n\n<pre>0.7500000000</pre>", "p01502": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>Problem H:\nSightseeing Tour\n</h2>\n\n<p>\n  KM city has $N$ sightseeing areas. Currently every pair of area is connected by a bidirectional road.\n</p>\n\n<p>\n  However for some reason, Mr. KM, the mayor of this city, decided to make all of these roads one-way . It costs $C_{i, j}$ dollars to renovate the road between area $i$ and area $j$ to a one-way road from area $i$ to area $j$. Of course, Mr. KM is economic and wants to minimize the total cost of the renovation.\n</p>\n\n<p>\n  On the other hand, because tourism is the most important industry for KM city, there must exists a tour that goes through all the sightseeing areas, visiting each area exactly once. The first and last area of the path need not to be the same. Can you calculate the minimum total cost required for the renovation, given this situation?\n  </p>\n  \n<h3>Input</h3>\n\n<p>\nThe first line contains the number of sightseeing area $N$ ($1 \\leq N \\leq 100$). Next $N$ lines describe the integer matrix $C$, where the $j$-th element of the $i$-th row of the input describes $C_{i,j}$ ($0 \\leq C_{i,j} \\leq 1,000,000$). For each $i$, you can assume $C_{i,i}$ is always zero.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nOutput the minimum cost in a line.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>3\n0 2 7\n2 0 4\n5 8 0</pre>\n\n<h3>Sample Output 1</h3>\n\n<pre>11</pre>", "p01504": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>AYBABTU</H1>\n\n<p>\nThere is a tree that has <var>n</var> nodes and  <var>n-1</var> edges.\nThere are military bases on <var>t</var>  out of the <var>n</var> nodes.\nWe want to  disconnect the bases as  much as possible by destroying <var>k</var> edges.\nThe tree will  be split into <var>k+1</var>  regions when we destroy <var>k</var> edges.\nGiven the purpose to disconnect the bases, we only consider to split in a way that each of these <var>k+1</var>  regions  has at least one base.\nWhen we destroy an edge, we must pay destroying cost.\nFind the minimum destroying cost to split  the tree.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple data sets.\nEach data set has the following format.\nThe first line  consists of three integers <var>n</var>, <var>t</var>, and <var>k</var> (<var>1 \\leq n \\leq 10,000</var>, <var>1 \\leq t \\leq n</var>, <var>0 \\leq k \\leq t-1</var>).\nEach of the next <var>n-1</var> lines  consists of three integers representing an edge.\nThe first two integers represent node numbers connected  by the edge.\nA node number is a positive integer less than or equal to <var>n</var>.\nThe last one integer represents destroying cost.\nDestroying cost is a non-negative integer less than or equal to 10,000.\nThe next <var>t</var> lines  contain a distinct list of integers one  in each line,  and represent  the list of nodes with bases.\nThe input ends with a line containing three zeros, which should not be processed. \n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, print its case number and the minimum destroying cost to split  the tree with the case number.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n2 2 1\n1 2 1\n1\n2\n4 3 2\n1 2 1\n1 3 2\n1 4 3\n2\n3\n4\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nCase 1: 1\nCase 2: 3\n</pre>\n", "p01505": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Billiards Sorting</H1>\n\n<p>\nRotation is one of  several popular pocket billiards games.\nIt uses 15 balls numbered from 1 to 15, and set  them up  as illustrated in the following figure  at the beginning of a game.\n(Note:  the ball order  is  modified from  real-world Rotation rules for simplicity of the problem.)\n</p>\n\n<pre>\n        [ 1]\n      [ 2][ 3]\n    [ 4][ 5][ 6]\n  [ 7][ 8][ 9][10]\n[11][12][13][14][15]\n</pre>\n\n<p>\nYou are an engineer  developing an automatic billiards machine.\nFor the first step you  had to  build a machine that sets up the initial condition.\nThis project  went well, and finally  made up a machine that  could arrange the balls in the triangular shape.\nHowever, unfortunately, it  could not place the balls in the correct order.\n</p>\n\n<p>\nSo now you are trying to  build another machine that fixes the order of balls by swapping   them.\nTo cut off the cost, it is only allowed to swap the ball #1 with its neighboring balls that are  not  in the same  row.\nFor example, in the  case below,  only the following pairs can be swapped: (1,2), (1,3), (1,8), and (1,9).\n</p>\n\n<pre>\n        [ 5]\n      [ 2][ 3]\n    [ 4][ 1][ 6]\n  [ 7][ 8][ 9][10]\n[11][12][13][14][15]\n</pre>\n\n<p>\nWrite a program that calculates the minimum number of swaps required.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of each test case has an integer <var>N</var> (<var>1 \\leq N \\leq 5</var>), which is  the number of the rows.\n</p>\n\n<p>\nThe following <var>N</var> lines describe how the balls are arranged by the first machine;\nthe <var>i</var>-th of them consists of exactly <var>i</var> integers, which are the ball numbers.\n</p>\n\n<p>\nThe input terminates when <var>N</var> = 0. Your program must not output for this case.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, print its case number and the minimum number of swaps.\n</p>\n\n<p>\nYou can assume that any arrangement can be fixed by not more than 45 swaps.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n2\n3\n2 1\n4\n9\n2 4\n8 5 3\n7 1 6 10\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nCase 1: 1\nCase 2: 13\n</pre>\n", "p01506": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Digit</H1>\n\n<p>\nFor a positive integer <var>a</var>, let <var>S(a)</var> be the sum of the digits in base <var>l</var>.\nAlso let <var>L(a)</var> be the minimum <var>k</var> such that <var>S^k(a)</var> is less than or equal to <var>l-1</var>.\nFind the minimum <var>a</var> such that <var>L(a) = N</var> for a given <var>N</var>, and print <var>a</var> modulo <var>m</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input contains several test cases, followed by a line containing &quot;0 0 0&quot;.\nEach test case is given by a line with three integers <var>N</var>, <var>m</var>, <var>l</var> (<var>0 \\leq N \\leq 10^5</var>, <var>1 \\leq m \\leq 10^9</var>, <var>2 \\leq l \\leq 10^9</var>).\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, print its case number and the minimum <var>a</var> modulo <var>m</var> as described above.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n0 1000 10\n1 1000 10\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nCase 1: 1\nCase 2: 10\n</pre>\n", "p01508": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Longest Lane</H1>\n\n<p>\nMr. KM, the mayor of KM city, decided to build a new elementary school.\nThe site for the school has an awkward polygonal shape, which caused several problems.\nThe most serious problem was that there was not enough space for a short distance racetrack.\nYour task is to help Mr. KM to calculate the maximum possible length for the racetrack\nthat can be built in the site.\nThe track can be considered as a straight line segment  whose width can be ignored.\nThe boundary of the site has a simple polygonal shape without self-intersection,\nand the track can touch the boundary.\nNote that the boundary might not be convex.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple test cases, followed by a line containing &quot;0&quot;.\nEach test case has the following format.\nThe first line contains an integer <var>N</var> (<var>3 \\leq N \\leq 100</var>).\nEach of the following <var>N</var> lines contains two integers <var>x_i</var> and <var>y_i</var> (<var>-1,000 \\leq x_i, y_i \\leq 1,000</var>),\nwhich describe the coordinates of a vertex of the polygonal border of the site, in counterclockwise order.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, print its case number and the maximum possible length of the track in a line.\nThe answer should be given as a floating point number with an absolute error of at most <var>10^{-6}</var>.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n4\n0 0\n10 0\n10 10\n0 10\n3\n0 0\n1 0\n0 1\n0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nCase 1: 14.142135624\nCase 2: 1.41421356\n</pre>\n", "p01507": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Dungeon Creation</H1>\n\n<p>\nThe king demon is waiting in his dungeon to defeat a brave man.\nHis dungeon consists of <var>H \\times W</var> grids.\nEach cell is connected to four (i.e. north, south, east and west) neighboring cells and some cells are occupied by obstacles.\n</p>\n\n<p>\nTo attack the brave man, the king demon created and sent a servant  that walks around in the dungeon.\nHowever, soon the king demon found that the servant does not work as he wants.\nThe servant  is too dumb. If the dungeon had  cyclic path, it might keep walking along the cycle forever.\n</p>\n\n<p>\nIn order to make sure that the servant eventually find the brave man, the king demon decided to  eliminate all cycles by building walls between cells.\nAt the same time, he must be careful so that there  is at least one path between any two cells  not occupied by obstacles.\n</p>\n\n<p>\nYour task is to write a program that computes in how many ways the kind demon can build walls.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of each test case has two integers <var>H</var> and <var>W</var> (<var>1 \\leq H \\leq 500</var>, <var>1 \\leq W \\leq 15</var>), which  are the height and the width of the dungeon.\nFollowing <var>H</var> lines consist of exactly <var>W</var> letters each of which is '.' (there is no obstacle on the cell) or '#' (there is an obstacle).\nYou may assume that there is at least one cell that does not have an obstacle.\n</p>\n\n<p>\nThe input terminates when <var>H = 0</var> and <var>W = 0</var>. Your program must not output for this case.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, print its case number and the number of ways that walls can be built in one line. Since the answer can be very big, output in modulo 1,000,000,007.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n2 2\n..\n..\n3 3\n...\n...\n..#\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nCase 1: 4\nCase 2: 56\n</pre>\n", "p01510": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Skyland</H1>\n\n<p>\nSomewhere in the sky, KM  kingdom built <var>n</var> floating islands by their highly developed technology.\nThe islands are numbered from 1 to <var>n</var>.\n</p>\n\n<p>\nThe king of the country, Kita_masa, can choose any non-negative real number as  the altitude for each island, as long as the  sum of the altitudes is greater than or equals to <var>H</var>.\nFor floating  the island <var>i</var>  to the altitude <var>h_i</var>, it  costs <var>b_i h_i</var>.\nBesides, it  costs <var>|h_i - h_j|c_{i,j}</var> for each pair of islands <var>i</var> and <var>j</var> since there are  communications between  these islands.\n</p>\n\n<p>\nRecently, energy prices are rising, so the king, Kita_masa, wants to minimize the sum of the costs.\nThe king ordered you, a court programmer, to write a program that finds the altitudes of the floating islands  that minimize the cost.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input contains several test cases.\nEach test case starts with a line containing two integers <var>n</var> (<var>1 \\leq n \\leq 100</var>) and <var>H</var> (<var>0\\leq H \\leq 1,000</var>), separated by a single space.\nThe next line  contains <var>n</var> integers <var>b_1</var>, <var>b_2</var>,..., <var>b_n</var> (<var>0\\leq b_i \\leq 1,000</var>).\nEach of the next <var>n</var> lines contains <var>n</var> integers <var>c_{i,j}</var> (<var>0 \\leq c_{i,j} \\leq 1,000</var>).\nYou may assume <var>c_{i, i} = 0</var> and <var>c_{i, j} = c_{j, i}</var>.\n</p>\n\n<p>\nThe last test case is followed by a line containing two zeros.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, print its case number.\nThen print a line containing a space-separated list of the altitudes of  the islands that minimizes the sum of the costs.\nIf there are several possible solutions, print any of them.\nYour answer will be accepted if the altitude of each island is non-negative, sum of the altitudes is greater than <var>(1-10^{-9})H</var>, and the cost calculated from your answer has an absolute or relative error less than <var>10^{-9}</var> from the optimal solution.\n</p>\n\n<p>\nFollow the format of the sample output.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n2 1\n1 3\n0 1\n1 0\n3 3\n1 2 4\n0 2 0\n2 0 1\n0 1 0\n0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nCase 1:\n0.75 0.25\nCase 2:\n1.5 1.5 0.0\n</pre>\n", "p01511": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n\n<H1>Three-way Branch</H1>\n\n<p>\nThere is a grid that consists of <var>W \\times H</var> cells. The  upper-left-most cell is <var>(1, 1)</var>.\nYou are standing on the cell of <var>(1,1)</var> and you  are going to move to cell of <var>(W, H)</var>.\nYou can only move to adjacent lower-left, lower or lower-right cells.\n</p>\n\n<p>\nThere are obstructions on several cells. You can not move to it. You cannot move out the grid, either.\nWrite a program  that outputs the number of ways to reach  <var>(W,H)</var>  modulo 1,000,000,009.\nYou can assume that there is no obstruction at  <var>(1,1)</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line contains three integers, the width <var>W</var>, the height <var>H</var>, and the number of obstructions <var>N</var>. \n(<var>1 \\leq W \\leq 75</var>, <var>2 \\leq H \\leq 10^{18}</var>, <var>0 \\leq N \\leq 30</var>)\nEach of following <var>N</var> lines contains 2 integers, denoting the  position of an obstruction <var>(x_i, y_i)</var>.\n</p>\n\n<p>\nThe last test case is followed by a line containing three zeros.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each test case, print its case number and the number of ways to reach  <var>(W,H)</var>  modulo 1,000,000,009.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n2 4 1\n2 1\n2 2 1\n2 2\n0 0 0\n</pre>\n\n<H2>Output for the Sample Input</H2>\n\n<pre>\nCase 1: 4\nCase 2: 0\n</pre>\n", "p01561": "\n<h1>A Two Floors Dungeon</h1>\n<p>It was the last day of the summer camp you strayed into the labyrinth on the way to Komaba Campus, the University of Tokyo. \nThe contest has just begun.\nYour teammates  must impatiently wait for you.\nSo you have to escape from this labyrinth as soon as possible.<br>\n\nThe labyrinth is represented by a grid map.\nInitially, each grid  except for walls  and stairs is either on the first floor or on the second floor.\nSome grids have a switch which can move up or down some of the grids (the grids on the first floor move to the second floor, and the grids on the second floor  to the first floor).<br>\n\n In each step, you can take one of the following actions:<br>\n\n</p><ul><li><p> Move to an adjacent grid (includes stairs) on the same floor you  are now in.\n</p></li><li><p> Move to another floor (if you  are in the stairs grid).\n</p></li><li><p> Operate the switch (if you  are in a grid  with a switch).\n</p></li></ul>\n\n<p>Luckily, you have just found a map of the labyrinth for some unknown reason.\nLet's calculate the minimum step to escape from the labyrinth, and go to the place your teammates are waiting!<br>\n\n</p>\n<h2>Input</h2>\n<p>The format of the input is as follows.<br>\n\n</p><blockquote>\n<var>W</var> <var>H</var><br><var>M<sub>11</sub>M<sub>12</sub>M<sub>13</sub>...M<sub>1W</sub></var><br><var>M<sub>21</sub>M<sub>22</sub>M<sub>23</sub>...M<sub>2W</sub></var><br>........<br><var>M<sub>H1</sub>M<sub>H2</sub>M<sub>H3</sub>...M<sub>HW</sub></var><br><var>S</var><br><var>MS<sub>111</sub>MS<sub>112</sub>MS<sub>113</sub>...MS<sub>11W</sub></var><br><var>MS<sub>121</sub>MS<sub>122</sub>MS<sub>123</sub>...MS<sub>12W</sub></var><br>........<br><var>MS<sub>1H1</sub>MS<sub>1H2</sub>MS<sub>1H3</sub>...MS<sub>1HW</sub></var><br><var>MS<sub>211</sub>MS<sub>212</sub>MS<sub>213</sub>...MS<sub>21W</sub></var><br><var>MS<sub>221</sub>MS<sub>222</sub>MS<sub>223</sub>...MS<sub>22W</sub></var><br>........<br><var>MS<sub>2H1</sub>MS<sub>2H2</sub>MS<sub>2H3</sub>...MS<sub>2HW</sub></var><br><var>MS<sub>S11</sub>MS<sub>S12</sub>MS<sub>S13</sub>...MS<sub>S1W</sub></var><br><var>MS<sub>S21</sub>MS<sub>S22</sub>MS<sub>S23</sub>...MS<sub>S2W</sub></var><br>........<br><var>MS<sub>SH1</sub>MS<sub>SH2</sub>MS<sub>SH3</sub>...MS<sub>SHW</sub></var><br></blockquote>\n\n<p>The first line contains two integers <var>W</var> (<var>3 &le; W &le; 50</var>) and <var>H</var> (<var>3 &le; H &le; 50</var>).  They represent the width and height of the labyrinth, respectively.<br>\n The following <var>H</var> lines represent the initial state of the labyrinth.\nEach of <var>M<sub>ij</sub></var> is  one of the following symbols:<br>\n\n</p><ul><li>  '#' representing a wall,\n</li><li>  '|' representing stairs,\n</li><li>  '_' representing a grid which is initially on the first floor,\n</li><li>  '^' representing a grid which is initially on the second floor,\n</li><li>  a lowercase letter from 'a' to 'j' representing a switch the grid has, and the grid is initially on the first floor,\n</li><li>  an uppercase letter from 'A' to 'J' representing a switch the grid has, and the grid is initially on the second floor,\n</li><li>  '%' representing  the grid you  are initially in (which is initially on the first floor) or\n</li><li>  '&amp;' representing  the exit of the labyrinth (which is initially on the first floor).\n</li></ul>\n\n<p>The next line contains one integer <var>S</var> (<var>0 &le; S &le; 10</var>), and then the following <var>SH</var> lines represent the information of the switches.\nEach of <var>MS<sub>kij</sub></var> is  one of:<br>\n\n</p><ul><li>  '#' if <var>M<sub>ij</sub></var> is a '#',\n</li><li>  '|' if <var>M<sub>ij</sub></var> is a '|',\n</li><li>  '*' if the grid is moved by  the switch represented by the <var>k</var>-th alphabet letter, or\n</li><li>  '.' otherwise.\n</li></ul>\n\n<p>Note that the grid which contains a switch may be moved by operating the switch.\nIn this case, you will move together with the grid.<br>\nYou may assume each of the '%' (start) and '&amp;' (goal)  appears  exacyly once, that the map is surround by walls, and that each alphabet in the map is any of the letters from 'A' (or 'a') to <var>S</var>-th alphabet letter.<br>\n\n</p>\n<h2>Output</h2>\n<p>Print the minimum step to reach the goal in one line.\nIf there is no solution, print &quot;-1&quot;.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>6 6\n######\n#_|A%#\n#B#_|#\n#^BBa#\n#B&amp;A##\n######\n2\n######\n#*|*.#\n#.#.|#\n#*.**#\n#...##\n######\n######\n#*|*.#\n#*#.|#\n#..**#\n#..*##\n######\n</pre>\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>21\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>8 3\n########\n#%||Aa&amp;#\n########\n2\n########\n#*||*..#\n########\n########\n#.||*.*#\n########\n</pre>\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>7\n</pre>\n\n<h2>Sample Input 3</h2>\n\n<pre>3 4\n###\n#%#\n#&amp;#\n###\n0\n</pre>\n\n<h2>Output for the Sample Input 3</h2>\n\n<pre>1\n</pre>\n\n<h2>Sample Input 4</h2>\n\n<pre>3 5\n###\n#%#\n#^#\n#&amp;#\n###\n0\n</pre>\n\n<h2>Output for the Sample Input 4</h2>\n\n<pre>-1\n</pre>", "p01562": "\n<h1>Area Folding</h1>\n<p> You are given one polygonal line, which is a collection of line segments.\nYour task is to calculate the sum of areas  enclosed by the polygonal line.\n</p>\n<p>\nA point is defined to be &quot;enclosed&quot; if and only if the point is unreachable without crossing at least one line segment from the point at infinity.\n</p>\n\n<h2>Input</h2>\n<p>The first line contains one integers <var>N</var> <var>(2 &le; N &le; 100)</var>. \n<var>N</var> is the number of segments.\n</p>\n<p> Each of the following <var>N</var> lines consists of two integers <var>X<sub>i</sub></var> and <var>Y<sub>i</sub></var> <var>(-10<sup>5</sup> &le; X<sub>i</sub>, Y<sub>i</sub> &le; 10<sup>5</sup>, 1 &le; i &le; N)</var> which represents a vertex.\nA polygonal line is the segments  which connect <var>(X<sub>j</sub>, Y<sub>j</sub>)</var> and <var>(X<sub>j+1</sub>, Y<sub>j+1</sub>)</var> <var>((X<sub>j</sub>, Y<sub>j</sub>) &ne; (X<sub>j+1</sub>, Y<sub>j+1</sub>), 1 &le; j &le; N-1)</var>.\nThe distance between a segment <var>S<sub>j</sub></var> and all  vertices except the end points on segment <var>S<sub>j</sub></var> is guaranteed to be greater than 0.01.\n</p>\n\n<h2>Output</h2>\n<p>Output the answer in a line.\nThe answer may be printed with an arbitrary number of decimal digits, but may not contain an absolute or relative error greater than or equal to <var>10<sup>-6</sup></var>.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>5\n0 0\n1 1\n1 0\n0 1\n0 0\n</pre>\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>0.5\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>5\n0 0\n1 1\n1 0\n0 1\n1 0\n</pre>\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>0.25\n</pre>\n\n<h2>Sample Input 3</h2>\n\n<pre>21\n1 1\n-1 1\n-1 2\n-2 2\n-2 1\n-1 1\n-1 -1\n-2 -1\n-2 -2\n-1 -2\n-1 -1\n1 -1\n1 -2\n2 -2\n2 -1\n1 -1\n1 1\n2 1\n2 2\n1 2\n1 1\n</pre>\n\n<h2>Output for the Sample Input 3</h2>\n\n<pre>8\n</pre>\n\n<h2>Sample Input 4</h2>\n\n<pre>16\n0 0\n1 0\n1 1\n0 1\n0 2\n0 3\n1 3\n1 2\n2 2\n2 3\n3 3\n3 2\n3 1\n2 1\n2 0\n3 0\n</pre>\n\n<h2>Output for the Sample Input 4</h2>\n\n<pre>0\n</pre>\n\n<h2>Sample Input 5</h2>\n\n<pre>7\n26 52\n33 12\n-51 68\n16 61\n43 -26\n87 24\n12 10\n</pre>\n\n<h2>Output for the Sample Input 5</h2>\n\n<pre>2714.840579710\n</pre>\n", "p01563": "\n<h1>Connect</h1>\n<p>You are playing a solitaire puzzle called &quot;Connect&quot;, which uses several letter tiles.\n</p>\n<p>There are <var>R &times; C</var> empty cells.\nFor each <var>i</var> <var>(1 &le; i &le; R)</var>, you must put a string <var>s<sub>i</sub></var> <var>(1 &le; |s<sub>i</sub>| &le; C)</var> in the <var>i</var>-th row of the table, without changing  the letter order.\nIn other words, you choose an integer sequence <var>{a<sub>j</sub>}</var> such that\n<var>1 &le; a<sub>1</sub> &lt; a<sub>2</sub> &lt; ... &lt; a<sub>|s<sub>i</sub>|</sub> &le; C</var>\n, and put the <var>j</var>-th character of the string <var>s<sub>i</sub></var> in the <var>a<sub>j</sub></var>-th column <var>(1 &le; j &le; |s<sub>i</sub>|)</var>.\n</p>\n<p>For example, when <var>C = 8</var> and <var>s<sub>i</sub> =</var> &quot;ICPC&quot;, you can put <var>s<sub>i</sub></var> like followings.\n</p><pre>I_C_P_C_\nICPC____\n_IC___PC\n</pre><p>'_' represents an empty cell.\n</p>\n<p>For each non-empty cell <var>x</var>, you get a point equal to the number of adjacent cells which have the same character as <var>x</var>.\nTwo cells are adjacent if they share an edge.\n</p>\n<p>Calculate the maximum total point you can get.\n</p>\n\n<h2>Input</h2>\n<p>The first line contains two integers <var>R</var> and <var>C</var> <var>(1 &le; R &le; 128, 1 &le; C &le; 16)</var>.\n</p>\n<p> Then <var>R</var> lines follow, each of which contains <var>s<sub>i</sub></var>\n <var>(1 &le; |s<sub>i</sub>| &le; C)</var>.\nAll characters of <var>s<sub>i</sub></var> are uppercase letters.\n</p>\n\n<h2>Output</h2>\n<p>Output the maximum total point in a line.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>2 4\nACM\nICPC\n</pre>\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>2\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>2 9\nPROBLEMF\nCONNECT\n</pre>\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>6\n</pre>\n\n<h2>Sample Input 3</h2>\n\n<pre>4 16\nINTERNATIONAL\nCOLLEGIATE\nPROGRAMMING\nCONTEST\n</pre>\n\n\n<h2>Output for the Sample Input 3</h2>\n\n<pre>18\n</pre>\n", "p01564": "\n<h1>Do use segment tree</h1>\n<p>Given a tree with <var>n</var> <var>(1 &le; n &le; 200,000)</var> nodes and a list of <var>q</var> <var>(1 &le; q &le; 100,000)</var> queries,\nprocess the queries in order and output a value for each output query.\nThe given tree is connected and each node on the tree has a weight <var>w<sub>i</sub></var> <var>(-10,000 &le; w<sub>i</sub> &le; 10,000)</var>.\n</p>\n<p>Each query consists of a number <var>t<sub>i</sub></var> <var>(t<sub>i</sub> = 1, 2)</var>, which indicates the type of the query , and  three numbers <var>a<sub>i</sub></var>, <var>b<sub>i</sub></var> and <var>c<sub>i</sub></var> <var>(1 &le; a<sub>i</sub>, b<sub>i</sub> &le; n, -10,000 &le; c<sub>i</sub> &le; 10,000)</var>.\nDepending on the query type, process one of the followings:\n</p><ul><li><p> (<var>t<sub>i</sub> = 1</var>: modification query)\nChange the weights of all nodes on the shortest path between <var>a<sub>i</sub></var> and <var>b<sub>i</sub></var> (both inclusive) to <var>c<sub>i</sub></var>.\n</p></li><li><p> (<var>t<sub>i</sub> = 2</var>: output query) \nFirst, create a list of weights on the shortest path between <var>a<sub>i</sub></var> and <var>b<sub>i</sub></var> (both inclusive) in order. After that, output the maximum sum of a non-empty continuous subsequence of the weights on the list. <var>c<sub>i</sub></var> is ignored for output queries.\n</p></li></ul>\n\n\n<h2>Input</h2>\n<p>The first line contains two integers <var>n</var> and <var>q</var>.\n On the second line, there are <var>n</var> integers which indicate <var>w<sub>1</sub></var>, <var>w<sub>2</sub></var>, ... , <var>w<sub>n</sub></var>.\n</p>\n<p>Each of the following <var>n - 1</var> lines consists of two integers <var>s<sub>i</sub></var> and <var>e<sub>i</sub></var> <var>(1 &le; s<sub>i</sub>, e<sub>i</sub> &le; n)</var>,\nwhich means that there is an edge between <var>s<sub>i</sub></var> and <var>e<sub>i</sub></var>.\n</p>\n<p> Finally the following <var>q</var> lines give the list of queries, each of which contains four integers  in the format described above.\nQueries  must be processed one by one from top to bottom.\n</p>\n\n<h2>Output</h2>\n<p>For each output query, output  the maximum sum in one line.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>3 4\n1 2 3\n1 2\n2 3\n2 1 3 0\n1 2 2 -4\n2 1 3 0\n2 2 2 0\n</pre>\n\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>6\n3\n-4\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>7 5\n-8 5 5 5 5 5 5\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n2 3 7 0\n2 5 2 0\n2 4 3 0\n1 1 1 -1\n2 3 7 0\n</pre>\n\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>12\n10\n10\n19\n</pre>\n\n<h2>Sample Input 3</h2>\n\n<pre>21 30\n10 0 -10 -8 5 -5 -4 -3 1 -2 8 -1 -7 2 7 6 -9 -6 3 4 9\n10 3\n3 2\n3 12\n12 4\n4 13\n4 9\n10 21\n21 1\n1 11\n11 14\n1 15\n10 6\n6 17\n6 16\n6 5\n5 18\n5 19\n10 7\n10 8\n8 20\n1 1 21 -10\n1 3 19 10\n2 1 13 0\n1 4 18 8\n1 5 17 -5\n2 16 7 0\n1 6 16 5\n1 7 15 4\n2 4 20 0\n1 8 14 3\n1 9 13 -1\n2 9 18 0\n1 10 12 2\n1 11 11 -8\n2 21 15 0\n1 12 10 1\n1 13 9 7\n2 6 14 0\n1 14 8 -2\n1 15 7 -7\n2 10 2 0\n1 16 6 -6\n1 17 5 9\n2 12 17 0\n1 18 4 6\n1 19 3 -3\n2 11 8 0\n1 20 2 -4\n1 21 1 -9\n2 5 19 0\n</pre>\n\n\n<h2>Output for the Sample Input 3</h2>\n\n<pre>20\n9\n29\n27\n10\n12\n1\n18\n-2\n-3\n</pre>\n", "p01568": "\n<h1>Repairing</h1>\n\n<p>In the International City of Pipe Construction, it is planned to repair the water pipe at a certain point in the water pipe network.\nThe network consists of water pipe segments, stop valves and source point.\nA water pipe is represented by a segment on a 2D-plane and intersected pair of water pipe segments are connected at the intersection point.\nA stop valve, which prevents from water flowing into the repairing point while repairing,  is represented by a point on some water pipe segment.\nIn the network, just one source point exists and water is supplied to the network from this point.\n</p>\n<p>Of course, while repairing, we have to stop water supply in some areas, but,\nin order to reduce the risk of riots, the length of water pipes stopping water supply must be minimized.\nWhat you have to do is to write a program to minimize the length of water pipes needed to stop water supply when the coordinates of end points of water pipe segments, stop valves, source point and repairing point are given.\n</p>\n\n<h2>Input</h2>\n\n<p>A data set has the following format:\n</p><blockquote>\n<var>N</var> <var>M</var><br>\n    <var>x<sub>s1</sub></var> <var>y<sub>s1<sub></var> <var>x<sub>d1</sub></var> <var>y<sub>d1</sub></var><br>\n        ...<br>\n        <var>x<sub>sN</sub></var> <var>y<sub>sN</sub></var> <var>x<sub>dN</sub></var> <var>y<sub>dN</sub></var><br>\n        <var>x<sub>v1</sub></var> <var>y<sub>v1</sub></var><br>\n        ...<br>\n        <var>x<sub>vM</sub></var> <var>y<sub>vM</sub></var><br>\n    <var>x<sub>b</sub></var> <var>y<sub>b</sub></var><br>\n    <var>x<sub>c</sub></var> <var>y<sub>c</sub></var><br>\n</blockquote>\n<p>The first line of the input contains two integers, <var>N</var> (<var>1 &le; N &le; 300</var>) and <var>M</var> (<var>0 &le; M &le; 1,000</var>) that indicate the number of water pipe segments and stop valves.\nThe following <var>N</var> lines describe the end points of water pipe segments.\nThe <var>i</var>-th line contains four integers, <var>x<sub>si</sub></var>, <var>y<sub>si</sub></var>, <var>x<sub>di</sub></var> and <var>y<sub>di</sub></var> that indicate the pair of coordinates of end points of <var>i</var>-th water pipe segment.\nThe following <var>M</var> lines describe the points of stop valves.\nThe <var>i</var>-th line contains two integers, <var>x<sub>vi</sub></var> and <var>y<sub>vi</sub></var> that indicate the coordinate of end points of <var>i</var>-th stop valve.\nThe following line contains two integers, <var>x<sub>b</sub></var> and <var>y<sub>b</sub></var> that indicate the coordinate of the source point.\nThe last line contains two integers, <var>x<sub>c</sub></var> and <var>y<sub>c</sub></var> that indicate the coordinate of the repairing point.\n</p>\n<p>You may assume that any absolute values of coordinate integers are less than 1,000 (inclusive.) \nYou may also assume each of the stop valves, the source point and the repairing point is always on one of water pipe segments and that that each pair among the stop valves, the source point and the repairing point are different.\nAnd, there is not more than one intersection between each pair of water pipe segments.\nFinally, the water pipe network is connected, that is, all the water pipes are received water supply initially.\n</p>\n\n<h2>Output</h2>\n<p>Print the minimal length of water pipes needed to stop water supply in a line.\nThe absolute or relative error should be less than or <var>10<sup>-6</sup></var>.\nWhen you cannot stop water supply to the repairing point even though you close all stop valves, print &quot;<code>-1</code>&quot; in a line.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>1 2\n0 0 10 0\n1 0\n9 0\n0 0\n5 0\n</pre>\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>9.0\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>5 3\n0 4 2 4\n0 2 2 2\n0 0 2 0\n0 0 0 4\n2 0 2 4\n0 2\n1 0\n2 2\n1 4\n2 1\n</pre>\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>3.0\n</pre>\n\n\n<h2>Sample Input 3</h2>\n\n<pre>2 1\n0 0 0 4\n0 2 2 2\n1 2\n0 1\n0 3\n</pre>\n\n<h2>Output for the Sample Input 3</h2>\n\n<pre>-1\n</pre>\n", "p01569": "\n<h1>Sun and Moon</h1>\n\n<p>In the year 20XX, mankind is hit by an unprecedented crisis.\nThe power balance  between the sun and the moon  was broken by the total eclipse of the sun, and the end is looming!\nTo save the world, the secret society called &quot;Sun and Moon&quot; decided to perform the ritual to balance the power of the sun and the moon called &quot;Ritual of Sun and Moon&quot;.\n</p>\n<p>The ritual consists of &quot;Ritual of Sun&quot; and &quot;Ritual of Moon&quot;. &quot;Ritual of Moon&quot; is performed after &quot;Ritual of Sun&quot;.\nA member of the society is  divided into two groups, &quot;Messengers of Sun&quot; and &quot;Messengers of Moon&quot;.\nEach member has some offerings and magic power.\n</p>\n<p>First, the society performs &quot;Ritual of Sun&quot;.\nIn the ritual, each member sacrifices an offering.\nIf he can not sacrifice an offering here, he will be killed.\nAfter the sacrifice, his magic power is multiplied by the original number of his offerings.\nEach member must perform the sacrifice just once.\n</p>\n<p>Second, the society performs &quot;Ritual of Moon&quot;.\nIn the ritual, each member sacrifices all remaining offerings.\nAfter the sacrifice, his magic power is multiplied by <var>x<sup>p</sup></var>.\nHere <var>x</var> is the number of days from the eclipse (the eclipse is 0th day) and <var>p</var> is the number of his sacrificed offerings.\nEach member must perform the sacrifice just once.\n</p>\n<p>After two rituals, all &quot;Messengers of Sun&quot; and &quot;Messengers of Moon&quot; give all magic power to the &quot;magical reactor&quot;.\nIf the total power of &quot;Messengers of Sun&quot; and the total power of &quot;Messengers of Moon&quot; are equal,\nthe society will succeed in the ritual and save the world.\n</p>\n<p>It is very expensive to perform &quot;Ritual of Sun&quot;.\nIt may not be able to perform &quot;Ritual of Sun&quot; because the society is in financial trouble.\nPlease write a program to calculate the minimum number of days from the eclipse in which the society can succeed in &quot;Ritual of Sun and Moon&quot; whether &quot;Ritual of Sun&quot; can be performed or not.\nThe society cannot perform the ritual  on the eclipse day (0-th day).\n</p>\n\n<h2>Input</h2>\n\n<p>The format of the input is as follows.\n</p>\n<blockquote>\n<var>N</var><br><var>O<sub>1</sub></var> <var>P<sub>1</sub></var><br><var>...</var><br><var>O<sub>N</sub></var> <var>P<sub>N</sub></var><br></blockquote>\n\n<p>The first line contains an integer <var>N</var> that is the number of  members of the society (<var>0 &le; N &le; 1,000</var>).\n</p>\n<p>Each of the following <var>N</var> lines contains two integers <var>O<sub>i</sub></var> (<var>0 &le; O<sub>i</sub> &le; 1,000,000,000</var>) and <var>P<sub>i</sub></var> (<var>1 &le; |P<sub>i</sub>| &le; 1,000,000,000,000,000</var>).\n<var>O<sub>i</sub></var> is the number of the <var>i</var>-th member's offerings and <var>|P<sub>i</sub>|</var> is the strength of  his magic power.\nIf <var>P<sub>i</sub></var> is a positive integer, the <var>i</var>-th member belongs to &quot;Messengers of Sun&quot;, otherwise he belongs to &quot;Messengers of Moon&quot;.\n</p>\n\n\n<h2>Output</h2>\n\n<p>If  there exists the number of days from the eclipse that satisfies the above condition , print the minimum number of days  preceded by &quot;Yes &quot;.\nOtherwise print &quot;No&quot;.\n</p>\n<p>Of course, the answer must be a positive integer.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>9\n2 1\n1 -1\n1 -1\n1 -1\n1 -1\n0 1\n0 1\n0 1\n0 1\n</pre>\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>Yes 2\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>2\n1 1\n0 -1\n</pre>\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>No\n</pre>\n", "p01570": "\n<h1>Usoperanto</h1>\n\n<p>Usoperanto is an artificial spoken language designed and regulated by Usoperanto Academy.\nThe academy is now in study to establish Strict Usoperanto, a variation of the language intended for formal documents.\n</p>\n<p>In Usoperanto, each word can modify at most one other word, and modifiers are always put before modifiees.\nFor example, with a noun <i>uso</i> (&quot;truth&quot;) modified by an adjective <i>makka</i> (&quot;total&quot;), people say <i>makka uso</i>, not <i>uso makka</i>.\nOn the other hand, there have been no rules about the order among multiple words modifying the same word,\nso in case <i>uso</i> is modified by one more adjective <i>beta</i> (&quot;obvious&quot;),\npeople could say both <i>makka beta uso</i> and <i>beta makka uso</i>.\n</p>\n<p>In Strict Usoperanto, the word order will be restricted according to <i>modification costs</i>.\nWords in a phrase must be arranged so that the total modification cost is minimized.\nEach pair of a modifier and a modifiee is assigned a cost equal to the number of letters between the two words;\nthe total modification cost is the sum of the costs over all modifier-modifiee pairs in the phrase.\nFor example, the pair of <i>makka</i> and <i>uso</i> in a phrase <i>makka beta uso</i> has the cost of 4 for <i>beta</i> (four letters).\nAs the pair of <i>beta</i> and <i>uso</i> has no words in between and thus the cost of zero, <i>makka beta uso</i> has the total modification cost of 4.\nSimilarly <i>beta makka uso</i> has the total modification cost of 5.\nApplying the &quot;minimum total modification cost&quot; rule, <i>makka beta uso</i> is preferred to <i>beta makka uso</i> in Strict Usoperanto.\n</p>\n<p>Your mission in this problem is to write a program that, given a set of words in a phrase, finds the correct word order in Strict Usoperanto and reports the total modification cost.\n</p>\n\n<h2>Input</h2>\n\n<p>The format of the input is as follows.\n</p>\n<blockquote>\n<var>N</var><br><var>M<sub>0</sub></var> <var>L<sub>0</sub></var><br><var>...</var><br><var>M<sub>N-1</sub></var> <var>L<sub>N-1</sub></var><br></blockquote>\n\n<p>The first line contains an integer\n<!--<var>N</var> (<var>1 &le; N &le; 160,000</var>).-->\n<var>N</var> (<var>1 &le; N &le; 10<sup>6</sup></var>).\n<var>N</var> is the number of words in a phrase.\n</p>\n<p>Each of the following <var>N</var> lines contains two integers\n<var>M<sub>i</sub></var> (<var>1 &le; M<sub>i</sub> &le; 10</var>) and\n<var>L<sub>i</sub></var> (<var>-1 &le; L<sub>i</sub> &le; N - 1</var>, <var>L<sub>i</sub> &ne; i</var>)\ndescribing the <var>i</var>-th word (<var>0 &le; i &le; N-1</var>).\n<var>M<sub>i</sub></var> is the number of the letters in the word.\n<var>L<sub>i</sub></var> specifies the modification:\n<var>L<sub>i</sub> = -1</var> indicates it does not modify any word;\notherwise it modifies the <var>L<sub>i</sub></var>-th word.\n</p>\n<p>Note the first sample input below can be interpreted as the <i>uso</i>-<i>beta</i>-<i>makka</i> case.\n</p>\n\n<h2>Output</h2>\n\n<p>Print the total modification cost.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>3\n3 -1\n4 0\n5 0\n</pre>\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>4\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>3\n10 -1\n10 0\n10 1\n</pre>\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>0\n</pre>\n\n<h2>Sample Input 3</h2>\n\n<pre>4\n1 -1\n1 0\n1 1\n1 0\n</pre>\n\n\n<h2>Output for the Sample Input 3</h2>\n\n<pre>1\n</pre>\n", "p01571": "\n<H1><font color=\"#000\">Problem A:</font> Adhoc Translation</H1>\n\n<p>\nOne day, during daily web surfing, you encountered a web page which was written in a language you've never seen. The character set of the language was the same as your native language; moreover, the grammar and words seemed almost the same. Excitedly, you started to \"decipher\" the web page. The first approach you tried was to guess the meaning of each word by selecting a similar word from a dictionary of your native language. The closer two words (although from the different languages) are, the more similar meaning they will have.\n</p>\n<p>\nYou decided to adopt edit distance for the measurement of similarity between two words. The edit distance between two character sequences is defined as the minimum number of insertions, deletions and substitutions required to morph one sequence into the other. For example, the pair of \"point\" and \"spoon\" has the edit distance of 3: the latter can be obtained from the former by deleting 't', substituting 'i' to 'o', and finally inserting 's' at the beginning.\n</p>\n\n<p>\nYou wanted to assign a word in your language to each word in the web text so that the entire assignment has the minimum edit distance. The edit distance of an assignment is calculated as the total sum of edit distances between each word in the text and its counterpart in your language. Words appearing more than once in the text should be counted by the number of appearances.\n</p>\n\n<p>\nThe translation must be consistent across the entire text; you may not match different words from your dictionary for different occurrences of any word in the text. Similarly, different words in the text should not have the same meaning in your language.\n</p>\n\n<p>\nSuppose the web page says \"qwerty asdf zxcv\" and your dictionary contains the words \"qwert\", \"asf\", \"tyui\", \"zxcvb\" and \"ghjk\". In this case, you can match the words in the page as follows, and the edit distance of this translation is 3: \"qwert\" for \"qwerty\", \"asf\" for \"asdf\" and \"zxcvb\" for \"zxcv\".\n</p>\n\n<p>\nWrite a program to calculate the minimum possible edit distance among all translations, for given a web page text and a word set in the dictionary.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input contains two integers <i>N</i> and <i>M</i>.\n</p>\n\n<p>\nThe following <i>N</i> lines represent the text from the web page you've found. This text contains only lowercase alphabets and white spaces. Then <i>M</i> lines, each containing a word, describe the dictionary to use. Every word consists of lowercase alphabets only, and does not contain more than 20 characters.\n</p>\n\n<p>\nIt is guaranteed that 1 &le; <i>N</i> &le; 100 and 1 &le; <i>M</i> &le; 400. Also it is guaranteed that the dictionary is made up of many enough words, which means the number of words in the dictionary is no less than the kinds of words in the text to translate. The length of each line in the text does not exceed 1000.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the minimum possible edit distance in a line.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n1 5\nqwerty asdf zxcv\nqwert\nasf\ntyui\nzxcvb\nghjk\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\n3\n</pre>\n\n\n", "p01573": "\n<H1><font color=\"#000\">Problem C:</font> Complex Integer Solutions</H1>\n\n<p>\nLet <i>f</i>(<i>x</i>) = <i>a</i><sub>0</sub> + <i>a</i><sub>1</sub><i>x</i> + <i>a</i><sub>2</sub><i>x</i><sup>2</sup> + ... + <i>a<sub>d</sub>x<sup>d</sup></i> be the function where each <i>a<sub>i</sub></i> (0 &le; <i>i</i> &le; <i>d</i>) is a constant integer (and <i>a<sub>d</sub></i> is non-zero) and <i>x</i> is a variable. Your task is to write a program that finds all <i>complex integer solutions</i> of the equation <i>f</i>(<i>x</i>) = 0 for a given <i>f</i>(<i>x</i>). Here, by complex integers, we mean complex numbers whose\nreal and imaginary parts are both integers.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of two lines. The first line of the input contains <i>d</i>, the degree of <i>f</i>(<i>x</i>). The second line contains (<i>d</i> + 1) integers <i>a</i><sub>0</sub>, ... , <i>a<sub>d</sub></i>, the coeffcients of the equation. You may assume all the following: 1 &le; <i>d</i> &le; 10, |<i>a<sub>i</sub></i>| &le; 10<sup>6</sup> and <i>a<sub>d</sub></i> &ne; 0.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThere should be two lines in the output. In the first line, print the number <i>m</i> of complex integer solutions. In the second line, print <i>m</i> solutions separated by space. Each solution should be counted and printed exactly once even if it is a multiple root. The solutions should be printed in ascending order of their real parts then their imaginary parts, and in the following fashion: <span>0</span>, <span>-2</span>, <span>i</span>, <span>-3i</span>, <span>2+i</span>, and <span>3-4i</span>.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n4\n-2 0 0 0 2\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\n4\n-1 -i i 1\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n8\n0 0 25 15 17 -10 1 -1 1\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n<pre>\n5\n-1-2i -1+2i 0 2-i 2+i\n</pre>\n\n\n\n", "p01575": "\n<H1><font color=\"#000\">Problem E:</font> Dungeon Master</H1>\n\n<p>\nOnce upon a time, in a fantasy world far, far away, monsters dug caves and dungeons for adventurers. They put some obstacles in their caves so it becomes more difficult and more exciting for the adventurers to reach the goal.\n</p>\n\n<p>\nOne day, Emils, one of the monsters in the caves, had a question about the caves. How many patterns of a cave can they make, by changing the locations of the obstacles in it?\n</p>\n\n<p>\nHere's the detail of the question. A cave consists of <i>W</i> &times; <i>H</i> squares. Monsters can put obstacles at some of the squares, so that adventurers can't go into them. The total number of obstacles is fixed, and there can't be two or more obstacles in one square. Adventurers enter the cave from the top-left square, and try to reach the bottom-right square. They can move from one square to any of the four adjacent squares, as long as there are no obstacles in the destination square. There must be at least one path between any two squares that don't have obstacles. There must be no obstacles in the top-left square, nor in right-bottom square. The question is, given the width <i>W</i> and height <i>H</i> of the cave, and the number <i>S</i> of obstacles, how many patterns of the caves the monsters can make. As the obstacles have the same look, they should not\nbe distinguished each other.\n</p>\n\n<p>\nIt was a very interesting mathematical question. Emils couldn't solve this question by himself, so he told it to his colleagues instead. None of them could answer to it, though. After that, the question soon got popular among the monsters working in the caves, and finally, they became unable to sleep well as they always thought about the question.\n</p>\n\n<p>\nYou are requested to write a program that answers to the question.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input has a line, containing three integers <i>W</i>, <i>H</i>, and <i>S</i>, separated by a space. <i>W</i> and <i>H</i> are the horizontal and vertical sizes of the cave, and <i>S</i> is the number of obstacles to put in the cave. It is guaranteed that 2 &le; <i>W</i>, <i>H</i> &le; 8, and that 0 &le; <i>S</i> &le; <i>W</i> &times; <i>H</i>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the number of patterns of the cave, in a line.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n2 2 2\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\n0\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n2 2 1\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n<pre>\n2\n</pre>\n\n\n", "p01577": "\n<H1><font color=\"#000\">Problem H:</font> Magic Walls</H1>\n\n<p>\nYou are a magician and have a large farm to grow magical fruits.\n</p>\n\n<p>\nOne day, you saw a horde of monsters, approaching your farm. They would ruin your magical farm once they reached your farm. Unfortunately, you are not strong enough to fight against those monsters. To protect your farm against them, you decided to build magic walls around your land.\n</p>\n\n<p>\nYou have four magic orbs to build the walls, namely, the orbs of Aquamarine (A), Bloodstone (B), Citrine (C) and Diamond (D). When you place them correctly and then cast a spell, there will be magic walls between the orbs A and B, between B and C, between C and D, and between D and A. The walls are built on the line segments connecting two orbs, and form a quadrangle as a whole. As the monsters cannot cross the magic walls, the inside of the magic walls is protected.\n</p>\n\n<p>\nNonetheless, you can protect only a part of your land, since there are a couple of restrictions on building the magic walls. There are <i>N</i> hills in your farm, where the orbs can receive rich power of magic. Each orb should be set on the top of one of the hills. Also, to avoid interference between the orbs, you may not place two or more orbs at the same hill.\n</p>\n\n<p>\nNow, you want to maximize the area protected by the magic walls. Please figure it out.\n</p>\n\n\n\n<H2>Input</H2>\n\n<p>\nThe input begins with an integer <i>N</i> (4 &le; <i>N</i> &le; 1500), the number of the hills. Then <i>N</i> line follow. Each of them has two integers <i>x</i> (0 &le; <i>x</i> &le; 50000) and <i>y</i> (0 &le; <i>y</i> &le; 50000), the <i>x</i>- and <i>y</i>-coordinates of the location of a hill.\n</p>\n\n<p>\nIt is guaranteed that no two hills have the same location and that no three hills lie on a single line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the maximum area you can protect. The output value should be printed with one digit after the decimal point, and should be exact.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n5\n2 0\n0 1\n1 3\n4 2\n3 4\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\n7.5\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4\n0 0\n0 3\n1 1\n3 0\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n<pre>\n3.0\n</pre>\n\n", "p01578": "\n<H1><font color=\"#000\">Problem I:</font> Sort by Hand</H1>\n\n<p>\nIt's time to arrange the books on your bookshelf. There are <i>n</i> books in the shelf and each book has a unique number; you want to sort the books according to the numbers. You know that the quick sort and the merge sort are fast sorting methods, but it is too hard for you to simulate them by hand - they are efficient for computers, but not for humans. Thus, you decided to sort the books by inserting the book with the number <i>i</i> into the <i>i</i>-th position. How many insertions are required to complete this task?\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input is <i>n</i> (1 &le; <i>n</i> &le; 20), which is the number of books. The second line contains <i>n</i> integers <i>v</i><sub>1</sub>, ... , <i>v<sub>n</sub></i> (1 &le; <i>v<sub>i</sub></i> &le; <i>n</i>), where <i>v<sub>i</sub></i> indicates the number of the book at the <i>i</i>-th position before the sorting. All <i>v<sub>i</sub></i>'s are distinct.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the minimum number of insertions in a line. If it is impossible for him to complete the sort, print \"impossible\" (without quotes).\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n3\n1 2 3\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\n0\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n3\n2 1 3\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n<pre>\n1\n</pre>\n\n<br/>\n\n\n<H2>Sample Input 3</H2>\n<pre>\n3\n3 2 1\n</pre>\n\n<H2>Output for the Sample Input 3</H2>\n<pre>\n2\n</pre>\n\n<br/>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n20\n4 14 11 13 17 10 1 12 2 6 16 15 8 7 19 18 3 5 9 20\n</pre>\n\n<H2>Output for the Sample Input 4</H2>\n<pre>\n14\n</pre>\n\n\n\n\n", "p01580": "\n<H1><font color=\"#000\">Problem K:</font> Up Above the World So High</H1>\n\n<p>\nOne of the questions children often ask is \"How many stars are there in the sky?\" Under ideal conditions, even with the naked eye, nearly eight thousands are observable in the northern hemisphere. With a decent telescope, you may find many more, but, as the sight field will be limited, you may find much less at a time.\n</p>\n\n<p>\nChildren may ask the same questions to their parents in a spaceship billions of light-years away from the Earth. Their telescopes are similar to ours with circular sight field. It can be rotated freely, that is, the sight vector can take an arbitrary value.\n</p>\n\n<p>\nGiven a set of positions of stars and the spec of a telescope, your task is to determine the maximum\nnumber of stars that can be seen through the telescope at a time.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe first line of a test case contains a positive integer <i>N</i> not exceeding 100, meaning the number of stars. Each of the <i>N</i> lines following it contains three integers, <i>s<sub>x</sub></i>, <i>s<sub>y</sub></i> and <i>s<sub>z</sub></i>. They give the position (<i>s<sub>x</sub></i>, <i>s<sub>y</sub></i>, <i>s<sub>z</sub></i>) of the star described in Euclidean coordinates. You may assume that -1000 &le; <i>s<sub>x</sub></i> &le; 1000, -1000 &le; <i>s<sub>y</sub></i> &le; 1000, -1000 &le; <i>s<sub>z</sub></i> &le; 1000 and (<i>s<sub>x</sub></i>, <i>s<sub>y</sub></i>, <i>s<sub>z</sub></i>) &ne; (0, 0, 0).\n</p>\n\n<p>\nThen comes a line containing a positive integer <i>&psi;</i>  (0 &lt; <i>&psi;</i>  &lt; 90), which represents the angular radius, in degrees, of the sight field of the telescope. The telescope is at the origin of the coordinate system (0, 0, 0).\n</p>\n\n<p>\nYou may assume that change of the angular radius <i>&psi;</i> by less than 0.01 degrees does not affect the answer, and that &ang;POQ is greater than 0.01 degrees for any pair of distinct stars P and Q and the origin O.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOne line containing an integer meaning the maximum number of stars observable through the telescope should be output. No other characters should be contained in the output.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n2\n1 0 0\n0 1 0\n40\n</pre>\n\n<H2>Output for the Sample Input 1</H2>\n<pre>\n1\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n2\n1 0 0\n0 1 0\n50\n</pre>\n\n<H2>Output for the Sample Input 2</H2>\n<pre>\n2\n</pre>\n\n<h2>Note</h2>\n\n\n<p>\nThis problem statement is taken from \"How I Wonder What You Are!\" in ACM-ICPC Asia Regional Contest 2006, Yokohoma, with small but substantial changes.\n</p>", "p01581": "\n<H1><font color=\"#000\">Problem A:</font> Cache Control</H1>\n\n<p>\nMr. Haskins is working on tuning a database system. The database is a simple associative storage that contains key-value pairs. In this database, a key is a distinct identification (ID) number and a value is an object of any type.\n</p>\n\n<p>\nIn order to boost the performance, the database system has a cache mechanism. The cache can be accessed much faster than the normal storage, but the number of items it can hold at a time is limited. To implement caching, he selected least recently used (LRU) algorithm: when the cache is full and a new item (not in the cache) is being accessed, the cache discards the least recently accessed entry and adds the new item.\n</p>\n\n<p>\nYou are an assistant of Mr. Haskins. He regards you as a trusted programmer, so he gave you a task. He wants you to investigate the cache entries after a specific sequence of accesses.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input contains two integers <i>N</i> and <i>M</i>. <i>N</i> is the number of accessed IDs, and <i>M</i> is the size of the cache. These values satisfy the following condition: 1 &le; <i>N</i>, <i>M</i> &le; 100000.\n</p>\n\n<p>\nThe following <i>N</i> lines, each containing one ID, represent the sequence of the queries. An ID is a positive integer less than or equal to 10<sup>9</sup>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint IDs remaining in the cache after executing all queries. Each line should contain exactly one ID. These IDs should appear in the order of their last access time, from the latest to the earliest.\n</p>\n\n<H2>Sample Input and Output</H2>\n\n<H2>Input #1</H2>\n<pre>\n3 2\n1\n2\n3\n</pre>\n<H2>Output #1</H2>\n<pre>\n3\n2\n</pre>\n<br/>\n\n<H2>Input #2</H2>\n<pre>\n5 3\n1\n2\n3\n4\n1\n</pre>\n<H2>Output #2</H2>\n<pre>\n1\n4\n3\n</pre>", "p01582": "\n<H1><font color=\"#000\">Problem B:</font> Cover Time</H1>\n\n<p>\nLet <i>G</i> be a connected undirected graph where <i>N</i> vertices of <i>G</i> are labeled by numbers from 1 to <i>N</i>. <i>G</i> is simple, i.e. <i>G</i> has no self loops or parallel edges.\n</p>\n\n<p>\nLet <i>P</i> be a particle walking on vertices of <i>G</i>. At the beginning, <i>P</i> is on the vertex 1. In each step, <i>P</i> moves to one of the adjacent vertices. When there are multiple adjacent vertices, each is selected in the same\nprobability.\n</p>\n\n<p>\nThe <i>cover time</i> is the expected number of steps necessary for <i>P</i> to visit all the vertices.\n</p>\n\n<p>\nYour task is to calculate the cover time for each given graph G.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input has the following format.\n</p>\n\n<p>\n<i>N M</i><br/>\n<i>a</i><sub>1</sub> <i>b</i><sub>1</sub><br/>\n.<br/>\n.<br/>\n.<br/>\n<i>a<sub>M</sub> b<sub>M</sub></i><br/>\n</p>\n\n<p>\n<i>N</i> is the number of vertices and <i>M</i> is the number of edges. You can assume that 2 &le; <i>N</i> &le; 10. <i>a<sub>i</sub></i> and <i>b<sub>i</sub></i> (1 &le; <i>i</i> &le; <i>M</i>) are positive integers less than or equal to <i>N</i>, which represent the two vertices connected by the <i>i</i>-th edge. You can assume that the input satisfies the constraints written in the problem description, that is, the given graph <i>G</i> is connected and simple.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThere should be one line containing the cover time in the output.\n</p>\n\n<p>\nThe answer should be printed with six digits after the decimal point, and should not have an error greater than 10<sup>-6</sup>.\n</p>\n\n<H2>Sample Input and Output</H2>\n\n<H2>Input #1</H2>\n<pre>\n3 2\n1 2\n2 3\n</pre>\n<H2>Output #1</H2>\n<pre>\n4.000000\n</pre>\n<br/>\n\n<H2>Input #2</H2>\n<pre>\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n</pre>\n<H2>Output #2</H2>\n<pre>\n5.500000\n</pre>", "p01583": "\n<H1><font color=\"#000\">Problem C:</font> Craftsman</H1>\n\n<p>\nTakeshi, a famous craftsman, accepts many offers from all over Japan. However, the tools which he is using now has become already too old. So he is planning to buy new tools and to replace the old ones before next use of the tools. Some offers may incur him monetary cost, if the offer requires the tools to be replaced. Thus, it is not necessarily best to accept all the orders he has received. Now, you are one of his disciples. Your task is to calculate the set of orders to be accepted, that maximizes his earning for a given list of orders and prices of tools. His earning may shift up and down due to sale income and replacement cost.\n</p>\n\n<p>\nHe always purchases tools from his friend's shop. The shop discounts prices for some pairs of items when the pair is purchased at the same time. You have to take the discount into account. The total price to pay may be not equal to the simple sum of individual prices.\n</p>\n\n<p>\nYou may assume that all the tools at the shop are tough enough. Takeshi can complete all orders with replaced tools at this time. Thus you have to buy at most one tool for each kind of tool.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input conforms to the following format:\n</p>\n\n<p>\n<i>N M P</i><br/>\n<i>X</i><sub>1</sub> <i>K</i><sub>1</sub> <i>I</i><sub>1,1</sub> ... <i>I</i><sub>1, <i>K</i><sub>1</sub></sub><br/>\n...<br/>\n<i>X</i><sub><i>N</i></sub> <i>K</i><sub><i>N</i></sub> <i>I</i><sub><i>N</i>,1</sub> ... <i>I</i><sub><i>N</i>, <i>K</i><sub><i>N</i></sub></sub><br/>\n<i>Y</i><sub>1</sub><br/>\n...<br/>\n<i>Y<sub>M</sub></i><br/>\n<i>J</i><sub>1,1</sub> <i>J</i><sub>1,2</sub> <i>D</i><sub>1</sub><br/>\n...<br/>\n<i>J</i><sub><i>P</i>,1</sub> <i>J</i><sub><i>P</i>,2</sub> <i>D<sub>P</sub></i><br/>\n</p>\n\n<p>\nwhere <i>N</i>, <i>M</i>, <i>P</i> are the numbers of orders, tools sold in the shop and pairs of discountable items, respectively.\n</p>\n\n<p>\nThe following <i>N</i> lines specify the details of orders. <i>X<sub>i</sub></i> is an integer indicating the compensation for the <i>i</i>-th order, and <i>K<sub>i</sub></i> is the number of tools required to complete the order. The remaining part of each line describes the tools required for completing the order. Tools are specified by integers from 1 through <i>M</i>.\n</p>\n\n<p>\nThe next <i>M</i> lines are the price list at the shop of Takeshi's friend. An integer <i>Y<sub>i</sub></i> represents the price of the <i>i</i>-th tool.\n</p>\n\n<p>\nThe last <i>P</i> lines of each test case represent the pairs of items to be discounted. When Takeshi buys the <i>J</i><sub><i>i</i>,1</sub>-th and the <i>J</i><sub><i>i</i>,2</sub>-th tool at the same time, he has to pay only <i>D<sub>i</sub></i> yen, instead of the sum of their individual prices. It is guaranteed that no tool appears more than once in the discount list, and that max{<i>Y<sub>i</sub></i>, <i>Y<sub>j</sub></i>} &lt; <i>D<sub>i,j</sub></i> &lt; <i>Y<sub>i</sub></i> + <i>Y<sub>j</sub></i> for every discount prices, where <i>D<sub>i,j</sub></i> is the discount price of <i>i</i>-th and <i>j</i>-th tools bought at the same time.\n</p>\n\n<p>\nAlso it is guaranteed that 1 &le; <i>N</i> &le; 100, 2 &le; <i>M</i> &le; 100, 1 &le; <i>K<sub>i</sub></i> &le; 100, 1 &le; <i>P</i> &le; <i>M</i>/2 and 1 &le; <i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i> &le; 1000.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the maximum possible earning of Takeshi to the standard output.\n</p>\n\n<H2>Sample Input and Output</H2>\n\n<H2>Input #1</H2>\n<pre>\n3 4 2\n100 2 1 2\n100 1 3\n100 1 4\n20\n20\n50\n150\n1 2 30\n3 4 180\n</pre>\n<H2>Output #1</H2>\n<pre>\n120\n</pre>\n<br/>\n\n<H2>Input #2</H2>\n<pre>\n1 2 1\n100 1 2\n20\n40\n1 2 51\n</pre>\n<H2>Output #2</H2>\n<pre>\n60\n</pre>\n<br/>", "p01585": "\n<H1><font color=\"#000\">Problem E:</font> Mickle's Beam</H1>\n\n<p>\nMajor Mickle is commanded to protect a secret base which is being attacked by <i>N</i> tanks. Mickle has an ultimate laser rifle called <i>Mickle's beam</i>. Any object shot by this beam will be immediately destroyed, and there is no way for protection. Furthermore, the beam keeps going through even after destroying objects. The beam is such a powerful and horrible weapon, but there is one drawback: the beam consumes a huge amount of energy. For this reason, the number of shots should be always minimized.\n</p>\n\n<p>\nYour job is to write a program that calculates the minimum number of shots required to destroy all the enemy tanks.\n</p>\n\n<p>\nYou can assume the following:\n</p>\n\n<ul>\n<li> the base is located on the origin (0, 0);</li>\n<li> each tank has a rectangular shape with edges parallel to the <i>x</i>- and <i>y</i>-axes;</li>\n<li> no tank may touch or include the origin;</li>\n<li> no two tanks share the same point;</li>\n<li> the width of beam is negligible; and</li>\n<li> a beam destroys every tank it touches or crosses.</li>\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of an integer sequence.\n</p>\n\n<p>\nThe first integer indicates <i>N</i> (<i>N</i> &le; 2,000). Each of the following <i>N</i> lines contains four integers which indicates the <i>x</i>- and <i>y</i>-coordinates of the lower-left corner and the upper-right corner of a tank respectively. You can assume that every coordinate may not exceed 10,000 in absolute value.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the minimum number of shots of the beam.\n</p>\n\n<H2>Sample Input and Output</H2>\n\n<H2>Input #1</H2>\n<pre>\n4\n2 -1 3 1\n-1 2 1 3\n-3 -1 -2 1\n-1 -3 1 -2\n</pre>\n<H2>Output #1</H2>\n<pre>\n4\n</pre>\n<br/>\n\n<H2>Input #2</H2>\n<pre>\n2\n1 0 2 1\n3 -1 4 0\n</pre>\n<H2>Output #2</H2>\n<pre>\n1\n</pre>\n<br/>", "p01586": "\n<H1><font color=\"#000\">Problem F:</font> Poor Computer</H1>\n\n<p>\nBrian Fulk is struggling with a really poor computer for a couple of days. Now he is trying to write a very simple program which receives a positive integer <i>x</i> and returns some of its multiples, say, <i>a</i><sub>1</sub><i>x</i>,...,<i>a</i><sub><i>N</i></sub><i>x</i>. However, even such a simple task is not easy on this computer since it has only three arithmetic operations: addition, subtraction and left shift.\n</p>\n\n<p>\nLet us describe the situation in more details. Initially the computer stores only a given positive integer <i>x</i>. The program Brian is writing will produce <i>a</i><sub>1</sub><i>x</i>,..., <i>a</i><sub><i>N</i></sub><i>x</i>, where <i>a</i><sub>1</sub>,...,<i>a</i><sub><i>N</i></sub> are given multipliers, using only the following operations:\n</p>\n\n<ul>\n<li> addition of two values,</li>\n<li> subtraction of two values, and</li>\n<li> bitwise left shift (left shift by n bits is equivalent to multiplication by 2<sup><i>n</i></sup>).</li>\n</ul>\n\n<p>\nThe program should not generate any value greater than 42<i>x</i>; under this constraint he can assume that no overflow occurs. Also, since this computer cannot represent negative values, there should not be subtraction of a greater value from a smaller value.\n</p>\n\n<p>\nSome of you may wonder where the number 42 comes from. There is a deep reason related to the answer to life, the universe and everything, but we don't have enough space and time to describe it.\n<?p>\n\n<p>\nYour task is to write a program that finds the shortest sequence of operations to produce the multiples <i>a</i><sub>1</sub><i>x</i>,...,<i>a</i><sub><i>N</i></sub><i>x</i> and reports the length of the sequence. These numbers may be produced in any order.\n</p>\n\n<p>\nHere we give an example sequence for the first sample input, in a C++/Java-like language:\n</p>\n\n<pre>\na = x << 1;  // 2x\nb = x + a;   // 3x\nc = a + b;   // 5x\nd = c << 2;  // 20x\ne = d - b;   // 18x\n</pre>\n\n<H2>Input</H2>\n\n<p>\nThe first line specifies <i>N</i>, the number of multipliers. The second line contains <i>N</i> integers <i>a</i><sub>1</sub>,..., <i>a</i><sub><i>N</i></sub>, each of which represents a multiplier of <i>x</i>.\n</p>\n\n<p>\nYou can assume that <i>N</i> &le; 41 and 2 &le; <i>a<sub>i</sub></i> &le; 42 (1 &le; <i>i</i> &le; <i>N</i>). Furthermore, <i>a</i><sub>1</sub>,...,<i>a<sub>N</sub></i> are all distinct.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput in a line the minimum number of operations you need to produce the values <i>a</i><sub>1</sub><i>x</i>,...,<i>a</i><sub><i>N</i></sub><i>x</i>.\n</p>\n\n<H2>Sample Input and Output</H2>\n\n<H2>Input #1</H2>\n<pre>\n3\n3 5 18\n</pre>\n<H2>Output #1</H2>\n<pre>\n5\n</pre>\n<br/>\n\n<H2>Input #2</H2>\n<pre>\n1\n29\n</pre>\n<H2>Output #2</H2>\n<pre>\n4\n</pre>\n<br/>\n<H2>Input #3</H2>\n<pre>\n4\n12 19 41 42\n</pre>\n<H2>Output #3</H2>\n<pre>\n8\n</pre>", "p01587": "\n<H1><font color=\"#000\">Problem G:</font> Riffle Swap</H1>\n\n<p>\nYou have a deck of 2<sup><i>N</i></sup> cards (1 &le; <i>N</i> &le; 1000000) and want to have them shuffled.\n</p>\n\n<p>\nThe most popular shuffling technique is probably the riffle shuffle, in which you split a deck into two halves, place them in your left and right hands, and then interleave the cards alternatively from those hands. The shuffle is called perfect when the deck is divided exactly in half and the cards are interleaved one-by-one from the bottom half. For example, the perfect riffle shuffle of a deck of eight cards &lt;0, 1, 2, 3, 4, 5, 6, 7&gt; will result in a deck &lt;0, 4, 1, 5, 2, 6, 3, 7&gt;.\n</p>\n\n<p>\nSince you are not so good at shuffling that you can perform the perfect riffle shuffle, you have decided to simulate the shuffle by swapping two cards as many times as needed. How many times you will have to perform swapping at least? As the resultant number will obviously become quite huge, your program should report the number modulo <i>M</i> = 1000003.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input just contains a single integer <i>N</i>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the number of swaps in a line. No extra space or empty line should occur.\n</p>\n\n<H2>Sample Input and Output</H2>\n\n<H2>Input #1</H2>\n<pre>\n1\n</pre>\n<H2>Output #1</H2>\n<pre>\n0\n</pre>\n<br/>\n\n<H2>Input #2</H2>\n<pre>\n2\n</pre>\n<H2>Output #2</H2>\n<pre>\n1\n</pre>\n<br/>\n<H2>Input #3</H2>\n<pre>\n3\n</pre>\n<H2>Output #3</H2>\n<pre>\n4\n</pre>\n<br/>\n\n<H2>Input #4</H2>\n<pre>\n4\n</pre>\n<H2>Output #4</H2>\n<pre>\n10\n</pre>\n<br/>\n\n<H2>Input #5</H2>\n<pre>\n10\n</pre>\n<H2>Output #5</H2>\n<pre>\n916\n</pre>\n\n\n", "p01588": "\n<H1><font color=\"#000\">Problem H:</font> Round Table</H1>\n\n<p>\nYou are the owner of a restaurant, and you are serving for <i>N</i> customers seating in a round table.\n</p>\n\n<p>\nYou will distribute <i>M</i> menus to them. Each customer receiving a menu will make the order of plates, and\nthen pass the menu to the customer on the right unless he or she has not make the order. The customer <i>i</i> takes <i>L<sub>i</sub></i> unit time for the ordering.\n</p>\n\n<p>\nYour job is to write a program to calculate the minimum time until all customers to call their orders, so you can improve your business performance.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a sequence of positive integers.\n</p>\n\n<p>\nThe first line of the input contains two positive integers <i>N</i> (<i>N</i> &le; 50,000) and <i>M</i> (<i>M</i> &le; <i>N</i>). The second line contains <i>N</i> positive integers <i>L</i><sub>1</sub>, <i>L</i><sub>2</sub>,..., <i>L<sub>N</sub></i> (<i>L<sub>i</sub></i> &le; 600).\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the minimum possible time required for them to finish ordering.\n</p>\n\n<H2>Sample Input and Output</H2>\n\n<H2>Input #1</H2>\n<pre>\n3 2\n1 5 10\n</pre>\n<H2>Output #1</H2>\n<pre>\n10\n</pre>\n<br/>\n\n<H2>Input #2</H2>\n<pre>\n4 2\n1 2 3 4\n</pre>\n<H2>Output #2</H2>\n<pre>\n5\n</pre>", "p01589": "\n<H1><font color=\"#000\">Problem I:</font> Strange Currency System</H1>\n\n<p>\nThe currency system in the Kingdom of Yoax-Musty is strange and fairly inefficient. Like other countries, the kingdom has its own currencty unit denoted by K <span>$</span> (kingdom dollar). However, the Ministry of Finance issues bills for every value between 1 K <span>$</span> and (2<sup>31</sup> - 1) K <span>$</span> worth.\n</p>\n\n<p>\nOn the other hand, this system often enables people to make many different values just with a small number of bills. For example, if you have four bills of 1 K <span>$</span>, 2 K <span>$</span>, 4 K <span>$</span>, and 8 K <span>$</span> worth respectively, you can make any values from 1 K #36; to 15 K <span>$</span>.\n</p>\n\n<p>\nIn this problem, you are requested to write a program that finds the minimum value that cannot be made with a given set (multiset in a mathematical sense) of bills. For the case with the four bills (1 K <span>$</span>, 2 K <span>$</span>, 4 K <span>$</span>, and 8 K <span>$</span>), since you can make any values up to 15 K <span>$</span>, your program should report 16 K <span>$</span>.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of two lines. The first line contains an integer <i>N</i> (1 &le; <i>N</i> &le; 10000), the number of bills. The second line contains <i>N</i> integers, each of which represents the value of a bill in K <span>$</span>. There may be multiple bills of the same value.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the minimum value unable to be made on a line. The value should be given in K <span>$</span> and without any currency sign or name.\n</p>\n\n<H2>Sample Input and Output</H2>\n\n<H2>Input #1</H2>\n<pre>\n4\n1 2 4 8\n</pre>\n<H2>Output #1</H2>\n<pre>\n16\n</pre>\n<br/>\n\n<H2>Input #2</H2>\n<pre>\n5\n1 1 3 11 2\n</pre>\n<H2>Output #2</H2>\n<pre>\n8\n</pre>", "p01590": "\n<H1><font color=\"#000\">Problem K:</font> Trading Ship</H1>\n\n<p>\nYou are on board a trading ship as a crew.\n</p>\n\n<p>\nThe ship is now going to pass through a strait notorious for many pirates often robbing ships. The Maritime Police has attempted to expel those pirates many times, but failed their attempts as the pirates are fairly strong. For this reason, every ship passing through the strait needs to defend themselves from the pirates. \n</p>\n\n<p>\nThe navigator has obtained a sea map on which the location of every hideout of pirates is shown. The strait is considered to be a rectangle of W &times; H on an xy-plane, where the two opposite corners have the coordinates of (0, 0) and (<i>W</i>, <i>H</i>). The ship is going to enter and exit the strait at arbitrary points on <i>y</i> = 0 and <i>y</i> = <i>H</i> respectively.\n</p>\n\n<p>\nTo minimize the risk of attack, the navigator has decided to take a route as distant from the hideouts as possible. As a talented programmer, you are asked by the navigator to write a program that finds the best route, that is, the route with the maximum possible distance to the closest hideouts. For simplicity, your program just needs to report the distance in this problem.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input begins with a line containing three integers <i>W</i>, <i>H</i>, and <i>N</i>. Here, <i>N</i> indicates the number of hideouts on the strait. Then <i>N</i> lines follow, each of which contains two integers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i>, which denote the coordinates the <i>i</i>-th hideout is located on.\n</p>\n\n<p>\nThe input satisfies the following conditions: 1 &le; <i>W</i>, <i>H</i> &le; 10<sup>9</sup>, 1 &le; <i>N</i> &le; 500, 0 &le; <i>x<sub>i</sub></i> &le; <i>W</i>, 0 &le; <i>y<sub>i</sub></i> &le; <i>H</i>.\n</p>\n\n<H2>Output</H2>\n\n<!--\n<p>\nThere should be a line containing the distance from the best route to the closest hideout(s). The distance should be printed with three fractional digits and should not contain an absolute error greater than 10<sup>-3</sup>.\n</p>\n-->\n\n<p>\nThere should be a line containing the distance from the best route to the closest hideout(s). The distance should be in a decimal fraction and should not contain an absolute error greater than 10<sup>-3</sup>.\n</p>\n\n<H2>Sample Input and Output</H2>\n\n<H2>Input #1</H2>\n<pre>\n10 10 1\n3 5\n</pre>\n<H2>Output #1</H2>\n<pre>\n7.000\n</pre>\n<br/>\n\n<H2>Input #2</H2>\n<pre>\n10 10 2\n2 2\n8 8\n</pre>\n<H2>Output #2</H2>\n<pre>\n4.243\n</pre>\n<br/>\n<H2>Input #3</H2>\n<pre>\n10 10 3\n0 1\n4 4\n8 1\n</pre>\n<H2>Output #3</H2>\n<pre>\n2.500\n</pre>", "p01592": "\n<h2>Problem B: Blame Game</h2>\n\n<p>Alice and Bob are in a factional dispute. Recently a big serious problem\narised in a project both Alice and Bob had been working for. This problem was\ncaused by lots of faults of Alice's and Bob's sides; those faults are closely\nrelated.</p>\n<p>Alice and Bob started to blame each other. First, Alice claimed it was\ncaused by Bob's fault. Then Bob insisted his fault was led by Alice's fault.\nSoon after, Alice said that her fault should not have happened without Bob's\nanother fault. So on so forth. It was terrible. It was totally a blame game.\nStill, they had their pride. They would not use the same fault more than once in\ntheir claims.</p>\n<p>All right, let's see the situation in terms of a game.</p>\n<p>Alice and Bob have a number of faults. Some pairs of Alice and Bob faults\nhave direct relationship between them. This relationship is bidirectional; if a\nfault X is led by another fault Y, they can say either \"X was due to Y.\" or\n\"even with X, the problem could be avoided without Y.\" Note that not both, since\nthey never pick up the same fault in their claims.</p>\n<p>Alice and Bob take their turns alternatively. Alice takes the first turn\nby claiming any of Bob's faults. Then Bob makes his claim with Alice's fault\ndirectly related to the claimed fault. Afterward, in each turn, one picks up\nanother's fault directly related to the fault claimed in the previous turn. If\nhe/she has no faults that have not been claimed, then he/she loses this game.</p>\n<p>By the way, you have been working both under Alice and Bob. You know all\nthe faults and relationships. Your task is to write a program to find out which\nwould win this game, under the assumption that they always take their optimal\nstrategies. If you could choose the winning side, you would not have to take the\nresponsibility for the arisen problem.</p>\n\n<h2>Input</h2>\n\n<p>Each input contains one test case. The first line of the input contains\ntwo integers <var>N</var> and <var>M</var> (0 <= <var>N</var>, <var>M</var> <=\n500), which denote the numbers of Alice's and Bob's faults respectively. Alice's\nfaults are numbered from 1 to <var>N</var>; so are Bob's from 1 to <var>M</var>.\nThen <var>N</var> lines follow to describe the relationships among the faults.\nThe <var>i</var>-th line begins with a non-negative integer <var>K<sub>i</sub></var>\n(0 <= <var>K<sub>i</sub></var> <= <var>M</var>). It is then followed by <var>K<sub>i</sub></var>\npositive integers, where the <var>j</var>-th number <var>b<sub>i,j</sub></var>\n(1 <= <var>b<sub>i,j</sub></var> <= <var>M</var>) indicates there is a direct\nrelationship between the <var>i</var>-th Alice's fault and the <var>b<sub>i,j</sub></var>-th\nBob's fault. It is guaranteed that \n<var>b<sub>i,j</sub></var> != <var>b<sub>i,j'</sub></var> \nfor all <var>i</var>, <var>j</var>, <var>j'</var>\nsuch that 1 <= <var>i</var> <= <var>N</var> and 1 <= <var>j</var> < <var>j'</var>\n<= <var>K<sub>i</sub></var>.</p>\n\n<h2>Output</h2>\n\n<p>Print either \"Alice\" or \"Bob\" to indicate the winner of the blame game.</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n1 1\n1 1\n</pre>\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>\nBob\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>\n3 3\n3 1 2 3\n1 3\n1 3\n</pre>\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>\nAlice\n</pre>\n", "p01598": "\n<h2>Problem H: Testing Sorting Networks</h2>\n\n<p>A <var>N</var> sorting network is a circuit that accepts <var>N</var>\nnumbers as its input, outputs them sorted. Mr. Smith is an engineer of a company\nthat sells various sizes of the circuit.</p>\n\n<p>One day, the company got an order of <var>N</var> sorting networks.\nUnfortunately, they didn't have the circuit for <var>N</var> numbers at the\ntime. The clerk once declined the order for being out of stock, but the client\nwas so urgent that he offered much money if he could get the circuit in a week.\nThe deal escalated to a manager, and she asked Mr. Smith for a solution to\nproduce the <var>N</var> sorting networks by the deadline.</p>\n\n<p>He came up with an idea to combine several <var>N/2</var> sorting\nnetworks, because he noticed that they have many stocks of the circuits for <var>N/2</var>\nnumbers. He designed a new circuit using the <var>N/2</var> sorting networks,\nbut he was not sure if it would really work as an <var>N</var> sorting network.\nSo, he asked a colleague, you, to check if it was actually an <var>N</var>\nsorting network.</p>\n\n<p>The circuit he designed consists of multiple stages. Each stage of the\ncircuit consists of two <var>N/2</var> sorting networks, which makes each stage\naccept a sequence of <var>N</var> numbers as inputs and output a sequence of <var>N</var>\nnumbers. From the 1st to the <var>N/2</var>-th input numbers of a stage goes to\none of those <var>N/2</var> sorting networks, and from the <var>(N/2+1)</var>-th\nto the <var>N</var>-th input numbers goes to the other. Similarly, the first\nhalf of the output numbers of a stage is the output of the former sorting\nnetwork and the second half is the output of the latter, both of which are\nsorted in ascending order. Each output of a stage is connected to exactly one\ninput of the next stage, and no two inputs are connected to the same output\nline. The input of the last stage is the input of the whole circuit and the\noutput of the first stage is the output of the whole circuit.</p>\n\n<h2>Input</h2>\n<p>The input begins with a line containing a positive even integer <var>N</var>\n(4 <= <var>N</var> <= 100) and a positive integer <var>D</var> (1 <= <var>D</var>\n<= 10). <var>N</var> indicates the number of the input and output of the circuit\nand <var>D</var> indicates the number of the stages of the circuit. The <var>i</var>-th\nline of the following <var>D-1</var> lines contains <var>N</var> integers <var>w<sub>i<sub>1</sub></sub></var>,\n<var>w<sub>i<sub>2</sub></sub></var>,..., <var>w<sub>i<sub>N</sub></sub></var>\n(1 <= <var>w<sub>i<sub>j</sub></sub></var> <= <var>N</var> ), which describes\nthe wiring between the <var>i</var>-th and <var>(i+1)</var>-th stages. <var>w<sub>i<sub>j</sub></sub></var>\nindicates the <var>j</var>-th input of the <var>i</var>-th stage and the <var>w<sub>i<sub>j</sub></sub></var>-th\noutput of the <var>(i+1)</var>-th stage are wired. You can assume <var>w<sub>i<sub>1</sub></sub></var>,\n<var>w<sub>i<sub>2</sub></sub></var>,..., <var>w<sub>i<sub>N</sub></sub></var>\nare unique for each <var>i</var>.</p>\n\n\n<h2>Output</h2>\n<p>Print a line containing \"Yes\" if the circuit works as an <var>N</var>\nsorting network. Print \"No\" otherwise.</p>\n\n\n<h2>Sample Input 1</h2>\n\n<pre>4 4\n1 3 4 2 \n1 4 2 3 \n1 3 2 4</pre>\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>Yes</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>4 3\n3 1 2 4\n1 3 2 4</pre>\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>No</pre>\n", "p01599": "\n<h2>Problem I: Train King</h2>\n\n<p>Roland has been given a mission of dangerous material transfer by Train\nKing. The material is stored in the station A and subject to being transferred\nto the station B. He will bring it by direct trains between A and B, one (or\nzero) unit per ride.</p>\n\n<p>Your task is to write a program to find out the most optimal way of his\nbringing. Your program will receive the timetable of trains on the mission day\nand should report how many units of material can be transferred at the end. Be\naware that there can be trains which can go to the past time or the same time\nwhich train leaved the station.</p>\n\n<p>Each train consists of one or more cars. Roland is disallowed to ride the\nsame car of the same train multiple times. This restriction avoids time paradox.\nHe is still allowed to get on a different car, though. You can assume he can\nchange trains instantly.</p>\n\n<h2>Input</h2>\n<p>The first line contains two integers <var>N</var><sub>AB</sub> and <var>N</var><sub>BA</sub>\n(0 <= <var>N</var><sub>AB</sub>, 0 <= <var>N</var><sub>BA</sub> and <var>N</var><sub>AB</sub>\n+ <var>N</var><sub>BA</sub> <= 50). <var>N</var><sub>AB</sub> denotes the number\nof trains from A to B; <var>N</var><sub>BA</sub> denotes the number from B to A.</p>\n\n<p>The next <var>N</var><sub>AB</sub> lines describe the information about\ntrains from A to B. Each line gives the information of one train with three\nintegers <var>C<sub>i</sub></var>, <var>D<sub>i</sub></var> and <var>A<sub>i</sub></var>\n(1 <= <var>C<sub>i</sub></var> <= 10, 0 <= <var>D<sub>i</sub></var>, <var>A<sub>i</sub></var>\n< 86400) : the number of cars, the departure time, and the arrival time.</p>\n\n<p>The next <var>N</var><sub>BA</sub> lines describe the information about\ntrains from B to A. The information is given in the same format.</p>\n\n<h2>Output</h2>\n\n<p>Print the maximum amount, in units, of dangerous material that can be\ntransferred.</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n1 1\n10 100 0\n10 100 0\n</pre>\n\n<h2>Output for the Sample Input 1</h2>\n\n<pre>10</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>\n5 5\n10 0 100\n10 200 300\n10 400 500\n10 600 700\n10 800 900\n10 100 200\n10 300 400\n10 500 600\n10 700 800\n10 900 1000\n</pre>\n\n<h2>Output for the Sample Input 2</h2>\n\n<pre>5</pre>", "p01647": "\n<h2>Problem Statement</h2>\n\n<p>\n<i>Texas hold 'em</i> is one of the standard poker games, originated in Texas, United States.\nIt is played with a standard deck of 52 cards, which has 4 <i>suits</i> (spades, hearts, diamonds and clubs) and 13 <i>ranks</i> (A, K, Q, J and 10-2), without jokers.\n</p>\n\n<p>\nWith betting aside, a game goes as described below.\n</p>\n\n<p>\nAt the beginning each player is dealt with two cards face down.\nThese cards are called <i>hole cards</i> or <i>pocket cards</i>, and do not have to be revealed until the showdown.\nThen the dealer deals three cards face up as <i>community cards</i>, i.e. cards shared by all players.\nThese three cards are called the <i>flop</i>.\nThe flop is followed by another community card called the <i>turn</i> then one more community card called the <i>river</i>.\n</p>\n\n<p>\nAfter the river, the game goes on to the <i>showdown</i>.\nAll players reveal their hole cards at this point.\nThen each player chooses five out of the seven cards, i.e. their two hole cards and the five community cards, to form a <i>hand</i>.\nThe player forming the strongest hand wins the game.\nThere are ten possible kinds of hands, listed from the strongest to the weakest:\n</p>\n\n<ul>\n<li> <i>Royal straight flush</i>: A, K, Q, J and 10 of the same suit. This is a special case of straight flush.</li>\n<li> <i>Straight flush</i>: Five cards in sequence (e.g. 7, 6, 5, 4 and 3) and of the same suit.</li>\n<li> <i>Four of a kind</i>: Four cards of the same rank.</li>\n<li> <i>Full house</i>: Three cards of the same rank, plus a pair of another rank.</li>\n<li> <i>Flush</i>: Five cards of the same suit, but not in sequence.</li>\n<li> <i>Straight</i>: Five cards in sequence, but not of the same suit.</li>\n<li> <i>Three of a kind</i>: Just three cards of the same rank.</li>\n<li> <i>Two pairs</i>: Two cards of the same rank, and two other cards of another same rank.</li>\n<li> <i>One pair</i>: Just a pair of cards (two cards) of the same rank.</li>\n<li> <i>High card</i>: Any other hand.</li>\n</ul>\n\n<p>\nFor the purpose of a sequence, J, Q and K are treated as 11, 12 and 13 respectively.\nA can be seen as a rank either next above K or next below 2, thus both A-K-Q-J-10 and 5-4-3-2-A are possible (but not 3-2-A-K-Q or the likes).\n</p>\n\n<p>\nIf more than one player has the same kind of hand, ties are broken by comparing the ranks of the cards.\nThe basic idea is to compare first those forming sets (pairs, triples or quads) then the rest cards one by one from the highest-ranked to the lowest-ranked, until ties are broken.\nMore specifically:\n</p>\n\n<ul>\n<li> <i>Royal straight flush</i>: (ties are not broken)</li>\n<li> <i>Straight flush</i>: Compare the highest-ranked card.</li>\n<li> <i>Four of a kind</i>: Compare the four cards, then the remaining one.</li>\n<li> <i>Full house</i>: Compare the three cards, then the pair.</li>\n<li> <i>Flush</i>: Compare all cards one by one.</li>\n<li> <i>Straight</i>: Compare the highest-ranked card.</li>\n<li> <i>Three of a kind</i>: Compare the three cards, then the remaining two.</li>\n<li> <i>Two pairs</i>: Compare the higher-ranked pair, then the lower-ranked, then the last one.</li>\n<li> <i>One pair</i>: Compare the pair, then the remaining three.</li>\n<li> <i>High card</i>: Compare all cards one by one.</li>\n</ul>\n\n<p>\nThe order of the ranks is A, K, Q, J, 10, 9, ..., 2, from the highest to the lowest,\nexcept for A next to 2 in a straight regarded as lower than 2.\nNote that there are exceptional cases where ties remain.\nAlso note that the suits are not considered at all in tie-breaking.\n</p>\n\n<p>\nHere are a few examples of comparison (note these are only intended for explanatory purpose; some combinations cannot happen in Texas Hold 'em):\n</p>\n\n<ul>\n<li><p>J-J-J-6-3 and K-K-Q-Q-8.</p></li>\n</ul>\n\n<p>\nThe former beats the latter since three of a kind is stronger than two pairs.\n</p>\n\n<ul>\n<li><p>J-J-J-6-3 and K-Q-8-8-8.</p></li>\n</ul>\n\n<p>\nSince both are three of a kind, the triples are considered first, J and 8 in this case.\nJ is higher, hence the former is a stronger hand.\nThe remaining cards, 6-3 and K-Q, are not considered as the tie is already broken.\n</p>\n\n<ul>\n<li><p>Q-J-8-6-3 and Q-J-8-5-3.</p></li>\n</ul>\n\n<p>\nBoth are high cards, assuming hands not of a single suit (i.e. flush).\nThe three highest-ranked cards Q-J-8 are the same, so the fourth highest are compared.\nThe former is stronger since 6 is higher than 5.\n</p>\n\n<ul>\n<li><p>9-9-Q-7-2 and 9-9-J-8-5.</p></li>\n</ul>\n\n<p>\nBoth are one pair, with the pair of the same rank (9). \nSo the remaining cards, Q-7-2 and J-8-5, are compared from the highest to the lowest,\nand the former wins as Q is higher than J.\n</p>\n\n<p>\nNow suppose you are playing a game of Texas Hold 'em with one opponent, and the hole cards and the flop have already been dealt.\nYou are surprisingly telepathic and able to know the cards the opponent has.\nYour ability is not, however, as strong as you can predict which the turn and the river will be.\n</p>\n\n<p>\nYour task is to write a program that calculates the probability of your winning the game,\nassuming the turn and the river are chosen uniformly randomly from the remaining cards.\nYou and the opponent always have to choose the hand strongest possible.\nTies should be included in the calculation, i.e. should be counted as losses.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\nThe input consists of multiple datasets, each of which has the following format:\n</p>\n\n<pre>\n<var>YourCard_1</var> <var>YourCard_2</var>\n<var>OpponentCard_1</var> <var>OpponentCard_2</var>\n<var>CommunityCard_1</var> <var>CommunityCard_2</var> <var>CommunityCard_3</var>\n</pre>\n\n<p>\nEach dataset consists of three lines.\nThe first and second lines contain the hole cards of yours and the opponent's respectively.\nThe third line contains the flop, i.e. the first three community cards.\nThese cards are separated by spaces.\n</p>\n\n<p>\nEach card is represented by two characters.\nThe first one indicates the suit: <code>S</code> (spades), <code>H</code> (hearts), <code>D</code> (diamonds) or <code>C</code> (clubs).\nThe second one indicates the rank: <code>A</code>, <code>K</code>, <code>Q</code>, <code>J</code>, <code>T</code> (10) or <code>9</code>-<code>2</code>.\n</p>\n\n<p>\nThe end of the input is indicated by a line with <code>#</code>.\nThis should not be processed.\n</p>\n\n<h2>Output</h2>\n\n<p>\nPrint the probability in a line.\nThe number may contain an arbitrary number of digits after the decimal point,\nbut should not contain an absolute error greater than <var>10^{-6}</var>.\n</p>\n\n\n<h2>Sample Input</h2>\n\n<pre>\nSA SK\nDA CA\nSQ SJ ST\nSA HA\nD2 C3\nH4 S5 DA\nHA D9\nH6 C9\nH3 H4 H5\n#\n</pre>\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\n1.00000000000000000000\n0.34444444444444444198\n0.63030303030303025391\n</pre>\n", "p01646": "\n<h2>Problem Statement</h2>\n\n<p>\nWe found a dictionary of the Ancient Civilization Mayo (ACM) during excavation of the ruins.\nAfter analysis of the dictionary, we revealed they used a language that had not more than 26 letters.\nSo one of us mapped each letter to a different English alphabet and typed all the words in the dictionary into a computer.\n</p>\n\n<p>\nHow the words are ordered in the dictionary, especially whether they are ordered lexicographically, is an interesting topic to many people.\nAs a good programmer, you are requested to write a program to judge whether we can consider the words to be sorted in a lexicographical order.\n</p>\n\n<p>\nNote:\nIn a lexicographical order, a word always precedes other words it is a prefix of.\nFor example, <code>ab</code> \nprecedes <code>abc</code>, \n<code>abde</code>, and so on.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\nThe input consists of multiple datasets. Each dataset is formatted as follows:\n</p>\n\n<pre>\n<var>n</var>\n<var>string_1</var>\n...\n<var>string_n</var>\n</pre>\n\n<p>\nEach dataset consists of <var>n+1</var> lines.\nThe first line of each dataset contains an integer that indicates <var>n</var> (<var>1 \\leq n \\leq 500</var>).\nThe <var>i</var>-th line of the following <var>n</var> lines contains <var>string_i</var>, which consists of up to 10 English lowercase letters.\n</p>\n\n<p>\nThe end of the input is <code>0</code>, and this should not be processed.\n</p>\n\n<h2>Output</h2>\n\n<p>\nPrint either <code>yes</code> or \n<code>no</code> in a line for each dataset, in the order of the input.\nIf all words in the dataset can be considered to be ordered lexicographically, print <code>yes</code>.\nOtherwise, print <code>no</code>.\n</p>\n\n\n<h2>Sample Input</h2>\n\n<pre>\n4\ncba\ncab\nb\na\n3\nbca\nab\na\n5\nabc\nacb\nb\nc\nc\n5\nabc\nacb\nc\nb\nb\n0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\nyes\nno\nyes\nno\n</pre>\n", "p01648": "\n<h2>Problem Statement</h2>\n\n<p>\nYou are given a connected undirected graph which has even numbers of nodes.\nA connected graph is a graph in which all nodes are connected directly or indirectly by  edges.\n</p>\n\n<p>\nYour task is to find a spanning tree whose median value of edges' costs is  minimum.\nA spanning tree of a graph means that a tree which contains all nodes of the graph.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\nThe input consists of multiple  datasets.\n</p>\n\n<p>\nThe format of each dataset is as follows.\n</p>\n\n<pre>\n<var>n</var> <var>m</var>\n<var>s_1</var> <var>t_1</var> <var>c_1</var>\n...\n<var>s_m</var> <var>t_m</var> <var>c_m</var>\n</pre>\n\n<p>\nThe first line contains an even number <var>n</var> (<var>2 \\leq n \\leq 1,000</var>) and an integer <var>m</var> <var>(n-1 \\leq m \\leq 10,000)</var>.\n<var>n</var> is the nubmer of nodes and <var>m</var> is the number of edges in the graph.\n</p>\n\n<p>\nThen <var>m</var> lines follow, each of which contains <var>s_i</var> (<var>1 \\leq s_i \\leq n</var>), <var>t_i</var> (<var>1 \\leq s_i \\leq n, t_i \\neq s_i</var>) and <var>c_i</var> (<var>1 \\leq c_i \\leq 1,000</var>).\nThis means there is an edge between the nodes <var>s_i</var> and <var>t_i</var>  and its cost is <var>c_i</var>.\nThere is no more than one edge which connects <var>s_i</var> and <var>t_i</var>.\n</p>\n\n<p>\nThe input terminates when <var>n=0</var> and <var>m=0</var>.\nYour program must not output anything for this case.\n</p>\n\n<h2>Output</h2>\n\n<p>\nPrint the median value in a line for each dataset.\n</p>\n\n\n<h2>Sample Input</h2>\n\n<pre>\n2 1\n1 2 5\n4 6\n1 2 1\n1 3 2\n1 4 3\n2 3 4\n2 4 5\n3 4 6\n8 17\n1 4 767\n3 1 609\n8 3 426\n6 5 972\n8 1 607\n6 4 51\n5 1 683\n3 6 451\n3 4 630\n8 7 912\n3 7 43\n4 7 421\n3 5 582\n8 4 538\n5 7 832\n1 6 345\n8 2 608\n0 0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\n5\n2\n421\n</pre>\n", "p01649": "\n<h2>Problem Statement</h2>\n\n<p>\nYou have a billiard table.\nThe playing area of the table is rectangular.\nThis billiard table is special as it has no pockets, and the playing area is completely surrounded with a cushion.\n</p>\n\n<p>\nYou succeeded in producing a ultra-precision billiards playing robot.\nWhen you put some balls on the table, the machine hits one of those balls.\nThe hit ball stops after 10,000 unit distance in total moved.\n</p>\n\n<p>\nWhen a ball collided with the cushion of the table, the ball takes the orbit like mirror reflection.\nWhen a ball collided with the corner, the ball bounces back on the course that came.\n</p>\n\n<p>\nYour mission is to predict which ball collides first with the ball which the robot hits .\n</p>\n\n\n<h2>Input</h2>\n\n<p>\nThe input is a sequence of datasets.\nThe number of datasets is less than 100.\nEach dataset is formatted as follows.\n</p>\n\n<pre>\n<var>n</var>\n<var>w</var> <var>h</var> <var>r</var> <var>v_x</var> <var>v_y</var>\n<var>x_1</var> <var>y_1</var>\n<var>...</var>\n<var>x_n</var> <var>y_n</var>\n</pre>\n\n<p>\nFirst line of a dataset contains an positive integer <var>n</var>, which represents the number of balls on the table (<var>2 \\leq n \\leq 11</var>).\nThe next line contains five integers (<var>w</var>, <var>h</var>, <var>r</var>, <var>v_x</var>, <var>v_y</var>) separated by a single space,\nwhere <var>w</var> and <var>h</var> are the width and the length of the playing area of the table respectively (<var>4 \\leq w, h \\leq 1,000</var>),\n<var>r</var> is the radius of the balls (<var>1 \\leq r \\leq 100</var>).\nThe robot hits the ball in the vector (<var>v_x, v_y</var>) direction (<var>-10,000 \\leq v_x, v_y \\leq 10,000</var> and <var>(v_x, v_y) \\neq (0, 0)</var> ).\n</p>\n\n<p>\nThe following <var>n</var> lines give position of balls.\nEach line consists two integers separated by a single space,\n<var>(x_i, y_i)</var> means the center position of the <var>i</var>-th ball on the table in the initial state (<var>r &lt; x_i &lt; w - r</var>, <var>r &lt; y_i &lt; h - r</var>).\n<var>(0, 0)</var> indicates the position of the north-west corner of the playing area,\nand <var>(w, h)</var> indicates the position of the south-east corner of the playing area.\nYou can assume that, in the initial state, the balls do not  touch each other  nor the cushion.\n</p>\n\n<p>\nThe robot always hits the first ball in the list.\nYou can assume that the given values do not have errors.\n</p>\n\n<p>\nThe end of the input is indicated by a line containing a single zero.\n</p>\n\n<h2>Output</h2>\n\n<p>\nFor each dataset, print the index of the ball which first collides with the  ball  the robot hits.\nWhen the hit ball collides with no ball until it stops moving, print <code>-1</code>.\n</p>\n\n<p>\nYou can assume that no more than one ball  collides with the hit ball first, at the same time.\n</p>\n\n<p>\nIt is also guaranteed that, when <var>r</var> changes by <var>eps</var> (<var>eps &lt; 10^{-9}</var>), \nthe ball which collides first and the way of the collision do not change.\n</p>\n\n\n<h2>Sample Input</h2>\n\n<pre>\n3\n26 16 1 8 4\n10 6\n9 2\n9 10\n3\n71 363 4 8 0\n52 238\n25 33\n59 288\n0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\n3\n-1\n</pre>\n", "p01650": "\n<h2>Problem Statement</h2>\n\n<p>\nThere is a maze which can be described as a <var>W \\times H</var> grid.\nThe upper-left cell is denoted as (1, 1), and the lower-right cell is <var>(W, H)</var>.\nYou  are now at the cell (1, 1) and  have to  go to the cell <var>(W, H)</var>.\nHowever, you can only move to the right adjacent cell or to the lower adjacent cell.\nThe following figure is an example of a maze.\n</p>\n\n<pre>\n...#......\na###.#####\n.bc...A...\n##.#C#d#.#\n.#B#.#.###\n.#...#e.D.\n.#A..###.#\n..e.c#..E.\n####d###.#\n#....#.#.#\n##E...d.C.\n</pre>\n\n<p>\nIn the maze, some cells are free (denoted by <code>.</code>) and some cells are occupied by rocks (denoted by <code>#</code>), where you cannot enter.\nAlso there are jewels (denoted by lowercase alphabets) in some of the free cells  and holes to place jewels (denoted by uppercase alphabets).\nDifferent alphabets  correspond to different types of jewels, i.e. a cell denoted by <code>a</code> contains a jewel of type A, and a cell denoted by <code>A</code> contains a hole to place a jewel of type A.\nIt is said that, when we place a jewel to a corresponding hole, something happy will happen.\n</p>\n\n<p>\nAt the cells with jewels, you can choose whether you pick a jewel or not.\nSimilarly, at the cells with holes, you can choose whether you place a jewel you have or not.\nInitially you do not have any jewels.\nYou have a very big bag, so you can bring arbitrarily many jewels.\nHowever, your bag is a stack, that is, you can only place the jewel that you  picked up last.\n</p>\n\n<p>\nOn the way from cell (1, 1) to cell <var>(W, H)</var>, how many jewels can you place to correct holes?\n</p>\n\n\n<h2>Input</h2>\n\n<p>\nThe input  contains a sequence of datasets.\nThe end of the input is indicated by a line containing two zeroes.\nEach dataset is formatted as follows.\n</p>\n\n<pre>\n<var>H</var> <var>W</var>\n<var>C_{11}</var> <var>C_{12}</var> ... <var>C_{1W}</var>\n<var>C_{21}</var> <var>C_{22}</var> ... <var>C_{2W}</var>\n...\n<var>C_{H1}</var> <var>C_{H2}</var> ... <var>C_{HW}</var>\n</pre>\n\n<p>\nHere, <var>H</var> and <var>W</var> are the height and width of the grid.\nYou may assume <var>1 \\leq W, H \\leq 50</var>.\nThe rest of the datasets consists of <var>H</var> lines, each of which is composed of <var>W</var> letters.\nEach letter <var>C_{ij}</var> specifies the type of the cell <var>(i, j)</var> as described before.\nIt is guaranteed that <var>C_{11}</var> and <var>C_{WH}</var> are never <code>#</code>.\n</p>\n\n<p>\nYou may also assume that each lowercase or uppercase alphabet appear at most 10 times in each dataset.\n</p>\n\n<h2>Output</h2>\n\n<p>\nFor each dataset, output the maximum number of  jewels that you can place to corresponding holes.\nIf you cannot reach the cell <var>(W, H)</var>, output -1.\n</p>\n\n\n<h2>Sample Input</h2>\n\n<pre>\n3 3\nac#\nb#C\n.BA\n3 3\naaZ\na#Z\naZZ\n3 3\n..#\n.#.\n#..\n1 50\nabcdefghijklmnopqrstuvwxyYXWVUTSRQPONMLKJIHGFEDCBA\n1 50\naAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyY\n1 50\nabcdefghijklmnopqrstuvwxyABCDEFGHIJKLMNOPQRSTUVWXY\n1 50\naaaaaaaaaabbbbbbbbbbcccccCCCCCBBBBBBBBBBAAAAAAAAAA\n10 10\n...#......\na###.#####\n.bc...A...\n##.#C#d#.#\n.#B#.#.###\n.#...#e.D.\n.#A..###.#\n..e.c#..E.\n####d###.#\n##E...D.C.\n0 0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\n2\n0\n-1\n25\n25\n1\n25\n4\n</pre>\n", "p01651": "\n<h2>Problem Statement</h2>\n\n<p>\nLet <var>b_i(x)</var> be the <var>i</var>-th least significant bit of <var>x</var>, i.e. the <var>i</var>-th least significant digit of <var>x</var> in base 2 (<var>i \\geq 1</var>).\nFor example, since <var>6 = (110)_2</var>, <var>b_1(6) = 0</var>, <var>b_2(6) = 1</var>, <var>b_3(6) = 1</var>, <var>b_4(6) = 0</var>, <var>b_5(6) = 0</var>, and so on.\n</p>\n\n<p>\nLet <var>A</var> and <var>B</var> be integers that satisfy <var>1 \\leq A \\leq B \\leq 10^{18}</var>,\nand <var>k_i</var> be the number of integers <var>x</var> such that <var>A \\leq x \\leq B</var> and <var>b_i(x) = 1</var>.\n</p>\n\n<p>\nYour task is to write a program that determines <var>A</var> and <var>B</var> for a given <var>\\{k_i\\}</var>.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\nThe input consists of multiple datasets.\nThe number of datasets is no more than 100,000.\nEach dataset has the following format:\n</p>\n\n<pre>\n<var>n</var>\n<var>k_1</var>\n<var>k_2</var>\n...\n<var>k_n</var>\n</pre>\n\n<p>\nThe first line of each dataset contains an integer <var>n</var> (<var>1 \\leq n \\leq 64</var>).\nThen <var>n</var> lines follow, each of which contains <var>k_i</var> (<var>0 \\leq k_i \\leq 2^{63} - 1</var>).\nFor all <var>i &gt; n</var>, <var>k_i = 0</var>.\n</p>\n\n<p>\nThe input is terminated by <var>n = 0</var>.\nYour program must not produce output for it. \n</p>\n\n<h2>Output</h2>\n\n<p>\nFor each dataset, print one line.\n</p>\n\n<ul>\n<li> If <var>A</var> and <var>B</var> can be uniquely determined, output <var>A</var> and <var>B</var>. Separate the numbers by a single space.</li>\n<li> If there exists more than one possible pair of <var>A</var> and <var>B</var>, output <code>Many</code> (without quotes).</li>\n<li> Otherwise, i.e. if there exists no possible pair, output <code>None</code> (without quotes).</li>\n</ul>\n\n\n<h2>Sample Input</h2>\n\n<pre>\n3\n2\n2\n1\n49\n95351238128934\n95351238128934\n95351238128932\n95351238128936\n95351238128936\n95351238128936\n95351238128960\n95351238128900\n95351238128896\n95351238129096\n95351238128772\n95351238129096\n95351238129096\n95351238126156\n95351238131712\n95351238131712\n95351238149576\n95351238093388\n95351238084040\n95351237962316\n95351238295552\n95351237911684\n95351237911684\n95351235149824\n95351233717380\n95351249496652\n95351249496652\n95351226761216\n95351226761216\n95351082722436\n95351082722436\n95352054803020\n95352156464260\n95348273971200\n95348273971200\n95354202286668\n95356451431556\n95356451431556\n95346024826312\n95356451431556\n95356451431556\n94557999988736\n94256939803780\n94256939803780\n102741546035788\n87649443431880\n87649443431880\n140737488355328\n32684288648324\n64\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n11\n0\n0\n1\n1\n1\n0\n1\n1\n1\n1\n1\n63\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n4\n1\n1\n1\n1\n0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\n1 4\n123456789101112 314159265358979\nNone\n2012 2012\nNone\nMany\n</pre>", "p01653": "\n<h2>Problem Statement</h2>\n\n<p>\nA magician lives in a country which consists of <var>N</var> islands and <var>M</var> bridges. \nSome of the bridges are magical bridges, which are created by the magician.\nHer magic can change all the lengths of the magical bridges to the same non-negative integer simultaneously.\n</p>\n\n<p>\nThis country has a famous 2-player race game.\nPlayer 1 starts from island <var>S_1</var> and Player 2 starts from island <var>S_2</var>. \nA player who reached the island <var>T</var> first is a winner.\n</p>\n\n<p>\nSince the magician loves to watch this game, she decided to make the game most exiting by changing the length of the magical bridges\nso that the difference between the shortest-path distance from <var>S_1</var> to <var>T</var> and the shortest-path distance from <var>S_2</var> to <var>T</var> is as small as possible. We ignore the movement inside the islands.\n</p>\n\n<p>\nYour job is to calculate how small the gap can be.\n</p>\n\n<p>\nNote that she assigns a length of the magical bridges before the race starts <i>once</i>, \nand does not change the length <i>during the race</i>.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\nThe input consists of several datasets. The end of the input is denoted by five zeros separated by a single-space. Each dataset obeys <i>the</i> following format. Every number in the inputs is integer. \n</p>\n\n<pre>\n<var>N</var> <var>M</var> <var>S_1</var> <var>S_2</var> <var>T</var>\n<var>a_1</var> <var>b_1</var> <var>w_1</var>\n<var>a_2</var> <var>b_2</var> <var>w_2</var>\n...\n<var>a_M</var> <var>b_M</var> <var>w_M</var>\n</pre>\n\n<p>\n(<var>a_i, b_i</var>) indicates the bridge <var>i</var> connects the two islands <var>a_i</var> and <var>b_i</var>.\n</p>\n\n<p>\n<var>w_i</var> is either a non-negative integer or a letter <code>x</code>  (quotes for clarity). If <var>w_i</var> is an integer, it indicates the bridge <var>i</var> is normal and its length is <var>w_i</var>. Otherwise, it indicates the bridge <var>i</var> is magical.\n</p>\n\n<p>\nYou can assume the following:\n</p>\n\n<ul>\n<li> <var>1\\leq N \\leq 1,000</var></li>\n<li> <var>1\\leq M \\leq 2,000</var></li>\n<li> <var>1\\leq S_1, S_2, T \\leq N</var></li>\n<li> <var>S_1, S_2, T</var> are all different.</li>\n<li> <var>1\\leq a_i, b_i \\leq N</var></li>\n<li> <var>a_i \\neq b_i</var></li>\n<li> For all normal bridge <var>i</var>, <var>0 \\leq w_i \\leq 1,000,000,000</var></li>\n<li> The number of magical bridges <var>\\leq 100</var></li>\n</ul>\n\n<h2>Output</h2>\n\n<p>\nFor each dataset, print the answer in a line.\n</p>\n\n\n<h2>Sample Input</h2>\n\n<pre>\n3 2 2 3 1\n1 2 1\n1 3 2\n4 3 1 4 2\n2 1 3\n2 3 x\n4 3 x\n0 0 0 0 0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\n1\n1\n</pre>", "p01655": "\n<h2>Problem Statement</h2>\n\n<p>\nYou bought 3 ancient scrolls from a magician. These scrolls have a long string, and the lengths of the strings are the same. He said that these scrolls are copies of the key string to enter a dungeon with a secret treasure.\nHowever, he also said, they were copied so many times by hand, so the string will contain some errors, though the length seems correct. \n</p>\n\n<p>\nYour job is to recover the original string from these strings. When finding the original string, you decided to use the following assumption. \n</p>\n\n<ul>\n<li>  The copied string will contain at most <var>d</var> errors. In other words, the Hamming distance of the original string and the copied string is at most <var>d</var>. </li>\n<li>  If there exist many candidates, the lexicographically minimum string is the original string.</li>\n</ul>\n\n<p>\nCan you find the orignal string?\n</p>\n\n\n<h2>Input</h2>\n\n<p>\nThe input contains a series of datasets.\n</p>\n\n<p>\nEach dataset has the following format:\n</p>\n\n<pre>\n<var>l</var> <var>d</var>\n<var>str_1</var>\n<var>str_2</var>\n<var>str_3</var>\n</pre>\n\n<p>\nThe first line contains two integers <var>l</var> (<var>1 \\leq l \\leq 100,000</var>) and <var>d</var> (<var>0 \\leq d \\leq 5,000</var>.)\n<var>l</var> describes the length of 3 given strings and <var>d</var> describes acceptable maximal Hamming distance.\nThe following 3 lines have given strings, whose lengths are <var>l</var>.\nThese 3 strings consist of only lower and upper case alphabets.\n</p>\n\n<p>\nThe input ends with a line containing two zeros, which should not be processed. \n</p>\n\n<h2>Output</h2>\n\n<p>\nPrint the lexicographically minimum satisfying the condition in a line.\nIf there do not exist such strings, print <code>-1</code>.\n</p>\n\n\n<h2>Sample Input</h2>\n\n<pre>\n3 1\nACM\nIBM\nICM\n5 2\niwzwz\niziwi\nzwizi\n1 0\nA\nB\nC\n10 5\njLRNlNyGWx\nyyLnlyyGDA\nyLRnvyyGDA\n0 0\n</pre>\n\n<h2>Output for the Sample Input</h2>\n\n<pre>\nICM\niwiwi\n-1\nAARAlNyGDA\n</pre>", "p01667": "\n<h2>A - Everlasting Zero</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nYou are very absorbed in a famous role-playing game (RPG), \"Everlasting -Zero-\". An RPG is a game in which players assume the roles of characters in a fictional setting. While you play the game, you can forget your \"real life\" and become a different person.\n</p>\n\n<p>\nTo play the game more effectively, you have to understand two notions, a <em>skill point</em> and a <em>special command</em>. A character can boost up by accumulating his experience points. When a character boosts up, he can gain skill points.\n</p>\n\n<p>\nYou can arbitrarily allocate the skill points to the character's skills to enhance the character's abilities. If skill points of each skill meets some conditions simultaneously (e.g., the skill points of some skills are are greater than or equal to the threshold values and those of others are less than or equal to the values) , the character learns a special command. One important thing is that once a character learned the command, he will never forget it. And once skill points are allocated to the character, you cannot revoke the allocation. In addition, the initial values of each skill is <var>0</var>.\n</p>\n\n<p>\nThe system is so complicated that it is difficult for ordinary players to know whether a character can learn all the special commands or not. Luckily, in the \"real\" world, you are a great programmer, so you decided to write a program to tell whether a character can learn all the special commnads or not. If it turns out to be feasible, you will be more absorbed in the game and become happy.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input is formatted as follows.\n</p>\n\n<pre>\n<var>M</var> <var>N</var>\n<var>K_1</var>\n<var>s_{1,1}</var> <var>cond_{1,1}</var> <var>t_{1,1}</var>\n<var>s_{1,2}</var> <var>cond_{1,2}</var> <var>t_{1,2}</var>\n...\n<var>s_{1,K_1}</var> <var>cond_{1,K_1}</var> <var>t_{1,K_1}</var>\n<var>K_2</var>\n...\n<var>K_M</var>\n<var>s_{M,1}</var> <var>cond_{M,1}</var> <var>t_{M,1}</var>\n<var>s_{M,2}</var> <var>cond_{M,2}</var> <var>t_{M,2}</var>\n...\n<var>s_{M,K_M}</var> <var>cond_{M,K_M}</var> <var>t_{M,K_M}</var>\n</pre>\n\n<p>\nThe first line of the input contains two integers (<var>M</var>, <var>N</var>), where <var>M</var> is the number of special commands (<var>1 \\leq M \\leq 100</var>), <var>N</var> is the number of skills (<var>1 \\leq N \\leq 100</var>).\nAll special commands and skills are numbered from <var>1</var>.\n</p>\n\n<p>\nThen <var>M</var> set of conditions follows.\nThe first line of a condition set contains a single integer <var>K_i</var> (<var>0 \\leq K_i \\leq 100</var>), where <var>K_i</var> is the number of conditions to learn the <var>i</var>-th command.\nThe following <var>K_i</var> lines describe the conditions on the skill values.\n<var>s_{i,j}</var> is an integer to identify the skill required to learn the command.\n<var>cond_{i,j}</var> is given by string \"<=\" or \">=\".\nIf <var>cond_{i,j}</var> is \"<=\", the skill point of <var>s_{i,j}</var>-th skill must be less than or equal to the threshold value <var>t_{i,j}</var> (<var>0 \\leq t_{i,j} \\leq 100</var>).\nOtherwise, i.e. if <var>cond_{i,j}</var>\nis \">=\", the skill point of <var>s_{i,j}</var> must be greater than or equal to <var>t_{i,j}</var>.\n</p>\n\n<h3>Output</h3>\n\n<p>\nOutput \"Yes\" (without quotes) if a character can learn all the special commands in given conditions, otherwise \"No\" (without quotes).\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>\n2 2\n2\n1 >= 3\n2 <= 5\n2\n1 >= 4\n2 >= 3\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>\nYes\n</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>\n2 2\n2\n1 >= 5\n2 >= 5\n2\n1 <= 4\n2 <= 3\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>\nYes\n</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>\n2 2\n2\n1 >= 3\n2 <= 3\n2\n1 <= 2\n2 >= 5\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>\nNo\n</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>\n1 2\n2\n1 <= 10\n1 >= 15\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n<pre>\nNo\n</pre>\n\n<h3>Sample Input 5</h3>\n\n<pre>\n5 5\n3\n2 <= 1\n3 <= 1\n4 <= 1\n4\n2 >= 2\n3 <= 1\n4 <= 1\n5 <= 1\n3\n3 >= 2\n4 <= 1\n5 <= 1\n2\n4 >= 2\n5 <= 1\n1\n5 >= 2\n</pre>\n\n<h3>Output for the Sample Input 5</h3>\n\n<pre>\nYes\n</pre>\n", "p01668": "\n<h2>B - Integer in Integer</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nGiven an integer interval <var>\\[A, B\\]</var> and an integer <var>C</var>, your job is to calculate the number of occurrences of <var>C</var> as string in the interval.\n</p>\n\n<p>\nFor example, <var>33</var> appears in <var>333</var> twice, and appears in <var>334</var> once. Thus the number of occurrences of <var>33</var> in <var>\\[333, 334\\]</var> is <var>3</var>.\n</p>\n\n<h3>Input</h3>\n<p>\nThe test case is given by a line with the three integers, <var>A</var>, <var>B</var>, <var>C</var> (<var>0 \\leq A \\leq B \\leq 10^{10000}</var>, <var>0 \\leq C \\leq 10^{500}</var>).\n</p>\n\n<h3>Output</h3>\n<p>\nPrint the number of occurrences of <var>C</var> mod 1000000007.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n1 3 2\n</pre>\n\n<h3>Output for Sample Input 1</h3>\n<pre>\n1\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n333 334 33\n</pre>\n\n<h3>Output for Sample Input 2</h3>\n<pre>\n3\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n0 10 0\n</pre>\n\n<h3>Output for Sample Input 3</h3>\n<pre>\n2\n</pre>\n", "p01671": "\n<h2>E - Minimum Spanning Tree</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nYou are given an undirected weighted graph <var>G</var> with <var>n</var> nodes and <var>m</var> edges.\nEach edge is numbered from <var>1</var> to <var>m</var>.\n</p>\n\n<p>\nLet <var>G_i</var> be an graph that is made by erasing <var>i</var>-th edge from <var>G</var>. Your task is to compute the cost of minimum spanning tree in <var>G_i</var> for each <var>i</var>.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe dataset is formatted as follows.\n</p>\n\n<pre>\n<var>n</var> <var>m</var>\n<var>a_1</var> <var>b_1</var> <var>w_1</var>\n...\n<var>a_m</var> <var>b_m</var> <var>w_m</var>\n</pre>\n\n<p>\nThe first line of the input contains two integers <var>n</var> (<var>2 \\leq n \\leq 100{,}000</var>) and <var>m</var> (<var>1 \\leq m \\leq 200{,}000</var>).\n<var>n</var> is the number of nodes and <var>m</var> is the number of edges in the graph.\nThen <var>m</var> lines follow, each of which contains <var>a_i</var> (<var>1 \\leq a_i \\leq n</var>), <var>b_i</var> (<var>1 \\leq b_i \\leq n</var>) and <var>w_i</var> (<var>0 \\leq w_i \\leq 1{,}000{,}000</var>).\nThis means that there is an edge between node <var>a_i</var> and node <var>b_i</var> and its cost is <var>w_i</var>.\nIt is guaranteed that the given graph is simple: That is, for any pair of nodes, there is at most one edge that connects them, and <var>a_i \\neq b_i</var> for all <var>i</var>.\n</p>\n\n<h3>Output</h3>\n\n<p>\nPrint the cost of minimum spanning tree in <var>G_i</var> for each <var>i</var>, in <var>m</var> line. If there is no spanning trees in <var>G_i</var>, print \"-1\" (quotes for clarity) instead.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>\n4 6\n1 2 2\n1 3 6\n1 4 3\n2 3 1\n2 4 4\n3 4 5\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>\n8\n6\n7\n10\n6\n6\n</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>\n4 4\n1 2 1\n1 3 10\n2 3 100\n3 4 1000\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>\n1110\n1101\n1011\n-1\n</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>\n7 10\n1 2 1\n1 3 2\n2 3 3\n2 4 4\n2 5 5\n3 6 6\n3 7 7\n4 5 8\n5 6 9\n6 7 10\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>\n27\n26\n25\n29\n28\n28\n28\n25\n25\n25\n</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>\n3 1\n1 3 999\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n<pre>\n-1\n</pre>", "p01670": "\n<h2>D - Medical Inspection</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nThe government has declared a state of emergency due to the MOFU syndrome epidemic in your country. Persons in the country suffer from MOFU syndrome and cannot get out of bed in the morning. You are a programmer working for the Department of Health.  You have to take prompt measures.\n</p>\n\n<p>\nThe country consists of <var>n</var> islands numbered from 1 to <var>n</var> and there are ocean liners between some pair of islands.\nThe Department of Health decided to establish the quarantine stations in some islands and restrict an infected person's moves to prevent the expansion of the epidemic.\nTo carry out this plan, there must not be any liner  such that there is no quarantine station in both the source and the destination of the liner.\nThe problem is  the department can build at most <var>K</var> quarantine stations due to the lack of budget.\n</p>\n\n<p>\nYour task is to calculate whether this objective is possible or not.\nAnd if it is possible, you must calculate the minimum required number of quarantine stations.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe test case starts with a line containing three integers <var>N (2 \\leq N \\leq 3{,}000)</var>, <var>M (1 \\leq M \\leq 30{,}000)</var> and <var>K (1 \\leq K \\leq 32)</var>.\nEach  line in the next <var>M</var> lines contains two integers <var>a_i (1 \\leq a_i \\leq N)</var> and <var>b_i (1 \\leq b_i \\leq N)</var>. This represents <var>i</var>-th ocean liner connects island <var>a_i</var> and <var>b_i</var>.\nYou may assume <var>a_i \\neq b_i</var> for all <var>i</var>, and there are at most one ocean liner between all the pairs of islands.\n</p>\n\n<h3>Output</h3>\n\n<p>\nIf there is no way to build quarantine stations that satisfies the objective, print \"Impossible\" (without quotes). Otherwise, print the minimum required number of quarantine stations.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>\n3 3 2\n1 2\n2 3\n3 1\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>\n2\n</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>\n3 3 1\n1 2\n2 3\n3 1\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>\nImpossible\n</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>\n7 6 5\n1 3\n2 4\n3 5\n4 6\n5 7\n6 2\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>\n4\n</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>\n10 10 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n<pre>\n4\n</pre>\n", "p01674": "\n<h2>H - Rings</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nThere are two circles with radius 1 in 3D space. Please check two circles are connected as chained rings.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input is formatted as follows.\n</p>\n\n<pre>\n<var>{c_x}_1</var> <var>{c_y}_1</var> <var>{c_z}_1</var>\n<var>{v_x}_{1,1}</var> <var>{v_y}_{1,1}</var> <var>{v_z}_{1,1}</var> <var>{v_x}_{1,2}</var> <var>{v_y}_{1,2}</var> <var>{v_z}_{1,2}</var>\n<var>{c_x}_2</var> <var>{c_y}_2</var> <var>{c_z}_2</var>\n<var>{v_x}_{2,1}</var> <var>{v_y}_{2,1}</var> <var>{v_z}_{2,1}</var> <var>{v_x}_{2,2}</var> <var>{v_y}_{2,2}</var> <var>{v_z}_{2,2}</var>\n</pre>\n\n<p>\nFirst line contains three real numbers(<var>-3 \\leq {c_x}_i, {c_y}_i, {c_z}_i \\leq 3</var>).\nIt shows a circle's center position.\nSecond line contains six real numbers(<var>-1 \\leq {v_x}_{i,j}, {v_y}_{i,j}, {v_z}_{i,j} \\leq 1</var>).\nA unit vector (<var>{v_x}_{1,1}, {v_y}_{1,1}, {v_z}_{1,1}</var>) is directed to the circumference of the circle from center of the circle.\nThe other unit vector (<var>{v_x}_{1,2}, {v_y}_{1,2}, {v_z}_{1,2}</var>) is also directed to the circumference of the circle from center of the circle.\nThese two vectors are orthogonalized.\nThird and fourth lines show the other circle information in the same way of first and second lines.\nThere are no cases that two circles touch.\n</p>\n\n<h3>Output</h3>\n\n<p>\nIf two circles are connected as chained rings, you should print \"YES\". The other case, you should print \"NO\". (quotes for clarity)\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>\n0.0 0.0 0.0\n1.0 0.0 0.0 0.0 1.0 0.0\n1.0 0.0 0.5\n1.0 0.0 0.0 0.0 0.0 1.0\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>\nYES\n</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>\n0.0 0.0 0.0\n1.0 0.0 0.0 0.0 1.0 0.0\n0.0 3.0 0.0\n0.0 1.0 0.0 -1.0 0.0 0.0\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>\nNO\n</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>\n1.2 2.3 -0.5\n1.0 0.0 0.0 0.0 1.0 0.0\n1.1 2.3 -0.4\n1.0 0.0 0.0 0.0 0.70710678 0.70710678\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>\nYES\n</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>\n1.2 2.3 -0.5\n1.0 0.0 0.0 0.0 1.0 0.0\n1.1 2.7 -0.1\n1.0 0.0 0.0 0.0 0.70710678 0.70710678\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n<pre>\nNO\n</pre>", "p01673": "\n<h2>G - Revenge of Minimum Cost Flow</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nFlora is a freelance carrier pigeon.\nSince she is an excellent pigeon, there are too much task requests to her.\nIt is impossible to do all tasks, so she decided to outsource some tasks to Industrial Carrier Pigeon Company.\n</p>\n\n<p>\nThere are <var>N</var> cities numbered from 0 to <var>N-1</var>.\nThe task she wants to outsource is carrying <var>f</var> freight units from city <var>s</var> to city <var>t</var>.\nThere are <var>M</var> pigeons in the company.\nThe <var>i</var>-th pigeon carries freight from city <var>s_i</var> to <var>t_i</var>, and carrying cost of <var>u</var> units is <var>u a_i</var> if <var>u</var> is smaller than or equals to <var>d_i</var>, otherwise <var>d_i a_i + (u-d_i)b_i</var>.\nNote that <var>i</var>-th pigeon cannot carry from city <var>t_i</var> to <var>s_i</var>.\nEach pigeon can carry any amount of freights.\nIf the pigeon carried freight multiple times, the cost is calculated from total amount of freight units he/she carried.\n</p>\n\n<p>\nFlora wants to minimize the total costs.\nPlease calculate minimum cost for her.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe test case starts with a line containing five integers <var>N</var> (<var>2 \\leq N \\leq 100</var>), <var>M</var> (<var>1 \\leq M \\leq 1{,}000</var>), <var>s</var> (<var>0 \\leq s \\leq N-1</var>), <var>t</var> (<var>0 \\leq t \\leq N-1</var>) and <var>f</var> (<var>1 \\leq f \\leq 200</var>).\nYou may assume <var>s \\neq t</var>.\nEach of the next <var>M</var> lines contains five integers <var>s_i</var> (<var>0 \\leq s_i \\leq N-1</var>), <var>t_i</var> (<var>0 \\leq t_i \\leq N-1</var>), <var>a_i</var> (<var>0 \\leq a_i \\leq 1{,}000</var>), <var>b_i</var> (<var>0 \\leq b_i \\leq 1{,}000</var>) and <var>d_i</var> (<var>1 \\leq d_i \\leq 200</var>).\nEach denotes <var>i</var>-th pigeon's information.\nYou may assume at most one pair of <var>a_i</var> and <var>b_i</var> satisfies <var>a_i < b_i</var>, all others satisfies <var>a_i > b_i</var>.\n</p>\n\n<h3>Output</h3>\n\n<p>\nPrint the minimum cost to carry <var>f</var> freight units from city <var>s</var> to city <var>t</var> in a line.\nIf it is impossible to carry, print \"Impossible\" (quotes for clarity).\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>\n2 2 0 1 5\n0 1 3 0 3\n0 1 2 1 6\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>\n9\n</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>\n4 4 0 3 5\n0 1 3 0 3\n1 3 3 0 3\n0 2 2 1 6\n2 3 2 1 6\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>\n18\n</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>\n2 1 0 1 1\n1 0 1 0 1\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>\nImpossible\n</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>\n2 2 0 1 2\n0 1 5 1 2\n0 1 6 3 1\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n<pre>\n9\n</pre>\n\n<h3>Sample Input 5</h3>\n\n<pre>\n3 3 0 2 4\n0 2 3 4 2\n0 1 4 1 3\n1 2 3 1 1\n</pre>\n\n<h3>Output for the Sample Input 5</h3>\n\n<pre>\n14\n</pre>", "p01675": "\n<h2>I - The J-th Number</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nYou are given <var>N</var> empty arrays, <var>t_1, ..., t_n</var>. At first, you execute <var>M</var> queries as follows.\n</p>\n\n<ul>\n<li>add a value <var>v</var> to array <var>t_i</var> (<var>a \\leq i \\leq b</var>)</li>\n</ul>\n\n<p>\nNext, you process <var>Q</var> following output queries.\n</p>\n\n<ul>\n<li>output the <var>j</var>-th number of the sequence sorted all values in <var>t_i</var> (<var>x \\leq i \\leq y</var>)</li>\n</ul>\n\n\n<h3>Input</h3>\n\n<p>\nThe dataset is formatted as follows.\n</p>\n\n<pre>\n<var>N</var> <var>M</var> <var>Q</var>\n<var>a_1</var> <var>b_1</var> <var>v_1</var>\n...\n<var>a_M</var> <var>b_M</var> <var>v_M</var>\n<var>x_1</var> <var>y_1</var> <var>j_1</var>\n...\n<var>x_Q</var> <var>y_Q</var> <var>j_Q</var>\n</pre>\n\n<p>\nThe first line contains three integers <var>N</var> (<var>1 \\leq N \\leq 10^9</var>), <var>M</var> (<var>1 \\leq M \\leq 10^5</var>) and <var>Q</var> (<var>1 \\leq Q \\leq 10^5</var>). Each of the following <var>M</var> lines consists of three integers <var>a_i</var>, <var>b_i</var> and <var>v_i</var> (<var>1 \\leq a_i \\leq b_i \\leq N</var>, <var>1 \\leq v_i \\leq 10^9</var>). Finally the following <var>Q</var> lines give the list of output queries, each of these lines consists of three integers <var>x_i</var>, <var>y_i</var> and <var>j_i</var> (<var>1 \\leq x_i \\leq y_i \\leq N, 1 \\leq j_i \\leq &Sigma;_{x_i \\leq k \\leq y_i} |t_k|</var>).\n</p>\n\n<h3>Output</h3>\n\n<p>\nFor each output query, print in a line the <var>j</var>-th number.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>\n5 4 1\n1 5 1\n1 1 3\n4 5 1\n3 4 2\n1 3 4\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>\n2\n</pre>\n\n<p>\nAfter the <var>M</var>-th query is executed, each <var>t_i</var> is as follows:\n</p>\n\n<pre>\n[1,3], [1], [1,2], [1,1,2], [1,1]\n</pre>\n\n<p>\nThe sequence sorted values in <var>t_1</var>, <var>t_2</var> and <var>t_3</var> is [1,1,1,2,3]. In the sequence, the 4-th number is 2.\n</p>\n\n<h3>Sample Input 2</h3>\n\n<pre>\n10 4 4\n1 4 11\n2 3 22\n6 9 33\n8 9 44\n1 1 1\n4 5 1\n4 6 2\n1 10 12\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>\n11\n11\n33\n44\n</pre>", "p01677": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<h3>Problem Statement</h3>\n\n<p>Nathan O. Davis is a student at the department of integrated systems.\n</p>\n<p>Today's agenda in the class is audio signal processing.\nNathan was given a lot of homework out.\nOne of the homework was to write a program to process an audio signal.\nHe copied the given audio signal to his USB memory and brought it back to his home.\n</p>\n<p>When he started his homework, he unfortunately dropped the USB memory to the floor.\nHe checked the contents of the USB memory and found that the audio signal data got broken.\n</p>\n<p>There are several characteristics in the audio signal that he copied.\n</p><ul><li><p> The audio signal is a sequence of $N$ samples.\n</p></li><li><p> Each sample in the audio signal is numbered from $1$ to $N$ and represented as an integer value.\n</p></li><li><p> Each value of the odd-numbered sample(s) is strictly smaller than the value(s) of its neighboring sample(s).\n</p></li><li><p> Each value of the even-numbered sample(s) is strictly larger than the value(s) of its neighboring sample(s).\n</p></li></ul>\n\n<p>He got into a panic and asked you for a help.\nYou tried to recover the audio signal from his USB memory but some samples of the audio signal are broken and could not be recovered.\nFortunately, you found from the metadata that all the broken samples have the same integer value.\n</p>\n<p>Your task is to write a program,\nwhich takes the broken audio signal extracted from his USB memory as its input, \nto detect whether the audio signal can be recovered uniquely.\n</p>\n\n<h3>Input</h3>\n\n<p>The input consists of multiple datasets.\nThe form of each dataset is described below.\n</p>\n<blockquote>$N$<br>$a_{1}$ $a_{2}$ ... $a_{N}$</blockquote>\n\n<p>The first line of each dataset consists of an integer, $N (2 \\le N \\le 1{,}000)$.\n$N$ denotes the number of samples in the given audio signal.\nThe second line of each dataset consists of $N$ values separated by spaces.\nThe $i$-th value, $a_{i}$, is either a character <code>x</code>  or an integer between $-10^9$ and $10^9$, inclusive.\nIt represents the $i$-th sample of the broken audio signal.\nIf $a_{i}$ is a character <code>x</code> , it denotes that $i$-th sample in the audio signal is broken.\nOtherwise it denotes the value of the $i$-th sample.\n</p>\n<p>The end of input is indicated by a single $0$.\nThis is not included in the datasets.\n</p>\n<p>You may assume that the number of the datasets does not exceed $100$.\n</p>\n\n<h3>Output</h3>\n<p>For each dataset, output the value of the broken samples in one line if the original audio signal can be recovered uniquely.\nIf there are multiple possible values, output <code>ambiguous</code>.\nIf there are no possible values, output <code>none</code>.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>5\n1 x 2 4 x\n2\nx x\n2\n1 2\n2\n2 1\n2\n1000000000 x\n4\nx 2 1 x\n0</pre>\n\n<h3>Output for the Sample Input</h3>\n\n<pre>3\nnone\nambiguous\nnone\nambiguous\nnone</pre>", "p01678": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<h3>Problem Statement</h3>\n\n<p>The Animal School is a primary school for animal children.\nYou are a fox attending this school.\n</p>\n<p>One day, you are given a problem called &quot;Arithmetical Restorations&quot; from the rabbit teacher, Hanako.\nArithmetical Restorations are the problems like the following:\n</p>\n<ul><li><p> You are given three positive integers, $A$, $B$ and $C$.\n</p></li><li><p> Several digits in these numbers have been erased.\n</p></li><li><p> You should assign a digit in each blank position so that the numbers satisfy the formula $A+B=C$.\n</p></li><li><p> The first digit of each number must not be zero. It is also the same for single-digit numbers.\n</p></li></ul>\n\n<p>You are clever in mathematics, so you immediately solved this problem.\nFurthermore, you decided to think of a more difficult problem, to calculate the number of possible assignments to the given Arithmetical Restorations problem.\nIf you can solve this difficult problem, you will get a good grade.\n</p>\n<p>Shortly after beginning the new task, you noticed that there may be too many possible assignments to enumerate by hand. So, being the best programmer in the school as well, you are now trying to write a program to count the number of possible assignments to Arithmetical Restoration problems.\n</p>\n\n<h3>Input</h3>\n<p>The input is a sequence of datasets.\nThe number of datasets is less than 100.\nEach dataset is formatted as follows.\n</p>\n<blockquote>\n$A$<br>$B$<br>$C$</blockquote>\n\n<p>Each dataset consists of three strings, $A$, $B$ and $C$.\nThey indicate that the sum of $A$ and $B$ should be $C$.\nEach string consists of digits (<code>0</code>-<code>9</code>) and/or question mark (<code>?</code>).\nA question mark (<code>?</code>) indicates an erased digit.\nYou may assume that the first character of each string is not <code>0</code> and each dataset has at least one <code>?</code>.\n</p>\n<p>It is guaranteed that each string contains between 1 and 50 characters, inclusive.\nYou can also assume that the lengths of three strings are equal.\n</p>\n<p>The end of input is indicated by a line with a single zero.\n</p>\n\n<h3>Output</h3>\n<p>For each dataset, output the number of possible assignments to the given problem modulo 1,000,000,007.\nNote that there may be no way to solve the given problems because Ms. Hanako is a careless rabbit.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>3?4\n12?\n5?6\n?2?4\n5?7?\n?9?2\n?????\n?????\n?????\n0</pre>\n<h3>Output for the Sample Input</h3>\n\n<pre>2\n40\n200039979</pre>\n<h3>Note</h3>\n\n<p>The answer of the first dataset is 2.  They are shown below.\n</p><ul><li><p> 384 + 122 = 506\n</p></li><li><p> 394 + 122 = 516\n</p></li></ul>\n\n", "p01680": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<h3>Problem Statement</h3>\n\n<p>&quot;Everlasting -One-&quot; is an award-winning online game launched this year. This game has rapidly become famous for its large number of characters you can play.\n</p>\n<p>In this game, a character is characterized by <i>attributes</i>. There are $N$ attributes in this game, numbered $1$ through $N$. Each attribute takes one of the two states, <i>light</i> or <i>darkness</i>. It means there are $2^N$ kinds of characters in this game.\n</p>\n<p>You can change your character by job change. Although this is the only way to change your character's attributes, it is allowed to change jobs as many times as you want.\n</p>\n<p>The rule of job change is a bit complex. It is possible to change a character from $A$ to $B$ if and only if there exist two attributes $a$ and $b$ such that they satisfy the following four conditions:\n</p>\n<ul><li><p> The state of attribute $a$ of character $A$ is <i>light</i>.\n</p></li><li><p> The state of attribute $b$ of character $B$ is <i>light</i>.\n</p></li><li><p> There exists no attribute $c$ such that both characters $A$ and $B$ have the <i>light</i> state of attribute $c$.\n</p></li><li><p> A pair of attribute $(a, b)$ is <i>compatible</i>.\n</p></li></ul>\n\n<p>Here, we say a pair of attribute $(a, b)$ is <i>compatible</i> if there exists a sequence of attributes $c_1, c_2, \\ldots, c_n$ satisfying the following three conditions:\n</p>\n<ul><li><p> $c_1 = a$.\n</p></li><li><p> $c_n = b$.\n</p></li><li><p> Either $(c_i, c_{i+1})$ or $(c_{i+1}, c_i)$ is a special pair for all $i = 1, 2, \\ldots, n-1$. You will be given the list of special pairs.\n</p></li></ul>\n\n<p>Since you love this game with enthusiasm, you are trying to play the game with all characters (it's really crazy). However, you have immediately noticed that one character can be changed to a limited set of characters with this game's job change rule. We say character $A$ and $B$ are <i>essentially different</i> if you cannot change character $A$ into character $B$ by repeating job changes.\n</p>\n<p>Then, the following natural question arises; how many essentially different characters are there?\nSince the output may be very large, you should calculate the answer modulo $1{,}000{,}000{,}007$.\n</p>\n\n<h3>Input</h3>\n<p>The input is a sequence of datasets.\nThe number of datasets is not more than $50$ and the total size of input is less than $5$ MB. \n</p>\n<p>Each dataset is formatted as follows.\n</p><blockquote>$N$ $M$<br>$a_1$ $b_1$<br>:<br>:<br>$a_M$ $b_M$</blockquote>\n<p>The first line of each dataset contains two integers $N$ and $M$ ($1 \\le N \\le 10^5$ and $0 \\le M \\le 10^5$).\nThen $M$ lines follow.\nThe $i$-th line contains two integers $a_i$ and $b_i$ ($1 \\le a_i \\lt b_i \\le N$) which denote the $i$-th special pair.\nThe input is terminated by two zeroes.\n</p>\n<p>It is guaranteed that $(a_i, b_i) \\ne (a_j, b_j)$ if $i \\ne j$.\n</p>\n\n<h3>Output</h3>\n<p>For each dataset, output the number of essentially different characters modulo $1{,}000{,}000{,}007$.\n</p>\n\n<h3>Sample Input</h3>\n\n\n<pre>3 2\n1 2\n2 3\n5 0\n100000 0\n0 0</pre>\n\n<h3>Output for the Sample Input</h3>\n\n\n<pre>3\n32\n607723520</pre>", "p01682": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<h3>Problem Statement</h3>\n\n<p>Dr. Suposupo developed a programming language called Shipura. Shipura supports only one binary operator ${\\tt >>}$ and only one unary function ${\\tt S<\\ >}$.\n</p>\n<p>$x {\\tt >>} y$ is evaluated to $\\lfloor x / 2^y \\rfloor$ (that is, the greatest integer not exceeding $x / 2^y$), and ${\\tt S<} x {\\tt >}$ is evaluated to $x^2 \\bmod 1{,}000{,}000{,}007$ (that is, the remainder when $x^2$ is divided by $1{,}000{,}000{,}007$). \n</p>\n<p>The operator ${\\tt >>}$ is left-associative. For example, the expression $x {\\tt >>} y {\\tt >>} z$ is interpreted as $(x {\\tt >>} y) {\\tt >>} z$, not as $x {\\tt >>} (y {\\tt >>} z)$. Note that these parentheses do not appear in actual Shipura expressions. \n</p>\n<p>The syntax of Shipura is given (in BNF; Backus-Naur Form) as follows:\n</p><pre>expr   ::= term | expr sp &quot;&gt;&gt;&quot; sp term\nterm   ::= number | &quot;S&quot; sp &quot;&lt;&quot; sp expr sp &quot;&gt;&quot;\nsp     ::= &quot;&quot; | sp &quot; &quot;\nnumber ::= digit | number digit\ndigit  ::= &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot; | &quot;9&quot;</pre>\n<p>The start symbol of this syntax is $\\tt expr$ that represents an expression in Shipura. In addition, $\\tt number$ is an integer between $0$ and $1{,}000{,}000{,}000$ inclusive, written without extra leading zeros.\n</p>\n<p>Write a program to evaluate Shipura expressions.\n</p>\n\n<h3>Input</h3>\n<p>The input is a sequence of datasets. Each dataset is represented by a line which contains a valid expression in Shipura.\n</p>\n<p>A line containing a single ${\\tt \\#}$ indicates the end of the input. You can assume the number of datasets is at most $100$ and the total size of the input file does not exceed $2{,}000{,}000$ bytes. \n</p>\n\n<h3>Output</h3>\n<p>For each dataset, output a line containing the evaluated value of the expression. \n</p>\n\n<h3>Sample Input</h3>\n\n<pre>S&lt; S&lt; 12 &gt;&gt; 2 &gt; &gt;\n123 &gt;&gt; 1 &gt;&gt; 1\n1000000000   &gt;&gt;129\nS&lt;S&lt;S&lt;S&lt;S&lt;2&gt;&gt;&gt;&gt;&gt;\nS  &lt;S&lt; S&lt;2013    &gt;&gt;&gt; 11 &gt;&gt;&gt; 10 &gt;\n#</pre>\n<h3>Output for the Sample Input</h3>\n\n<pre>81\n30\n0\n294967268\n14592400</pre>", "p01679": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<h3>Problem Statement</h3>\n\n<p>You are now participating in the Summer Training Camp for Programming Contests with your friend Jiro, who is an enthusiast of the ramen chain SIRO.\nSince every SIRO restaurant has its own tasteful ramen, he wants to try them at as many different restaurants as possible in the night.\nHe doesn't have plenty of time tonight, however, because he has to get up early in the morning tomorrow to join a training session.\nSo he asked you to find the maximum number of different restaurants to which he would be able to go to eat ramen in the limited time.\n</p>\n<p>There are $n$ railway stations in the city, which are numbered $1$ through $n$. The station $s$ is the nearest to the camp venue.\n$m$ pairs of stations are directly connected by the railway: you can move between the stations $a_i$ and $b_i$ in $c_i$ minutes in the both directions.\nAmong the stations, there are $l$ stations where a SIRO restaurant is located nearby. There is at most one SIRO restaurant around each of the stations, and there are no restaurants near the station $s$.\nIt takes $e_i$ minutes for Jiro to eat ramen at the restaurant near the station $j_i$.\n</p>\n<p>It takes only a negligibly short time to go back and forth between a station and its nearby SIRO restaurant.\nYou can also assume that Jiro doesn't have to wait for the ramen to be served in the restaurants.\n</p>\n<p>Jiro is now at the station $s$ and have to come back to the station in $t$ minutes. How many different SIRO's can he taste?\n</p>\n\n<h3>Input</h3>\n<p>The input is a sequence of datasets. The number of the datasets does not exceed $100$. Each dataset is formatted as follows:\n</p>\n<blockquote>$n$ $m$ $l$ $s$ $t$<br>$a_1$ $b_1$ $c_1$<br>:<br>:<br>$a_m$ $b_m$ $c_m$<br>$j_1$ $e_1$<br>:<br>:<br>$j_l$ $e_l$</blockquote>\n\n<p>The first line of each dataset contains five integers:\n</p><ul><li><p> $n$ for the number of stations,\n</p></li><li><p> $m$ for the number of directly connected pairs of stations,\n</p></li><li><p> $l$ for the number of SIRO restaurants,\n</p></li><li><p> $s$ for the starting-point station, and\n</p></li><li><p> $t$ for the time limit for Jiro.\n</p></li></ul>\n\n<p>Each of the following $m$ lines contains three integers:\n</p><ul><li><p> $a_i$ and $b_i$ for the connected stations, and\n</p></li><li><p> $c_i$ for the time it takes to move between the two stations.\n</p></li></ul>\n\n<p>Each of the following $l$ lines contains two integers:\n</p><ul><li><p> $j_i$ for the station where a SIRO restaurant is located, and\n</p></li><li><p> $e_i$ for the time it takes for Jiro to eat at the restaurant.\n</p></li></ul>\n\n<p>The end of the input is indicated by a line with five zeros, which is not included in the datasets.\n</p>\n<p>The datasets satisfy the following constraints:\n</p>\n<ul><li><p> $2 \\le n \\le 300$\n</p></li><li><p> $1 \\le m \\le 5{,}000$\n</p></li><li><p> $1 \\le l \\le 16$\n</p></li><li><p> $1 \\le s \\le n$\n</p></li><li><p> $1 \\le t \\le 100{,}000$\n</p></li><li><p> $1 \\le a_i, b_i \\le n$\n</p></li><li><p> $1 \\le c_i \\le 1{,}000$\n</p></li><li><p> $1 \\le j_i \\le n$\n</p></li><li><p> $1 \\le e_i \\le 15$\n</p></li><li><p> $s \\ne j_i$\n</p></li><li><p> $j_i$'s are distinct.\n</p></li><li><p> $a_i \\ne b_i$\n</p></li><li><p> $(a_i, b_i) \\ne (a_j, b_j)$ and $(a_i, b_i) \\ne (b_j, a_j)$ for any $i \\ne j$\n</p></li></ul>\n\n<p>Note that there may be some stations not reachable from the starting point $s$.\n</p>\n\n<h3>Output</h3>\n<p>For each data set, output the maximum number of different restaurants where Jiro can go within the time limit.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>2 1 1 1 10\n1 2 3\n2 4\n2 1 1 1 9\n1 2 3\n2 4\n4 2 2 4 50\n1 2 5\n3 4 5\n2 15\n3 15\n4 6 3 1 29\n1 2 20\n3 2 10\n4 1 5\n3 1 5\n2 4 3\n3 4 4\n2 1\n4 5\n3 3\n0 0 0 0 0</pre>\n<h3>Output for the Sample Input</h3>\n\n<pre>1\n0\n1\n3</pre>", "p01683": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n\n<h3>Problem Statement</h3>\n\n<p>You have just arrived in a small country. Unfortunately a huge hurricane swept across the country a few days ago.\n</p>\n<p>The country is made up of $n$ islands, numbered $1$ through $n$. Many bridges connected the islands, but all the bridges were washed away by a flood. People in the islands need new bridges to travel among the islands again.\n</p>\n<p>The problem is cost. The country is not very wealthy. The government has to keep spending down. They asked you, a great programmer, to calculate the minimum cost to rebuild bridges. Write a program to calculate it!\n</p>\n<p>Each bridge connects two islands bidirectionally. Each island $i$ has two parameters $d_i$ and $p_i$. An island $i$ can have at most $d_i$ bridges connected. The cost to build a bridge between an island $i$ and another island $j$ is calculated by $|p_i - p_j|$. Note that it may be impossible to rebuild new bridges within given limitations although people need to travel between any pair of islands over (a sequence of) bridges. \n</p>\n<h3>Input</h3>\n\n<p>The input is a sequence of datasets.\nThe number of datasets is less than or equal to $60$.\nEach dataset is formatted as follows.\n</p>\n<blockquote>$n$<br>$p_1$ $d_1$<br>$p_2$ $d_2$<br>:<br>:<br>$p_n$ $d_n$</blockquote>\n\n<p>Everything in the input is an integer.\n$n$ ($2 \\leq n \\leq 4{,}000$) on the first line indicates the number of islands.\nThen $n$ lines follow, which contain the parameters of the islands.\n$p_i$ ($1 \\leq p_i \\leq 10^9$) and $d_i$ ($1 \\leq d_i \\leq n$) denote the parameters of the island $i$.\n</p>\n<p>The end of the input is indicated by a line with a single zero.\n</p>\n\n<h3>Output</h3>\n<p>For each dataset, output the minimum cost in a line if it is possible to rebuild bridges within given limitations in the dataset. Otherwise, output $-1$ in a line.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>4\n1 1\n8 2\n9 1\n14 2\n4\n181 4\n815 4\n634 4\n370 4\n4\n52 1\n40 1\n81 2\n73 1\n10\n330 1\n665 3\n260 1\n287 2\n196 3\n243 1\n815 1\n287 3\n330 1\n473 4\n0</pre>\n<h3>Output for the Sample Input</h3>\n\n<pre>18\n634\n-1\n916</pre>", "p01681": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n\n<h3>Problem Statement</h3>\n\n<p>Fox Ciel is practicing miniature golf, a golf game played with a putter club only. For improving golf skills, she believes it is important how well she bounces the ball against walls.\n</p>\n<p>The field of miniature golf is in a two-dimensional plane and surrounded by $N$ walls forming a convex polygon. At first, the ball is placed at $(s_x, s_y)$ inside the field. The ball is small enough to be regarded as a point.\n</p>\n<p>Ciel can shoot the ball to any direction and stop the ball whenever she wants. The ball will move in a straight line. When the ball hits the wall, it rebounds like mirror reflection (i.e. incidence angle equals reflection angle).\n</p>\n<p>For practice, Ciel decided to make a single shot under the following conditions:\n</p><ul><li><p> The ball hits each wall of the field exactly once.\n</p></li><li><p> The ball does NOT hit the corner of the field.\n</p></li></ul>\n\n<p>Count the number of possible orders in which the ball hits the walls.\n</p>\n\n<h3>Input</h3>\n\n<p>The input contains several datasets. The number of datasets does not exceed $100$. Each dataset is in the following format.\n</p>\n<blockquote>$N$<br>$s_x$ $s_y$<br>$x_1$ $y_1$<br>:<br>:<br>$x_N$ $y_N$</blockquote>\n\n<p>The first line contains an integer $N$ ($3 \\leq N \\leq 8$). The next line contains two integers $s_x$ and $s_y$ ($-50 \\leq s_x, s_y \\leq 50$), which describe the coordinates of the initial position of the ball. Each of the following $N$ lines contains two integers $x_i$ and $y_i$ ($-50 \\leq x_i, y_i \\leq 50$), which describe the coordinates of each corner of the field. The corners are given in counterclockwise order. You may assume given initial position $(s_x, s_y)$ is inside the field and the field is convex.\n</p>\n<p>It is guaranteed that there exists a shoot direction for each valid order of the walls that satisfies the following condition: distance between the ball and the corners of the field $(x_i, y_i)$ is always greater than $10^{-6}$ until the ball hits the last wall.\n</p>\n<p>The last dataset is followed by a line containing a single zero.\n</p>\n\n<h3>Output</h3>\n<p>For each dataset in the input, print the number of valid orders of the walls in a line.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>4\n0 0\n-10 -10\n10 -10\n10 10\n-10 10\n0</pre>\n<h3>Output for the Sample Input</h3>\n\n<pre>8</pre>", "p01686": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n\n<h3>Problem Statement</h3>\n\n<p>You are given a rectangular board divided into square cells. The number of rows and columns in this board are $3$ and $3 M + 1$, respectively, where $M$ is a positive integer. The rows are numbered $1$ through $3$ from top to bottom, and the columns are numbered $1$ through $3 M + 1$ from left to right. The cell at the $i$-th row and the $j$-th column is denoted by $(i, j)$. \n</p>\n<p>Each cell is either a floor cell or a wall cell. In addition, cells in columns $2, 3, 5, 6, \\ldots, 3 M - 1, 3 M$ (numbers of form $3 k - 1$ or $3 k$, for $k = 1, 2, \\ldots, M$) are painted in some color. There are $26$ colors which can be used for painting, and they are numbered $1$ through $26$. The other cells (in columns $1, 4, 7, \\ldots, 3 M + 1$) are not painted and each of them is a floor cell. \n</p>\n<p>You are going to play the following game. First, you put a token at cell $(2, 1)$. Then, you repeatedly move it to an adjacent floor cell. Two cells are considered adjacent if they share an edge. It is forbidden to move the token to a wall cell or out of the board. The objective of this game is to move the token to cell $(2, 3 M + 1)$. \n</p>\n<p>For this game, $26$ magical switches are available for you! Switches are numbered $1$ through $26$ and each switch corresponds to the color with the same number. When you push switch $x$, each floor cell painted in color $x$ becomes a wall cell and each wall cell painted in color $x$ becomes a floor cell, simultaneously. \n</p>\n<p>You are allowed to push some of the magical switches ONLY BEFORE you start moving the token. Determine whether there exists a set of switches to push such that you can achieve the objective of the game, and if there does, find such a set. \n</p>\n\n<h3>Input</h3>\n<p>The input is a sequence of at most $130$ datasets. Each dataset begins with a line containing an integer $M$ ($1 \\le M \\le 1{,}000$). The following three lines, each containing $3 M + 1$ characters, represent the board. The $j$-th character in the $i$-th of those lines describes the information of cell $(i, j)$, as follows: \n</p><ul><li><p> The $x$-th uppercase letter indicates that cell $(i, j)$ is painted in color $x$ and it is initially a floor cell. \n</p></li><li><p> The $x$-th lowercase letter indicates that cell $(i, j)$ is painted in color $x$ and it is initially a wall cell. \n</p></li><li><p> A period (<code>.</code>) indicates that cell $(i, j)$ is not painted and so it is a floor cell. \n</p></li></ul>\n\n<p>Here you can assume that $j$ will be one of $1, 4, 7, \\ldots, 3 M + 1$ if and only if that character is a period. \nThe end of the input is indicated by a line with a single zero. \n</p>\n\n<h3>Output</h3>\n<p>For each dataset, output $-1$ if you cannot achieve the objective. Otherwise, output the set of switches you push in order to achieve the objective, in the following format: \n</p><blockquote>$n$ $s_1$ $s_2$ ... $s_n$</blockquote>\n<p>Here, $n$ is the number of switches you push and $s_1, s_2, \\ldots, s_n$ are uppercase letters corresponding to switches you push, where the $x$-th uppercase letter denotes switch $x$. These uppercase letters $s_1, s_2, \\ldots, s_n$ must be distinct, while the order of them does not matter. Note that it is allowed to output $n = 0$ (with no following uppercase letters) if you do not have to push any switches. See the sample output for clarification. \nIf there are multiple solutions, output any one of them. \n</p>\n\n\n<h3>Sample Input</h3>\n\n<pre>3\n.aa.cA.Cc.\n.bb.Bb.AC.\n.cc.ac.Ab.\n1\n.Xx.\n.Yy.\n.Zz.\n6\n.Aj.fA.aW.zA.Jf.Gz.\n.gW.GW.Fw.ZJ.AG.JW.\n.bZ.jZ.Ga.Fj.gF.Za.\n9\n.ab.gh.mn.st.yz.EF.KL.QR.WA.\n.cd.ij.op.uv.AB.GH.MN.ST.XB.\n.ef.kl.qr.wx.CD.IJ.OP.UV.yz.\n2\n.AC.Mo.\n.IC.PC.\n.oA.CM.\n20\n.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.qb.\n.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.qb.\n.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.QB.qb.\n0</pre>\n<h3>Output for the Sample Input</h3>\n\n<pre>3 B C E\n-1\n3 J A G\n10 A B G H M N S T Y Z\n0\n2 Q B</pre>", "p01701": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<meta http-equiv=\"X-UA-Compatible\" CONTENT=\"IE=EmulateIE7\" /><style type=\"text/css\">blockquote {\n  font-family: Menlo, Monaco, \"Courier New\", monospace;\n  color: #333333;\n  display: block;\n  padding: 8.5px;\n  margin: 0 0 9px;\n  font-size: 12px;\n  line-height: 18px;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  white-space: pre;\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n}</style><div class=\"part\"><h3>Problem Statement</h3>\n<p>We can describe detailed direction by repeating the directional names: north, south, east and west. For example, northwest is the direction halfway between north and west, and northnorthwest is between north and northwest. \n</p>\n<p>In this problem, we describe more detailed direction between north and west as follows.\n</p><ul><li>\"<samp>north</samp>\" means $0$ degrees.\n</li><li>\"<samp>west</samp>\" means $90$ degrees.\n</li><li>If the direction $dir$ means $a$ degrees and the sum of the occurrences of \"<samp>north</samp>\" and \"<samp>west</samp>\" in $dir$ is $n$ ($\\geq$ 1),\n\"<samp>north</samp>\"$dir$ (the concatenation of \"<samp>north</samp>\" and $dir$) means $a - \\frac{90}{2^n}$ degrees and \"<samp>west</samp>\"$dir$ means $a + \\frac{90}{2^n}$ degrees.\n</li></ul>\n\n\n<p>Your task is to calculate the angle in degrees described by the given direction.\n</p>\n\n</div><hr /><div class=\"part\"><h3>Input</h3>\n\n<p>The input contains several datasets. The number of datasets does not exceed $100$. \n</p>\n<p>Each dataset is described by a single line that contains a string denoting a direction.\nYou may assume the given string can be obtained by concatenating some \"<samp>north</samp>\" and \"<samp>west</samp>\",\nthe sum of the occurrences of \"<samp>north</samp>\" and \"<samp>west</samp>\" in the given string is between $1$ and $20$, inclusive,\nand the angle denoted by the given direction is between $0$ and $90$, inclusive.\nThe final dataset is followed by a single line containing only a single \"<samp>#</samp>\".\n</p>\n\n</div><div class=\"part\"><h3>Output</h3>\n\n<p>For each dataset, print an integer if the angle described by the given direction can be represented as an integer, otherwise print it as an irreducible fraction. Follow the format of the sample output.\n</p>\n\n</div><hr /><div class=\"part\"><h3>Sample Input</h3>\n\n<pre>north\nwest\nnorthwest\nnorthnorthwest\nwestwestwestnorth\n#</pre>\n</div><div class=\"part\"><h3>Output for the Sample Input</h3>\n\n<pre>0\n90\n45\n45/2\n315/4</pre>\n\n</div>", "p01704": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<meta http-equiv=\"X-UA-Compatible\" CONTENT=\"IE=EmulateIE7\" /><style type=\"text/css\">blockquote {\n  font-family: Menlo, Monaco, \"Courier New\", monospace;\n  color: #333333;\n  display: block;\n  padding: 8.5px;\n  margin: 0 0 9px;\n  font-size: 12px;\n  line-height: 18px;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  white-space: pre;\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n}</style><div class=\"part\"><h3>Problem Statement</h3><p>We have planted $N$ flower seeds, all of which come into different flowers.\nWe want to make all the flowers come out together.\n</p>\n<p>Each plant has a value called vitality, which is initially zero.\nWatering and spreading fertilizers cause changes on it, and the $i$-th plant will come into flower if its vitality is equal to or greater than $\\mathit{th}_i$.\nNote that $\\mathit{th}_i$ may be negative because some flowers require no additional nutrition.\n</p>\n<p>Watering effects on all the plants.\nWatering the plants with $W$ liters of water changes the vitality of the $i$-th plant by $W \\times \\mathit{vw}_i$ for all $i$ ($1 \\le i \\le n$), and costs $W \\times \\mathit{pw}$ yen, where $W$ need not be an integer.\n$\\mathit{vw}_i$ may be negative because some flowers hate water.\n</p>\n<p>We have $N$ kinds of fertilizers, and the $i$-th fertilizer effects only on the $i$-th plant.\nSpreading $F_i$ kilograms of the $i$-th fertilizer changes the vitality of the $i$-th plant by $F_i \\times \\mathit{vf}_i$, and costs $F_i \\times \\mathit{pf}_i$ yen, where $F_i$ need not be an integer as well.\nEach fertilizer is specially made for the corresponding plant, therefore $\\mathit{vf}_i$ is guaranteed to be positive.\n</p>\n<p>Of course, we also want to minimize the cost.\nFormally, our purpose is described as &quot;to minimize $W \\times \\mathit{pw} + \\sum_{i=1}^{N}(F_i \\times \\mathit{pf}_i)$ under $W \\times \\mathit{vw}_i + F_i \\times \\mathit{vf}_i \\ge \\mathit{th}_i$, $W \\ge 0$, and $F_i \\ge 0$ for all $i$ ($1 \\le i \\le N$)&quot;.\nYour task is to calculate the minimum cost.\n</p>\n\n</div><div class=\"part\"><h3>Input</h3>\n\n<p>The input consists of multiple datasets.\nThe number of datasets does not exceed $100$, and the data size of the input does not exceed $20\\mathrm{MB}$.\nEach dataset is formatted as follows.\n</p>\n\n<blockquote style=\"font-size:14pt\">$N$<br>$\\mathit{pw}$<br>$\\mathit{vw}_1$ $\\mathit{pf}_1$ $\\mathit{vf}_1$ $\\mathit{th}_1$<br>:<br>:<br>$\\mathit{vw}_N$ $\\mathit{pf}_N$ $\\mathit{vf}_N$ $\\mathit{th}_N$</blockquote>\n\n<p>The first line of a dataset contains a single integer $N$, number of flower seeds.\nThe second line of a dataset contains a single integer $\\mathit{pw}$, cost of watering one liter.\nEach of the following $N$ lines describes a flower. The $i$-th line contains four integers, $\\mathit{vw}_i$, $\\mathit{pf}_i$, $\\mathit{vf}_i$, and $\\mathit{th}_i$, separated by a space.\n</p>\n<p>You can assume that $1 \\le N \\le 10^5$, $1 \\le \\mathit{pw} \\le 100$, $-100 \\le \\mathit{vw}_i \\le 100$, $1 \\le \\mathit{pf}_i \\le 100$, $1 \\le \\mathit{vf}_i \\le 100$, and $-100 \\le \\mathit{th}_i \\le 100$.\n</p>\n<p>The end of the input is indicated by a line containing a zero.\n</p>\n\n</div><div class=\"part\"><h3>Output</h3>\n\n<p>For each dataset, output a line containing the minimum cost to make all the flowers come out.\nThe output must have an absolute or relative error at most $10^{-4}$.\n</p>\n\n</div><div class=\"part\"><h3>Sample Input</h3>\n\n<pre>3\n10\n4 3 4 10\n5 4 5 20\n6 5 6 30\n3\n7\n-4 3 4 -10\n5 4 5 20\n6 5 6 30\n3\n1\n-4 3 4 -10\n-5 4 5 -20\n6 5 6 30\n3\n10\n-4 3 4 -10\n-5 4 5 -20\n-6 5 6 -30\n0</pre>\n</div><div class=\"part\"><h3>Output for the Sample Input</h3>\n\n<pre>43.5\n36\n13.5\n0</pre>\n\n</div>", "p01702": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<meta http-equiv=\"X-UA-Compatible\" CONTENT=\"IE=EmulateIE7\" /><style type=\"text/css\">blockquote {\n  font-family: Menlo, Monaco, \"Courier New\", monospace;\n  color: #333333;\n  display: block;\n  padding: 8.5px;\n  margin: 0 0 9px;\n  font-size: 12px;\n  line-height: 18px;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  white-space: pre;\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n}</style><div class=\"part\"><h3>Problem Statement</h3>\n<p>In the headquarter building of ICPC (International Company of Plugs &amp; Connectors), there are $M$ light bulbs and they are controlled by $N$ switches.\nEach light bulb can be turned on or off by exactly one switch.\nEach switch may control multiple light bulbs.\nWhen you operate a switch, all the light bulbs controlled by the switch change their states.\nYou lost the table that recorded the correspondence between the switches and the light bulbs, and want to restore it.\n</p>\n<p>You decided to restore the correspondence by the following procedure.\n</p><ul><li>At first, every switch is off and every light bulb is off.\n</li><li>You operate some switches represented by $S_1$.\n</li><li>You check the states of the light bulbs represented by $B_1$.\n</li><li>You operate some switches represented by $S_2$.\n</li><li>You check the states of the light bulbs represented by $B_2$.\n</li><li>...\n</li><li>You operate some switches represented by $S_Q$.\n</li><li>You check the states of the light bulbs represented by $B_Q$.\n</li></ul>\n\n<p>After you operate some switches and check the states of the light bulbs, the states of the switches and the light bulbs are kept for next operations.\n</p>\n<p>Can you restore the correspondence between the switches and the light bulbs using the information about the switches you have operated and the states of the light bulbs you have checked?\n</p>\n\n</div><div class=\"part\"><h3>Input</h3>\n\n<p>The input consists of multiple datasets.\nThe number of dataset is no more than $50$ and the file size is no more than $10\\mathrm{MB}$.\nEach dataset is formatted as follows.\n</p>\n<blockquote style=\"font-size:14pt\">$N$ $M$ $Q$<br>$S_1$ $B_1$<br>:<br>:<br>$S_Q$ $B_Q$</blockquote>\n\n<p>The first line of each dataset contains three integers $N$ ($1 \\le N \\le 36$), $M$ ($1 \\le M \\le 1{,}000$), $Q$ ($0 \\le Q \\le 1{,}000$), which denote the number of switches, the number of light bulbs and the number of operations respectively.\nThe following $Q$ lines describe the information about the switches you have operated and the states of the light bulbs you have checked.\nThe $i$-th of them contains two strings $S_i$ and $B_i$ of lengths $N$ and $M$ respectively.\nEach $S_i$ denotes the set of the switches you have operated: $S_{ij}$ is either $0$ or $1$, which denotes the $j$-th switch is not operated or operated respectively.\nEach $B_i$ denotes the states of the light bulbs: $B_{ij}$ is either $0$ or $1$, which denotes the $j$-th light bulb is off or on respectively.\n</p>\n<p>You can assume that there exists a correspondence between the switches and the light bulbs which is consistent with the given information.\n</p>\n<p>The end of input is indicated by a line containing three zeros.\n</p>\n\n</div><div class=\"part\"><h3>Output</h3>\n\n<p>For each dataset, output the correspondence between the switches and the light bulbs consisting of $M$ numbers written in base-$36$.\nIn the base-$36$ system for this problem, the values $0$-$9$ and $10$-$35$ are represented by the characters '<samp>0</samp>'-'<samp>9</samp>' and '<samp>A</samp>'-'<samp>Z</samp>' respectively.\nThe $i$-th character of the correspondence means the number of the switch controlling the $i$-th light bulb.\nIf you cannot determine which switch controls the $i$-th light bulb, output '<samp>?</samp>' as the $i$-th character instead of the number of a switch.\n</p>\n\n</div><div class=\"part\"><h3>Sample Input</h3>\n\n<pre>3 10 3\n000 0000000000\n110 0000001111\n101 1111111100\n2 2 0\n1 1 0\n2 1 1\n01 1\n11 11 10\n10000000000 10000000000\n11000000000 01000000000\n01100000000 00100000000\n00110000000 00010000000\n00011000000 00001000000\n00001100000 00000100000\n00000110000 00000010000\n00000011000 00000001000\n00000001100 00000000100\n00000000110 00000000010\n0 0 0</pre>\n</div><div class=\"part\"><h3>Output for the Sample Input</h3>\n\n\n<pre>2222221100\n??\n0\n1\n0123456789A</pre>\n</div>", "p01703": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<meta http-equiv=\"X-UA-Compatible\" CONTENT=\"IE=EmulateIE7\" /><style type=\"text/css\">blockquote {\n  font-family: Menlo, Monaco, \"Courier New\", monospace;\n  color: #333333;\n  display: block;\n  padding: 8.5px;\n  margin: 0 0 9px;\n  font-size: 12px;\n  line-height: 18px;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  white-space: pre;\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n}</style><div class=\"part\"><h3>Problem Statement</h3><p><i>Infinite Chronicle -Princess Castle-</i> is a simple role-playing game. \nThere are $n + 1$ checkpoints, numbered $0$ through $n$, \nand for each $i = 1, 2, \\ldots, n$, there is a unique one-way road running from checkpoint $i - 1$ to $i$. \nThe game starts at checkpoint $0$ and ends at checkpoint $n$. \nEvil monsters will appear on the roads and the hero will have battles against them. \nYou can save your game progress at any checkpoint; if you lose a battle, you can restart the game from the checkpoint where you have saved for the last time. \nAt the beginning of the game, the progress is automatically saved at checkpoint $0$ with no time. \n</p>\n<p>Rabbit Hanako is fond of this game and now interested in speedrunning. \nAlthough Hanako is an expert of the game, she cannot always win the battles because of random factors. \nFor each $i$, she estimated the probability $p_i$ to win all the battles along the road from checkpoint $i - 1$ to $i$. \nEverytime she starts at checkpoint $i - 1$, after exactly one miniutes, \nshe will be at checkpoint $i$ with probability $p_i$ and where she saved for the last time with probability $1 - p_i$. \n</p>\n<p>What puzzles Hanako is that it also takes one minute (!) to save your progress at a checkpoint, \nso it might be a good idea to pass some checkpoints without saving in order to proceed quickly. \nThe task is to compute the minimum possible expected time needed to complete the game. \n</p>\n\n</div><div class=\"part\"><h3>Input</h3>\n<p>The input consists of multiple datasets. The number of datasets is no more than $50$. \nEach dataset has two lines: the first line contains an integer $n$ ($1 \\le n \\le 10^5$), representing the number of roads, \nand the second line contains $n$ numbers $p_1, p_2, \\ldots, p_n$ ($0 \\lt p_i \\le 1$), representing the winning probabilities.\nEach $p_i$ has exactly two digits after the decimal point.\nThe end of input is denoted as a line containing only a single zero. \n</p>\n\n</div><div class=\"part\"><h3>Output</h3>\n<p>For each dataset, display the minimum expected time in minutes with a relative error of at most $10^{-8}$ in a line. \n</p>\n\n</div><div class=\"part\"><h3>Sample Input</h3>\n\n<pre>2\n0.50 0.40\n2\n0.70 0.60\n4\n0.99 1.00 1.00 0.01\n0</pre>\n</div><div class=\"part\"><h3>Output for the Sample Input</h3>\n\n<pre>5.5000000000\n4.0476190476\n104.0101010101</pre>\n</div>", "p01707": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<meta http-equiv=\"X-UA-Compatible\" CONTENT=\"IE=EmulateIE7\" /><style type=\"text/css\">blockquote {\n  font-family: Menlo, Monaco, \"Courier New\", monospace;\n  color: #333333;\n  display: block;\n  padding: 8.5px;\n  margin: 0 0 9px;\n  font-size: 12px;\n  line-height: 18px;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  white-space: pre;\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n}</style><div class=\"part\"><h3>Problem Statement</h3><p>One day, my grandmas left $N$ cookies.\nMy elder sister and I were going to eat them immediately, but there was the instruction.\nIt said\n</p><ul><li> Cookies will go bad; you should eat all of them within $D$ days.\n</li><li> Be careful about overeating; you should eat strictly less than $X$ cookies in a day.\n</li></ul>\n\n<p>My sister said \"<samp>How many ways are there to eat all of the cookies? Let's try counting!</samp>\"\n</p>\n<p>Two ways are considered different if there exists a day such that the numbers of the cookies eaten on that day are different in the two ways.\nFor example, if $N$, $D$ and $X$ are $5$, $2$ and $5$ respectively, the number of the ways is $4$:\n</p><ul><li> Eating $1$ cookie on the first day and $4$ cookies on the second day.\n</li><li> Eating $2$ cookies on the first day and $3$ cookies on the second day.\n</li><li> Eating $3$ cookies on the first day and $2$ cookies on the second day.\n</li><li> Eating $4$ cookies on the first day and $1$ cookie on the second day.\n</li></ul>\n\n<p>I noticed the number of the ways would be very huge and my sister would die before counting it.\nTherefore, I tried to count it by a computer program to save the life of my sister.\n</p>\n\n</div><div class=\"part\"><h3>Input</h3>\n<p>The input consists of multiple datasets.\nThe number of datasets is no more than $100$.\nFor each dataset, three numbers $N$ ($1 \\le N \\le 2{,}000$), $D$ ($1 \\le D \\le 10^{12}$) and $X$ ($1 \\le X \\le 2{,}000$) are written in a line and separated by a space.\nThe end of input is denoted by a line that contains three zeros.\n</p>\n\n</div><div class=\"part\"><h3>Output</h3>\n<p>Print the number of the ways modulo $1{,}000{,}000{,}007$ in a line for each dataset.\n</p>\n\n</div><div class=\"part\"><h3>Sample Input</h3>\n\n\n<pre>5 2 5\n3 3 3\n5 4 5\n4 1 2\n1 5 1\n1250 50 50\n0 0 0</pre>\n</div><div class=\"part\"><h3>Output for the Sample Input</h3>\n\n<pre>4\n7\n52\n0\n0\n563144298</pre>\n</div>", "p01706": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<meta http-equiv=\"X-UA-Compatible\" CONTENT=\"IE=EmulateIE7\" /><style type=\"text/css\">blockquote {\n  font-family: Menlo, Monaco, \"Courier New\", monospace;\n  color: #333333;\n  display: block;\n  padding: 8.5px;\n  margin: 0 0 9px;\n  font-size: 12px;\n  line-height: 18px;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  white-space: pre;\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n}</style><div class=\"part\"><h3>Problem Statement</h3><p>JAG Kingdom is a strange kingdom such that its $N$ cities are connected only by one-way roads.\nThe $N$ cities are numbered $1$ through $N$.\nICPC (International Characteristic Product Corporation) transports its products from the factory at the city $S$ to the storehouse at the city $T$ in JAG Kingdom every day.\nFor efficiency, ICPC uses multiple trucks at once.\nEach truck starts from $S$ and reaches $T$ on the one-way road network, passing through some cities (or directly).\nIn order to reduce risks of traffic jams and accidents, no pair of trucks takes the same road.\n</p>\n<p>Now, ICPC wants to improve the efficiency of daily transports, while ICPC operates daily transports by as many trucks as possible under the above constraint.\nJAG Kingdom, whose finances are massively affected by ICPC, considers to change the direction of one-way roads in order to increase the number of trucks for daily transports of ICPC.\nBecause reversal of many roads causes confusion, JAG Kingdom decides to reverse at most a single road.\n</p>\n<p>If there is no road such that reversal of the road can improve the transport efficiency, JAG Kingdom need not reverse any roads.\nCheck whether reversal of a single road can improve the current maximum number of trucks for daily transports.\nAnd if so, calculate the maximum number of trucks which take disjoint sets of roads when a one-way road can be reversed, and the number of roads which can be chosen as the road to be reversed to realize the maximum.\n</p>\n\n</div><div class=\"part\"><h3>Input</h3>\n<p>The input consists of multiple datasets. The number of dataset is no more than $100$.\n</p>\n<p>Each dataset is formatted as follows.\n</p>\n<blockquote style=\"font-size:14pt\">$N$ $M$ $S$ $T$<br>$a_1$ $b_1$<br>$a_2$ $b_2$<br>:<br>:<br>$a_M$ $b_M$</blockquote>\n\n<p>The first line of each dataset contains four integers:\nthe number of cities $N$ ($2 \\le N \\le 1{,}000$), the number of roads $M$ ($1 \\le M \\le 10{,}000$), the city with the factory $S$ and the city with the storehouse $T$ ($1 \\le S, T \\le N$, $S \\neq T$).\n</p>\n<p>The following $M$ lines describe the information of the roads.\nThe $i$-th line of them contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le N$, $a_i \\neq b_i$), meaning that the $i$-th road is directed from $a_i$ to $b_i$.\n</p>\n<p>The end of input is indicated by a line containing four zeros.\n</p>\n\n</div><div class=\"part\"><h3>Output</h3>\n<p>For each dataset, output two integers separated by a single space in a line as follows:\nIf reversal of a single road improves the current maximum number of trucks for daily transports, the first output integer is the new maximum after reversal of a road, and the second output integer is the number of roads which can be chosen as the road to be reversed to realize the new maximum.\nOtherwise, i.e. if the current maximum cannot be increased by any reversal of a road, the first output integer is the current maximum and the second output integer is $0$.\n</p>\n\n\n</div><div class=\"part\"><h3>Sample Input</h3>\n\n<pre>4 4 1 4\n1 2\n3 1\n4 2\n3 4\n7 8 1 7\n1 2\n1 3\n2 4\n3 4\n4 5\n4 6\n5 7\n7 6\n6 4 5 2\n1 2\n1 3\n4 5\n5 6\n10 21 9 10\n9 1\n9 2\n9 3\n9 4\n10 1\n10 2\n10 3\n10 4\n1 5\n2 5\n2 6\n3 6\n3 7\n4 7\n4 8\n1 8\n5 10\n6 10\n7 10\n10 8\n10 9\n2 15 1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n0 0 0 0</pre>\n\n</div><div class=\"part\"><h3>Output for the Sample Input</h3>\n\n<pre>1 2\n2 1\n0 0\n4 6\n15 0</pre>\n</div>", "p01708": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<meta http-equiv=\"X-UA-Compatible\" CONTENT=\"IE=EmulateIE7\" /><style type=\"text/css\">blockquote {\n  font-family: Menlo, Monaco, \"Courier New\", monospace;\n  color: #333333;\n  display: block;\n  padding: 8.5px;\n  margin: 0 0 9px;\n  font-size: 12px;\n  line-height: 18px;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  white-space: pre;\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n}</style><div class=\"part\"><h3>Problem Statement</h3><p>One day, you found an old scroll with strange texts on it.\n</p>\n<p>You revealed that the text was actually an expression denoting the position of\ntreasure.  The expression consists of following three operations:\n</p><ul><li> From two points, yield a line on which the points lie.\n</li><li> From a point and a line, yield a point that is symmetric to the given point with respect to the line.\n</li><li> From two lines, yield a point that is the intersection of the lines.\n</li></ul>\n\n<p>The syntax of the expression is denoted by following BNF:\n</p><pre>\n&lt;expression&gt;      ::= &lt;point&gt;\n&lt;point&gt;       \t  ::= &lt;point-factor&gt; | &lt;line&gt; &quot;@&quot; &lt;line-factor&gt; | &lt;line&gt; &quot;@&quot; &lt;point-factor&gt; | &lt;point&gt; &quot;@&quot; &lt;line-factor&gt;\n&lt;point-factor&gt;    ::= &quot;(&quot; &lt;number&gt; &quot;,&quot; &lt;number&gt; &quot;)&quot; | &quot;(&quot; &lt;point&gt; &quot;)&quot;\n&lt;line&gt;            ::= &lt;line-factor&gt; | &lt;point&gt; &quot;@&quot; &lt;point-factor&gt;\n&lt;line-factor&gt;     ::= &quot;(&quot; &lt;line&gt; &quot;)&quot;\n&lt;number&gt;          ::= &lt;zero-digit&gt; | &lt;positive-number&gt; | &lt;negative-number&gt;\n&lt;positive-number&gt; ::= &lt;nonzero-digit&gt; | &lt;positive-number&gt; &lt;digit&gt;\n&lt;negative-number&gt; ::= &quot;-&quot; &lt;positive-number&gt;\n&lt;digit&gt;           ::= &lt;zero-digit&gt; | &lt;nonzero-digit&gt;\n&lt;zero-digit&gt;      ::= &quot;0&quot;\n&lt;nonzero-digit&gt;   ::= &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot; | &quot;9&quot;</pre>\n<p>Each &lt;point&gt; or &lt;point-factor&gt; denotes a point, whereas each &lt;line&gt; or &lt;line-factor&gt; denotes a line.  The former notion of &lt;point-factor&gt; $(X,Y)$ represents a point which has $X$ for $x$-coordinate and $Y$ for $y$-coordinate on the $2$-dimensional plane.\n\"<samp>@</samp>\" indicates the operations on two operands.  Since each operation is distinguishable from others by its operands' types (i.e. a point or a line),\nall of these operations are denoted by the same character \"<samp>@</samp>\". \nNote that \"<samp>@</samp>\" is left-associative, as can be seen from the BNF.\n</p>\n<p>Your task is to determine where the treasure is placed.\n</p>\n\n</div><div class=\"part\"><h3>Input</h3>\n<p>The input consists of multiple datasets.  Each dataset is a single line which\ncontains an expression denoting the position of treasure.\n</p>\n<p>It is guaranteed that each dataset satisfies the following conditions:\n</p><ul><li> The length of the string never exceeds $10^2$.\n</li><li> If both operands of \"<samp>@</samp>\" are points, their distance is greater than $1$.\n</li><li> If both operands of \"<samp>@</samp>\" are lines, they are never parallel.\n</li><li> The absolute values of points' coordinates never exceed $10^2$ at any point of evaluation.\n</li></ul>\n\n<p>You can also assume that there are at most $100$ datasets.\n</p>\n<p>The input ends with a line that contains only a single \"<samp>#</samp>\".\n</p>\n\n</div><div class=\"part\"><h3>Output</h3>\n<p>For each dataset, print the $X$ and $Y$ coordinates of the point, denoted by\nthe expression, in this order.\n</p>\n<p>The output will be considered correct if its absolute or relative error is at most $10^{-2}$.\n</p>\n\n</div><div class=\"part\"><h3>Sample Input</h3>\n\n<pre>((0,0)@(1,1))@((4,1)@(2,5))\n((0,0)@(3,1))@((1,-3)@(2,-1))\n(0,0)@(1,1)@(4,1)\n(0,0)@((1,1)@(4,1))\n(((0,0)@((10,20)@(((30,40))))))\n((0,0)@(3,1))@((1,-3)@(2,-1))@(100,-100)@(100,100)\n#</pre>\n\n</div><div class=\"part\"><h3>Output for the Sample Input</h3>\n\n<pre>3.00000000 3.00000000\n3.00000000 1.00000000\n1.00000000 4.00000000\n0.00000000 2.00000000\n-10.00000000 10.00000000\n-99.83681795 -91.92248853</pre>\n</div>", "p01710": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<meta http-equiv=\"X-UA-Compatible\" CONTENT=\"IE=EmulateIE7\" /><style type=\"text/css\">blockquote {\n  font-family: Menlo, Monaco, \"Courier New\", monospace;\n  color: #333333;\n  display: block;\n  padding: 8.5px;\n  margin: 0 0 9px;\n  font-size: 12px;\n  line-height: 18px;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  white-space: pre;\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n}</style><div class=\"part\"><h3>Problem Statement</h3><p>You want to compete in ICPC (Internet Contest of Point Collection).\nIn this contest, we move around in $N$ websites, numbered $1$ through $N$, within a time limit and collect points as many as possible.\nWe can start and end on any website.\n</p>\n<p>There are $M$ links between the websites, and we can move between websites using these links.\nYou can assume that it doesn't take time to move between websites.\nThese links are directed and websites may have links to themselves.\n</p>\n<p>In each website $i$, there is an advertisement and we can get $p_i$ point(s) by watching this advertisement in $t_i$ seconds.\nWhen we start on or move into a website, we can decide whether to watch the advertisement or not.\nBut we cannot watch the same advertisement more than once before using any link in the website, while we can watch it again if we have moved among websites and returned to the website using one or more links, including ones connecting a website to itself.\nAlso we cannot watch the advertisement in website $i$ more than $k_i$ times.\n</p>\n<p>You want to win this contest by collecting as many points as you can.\nSo you decided to compute the maximum points that you can collect within $T$ seconds.\n</p>\n\n</div><div class=\"part\"><h3>Input</h3>\n<p>The input consists of multiple datasets.\nThe number of dataset is no more than $60$.\n</p>\n<p>Each dataset is formatted as follows.\n</p>\n<blockquote style=\"font-size:14pt\">$N$ $M$ $T$<br>$p_1$ $t_1$ $k_1$<br>:<br>:<br>$p_N$ $t_N$ $k_N$<br>$a_1$ $b_1$<br>:<br>:<br>$a_M$ $b_M$</blockquote>\n\n<p>The first line of each dataset contains three integers $N$ ($1 \\le N \\le 100$), $M$ ($0 \\le M \\le 1{,}000$) and $T$ ($1 \\le T \\le 10{,}000$), which denote the number of websites, the number of links, and the time limit, respectively.\nAll the time given in the input is expressed in seconds.\n</p>\n<p>The following $N$ lines describe the information of advertisements.\nThe $i$-th of them contains three integers $p_i$ ($1 \\le p_i \\le 10{,}000$), $t_i$ ($1 \\le t_i \\le 10{,}000$) and $k_i$ ($1 \\le k_i \\le 10{,}000$), which denote the points of the advertisement, the time required to watch the advertisement, and the maximum number of times you can watch the advertisement in website $i$, respectively.\n</p>\n<p>The following $M$ lines describe the information of links.\nEach line contains two integers $a_i$ and $b_i$ ($1 \\le a_i,b_i \\le N$), which mean that we can move from website $a_i$ to website $b_i$ using a link.\n</p>\n<p>The end of input is indicated by a line containing three zeros.\n</p>\n\n</div><div class=\"part\"><h3>Output</h3>\n\n<p>For each dataset, output the maximum points that you can collect within $T$ seconds.\n</p>\n\n</div><div class=\"part\"><h3>Sample Input</h3>\n\n<pre>5 4 10\n4 3 1\n6 4 3\n3 2 4\n2 2 1\n8 5 3\n1 2\n2 3\n3 4\n4 5\n3 3 1000\n1000 1 100\n1 7 100\n10 9 100\n1 2\n2 3\n3 2\n1 0 5\n25 25 2\n1 0 25\n25 25 2\n5 5 100\n1 1 20\n1 1 20\n10 1 1\n10 1 1\n10 1 1\n1 2\n2 1\n3 4\n4 5\n5 3\n3 3 100\n70 20 10\n50 15 20\n90 10 10\n1 2\n2 2\n2 3\n0 0 0</pre>\n\n</div><div class=\"part\"><h3>Output for the Sample Input</h3>\n\n<pre>15\n2014\n0\n25\n40\n390</pre>\n</div>", "p01709": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<meta http-equiv=\"X-UA-Compatible\" CONTENT=\"IE=EmulateIE7\" /><style type=\"text/css\">blockquote {\n  font-family: Menlo, Monaco, \"Courier New\", monospace;\n  color: #333333;\n  display: block;\n  padding: 8.5px;\n  margin: 0 0 9px;\n  font-size: 12px;\n  line-height: 18px;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n  white-space: pre;\n  white-space: pre-wrap;\n  word-break: break-all;\n  word-wrap: break-word;\n}</style><div class=\"part\"><h3>Problem Statement</h3><p>You have just transferred to another world, and got a map of this world.\nThere are several countries in this world.\nEach country has a connected territory,\nwhich is drawn on the map as a simple polygon consisting of its border segments in the $2$-dimensional plane.\n</p>\n<p>You are strange to this world, so you would like to paint countries on the map to distinguish them.\nIf you paint adjacent countries with same color, it would be rather difficult to distinguish the countries.\nTherefore, you want to paint adjacent countries with different colors.\nHere, we define two countries are adjacent if their borders have at least one common segment whose length is strictly greater than $0$.\nNote that two countries are NOT considered adjacent if the borders only touch at points.\n</p>\n<p>Because you don't have the currency of this world, it is hard for you to prepare many colors.\nWhat is the minimum number of colors to paint the map such that adjacent countries can be painted with different colors?\n</p>\n\n</div><div class=\"part\"><h3>Input</h3>\n<p>The input consists of multiple datasets. The number of dataset is no more than $35$.\n</p>\n<p>Each dataset is formatted as follows.\n</p>\n<blockquote style=\"font-size:14pt\">$n$<br>$m_1$<br>$x_{1,1}$ $y_{1,1}$ <br>:<br>:<br>$x_{1,m_1}$ $y_{1,m_1}$<br>:<br>:<br>$m_n$<br>$x_{n,1}$ $y_{n,1}$<br>:<br>:<br>$x_{n,m_n}$ $y_{n,m_n}$</blockquote>\n\n<p>The first line of each dataset contains an integer $n$ ($1 \\le n \\le 35$),\nwhich denotes the number of countries in this world.\n</p>\n<p>The rest of each dataset describes the information of $n$ polygons representing the countries.\nThe first line of the information of the $i$-th polygon contains an integer $m_i$ ($3 \\le m_i \\le 50$), which denotes the number of vertices.\nThe following $m_i$ lines describe the coordinates of the vertices in the counter-clockwise order.\nThe $j$-th line of them contains two integers $x_{i,j}$ and $y_{i,j}$ ($|x_{i,j}|, |y_{i,j}| \\le 10^3$),\nwhich denote the coordinates of the $j$-th vertex of the $i$-th polygon.\n</p>\n<p>You can assume the followings.\n</p><ul><li> Each polygon has an area greater than $0$.\n</li><li> Two vertices of the same polygon have distinct coordinates.\n</li><li> Two segments of the same polygon do not have any common points except that exactly two segments meet at each vertex.\n</li><li> Two polygons have no common area.\n</li></ul>\n\n<p>The end of input is indicated by a line containing a single zero.\n</p>\n\n</div><div class=\"part\"><h3>Output</h3>\n<p>For each dataset, output the minimum number of colors to paint the map such that adjacent countries are painted with different colors in a line.\n</p>\n\n\n</div><div class=\"part\"><h3>Sample Input</h3>\n\n<pre>1\n3\n0 0\n1 0\n0 1\n4\n4\n0 0\n10 0\n10 10\n0 10\n4\n10 0\n20 0\n20 10\n10 10\n4\n0 10\n10 10\n10 20\n0 20\n4\n10 10\n20 10\n20 20\n10 20\n3\n4\n-10 -10\n2 2\n10 10\n-11 7\n3\n-1 -1\n1 -1\n0 0\n3\n0 0\n3 -3\n20 20\n7\n4\n46 12\n52 12\n53 15\n45 15\n32\n67 1\n70 0\n73 1\n77 3\n79 5\n80 8\n77 8\n76 5\n74 4\n71 3\n70 3\n67 4\n65 6\n63 8\n62 14\n64 19\n66 21\n70 22\n75 21\n78 16\n80 16\n80 17\n79 20\n78 22\n74 24\n67 24\n63 22\n61 19\n60 15\n60 10\n62 5\n64 3\n5\n74 14\n80 14\n80 16\n78 16\n74 16\n19\n34 0\n37 0\n37 19\n36 22\n35 23\n32 24\n30 24\n27 24\n25 23\n23 20\n23 18\n23 15\n26 15\n26 18\n27 20\n29 21\n32 21\n34 20\n34 18\n4\n47 0\n50 0\n42 24\n39 24\n4\n79 20\n80 17\n80 22\n78 22\n4\n50 0\n58 24\n56 24\n49 3\n4\n10\n34 21\n34 14\n35 14\n35 19\n40 19\n40 20\n35 20\n35 22\n30 22\n30 21\n16\n20 24\n21 24\n21 33\n42 33\n42 20\n40 20\n40 19\n45 19\n45 5\n40 5\n40 4\n46 4\n46 20\n43 20\n43 34\n20 34\n10\n26 21\n26 14\n27 14\n27 21\n30 21\n30 22\n21 22\n21 24\n20 24\n20 21\n12\n34 8\n34 4\n40 4\n40 5\n35 5\n35 14\n34 14\n34 9\n27 9\n27 14\n26 14\n26 8\n0</pre>\n</div><div class=\"part\"><h3>Output for the Sample Input</h3>\n\n<pre>1\n2\n3\n3\n4</pre>\n</div>", "p01732": "\n<p>\nNathan O. Davis is running a company. His company owns a web service which has a lot of users. So his office is full of servers, routers and messy LAN cables.\n</p>\n\n<p>He is now very puzzling over the messy cables, because they are causing many kinds of problems. For example, staff working at the company often trip over a cable. No damage if the cable is disconnected. It's just lucky. Computers may fall down and get broken if the cable is connected. He is about to introduce a new computer and a new cable. He wants to minimize staff's steps over the new cable.\n</p>\n\n<p>\nHis office is laid-out in a two-dimensional grid with <var>H \\times W</var> cells. The new cable should weave along edges of the cells. Each end of the cable is at a corner of a cell. The grid is expressed in zero-origin coordinates, where the upper left corner is (0, 0).\n</p>\n\n<p>\nEach staff starts his/her work from inside a certain cell and walks in the office along the grid in a fixed repeated pattern every day. A walking pattern is described by a string of four characters <code>U</code>, <code>D</code>, <code>L</code> and <code>R</code>. <code>U</code> means moving up, <code>D</code> means moving down, <code>R</code> means moving to the right, and <code>L</code> means moving to the left. For example, <code>UULLDDRR</code> means moving up, up, left, left, down, down, right and right in order. The staff repeats the pattern fixed <var>T</var> times. Note that the staff stays in the cell if the staff is going out of the grid through the wall.\n</p>\n\n<p>\nYou have the moving patterns of all staff and the positions of both ends of the new cable. Your job is to find an optimal placement of the new cable, which minimizes the total number his staff would step over the cable.\n</p>\n\n\n<h3>Input</h3>\n<p>The first line of the input contains three integers which represent the dimension of the office <var>W</var>, <var>H</var> (<var>1 \\leq W, H \\leq 500</var>), and the number of staff <var>N</var> (<var>1 \\leq N \\leq 1000</var>), respectively.\nThe next line contains two <var>x-y</var> pairs (<var>0 \\leq x \\leq W</var>, <var>0 \\leq y \\leq H</var>), which mean the position of two endpoints of a LAN cable to be connected.\nThese values represents the coordinates of the cells to which the cable is plugged in its top-left corner.\nExceptionally, <var>x = W</var> means the right edge of the rightmost cell, and <var>y = H</var> means the bottom edge of the bottommost cell.\n</p>\n<p>Following lines describe staff's initial positions and their moving patterns.\nThe first line includes an <var>x</var>-<var>y</var> pair (<var>0 \\leq x \\lt W</var>, <var>0 \\leq y \\lt H</var>), which represents the coordinate of a staff's initial cell.\nThe next line has an integer <var>T</var> (<var>1 \\leq T \\leq 100</var>) and a string which consists of <code>U</code>, <code>D</code>, <code>L</code> and <code>R</code>, whose meaning is described as above.\nThe length of a pattern string is greater than or equal to <var>1</var>, and no more than <var>1,000</var>.\nThese two lines are repeated <var>N</var> times.\n</p>\n\n\n<h3>Output</h3>\n<p>Output the minimum number of times his staff step over the cable in a single line.\n</p>\n\n<h3>Sample Input 1</h3>\n\n\n<pre>3 3 1\n1 1 3 3\n0 0\n1 RRDDLLUU\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n\n<pre>1\n</pre>\n\n\n<h3>Sample Input 2</h3>\n\n\n<pre>3 3 1\n0 0 3 3\n0 0\n1 RRDDLLUU\n</pre>\n\n\n<h3>Output for the Sample Input 2</h3>\n\n\n<pre>0\n</pre>\n\n\n<h3>Sample Input 3</h3>\n\n\n<pre>3 3 1\n1 1 3 3\n0 0\n10 RRDDLLUU\n</pre>\n\n\n<h3>Output for the Sample Input 3</h3>\n\n\n<pre>10\n</pre>\n\n\n<h3>Sample Input 4</h3>\n\n\n<pre>3 3 4\n1 1 3 3\n0 0\n10 R\n2 0\n10 D\n2 2\n10 L\n0 2\n10 U\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n\n<pre>1\n</pre>", "p01733": "\n<p>\nIevan Ritola is a researcher of behavioral ecology. Her group visited a forest to analyze an ecological system of some kinds of foxes.\n</p>\n\n<p>\nThe forest can be expressed as a two-dimensional plane. With her previous research, foxes in the forest are known to live at lattice points. Here, lattice points are the points whose <var>x</var> and <var>y</var> coordinates are both integers. Two or more foxes might live at the same point.\n</p>\n\n<p>\nTo observe the biology of these foxes, they decided to put a pair of sensors in the forest. The sensors can be put at lattice points. Then, they will be able to observe all foxes inside the bounding rectangle (including the boundary) where the sensors are catty-corner to each other. The sensors cannot be placed at the points that have the same <var>x</var> or <var>y</var> coordinate; in other words the rectangle must have non-zero area.\n</p>\n\n<p>\nThe more foxes can be observed, the more data can be collected; on the other hand, monitoring a large area consumes a large amount of energy. So they want to maximize the value given by <var>N' / (|x_1 &minus; x_2| &times; |y_1 &minus; y_2|)</var>, where <var>N'</var> is the number of foxes observed and <var>(x_1, y_1)</var> and <var>(x_2, y_2)</var> are the positions of the two sensors.\n</p>\n\n<p>\nLet's help her observe cute foxes!\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input is formatted as follows.\n</p>\n\n<pre>\n<var>N</var>\n<var>x_1</var> <var>y_1</var> <var>w_1</var>\n<var>x_2</var> <var>y_2</var> <var>w_2</var>\n:\n:\n<var>x_N</var> <var>y_N</var> <var>w_N</var>\n</pre>\n\n<p>\nThe first line contains a single integer <var>N</var> (<var>1 &le; N &le; 10^5</var>) indicating the number of  the fox lairs in the forest.\nEach of the next <var>N</var> lines contains three integers <var>x_i</var>, <var>y_i</var> (<var>|x_i|,\\, |y_i| &le; 10^9</var>) and <var>w_i</var> (<var>1 &le; w_i &le; 10^4</var>), which represent there are <var>w_i</var> foxes at the point <var>(x_i, y_i)</var>.\nIt is guaranteed that all points are mutually different.\n</p>\n\n\n<h3>Output</h3>\n<p>Output the maximized value  as a fraction:\n</p>\n<pre>\n<var>a</var> / <var>b</var>\n</pre>\n\n<p>where <var>a</var> and <var>b</var> are integers representing the numerator and the denominato respectively.\n There should be exactly one space before and after  the slash.\nThe fraction should be written in the simplest form, that is,  <var>a</var> and  <var>b</var> must not have a common integer divisor greater than one.\n</p>\n<p>If the value becomes an integer, print a fraction with the denominator of one (e.g. <code>5 / 1</code> to represent 5).\nThis implies zero should be printed as <code>0 / 1</code> (without quotes).\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>2\n1 1 2\n2 2 3\n</pre>\n\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>5 / 1\n</pre>", "p01737": "\n<p>\nCiel, an idol whose appearance and behavior are similar to a fox, is participating in a rehearsal for the live concert which takes place in a few days.\nTo become a top idol, a large amount of effort is required!\n</p>\n\n<p>\nThe live stage can be expressed as a two-dimensional surface.\nThe live stage has <var>N</var> spotlights to illuminate the stage.\nThe <var>i</var>-th spotlight casts a light in the range of a circle with radius <var>r_{i}</var>.\nThe center of the light cast by the <var>i</var>-th spotlight moves along an orbital path <var>R_{i}</var>.\n<var>R_{i}</var> is described as a closed polygon, though <var>R_{i}</var> might contain self-intersections.\nThe spotlight begins to move from the first vertex of <var>R_{i}</var>.\nAll of the orbital period of each spotlight are the same.\nEach spotlight moves at a constant speed, and all of them return to the starting point at the same time.\n</p>\n\n<p>\nIn the rehearsal, Ciel has to move from the starting point to the ending point indicated on the live stage.\nTo achieve her goal, it is not allowed to fall out from the area illuminated with the spotlight.\nBut, she doesn't have to be illuminated with the spotlight as long as she is standing on the starting point.\nYou may assume that she can move fast enough.\nAnswer if it is possible for her to move to the ending point.\n</p>\n\n<h3>Input</h3>\n\n<p>Each input dataset is given in the following format:\n</p><pre>\n<var>N</var> <var>sx</var> <var>sy</var> <var>ex</var> <var>ey</var>\n<var>r_{1}</var> <var>K_{1}</var> <var>x_{11}</var> <var>y_{11}</var> <var>x_{12}</var> <var>y_{12}</var> ... <var>x_{1K_{1}}</var> <var>y_{1K_{1}}</var>\n<var>r_{2}</var> <var>K_{2}</var> <var>x_{21}</var> <var>y_{21}</var> <var>x_{22}</var> <var>y_{22}</var> ... <var>x_{2K_{2}}</var> <var>y_{2K_{2}}</var>\n:\n:\n<var>r_{N}</var> <var>K_{N}</var> <var>x_{N1}</var> <var>y_{N1}</var> <var>x_{N2}</var> <var>y_{N2}</var> ... <var>x_{NK_{N}}</var> <var>y_{NK_{N}}</var>\n</pre>\n<p>All inputs are integer. All coordinate information satisfies <var>-10,000 \\leq x</var>, <var>y \\leq 10,000</var>.\n<var>N</var> (<var>1 \\leq N \\leq 100</var>) indicates the number of spotlights. <var>(sx, sy)</var> and <var>(ex, ey)</var> indicate the starting point and the ending point of Ciel's path, respectively.\nThe following <var>N</var> lines denote the information of each spotlight.\n<var>r_{i}</var> (<var>1 \\leq r_{i} \\leq 100</var>) indicates the radius of the spotlight.\n<var>K_{i}</var> (<var>2 \\leq K_{i} \\leq 10</var>) indicates the number of vertices in the orbital path.\nThen, <var>K_{i}</var> vertices are given. Two consecutive vertices on the same orbital path are located at different places.\nThe spotlight moves from the first point <var>(x_{i1}, y_{i1})</var> to the second point <var>(x_{i2}, y_{i2})</var>, then moves to the third point <var>(x_{i3}, y_{i3})</var>, and so on.\nAfter moving to the <var>K_{i}</var>-th point <var>(x_{iK_{i}}, y_{iK_{i}})</var>, the spotlight returns to the first point <var>(x_{i1}, y_{i1})</var> and repeats again its movement.\n</p>\n<p>Let <var>d_{ij}</var> be the closest distance between two central points of spotlight <var>i</var> and spotlight <var>j</var>. <var>d_{ij}</var> satisfies either of the following:\n</p>\n\n<ul><li> <var>d_{ij} > r_{i} + r_{j} + 0.000001</var>\n</li><li> <var>d_{ij} < r_{i} + r_{j} - 0.000001</var>\n</li></ul>\n\n<p>Furthermore, let <var>d_{i}</var> be the closest distance between a central point of spotlight <var>i</var> and either the starting point or the ending point. <var>d_{i}</var> satisfies either of the following:\n</p>\n\n<ul><li> <var>d_{i} > r_{i} + 0.000001</var>\n</li><li> <var>d_{i} < r_{i} - 0.000001</var>\n</li></ul>\n\n<h3>Output</h3>\n<p>If it is possible for Ciel to move the ending point without falling out from the illuminated area,\noutput <code>Yes</code>  in one line.\nOtherwise, output <code>No</code>.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>2 1 1 9 -1\n2 2 1 1 -9 1\n1 2 -1 -1 9 -1\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>Yes\n</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>2 1 1 9 -1\n2 2 1 1 -9 1\n1 2 9 -1 -1 -1\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>No\n</pre>\n\n\n<h3>Sample Input 3</h3>\n\n<pre>2 11 6 -9 1\n6 4 10 5 10 0 5 0 5 5\n5 4 -10 0 -10 5 -5 5 -5 0\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>Yes\n</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>1 1 9999 -1 0\n100 2 0 0 0 10000\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n<pre>Yes\n</pre>", "p01736": "\n<p>\nYou and your grandma are playing with graph automata, which is generalization of cell automata.\n</p>\n\n<p>\nA graph automaton is expressed by a graph. The vertices of the graph have a time-dependent value, which can be either 0 or 1.\nThere is no more than one edge between any of two vertices, but self-loops might exist.\n</p>\n\n<p>\nThe values of vertices change regularly according to the following rule:\nAt time <var>t+1</var>, the value of vertex <var>i</var> will be 1 if and only if there are an odd number of edges from the vertex <var>i</var> to a vertex which has the value 1 at time <var>t</var>; otherwise 0.\n</p>\n\n<p>Now, your forgetful grandma forgot the past states of the automaton. Your task is to write a program which recovers the past states from the current time and states --- time machines are way too expensive.\nThere may be multiple candidates or no consistent states.\nFor such cases, you must print an appropriate error message.\n</p>\n\n<h3>Input</h3>\n\n<p>The input is formatted as follows:\n</p>\n<pre>\n<var>N</var>\n<var>a_{11}</var> ... <var>a_{1N}</var>\n:\n:\n<var>a_{N1}</var> ... <var>a_{NN}</var>\n<var>v_1</var>\n:\n:\n<var>v_N</var>\n<var>T</var>\n</pre>\n\n<p>The first line contains one integer <var>N</var> (<var>2 \\leq N \\leq 300</var>).\n<var>N</var> indicates the number of vertices.\nThe following <var>N</var> lines indicate the adjacent matrix of the graph.\nWhen <var>(i,j)</var>-element is 1, there is an edge from vertex <var>i</var> to vertex <var>j</var>.\nOtherwise, there is no edge.\nThe following <var>N</var> lines indicate the value vector of the vertices.\nThe <var>i</var>-th element indicates the value of vertex <var>i</var> at time 0.\nEach element of the matrix and the vector can be 0 or 1.\nThe last line contains one integer <var>T</var> (<var>1 \\leq T \\leq 100,000,000</var>).\n<var>-T</var> is the time your grandma wants to know the status at.\n</p>\n\n\n<h3>Output</h3>\n\n<p>Print the value vector at time <var>-T</var> separated one white space in one line as follows:\n</p><pre>\n<var>v_1</var> ... <var>v_N</var></pre>\n<p>Each value must be separated with one white space.\nIf there is no consistent value vectors, you should print <code>none</code> in one line.\nOr if there are multiple candidates and the solution is not unique  (i.e. the solution is not unique), you should print <code>ambiguous</code> in one line.\n</p>\n\n\n\n<h3>Sample Input 1</h3>\n\n<pre>2\n1 1\n0 1\n1\n1\n1\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>0 1\n</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>2\n0 1\n0 0\n1\n0\n1\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>ambiguous\n</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>2\n0 1\n0 0\n1\n0\n2\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>none\n</pre>", "p01739": "<p>\nYou are a programmer who loves pretty girl games (a sub-genre of dating simulation games). A game, which is titled \"Floatable Heart\" and was released last Friday, has arrived at your home just now. This game has multiple stories. When you complete all of those stories, you can get a special figure of the main heroine, Megumi. So, you want to hurry to play the game! But, let's calm down a bit and think how to complete all of the stories in the shortest time first.\n</p>\n\n<p>\nIn fact, you have the special skill that allows you to know the structure of branching points of games. By using the skill, you have found out that there are <var>n</var> branching points in this game and <var>i</var>-th branching point has <var>k_{i}</var> choices. This game is so complicated that multiple routes get to <var>i</var>-th branching point probably. You also noticed that it takes <var>c_{ij}</var> minutes to proceed from <var>i</var>-th branching point to another branching point (or an ending), if you select <var>j</var>-th choice of <var>i</var>-th branching point. Of course you need to select all the choices on all the branching points and read stories between a branching point and another branching point (or an ending) to complete all of those stories. In addition, you can assume it only takes negligible time to return to the beginning of the game (\"reset\") and to play from the beginning to the first branching point.\n</p>\n\n<p>\nThe game's manual says that this game has an additional feature called \"Quick Save\", and the feature allows you to record the point where you are currently playing and return there at any time later. However, this feature is not working for some bug. Thus you have to restart from the first branching point every time, if you reach an ending or quit the game on the way. Any patch to fix this bug has not been yet published. This is an imposed tribulation for the fastest players.\n</p>\n\n<p>Well, let's estimate how long it will take for completing all of the stories in the shortest time.\n</p>\n\n<h3>Input</h3>\n<p>A data set is given in the following format.\n</p><pre>\n<var>n</var>\n<var>k_{1}</var> <var>t_{11}</var> <var>c_{12}</var> ... <var>t_{1k_{1}}</var> <var>c_{1k_{1}}</var>\n:\n:\n<var>k_{n}</var> <var>t_{n1}</var> <var>c_{n2}</var> ... <var>t_{nk_{n}}</var> <var>c_{nk_{n}}</var>\n</pre>\n<p>The first line of the data set contains one integer <var>n</var> (<var>2 \\leq n \\leq 1{,}000</var>), which denotes the number of the branching points in this game. The following <var>n</var> lines describe the branching points. The <var>i</var>-th line describes the branching point of ID number <var>i</var>. The first integer <var>k_{i}</var> (<var>0 \\leq k_{i} \\leq 50</var>) is the number of choices at the <var>i</var>-th branching point. <var>k_{i} &ge; 0</var> means that the <var>i</var>-th branching point is an ending. Next <var>2k_{i}</var> integers <var>t_{ij}</var> (<var>1 \\leq t_{ij} \\leq n</var>) and <var>c_{ij}</var> (<var>0 \\leq c_{ij} \\leq 300</var>) are the information of choices. <var>t_{ij}</var> denotes the ID numbers of the next branching points when you select the <var>j</var>-th choice. <var>c_{ij}</var> denotes the time to read the story between the <var>i</var>-th branching point and the <var>t_{ij}</var>-th branching point. The branching point with ID 1 is the first branching point. You may assume all the branching point and endings are reachable from the first branching point. You may also assume that there is no loop in the game, that is, no branching point can be reached more than once without a reset.\n</p>\n\n\n<h3>Output</h3>\n<p>Print the shortest time in a line.\n</p>\n\n<h3>Sample Input 1</h3>\n\n\n<pre>2\n1 2 2\n0\n</pre>\n\n\n<h3>Output for the Sample Input 1</h3>\n\n\n<pre>2\n</pre>\n\n<h3>Sample Input 2</h3>\n\n\n<pre>6\n2 2 1 3 2\n2 4 3 5 4\n2 5 5 6 6\n0\n0\n0\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n\n<pre>24\n</pre>\n\n<h3>Sample Input 3</h3>\n\n\n<pre>6\n3 2 100 3 10 3 10\n1 4 100\n1 4 10\n3 5 1 5 1 6 1\n0\n0\n</pre>\n\n\n<h3>Output for the Sample Input 3</h3>\n\n\n<pre>243\n</pre>\n\n", "p01780": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>A - Breadth-First Search by Foxpower</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nFox Ciel went to JAG Kingdom by bicycle, but she forgot a place where she parked her bicycle. So she needs to search it from a bicycle-parking area before returning home.\n</p>\n\n<p>\nThe parking area is formed as a unweighted rooted tree $T$ with $n$ vertices, numbered $1$ through $n$. Each vertex has a space for parking one or more bicycles. Ciel thought that she parked her bicycle near the vertex $1$, so she decided to search it from there by the breadth-first search. That is, she searches it at the vertices in the increasing order of their distances from the vertex $1$. If multiple vertices have the same distance, she gives priority to the vertices in the order of searching at their parents. If multiple vertices have the same parent, she searches at the vertex with minimum number at first.\n</p>\n\n<p>\nUnlike a computer, she can't go to a next vertex by random access. Thus, if she goes to the vertex $j$ after the vertex $i$, she needs to walk the distance between the vertices $i$ and $j$. BFS by fox power perhaps takes a long time, so she asks you to calculate the total moving distance in the worst case starting from the vertex $1$.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input is formatted as follows.\n</p>\n\n<blockquote>$n$<br>$p_2$ $p_3$ $p_4$ $\\cdots$ $p_n$</blockquote>\n\n<p>\nThe first line contains an integer $n$ ($1 \\le n \\le 10^5$), which is the number of vertices on the unweighted rooted tree $T$.\nThe second line contains $n-1$ integers $p_i$ ($1 \\le p_i < i$), which are the parent of the vertex $i$.\nThe vertex $1$ is a root node, so $p_1$ does not exist.\n</p>\n\n\n<h3>Output</h3>\n<p>\nPrint the total moving distance in the worst case in one line.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>4\n1 1 2</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>6</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>4\n1 1 3</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>4</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>11\n1 1 3 3 2 4 1 3 2 9</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>25</pre>", "p01782": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>C - Decoding Ancient Messages</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nProfessor Y's work is to dig up ancient artifacts. Recently, he found a lot of strange stone plates, each of which has $N^2$ characters arranged in an $N \\times N$ matrix. Further research revealed that each plate represents a message of length $N$. Also, the procedure to decode the message from a plate was turned out to be the following:\n</p>\n\n<ol>\n<li>Select $N$ characters from the plate one by one so that any two characters are neither in the same row nor in the same column.</li>\n<li>Create a string by concatenating the selected characters.</li>\n<li>Among all possible strings obtained by the above steps, find the lexicographically smallest one. It is the message represented by this plate.</li>\n</ol>\n\n<p>\nNOTE: The order of the characters is defined as the same as the order of their ASCII values (that is, $\\mathtt{A} \\lt \\mathtt{B} \\lt \\cdots \\lt \\mathtt{Z} \\lt \\mathtt{a} \\lt \\mathtt{b} \\lt \\cdots \\lt \\mathtt{z}$).\n</p>\n\n<p>\nAfter struggling with the plates, Professor Y gave up decoding messages by hand. You, a great programmer and Y's old friend, was asked for a help. Your task is to write a program to decode the messages hidden in the plates.\n</p>\n\n<h3>Input</h3>\n\n<p>The input is formated as follows:\n</p>\n<blockquote>$N$<br>$c_{11} c_{12} \\cdots c_{1N}$<br>$c_{21} c_{22} \\cdots c_{2N}$<br>:<br>:<br>$c_{N1} c_{N2} \\cdots c_{NN}$</blockquote>\n\n<p>\nThe first line contains an integer $N$ ($1 \\le N \\le 50$). Each of the subsequent $N$ lines contains a string of $N$ characters. Each character in the string is an uppercase or lowercase English letter (<code>A</code>-<code>Z</code>, <code>a</code>-<code>z</code>).\n</p>\n\n<h3>Output</h3>\n\n<p>Print the message represented by the plate in a line.</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>3\naab\nczc\nbaa</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>aac</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>36\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiQiiiiiiiiiiiiiiiQiiiiiiiii\niiiiiiiiiiQQQiiiiiiiiiiQQQQiiiiiiiii\niiiiiiiiiiQQQQQiiiiiiiQQQQiiiiiiiiii\niiiiiiiiiiiQQQQQQQQQQQQQQQiiiiiiiiii\niiiiiiiiiiiQQQQQQQQQQQQQQQiiiiiiiiii\niiiiiiiiiiiQQQQQQQQQQQQQQiiiiiiiiiii\niiiiiiiiiiiiQQQQQQQQQQQQQiiiiiiiiiii\niiiiiiiiiiiQQQQQQQQQQQQQQQiiiiiiiiii\niiiiiiiiiiQQQQQQQQQQQQQQQQQiiiiiiiii\niiiiiiQiiiQQQQQQQQQQQQQQQQQiiiQiiiii\niiiiiiQQiQQQQQQQQQQQQQQQQQQiiQQiiiii\niiiiiiiQQQQQQQQQQQQQQQQQQQQiQQiiiiii\niiiiiiiiiQQQQQQQQQQQQQQQQQQQQiiiiiii\niiiiiiiiQQQQQiiQQQQQQQQiiQQQQQiiiiii\niiiiiiQQQQQQiiiiQQQQQiiiiQQQQQQiiiii\niiiiiQQQQQQQQiiiQQQQQiiQQQQQQQQiQiii\niiiQQQQQQQiiQiiiQQQQQiiQiiQQQQQQQQii\niQQQQQQQQQiiiiiQQQQQQQiiiiiiQQQQQQQi\niiQQQQQQQiiiiiiQQQQQQQiiiiiiiiQQQiii\niQQQQiiiiiiiiiQQQQQQQQQiiiiiiiiQQQii\niiiiiiiiiiiiiiQQQQQQQQQiiiiiiiiiiiii\niiiiiiiiiiiiiQQQQQQQQQQiiiiiiiiiiiii\niiiiiiiiiiiiiQQQQQQQQQQiiiiiiiiiiiii\niiiiiiiiiiiiiiQQQQQQQQiiiiiiiiiiiiii\niiiiiiiiiiiiiiQQQQQQQQiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>QQQQQQQQQQQQQQQQQQQQQQQQQiiiiiiiiiii</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>3\nAcm\naCm\nacM</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>ACM</pre>", "p01781": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>B - Cube Coloring</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nGreat painter Cubic is famous for using cubes for his art. Now, he is engaged in a new work of art. He tries to form an $X \\times Y \\times Z$ rectangular parallelepiped by arranging and piling up many $1 \\times 1 \\times 1$ cubes such that the adjacent surfaces of cubes are fully shared.\n</p>\n\n<p>\nOf course, he won't finish his work only arranging and piling up cubes. The position of each cube is denoted by $(0,0,0)$ through $(X-1,Y-1,Z-1)$ as by the ordinary coordinate system, and Cubic calls the cube $(A,B,C)$ the <i>origin cube</i>. Then, he paints a pattern on the rectangular parallelepiped with different colors according to the distance between each cube and the origin cube. He paints all cubes regardless of whether or not a cube is visible externally. This is his artistic policy. He uses <i>Manhattan distance</i> as the distance between cubes. The Manhattan distance between two cubes $(x_1,y_1,z_1)$ and $(x_2,y_2,z_2)$ is defined as $|x_1-x_2| + |y_1-y_2| + |z_1-z_2|$.\n</p>\n\n<p>\nOn the current work, Cubic decides to use $N$ colors, which are numbered from $1$ to $N$. He paints a cube with the $(i+1)$-th color if the distance $D$ between the cube and the origin cube satisfies $D \\equiv i \\pmod{N}$. \n</p>\n\n<p>\nCubic wants to estimate the consumption of each color in order to prepare for the current work. He asks a great programmer, you, to write a program calculating the number of cubes that will be painted by each color.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input contains seven integers $X$, $Y$, $Z$, $A$, $B$, $C$, and $N$. All integers are in one line and separated by a single space. Three integers $X$, $Y$, and $Z$ ($1 \\leq X, Y, Z \\leq 10^6$) represent the length of each side of the rectangular parallelepiped that Cubic tries to form. Three integers $A$, $B$, and $C$ ($0 \\leq A \\lt X$, $0 \\leq B \\lt Y$, $0 \\leq C \\lt Z$) represent the position of the origin cube. The number of kinds of colors is denoted by $N$ ($1 \\leq N \\leq 1{,}000$).\n</p>\n\n<h3>Output</h3>\n\n<p>\nThe output contains $N$ integers in one line. The $i$-th integer ($1 \\leq i \\leq N$) represents the number of the cubes that will be painted by the $i$-th color. All integers must be separated by a single space.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>2 2 2 0 0 0 5</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>1 3 3 1 0</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>4 3 3 1 1 1 3</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>13 10 13</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>2000 2000 2000 1000 1000 1000 1</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>8000000000</pre>", "p01783": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>D - LR</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nJAG Kingdom will hold a contest called ICPC (Interesting Contest for Producing Calculation). \n</p>\n\n<p>\nAt the contest, you are given a string composed of <code>?</code>s and <i>usable characters</i>. You should replace all <code>?</code>s in the string with the usable characters to make the string valid mathematical expression, before submitting it. The usable characters are <code>L</code>, <code>R</code>, <code>(</code>, <code>)</code>, <code>,</code>, <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, and <code>9</code>. \n</p>\n\n<p>\nFor example, suppose that you are given the string \"R(??3,??1?78??1?)?\", then you can submit \"R(123,L(1678,213))\" as an example. \n</p>\n\n<p>\nThe submitted string will be scored as follows.\n</p>\n\n<ul>\n<li>Let $L$ and $R$ be functions defined by $L(x,y)=x$, $R(x,y)=y$, where $x$ and $y$ are non-negative integers.\n</li>\n<li>The submitted string will be regarded as a mathematical expression, whose value will be the score. For example, the score of the string \"R(123,L(1678,213))\" is $R(123,L(1678,213)) = R(123,1678) = 1678$.\n</li>\n<li>If the string cannot be evaluated as a mathematical expression about the functions $L$ and $R$, the string will be rejected. For example, \"R\", \"R(3)\", \"R(3,2\", \"R(3,2,4)\" and \"LR(3,2)\" are all invalid. </li>\n<li>And strings that contain numbers with extra leading zeros, will be rejected. For example, \"R(04,18)\" is invalid, while \"R(0,18)\" is valid.</li>\n</ul>\n\n<p>\nThe winner of the contest will be the person getting the highest score. Your friend Jagger, who is going to join the contest, wants to be the winner. You are asked by Jagger to make the program finding the possible highest score for the input string.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input contains one string in a line, whose length $N$ is between $1$ and $50$, inclusive. \n</p>\n\n<p>\nYou can assume that each element in the string is one of  <code>L</code>, <code>R</code>, <code>(</code>, <code>)</code>, <code>,</code>, <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code>, or <code>?</code>. \n</p>\n\n<h3>Output</h3>\n\n<p>\nDisplay the possible highest score in a line for the given string. \n</p>\n\n<p>\nIf it's impossible to get valid strings for the input string, print \"invalid\" in a line. \n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>R?????,2?)</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>29</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>???3??</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>999399</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>????,??,???</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>invalid</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>?????,??,???</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n<pre>99</pre>\n\n<h3>Sample Input 5</h3>\n\n<pre>L(1111111111111111111111111111111111111111111,2)</pre>\n\n<h3>Output for the Sample Input 5</h3>\n\n<pre>1111111111111111111111111111111111111111111</pre>\n\n<h3>Sample Input 6</h3>\n\n<pre>L?1???????????????????????????????????????????????</pre>\n\n<h3>Output for the Sample Input 6</h3>\n\n<pre>199999999999999999999999999999999999999999999</pre>\n\n<h3>Sample Input 7</h3>\n\n<pre>L?0???????????????????????????????????????????????</pre>\n\n<h3>Output for the Sample Input 7</h3>\n\n<pre>0</pre>", "p01784": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>E - Parentheses</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nYou are given $n$ strings $\\mathit{str}_1, \\mathit{str}_2, \\ldots, \\mathit{str}_n$, each consisting of <code>(</code> and <code>)</code>. The objective is to determine whether it is possible to permute the $n$ strings so that the concatenation of the strings represents a <i>valid</i> string.\n</p>\n\n<p>\nValidity of strings are defined as follows:\n</p>\n\n<ul>\n<li> The empty string is valid. </li>\n<li> If $A$ and $B$ are valid, then the concatenation of $A$ and $B$ is valid. </li>\n<li> If $A$ is valid, then the string obtained by putting $A$ in a pair of matching parentheses is valid. </li>\n<li> Any other string is not valid. </li>\n</ul>\n\n<p>\nFor example, \"()()\" and \"(())\" are valid, while \"())\" and \"((()\" are not valid.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe first line of the input contains an integer $n$ ($1 \\leq n \\leq 100$), representing the number of strings. Then $n$ lines follow, each of which contains $\\mathit{str}_i$ ($1 \\leq \\lvert \\mathit{str}_i \\rvert \\leq 100$). All characters in $\\mathit{str}_i$ are <code>(</code> or <code>)</code>.\n</p>\n\n<h3>Output</h3>\n\n<p>\nOutput a line with \"Yes\" (without quotes) if you can make a valid string, or \"No\" otherwise. \n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>3\n()(()((\n))()()(()\n)())(())</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>Yes</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>2\n))()((\n))((())(</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>No</pre>", "p01787": "<h2>H - RLE Replacement</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nIn JAG Kingdom, ICPC (Intentionally Compressible Programming Code) is one of the common programming languages. Programs in this language only contain uppercase English letters and the same letters often appear repeatedly in ICPC programs. Thus, programmers in JAG Kingdom prefer to compress ICPC programs by <i>Run Length Encoding</i> in order to manage very large-scale ICPC programs.\n</p>\n\n<p>\nRun Length Encoding (RLE) is a string compression method such that each maximal sequence of the same letters is encoded by a pair of the letter and the length. For example, the string \"RRRRLEEE\" is represented as \"R4L1E3\" in RLE.\n</p>\n\n<p>\nNow, you manage many ICPC programs encoded by RLE. You are developing an editor for ICPC programs encoded by RLE, and now you would like to implement a replacement function. Given three strings $A$, $B$, and $C$ that are encoded by RLE, your task is to implement a function replacing the first occurrence of the substring $B$ in $A$ with $C$, and outputting the edited string encoded by RLE. If $B$ does not occur in $A$, you must output $A$ encoded by RLE without changes.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of three lines.\n</p>\n\n<blockquote> $A$<br> $B$<br> $C$</blockquote>\n\n<p>\nThe lines represent strings $A$, $B$, and $C$ that are encoded by RLE, respectively. Each of the lines has the following format:\n</p>\n\n<blockquote> $c_1$ $l_1$ $c_2$ $l_2$ $\\ldots$ $c_n$ $l_n$ \\$</blockquote>\n\n<p>\nEach $c_i$ ($1 \\leq i \\leq n$) is an uppercase English letter (<code>A</code>-<code>Z</code>) and $l_i$ ($1 \\leq i \\leq n$, $1 \\leq l_i \\leq 10^8$) is an integer which represents the length of the repetition of $c_i$. The number $n$ of the pairs of a letter and an integer satisfies $1 \\leq n \\leq 10^3$. A terminal symbol <code>$</code> indicates the end of a string encoded by RLE. The letters and the integers are separated by a single space. It is guaranteed that $c_i \\neq c_{i+1}$ holds for any $1 \\leq i \\leq n-1$.\n</p>\n\n<h3>Output</h3>\n\n<p>\nReplace the first occurrence of the substring $B$ in $A$ with $C$ if $B$ occurs in $A$, and output the string encoded by RLE. The output must have the following format:\n</p>\n\n<blockquote> $c_1$ $l_1$ $c_2$ $l_2$ $\\ldots$ $c_m$ $l_m$ \\$</blockquote>\n\n<p>\nHere, $c_i \\neq c_{i+1}$ for $1 \\leq i \\leq m-1$ and $l_i \\gt 0$ for $1 \\leq i \\leq m$ must hold.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>R 100 L 20 E 10 \\$\nR 5 L 10 \\$\nX 20 \\$</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>R 95 X 20 L 10 E 10 \\$</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>A 3 B 3 A 3 \\$\nA 1 B 3 A 1 \\$\nA 2 \\$</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>A 6 \\$</pre>\n", "p01788": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>I - Tokyo Olympics Center</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nYou are participating in the Summer Training Camp for Programming Cotests. The camp is held in an accommodation facility called <i>Tokyo Olympics Center</i>. Today is the last day of the camp. Unfortunately, you are ordered to check if all the participants have properly cleaned their rooms.\n</p>\n\n<p>\nThe accommodation facility is a rectangular field whose height is $H$ and width is $W$. The field is divided into square cells. The rows are numbered $1$ through $H$ from top to bottom and the columns are numbered $1$ through $W$ from left to right. The cell in row $i$, column $j$ is denoted by $(i, j)$. Two cells are adjacent if they share an edge.\n</p>\n\n<p>\nEach cell is called either a <i>wall cell</i> or a <i>floor cell</i>. A wall cell represents a wall which no one can enter. \nA floor cell is a part of the inside of the accommodation facility. Everybody can move between two adjacent floor cells. The floor cells are divided into several units. Each unit is assigned an uppercase English letter (<code>A</code>, <code>B</code>, <code>C</code>, ...). A floor cell adjacent to exactly one floor cell is called a <i>room</i>. Otherwise the floor cell is called an <i>aisle</i>. For example, the accommodation facility can be shown as the following figure. We denote a wall cell by <code>.</code> (single period).\n</p>\n\n<pre>...................\n.....AAABBBBBBB....\n...A.AA.A...B.B..B.\n..AAAAAAAABBBBBBBB.\n...A..A.A.....B....\n......A.......BBBB.\n....A.AA..C.C...B..\n...AAAAACCCCCCBBBB.\n...A..A...C.C...B..\n...................</pre>\n\n<p>\nIn the above figure, there are $7$ rooms in unit A, $4$ rooms in unit B, and $4$ rooms in unit C.\n</p>\n\n<p>\nBecause the accommodation facility is too large to explore alone, you asked the other participants of the camp to check the rooms. For simplicity's sake, we call them <i>staffs</i>. Now, there are $K$ staffs at the cell $(s, t)$. You decided to check the rooms according to the following procedure.\n</p>\n\n<ol>\n<li> First, you assign each staff to some of units. Every unit must be assigned to exactly one staff. Note that it is allowed to assign all the units to one staff or to assign no units to some staffs.</li>\n<li> Then, each staff starts to check the rooms in the assigned units at the same time. The staffs can move between two adjacent floor cells in $T_{\\mathit{move}}$ time. To check the room at $(i, j)$, the staffs must move to the cell $(i, j)$ and spend $T_{\\mathit{check}}$ time there. Each staff first determines the order of the units to check and he or she must check the rooms according to the order. For example, suppose that there is a staff who is assigned units A, C, and E. He may decide that the order is E-&gt;A-&gt;C. After that, he must check all the rooms in unit E at first. Then, he must check all the rooms in unit A, and so on. The staffs can pass any floor cells. However, the staffs cannot check rooms that are not assigned to them. Further, the staffs cannot check rooms against the order of units that they have decided. </li>\n<li> After checking all the assigned rooms, the staffs must return to the cell $(s, t)$. </li>\n<li> When every staff returns to the cell $(s, t)$, the task is done. </li>\n</ol>\n\n<p>\nBecause you do not have enough time before the next contest, you want to minimize the total time to check all the rooms.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe first line of the input contains three integers $H$, $W$, and $K$ ($1 \\le H \\le 50$, $1 \\le W \\le 50$, $1 \\le K \\le 12$). The second line contains four integers $s$, $t$, $T_{\\mathit{move}}$, and $T_{\\mathit{check}}$ ($1 \\le s \\le H$, $1 \\le t \\le W$, $1 \\le T_{\\mathit{move}},T_{\\mathit{check}} \\le 10{,}000$). Each of the following $H$ lines contains exactly $W$ characters. Each character represents a cell in the accommodation facility. The $j$-th character in the $i$-th line of these lines is <code>.</code> if the cell $(i, j)$ is a wall cell. Otherwise, the character is an uppercase English letter (<code>A</code>-<code>L</code>) representing the unit to which the cell $(i, j)$ belongs.\n</p>\n\n<p>\nYou can assume that the following conditions are satisfied.\n</p>\n\n<ul>\n<li> The number of rooms in each unit is between $1$ and $12$, inclusive. </li>\n<li> The cell $(s, t)$ is guaranteed to be an aisle.</li>\n<li> Floor cells in each unit are connected.</li>\n<li> Floor cells in the field are connected.</li>\n<li> Every unit contains at least two cells.</li>\n</ul>\n\n\n<h3>Output</h3>\n\n<p>\nOutput the minimum required time to check all the rooms in one line.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>3 3 1\n1 1 10 10\nAAA\nA..\nA..</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>100</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>3 3 2\n1 1 10 10\nABB\nA..\nA..</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>50</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>5 10 3\n3 6 1 100\n...G.H.A..\n.AAGAHAABB\nFFAAAAAAA.\n.EEAAADACC\n..E...D...</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>316</pre>\n\n<h3>Sample Input 4</h3>\n\n<pre>10 19 2\n6 15 3 10\n...................\n.....AAABBBBBBB....\n...A.AA.A...B.B..B.\n..AAAAAAAABBBBBBBB.\n...A..A.A.....B....\n......A.......BBBB.\n....A.AA..C.C...B..\n...AAAAACCCCCCBBBB.\n...A..A...C.C...B..\n...................</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n<pre>232</pre>\n\n<h3>Sample Input 5</h3>\n\n<pre>27 36 6\n24 19 616 1933\n....................................\n..........B...............B.........\n..........BBB..........BBBB.........\n..........BBBBB.......BBBB..........\n...........BBBBBBBBBBBBBBB..........\n...........BBBBBBBBBBBBBBB..........\n...........BBBBBBBBBBBBBB...........\n............BBBBBBBBBBBBB...........\n...........BBBBBBBBBBBBBBB..........\n..........BBBBBBBBBBBBBBBBB.........\n......B...BBBBBBBBBBBBBBBBB...B.....\n......BB.BBBBBBBBBBBBBBBBBB..BB.....\n.......BBBBBBBBBBBBBBBBBBBB.BB......\n.........BBBBBBBBBBBBBBBBBBBB.......\n........BBBBB..BBBBBBBB..BBBBB......\n......BBBBBB....BBBBB....BBBBBB.....\n.....BBBBBBBB...BBBBB..BBBBBBBB.B...\n...BBBBBBB..B...BBBBB..B..BBBBBBBB..\n.BBBBBBBBB.....BBBBBBB......BBBBBBB.\n..BBBBBBB......BBBBBBB........BBB...\n.BBBB.........BBBBBBBBB........BBB..\n..............BBBBBBBBB.............\n.............BBBBBBBBBB.............\n.............BBBBBBBBBB.............\n..............BBBBBBBB..............\n..............BBBBBBBB..............\n....................................</pre>\n\n<h3>Output for the Sample Input 5</h3>\n\n<pre>137071</pre>", "p01790": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem A\nBalanced Paths</h2>\n\n<p>\nYou are given an undirected tree with $n$ nodes. The nodes are numbered 1 through $n$. Each node is labeled with either '(' or ')'. Let $l[u \\rightarrow v]$ denote the string obtained by concatenating the labels of the nodes on the simple path from $u$ to $v$. (Note that the simple path between two nodes is uniquely determined on a tree.) A <i>balanced</i> string is defined as follows:\n</p>\n\n<ul>\n<li> The empty string is balanced.</li>\n<li> For any balanced string $s$, the string \"(\" $s$ \")\" is balanced.</li>\n<li> For any balanced strings $s$ and $t$, the string $st$ (the concatenation of $s$ and $t$) is balanced.</li>\n<li> Any other string is NOT balanced.</li>\n</ul>\n\n<p>\nCalculate the number of the ordered pairs of the nodes ($u$, $v$) such that $l[u \\rightarrow v]$ is balanced.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The input starts with an integer $n (2 \\leq n \\leq 10^5)$, which is the number of nodes of the tree. The next line contains a string of length $n$, each character of which is either '(' or ')'. The $x$-th character of the string represents the label of the node $x$ of the tree. Each of the following $n - 1$ lines contains two integers $a_i$ and $b_i$ $(1 \\leq a_i, b_i \\leq n)$, which represents that the node $a_i$ and the node $b_i$ are connected by an edge. The given graph is guaranteed to be a tree.\n</p>\n\n\n\n<h3>Output</h3>\n\n<p>\nDisplay a line containing the number of the ordered pairs ($u$, $v$) such that $l[u \\rightarrow v]$ is balanced.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>2\n()\n1 2</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>1</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>4\n(())\n1 2\n2 3\n3 4</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>2</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>5\n()())\n1 2\n2 3\n2 4\n1 5</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>4</pre>\n", "p01789": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>J - Unfair Game</h2>\n\n<h3>Problem Statement</h3>\n\n<p>\nRabbit Hanako and Fox Jiro are great friends going to JAG primary school. Today they decided to play the following game during the lunch break. \n</p>\n\n<p>\nThis game is played by two players with $N$ heaps of some number of stones. The players alternatively take their turn to play the game. Jiro is a kind gentleman, so he yielded the first turn to Hanako. In each turn, the player must take some stones, satisfying the following conditions:\n</p>\n\n<ul>\n<li>If the player is Hanako, she must take between $1$ to $A$ stones, inclusive, from a heap.</li>\n<li>If the player is Jiro, he must take between $1$ to $B$ stones, inclusive, from a heap.</li>\n</ul>\n\n<p>\nThe winner is the player who takes the last stone. Jiro thinks it is rude to go easy on her because he is a perfect gentleman. Therefore, he does him best. Of course, Hanako also does so.\n</p>\n\n<p>\nJiro is worried that he may lose the game. Being a cadet teacher working at JAG primary school as well as a professional competitive programmer, you should help him by programming. Your task is to write a program calculating the winner, assuming that they both play optimally.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe first line contains three integers $N$, $A$, and $B$. $N$ ($1 \\leq N \\leq 10^5$) is the number of heaps. $A$ and $B$ ($1 \\leq A, B \\leq 10^9$) are the maximum numbers of stones that Hanako and Jiro can take in a turn, respectively. Then $N$ lines follow, each of which contains a single integer $S_i$ ($1 \\leq S_i \\leq 10^9$), representing the number of stones in the $i$-th heap at the beginning of the game.\n</p>\n\n<h3>Output</h3>\n\n<p>Output a line with &quot;Hanako&quot; if Hanako wins the game or &quot;Jiro&quot; in the other case. </p>\n\n<h3>Sample Input 1</h3>\n\n<pre>3 5 4\n3\n6\n12</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>Hanako</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>4 7 8\n8\n3\n14\n5</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>Jiro</pre>", "p01791": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem B\nCard Game Strategy</h2>\n\n<p>\nAlice and Bob are going to play a card game. There are $n$ cards, each having an integer written on it. The game proceeds as follows:\n</p>\n\n<ol>\n<li> Alice chooses an integer between $a$ and $b$, inclusive. Call this integer $t$. Alice then tells Bob the value of $t$.</li>\n<li> Bob chooses $k$ out of the $n$ cards. Compute the sum of the integers written on the $k$ cards Bob chooses. Call this sum $u$.\n</li>\n</ol>\n\n<p>\nAlice's objective is to make $|t - u|$ as large as possible and Bob's is to make $|t - u|$ as small as possible.\n</p>\n\n\n<p>\nPrior to the game, both Alice and Bob know the values of $n$, $k$, $a$, and $b$, and also the integers on the cards. Both Alice and Bob will play optimally. In particular, Alice will make a choice, knowing that Bob will surely minimize $|t - u|$ for told $t$. Additionally, assume that Alice prefers to choose smaller $t$ if she has multiple equally good choices.\n</p>\n\n<p>\nYour task is to determine the outcome of the game: the value of $t$ Alice will choose and the $k$ cards Bob will choose for that $t$.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of two lines representing a single test case. The first line contains four integers $n$, $k$, $a$, and $b$ $(1 \\leq k \\leq n \\leq 600, 0 \\leq a \\leq b \\leq 180,000)$. The second line contains $n$ integers $x_1, ...,  x_n$ $(0 \\leq x_i \\leq 300)$, denoting that $x_i$ is written on the $i$-th card.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nDisplay two lines: The first line should contain an integer representing the value of $t$ Alice will choose. The second line should contain k distinct integers between 1 and $n$, inclusive, representing the indices of the cards Bob will choose. If Bob has multiple equally good choices, display any one of them.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>4 2 58 100\n10 10 50 80</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>75\n2 3</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>8 3 1300 1800\n2 0 1 5 0 4 1 9</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>1800\n4 6 8</pre>", "p01792": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem C\nCasino</h2>\n\n<p>\nTaro, who owes a debt of $n$ dollars, decides to make money in a casino, where he can double his wager with probability $p$ percent in a single play of a game. Taro is going to play the game repetitively. He can choose the amount of the bet in each play, as long as it is a positive integer in dollars and at most the money in his hand.\n</p>\n\n<p>\nTaro possesses $m$ dollars now. Find out the maximum probability and the optimum first bet that he can repay all his debt, that is, to make his possession greater than or equal to his debt.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case, which consists of three integers $p$, $m$, and $n$ separated by single\nspaces $(0 \\leq p \\leq 100, 0 < m < n \\leq 10^9)$.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nDisplay three lines: The first line should contain the maximum probability that Taro can repay all his debt. This value must have an absolute error at most $10^{-6}$. The second line should contain an integer representing how many optimum first bets are there. Here, a first bet is optimum if the bet is necessary to achieve the maximum probability. If the number of the optimum first bets does not exceed 200, the third line should contain all of them in ascending order and separated by single spaces. Otherwise the third line should contain the 100 smallest bets and the 100 largest bets in ascending order and separated by single spaces.\n</p>\n\n\n\n<h3>Sample Input 1</h3>\n\n<pre>60 2 3</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>0.789473\n1\n1</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>25 3 8</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>0.109375\n2\n1 3</pre>", "p01793": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem D\nContent Delivery</h2>\n\n<p>\nYou are given a computer network with n nodes. This network forms an undirected tree graph. The $i$-th edge connects the $a_i$-th node with the $b_i$-th node and its distance is $c_i$. Every node has different data and the size of the data on the $i$-th node is $s_i$. The network users can deliver any data from any node to any node. Delivery cost is defined as the product of the data size the user deliver and the distance from the source to the destination. Data goes through the shortest path in the delivery. Every node makes cache to reduce the load of this network. In every delivery, delivered data is cached to all nodes which relay the data including the destination node. From the next time of delivery, the data can be delivered from any node with a cache of the data. Thus, delivery cost reduces to the product of the original data size and the distance between the nearest node with a cache and the destination.\n</p>\n\n<p>\nCalculate the maximum cost of the $m$ subsequent deliveries on the given network. All the nodes have no cached data at the beginning. Users can choose the source and destination of each delivery arbitrarily.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The first line contains two integers $n$ $(2 \\leq n \\leq 2,000)$ and $m$ $(1 \\leq m \\leq 10^9)$. $n$ and $m$ denote the number of the nodes in the network and the number of the deliveries, respectively. The following $n - 1$ lines describe the network structure. The $i$-th line of them contains three integers $a_i$, $b_i$ $(1 \\leq a_i, b_i \\leq n)$ and $c_i$ $(1 \\leq c_i \\leq 10,000)$ in this order, which means the $a_i$-th node and the $b_i$-th node are connected by an edge with the distance $c_i$. The next line contains $n$ integers. The $j$-th integer denotes $s_j$ $(1 \\leq s_j \\leq 10,000)$, which means the data size of the $j$-th node. The given network is guaranteed to be a tree graph.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nDisplay a line containing the maximum cost of the $m$ subsequent deliveries in the given network.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>3 2\n1 2 1\n2 3 2\n1 10 100</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>320</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>2 100\n1 2 1\n1 1</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>2</pre>\n", "p01795": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem F\nICPC Teams</h2>\n\n<p>\nYou are a coach of the International Collegiate Programming Contest (ICPC) club in your university. There are 3N students in the ICPC club and you want to make $N$ teams for the next ICPC. All teams in ICPC consist of 3 members. Every student belongs to exactly one team.\n</p>\n\n<p>\nWhen you form the teams, you should consider several relationships among the students. Some student has an extremely good relationship with other students. If they belong to a same team, their performance will improve surprisingly. The contrary situation also occurs for a student pair with a bad relationship. In short, students with a good relationship must be in the same team, and students with a bad relationship must be in different teams. Since you are a competent coach, you know all $M$ relationships among the students.\n</p>\n\n<p>\nYour task is to write a program that calculates the number of possible team assignments. Two assignments are considered different if and only if there exists a pair of students such that in one assignment they are in the same team and in the other they are not.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The first line contains two integers $N$ $(1 \\leq N \\leq 10^6)$ and $M$ $(1 \\leq M \\leq 18)$. The $i$-th line of the following $M$ lines contains three integers $A_i$, $B_i$ $(1 \\leq A_i, B_i \\leq 3N, A_i \\ne B_i)$, and $C_i$ $(C_i \\in \\{0, 1\\})$. $A_i$ and $B_i$ denote indices of the students and $C_i$ denotes the relation type. If $C_i$ is 0, the $A_i$-th student and the $B_i$-th student have a good relation. If $C_i$ is 1, they have a bad relation. You can assume that $\\{A_i, B_i\\} \\ne \\{A_j, B_j\\}$ if $i \\ne j$ for all $1 \\leq i, j \\leq M$.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nDisplay a line containing the number of the possible team assignments modulo $10^9 + 9$.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>2 2\n1 2 0\n3 4 1</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>2</pre>\n\n", "p01794": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>Problem E\nCost Performance Flow</h2>\n\n<p>\nYayoi is a professional of money saving. Yayoi does not select items just because they are cheap; her motto is \"cost performance\". This is one of the reasons why she is good at cooking with bean sprouts. Due to her saving skill, Yayoi often receives requests to save various costs. This time, her task is optimization of \"network flow\".\n</p>\n\n<p>\nNetwork flow is a problem on graph theory. Now, we consider a directed graph $G = (V, E)$, where $V = \\{1, 2, ... , |V|\\}$ is a vertex set and $E \\subset V \\times V$ is an edge set. Each edge $e$ in $E$ has a capacity $u(e)$ and a cost $c(e)$. For two vertices $s$ and $t$, a function $f_{s,t} : E \\rightarrow R$, where $R$ is the set of real numbers, is called an $s$-$t$ flow if the following conditions hold:\n</p>\n\n<ul>\n<li> For all $e$ in $E$, $f_{s,t}$ is non-negative and no more than $u(e)$. Namely, $0 \\leq f_{s,t}(e) \\leq u(e)$ holds.</li>\n<li> For all $v$ in $V \\setminus \\{s, t\\}$, the sum of $f_{s,t}$ of out-edges from $v$ equals the sum of $f_{s,t}$ of in-edges to $v$. Namely, $\\sum_{e=(u,v) \\in E} f_{s,t}(e) = \\sum_{e=(v,w) \\in E} f_{s,t}(e)$ holds.\n</li>\n</ul>\n\n<p>\nHere, we define flow $F( f_{s,t})$ and cost $C( f_{s,t})$ of $f_{s,t}$ as $F( f_{s,t}) = \\sum_{e=(s,v)\\in E} f_{s,t}(e) - \\sum_{e=(u,s)\\in E} f_{s,t}(e)$ and $C( f_{s,t}) = \\sum_{e\\in E} f_{s,t}(e)c(e)$, respectively.\n</p>\n\n<p>\nUsually, optimization of network flow is defined as cost minimization under the maximum flow. However, Yayoi's motto is \"cost performance\". She defines a balanced function $B( f_{s,t})$ for $s$-$t$ flow as the sum of the square of the cost $C( f_{s,t})$ and the difference between the maximum flow $M = max_{f : s-t flow} F( f )$ and the flow $F( f_{s,t})$, i.e. $B( f_{s,t}) = C( f_{s,t})^2 + (M - F( f_{s,t}))^2$. Then, Yayoi considers that the best cost performance flow yields the minimum of $B( f_{s,t})$.\n</p>\n\n<p>\nYour task is to write a program for Yayoi calculating $B( f_{s,t}^*)$ for the best cost performance flow $f_{s,t}^*$.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The first line gives two integers separated by a single space: the number of vertices $N$ $(2 \\leq N \\leq 100)$ and the number of edges $M$ $(1 \\leq M \\leq 1,000)$. The second line gives two integers separated by a single space: two vertices $s$ and $t$ $(1 \\leq s, t \\leq N, s \\ne t)$. The $i$-th line of the following $M$ lines describes the $i$-th edges as four integers $a_i$, $b_i$, $u_i$, and $c_i$: the $i$-th edge from $a_i$ $(1 \\leq a_i \\leq N)$ to $b_i$ $(1 \\leq b_i \\leq N)$ has the capacity $u_i$ $(1 \\leq u_i \\leq 100)$ and the cost $c_i$ $(1 \\leq c_i \\leq 100)$ . You can assume that $a_i \\ne b_i$ for all $1 \\leq i \\leq M$, and $a_i \\ne a_j$ or $b_i \\ne b_j$ if $i \\ne j$ for all $1 \\leq i, j \\leq M$.\n</p>\n\n\n\n<h3>Output</h3>\n\n<p>\nDisplay $B( f_{s,t}^*)$, the minimum of balanced function under $s$-$t$ flow, as a fraction in a line. More precisely, output \"$u/d$\", where $u$ is the numerator and $d$ is the denominator of $B( f_{s,t}^*)$, respectively. Note that $u$ and\n$d$ must be non-negative integers and relatively prime, i.e. the greatest common divisor of $u$ and $d$ is 1. You can assume that the answers for all the test cases are rational numbers.\n</p>\n\n\n\n<h3>Sample Input 1</h3>\n\n<pre>2 1\n1 2\n1 2 1 1</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>1/2</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>3 3\n1 2\n1 2 1 1\n1 3 3 1\n3 2 3 2</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>10/1</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>3 3\n1 2\n1 2 1 1\n1 3 7 1\n3 2 7 1</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>45/1</pre>\n", "p01797": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem H\nKimagure Cleaner</h2>\n\n<p>\nIchiro won the newest model cleaner as a prize of a programming contest. This cleaner automatically moves around in a house for cleaning. Because Ichiro's house is very large, it can be modeled as an infinite two-dimensional Cartesian plane, whose axes are called $X$ and $Y$. The positive direction of the $Y$-axis is to the left if you face the positive direction of the $X$-axis.\n</p>\n\n<p>\nThe cleaner performs a sequence of actions for cleaning. Each action consists of a turn and a run. In an action, first the cleaner turns right or left by 90 degrees, and then runs straight by an integer length to the direction that the cleaner faces. At the end of a day, the cleaner reports the log of its actions in the day to Ichiro, in order to inform him where it has cleaned and where it hasn't.\n</p>\n\n<p>\nUnlike common cleaners, this cleaner has human-like artificial intelligence. Therefore, the cleaner is very forgetful (like humans) and it is possible that the cleaner forgets the direction of a turn, or the cleaner only remembers the length of a run as a very rough range. However, in order to pretend to be operating correctly, the cleaner has to recover the complete log of actions after finishing the cleaning.\n</p>\n\n<p>\nThe cleaner was initially at the point $(0, 0)$, facing the positive direction of $X$-axis. You are given the cleaner's location after cleaning, $(X, Y)$, and an incomplete log of the cleaner's actions that the cleaner remembered. Please recover a complete log from the given incomplete log. The actions in the recovered log must satisfy the following constraints:\n</p>\n\n<ul>\n<li> The number of actions must be the same as that in the incomplete log.</li>\n<li> The direction of the $i$-th turn must be the same as that in the incomplete log if it is recorded in the incomplete log.</li>\n<li> The length of the $i$-th run must be within the range of the length specified in the incomplete log.</li>\n<li> The cleaner must be at $(X, Y)$ after finishing all actions. The direction of the cleaner after cleaning is not important and you do not have to care about it, because the cleaner can turn freely after cleaning, though it cannot run after cleaning. You are not required to recover the actual path, because Ichiro only checks the format of the log and the location of the cleaner after cleaning.</li>\n</ul>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The first line contains three integers $N$ $(1 \\leq N \\leq 50)$, $X$, and $Y$ $(-10^9 \\leq X, Y \\leq 10^9)$. $N$ represents the number of actions in the incomplete log. $X$ and $Y$ represent the cleaner's location $(X, Y)$ after cleaning. The $i$-th line of the following $N$ lines contains a character $D_i$ and two integers $LL_i$ and $LU_i$. $D_i$ represents the direction of the $i$-th turn: '<span>L</span>', '<span>R</span>', and '<span>?</span>' represents left, right, and not recorded respectively. $LL_i$ and $LU_i$ represent a lower and upper bound of the length of the $i$-th run, respectively. You can assume $1 \\leq LL_i \\leq LU_i \\leq 55,555,555$.\n</p>\n\n<h3>Output</h3>\n\n<p>\nDisplay the recovered log. In the first line, display N, the number of actions in the log. In the $i$-th line of the following $N$ lines, display the direction of the $i$-th turn in a character and the length of the $i$-th run separated by a single space. Represent a right turn by a single character '<span>R</span>', and a left turn by a single character '<span>L</span>'. The recovered log must satisfy the constraints in the problem. If there are multiple\nlogs that satisfy the constraints, you can display any of them. Display $-1$ in a line if there is no log that satisfies the constraints.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>2 -3 4\nL 2 5\n? 3 5</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>2\nL 4\nL 3</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>5 3 -4\n? 1 5\n? 1 5\n? 1 5\n? 1 5\n? 1 5</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>5\nL 1\nR 2\nR 4\nL 1\nR 1</pre>", "p01796": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem G\nJAG-channel II</h2>\n\n<p>\nJAG (Japan Alumni Group) is a group of $N$ members that devotes themselves to activation of the competitive programming world. The JAG staff members talk every day on the BBS called JAG-channel. There are several threads in JAG-channel and these are kept sorted by the time of their latest posts in descending order.\n</p>\n\n<p>\nOne night, each of the $N$ members, identified by the first $N$ uppercase letters respectively, created a thread in JAG-channel. The next morning, each of the $N$ members posted in exactly $K$ different threads which had been created last night. Since they think speed is important, they viewed the threads from top to bottom and posted in the thread immediately whenever they came across an interesting thread. Each member viewed the threads in a different period of time, that is, there was no post of other members while he/she was submitting his/her $K$ posts.\n</p>\n\n<p>\nYour task is to estimate the order of the members with respect to the periods of time when members posted in the threads. Though you do not know the order of the threads created, you know the order of the posts of each member. Since the threads are always kept sorted, there may be invalid orders of the members such that some members cannot post in the top-to-bottom order of the threads due to the previous posts of other members. Find out the lexicographically smallest valid order of the members.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The first line contains two integers separated by a space: $N$ $(4 \\leq N \\leq 16)$ and $K$ $(N - 3 \\leq K \\leq N - 1)$. Then $N$ lines of strings follow. Each of the $N$ lines consists of exactly $K$ distinct characters. The $j$-th character of the $i$-th line denotes the $j$-th thread in which the\nmember denoted by the $i$-th uppercase letter posted. Each thread is represented by its creator (e.g. '<span>B</span>' represents the thread created by member B, the second member).\n</p>\n\n<p>\nIt is guaranteed that at least one valid order exists.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nDisplay a string that consists of exactly $N$ characters in a line, which denotes the valid order in which the members posted in the threads. The $i$-th character of the output should represent the member who posted in the $i$-th period. In case there are multiple valid orders, output the lexicographically smallest one.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>7 4\nDEFG\nFEDA\nEFGB\nBGEA\nAGFD\nDABC\nCADE</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>ABCDEFG</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>4 3\nCDB\nDAC\nBAD\nABC</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>DCBA</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>16 13\nNDHPFJIBLMCGK\nCMDJKPOLGIHNE\nMOLBIEJFPHADN\nKPNAOHBLMCGEI\nFCMLBHDOANJPK\nNHIGLOAPKJDMC\nKMLBIPHDEOANJ\nIEGCMLBOAPKJD\nJNAOEDHBLMCGF\nOEDHPFIBLMGKC\nGMLBIFPHDNAEO\nENHGOPKJDMCAF\nJKPAOBLGEIHNF\nHPKFGJEIBLCOM\nLBINEJDAGFKPH\nFGMOCADJENIBL</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>PONCAKJGIEDHMFBL</pre>\n", "p01799": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem J\nNew Game AI</h2>\n\n<p>\nAoba is a beginner programmer who works for a game company. She was appointed to develop a battle strategy for the enemy AI (Artificial Intelligence) in a new game. In this game, each character has two parameters, hit point ($hp$) and defence point ($dp$). No two characters have the same $hp$ and $dp$ at the same time. The player forms a party by selecting one or more characters to battle with the enemy. Aoba decided to develop a strategy in which the AI attacks the weakest character in the party: that is, the AI attacks the character with the minimum hit point in the party (or, if there are several such characters, the character with the minimum defense point among them). She wrote a function <i>selectTarget</i>($v$) that takes an array of characters representing a party and returns a character that her AI will attack.\n</p>\n\n<p>\nHowever, the project manager Ms. Yagami was not satisfied with the behavior of her AI. Ms. Yagami said this AI was not interesting.\n</p>\n\n<p>\nAoba struggled a lot, and eventually she found that it is interesting if she substitutes one of the constant zeros in her program with a constant $C$. The rewritten program is as follows. Note that <i>Character</i> is a type representing a character and has fields $hp$ and $dp$ which represent the hit point and the defense point of the character respectively.\n</p>\n\n<pre>\nint C = &lt;constant integer&gt;;\n\nCharacter selectTarget(Character v[]) {\n  int n = length(v);\n  int r = 0;\n  for (int i = 1; i &lt; n; i++) {\n    if (abs(v[r].hp - v[i].hp) > C) {\n      if (v[r].hp &gt; v[i].hp) r = i;\n    } else {\n      if (v[r].dp &gt; v[i].dp) r = i;\n    }\n  }\n  return v[r];\n}\n</pre>\n\n<p>\nBy the way, this function may return different characters according to the order of the characters in $v$, even if $v$ contains the same set of characters. Ms. Yagami wants to know how many characters in a party may become the target of the new AI. Aoba's next task is to write a program that takes a given party $v$ and a constant $C$, and then counts the number of characters that may become the return value of <i>selectTarget</i>($v$) if $v$ is re-ordered.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The first line contains two integers $N$ $(1 \\leq N \\leq 50,000)$ and $C$ $(0 \\leq C \\leq 10^9)$. The first integer $N$ represents the size of $v$. The second integer $C$ represents the constant $C$ in Aoba's program. The <i>i</i>-th line of the following $N$ lines contains two integers $hp_i$ and $dp_i$ $(0 \\leq hp_i, dp_i \\leq 10^9)$. $hp_i$ represents the hit point of the $i$-th character in $v$, and $dp_i$ represents the defense point of the $i$-th character in $v$. You can assume that $hp_i \\ne hp_j$ or $dpi \\ne dp_j$ if $i \\ne j$ for any $1 \\leq i, j \\leq N$.\n</p>\n\n<h3>Output</h3>\n\n<p>\nDisplay the number of characters that may become the return value of <i>selectTarget</i>($v$), if $v$ is shuffled in an arbitrary order.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>5 3\n1 5\n3 4\n5 3\n7 2\n9 1</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>5</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>3 2\n1 2\n3 1\n5 1</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>2</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>4 1\n2 0\n0 4\n1 1\n5 9</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>3</pre>\n\n\n<h3>Sample Input 4</h3>\n\n<pre>5 9\n4 10\n12 4\n2 14\n9 19\n7 15</pre>\n\n<h3>Output for the Sample Input 4</h3>\n\n<pre>3</pre>\n", "p01798": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem I\nMidpoint</h2>\n\n\n<p>\nOne day, you found $L + M + N$ points on a 2D plane, which you named $A_1, ..., A_L, B_1, ...,B_M, C_1,...,C_N$. Note that two or more points of them can be at the same coordinate. These were named after the following properties:\n</p>\n\n<ul>\n<li> the points $A_1,...,A_L$ were located on a single straight line,</li>\n<li> the points $B_1,...,B_M$ were located on a single straight line, and</li>\n<li> the points $C_1,...,C_N$ were located on a single straight line.</li>\n</ul>\n\n<p>\nNow, you are interested in a triplet $(i, j, k)$ such that $C_k$ is the midpoint between $A_i$ and $B_j$. Your task is counting such triplets.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe first line contains three space-separated positive integers $L$, $M$, and $N$ $(1 \\leq L, M, N \\leq 10^5)$. The next $L$ lines describe $A$. The $i$-th of them contains two space-separated integers representing the $x$-coordinate and the $y$-coordinate of $A_i$. The next $M$ lines describe $B$. The $j$-th of them contains two space-separated integers representing the $x$-coordinate and the $y$-coordinate of $B_j$. The next $N$ lines describe $C$. The $k$-th of them contains two space-separated integers representing the $x$-coordinate and the $y$-coordinate of $C_k$. It is guaranteed that the absolute values of all the coordinates do not exceed $10^5$.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nPrint the number of the triplets which fulfill the constraint.\n</p>\n\n<h3>Sample Input 1</h3>\n\n<pre>2 2 3\n0 0\n2 0\n0 0\n0 2\n0 0\n1 1\n1 1</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>3</pre>\n\n<h3>Sample Input 2</h3>\n\n<pre>4 4 4\n3 5\n0 4\n6 6\n9 7\n8 2\n11 3\n2 0\n5 1\n4 3\n7 4\n10 5\n1 2</pre>\n\n<h3>Output for the Sample Input 2</h3>\n\n<pre>8</pre>\n\n<h3>Sample Input 3</h3>\n\n<pre>4 4 4\n0 0\n3 2\n6 4\n9 6\n7 14\n9 10\n10 8\n13 2\n4 2\n5 4\n6 6\n8 10</pre>\n\n<h3>Output for the Sample Input 3</h3>\n\n<pre>3</pre>\n", "p01800": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem K\nRunner and Sniper</h2>\n\n<p>\nYou are escaping from an enemy for some reason. The enemy is a sniper equipped with a high-tech laser gun, and you will be immediately defeated if you get shot. You are a very good runner, but just wondering how fast you have to run in order not to be shot by the sniper. The situation is as follows:\n</p>\n\n<p>\nYou and the sniper are on the $xy$-plane whose $x$-axis and $y$-axis are directed to the right and the top, respectively. You can assume that the plane is infinitely large, and that there is no obstacle that blocks the laser or your movement.\n</p>\n\n<p>\nThe sniper and the laser gun are at $(0, 0)$ and cannot move from the initial location. The sniper can continuously rotate the laser gun by at most $\\omega$ degrees per unit time, either clockwise or counterclockwise, and can change the direction of rotation at any time. The laser gun is initially directed $\\theta$ degrees counterclockwise from the positive direction of the $x$-axis.\n</p>\n\n<p>\nYou are initially at ($x$, $y$) on the plane and can move in any direction at speed not more than $v$ (you can arbitrarily determine the value of $v$ since you are a very good runner). You will be shot by the sniper exactly when the laser gun is directed toward your position, that is, you can ignore the time that the laser reaches you from the laser gun. Assume that your body is a point and the laser is a half-line whose end point is (0, 0).\n</p>\n\n<p>\nFind the maximum speed $v$ at which you are shot by the sniper in finite time when you and the sniper behave optimally.\n</p>\n\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The input contains four integers in a line, $x$, $y$, $\\theta$ and $\\omega$. The two integers $x$ and $y$ $(0 \\leq |x|, |y| \\leq 1,000$, ($x$, $y$) $\\ne$ (0, 0)) represent your initial position on the $xy$-plane. The integer $\\theta$ $(0 \\leq \\theta < 360)$ represents the initial direction of the laser gun: it is the counterclockwise angle in degrees from the positive direction of the $x$-axis. The integer $\\omega$ $(1 \\leq \\omega \\leq 100)$ is the angle which the laser gun can rotate in unit time. You can assume that you are not shot by the sniper at the initial position.\n</p>\n\n\n<h3>Output</h3>\n\n<p>\nDisplay a line containing the maximum speed $v$ at which you are shot by the sniper in finite time. The\nabsolute error or the relative error should be less than $10^{-6}$.\n</p>\n\n\n<h3>Sample Input 1</h3>\n\n<pre>100 100 0 1</pre>\n\n<h3>Output for the Sample Input 1</h3>\n\n<pre>1.16699564</pre>", "p01819": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>Problem A:\nWhere is the Boundary\n</h2>\n\n<p>\nAn island country JAGAN in a certain planet is very long and narrow, and extends east and\nwest. This long country is said to consist of two major cultural areas | the eastern and the\nwestern. Regions in the east tend to have the eastern cultural features and regions in the west\ntend to have the western cultural features, but, of course, the boundary between the two cultural\nareas is not clear, which has been an issue.\n</p>\n\n<p>\nYou are given an assignment estimating the boundary using a given data set.\n</p>\n\n<p>\nMore precise specification of the assignment is as follows:\n</p>\n\n<ol>\n<li> JAGAN is divided into $n$ prefectures forming a line in the east-west direction. Each\nprefecture is numbered 1, 2, ..., $n$ <b>from WEST to EAST</b>.</li>\n<li> Each data set consists of $m$ features, which has 'E' (east) or 'W' (west) for each prefecture.\nThese data indicate that each prefecture has eastern or western features from $m$ different\npoint of views, for example, food, clothing, and so on.</li>\n<li> In the estimation, you have to choose a cultural boundary achieving the minimal errors.\nThat is, you have to minimize the sum of 'W's in the eastern side and 'E's in the western\nside.</li>\n<li> In the estimation, you can choose a cultural boundary only from the boundaries between\ntwo prefectures.</li>\n</ol>\n\n<p>\nSometimes all prefectures may be estimated to be the eastern or the western cultural area.\nIn these cases, to simplify, you must virtually consider that the boundary is placed between\nprefecture No. 0 and No. 1 or between prefecture No. $n$ and No. $n+1$. When you get multiple\nminimums, you must output the most western (least-numbered) result.\n</p>\n\n<p>\nWrite a program to solve the assignment.\n</p>\n\n<h3>Input</h3>\n<p>\nEach input is formatted as follows:<br>\n\n<br>\n$n$ $m$<br>\n$d_{11} ... d_{1n}$<br>\n:<br>\n:<br>\n$d_{m1} ... d_{mn}$<br>\n<br>\n</p>\n\n<p>\nThe first line consists of two integers $n$ ($1 \\leq n \\leq 10,000$), $m$ ($1 \\leq m \\leq 100$), which indicate\nthe number of prefectures and the number of features in the assignment. The following m lines\nare the given data set in the assignment. Each line contains exactly $n$ characters. The $j$-th\ncharacter in the $i$-th line $d_{ij}$ is 'E' (east) or 'W' (west), which indicates $j$-th prefecture has the\neastern or the western feature from the $i$-th point of view.\n</p>\n\n<h3>Output</h3>\n<p>\nPrint the estimated result in a line. The output consists of two integers sorted in the ascending\norder which indicate two prefectures touching the boundary.\n</p>\n\n<h3>Sample Input</h3>\n<pre>\n2 1\nWE\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n1 2\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n3 2\nWWE\nWEE\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n1 2\n</pre>\n<p>\nBoth estimates \"1 2\" and \"2 3\" achieve 1 error as the minimum. From the restriction that you\nmust adopt the most western estimate, you must output \"1 2\".\n</p>\n\n<h3>Sample Input</h3>\n<pre>\n3 1\nWWW\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n3 4\n</pre>\n<p>\nIn this case, all the prefectures are western. As described in the problem statement, you must\nvirtually consider that the boundary is placed between third and fourth prefectures.\n</p>\n\n<h3>Sample Input</h3>\n<pre>\n3 1\nWEW\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n1 2\n</pre>\n<p>\nYou cannot assume that 'E's and 'W's are separated.\n</p>\n\n\n", "p01821": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n\n\n<h2>Problem D:\nIdentity Function</h2>\n\n<p>\nYou are given an integer $N$, which is greater than 1.<br>\nConsider the following functions:\n</p>\n<ul>\n<li> $f(a) = a^N$  mod  $N$ </li>\n<li> $F_1(a) = f(a)$</li>\n<li> $F_{k+1}(a) = F_k(f(a))$ $(k = 1,2,3,...)$</li>\n</ul>\n\n<p>\nNote that we use mod to represent the integer modulo operation. For a non-negative integer $x$\nand a positive integer $y$, $x$ mod $y$ is the remainder of $x$ divided by $y$.\n</p>\n\n<p>\nOutput the minimum positive integer $k$ such that $F_k(a) = a$ for all positive integers $a$ less than\n$N$. If no such $k$ exists, output -1.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single line that contains an integer $N$ ($2 \\leq N \\leq 10^9$), whose meaning is\ndescribed in the problem statement.\n</p>\n\n<h3>Output</h3>\n<p>\nOutput the minimum positive integer $k$ such that $F_k(a) = a$ for all positive integers $a$ less than\n$N$, or -1 if no such $k$ exists.\n</p>\n\n<h3>Sample Input</h3>\n<pre>\n3\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n1\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n4\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n-1\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n15\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n2\n</pre>\n\n", "p01820": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n\n<h3>Problem B:\nVector Field</h3>\n\n<p>\nIn 20015, JAG (Jagan Acceleration Group) has succeeded in inventing a new accelerator named\nForce Point for an experiment of proton collision on the two-dimensional $xy$-plane. If a proton\ntouches a Force Point, it is accelerated to twice its speed and its movement direction is veered. A\nproton may be veered by a Force Field in four ways: the positive or negative directions parallel\nto the $x$- or the $y$-axis. The direction in which a proton veers is determined by the type of the\nForce Point. A Force Point can accelerate a proton only once because the Force Point disappears\nimmediately after the acceleration. Generating many Force Points on the two-dimensional plane,\nwhich is called a 2D Force Point Field, allows us to accelerate a proton up to a target speed by\nsequentially accelerating the proton with the Force Points in the 2D Force Point Filed.\n</p>\n<p>\nThe Force Point generation method is still under experiment and JAG has the following technical\nlimitations:\n</p>\n<ul>\n<li> JAG cannot generate a Force Point with a specified position and a type.</li>\n<li>  JAG cannot generate a Force Point after putting a proton into a 2D Force Point Field.</li>\n<li>  JAG cannot move Force Points.</li>\n<li>  JAG cannot change a protons direction except by the effect of Force Points.</li>\n<li>  JAG can use only one proton for a 2D Force Point Field.</li>\n<li>  JAG can put a proton moving in any direction with its speed 1 at any position in a 2D\nForce Point Field.</li>\n</ul>\n\n<p>\nIn order to achieve the maximum speed of a proton, the engineers at JAG have to choose the\noptimal initial position and the optimal initial direction of the proton so that the proton is\naccelerated by as many Force Points as possible, after carefully observing the generated 2D\nForce Point Field.\n</p>\n\n<p>\nBy observing a generated 2D Force Point Field, the number of the generated Force Points is\nknown to be $n$. The position ($x_i$, $y_i$) and the direction veering type $d_i$ of the $i$-th point are\nalso known. Your task is to write a program to calculate the maximum speed of a proton by\nacceleration on a given 2D Force Point Field when JAG puts a proton optimally.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case which describes a 2D Force Point Field in the following\nformat.<br>\n<br>\n$n$<br>\n$x_1$ $y_1$ $d_1$<br>\n...<br>\n$x_n$ $y_n$ $d_n$<br>\n<br>\n\n<p>\nThe first line contains one integer $n$ ($1 \\leq n \\leq 3,000$) which is the number of the Force Points on\nthe 2D Force Point Field. Each of the next $n$ lines contains two integers $x_i$ and $y_i$ ($|x_i|$, $|y_i| \\leq 10^9$)\nand one character $d_i$ ($d_i$ is one of '&gt;', 'v', '&lt;' or '^'). $x_i$ and $y_i$ represent a coordinate of the $i$-th\nForce Point, and $d_i$ is the direction veering type of the $i$-th force point. A force point with a type\n'&gt;' changes protons direction to the positive direction of the $x$-axis, 'v' represents the positive\ndirection of the $y$-axis, '&lt;' represents the negative direction of the $x$-axis, and '^' represents the\nnegative direction of the $y$-axis. You can assume that any two Force Points are not generated\non the same coordinates.\n</p>\n\n<h3>Output</h3>\n<p>\nDisplay a line containing the integer $log_2 v_{max}$, where $v_{max}$ is the protons possible fastest speed.\n</p>\n\n<h3>Sample Input</h3>\n\n<pre>\n9\n0 0 v\n1 0 >\n2 0 <\n0 1 >\n1 1 v\n2 1 v\n0 2 ^\n1 2 ^\n2 2 <\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n9\n</pre>\n<p>\nThe input looks like the following diagram. All the Force Points will disappear if you put a\nproton at (1, 1).\n</p>\n<pre>\nv><\n>vv\n^^<\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n9\n0 0 ^\n1 0 ^\n2 0 ^\n0 1 <\n1 1 ^\n2 1 >\n0 2 v\n1 2 v\n2 2 v\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n2\n</pre>", "p01822": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n\n<h3>Problem E:\nEnclose Points</h3>\n\n<p>\nThere are $N$ points and $M$ segments on the $xy$-plane. Each segment connects two of these\npoints and they don't intersect each other except at the endpoints. You are also given $Q$ points\nas queries. Your task is to determine for each query point whether you can make a polygon that\nencloses the query point using some of the given segments. Note that the polygon should not\nnecessarily be convex.\n</p>\n\n<h3>Input</h3>\n<p>\nEach input is formatted as follows.<br>\n<br>\n$N$ $M$ $Q$<br>\n$x_1$ $y_1$<br>\n...<br>\n$x_N$ $y_N$<br>\n$a_1$ $b_1$<br>\n...<br>\n$a_M$ $b_M$<br>\n$qx_1$ $qy_1$<br>\n...<br>\n$qx_Q$ $qy_Q$<br>\n<br>\n</p>\n\n<p>\nThe first line contains three integers $N$ ($2 \\leq N \\leq 100,000$), $M$ ($1 \\leq M \\leq 100,000$), and $Q$\n($1 \\leq Q \\leq 100,000$), which represent the number of points, the number of segments, and the\nnumber of queries, respectively. Each of the following $N$ lines contains two integers $x_i$ and $y_i$\n($-100,000 \\leq x_i, y_i \\leq 100,000$), the coordinates of the $i$-th point. The points are guaranteed to be\ndistinct, that is, $(x_i, y_i) \\ne (x_j, y_j)$ when $i \\ne j$. Each of the following $M$ lines contains two integers\n$a_i$ and $b_i$ ($1 \\leq a_i < b_i \\leq N$), which indicate that the $i$-th segment connects the $a_i$-th point and\nthe $b_i$-th point. Assume that those segments do not intersect each other except at the endpoints.\nEach of the following $Q$ lines contains two integers $qx_i$ and $qy_i$ ($-100,000 \\leq qx_i, qy_i \\leq 100,000$),\nthe coordinates of the $i$-th query point.\n</p>\n\n<p>\nYou can assume that, for any pair of query point and segment, the distance between them is at\nleast $10^{-4}$.\n</p>\n\n<h3>Output</h3>\n<p>\nThe output should contain $Q$ lines. Print \"Yes\" on the $i$-th line if there is a polygon that\ncontains the $i$-th query point. Otherwise print \"No\" on the $i$-th line.\n</p>\n\n<h3>Sample Input</h3>\n<pre>\n4 5 3\n-10 -10\n10 -10\n10 10\n-10 10\n1 2\n1 3\n1 4\n2 3\n3 4\n-20 0\n1 0\n20 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\nNo\nYes\nNo\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n8 8 5\n-20 -20\n20 -20\n20 20\n-20 20\n-10 -10\n10 -10\n10 10\n-10 10\n1 2\n1 4\n2 3\n3 4\n5 6\n5 8\n6 7\n7 8\n-25 0\n-15 0\n0 0\n15 0\n25 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\nNo\nYes\nYes\nYes\nNo\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n8 8 5\n-20 -10\n-10 -10\n-10 10\n-20 10\n10 -10\n20 -10\n20 10\n10 10\n1 2\n2 3\n3 4\n1 4\n5 6\n6 7\n7 8\n5 8\n-30 0\n-15 0\n0 0\n15 0\n30 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\nNo\nYes\nNo\nYes\nNo\n</pre>\n", "p01823": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n\n<h2>Problem F:\nMarching Course\n</h2>\n\n<p>\nSince members of Kitafuji High School Brass Band Club succeeded in convincing their stern\ncoach of their playing skills, they will be able to participate in Moon Light Festival as a marching\nband. This festival is a prelude in terms of appealing their presence for the coming domestic\ncontest. Hence, they want to attract a festival audience by their performance.\n</p>\n\n<p>\nAlthough this festival restricts performance time up to $P$ minutes, each team can freely determine\ntheir performance course from a provided area. The provided area consists of $N$ checkpoints,\nnumbered 1 through $N$, and $M$ bidirectional roads connecting two checkpoints. Kitafuji Brass\nBand already has the information about each road: its length and the expected number of people\non its roadside. Each team must start at the checkpoint 1, and return back to the checkpoint\n1 in $P$ minutes. In order to show the performance ability of Kitafuji Brass Band to a festival\naudience, their stern coach would like to determine their performance course so that many people\nlisten their march as long as possible.\n</p>\n\n<p>\nThe coach uses \"impression degree\" to determine their best course. If they play $m$ minutes on\nthe road with length $d$ and the expected number $v$ of people, then the impression degree will be\n$m \\times v/d$. The impression degree of a course is the sum of impression degree of their performance\non the course. Marching bands must move at a constant speed during marching: 1 unit length\nper 1 minute. On the other hand, they can turn in the opposite direction at any time, any place\nincluding a point on a road. The impression degree is accumulated even if they pass the same\ninterval two or more times.\n</p>\n\n<p>\nYour task is to write a program to determine a course with the maximum impression degree in\norder to show the performance ability of Kitafuji Brass Band to an audience as much as possible.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input is formatted as follows.<br>\n<br>\n$N$ $M$ $P$<br>\n$s_1$ $t_1$ $d_1$ $v_1$<br>\n: : :<br>\n$s_M$ $t_M$ $d_M$ $v_M$<br>\n<br>\n</p>\n\n<p>\nThe first line contains three integers $N$, $M$, and $P$: the number of checkpoints $N$ ($2 \\leq N \\leq\n200$), the number of roads $M$ ($N - 1 \\leq M \\leq N(N - 1)/2$), and the performance time $P$\n($1 \\leq P \\leq 1,000$). The following $M$ lines represent the information about roads. The $i$-th line\nof them contains four integers $s_i$, $t_i$, $d_i$, and $v_i$: the $i$-th road bidirectionally connects between\ncheckpoints $s_i$ and $t_i$ ($1 \\leq s_i, t_i \\leq N, s_i \\ne t_i$) with length $d_i$ ($1 \\leq d_i \\leq 1,000$) and the expected\nnumber $v_i$ ($1 \\leq v_i \\leq 1,000$) of people.\n</p>\n\n<p>\nYou can assume that any two checkpoints are directly or indirectly connected with one or more\nroads. You can also assume that there are no pair of roads having the same pair of endpoints.\n</p>\n\n<h3>Output</h3>\n<p>\nOutput the maximum impression degree of a course for a $P$-minute performance. The absolute\nerror should be less than $10^{-4}$.\n</p>\n\n<h3>Sample Input</h3>\n<pre>\n3 3 4\n1 2 1 1\n2 3 2 4\n3 1 1 1\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n6\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n4 3 9\n1 2 2 1\n1 3 2 2\n1 4 2 3\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n13.5\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n4 3 5\n1 2 10 1\n2 3 2 100\n1 4 3 10\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n16.6666666667\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n3 3 10\n1 2 3 1\n1 3 4 5\n2 3 2 10\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n22\n</pre>\n", "p01824": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n\n<h2>Problem G:\nSurface Area of Cubes\n</h2>\n\n<p>\nTaro likes a single player game \"Surface Area of Cubes\".\n</p>\n\n<p>\nIn this game, he initially has an $A \\times B \\times C$ rectangular solid formed by $A \\times B \\times C$ unit cubes\n(which are all 1 by 1 by 1 cubes). The center of each unit cube is placed at 3-dimentional\ncoordinates $(x, y, z)$ where $x$, $y$, $z$ are all integers ($0 \\leq x \\leq A-1, 0 \\leq y \\leq B -1, 0 \\leq z \\leq C - 1$).\nThen, $N$ distinct unit cubes are removed from the rectangular solid by the game master. After\nthe $N$ cubes are removed, he must precisely tell the total surface area of this object in order to\nwin the game.\n</p>\n\n<p>\nNote that the removing operation does not change the positions of the cubes which are not\nremoved. Also, not only the cubes on the surface of the rectangular solid but also the cubes\nat the inside can be removed. Moreover, the object can be divided into multiple parts by the\nremoval of the cubes. Notice that a player of this game also has to count up the surface areas\nwhich are not accessible from the outside.\n</p>\n\n<p>\nTaro knows how many and which cubes were removed but this game is very difficult for him,\nso he wants to win this game by cheating! You are Taro's friend, and your job is to make a\nprogram to calculate the total surface area of the object on behalf of Taro when you are given\nthe size of the rectangular solid and the coordinates of the removed cubes.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input is formatted as follows.\n</p>\n\n<p>\nThe first line of a test case contains four integers $A$, $B$, $C$, and $N$ ($1 \\leq A, B, C \\leq 10^8, 0 \\leq N \\leq\n$ min{$1,000, A \\times B \\times C - 1$}).\n</p>\n\n<p>\nEach of the next $N$ lines contains non-negative integers $x$, $y$, and $z$ which represent the coordinate\nof a removed cube. You may assume that these coordinates are distinct.\n</p>\n\n<h3>Output</h3>\n<p>\nOutput the total surface area of the object from which the $N$ cubes were removed.\n</p>\n\n\n<h3>Sample Input</h3>\n<pre>\n2 2 2 1\n0 0 0\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n24\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n1 1 5 2\n0 0 1\n0 0 3\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n18\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n3 3 3 1\n1 1 1\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n60\n</pre>", "p01825": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n\n<h2>Problem H:\nLaser Cutter\n</h2>\n\n<p>\nCiel is going to do woodworking. Ciel wants to make a cut in a wooden board using a laser\ncutter.\n</p>\n\n<p>\nTo make it simple, we assume that the board is a two-dimensional plane. There are several\nsegments on the board along which Ciel wants to cut the board. Each segment has a direction\nand Ciel must cut those segments along their directions. Those segments are connected when\nyou ignore the directions, that is, any two points on the segments are directly or indirectly\nconnected by the segments.\n</p>\n\n<p>\nWhile the laser cutter is powered on, it emits a laser which hits the board at a point and cuts\nthe board along its trace. The laser initially points to $(x, y)$. Ciel can conduct the following two\noperations:\n</p>\n\n<ul>\n<li> Move the laser cutter with its power on and cut (a part of) a segment along its direction,\nor</li>\n<li> Move the laser cutter to any position with its power off. Ciel should not necessarily cut\nthe whole segment at a time; she can start or stop cutting a segment at any point on the\nsegments.</li>\n</ul>\n\n<p>\nCiel likes to be efficient, so she wants to know the shortest route such that the laser cutter cuts\nthe whole parts of all the segments and then move back to the initial point. Your task is to\nwrite a program that calculates the minimum total moving distance of the laser cutter.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input contains an integer $n$ ($1 \\leq n \\leq 300$), the number of segments. The\nnext line contains two integers $x$ and $y$ ($-1,000 \\leq x, y \\leq 1,000$), which is the initial position\n$(x, y)$ of the laser. The $i$-th of the following $n$ lines contains four integers $sx_i$, $sy_i$, $tx_i$ and $ty_i$ ($-1,000 \\leq sx_i, sy_i, tx_i, ty_i \\leq 1,000$), which indicate that they are the end points of the $i$-th\nsegment, and that the laser cutter can cut the board in the direction from $(sx_i, sy_i)$ to $(tx_i, ty_i)$.\nThe input satisfies the following conditions: For all $i$ ($1 \\leq i \\leq n$), $(sx_i, sy_i) \\ne (tx_i, ty_i)$. The\ninitial point $(x, y)$ lies on at least one of the given segments. For all distinct $i, j$ ($1 \\leq i, j \\leq n$),\nthe $i$-th segment and the $j$-th segment share at most one point.\n</p>\n\n<h3>Output</h3>\n<p>\nOutput a line containing the minimum total moving distance the laser cutter needs to travel to\ncut all the segments and move back to the initial point. The absolute error or the relative error\nshould be less than $10^{-6}$.\n</p>\n\n<h3>Sample Input</h3>\n<pre>\n3\n0 1\n0 0 0 1\n0 1 0 2\n0 2 0 3\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n6.0000000000000000\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n2\n0 1\n0 0 0 2\n-1 1 1 1\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n6.8284271247461900\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n5\n0 0\n0 0 1 0\n1 1 -1 1\n-1 1 -1 -1\n-1 -1 1 -1\n1 -1 1 1\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n10.0000000000000000\n</pre>", "p01827": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem J:\nBlack Company\n</h2>\n\n<p>\nJAG Company is a sweatshop (sweatshop is called \"burakku kigyo\" in Japanese), and you are\nthe CEO for the company.\n</p>\n\n<p>\nYou are planning to determine $N$ employees' salary as low as possible (employees are numbered\nfrom 1 to $N$). Each employee's salary amount must be a positive integer greater than zero. At\nthat time, you should pay attention to the employees' contribution degree. If the employee $i$'s\ncontribution degree $c_i$ is greater than the employee $j$'s contribution degree $c_j$ , the employee i\nmust get higher salary than the employee $j$'s salary. If the condition is not satisfied, employees\nmay complain about their salary amount.\n</p>\n\n<p>\nHowever, it is not necessarily satisfied in all pairs of the employees, because each employee can\nonly know his/her close employees' contribution degree and salary amount. Therefore, as long as\nthe following two conditions are satisfied, employees do not complain to you about their salary\namount.\n</p>\n\n<ul>\n<li> If the employees $i$ and $j$ are close to each other, $c_i < c_j \\Leftrightarrow  p_i < p_j$ must be satisfied, where\n$p_i$ is the employee $i$'s salary amount.</li>\n<li> If the employee $i$ is close to the employees $j$ and $k$, $c_j < c_k \\Leftrightarrow  p_j < p_k$ must be satisfied.\nWrite a program that computes the minimum sum of all employees' salary amount such that no\nemployee complains about their salary.</li>\n</ul>\n\n<h3>Input</h3>\n<p>\nEach input is formatted as follows:<br>\n<br>\n$N$<br>\n$c_1$ ... $c_N$<br>\n$M$<br>\n$a_1$ $b_1$<br>\n...<br>\n$a_M$ $b_M$<br>\n<br>\n</p>\n\n<p>\nThe first line contains an integer $N$ ($1 \\leq N \\leq 100,000$), which indicates the number of employees.\nThe second line contains $N$ integers $c_i$ ($1 \\leq c_i \\leq 100,000$) representing the contribution degree\nof employee $i$.\n</p>\n\n<p>\nThe third line contains an integer $M$ ($0 \\leq M \\leq 200,000$), which specifies the number of relationships. Each of the following $M$ lines contains two integers $a_i$ and $b_i$ ($a_i \\ne b_i, 1 \\leq a_i, b_i \\leq N$).\nIt represents that the employees $a_i$ and $b_i$ are close to each other. There is no more than one\nrelationship between each pair of the employees.\n</p>\n\n<h3>Output</h3>\n<p>\nPrint the minimum sum of all employees' salary amounts in a line.\n</p>\n\n<h3>Sample Input</h3>\n<pre>\n3\n1 3 3\n2\n1 2\n1 3\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n5\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n3\n1 2 3\n2\n1 2\n1 3\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n6\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n4\n1 1 2 2\n2\n1 2\n3 4\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n4\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n5\n1 2 5 5 1\n6\n1 2\n4 1\n2 3\n5 2\n4 3\n4 5\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n10\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n6\n4 3 2 1 5 3\n7\n4 2\n1 5\n2 6\n6 5\n4 1\n1 6\n6 3\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n13\n</pre>\n", "p01826": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Problem I:\nLive Programming\n</h2>\n\n<p>\nA famous Japanese idol group, JAG48, is planning the program for its next live performance.\nThey have $N$ different songs, $song_1$, $song_2$, ..., and $song_N$. Each song has three integer param-\neters, $t_i$, $p_i$, and $f_i$: $t_i$ denotes the length of $song_i$, $p_i$ denotes the basic satisfaction points the\naudience will get when $song_i$ is performed, and $f_i$ denotes the feature value of songi that affects\nthe audience's satisfaction. During the live performance, JAG48 can perform any number (but\nat least one) of the $N$ songs, unless the total length of the chosen songs exceeds the length of\nthe live performance $T$. They can decide the order of the songs to perform, but they cannot\nperform the same song twice or more.\n</p>\n\n<p>\nThe goal of this live performance is to maximize the total satisfaction points that the audience\nwill get. In addition to the basic satisfaction points of each song, the difference between the\nfeature values of the two songs that are performed consecutively affects the total satisfaction\npoints. If there is no difference, the audience will feel comfortable. However, the larger the\ndifference will be, the more frustrated the audience will be.\n</p>\n<p>\nThus, the total satisfaction points will be calculated as follows:\n</p>\n\n<ul>\n<li> If $song_x$ is the first song of the live performance, the total satisfaction points just after\n$song_x$ is equal to $p_x$.</li>\n<li> If $song_x$ is the second or subsequent song of the live performance and is performed just\nafter $song_y$, $p_x -(f_x -f_y)^2$ is added to the total satisfaction points, because the audience\nwill get frustrated if $f_x$ and $f_y$ are different.\n</ul>\n\n<p>\nHelp JAG48 find a program with the maximum total satisfaction points.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe input is formatted as follows.<br>\n<br>\n$N$ $T$<br>\n$t_1$ $p_1$ $f_1$<br>\n: : :<br>\n$t_N$ $p_N$ $f_N$<br>\n<br>\n</p>\n\n<p>\nThe first line contains two integers $N$ and $T$: the number of the available $song_s$ $N$ ($1 \\leq N \\leq\n4,000$), and the length of the live performance $T$ ($1 \\leq T \\leq 4,000$).\n</p>\n\n<p>\nThe following $N$ lines represent the parameters of the songs. The $i$-th line of them contains three\nintegers, which are the parameters of $song_i$: the length $t_i$ ($1 \\leq t_i \\leq 4,000$), the basic satisfaction\npoints $p_i$ ($1 \\leq p_i \\leq 10^8$), and the feature value $f_i$ ($1 \\leq f_i \\leq 10^4$).\n</p>\n\n<p>\nYou can assume that there is at least one song whose length is less than or equal to $T$.\n</p>\n\n<h3>Output</h3>\n<p>\nOutput the maximum total satisfaction points that the audience can get during the live performance.\n</p>\n\n\n<h3>Sample Input</h3>\n<pre>\n2 10\n10 200 1\n10 100 100\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n200\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n3 15\n5 100 1\n5 100 2\n5 100 4\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n295\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n3 10\n5 200 200\n5 200 201\n5 300 1\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n399\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n3 20\n5 100 200\n5 100 201\n5 300 1\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n300\n</pre>\n\n<h3>Sample Input</h3>\n<pre>\n5 61\n14 49 7\n31 46 4\n30 55 5\n52 99 1\n34 70 3\n</pre>\n\n<h3>Output for the Sample Input</h3>\n<pre>\n103\n</pre>\n", "p01829": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Change a Password</h2>\n\n<p>\nPassword authentication is used in a lot of facilities. The office of JAG also uses password authentication. A password is required to enter their office. A password is a string of $N$ digits '0'-'9'. This password is changed on a regular basis. Taro, a staff of the security division of JAG, decided to use the following rules to generate a new password from an old one.\n</p>\n\n<ol>\n<li> The new password consists of the same number $N$ of digits to the original one and each digit appears at most once in the new password. It can have a leading zero. (Note that an old password may contain same digits twice or more.)</li>\n<li> The new password maximizes the difference from the old password within constraints described above. (Definition of the difference between two passwords is described below.)</li>\n<li> If there are two or more candidates, the one which has the minimum value when it is read as an integer will be selected.</li>\n</ol>\n\n<p>\nThe difference between two passwords is defined by <i>min</i>($|a - b|,  10^N - |a - b|$), where $a$ and $b$ are the integers represented by the two passwords. For example, the difference between \"11\" and \"42\" is 31, and the difference between \"987\" and \"012\" is 25.\n</p>\n\n<p>\nTaro would like to use a computer to calculate a new password correctly, but he is not good at programming. Therefore, he asked you to write a program. Your task is to write a program that generates a new password from an old password.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case. The first line of the input contains a string $S$ which denotes the old password. You can assume that the length of $S$ is no less than 1 and no greater than 10. Note that old password $S$ may contain same digits twice or more, and may have leading zeros.\n</p>\n\n<h3>Output</h3>\n<p>\nPrint the new password in a line.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n201\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n701\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n512\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n012\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n99999\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n49876\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n765876346\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n<pre>\n265874931\n</pre>", "p01828": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>M and A</h2>\n<p>\nThe CEO of the company named $S$ is planning M&amp;A with another company named $T$. M&amp;A is an abbreviation for \"Mergers and Acquisitions\". The CEO wants to keep the original company name $S$ through the M&amp;A on the plea that both company names are mixed into a new one.\n</p>\n\n<p>\nThe CEO insists that the mixed company name after the M&amp;A is produced as follows.\n</p>\n\n<p>\nLet $s$ be an arbitrary subsequence of $S$, and $t$ be an arbitrary subsequence of $T$. The new company name must be a string of the same length to $S$ obtained by alternatively lining up the characters in $s$ and $t$. More formally, $s_0 + t_0 + s_1 + t_1 +  ...$ or $t_0 + s_0 + t_1 + s_1 + ... $ can be used as the company name after M&amp;A. Here, $s_k$ denotes the $k$-th (0-based) character of string $s$. Please note that the lengths of $s$ and $t$ will be different if the length of $S$ is odd. In this case, the company name after M&amp;A is obtained by $s_0 + t_0 + ... + t_{|S|/2} + s_{|S|/2+1}$ or $t_0 + s_0 + ... + s_{|S|/2} + t_{|S|/2+1}$ ($|S|$ denotes the length of $S$ and \"/\" denotes integer division).\n</p>\n\n<p>\nA subsequence of a string is a string which is obtained by erasing zero or more characters from the original string. For example, the strings \"abe\", \"abcde\" and \"\" (the empty string) are all subsequences of the string \"abcde\".\n</p>\n\n<p>\nYou are a programmer employed by the acquiring company. You are assigned a task to write a program that determines whether it is possible to make $S$, which is the original company name, by mixing the two company names.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe input consists of a single test case. The test case consists of two lines.\n</p>\n\n<p>\nThe first line contains a string $S$ which denotes the name of the company that you belong to. The second line contains a string $T$ which denotes the name of the target company of the planned M&amp;A. The two names $S$ and $T$ are non-empty and of the same length no longer than 1,000 characters, and all the characters used in the names are lowercase English letters.\n</p>\n\n\n<h3>Output</h3>\n<p>\nPrint \"Yes\" in a line if it is possible to make original company name by combining $S$ and $T$. Otherwise, print \"No\" in a line.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\nacmicpc\ntsukuba\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\nNo\n</pre>\n\n\n<h3>Sample Input 2</h3>\n<pre>\nhoge\nmoen\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\nYes\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\nabcdefg\nxacxegx\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\nYes\n</pre>", "p01832": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Shifting a Matrix</h2>\n\n<p>\nYou are given $N \\times N$ matrix $A$ initialized with $A_{i,j} = (i - 1)N + j$, where $A_{i,j}$ is the entry of the $i$-th row and the $j$-th column of $A$. Note that $i$ and $j$ are 1-based.\n</p>\n\n<p>\nYou are also given an operation sequence which consists of the four types of shift operations: left, right, up, and down shifts. More precisely, these operations are defined as follows:\n</p>\n\n<ul>\n<li> Left shift with $i$: circular shift of the $i$-th row to the left, i.e., setting previous $A_{i,k}$ to new $A_{i,k-1}$ for $2 \\leq k \\leq N$, and previous $A_{i,1}$ to new $A_{i,N}$.</li>\n<li> Right shift with $i$: circular shift of the $i$-th row to the right, i.e., setting previous $A_{i,k}$ to new $A_{i,k+1}$ for $1 \\leq k \\leq N - 1$, and previous $A_{i,N}$ to new $A_{i,1}$.</li>\n<li> Up shift with $j$: circular shift of the $j$-th column to the above, i.e., setting previous $A_{k,j}$ to new $A_{k-1,j}$ for $2 \\leq k \\leq N$, and previous $A_{1,j}$ to new $A_{N,j}$.</li>\n<li> Down shift with $j$: circular shift of the $j$-th column to the below, i.e., setting previous $A_{k,j}$ to new $A_{k+1,j}$ for $1 \\leq k \\leq N - 1$, and previous $A_{N,j}$ to new $A_{1,j}$.\n</ul>\n\n<p>\nAn operation sequence is given as a string. You have to apply operations to a given matrix from left to right in a given string. Left, right, up, and down shifts are referred as 'L', 'R', 'U', and 'D' respectively in a string, and the following number indicates the row/column to be shifted. For example, \"R25\" means we should perform right shift with 25. In addition, the notion supports repetition of operation sequences. An operation sequence surrounded by a pair of parentheses must be repeated exactly $m$ times, where $m$ is the number following the close parenthesis. For example, \"(L1R2)10\" means we should repeat exactly 10 times the set of the two operations:\nleft shift with 1 and right shift with 2 in this order.\n</p>\n<p>\nGiven operation sequences are guaranteed to follow the following BNF:\n</p>\n\n<pre>\n&lt;sequence&gt; := &lt;sequence&gt;&lt;repetition&gt; | &lt;sequence&gt;&lt;operation&gt; | &lt;repetition&gt; | &lt;operation&gt;\n&lt;repetition&gt; := '('&lt;sequence&gt;')'&lt;number&gt;\n&lt;operation&gt; := &lt;shift>&lt;number&gt;\n&lt;shift&gt; := 'L' | 'R' | 'U' | 'D'\n&lt;number&gt; := &lt;nonzero_digit&gt; |&lt;number&gt;&lt;digit&gt;\n&lt;digit&gt; := '0' | &lt;nonzero_digit&gt;\n&lt;nonzero_digit&gt; := '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\n</pre>\n\n<p>\nGiven $N$ and an operation sequence as a string, make a program to compute the $N \\times N$ matrix after operations indicated by the operation sequence.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case. The test case is formatted as follows.<br/>\n<br/>\n$N$ $L$<br/>\n$S$<br/>\n</p>\n\n<p>\nThe first line contains two integers $N$ and $L$, where $N$ ($1 \\leq N \\leq 100$) is the size of the given matrix and $L$ ($2 \\leq L \\leq 1,000$) is the length of the following string. The second line contains a string $S$ representing the given operation sequence. You can assume that $S$ follows the above BNF. You can also assume numbers representing rows and columns are no less than 1 and no more than $N$, and the number of each repetition is no less than 1 and no more than $10^9$ in the given string.\n</p>\n\n<h3>Output</h3>\n<p>\nOutput the matrix after the operations in $N$ lines, where the $i$-th line contains single-space separated $N$ integers representing the $i$-th row of $A$ after the operations.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n3 2\nR1\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n3 1 2\n4 5 6\n7 8 9\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n3 7\n(U2)300\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n1 2 3\n4 5 6\n7 8 9\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n3 7\n(R1D1)3\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n3 4 7\n1 5 6\n2 8 9\n</pre>", "p01834": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Cube Dividing</h2>\n\n<p>\nPablo Cubarson is a well-known cubism artist. He is producing a new piece of work using a cuboid which consists of $A \\times B \\times C$ unit cubes. He plans to make a beautiful shape by removing $N$ units cubes from the cuboid. When he is about to begin the work, he has noticed that by the removal the cuboid may be divided into several parts disconnected to each other. It is against his aesthetics to divide a cuboid. So he wants to know how many parts are created in his plan.\n</p>\n\n<p>\nYour task is to calculate the number of connected components in the cuboid after removing the $N$ cubes. Two cubes are connected if they share one face.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case. The test case is formatted as follows:<br/>\n<br/>\n$A$ $B$ $C$ $N$<br/>\n$X_1$ $Y_1$ $Z_1$<br/>\n...<br/>\n$X_N$ $Y_N$ $Z_N$<br/>\n</p>\n\n<p>\nThe first line contains four integers $A$, $B$, $C$ and $N$. $A$, $B$ and $C$ ($1 \\leq  A,B,C \\leq 10^6$) denote the size of the cuboid $-$ the cuboid has an $A$ unit width from left to right and a $B$ unit height from bottom to top, and a $C$ unit depth from front to back. $N$ ($0 \\leq N \\leq 20,000, N \\leq A \\times B \\times C - 1$) denotes the number of the cubes removed in the Cubarson's plan. Each of the following $N$ lines contains three integers $X_i$ ($0 \\leq X_i \\leq A-1$), $Y_i$ ($0 \\leq Y_i \\leq B-1$) and $Z_i$ ($0 \\leq Z_i \\leq C - 1$). They denote that the cube located at the $X_i$-th position from the left, the $Y_i$-th from the bottom and the $Z_i$-th from the front will be removed in the plan. You may assume the given positions are distinct.\n</p>\n\n<h3>Output</h3>\n<p>\nPrint the number of the connected components in the cuboid after removing the specified cubes.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n2 2 2 4\n0 0 0\n1 1 0\n1 0 1\n0 1 1\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n4\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n3 3 3 1\n1 1 1\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n1\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n1 1 3 2\n0 0 0\n0 0 2\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n1\n</pre>", "p01835": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Donut Decoration</h2>\n<p>\nDonut maker's morning is early. Mr. D, who is also called Mr. Donuts, is an awesome donut maker. Also today, he goes to his kitchen and prepares to make donuts before sunrise.\n</p>\n\n<p>\nIn a twinkling, Mr. D finishes frying $N$ donuts with a practiced hand. But these donuts as they are must not be displayed in a showcase. Filling cream, dipping in chocolate, topping somehow cute, colorful things, etc., several decoration tasks are needed. There are $K$ tasks numbered 1 through $K$, and each of them must be done exactly once in the order $1, 2, ..., K$ to finish the donuts as items on sale.\n</p>\n\n<p>\nInstantly, Mr. D arranges the $N$ donuts in a row. He seems to intend to accomplish each decoration tasks sequentially at once. However, what in the world is he doing? Mr. D, who stayed up late at yesterday night, decorates only a part of the donuts in a consecutive interval for each task. It's clearly a mistake! Not only that, he does some tasks zero or several times, and the order of tasks is also disordered. The donuts which are not decorated by correct process cannot be provided as items on sale, so he should trash them.\n</p>\n\n<p>\nFortunately, there are data recording a sequence of tasks he did. The data contain the following information: for each task, the consecutive interval $[l, r]$ of the decorated donuts and the ID $x$ of the task. Please write a program enumerating the number of the donuts which can be displayed in a showcase as items on sale for given recorded data.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case. The test case is formatted as follows.<br/>\n<br/>\n$N$ $K$<br/>\n$T$<br/>\n$l_1$ $r_1$ $x_1$<br/>\n...<br/>\n$l_T$ $r_T$ $x_T$<br/>\n</p>\n\n<p>\nThe first line contains two integers $N$ and $K$, where $N$ ($1 \\leq N \\leq 200,000$) is the number of the donuts fried by Mr. D, and $K$ ($1 \\leq K \\leq 200,000$) is the number of decoration tasks should be applied to the donuts. The second line contains a single integer $T$ ($1 \\leq T \\leq 200,000$), which means the number of information about tasks Mr. D did. Each of next $T$ lines contains three\nintegers $l_i$, $r_i$, and $x_i$ representing the $i$-th task Mr. D did: the $i$-th task was applied to the interval $[l_i, r_i]$ ($1 \\leq l_i \\leq r_i \\leq N$) of the donuts inclusive, and has ID $x_i$ ($1 \\leq x_i \\leq K$).\n</p>\n\n<h3>Output</h3>\n<p>\nOutput the number of the donuts that can be provided as items on sale.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n3 2\n3\n1 2 1\n2 3 2\n3 3 1\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n1\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n5 3\n6\n2 3 1\n1 3 2\n4 5 1\n2 4 3\n3 5 2\n5 5 3\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n2\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n10 1\n2\n2 9 1\n5 7 1\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n5\n</pre>", "p01833": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Modern Announce Network</h2>\n\n<p>\nToday, modern teenagers use SNS to communicate with each other.\n</p>\n\n<p>\nIn a high school, $N$ students are using an SNS called ICPC (International Community for Programming Contest). Some pairs of these $N$ students are 'friends' on this SNS, and can send messages to each other. Among these $N$ students, $A$ first grade students, $B$ second grade students, and $C$ third grade students are members of the Programming Society. Note that there may be some students who are not the members of the Programming Society, so $A+B +C$ can be less than $N$.\n</p>\n\n<p>\nThere are good relationships between members of the same grade in the Society. Thus, there is a chat group in the SNS for each grade, and the Society members of the same grade can communicate with each other instantly via their group chat. On the other hand, the relationships between any different grades are not so good, and there are no chat group for the entire Society and the entire high school.\n</p>\n\n<p>\nIn order to broadcast a message to all the Society members on the SNS, the administrator of the Society came up with a method: the administrator tells the message to one of the $N$ students and have them spread the message on the SNS via the chat groups and their friends. (The administrator itself does not have an account for the SNS.) As the members of the same grade can broadcast the message by the chat group for the grade, we can assume that if one of a grade gets the message, all other members of that grade also get the message instantly. Therefore, if the message is told to at least one member of each grade, we can assume that the message is broadcasted to the all members of the Society on the SNS.\n</p>\n\n<p>\nBecause it is bothering to communicate between friends, we want to minimize the number of communications between friends. What is the minimum number of communications between friends to broadcast a message to all the Society members? Who is the first person to whom the administrator should tell the message to achieve the minimum communications?\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case. The test case is formatted as follows:<br/>\n<br/>\n$N$ $A$ $B$ $C$<br/>\n$a_1$ ... $a_A$<br/>\n$b_1$ ... $b_B$<br/>\n$c_1$ ... $c_C$<br/>\n$M$<br/>\n$x_1$ $y_1$<br/>\n...<br/>\n$x_M$ $y_M$<br/>\n</p>\n\n<p>\nThe first line contains four integers $N$, $A$, $B$, and $C$. $N$ ($3 \\leq N \\leq 10,000$) denotes the number of students in the SNS, and $A$, $B$ and $C$ ($1 \\leq A,B,C \\leq N$ and $A + B + C \\leq N$) denote the number of members of the first, second, and third grade respectively. Each student on the SNS is represented by a unique numeric ID between 1 and $N$. The second line contains $A$ integers $a_1, ...,  a_A$ ($1 \\leq a_1, ..., a_A \\leq N$), which are the IDs of members of the first grade. The third line contains $B$ integers $b_1, ..., b_B$ ($1 \\leq b_1, ..., b_B \\leq N$), which are the IDs of members of the second grade. The fourth line contains $C$ integers $c_1, ..., c_C$ ($1 \\leq c_1, ... , c_C \\leq N$), which are the IDs of members of the third grade. You can assume that $a_1, ..., a_A, b_1, ... , b_B, c_1, ..., c_C$ are distinct. The fifth line contains an integer $M$ ($2 \\leq M \\leq 500,000$). $M$ denotes the number of pairs of students who are friends in the SNS. The $i$-th line of the following $M$ lines contains two integers $x_i$ and $y_i$ ($1 \\leq x_i, y_i \\leq N$), which means the student with ID $x_i$ and the student with ID $y_i$ are friends in the SNS. You can assume that $x_i \\ne y_i$ ($1 \\leq i \\leq M$), and ($x_i \\ne x_j$ or $y_i \\ne y_j$) and ($x_i \\ne y_j$ or $y_i \\ne x_j$) if $i \\ne j$ ($1 \\leq i, j \\leq M$). You can also assume that a message can be delivered from any student to any student in the SNS via the friends and group chat.\n</p>\n\n<h3>Output</h3>\n<p>\nOutput the minimum number of communications between friends (not including group chat) to broadcast a message among all the Society members, and the ID of the student to whom the administrator should tell the message in order to achieve the minimum number of communications, separated by a single space. If there are multiple students that satisfy the above constraints, output the minimum ID of such students.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n4 2 1 1\n1 2\n3\n4\n3\n1 2\n2 4\n3 4\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n2 1\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n4 1 1 1\n2\n3\n4\n4\n1 2\n1 3\n1 4\n2 4\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n3 1\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n8 1 2 2\n5\n4 6\n3 8\n7\n1 2\n2 3\n3 4\n5 6\n6 7\n7 8\n2 6\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n2 3\n</pre>", "p01836": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Shortest Bridge</h2>\n\n<p>\nThere is a city whose shape is a 1,000 $\\times$ 1,000 square. The city has a big river, which flows from the north to the south and separates the city into just two parts: the west and the east.\n</p>\n\n<p>\nRecently, the city mayor has decided to build a highway from a point $s$ on the west part to a point $t$ on the east part. A highway consists of a bridge on the river, and two roads: one of the roads connects $s$ and the west end of the bridge, and the other one connects $t$ and the east end of the bridge. Note that each road doesn't have to be a straight line, but the intersection length with the river must be zero.\n</p>\n\n<p>\nIn order to cut building costs, the mayor intends to build a highway satisfying the following conditions:\n</p>\n\n<ul>\n<li> Since bridge will cost more than roads, at first the length of a bridge connecting the east part and the west part must be as short as possible.</li>\n<li> Under the above condition, the sum of the length of two roads is minimum.</li>\n</ul>\n\n<p>\nYour task is to write a program computing the total length of a highway satisfying the above conditions.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case. The test case is formatted as follows.<br/>\n<br/>\n$sx$ $sy$ $tx$ $ty$<br/>\n$N$<br/>\n$wx_1$ $wy_1$<br/>\n...<br/>\n$wx_N$ $wy_N$<br/>\n$M$<br/>\n$ex_1$ $ey_1$<br/>\n...<br/>\n$ex_M$ $ey_M$<br/>\n</p>\n\n<p>\nAt first, we refer to a point on the city by a coordinate ($x, y$): the distance from the west side is $x$ and the distance from the north side is $y$.\n</p>\n\n<p>\nThe first line contains four integers $sx$, $sy$, $tx$, and $ty$ ($0 \\leq sx, sy, tx, ty \\leq 1,000$): points $s$ and $t$ are located at ($sx, sy$) and ($tx, ty$) respectively. The next line contains an integer $N$ ($2 \\leq N \\leq 20$), where $N$ is the number of points composing the west riverside. Each of the following $N$ lines contains two integers $wx_i$ and $wy_i$ ($0 \\leq wx_i, wy_i \\leq 1,000$): the coordinate of the $i$-th point of the west riverside is ($wx_i, wy_i$). The west riverside is a polygonal line obtained by connecting the segments between ($wx_i, wy_i$) and ($wx_{i+1}, wy_{i+1}$) for all $1 \\leq i \\leq N -1$. The next line contains an integer $M$ ($2 \\leq M \\leq 20$), where $M$ is the number of points composing the east riverside. Each of the following $M$ lines contains two integers $ex_i$ and $ey_i$ ($0 \\leq ex_i, ey_i \\leq 1,000$): the coordinate of the $i$-th point of the east riverside is ($ex_i, ey_i$). The east riverside is a polygonal line obtained by connecting the segments between ($ex_i, ey_i$) and ($ex_{i+1}, ey_{i+1}$) for all $1 \\leq i \\leq M - 1$.\n</p>\n\n<p>\nYou can assume that test cases are under the following conditions.\n</p>\n<ul>\n<li> $wy_1$ and $ey_1$ must be 0, and $wy_N$ and $ey_M$ must be 1,000.</li>\n<li> Each polygonal line has no self-intersection.</li>\n<li> Two polygonal lines representing the west and the east riverside have no cross point.</li>\n<li> A point $s$ must be on the west part of the city. More precisely, $s$ must be on the region surrounded by the square side of the city and the polygonal line of the west riverside and not containing the east riverside points.</li>\n<li> A point $t$ must be on the east part of the city. More precisely, $t$ must be on the region surrounded by the square side of the city and the polygonal line of the east riverside and not containing the west riverside points.</li>\n<li> Each polygonal line intersects with the square only at the two end points. In other words, $0 < wx_i, wy_i < 1,000$ holds for $2 \\leq i \\leq N - 1$ and $0 < ex_i, ey_i < 1,000$ holds for $2 \\leq i \\leq M - 1$.</li>\n</ul>\n\n\n<h3>Output</h3>\n<p>\nOutput single-space separated two numbers in a line: the length of a bridge and the total length of a highway (i.e. a bridge and two roads) satisfying the above mayor's demand. The output can contain an absolute or a relative error no more than $10^{-8}$.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n200 500 800 500\n3\n400 0\n450 500\n400 1000\n3\n600 0\n550 500\n600 1000\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n100 600\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n300 300 700 100\n5\n300 0\n400 100\n300 200\n400 300\n400 1000\n4\n700 0\n600 100\n700 200\n700 1000\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n200 541.421356237\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n300 400 700 600\n2\n400 0\n400 1000\n2\n600 0\n600 1000\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n200 482.842712475\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n200 500 800 500\n3\n400 0\n450 500\n400 1000\n5\n600 0\n550 500\n600 100\n650 500\n600 1000\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n<pre>\n100 1200.326482915\n</pre>\n", "p01837": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Longest Shortest Path</h2>\n\n<p>\nYou are given a directed graph and two nodes $s$ and $t$. The given graph may contain multiple edges between the same node pair but not self loops. Each edge $e$ has its initial length $d_e$ and the cost $c_e$. You can extend an edge by paying a cost. Formally, it costs $x \\cdot c_e$ to change the length of an edge $e$ from $d_e$ to $d_e + x$. (Note that $x$ can be a non-integer.) Edges cannot be shortened.\n</p>\n\n<p>\nYour task is to maximize the length of the shortest path from node $s$ to node $t$ by lengthening some edges within cost $P$. You can assume that there is at least one path from $s$ to $t$.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case formatted as follows.<br/>\n<br/>\n$N$ $M$ $P$ $s$ $t$<br/>\n$v_1$ $u_1$ $d_1$ $c_1$<br/>\n...<br/>\n$v_M$ $u_M$ $d_M$ $c_M$<br/>\n</p>\n\n<p>\nThe first line contains five integers $N$, $M$, $P$, $s$, and $t$: $N$ ($2 \\leq N \\leq 200$) and $M$ ($1 \\leq M \\leq 2,000$) are the number of the nodes and the edges of the given graph respectively, $P$ ($0 \\leq P \\leq 10^6$) is the cost limit that you can pay, and $s$ and $t$ ($1 \\leq s, t \\leq N, s \\ne t$) are the start and the end node of objective path respectively. Each of the following $M$ lines contains four integers $v_i$, $u_i$, $d_i$, and $c_i$, which mean there is an edge from $v_i$ to $u_i$ ($1 \\leq v_i, u_i \\leq N, v_i \\ne u_i$) with the initial length $d_i$ ($1 \\leq d_i \\leq 10$) and the cost $c_i$ ($1 \\leq c_i \\leq 10$).\n</p>\n\n<h3>Output</h3\n<p>\nOutput the maximum length of the shortest path from node $s$ to node $t$ by lengthening some edges within cost $P$. The output can contain an absolute or a relative error no more than $10^{-6}$.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n3 2 3 1 3\n1 2 2 1\n2 3 1 2\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n6.0000000\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n3 3 2 1 3\n1 2 1 1\n2 3 1 1\n1 3 1 1\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n2.5000000\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n3 4 5 1 3\n1 2 1 2\n2 3 1 1\n1 3 3 2\n1 3 4 1\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n4.2500000\n</pre>\n", "p01880": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>Best Matched Pair</h2>\n\n<p>\nYou are working for a worldwide game company as an engineer in Tokyo. This company holds an annual event for all the staff members of the company every summer. This year's event will take place in Tokyo. You will participate in the event on the side of the organizing staff. And you have been assigned to plan a recreation game which all the participants will play at the same time.\n</p>\n\n<p>\nAfter you had thought out various ideas, you designed the rules of the game as below.\n</p>\n\n<ul>\n<li> Each player is given a positive integer before the start of the game.</li>\n<li> Each player attempts to make a pair with another player in this game, and formed pairs compete with each other by comparing the products of two integers.</li>\n<li> Each player can change the partner any number of times before the end of the game, but cannot have two or more partners at the same time.</li>\n<li> At the end of the game, the pair with the largest product wins the game.</li>\n</ul>\n\n<p>\nIn addition, regarding the given integers, the next condition must be satisfied for making a pair.\n</p>\n\n<ul>\n<li> The sequence of digits obtained by considering the product of the two integers of a pair as a string must be increasing and consecutive from left to right. For example, 2, 23, and 56789 meet this condition, but 21, 334, 135 or 89012 do not.</li>\n</ul>\n\n<p>\nSetting the rules as above, you noticed that multiple pairs may be the winners who have the same product depending on the situation. However, you can find out what is the largest product of two integers when a set of integers is given.\n</p>\n\n<p>\nYour task is, given a set of distinct integers which will be assigned to the players, to compute the largest possible product of two integers, satisfying the rules of the game mentioned above.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case formatted as follows.<br/>\n<br/>\n$N$<br/>\n$a_1$ $a_2$ ... $a_N$<br/>\n</p>\n\n<p>\nThe first line contains a positive integer $N$ which indicates the number of the players of the game. $N$ is an integer between 1 and 1,000. The second line has $N$ positive integers that indicate the numbers given to the players. For $i = 1, 2, ... , N - 1$, there is a space between $a_i$ and $a_{i+1}$. $a_i$ is between 1 and 10,000 for $i = 1, 2, ..., N$, and if $i \\ne j$, then $a_i \\ne a_j$.\n</p>\n\n\n<h3>Output</h3>\n<p>\nPrint the largest possible product of the two integers satisfying the conditions for making a pair. If any two players cannot make a pair, print -1.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n2\n1 2\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n2\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n3\n3 22 115\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n345\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n2\n1 11\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n-1\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n2\n5 27\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n<pre>\n-1\n</pre>\n\n<h3>Sample Input 5</h3>\n<pre>\n2\n17 53\n</pre>\n\n<h3>Output for the Sample Input 5</h3>\n<pre>\n-1\n</pre>\n\n<h3>Sample Input 6</h3>\n<pre>\n10\n53 43 36 96 99 2 27 86 93 23\n</pre>\n\n<h3>Output for the Sample Input 6</h3>\n<pre>\n3456\n</pre>", "p01882": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>We don't wanna work!</h2>\n\n<p>\nACM is an organization of programming contests. The purpose of ACM does not matter to you. The only important thing is that workstyles of ACM members are polarized: each member is either a workhorse or an idle fellow.\n</p>\n\n<p>\nEach member of ACM has a motivation level. The members are ranked by their motivation levels: a member who has a higher motivation level is ranked higher. When several members have the same value of motivation levels, the member who joined ACM later have a higher rank. The top 20% highest ranked members work hard, and the other (80%) members never (!) work. Note that if 20% of the number of ACM members is not an integer, its fraction part is rounded down.\n</p>\n\n<p>\nYou, a manager of ACM, tried to know whether each member is a workhorse or an idle fellow to manage ACM. Finally, you completed to evaluate motivation levels of all the current members. However, your task is not accomplished yet because the members of ACM are dynamically changed from day to day due to incoming and outgoing of members. So, you want to record transitions of members from workhorses to idle fellows, and vice versa.\n</p>\n\n<p>\nYou are given a list of the current members of ACM and their motivation levels in chronological order of their incoming date to ACM. You are also given a list of incoming/outgoing of members in chronological order.\n</p>\n\n<p>\nYour task is to write a program that computes changes of workstyles of ACM members.\n</p>\n\n<h3>Input</h3>\n\n<p>\nThe first line of the input contains a single integer $N$ ($1 \\leq N \\leq 50,000$) that means the number of initial members of ACM. The ($i$ + 1)-th line of the input contains a string $s_i$ and an integer $a_i$ ($0 \\leq a_i \\leq 10^5$), separated by a single space. $s_i$ means the name of the $i$-th initial member and $a_i$ means the motivation level of the $i$-th initial member. Each character of $s_i$ is an English letter, and $1 \\leq |s_i| \\leq 20$. Note that those $N$ lines are ordered in chronological order of incoming dates to ACM of each member.\n</p>\n\n<p>\nThe ($N$ + 2)-th line of the input contains a single integer $M$ ($1 \\leq M \\leq 20,000$) that means the number of changes of ACM members. The ($N$ + 2 + $j$)-th line of the input contains information of the $j$-th incoming/outgoing member. When the $j$-th information represents an incoming of a member, the information is formatted as \"$+ t_j b_j$\", where $t_j$ is the name of the incoming member and $b_j$ ($0 \\leq b_j \\leq 10^5$) is his motivation level. On the other hand, when the $j$-th information represents an outgoing of a member, the information is formatted as \"$- t_j$\", where $t_j$ means the name of the outgoing member. Each character of $t_j$ is an English letter, and $1 \\leq |t_j| \\leq 20$. Note that uppercase letters and lowercase letters are distinguished. Note that those $M$ lines are ordered in chronological order of dates when each event happens.\n</p>\n\n<p>\nNo two incoming/outgoing events never happen at the same time. No two members have the same name, but members who left ACM once may join ACM again.\n</p>\n\n<h3>Output</h3>\n<p>\nPrint the log, a sequence of changes in chronological order. When each of the following four changes happens, you should print a message corresponding to the type of the change as follows:\n</p>\n\n<ul>\n<li> Member $name$ begins to work hard : \"$name$ is working hard now.\"</li>\n<li> Member $name$ begins to not work : \"$name$ is not working now.\"</li>\n</ul>\n\n<p>\nFor each incoming/outgoing, changes happen in the following order:\n</p>\n\n<ol>\n<li> Some member joins/leaves.</li>\n<li> When a member joins, the member is added to either workhorses or idle fellows.</li>\n<li> Some member may change from a workhorse to an idle fellow and vice versa. Note that there are no cases such that two or more members change their workstyles at the same time.</li>\n</ol>\n\n<h3>Sample Input 1</h3>\n<pre>\n4\nDurett 7\nGayles 3\nFacenda 6\nDaughtery 0\n1\n+ Mccourtney 2\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\nMccourtney is not working now.\nDurett is working hard now.\n</pre>\n\n<p>\nInitially, no member works because $4 \\times 20$% $< 1$. When one member joins ACM, Durrett begins to work hard.\n</p>\n\n\n<h3>Sample Input 2</h3>\n<pre>\n3\nBurdon 2\nOrlin 8\nTrumper 5\n1\n+ Lukaszewicz 7\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\nLukaszewicz is not working now.\n</pre>\n\n<p>No member works.</p>\n\n<h3>Sample Input 3</h3>\n<pre>\n5\nAndy 3\nBob 4\nCindy 10\nDavid 1\nEmile 1\n3\n+ Fred 10\n- David\n+ Gustav 3\n</pre>\n\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\nFred is working hard now.\nCindy is not working now.\nGustav is not working now.\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n7\nLaplant 5\nVarnes 2\nWarchal 7\nDegregorio 3\nChalender 9\nRascon 5\nBurdon 0\n7\n+ Mccarroll 1\n- Chalender\n+ Orlin 2\n+ Chalender 1\n+ Marnett 10\n- Chalender\n+ Chalender 0\n</pre>\n\n\n<h3>Output for the Sample Input 4</h3>\n<pre>\nMccarroll is not working now.\nWarchal is working hard now.\nOrlin is not working now.\nChalender is not working now.\nMarnett is working hard now.\nWarchal is not working now.\nChalender is not working now.\nWarchal is working hard now.\n</pre>\n<p>\nSome member may repeat incoming and outgoing.\n</p>\n\n<h3>Sample Input 5</h3>\n<pre>\n4\nAoba 100\nYun 70\nHifumi 120\nHajime 50\n2\n- Yun\n- Aoba\n</pre>\n\n<h3>Output for the Sample Input 5</h3>\n<pre>\n(blank)\n</pre>\n", "p01881": "<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Help the Princess!</h2>\n\n<p>\nThe people of a certain kingdom make a revolution against the bad government of the princess. The revolutionary army invaded the royal palace in which the princess lives. The soldiers of the army are exploring the palace to catch the princess. Your job is writing a program to decide that the princess can escape from the royal palace or not.\n</p>\n\n<p>\n For simplicity, the ground of the palace is a rectangle divided into a grid. There are two kinds of cells in the grid: one is a cell that soldiers and the princess can enter, the other is a cell that soldiers or the princess cannot enter. We call the former an empty cell, the latter a wall. The princess and soldiers are in different empty cells at the beginning. There is only one escape hatch in the grid. If the princess arrives the hatch, then the princess can escape from the palace. There are more than or equal to zero soldiers in the palace.\n</p>\n\n<p>\nThe princess and all soldiers take an action at the same time in each unit time. In other words, the princess and soldiers must decide their action without knowing a next action of the other people. In each unit time, the princess and soldiers can move to a horizontally or vertically adjacent cell, or stay at the current cell. Furthermore the princess and soldiers cannot move out of the ground of the palace. If the princess and one or more soldiers exist in the same cell after their move, then the princess will be caught. It is guaranteed that the princess can reach the escape hatch via only empty cells if all soldiers are removed from the palace.\n</p>\n\n<p>\nIf there is a route for the princess such that soldiers cannot catch the princess even if soldiers make any moves, then the princess can escape the soldiers. Note that if the princess and a soldier arrive the escape hatch at the same time, the princess will be caught. Can the princess escape from the palace?\n</p>\n\n\n<h3>Input</h3>\n<p>\nEach dataset is formatted as follows.<br/>\n<br/>\n$H$ $W$<br/>\n$map_1$<br/>\n$map_2$<br/>\n...<br/>\n$map_H$<br/>\n</p>\n\n\n<p>\nThe first line of a dataset contains two positive integers $H$ and $W$ delimited by a space, where $H$ is the height of the grid and $W$ is the width of the grid ($2 \\leq H, W \\leq 200$).\n</p>\n\n<p>\nThe $i$-th line of the subsequent $H$ lines gives a string $map_i$, which represents situation in the ground of palace.\n</p>\n\n<p>\n$map_i$ is a string of length $W$, and the $j$-th character of $map_i$ represents the state of the cell of the $i$-th row and the $j$-th column.\n</p>\n\n<p>\n'@', '\\$', '%', '.', and '#' represent the princess, a soldier, the escape hatch, an empty cell, and a wall, respectively. It is guaranteed that there exists only one '@', only one '%', and more than or equal to zero '\\$' in the grid.\n</p>\n\n<h3>Output</h3>\n<p>\nOutput a line containing a word \"Yes\", if the princess can escape from the palace. Otherwise, output \"No\".\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n2 4\n%.@\\$\n..\\$\\$\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\nYes\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n3 4\n.%..\n.##.\n.@\\$.\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\nYes\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n2 3\n%\\$@\n###\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\nNo\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n2 3\n@#\\$\n.%.\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n<pre>\nNo\n</pre>\n\n<h3>Sample Input 5</h3>\n<pre>\n2 2\n@%\n..\n</pre>\n\n<h3>Output for the Sample Input 5</h3>\n<pre>\nYes\n</pre>\n", "p01884": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>Similarity of Subtrees</h2>\n\n<p>\nDefine the depth of a node in a rooted tree by applying the following rules recursively:\n</p>\n\n<ul>\n<li> The depth of a root node is 0.</li>\n<li> The depths of child nodes whose parents are with depth $d$ are $d + 1$.</li>\n</ul>\n\n<p>\nLet $S(T, d)$ be the number of nodes of $T$ with depth $d$. Two rooted trees $T$ and $T'$ are similar if and only if $S(T, d)$ equals $S(T', d)$ for all non-negative integer $d$.\n</p>\n\n<p>\nYou are given a rooted tree $T$ with $N$ nodes. The nodes of $T$ are numbered from 1 to $N$. Node 1 is the root node of $T$. Let $T_i$ be the rooted subtree of $T$ whose root is node $i$. Your task is to write a program which calculates the number of pairs $(i, j)$ such that $T_i$ and $T_j$ are similar and $i < j$.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case.<br/>\n<br/>\n$N$<br/>\n$a_1$ $b_1$<br/>\n$a_2$ $b_2$<br/>\n...<br/>\n$a_{N-1}$ $b_{N-1}$\n</p>\n\n<p>\nThe first line contains an integer $N$ ($1 \\leq N \\leq 100,000$), which is the number of nodes in a tree. The following $N -1$ lines give information of branches: the $i$-th line of them contains $a_i$ and $b_i$, which indicates that a node $a_i$ is a parent of a node $b_i$. ($1 \\leq a_i, b_i \\leq N, a_i \\ne b_i$) The root node is numbered by 1. It is guaranteed that a given graph is a rooted tree, i.e. there is exactly one parent for each node except the node 1, and the graph is connected.\n</p>\n\n<h3>Output</h3>\n<p>\nPrint the number of the pairs $(x, y)$ of the nodes such that the subtree with the root $x$ and the subtree with the root $y$ are similar and $x < y$.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n5\n1 2\n1 3\n1 4\n1 5\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n6\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n6\n1 2\n2 3\n3 4\n1 5\n5 6\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n2\n</pre>\n\n<h3>Sample Input 3</h3>\n<Pre>\n13\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n6 10\n7 11\n8 12\n11 13\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n14\n</pre>", "p01885": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n<h2>Escape from the Hell</h2>\n\n<p>\nOne day, Buddha looked into the hell and found an office worker. He did evil, such as enforcing hard work on his subordinates. However, he made only one good in his life. He refused an unreasonable request from his customer to save the lives of his subordinates. Buddha thought that, as the reward of the good, the office worker should have had a chance to escape from the hell. Buddha took a spider silk and put down to the hell.\n</p>\n\n<p>\nThe office worker climbed up with the spider silk, however the length of the way $L$ meters was too long to escape one day. He had $N$ energy drinks and drunk one of them each day. The day he drunk the i-th energy drink he could climb $A_i$ meters in the daytime and after that slided down $B_i$ meters in the night. If he could reach at the height greater than or equal to the $L$ meters in the daytime, he could escape without sliding down. After the $N$ days the silk would be cut.\n</p>\n\n<p>\nHe realized that other sinners climbed the silk in the night. They climbed $C_i$ meters in the $i$-th night without sliding down in the daytime. If they catched up with the office worker, they should have conflicted and the silk would be cut. Therefore he needed to escape before other sinners catched him. Your task is to write a program computing the best order of energy drink and output the earliest day which he could escape. If he could not escape, your program should output -1.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case.<br/>\n<br/>\n$N$ $L$<br/>\n$A_1$ $B_1$<br/>\n$A_2$ $B_2$<br/>\n...<br/>\n$A_N$ $B_N$<br/>\n$C_1$<br/>\n$C_2$<br/>\n...<br/>\n$C_N$\n</p>\n\n<p>\nThe first line contains two integers $N$ ($1 \\leq N \\leq 10^5$) and $L$ ($1 \\leq L \\leq 10^9$), which mean the number of energy drinks and the length of the spider silk respectively. The following $N$ lines show the information of the drinks: the $i$-th of them indicates the $i$-th energy drink, he climbed up $A_i$ ($1 \\leq A_i \\leq 10^9$) meters and slided down $B_i$ ($1 \\leq B_i \\leq 10^9$) meters. Next $N$ lines show how far other sinners climbed: the $i$-th of them contains an integer $C_i$ ($1 \\leq C_i \\leq 10^9$), which means they climbed up $C_i$ meters in the $i$-th day.\n</p>\n\n<h3>Output</h3>\n<p>\nPrint the earliest day which he could escape. If he could not escape, print -1 instead.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n3 9\n6 3\n5 2\n3 1\n2\n2\n2\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n2\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n5 20\n3 2\n4 2\n6 3\n8 4\n10 5\n4\n2\n3\n4\n5\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n-1\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n5 20\n6 5\n7 3\n10 3\n10 14\n4 7\n2\n5\n3\n9\n2\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n3\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n4 12\n8 4\n6 4\n2 1\n2 1\n1\n1\n4\n4\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n<pre>\n-1\n</pre>\n", "p01888": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Multisect</h2>\n\n<p>\nWe are developing the world's coolest AI robot product. After the long struggle, we finally managed to send our product at revision $R_{RC}$ to QA team as a release candidate. However, they reported that some tests failed! Because we were too lazy to set up a continuous integration system, we have no idea when our software corrupted. We only know that the software passed all the test at the past revision $R_{PASS}$. To determine the revision $R_{ENBUG}$ ($R_{PASS} < R_{ENBUG} \\leq R_{RC}$) in which our software started to fail, we must test our product revision-by-revision.\n</p>\n\n<p>\nHere, we can assume the following conditions:\n</p>\n\n<ul>\n<li> When we test at the revision $R$, the test passes if $R < R_{ENBUG}$, or fails otherwise.</li>\n<li> It is equally possible, which revision between $R_{PASS} + 1$ and $R_{RC}$ is $R_{ENBUG}$.</li>\n</ul>\n\n<p>\nFrom the first assumption, we don't need to test all the revisions. All we have to do is to find the revision $R$ such that the test at $R - 1$ passes and the test at $R$ fails. We have $K$ testing devices. Using them, we can test at most $K$ different revisions simultaneously. We call this \"parallel testing\". By the restriction of the testing environment, we cannot start new tests until a current parallel testing finishes, even if we don't use all the $K$ devices.\n</p>\n\n<p>\nParallel testings take some cost. The more tests fail, the more costly the parallel testing becomes. If $i$ tests fail in a parallel testing, its cost is $T_i$ ($0 \\leq i \\leq K$). And if we run parallel testings multiple times, the total cost is the sum of their costs.\n</p>\n\n<p>\nOf course we want to minimize the total cost to determine $R_{ENBUG}$, by choosing carefully how many and which revisions to test on each parallel testing. What is the minimum expected value of the total cost if we take an optimal strategy?\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case with the following format.<br/>\n<br/>\n$R_{PASS}$ $R_{RC}$ $K$<br/>\n$T_0$ $T_1$ ... $T_K$\n</p>\n\n<p>\n$R_{PASS}$ and $R_{RC}$ are integers that represent the revision numbers of our software at which the test passed and failed, respectively. $1 \\leq R_{PASS} < R_{RC} \\leq 1,000$ holds. $K$ ($1 \\leq K \\leq 30$) is the maximum number of revisions we can test in a single parallel testing. $T_i$ is an integer that represents the cost of a parallel testing in which $i$ tests fail ($0 \\leq i \\leq K$). You can assume $1 \\leq T_0 \\leq T_1 \\leq ... \\leq T_K \\leq 100,000$.\n</p>\n\n\n<h3>Output</h3>\n<p>\nOutput the minimum expected value of the total cost. The output should not contain an error greater than 0.0001.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n1 10 2\n1 1 1\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n2.0\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n1 100 1\n100 100\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n670.7070707\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n100 200 4\n1 1 2 2 3\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n4.6400000\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n2 3 4\n1 2 3 4 5\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n<pre>\n0.0\n</pre>\n\n<h3>Sample Input 5</h3>\n<pre>\n998 1000 4\n10 100 1000 10000 100000\n</pre>\n\n<h3>Output for the Sample Input 5</h3>\n<pre>\n55.0\n</pre>\n", "p01886": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Share the Ruins Preservation</h2>\n\n<p>\nTwo organizations International Community for Preservation of Constructions (ICPC) and Japanese Archaeologist Group (JAG) engage in ruins preservation. Recently, many ruins were found in a certain zone. The two organizations decided to share the preservation of the ruins by assigning some of the ruins to ICPC and the other ruins to JAG.\n</p>\n\n<p>\nNow, ICPC and JAG make a rule for assignment as follows:\n</p>\n\n<ol>\n<li> Draw a vertical straight line from the north to the south, avoiding to intersect ruins.</li>\n<li> Ruins located to the west of the line are preserved by ICPC. On the other hand, ruins located to the east of the line are preserved by JAG. (It is possible that no ruins are located to the east/west of the line; in this case, ICPC/JAG will preserve no ruins.)</li>\n</ol>\n\n<p>\nA problem is where to draw a straight line. For each organization, the way to preserve its assigned ruins is to make exactly one fence such that all the assigned ruins are in the region surrounded by the fence. Furthermore, they should minimize the length of such a fence for their budget. If the surrounded areas are vast, expensive costs will be needed to maintain the inside of areas. Therefore, they want to minimize the total preservation cost, i.e. the sum of the areas surrounded by two fences. Your task is to write a program computing the minimum sum of the areas surrounded by two fences, yielded by drawing an appropriate straight line.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case.<br/>\n<br/>\n$N$<br/>\n$x_1$ $y_1$<br/>\n$x_2$ $y_2$<br/>\n...<br/>\n$x_N$ $y_N$\n</p>\n\n<p>\nThe first line contains an integer $N$ ($1 \\leq N \\leq 100,000$), which is the number of founded ruins. The following $N$ lines represent the location of the ruins. The $i$-th line of them consists of two integers $x_i$ and $y_i$, which indicate the location of the $i$-th ruin is $x_i$ east and $y_i$ north from a certain location in the zone. You can assume the following things for the ruins:\n</p>\n\n<ul>\n<li>$-10^9 \\leq x_i, y_i \\leq 10^9$</li>\n<li>You can ignore the sizes of ruins. That is, you can assume ruins are points.</li>\n<li>No pair of ruins has the same location.</li>\n</ul>\n\n<h3>Output</h3>\n\n<p>\nPrint the minimum total preservation cost yielded by drawing an appropriate straight line. You should round off the cost to the nearest integer.\n</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n8\n-10 0\n-10 5\n-5 5\n-5 0\n10 0\n10 -5\n5 -5\n5 0\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n50\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n5\n0 0\n0 1\n0 2\n1 0\n1 1\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n0\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n6\n1 5\n1 6\n0 5\n0 -5\n-1 -5\n-1 -6\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n6\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n10\n2 5\n4 6\n9 5\n8 8\n1 3\n6 4\n5 9\n7 3\n7 7\n3 9\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n<pre>\n17\n</pre>", "p01889": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Compressed Formula</h2>\n\n<p>\nYou are given a simple, but long formula in a compressed format. A compressed formula is a sequence of $N$ pairs of an integer $r_i$ and a string $s_i$, which consists only of digits ('0'-'9'), '+', '-', and '*'. To restore the original formula from a compressed formula, first we generate strings obtained by repeating $s_i$ $r_i$ times for all $i$, then we concatenate them in order of the sequence.\n</p>\n\n<p>\nYou can assume that a restored original formula is well-formed. More precisely, a restored formula satisfies the following BNF:\n</p>\n\n<pre>\n&lt;expression&gt; := &lt;term&gt; | &lt;expression&gt; '+' &lt;term&gt; | &lt;expression&gt; '-' &lt;term&gt;\n&lt;term&gt; := &lt;number&gt; | &lt;term&gt; * &lt;number&gt;\n&lt;number&gt; := &lt;digit&gt; | &lt;non-zero-digit&gt; &lt;number&gt;\n&lt;digit&gt; := '0' | &lt;non-zero-digit&gt;\n&lt;non-zero-digit&gt; := '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'\n</pre>\n\n<p>\nHere, '+' means addition, '-' means subtraction, and '*' means multiplication of integers.\n</p>\n\n<p>\nYour task is to write a program computing the answer of a given formula modulo 1,000,000,007, where $x$ modulo $m$ is a non-negative integer $r$ such that there exists an integer $k$ satisfying $x = km + r$ and $0 \\leq r < m$; it is guaranteed that such $r$ is uniquely determined for integers $x$ and $m$.\n</p>\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case.<br/>\n<br/>\n$N$<br/>\n$r_1$ $s_1$<br/>\n$r_2$ $s_2$<br/>\n...<br/>\n$r_N$ $s_N$\n</p>\n\n<p>\nThe first line contains a single integer $N$ ($1 \\leq N \\leq 10^4$), which is the length of a sequence of a compressed formula. The following $N$ lines represents pieces of a compressed formula. The $i$-th line consists of an integer $r_i$ ($1 \\leq r_i \\leq 10^9$) and a string $s_i$ ($1 \\leq |s_i| \\leq 10$), where $t_i$ is the number of repetition of $s_i$, and $s_i$ is a piece of an original formula. You can assume that an original formula, restored from a given compressed formula by concatenation of repetition of pieces, satisfies the BNF in the problem statement.\n</p>\n\n\n<h3>Output</h3>\n<p>\nPrint the answer of a given compressed formula modulo 1,000,000,007.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n1\n5 1\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n11111\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n2\n19 2*\n1 2\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n1048576\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n2\n1 1-10\n10 01*2+1\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n999999825\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n4\n3 12+45-12\n4 12-3*2*1\n5 12345678\n3 11*23*45\n</pre>\n\n<h3>Output for the Sample Input 4</h3>\n<pre>\n20008570\n</pre>\n", "p01890": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type='text/javascript' src='http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>\n</script>\n\n\n<h2>Non-redundant Drive</h2>\n\n<p>\nThe people of JAG kingdom hate redundancy. For example, the N cities in JAG kingdom are connected with just $N - 1$ bidirectional roads such that any city is reachable from any city through some roads. Under the condition, the number of paths from a city to another city is exactly one for all pairs of the cities. This is a non-redundant road network :)\n</p>\n\n<p>\nOne day, you, a citizen of JAG kingdom, decided to travel as many cities in the kingdom as possible with a car. The car that you will use has an infinitely large tank, but initially the tank is empty. The fuel consumption of your car is 1 liter per 1 km, i.e. it consumes 1 liter of gasoline to move 1 km.\n</p>\n\n<p>\nEach city has exactly one gas station, and you can supply $g_x$ liters of gasoline to your car at the gas station of the city $x$. Of course, you have a choice not to visit some of the gas stations in your travel. But you will not supply gasoline twice or more at the same gas station, because it is redundant. Each road in the kingdom has a distance between two cities: the distance of $i$-th road is $d_i$ km. You will not pass the same city or the same road twice or more, of course, because it is redundant.\n</p>\n\n<p>\nIf a quantity of stored gasoline becomes zero, the car cannot move, and hence your travel will end there. But then, you may concern about an initially empty tank. Don't worry. You can start at any gas station of the cities in the kingdom. Furthermore, each road directly connects the gas stations of the its two ends (because the spirit of non-redundancy avoids redundant moves in a city), you therefore can supply gasoline to your car even if your car tank becomes empty just when you arrive the city. \n</p>\n\n<p>\nYour task is to write a program computing the maximum number of cities so that you can travel under your non-redundancy policy.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe input consists of a single test case.<br/>\n<br/>\n$N$<br/>\n$g_1$ $g_2$ ...  $g_N$<br/>\n$a_1$ $b_1$ $d_1$<br/>\n$a_2$ $b_2$ $d_2$<br/>\n...<br/>\n$a_{N-1}$ $b_{N-1}$ $d_{N-1}$\n</p>\n\n<p>\nThe first line contains an integer $N$ ($1 \\leq N \\leq 100,000$), which is the number of cities in JAG kingdom. The second line contains $N$ integers: the $i$-th of them is $g_i$ ($1 \\leq g_i \\leq 10,000$), the amount of gasoline can be supplied at the gas station of the city $i$. The following $N - 1$ lines give information of roads: the $j$-th line of them contains $a_j$ and $b_j$ , which indicates that the $j$-th road bidirectionally connects the cities $a_j$ and $b_j$ ($1 \\leq a_j, b_j \\leq N, a_j \\ne b_j$) with distance $d_j$ ($1 \\leq d_j \\leq 10,000$). You can assume that all cities in the kingdom are connected by the roads.\n</p>\n\n<h3>Output</h3>\n<p>\nPrint the maximum number of cities you can travel from any city under the constraint such that you can supply gasoline at most once per a gas station.\n</p>\n\n\n<h3>Sample Input 1</h3>\n<pre>\n5\n5 8 1 3 5\n1 2 4\n2 3 3\n2 4 3\n1 5 7\n</pre>\n\n<h3>Output for the Sample Input 1</h3>\n<pre>\n4\n</pre>\n\n<h3>Sample Input 2</h3>\n<Pre>\n2\n10 1\n1 2 10\n</pre>\n\n<h3>Output for the Sample Input 2</h3>\n<pre>\n2\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n5\n1 3 5 1 1\n1 2 5\n2 3 3\n2 4 3\n1 5 5\n</pre>\n\n<h3>Output for the Sample Input 3</h3>\n<pre>\n3\n</pre>\n\n\n\n", "p01945": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nStar in Parentheses\n</H1>\n\n<p>\n  You are given a string $S$, which is balanced parentheses with a star symbol '<span>*</span>' inserted.\n</p>\n\n<p>\n  Any balanced parentheses can be constructed using the following rules:\n</p>\n\n<ul>\n<li>An empty string is balanced.</li>\n<li>Concatenation of two balanced parentheses is balanced.</li>\n<li>If $T$ is balanced parentheses, concatenation of '<span>(</span>', $T$, and '<span>)</span>' in this order is balanced.</li>\n</ul>\n\n<p>\n  For example, '<span>()()</span>' and '<span>(()())</span>' are balanced parentheses. '<span>)(</span>' and '<span>)()(()</span>' are not balanced parentheses.\n</p>\n\n<p>\n  Your task is to count how many matching pairs of parentheses surround the star.\n</p>\n\n<p>\nLet $S_i$be the $i$-th character of a string $S$. The pair of $S_l$ and $S_r$ ($l < r$) is called a matching pair of parentheses if $S_l$ is '<span>(</span>', $S_r$ is '<span>)</span>' and the surrounded string by them is balanced when ignoring a star symbol.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$S$\n</pre>\n\n<p>\n$S$ is balanced parentheses with exactly one '<span>*</span>' inserted somewhere. The length of $S$ is between 1 and 100, inclusive.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the answer in one line.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n((*)())\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n2\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n(*)\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n1\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n(()())*\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n0\n</pre>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n()*()\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\n0\n</pre>\n\n\n<H2>Sample Input 5</H2>\n<pre>\n((((((((((*))))))))))\n</pre>\n\n<H2>Output for Sample Input 5</H2>\n<pre>\n10\n</pre>\n\n<H2>Sample Input 6</H2>\n<pre>\n*\n</pre>\n\n<H2>Output for Sample Input 6</H2>\n<pre>\n0\n</pre>\n\n\n\n\n", "p01946": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nSlimming Plan\n</H1>\n\n<p>\n  Chokudai loves eating so much. However, his doctor Akensho told him that he was overweight, so he finally decided to lose his weight.\n</p>\n\n<p>\n  Chokudai made a slimming plan of a $D$-day cycle. It is represented by $D$ integers $w_0, ..., w_{D-1}$. His weight is $S$ on the 0-th day of the plan and he aims to reduce it to $T$ ($S > T$). If his weight on the $i$-th day of the plan is $x$, it will be $x + w_{i\\%D}$ on the $(i+1)$-th day. Note that $i\\%D$ is the remainder obtained by dividing $i$ by $D$. If his weight successfully gets less than or equal to $T$, he will stop slimming immediately.\n</p>\n\n<p>\n  If his slimming plan takes too many days or even does not end forever, he should reconsider it.\n</p>\n\n<p>\n  Determine whether it ends or not, and report how many days it takes if it ends.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$S$ $T$ $D$\n$w_0 ... w_{D-1}$\n</pre>\n\n<p>\n  The first line consists of three integers $S$, $T$, $D$ ($1 \\leq S, T, D \\leq 100,000, S > T$). The second line consists of $D$ integers $w_0, ..., w_{D-1}$ ($-100,000 \\leq w_i \\leq 100,000$ for each $i$).\n</p>\n\n\n<h2>Output</h2>\n<p>\n  If Chokudai's slimming plan ends on the $d$-th day, print $d$ in one line. If it never ends, print $-1$.\n</p>\n\n\n<h2>Sample Input 1</h2>\n<pre>\n65 60 3\n-2 3 -4\n</pre>\n\n<h2>Output for Sample Input 1</h2>\n<pre>\n4\n</pre>\n<p>\n  Chokudai's weight will change as follows: $65 \\rightarrow 63 \\rightarrow 66 \\rightarrow 62 \\rightarrow 60$.\n</p>\n\n\n<h2>Sample Input 2</h2>\n<pre>\n65 60 3\n-2 10 -3\n</pre>\n\n<h2>Output for Sample Input 2</h2>\n<pre>\n-1\n</pre>\n<p>\n  Chokudai's weight will change as follows: $65 \\rightarrow 63 \\rightarrow 73 \\rightarrow 70 \\rightarrow 68 \\rightarrow 78 \\rightarrow 75 \\rightarrow ...$.\n</p>\n  \n<h2>Sample Input 3</h2>\n<pre>\n100000 1 1\n-1\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n99999\n</pre>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n60 59 1\n-123\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\n1\n</pre>\n\n\n", "p01949": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nRoute Calculator\n</H1>\n\n<p>\n  You have a grid with $H$ rows and $W$ columns. $H + W$ is even. We denote the cell at the $i$-th row from the top and the $j$-th column from the left by ($i, j$). In any cell ($i, j$), an integer between $1$ and $9$ is written if $i+j$ is even, and either '<span>+</span>' or '<span>*</span>' is written if $i+j$ is odd.\n</p>\n\n<p>\nYou can get a mathematical expression by moving right or down $H + W - 2$ times from ($1, 1$) to ($H, W$) and concatenating all the characters written in the cells you passed in order. Your task is to maximize the calculated value of the resulting mathematical expression by choosing an arbitrary path from ($1, 1$) to ($H, W$). If the maximum value is $10^{15}$ or less, print the value. Otherwise, print $-1$.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a single test case in the format below.\n</p>\n\n<pre>\n$H$ $W$\n$a_{1,1}$ ... $a_{1,W}$\n...\n$a_{H,1}$ ... $a_{H,W}$\n</pre>\n\n<p>\nThe first line consists of two $H$ integers and $W$ ($1 \\leq H, W \\leq 50$). It is guaranteed that $H + W$ is even. The following $H$ lines represent the characters on the grid. $a_{i,j}$ represents the character written in the cell ($i, j$). In any cell ($i, j$), an integer between $1$ and $9$ is written if $i+j$ is even, and either '<span>+</span>' or '<span>*</span>' is written if $i+1$ is odd.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the answer in one line.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 3\n1+2\n+9*\n1*5\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n46\n</pre>\n\n<p>\nThe maximum value is obtained by passing through the following cells: $(1,1), (2,1), (2,2), (2,3), (3,3)$.\n</p>\n\n\n<H2>Sample Input 2</H2>\n<pre>\n1 31\n9*9*9*9*9*9*9*9*9*9*9*9*9*9*9*9\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n-1\n</pre>\n\n<p>\nYou can obtain $9^{16}$, but it's too large.\n</p>\n\n\n<H2>Sample Input 3</H2>\n<pre>\n5 5\n2+2+1\n+1+1+\n1+2+2\n+1+1+\n1+1+2\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n10\n</pre>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n9 7\n8+9*4*8\n*5*2+3+\n1*3*2*2\n*5*1+9+\n1+2*2*2\n*3*6*2*\n7*7+6*5\n*5+7*2+\n3+3*6+8\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\n86408\n</pre>\n\n\n\n\n", "p01950": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nEndless BFS\n</H1>\n\n<p>\nMr. Endo wanted to write the code that performs breadth-first search (BFS), which is a search algorithm to explore all vertices on an undirected graph. An example of pseudo code of BFS is as follows:\n</p>\n\n<pre>\n1: $current \\leftarrow \\{start\\_vertex\\}$\n2: $visited \\leftarrow current$\n3: while $visited \\ne $ the set of all the vertices\n4:   $found \\leftarrow \\{\\}$\n5:   for $v$ in $current$\n6:     for each $u$ adjacent to $v$\n7:       $found \\leftarrow found \\cup\\{u\\}$\n8:   $current \\leftarrow found \\setminus visited$\n9:   $visited \\leftarrow visited \\cup found$\n</pre>\n\n<p>\nHowever, Mr. Endo apparently forgot to manage visited vertices in his code. More precisely, he wrote the following\ncode:\n</p>\n\n<pre>\n1: $current \\leftarrow \\{start\\_vertex\\}$\n2: while $current \\ne $ the set of all the vertices\n3:   $found \\leftarrow \\{\\}$\n4:   for $v$ in $current$\n5:     for each $u$ adjacent to $v$\n6:       $found \\leftarrow found \\cup \\{u\\}$\n7:   $current \\leftarrow found$\n</pre>\n\n<p>\nYou may notice that for some graphs, Mr. Endo's program will not stop because it keeps running infinitely. Notice that it does not necessarily mean the program cannot explore all the vertices within finite steps. See example 2 below for more details.Your task here is to make a program that determines whether Mr. Endo's program will stop within finite steps for a given graph in order to point out the bug to him. Also, calculate the minimum number of loop iterations required for the program to stop if it is finite.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$N$ $M$\n$U_1$ $V_1$\n...\n$U_M$ $V_M$\n</pre>\n\n<p>\n  The first line consists of two integers $N$ ($2 \\leq N \\leq 100,000$) and $M$ ($1 \\leq M \\leq 100,000$), where $N$ is the number of vertices and $M$ is the number of edges in a given undirected graph, respectively. The $i$-th line of the following $M$ lines consists of two integers $U_i$ and $V_i$ ($1 \\leq U_i, V_i \\leq N$), which means the vertices $U_i$ and $V_i$ are adjacent in the given graph. The vertex 1 is the start vertex, i.e. $start\\_vertex$ in the pseudo codes. You can assume that the given graph also meets the following conditions.\n</p>\n\n<ul>\n<li>The graph has no self-loop, i.e., $U_i \\ne V_i$ for all $1 \\leq i \\leq M$.</li>\n<li>The graph has no multi-edge, i.e., $\\{Ui,Vi\\} \\ne \\{U_j,V_j\\}$ for all $1 \\leq i < j \\leq M$.</li>\n<li>The graph is connected, i.e., there is at least one path from $U$ to $V$ (and vice versa) for all vertices $1 \\leq U, V \\leq N$</li>\n</ul>\n\n\n<H2>Output</H2>\n\n<p>\nIf Mr. Endo's wrong BFS code cannot stop within finite steps for the given input graph, print -1 in a line. Otherwise, print the minimum number of loop iterations required to stop.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 3\n1 2\n1 3\n2 3\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n2\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n4 3\n1 2\n2 3\n3 4\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n-1\n</pre>\n\n<p>\nTransition of $current$ is $\\{1\\} \\rightarrow \\{2\\} \\rightarrow \\{1,3\\} \\rightarrow \\{2,4\\} \\rightarrow \\{1,3\\} \\rightarrow \\{2,4\\} \\rightarrow ... $. Although Mr. Endo's program will achieve to visit all the vertices (in 3 steps), will never become the same set as all the vertices.\n</p>\n\n\n<H2>Sample Input 3</H2>\n<pre>\n4 4\n1 2\n2 3\n3 4\n4 1\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n-1\n</pre>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n8 9\n2 1\n3 5\n1 6\n2 5\n3 1\n8 4\n2 7\n7 1\n7 4\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\n3\n</pre>\n\n\n\n\n", "p01951": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nLow Range-Sum Matrix\n</H1>\n\n<p>\n  You received a card at a banquet. On the card, a matrix of $N$ rows and $M$ columns and two integers $K$ and $S$ are written. All the elements in the matrix are integers, and an integer at the $i$-th row from the top and the $j$-th column from the left is denoted by $A_{i,j}$.\n</p>\n\n<p>\n  You can select up to $K$ elements from the matrix and invert the sign of the elements. If you can make a matrix such that there is no vertical or horizontal contiguous subsequence whose sum is greater than $S$, you can exchange your card for a prize.\n</p>\n\n<p>\nYour task is to determine if you can exchange a given card for a prize.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a single test case of the following form.\n</p>\n\n<pre>\n$N$ $M$ $K$ $S$\n$A_{1,1}$ $A_{1,2}$ ... $A_{1,M}$\n:\n$A_{N,1}$ $A_{N,2}$ ... $A_{N,M}$\n</pre>\n\n<p>\nThe first line consists of four integers $N, M, K$ and $S$ ($1 \\leq N, M \\leq 10, 1 \\leq K \\leq 5, 1 \\leq S \\leq 10^6$). The following $N$ lines represent the matrix in your card. The ($i+1$)-th line consists of $M$ integers $A_{i,1}, A_{i,2}, ..., A_{i, M}$ ($-10^5 \\leq A_{i,j} \\leq 10^5$).\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nIf you can exchange your card for a prize, print '<span>Yes</span>'. Otherwise, print '<span>No</span>'.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 3 2 10\n5 3 7\n2 6 1\n3 4 1\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\nYes\n</pre>\n\n<p>\nThe sum of a horizontal contiguous subsequence from $A_{1,1}$ to $A_{1,3}$ is $15$. The sum of a vertical contiguous subsequence from $A_{1,2}$ to $A_{3,2}$ is $13$. If you flip the sign of $A_{1,2}$, there is no vertical or horizontal contiguous subsequence whose sum is greater than $S$.\n</p>\n\n<H2>Sample Input 2</H2>\n<pre>\n2 3 1 5\n4 8 -2\n-2 -5 -3\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\nYes\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n2 3 1 5\n9 8 -2\n-2 -5 -3\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\nNo\n</pre>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n2 2 3 100\n0 0\n0 0\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\nYes\n</pre>\n\n\n\n\n", "p01948": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nJanken Master\n</H1>\n\n<p>\n  You are supposed to play the rock-paper-scissors game. There are $N$ players including you.\n</p>\n\n<p>\n  This game consists of multiple rounds. While the rounds go, the number of remaining players decreases. In each round, each remaining player will select an arbitrary shape independently. People who show rocks win if all of the other people show scissors. In this same manner, papers win rocks, scissors win papers. There is no draw situation due to the special rule of this game: if a round is tied based on the normal rock-paper-scissors game rule, the player who has the highest programming contest rating (this is nothing to do with the round!) will be the only winner of the round. Thus, some players win and the other players lose on each round. The losers drop out of the game and the winners proceed to a new round. They repeat it until only one player becomes the winner.\n</p>\n\n<p>\nEach player is numbered from $1$ to $N$. Your number is $1$. You know which shape the other $N-1$ players tend to\nshow, that is to say, you know the probabilities each player shows rock, paper and scissors. The $i$-th player shows rock with $r_i\\%$ probability, paper with $p_i\\%$ probability, and scissors with $s_i\\%$ probability. The rating of programming contest of the player numbered $i$ is $a_i$. There are no two players whose ratings are the same. Your task is to calculate your probability to win the game when you take an optimal strategy based on each player's tendency and rating.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$N$\n$a_1$\n$a_2$ $r_2$ $p_2$ $s_2$\n...\n$a_N$ $r_N$ $p_N$ $s_N$\n</pre>\n\n<p>\nThe first line consists of a single integer $N$ ($2 \\leq N \\leq 14$). The second line consists of a single integer\n$a_i$ ($1 \\leq a_i \\leq N$). The ($i+1$)-th line consists of four integers $a_i, r_i, p_i$ and $s_i$ ($1 \\leq a_i \\leq N, 0 \\leq r_i, p_i, s_i \\leq 100,$ $r_i + p_i + s_i = 100$) for $i=2, ..., N$. It is guaranteed that $a_1, ..., a_N$ are pairwise distinct.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the probability to win the game in one line. Your answer will be accepted if its absolute or relative error does not exceed $10^{-6}$.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n2\n2\n1 40 40 20\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n0.8\n</pre>\n\n<p>\nSince you have the higher rating than the other player, you will win the game if you win or draw in the first round.\n</p>\n\n<H2>Sample Input 2</H2>\n<pre>\n2\n1\n2 50 50 0\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n0.5\n</pre>\n\n<p>\nYou must win in the first round.\n</p>\n\n\n<H2>Sample Input 3</H2>\n<pre>\n3\n2\n1 50 0 50\n3 0 0 100\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n1\n</pre>\n\n<p>\nIn the first round, your best strategy is to show a rock. You will win the game with $50\\%$ in this round. With the other $50\\%$, you and the second player proceed to the second round and you must show a rock to win the game.\n</p>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n3\n2\n3 40 40 20\n1 30 10 60\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\n0.27\n</pre>\n\n<H2>Sample Input 5</H2>\n<pre>\n4\n4\n1 34 33 33\n2 33 34 33\n3 33 33 34\n</pre>\n\n<H2>Output for Sample Input 5</H2>\n<pre>\n0.6591870816\n</pre>\n\n\n\n\n\n\n", "p01955": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nPermutation Period\n</H1>\n\n<p>\n  You have a permutation $p$ of $N$ integers. Initially $p_i = i$ holds for $1 \\leq i \\leq N$. For each $j$ ($1 \\leq j \\leq N$), let's denote $p_{j}^0 = j$ and $p_{j}^k = p_{p_j}^{k-1}$ for any $k\\geq 1$. The <i>period</i> of $p$ is defined as the minimum positive integer $k$ which satisfies $p_{j}^k = j$ for every $j$ ($1 \\leq j \\leq N$).\n</p>\n\n<p>\n  You are given $Q$ queries. The $i$-th query is characterized by two distinct indices $x_i$ and $y_i$. For each query, swap $p_{x_i}$ and $p_{y_i}$ and then calculate the period of updated $p$ modulo $10^9 + 7$ in the given order.\n</p>\n\n<p>\nIt can be proved that the period of $p$ always exists.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a single test case of the following format.\n</p>\n\n<pre>\n$N$ $Q$\n$x_1$ $y_1$\n...\n$x_Q$ $y_Q$\n</pre>\n\n<p>\nThe first line consists of two integers $N$ and $Q$ ($2 \\leq N \\leq 10^5, 1 \\leq Q \\leq 10^5$). The ($i+1$)-th line consists of two integers $x_i$ and $y_i$ ($1 \\leq x_i, y_i \\leq N, x_i \\ne y_i$).\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the answer in one line for each query.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n5 4\n2 5\n2 4\n1 3\n1 2\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n2\n3\n6\n5\n</pre>\n\n<p>\n$p$ changes as follows: $[1,2,3,4,5] \\rightarrow [1,5,3,4,2] \\rightarrow [1,4,3,5,2] \\rightarrow [3,4,1,5,2] \\rightarrow [4,3,1,5,2]$.\n  </p>\n\n\n<H2>Sample Input 2</H2>\n<pre>\n2 2\n1 2\n1 2\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n2\n1\n</pre>\n\n<p>\n$p$ changes as follows: $[1,2] \\rightarrow [2,1] \\rightarrow [1,2]$.\n</p>\n\n\n<H2>Sample Input 3</H2>\n<pre>\n10 10\n5 6\n5 9\n8 2\n1 6\n8 1\n7 1\n2 6\n8 1\n7 4\n8 10\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n2\n3\n6\n4\n6\n7\n12\n7\n8\n9\n</pre>\n", "p01954": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nSum Source Detection\n</H1>\n\n<p>\n  JAG members began a game with integers. The game consists of $N + M + 1$ players: $N$ open number holders, $M$ secret number holders, and one answerer, you.\n</p>\n\n<p>\n  In the preparation, an integer $K$ is told to all $N + M + 1$ players. $N + M$ number holders choose their own integers per person under the following restrictions:\n</p>\n\n<ul>\n<li>Each holder owns a positive integer.</li>\n<li>The sum of all the integers equals $K$.</li>\n<li>Every integer owned by secret number holders is strictly less than any integers owned by open number holders.</li>\n</ul>\n\n<p>\n  After the choices, $N$ open number holders show their integers $O_1, ..., O_N$ to the answerer while secret number holders do not.\n</p>\n\n<p>\nThe game has $Q$ rounds. At the beginning of each round, $M$ secret number holders can change their numbers under\nthe above restrictions, while open number holders cannot. Then $N + M$ number holders select part of members among\nthem arbitrary, calculate the sum $X$ of the integers owned by the selected members, and tell $X$ to the answerer. For\neach round, the answerer tries to identify the definitely selected open number holders from the information $K$, $X$, and $O_1, ..., O_N$: The answerer will get points per actually selected open number holder in the answer. On the other hand, if the answer contains at least one non-selected member, you lose your points got in the round. Thus, the answerer, you, must answer only the open number holders such that the holders are definitely selected.\n</p>\n\n<p>\nYour task in this problem is to write a program to determine all the open number holders whose integers are necessary to the sum for each round in order to maximize your points.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$N$ $M$ $K$ $Q$\n$O_1$ ... $O_N$\n$X_1$ ... $X_Q$\n</pre>\n\n<p>\n  The first line consists of four integers $N, M, K,$ and $Q$. $N$ and $M$ are the numbers of open number holders and secret number holders respectively ($1 \\leq N, 0 \\leq M, N + M \\leq 40$). $K$ is an integer ($1 \\leq K \\leq 200,000$). $Q$ is the number of rounds of the game ($1 \\leq Q \\leq 10,000$).\n</p>\n\n<p>\n  The second line contains $N$ integers $O_1, ..., O_N$, as the $i$-th open number holder owns $O_i$ ($1 \\leq O_1 \\leq ... \\leq O_N \\leq K$).\n</p>\n\n<p>\n  The third line indicates $Q$ integers $X_1, ..., X_Q$ ($0 \\leq X_i \\leq K$). $X_i$ is the sum of the integers owned by the selected members in the $i$-th round.\n</p>\n\n<p>\n  It is guaranteed that there is at least one way to compose $X_i$. In other words, you can assume that there is at least one integer sequence $S_1, ..., S_M$, which represents integers owned by secret number holders, satisfying the followings:\n</p>\n\n<ul>\n<li>$0 < S_j < O_1$ for $1 \\leq j \\leq M$. Note that $O_1 = min_{1\\leq k \\leq N}O_k$ holds.</li>\n<li>$\\sum_{j=1}^N O_j + \\sum_{k=1}^M S_k = K$.</li>\n<li>There is at least one pair of subsets $U \\subseteq \\{1,...,N\\}$ and $V \\subseteq \\{1, ..., M\\}$ such that $\\sum_{j\\in U} O_j + \\sum_{k\\in V}S_k = X_i$ holds.</li>\n  </ul>\n\n<H2>Output</H2>\n\n<p>\nOn each sum $X_i$, print the indices of the open number holders whose integers are required to make up $X_i$. The output for each sum has to be printed in one line, in ascending order, and separated by a single space. If there is no open number holder whose integer is certainly used for $X_i$, print $-1$ in one line.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n2 2 23 2\n7 10\n9 10\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n1\n-1\n</pre>\n\n<p>\nThe first sum 9 can be achieved only by the first open number holder's 7 plus 2 of a secret number holder. In this case, secret number holders have 2 and 4. The second open number holder's 10 is a candidate for the second sum 10. The first open holder's 7 plus 3 is also possible one, as secret number holders have two 3s.\n</p>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n1 1 100 3\n51\n49 51 100\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n-1\n1\n1\n</pre>\n\n<p>\nThe only secret number holder owns 49. The output for the first sum is $-1$ because the open number holder's 51 is not selected.\n</p>\n\n\n<H2>Sample Input 3</H2>\n<pre>\n2 1 58152 4\n575 57500\n575 57577 77 0\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n1\n2\n-1\n-1\n</pre>\n\n<p>\nIn this case, the only secret number holder definitely has 77. The output for the last sum 0 is -1 because no integer of open number holders is needed to form 0.\n  </p>\n\n<H2>Sample Input 4</H2>\n<pre>\n3 2 1500 1\n99 300 1000\n99\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\n1\n</pre>\n\n<p>\nThe only way to compose 99 is to select the first open number holder only; secret number holders have two integers\nbetween 1 and 98, while the sum of them must be 101.\n</p>\n\n<H2>Sample Input 5</H2>\n<pre>\n3 2 20 19\n3 3 11\n1 2 3 4 5 6 7 8 9 11 12 13 14 15 16 17 18 19 20\n</pre>\n\n<H2>Output for Sample Input 5</H2>\n<pre>\n-1\n-1\n-1\n-1\n-1\n-1\n1 2\n1 2\n1 2\n3\n3\n3\n3\n3\n3\n3\n1 2 3\n1 2 3\n1 2 3\n</pre>\n\n<p>\nThe numbers owned by the two secret number holders are 1 and 2. At least one open number holder's 3 is required to\ncompose 5 and 6 respectively, but it is impossible to determine the definitely selected open number holder(s). On the other hand, 7 needs the two open number holders who both own 3.\n  </p>\n\n", "p01958": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nPrime-Factor Prime\n</H1>\n\n<p>\n  A positive integer is called a \"prime-factor prime\" when the number of its prime factors is prime. For example, $12$ is a prime-factor prime because the number of prime factors of $12 = 2 \\times 2 \\times 3$ is $3$, which is prime. On the other hand, $210$ is not a prime-factor prime because the number of prime factors of $210 = 2 \\times 3 \\times 5 \\times 7$ is $4$, which is a composite number.\n</p>\n\n<p>\nIn this problem, you are given an integer interval $[l, r]$. Your task is to write a program which counts the number of prime-factor prime numbers in the interval, i.e. the number of prime-factor prime numbers between $l$ and $r$, inclusive.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$l$ $r$\n</pre>\n\n<p>\nA line contains two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq 10^9$), which presents an integer interval $[l, r]$. You can assume that $0 \\leq r-l < 1,000,000$.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the number of prime-factor prime numbers in $[l,r]$.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n1 9\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n4\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n10 20\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n6\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n575 57577\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n36172\n</pre>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n180 180\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\n1\n</pre>\n\n\n\n<H2>Sample Input 5</H2>\n<pre>\n9900001 10000000\n</pre>\n\n<H2>Output for Sample Input 5</H2>\n<pre>\n60997\n</pre>\n\n\n\n<H2>Sample Input 6</H2>\n<pre>\n999000001 1000000000\n</pre>\n\n<H2>Output for Sample Input 6</H2>\n<pre>\n592955\n</pre>\n\n\n<p>\nIn the first example, there are 4 prime-factor primes in $[l,r]$: $4,6,8,$ and $9$.\n</p>\n\n\n", "p01959": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nRevenge of the Broken Door\n</H1>\n\n<p>\n  The JAG Kingdom consists of $N$ cities and $M$ bidirectional roads. The $i$-th road ($u_i, v_i, c_i$) connects the city $u_i$ and the city $v_i$ with the length $c_i$. One day, you, a citizen of the JAG Kingdom, decided to go to the city $T$ from the city $S$. However, you know that one of the roads in the JAG Kingdom is currently under construction and you cannot pass the road. You don't know which road it is. You can know whether a road is under construction only when you are in either city connected by the road.\n</p>\n\n<p>\nYour task is to minimize the total length of the route in the worst case. You don't need to decide a route in advance of departure and you can choose where to go next at any time. If you cannot reach the city $T$ in the worst case, output '-1'.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$N$ $M$ $S$ $T$\n$u_1$ $v_1$ $c_1$\n:\n$u_M$ $v_M$ $c_M$\n</pre>\n\n<p>\nThe first line contains four integers $N, M, S,$ and $T$, where $N$ is the number of the cities ($2 \\leq N \\leq 100,000$), $M$ is the number of the bidirectional roads ($1 \\leq M \\leq 200,000$), $S$ is the city you start from ($1 \\leq S \\leq N$), and $T$ is the city you want to reach to ($1 \\leq T \\leq N, S \\ne T$). The following $M$ lines represent road information: the $i$-th line of the $M$ lines consists of three integers $u_i, v_i, c_i,$ which means the $i$-th road connects the cities $u_i$ and $v_i$ ($1 \\leq u_i, v_i \\leq N, u_i \\ne v_i$) with the length $c_i$ ($1 \\leq c_i \\leq 10^9$). You can assume that all the pairs of the cities are connected if no road is under construction. That is, there is at least one route from city $x$ to city $y$ with given roads, for all cities $x$ and $y$. It is also guaranteed that there are no multiple-edges, i.e., $\\{u_i,v_i\\} \\ne \\{u_j,v_j\\}$ for all $1 \\leq i < j \\leq M$.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nOutput the minimum total length of the route in the worst case. If you cannot reach the city $T$ in the worst case, output '-1'.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 3 1 3\n1 2 1\n2 3 5\n1 3 3\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n6\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n4 4 1 4\n1 2 1\n2 4 1\n1 3 1\n3 4 1\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n4\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n5 4 4 1\n1 2 3\n2 3 4\n3 4 5\n4 5 6\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n-1\n</pre>", "p01957": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nTournament Chart\n</H1>\n\n<p>\n  In 21XX, an annual programming contest, Japan Algorithmist GrandPrix (JAG) has become one of the most popular mind sports events.\n</p>\n\n<p>\n  JAG is conducted as a knockout tournament. This year, $N$ contestants will compete in JAG. A tournament chart is represented as a string. '<span>[[a-b]-[c-d]]</span>' is an easy example. In this case, there are 4 contestants named a, b, c, and d, and all matches are described as follows:\n</p>\n\n<ul>\n<li>Match 1 is the match between a and b.</li>\n<li>Match 2 is the match between c and d.</li>\n<li>Match 3 is the match between [the winner of match 1] and [the winner of match 2].</li>\n</ul>\n\n<p>\n  More precisely, the tournament chart satisfies the following BNF:\n</p>\n\n<ul>\n<li>&lt;winner&gt; ::= &lt;person&gt; | \"[\" &lt;winner&gt; \"-\" &lt;winner&gt; \"]\"</li>\n<li>&lt;person&gt; ::= \"a\" | \"b\" | \"c\" | ... | \"z\"</li>\n</ul>\n\n<p>\n  You, the chairperson of JAG, are planning to announce the results of this year's JAG competition. However, you made a mistake and lost the results of all the matches. Fortunately, you found the tournament chart that was printed before all of the matches of the tournament. Of course, it does not contains results at all. Therefore, you asked every contestant for the number of wins in the tournament, and got $N$ pieces of information in the form of \"The contestant $a_i$ won $v_i$ times\".\n</p>\n\n<p>\nNow, your job is to determine whether all of these replies can be true.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of a single test case in the format below.\n</p>\n\n<pre>\n$S$\n$a_1$ $v_1$\n:\n$a_N$ $v_N$\n</pre>\n\n<p>\n$S$ represents the tournament chart. $S$ satisfies the above BNF. The following $N$ lines represent the information of the number of wins. The ($i+1$)-th line consists of a lowercase letter $a_i$ and a non-negative integer $v_i$ ($v_i \\leq 26$) separated by a space, and this means that the contestant $a_i$ won $v_i$ times. Note that $N$ ($2 \\leq N \\leq 26$) means that the number of contestants and it can be identified by string $S$. You can assume that each letter $a_i$ is distinct. It is guaranteed that $S$ contains each $a_i$ exactly once and doesn't contain any other lowercase letters.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint '<span>Yes</span>' in one line if replies are all valid for the tournament chart. Otherwise, print '<span>No</span>' in one line.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n[[m-y]-[a-o]]\no 0\na 1\ny 2\nm 0\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\nYes\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n[[r-i]-[m-e]]\ne 0\nr 1\ni 1\nm 2\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\nNo\n</pre>", "p01960": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nTree Separator\n</H1>\n\n<p>\nYou are given a tree $T$ and an integer $K$. You can choose arbitrary distinct two vertices $u$ and $v$ on $T$. Let $P$ be the simple path between $u$ and $v$. Then, remove vertices in $P$, and edges such that one or both of its end vertices is in $P$ from $T$. Your task is to choose $u$ and $v$ to maximize the number of connected components with $K$ or more vertices of $T$ after that operation.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$N$ $K$\n$u_1$ $v_1$\n:\n$u_{N-1}$ $v_{N-1}$\n</pre>\n\n<p>\nThe first line consists of two integers $N, K$ ($2 \\leq N \\leq 100,000, 1 \\leq K \\leq N$). The following $N-1$ lines represent the information of edges. The ($i+1$)-th line consists of two integers $u_i, v_i$ ($1 \\leq u_i, v_i \\leq N$ and $u_i \\ne v_i $ for each $i$). Each $\\{u_i, v_i\\}$ is an edge of $T$. It's guaranteed that these edges form a tree.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the maximum number of connected components with $K$ or more vertices in one line.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n2 1\n1 2\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n0\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n7 3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n1\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n12 2\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n7 8\n8 9\n6 10\n10 11\n11 12\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n4\n</pre>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n3 1\n1 2\n2 3\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\n1\n</pre>\n\n\n<H2>Sample Input 5</H2>\n<pre>\n3 2\n1 2\n2 3\n</pre>\n\n<H2>Output for Sample Input 5</H2>\n<pre>\n0\n</pre>\n\n<H2>Sample Input 6</H2>\n<pre>\n9 3\n1 2\n1 3\n1 4\n4 5\n4 6\n4 7\n7 8\n7 9\n</pre>\n\n<H2>Output for Sample Input 6</H2>\n<pre>\n2\n</pre>\n\n\n\n\n", "p01963": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nSeparate String\n</H1>\n\n<p>\n  You are given a string $t$ and a set $S$ of $N$ different strings. You need to separate $t$ such that each part is included in $S$.\n</p>\n\n<p>\n  For example, the following 4 separation methods satisfy the condition when $t = abab$ and $S = \\{a, ab, b\\}$.\n</p>\n\n<ul>\n  <li>$a,b,a,b$</li>\n  <li>$a,b,ab$</li>\n  <li>$ab,a,b$</li>\n  <li>$ab,ab$</li>\n</ul>\n\n<p>\nYour task is to count the number of ways to separate $t$. Because the result can be large, you should output the remainder divided by $1,000,000,007$.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$N$\n$s_1$\n:\n$s_N$\n$t$\n</pre>\n\n<p>\nThe first line consists of an integer $N$ ($1 \\leq N \\leq 100,000$) which is the number of the elements of $S$. The following $N$ lines consist of $N$ distinct strings separated by line breaks. The $i$-th string $s_i$ represents the $i$-th element of $S$. $s_i$ consists of lowercase letters and the length is between $1$ and $100,000$, inclusive. The summation of length of $s_i$ ($1 \\leq i \\leq N$) is at most $200,000$. The next line consists of a string $t$ which consists of lowercase letters and represents the string to be separated and the length is between $1$ and $100,000$, inclusive.\n</p>\n\n<H2>Output</H2>\n\n<p>\nCalculate the number of ways to separate $t$ and print the remainder divided by $1,000,000,007$.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n3\na\nb\nab\nabab\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n4\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n3\na\nb\nc\nxyz\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n0\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n7\nabc\nab\nbc\na\nb\nc\naa\naaabcbccababbc\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n160\n</pre>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n10\na\naa\naaa\naaaa\naaaaa\naaaaaa\naaaaaaa\naaaaaaaa\naaaaaaaaa\naaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n</pre>\n\n<H2>Output for Sample Input 4</H2>\n<pre>\n461695029\n</pre>\n\n\n\n\n", "p01965": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nFarm Village\n</H1>\n\n<p>\n  There is a village along a road. This village has $N$ houses numbered $1$ to $N$ in order along the road. Each house has a field that can make up to two units of the crop and needs just one unit of the crop. The total cost to distribute one unit of the crop to each house is the summation of carrying costs and growing costs.\n</p>\n\n<ul>\n<li>The carrying cost: The cost to carry one unit of the crop between the $i$-th house and the ($i+1$)-th house is $d_i$. It takes the same cost in either direction to carry.</li>\n<li>The growing cost: The cost to grow one unit of the crop in the $i$-th house's field is $g_i$.</li>\n</ul>\n\n<p>\n  Your task is to calculate the minimum total cost to supply one unit of the crop to each house.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$N$\n$d_1$ ... $d_{N-1}$\n$g_1$ ... $g_{N}$\n</pre>\n\n<p>\n  The first line consists of an integer $N$ ($2 \\leq 200,000$), which is the number of the houses. The second line consists of $N-1$ integers separated by spaces. The $i$-th integer $d_i$ ($1 \\leq d_i \\leq 10^9$, $1 \\leq i \\leq N-1$)represents the carrying cost between the $i$-th and the ($i+1$)-th houses. The third line consists of $N$ integers separated by spaces. The $i$-th integer $g_i$ ($1 \\leq g_i \\leq 10^9$, $1 \\leq i \\leq N$) represents the growing cost of the $i$-th house's field.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the minimum cost to supply one unit of the crop to each house.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n2\n3\n1 5\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n5\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n3\n100 100\n1 2 3\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n6\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n4\n1 2 3\n1 1 100 100\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n12\n</pre>", "p01964": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nRevenge of the Endless BFS\n</H1>\n\n<p>\nMr. Endo wanted to write the code that performs breadth-first search (BFS), which is a search algorithm to explore all vertices on a <i>directed</i> graph. An example of pseudo code of BFS is as follows:\n</p>\n\n<pre>\n1: $current \\leftarrow \\{start\\_vertex\\}$\n2: $visited \\leftarrow current$\n3: while $visited \\ne$ the set of all the vertices\n4:   $found \\leftarrow \\{\\}$\n5:   for $u$ in $current$\n6:     for each $v$ such that there is an edge from $u$ to $v$\n7:       $found \\leftarrow found \\cup \\{v\\}$\n8:   $current \\leftarrow found \\setminus visited$\n9:   $visited \\leftarrow visited \\cup found$\n</pre>\n\n<p>\n  However, Mr. Endo apparently forgot to manage visited vertices in his code. More precisely, he wrote the following code:\n</p>\n\n<pre>\n1: $current \\leftarrow \\{start\\_vertex\\}$\n2: while $current \\ne$ the set of all the vertices\n3:   $found \\leftarrow \\{\\}$\n4:   for $u$ in $current$\n5:     for each $v$ such that there is an edge from $u$ to $v$\n6:       $found \\leftarrow found \\cup \\{v\\}$\n7:   $current \\leftarrow found$\n</pre>\n\n<p>\n  You may notice that for some graphs, Mr. Endo's program will not stop because it keeps running infinitely. Notice that it does not necessarily mean the program cannot explore all the vertices within finite steps. Your task here is to make a program that determines whether Mr. Endo's program will stop within finite steps for a given directed graph in order to point out the bug to him. Also, calculate the minimum number of loop iterations required for the program to stop if it is finite. Since the answer might be huge, thus print the answer modulo $10^9 +7$, which is a prime number.\n  </p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of a single test case formatted as follows.\n</p>\n\n<pre>\n$N$ $M$\n$u_1$ $v_1$\n:\n$u_M$ $v_M$\n</pre>\n\n<p>\n  The first line consists of two integers $N$ ($2 \\leq N \\leq 500$) and $M$ ($1 \\leq M \\leq 200,000$), where $N$ is the number of vertices and $M$ is the number of edges in a given directed graph, respectively. The $i$-th line of the following $M$ lines consists of two integers $u_i$ and $v_i$ ($1 \\leq u_i, v_i \\leq N$), which means there is an edge from $u_i$ to $v_i$ in the given graph. The vertex $1$ is the start vertex, i.e. $start\\_vertex$ in the pseudo codes. You can assume that the given graph also meets the following conditions.\n</p>\n\n<ul>\n<li>The graph has no self-loop, i.e., $u_i \\ne v_i$ for all $1 \\leq i \\leq M$.</li>\n<li>The graph has no multi-edge, i.e., $(u_i, v_i) \\le (u_j, v_j)$ for all $1 \\leq i < j \\leq M$.</li>\n<li>For each vertex $v$, there is at least one path from the start vertex $1$ to $v$.</li>\n</ul>\n\n\n<H2>Output</H2>\n\n<p>\nIf Mr. Endo's wrong BFS code cannot stop within finite steps for the given input directed graph, print '-1' in a line. Otherwise, print the minimum number of loop iterations required to stop modulo $10^9+7$.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 4\n1 2\n2 3\n3 4\n4 1\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n-1\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n4 5\n1 2\n2 3\n3 4\n4 1\n1 3\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n7\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n5 13\n4 2\n2 4\n1 2\n5 4\n5 1\n2 1\n5 3\n4 3\n1 5\n4 5\n2 3\n5 2\n1 3\n</pre>\n\n<H2>Output for Sample Input 3</H2>\n<pre>\n3\n</pre>\n", "p01961": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"code\"], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>\nRPG Maker\n</H1>\n\n<p>\nYou are planning to create a map of an RPG. This map is represented by a grid whose size is $H \\times W$. Each cell in this grid is either '<span>@</span>', '<span>*</span>', '<span>#</span>', or '<span>.</span>'. The meanings of the symbols are as follows.\n</p>\n\n<ul>\n<li>'<span>@</span>': The start cell. The story should start from this cell.</li>\n<li>'<span>*</span>': A city cell. The story goes through or ends with this cell.</li>\n<li>'<span>#</span>': A road cell.</li>\n<li>'<span>.</span>': An empty cell.</li>\n</ul>\n\n<p>\n  You have already located the start cell and all city cells under some constraints described in the input section, but no road cells have been located yet. Then, you should decide which cells to set as road cells.\n</p>\n\n<p>\n  Here, you want a \"journey\" exists on this map. Because you want to remove the branch of the story, the journey has to be unforked. More formally, the journey is a sequence of cells and must satisfy the following conditions:\n</p>\n\n<ol>\n<li> The journey must contain as many city cells as possible. </li>\n<li> The journey must consist of distinct non-empty cells in this map.</li>\n<li> The journey must begin with the start cell.</li>\n<li> The journey must end with one of the city cells.</li>\n<li> The journey must contain all road cells. That is, road cells not included in the journey must not exist.</li>\n<li> The journey must be unforked. In more detail, all road cells and city cells except for a cell at the end of the journey must share edges with the other two cells both of which are also contained in the journey. Then, each of the start cell and a cell at the end of the journey must share an edge with another cell contained in the journey.</li>\n<li> You do not have to consider the order of the cities to visit during the journey.</li>\n</ol>\n\n<p>\nInitially, the map contains no road cells. You can change any empty cells to road cells to make a journey satisfying the conditions above. Your task is to print a map which maximizes the number of cities in the journey.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of a single test case of the following form.\n</p>\n\n<pre>\n$H$ $W$\n$S_1$\n$S_2$\n:\n$S_H$\n</pre>\n\n<p>\nThe first line consists of two integers $N$ and $W$. $H$ and $W$ are guaranteed to satisfy $H = 4n - 1$ and $W = 4m -1$ for some positive integers $n$ and $m$  ($1 \\leq n, m \\leq 10$). The following $H$ lines represent a map without road cells. The ($i+1$)-th line consists of a string $S_i$ of length $W$. The $j$-th character of $S_i$ is either '<span>*</span>', '<span>@</span>' or '<span>.</span>' if both $i$ and $j$ are odd, otherwise '<span>.</span>'. The number of occurrences of '<span>@</span>' in the grid is exactly one. It is guaranteed that there are one or more city cells on the grid.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint a map indicating a journey. If several maps satisfy the condition, you can print any of them.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n11 7\n.......\n.......\n*.....*\n.......\n..@....\n.......\n*......\n.......\n....*..\n.......\n.......\n</pre>\n\n<H2>Output for Sample Input 1</H2>\n<pre>\n.......\n.......\n*#####*\n......#\n..@...#\n..#.###\n*##.#..\n#...#..\n####*..\n.......\n.......\n</pre>\n\n\n\n<H2>Sample Input 2</H2>\n<pre>\n7 11\n........*..\n...........\n...........\n...........\n....*...*..\n...........\n..*.@...*..\n</pre>\n\n<H2>Output for Sample Input 2</H2>\n<pre>\n........*..\n........#..\n........#..\n........#..\n..##*##.*..\n..#...#.#..\n..*#@.##*..\n</pre>", "p02004": "<h1>Problem A. GuruGuru</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n<p>\n  You are playing a game called <i>Guru Guru Gururin</i>. In this game, you can move with the vehicle called Gururin. There are two commands you can give to Gururin: '<span>R</span>' and '<span>L</span>'. When '<span>R</span>' is sent, Gururin rotates clockwise by 90 degrees. Otherwise, when '<span>L</span>' is sent, Gururin rotates counterclockwise by 90 degrees.\n</p>\n\n<p>\n  During the game, you noticed that Gururin obtains magical power by performing special commands. In short, Gururin obtains magical power every time when it performs one round in the clockwise direction from north to north. In more detail, the conditions under which magical power can be obtained is as follows.\n</p>\n\n<ul>\n<li>At the beginning of the special commands, Gururin faces north.</li>\n<li>At the end of special commands, Gururin faces north.</li>\n<li>Except for the beginning and the end of special commands, Gururin does not face north.</li>\n<li>During the special commands, Gururin faces north, east, south, and west one or more times, respectively, after the command of '<span>R</span>'.</li>\n</ul>\n\n<p>\n  At the beginning of the game, Gururin faces north. For example, if the sequence of commands Gururin received in order is '<span>RRRR</span>' or '<span>RRLRRLRR</span>', Gururin can obtain magical power. Otherwise, if the sequence of commands is '<span>LLLL</span>' or '<span>RLLR</span>', Gururin cannot obtain magical power.\n</p>\n\n<p>\n  Your task is to calculate how many times Gururin obtained magical power throughout the game. In other words, given the sequence of the commands Gururin received, calculate how many special commands exists in it.\n</p>\n\n\n<h2>Input</h2>\n<p>\n  The input consists of a single test case in the format below.\n</p>\n\n<pre>\n$S$\n</pre>\n\n<p>\n  The first line consists of a string $S$, which represents the sequence of commands Gururin received. $S$ consists of '<span>L</span>' and '<span>R</span>'. The length of $S$ is between $1$ and $10^3$ inclusive.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print the number of times Gururin obtained magical power throughout the game in one line.\n</p>\n\n\n<h2>Examples</h2>\n\n<h2>Sample Input 1 </h2>\n\n<pre>\nRRRRLLLLRRRR\n</pre>\n\n<h2>Output for Sample Input 1</h2>\n<pre>\n2\n</pre>\n\n<h2>Sample Input 2 </h2>\n<pre>\nRLLRLLLLRRRLLLRRR\n</pre>\n\n<h2>Output for Sample Input 2</h2>\n<pre>\n0\n</pre>\n\n<h2>Sample Input 3 </h2>\n<pre>\nLR\n</pre>\n\n<h2>Output for Sample Input 3</h2>\n<pre>\n0\n</pre>\n\n<h2>Sample Input 4 </h2>\n<pre>\nRRLRRLRRRRLRRLRRRRLRRLRRRRLRRLRR\n</pre>\n\n<h2>Output for Sample Input 4</h2>\n<pre>\n4\n</pre>\n", "p02005": "<h1>Problem B. Colorful Drink</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n\n<p>\n  In the Jambo Amusement Garden (JAG), you sell colorful drinks consisting of multiple color layers. This colorful drink can be made by pouring multiple colored liquids of different density from the bottom in order.\n</p>\n\n<p>\n  You have already prepared several colored liquids with various colors and densities. You will receive a drink request with specified color layers. The colorful drink that you will serve must satisfy the following conditions.\n</p>\n\n<ul>\n  <li>You cannot use a mixed colored liquid as a layer. Thus, for instance, you cannot create a new liquid with a new color by mixing two or more different colored liquids, nor create a liquid with a density between two or more liquids with the same color by mixing them.</li>\n  <li>Only a colored liquid with strictly less density can be an upper layer of a denser colored liquid in a drink. That is, you can put a layer of a colored liquid with density $x$ directly above the layer of a colored liquid with density $y$ if $x < y$ holds.</li>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n<p>\t\t\t\t\t\t\t\t\t\t\t\t\t\tYour task is to create a program to determine whether a given request can be fulfilled with the prepared colored liquids under the above conditions or not.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The input consists of a single test case in the format below.\n</p>\n\n<pre>\n$N$\n$C_1$ $D_1$\n$\\vdots$\n$C_N$ $D_N$\n$M$\n$O_1$\n$\\vdots$\n$O_M$\n</pre>\n\n<p>\n  The first line consists of an integer $N$ ($1 \\leq N \\leq 10^5$), which represents the number of the prepared colored liquids. The following $N$ lines consists of $C_i$ and $D_i$ ($1 \\leq i \\leq N$). $C_i$ is a string consisting of lowercase alphabets and denotes the color of the $i$-th prepared colored liquid. The length of $C_i$ is between $1$ and $20$ inclusive. $D_i$ is an integer and represents the density of the $i$-th prepared colored liquid. The value of $D_i$ is between $1$ and $10^5$ inclusive. The ($N+2$)-nd line consists of an integer $M$ ($1 \\leq M \\leq 10^5$), which represents the number of color layers of a drink request. The following $M$ lines consists of $O_i$ ($1 \\leq i \\leq M$). $O_i$ is a string consisting of lowercase alphabets and denotes the color of the $i$-th layer from the top of the drink request. The length of $O_i$ is between $1$ and $20$ inclusive.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  If the requested colorful drink can be served by using some of the prepared colored liquids, print '<span>Yes</span>'. Otherwise, print '<span>No</span>'.\n</p>\n\n<h2>Examples</h2>\n\n<h2>Sample Input 1</h2>\n<pre>\n2\nwhite 20\nblack 10\n2\nblack\nwhite\n</pre>\n\n<h2>Output for Sample Input 1</h2>\n<pre>\nYes\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n2\nwhite 10\nblack 10\n2\nblack\nwhite\n</pre>\n\n<h2>Output for Sample Input 2</h2>\n<pre>\nNo\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n2\nwhite 20\nblack 10\n2\nblack\norange\n</pre>\n\n<h2>Output for Sample Input 3</h2>\n<pre>\nNo\n</pre>\n\n<h2>Sample Input 4</h2>\n<pre>\n3\nwhite 10\nred 20\nwhite 30\n3\nwhite\nred\nwhite\n</pre>\n\n<h2>Output for Sample Input 4</h2>\n<pre>\nYes\n</pre>\n\n<h2>Sample Input 5</h2>\n<pre>\n4\nred 3444\nred 3018\nred 3098\nred 3319\n4\nred\nred\nred\nred\n</pre>\n\n<h2>Output for Sample Input 5</h2>\n<pre>\nYes\n</pre>\n", "p02006": "<h1>Problem C. Santa's Gift</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n\n<p>\n  Santa is going to pack gifts into a bag for a family. There are $N$ kinds of gifts. The size and the price of the $i$-th gift ($1 \\leq i \\leq N$) are $s_i$ and $p_i$, respectively. The size of the bag is $C$, thus Santa can pack gifts so that the total size of the gifts does not exceed $C$. Children are unhappy if they are given multiple items of the same kind gift, so Santa has to choose at most one gift of the same kind per child.\n</p>\n\n<p>\n  In addition, if a child did not receive a gift that the other children in the same family receive, he/she will complain about that. Hence Santa must distribute gifts fairly to all the children of a family, by giving the same set of gifts to each child. In other words, for a family with $k$ children, Santa must pack zero or $k$ items for each kind of gifts. Santa gives one bag to one family, therefore, the total size of the gifts for each family does not exceed $C$.\n</p>\n\n<p>\n  Santa wants to maximize the total price of packed items for a family but does not know the number of children in the family he is going to visit yet. The number seems at most $M$. To prepare all the possible cases, calculate the maximum total price of items for a family with $k$ children for each $1 \\leq k \\leq M$.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input consists of a single test case in the following format.\n</p>\n\n<pre>\n$C$ $N$ $M$\n$s_1$ $p_1$\n$...$\n$s_N$ $p_N$\n</pre>\n\n<p>\n  The first line contains three integers $C$, $N$ and $M$, where $C$ ($1 \\leq C \\leq 10^4$) is the size of the bag, $N$ ($1 \\leq N \\leq 10^4$) is the number of kinds of the gifts, and $M$ ($1 \\leq M \\leq 10^4$) is the maximum number of children in the family. The $i$-th line of the following $N$ lines contains two integers $s_i$ and $p_i$ ($1 \\leq s_i, p_i \\leq 10^4$), where $s_i$ and $p_i$ are the size and the price of the $i$-th gift, respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  The output should consist of $M$ lines. In the $k$-th line, print the maximum total price of gifts for a family with $k$ children.\n</p>\n\n<h2>Examples</h2>\n\n<h2>Sample Input 1</h2>\n<pre>\n6 3 2\n1 2\n2 10\n3 5\n</pre>\n<h2>Output for Sample Input 1</h2>\n<pre>\n17\n24\n</pre>\n<h2>Sample Input 2</h2>\n<pre>\n200 5 5\n31 41\n59 26\n53 58\n97 93\n23 84\n</pre>\n<h2>Output for Sample Input 2</h2>\n<pre>\n235\n284\n375\n336\n420\n</pre>\n<h2>Sample Input 3</h2>\n<pre>\n1 1 2\n1 1\n</pre>\n<h2>Output for Sample Input 3</h2>\n<pre>\n1\n0\n</pre>\n<h2>Sample Input 4</h2>\n<pre>\n2 2 2\n1 1\n2 100\n</pre>\n\n<h2>Output for Sample Input 4</h2>\n<pre>\n100\n2\n</pre>\n", "p02007": "<h1>Problem D. Prefix Suffix Search</h1>\n<!--\nTime Limit: 3 sec\nMemory Limit: 512 MB\n  -->\n<p>\n  As an English learner, sometimes you cannot remember the entire spelling of English words perfectly, but you can only remember their prefixes and suffixes. For example, you may want to use a word which begins with '<span>appr</span>' and ends with '<span>iate</span>', but forget the middle part of the word. It may be '<span>appreciate</span>', '<span>appropriate</span>', or something like them.\n</p>\n\n<p>\n  By using an ordinary dictionary, you can look up words beginning with a certain prefix, but it is inconvenient for further filtering words ending with a certain suffix. Thus it is helpful to achieve dictionary functionality which can be used for finding words with a given prefix and suffix. In the beginning, let's count the number of such words instead of explicitly listing them.\n</p>\n\n<p>\n  More formally, you are given a list of $N$ words. Next, you are given $Q$ queries consisting of two strings. Your task is to write a program which outputs the number of words with the prefix and suffix for each query in the given list.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input consists of a single test case in the following format.\n</p>\n\n<pre>\n$N$ $Q$\n$w_1$\n$...$\n$w_N$\n$p_1$ $s_1$\n$...$\n$p_Q$ $s_Q$\n</pre>\n\n<p>\n  The first line contains two integers $N$ and $Q$, where $N$ ($1 \\leq N \\leq 10^5$) is the number of words in the list, and $Q$ ($1 \\leq Q \\leq 10^5$) is the number of queries. The $i$-th line of the following $N$ lines contains a string $w_i$. The $i$-th of the following $Q$ lines contains two strings $p_i$ and $s_i$, which are a prefix and suffix of words to be searched, respectively.\n</p>\n<p>\n  You can assume the followings:\n</p>\n<ul>\n<li>All the strings in an input are non-empty and consist only of lowercase English letters.</li>\n<li>The total length of input strings does not exceed $2,500,000$.</li>\n<li>Words in the given list are unique: $w_i \\ne w_j$ if $i \\ne j$.</li>\n<li>Pairs of a prefix and suffix are unique: $(p_i, s_i) \\ne (p_j, s_j)$ if $i \\ne j$.</li>\n</ul>\n\n<h2>Output</h2>\n<p>\n  For each query, output the number of words with a given prefix and suffix in the given list per a line.\n  </p>\n\n<h2>Examples</h2>\n\n<h2>Sample Input 1</h2>\n<pre>\n6 7\nappreciate\nappropriate\nacceptance\nace\nacm\nacetylene\nappr iate\na e\na a\nac ce\nace e\nacceptance acceptance\nno match\n</pre>\n<h2>Output for Sample Input 1</h2>\n<pre>\n2\n5\n0\n2\n2\n1\n0\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n5 5\nd\ndd\nddd\ndddd\nddddd\nd d\ndd dd\nddd ddd\nd dddd\nddddd dd\n</pre>\n\n<h2>Output for Sample Input 2</h2>\n<pre>\n5\n4\n3\n2\n1\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n7 4\nconnected\ndisconnected\ngraph\ndirected\ndiameter\ndistance\nminor\nc ed\ndi ed\ndis ed\ndis e\n</pre>\n\n<h2>Output for Sample Input 3</h2>\n<pre>\n1\n2\n1\n1\n</pre>\n", "p02008": "<h1>Problem E. Magic Triangles</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n\n<p>\n  Fallen angel Yohane plans to draw a magic symbol composed of triangles on the earth. By casting some magic spell on the symbol, she will obtain magic power; this is the purpose for which she will draw a magic symbol. The magic power yielded from the magic symbol is determined only by the common area of all the triangles. Suppose the earth is a two-dimensional plane and the vertices of the triangles are points on the plane. Yohane has already had a design of the magic symbol, i.e. the positions, sizes, shapes of the triangles. However, she does not know how much magic power will be obtained from the symbol. Your task as a familiar of the fallen angel is to write a program calculating the common area of given triangles on a two-dimensional plane.\n</p>\n\n\n<h2>Input</h2>\n<p>\n  The input consists of a single test case in the following format.\n</p>\n\n<pre>\n$N$\n$x_{1,1}$ $y_{1,1}$ $x_{1,2}$ $y_{1,2}$ $x_{1,3}$ $y_{1,3}$\n$...$\n$x_{N,1}$ $y_{N,1}$ $x_{N,2}$ $y_{N,2}$ $x_{N,3}$ $y_{N,3}$\n</pre>\n\n<p>\n  The first line contains an integer $N$, which is the number of triangles ($1 \\leq N \\leq 10^5$). The $i$-th line of the following $N$ lines contains six integers $x_{i,1}$, $y_{i,1}$, $x_{i,2}$, $y_{i,2}$, $x_{i,3}$, and $y_{i,3}$, where ($x_{i,j}, y_{i,j}$)is the coordinate of the $j$-th vertex of the $i$-th triangle ($-1,000 \\leq x_{i,j}, y_{i,j} \\leq 1,000$).\n</p>\n<p>\n  You can assume the followings:\n</p>\n<ul>\n<li>Every triangle has a positive area.</li>\n<li>The vertices of every triangle are in the counter-clockwise order.</li>\n</ul>\n\n<h2>Output</h2>\n<p>\n  Output the common area of given triangles in a line. The output can contain an absolute or relative error no more than $10^{-6}$.\n</p>\n\n<h2>Examples</h2>\n\n<h2>Sample Input 1</h2>\n<pre>\n2\n0 0 2 0 0 2\n0 1 2 1 0 3\n</pre>\n<h2>Output for Sample Input 1</h2>\n<pre>\n0.5\n</pre>\n<h2>Sample Input 2</h2>\n<pre>\n2\n0 0 100 0 50 100\n50 -50 100 50 0 50\n</pre>\n<h2>Output for Sample Input 2</h2>\n<pre>\n3125\n</pre>\n<h2>Sample Input 3</h2>\n<pre>\n5\n0 0 1 0 0 1\n0 0 2 0 0 2\n0 0 3 0 0 3\n0 0 4 0 0 4\n0 0 5 0 0 5\n</pre>\n\n<h2>Output for Sample Input 3</h2>\n<pre>\n0.5\n</pre>\n", "p02009": "<h1>Problem F. Nim without Zero</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n<p>\nAlice: \"Hi, Bob! Let's play Nim!\"<br>\nBob: \"Are you serious? I don't want to play it. I know how to win the game.\"<br>\nAlice: \"Right, there is an algorithm to calculate the optimal move using XOR. How about changing the rule so that a player loses a game if he or she makes the XOR to $0$?\"<br>\nBob: \"It sounds much better now, but I suspect you know the surefire way to win.\"<br>\nAlice: \"Do you wanna test me?\"<br>\nThis game is defined as follows.<br>\n</p>\n<ol>\n<li> The game starts with $N$ heaps where the $i$-th of them consists of $a_i$ stones.</li>\n<li> A player takes any positive number of stones from any single one of the heaps in one move.</li>\n<li> Alice moves first. The two players alternately move.</li>\n<li> If the XOR sum, $a_1$ XOR $a_2$ XOR $...$ XOR $a_N$, of the numbers of remaining stones of these heaps becomes $0$ as a result of a player's move, the player loses.</li>\n</ol>\n\n<p>\n  Your task is to find which player will win if they do the best move.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input consists of a single test case in the format below.\n</p>\n\n<pre>\n$N$\n$a_1$\n$\\vdots$\n$a_N$\n</pre>\n\n<p>\n  The first line contains an integer $N$ which is the number of the heaps ($1 \\leq N \\leq 10^5$). Each of the following $N$ lines gives the number of stones in each heap ($1 \\leq a_i \\leq 10^9$).\n</p>\n\n<h2>Output</h2>\n<p>\n  Output the winner, Alice or Bob, when they do the best move.\n  </p>\n\t\t\t\t\t\t\n<h2>Examples</h2>\n\n<h2>Sample Input 1</h2>\n<pre>\n2\n1\n1\n</pre>\n<h2>Output for Sample Input 1</h2>\n<pre>\nAlice\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n5\n1\n2\n3\n4\n5\n</pre>\n\n<h2>Output for Sample Input 2</h2>\n<pre>\nBob\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>\n\n<h2>Output for Sample Input 3</h2>\n<pre>\nAlice\n</pre>\n<p>\n  In the first example, the XOR sum is 0 in the initial state, but the game is going because nobody moves yet. First Alice takes a stone and the XOR sum becomes 1, then Bob takes the last stone and the XOR sum becomes 0. Therefore, Alice will win, and Bob will lose.\n</p>\n", "p02010": "<h1>Problem G. Additions</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n<p>\n  You are given an integer $N$ and a string consisting of '<span>+</span>' and digits. You are asked to transform the string into a valid formula whose calculation result is smaller than or equal to $N$ by modifying some characters. Here, you replace one character with another character any number of times, and the converted string should still consist of '<span>+</span>' and digits. Note that leading zeros and unary positive are prohibited.\n</p>\n\n<p>\n  For instance, '<span>0123+456</span>' is assumed as invalid because leading zero is prohibited. Similarly, '<span>+1+2</span>' and '<span>2++3</span>' are also invalid as they each contain a unary expression. On the other hand, '<span>12345</span>', '<span>0+1+2</span>' and '<span>1234+0+0</span>' are all valid.\n</p>\n\n<p>\n  Your task is to find the minimum number of the replaced characters. If there is no way to make a valid formula smaller than or equal to $N$, output $-1$ instead of the number of the replaced characters.\n</p>\n\n\n<h2>Input</h2>\n<p>\n  The input consists of a single test case in the following format.\n</p>\n\n<pre>\n$N$\n$S$\n</pre>\n<p>\n  The first line contains an integer $N$, which is the upper limit of the formula ($1 \\leq N \\leq 10^9$). The second line contains a string $S$, which consists of '<span>+</span>' and digits and whose length is between $1$ and $1,000$, inclusive. Note that it is <b><i>not</i></b> guaranteed that initially $S$ is a valid formula.\n</p>\n\n<h2>Output</h2>\n<p>\n  Output the minimized number of the replaced characters. If there is no way to replace, output $-1$ instead.\n</p>\n\n<h2>Examples</h2>\n\n<h2>Sample Input 1</h2>\n<pre>\n100\n+123\n</pre>\n<h2>Output for Sample Input 1</h2>\n<pre>\n2\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n10\n+123\n</pre>\n<h2>Output for Sample Input 2</h2>\n<pre>\n4\n</pre>\n<h2>Sample Input 3</h2>\n<pre>\n1\n+123\n</pre>\n\n<h2>Output for Sample Input 3</h2>\n<pre>\n-1\n</pre>\n\n<h2>Sample Input 4</h2>\n<pre>\n10\n++1+\n</pre>\n<h2>Output for Sample Input 4</h2>\n<pre>\n2\n</pre>\n\n<h2>Sample Input 5</h2>\n<pre>\n2000\n1234++7890\n</pre>\n\n<h2>Output for Sample Input 5</h2>\n<pre>\n2\n</pre>\n<p>\n  In the first example, you can modify the first two characters and make a formula '<span>1+23</span>', for instance. In the second example, you should make '<span>0+10</span>' or '<span>10+0</span>' by replacing all the characters. In the third example, you cannot make any valid formula less than or equal to $1$.\n</p>\n", "p02011": "<h1>Problem H. Enlarge Circles</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n<p>\n  You are given $N$ distinct points on the 2-D plane. For each point, you are going to make a single circle whose center is located at the point. Your task is to maximize the sum of perimeters of these $N$ circles so that circles do not overlap each other. Here, \"overlap\" means that two circles have a common point which is not on the circumference of at least either of them. Therefore, the circumferences can be touched. Note that you are allowed to make a circle with radius $0$.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input consists of a single test case in the following format.\n</p>\n\n<pre>\n$N$\n$x_1$ $y_1$\n$\\vdots$\n$x_N$ $y_N$\n</pre>\n\n<p>\n  The first line contains an integer $N$, which is the number of points ($2 \\leq N \\leq 200$). Each of the following $N$ lines gives the coordinates of a point. Integers $x_i$ and $y_i$ ($-100 \\leq x_i, y_i \\leq 100$) in the $i$-th line of them give the $x$- and $y$-coordinates, respectively, of the $i$-th point. These points are distinct, in other words, $(x_i,y_i) \\ne (x_j, y_j)$ is satisfied if $i$ and $j$ are different.\n</p>\n\n<h2>Output</h2>\n<p>\n  Output the maximized sum of perimeters. The output can contain an absolute or a relative error no more than $10^{-6}$.\n</p>\n\n<h2>Examples</h2>\n\n<h2>Sample Input 1</h2>\n<pre>\n3\n0 0\n3 0\n5 0\n</pre>\n<h2>Output for Sample Input 1</h2>\n<pre>\n31.415926535\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n3\n0 0\n5 0\n0 5\n</pre>\n<h2>Output for Sample Input 2</h2>\n<pre>\n53.630341225\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n9\n91 -18\n13 93\n73 -34\n15 2\n-46 0\n69 -42\n-23 -13\n-87 41\n38 68\n</pre>\n\n<h2>Output for Sample Input 3</h2>\n<pre>\n1049.191683488\n</pre>\n", "p02012": "<h1>Problem I. Sum of QQ</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n<p>\n  You received a card with an integer $S$ and a <i>multiplication table</i> of infinite size. All the elements in the table are integers, and an integer at the $i$-th row from the top and the $j$-th column from the left is $A_{i,j} = i \\times j$ ($i,j \\geq 1$). The table has infinite size, i.e., the number of the rows and the number of the columns are infinite.\n</p>\n\n<p>\n  You love rectangular regions of the table in which the sum of numbers is $S$. Your task is to count the number of integer tuples $(a, b, c, d)$ that satisfies $1 \\leq a \\leq b, 1 \\leq c \\leq d$ and $\\sum_{i=a}^b \\sum_{j=c}^d A_{i,j} = S$.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input consists of a single test case of the following form.\n</p>\n\n<pre>\n$S$  \n</pre>\n\n<p>\n  The first line consists of one integer $S$ ($1 \\leq S \\leq 10^5$), representing the summation of rectangular regions you have to find.\n</p>\n\n<h2>Output</h2>\n<p>\n  Print the number of rectangular regions whose summation is $S$ in one line.\n</p>\n\n<h2>Examples</h2>\n\n<h2>Sample Input 1</h2>\n<pre>\n25\n</pre>\n<h2>Output for Sample Input 1</h2>\n<pre>\n10\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n1\n</pre>\n<h2>Output for Sample Input 2</h2>\n<pre>\n1\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n5\n</pre>\n<h2>Output for Sample Input 3</h2>\n<pre>\n4\n</pre>\n\n<h2>Sample Input 4</h2>\n<pre>\n83160\n</pre>\n\n<h2>Output for Sample Input 4</h2>\n<pre>\n5120\n</pre>\n", "p02013": "<h1>Problem J. Prime Routing</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n\n<p>\n  Fox Jiro is one of the staffs of the ACM-ICPC 2018 Asia Yokohama Regional Contest and is responsible for designing the network for the venue of the contest. His network consists of $N$ computers, which are connected by $M$ cables. The $i$-th cable connects the $a_i$-th computer and the $b_i$-th computer, and it carries data in both directions. Your team will use the $S$-th computer in the contest, and a judge server is the $T$-th computer.\n</p>\n\n<p>\n  He decided to adjust the routing algorithm of the network to maximize the performance of the contestants through the magical power of prime numbers. In this algorithm, a packet (a unit of data carried by the network) is sent from your computer to the judge server passing through the cables a prime number of times if possible. If it is impossible, the contestants cannot benefit by the magical power of prime numbers. To accomplish this target, a packet is allowed to pass through the same cable multiple times.\n</p>\n\n<p>\n  You decided to write a program to calculate the minimum number of times a packet from  $S$ to $T$ needed to pass through the cables. If the number of times a packet passes through the cables cannot be a prime number, print $-1$.\n</p>\n\n\n<h2>Input</h2>\n<p>\n  The input consists of a single test case, formatted as follows.\n</p>\n\n<pre>\n$N$ $M$ $S$ $T$\n$a_1$ $b_1$\n$\\vdots$\n$a_M$ $b_M$\n</pre>\n\n<p>\n  The first line consists of four integers $N, M, S,$ and $T$ ($2 \\leq N \\leq 10^5, 1 \\leq M \\leq 10^5, 1 \\leq S, T \\leq N, S \\ne T$). The $i$-th line of the following $M$ lines consists of two integers $a_i$ and $b_i$ ($1 \\leq a_i < b_i \\leq N$), which means the $i$-th cables connects the $a_i$-th computer and the $b_i$-th computer in the network. You can assume that the network satisfies the following conditions.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  </p>\n<ul>\n<li>The network has no multi-edge, i.e.,$(a_i, b_i) \\ne (a_j, b_j)$ for all $i,j$ ($1 \\leq i < j \\leq M$).</li>\n\t\t\t\t\t\t\t\t\t\t\t       <li>The packets from $N$ computers are reachable to $T$ by passing through some number of cables. The number is not necessarily a prime.</li>\n</ul>\t\t\t\t\t\t\t\t\t\t\t\t \n<h2>Output</h2>\n<p>\n  If there are ways such that the number of times a packet sent from $S$ to $T$ passes through the cables is a prime number, print the minimum prime number of times in one line. Otherwise, print $-1$.\n</p>\n\n<h2>Examples</h2>\n<h2>Sample Input 1</h2>\n<pre>\n5 5 1 5\n1 2\n1 4\n2 3\n3 4\n3 5\n</pre>\n<h2>Output for Sample Input 1</h2>\n<pre>\n3\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n5 4 1 5\n1 2\n2 3\n3 4\n4 5\n</pre>\n<h2>Output for Sample Input 2</h2>\n<pre>\n-1\n</pre>\n<h2>Sample Input 3</h2>\n<pre>\n2 1 1 2\n1 2\n</pre>\n<h2>Output for Sample Input 3</h2>\n<pre>\n3\n</pre>\n\n<h2>Sample Input 4</h2>\n<pre>\n3 3 1 2\n1 2\n1 3\n2 3\n</pre>\n<h2>Output for Sample Input 4</h2>\n<pre>\n2\n</pre>\n", "p02014": "<h1>Problem K. Rough Sorting</h1>\n<!--\nTime Limit: 2 sec\nMemory Limit: 512 MB\n  -->\n<p>\n  For skilled programmers, it is very easy to implement a sorting function. Moreover, they often avoid full sorting to reduce computation time if it is not necessary. Here, we consider \"rough sorting\" which sorts an array except for some pairs of elements. More formally, we define an array is \"$K$-roughly sorted\" if an array is sorted except that <b>at most</b> $K$ pairs are in reversed order. For example, '<span>1 3 2 4</span>' is 1-roughly sorted because (3, 2) is only the reversed pair. In the same way, '<span>1 4 2 3</span>' is 2-roughly sorted because (4, 2) and (4, 3) are reversed.\n</p>\n\n<p>\n  Considering rough sorting by exchanging adjacent elements repeatedly, you need less number of swaps than full sorting. For example, '<span>4 1 2 3</span>' needs three exchanges for full sorting, but you only need to exchange once for 2-rough sorting.\n</p>\n\n<p>\n  Given an array and an integer $K$, your task is to find the result of the $K$-rough sorting with a minimum number of exchanges. If there are several possible results, you should output the lexicographically minimum result. Here, the lexicographical order is defined by the order of the first different elements.\n</p>\n\n\n<h2>Input</h2>\n<p>\n  The input consists of a single test case in the following format.\n</p>\n\n<pre>\n$N$ $K$\n$x_1$\n$\\vdots$\n$x_N$\n</pre>\n\n<p>  \n  The first line contains two integers $N$ and $K$. The integer $N$ is the number of the elements of the array ($1 \\leq N \\leq 10^5$). The integer $K$ gives how many reversed pairs are allowed ($1 \\leq K \\leq 10^9$). Each of the following $N$ lines gives the element of the array. The array consists of the permutation of $1$ to $N$, therefore $1 \\leq x_i \\leq N$ and $x_i \\ne x_j$ ($i \\ne j$) are satisfied.\n</p>\n\n<h2>Output</h2>\n<p>\n  The output should contain $N$ lines. The $i$-th line should be the $i$-th element of the result of the $K$-rough sorting. If there are several possible results, you should output the minimum result with the lexicographical order.\n</p>\n\n<h2>Examples</h2>\n\n<h2>Sample Input 1</h2>\n<pre>\n3 1\n3\n2\n1\n</pre>\n\n<h2>Output for Sample Input 1</h2>\n<pre>\n1\n3\n2\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n3 100\n3\n2\n1\n</pre>\n<h2>Output for Sample Input 2</h2>\n<pre>\n3\n2\n1\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n5 3\n5\n3\n2\n1\n4\n</pre>\n<h2>Output for Sample Input 3</h2>\n<pre>\n1\n3\n5\n2\n4\n</pre>\n<h2>Sample Input 4</h2>\n<pre>\n5 3\n1\n2\n3\n4\n5\n</pre>\n\n<h2>Output for Sample Input 4</h2>\n<pre>\n1\n2\n3\n4\n5\n</pre>\n\n  <p>\nIn the last example, the input array is already sorted, which means the input is already a 3-roughly sorted array and no swapping is needed.\n</p>\n", "p02067": "<style type=\"text/css\">\n    blockquote {\n        font-family: Menlo, Monaco, \"Courier New\", monospace;\n        display: block;\n        margin: 10px 0 10px 30px;\n        font-size: 16px;\n        line-height: 18px;\n        white-space: pre;\n        white-space: pre-wrap;\n        word-break: break-all;\n        word-wrap: break-word;\n    }\n    table.ioexample {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    table.ioexample td {\n        width: 50%;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        vertical-align: top;\n        padding: 5px;\n    }\n    .no-page-break {\n        page-break-inside: avoid;\n    }\n    .page-break {\n        page-break-before: always;\n    }\n</style>\n\n\n<h3>Problem Statement</h3>\n<p>Recently, AIs which play Go (a traditional board game) are well investigated.\nYour friend Hikaru is planning to develop a new awesome Go AI named Sai and promote it to company F or company G in the future.\nAs a first step, Hikaru has decided to develop an AI for 1D-Go, a restricted version of the original Go.</p>\n<p>In both of the original Go and 1D-Go, capturing stones is an important strategy.\nHikaru asked you to implement one of the functions of capturing.</p>\n<p>In 1D-Go, the game board consists of $L$ grids lie in a row.\nA state of 1D-go is described by a string $S$ of length $L$.\nThe $i$-th character of $S$ describes the $i$-th grid as the following:</p>\n<ul>\n<li>When the $i$-th character of $S$ is <code>B</code>, the $i$-th grid contains a stone which is colored black.</li>\n<li>When the $i$-th character of $S$ is <code>W</code>, the $i$-th grid contains a stone which is colored white.</li>\n<li>When the $i$-th character of $S$ is <code>.</code>, the $i$-th grid is empty.</li>\n</ul>\n<p>Maximal continuous stones of the same color are called a chain.\nWhen a chain is surrounded by stones with opponent's color, the chain will be captured.</p>\n<p>More precisely, if $i$-th grid and $j$-th grids ($1 &lt; i + 1 &lt; j \\leq L$) contain white stones and every grid of index $k$ ($i &lt; k &lt; j$) contains a black stone, these black stones will be captured, and vice versa about color.</p>\n<p>Please note that some of the rules of 1D-Go are quite different from the original Go.\nSome of the intuition obtained from the original Go may curse cause some mistakes.</p>\n<p>You are given a state of 1D-Go that next move will be played by the player with white stones.\nThe player can put a white stone into one of the empty cells.\nHowever, the player can not make a chain of white stones which is surrounded by black stones even if it simultaneously makes some chains of black stones be surrounded.\nIt is guaranteed that the given state has at least one grid where the player can put a white stone and there are no chains which are already surrounded.</p>\n<p>Write a program that computes the maximum number of black stones which can be captured by the next move of the white stones player.</p>\n<hr />\n<h3>Input</h3>\n<p>The input consists of one line and has the following format:</p>\n<blockquote>$L$ $S$</blockquote>\n<p>$L$ ($1 \\leq L \\leq 100$) means the length of the game board and $S$ ($|S| = L$) is a string which describes the state of 1D-Go. The given state has at least one grid where the player can put a white stone and there are no chains which are already surrounded.</p>\n<h3>Output</h3>\n<p>Output the maximum number of stones which can be captured by the next move in a line.</p>\n<p><div class=\"no-page-break\"><h3>Examples</h3><table class=\"ioexample\"><tr><th>Input</th><th>Output</th></tr><tr><td><pre>5 .WB..\n</pre></td><td><pre>1\n</pre></td></tr><tr><td><pre>5 .WBB.\n</pre></td><td><pre>2\n</pre></td></tr><tr><td><pre>6 .WB.B.\n</pre></td><td><pre>0\n</pre></td></tr><tr><td><pre>6 .WB.WB\n</pre></td><td><pre>0\n</pre></td></tr><tr><td><pre>5 BBB..\n</pre></td><td><pre>0\n</pre></td></tr></table></div></p>\n<p>In the 3rd and 4th test cases, the player cannot put a white stone on the 4th grid since the chain of the white stones will be surrounded by black stones. This rule is different from the original Go.</p>\n<p>In the 5th test case, the player cannot capture any black stones even if the player put a white stone on the 4th grid. The player cannot capture black stones by surrounding them with the edge of the game board and the white stone. This rule is also different from the original Go.</p>\n", "p02069": "<style type=\"text/css\">\n    blockquote {\n        font-family: Menlo, Monaco, \"Courier New\", monospace;\n        display: block;\n        margin: 10px 0 10px 30px;\n        font-size: 16px;\n        line-height: 18px;\n        white-space: pre;\n        white-space: pre-wrap;\n        word-break: break-all;\n        word-wrap: break-word;\n    }\n    table.ioexample {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    table.ioexample td {\n        width: 50%;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        vertical-align: top;\n        padding: 5px;\n    }\n    .no-page-break {\n        page-break-inside: avoid;\n    }\n    .page-break {\n        page-break-before: always;\n    }\n</style>\n\n\n\n<h3>Problem Statement</h3>\n<p>You are given a list of $N$ intervals. The $i$-th interval is $[l_i, r_i)$, which denotes a range of numbers greater than or equal to $l_i$ and strictly less than $r_i$. In this task, you consider the following two numbers:</p>\n<ul>\n<li>The minimum integer $x$ such that you can select $x$ intervals from the given $N$ intervals so that the union of the selected intervals is $[0, L)$.</li>\n<li>The minimum integer $y$ such that for all possible combinations of $y$ intervals from the given $N$ interval, it <em>does</em> cover $[0, L)$.</li>\n</ul>\n<p>We ask you to write a program to compute these two numbers.</p>\n<hr />\n<h3>Input</h3>\n<p>The input consists of a single test case formatted as follows. </p>\n<blockquote>$N$ $L$\n$l_1$ $r_1$\n$l_2$ $r_2$\n$\\vdots$\n$l_N$ $r_N$</blockquote>\n<p>The first line contains two integers $N$ ($1 \\leq N \\leq 2 \\times 10^5$) and $L$ ($1 \\leq L \\leq 10^{12}$), where $N$ is the number of intervals and $L$ is the length of range to be covered, respectively. The $i$-th of the following $N$ lines contains two integers $l_i$ and $r_i$ ($0 \\leq l_i &lt; r_i \\leq L$), representing the range of the $i$-th interval $[l_i, r_i)$. You can assume that the union of all the $N$ intervals is $[0, L)$</p>\n<h3>Output</h3>\n<p>Output two integers $x$ and $y$ mentioned in the problem statement, separated by a single space, in a line.</p>\n<p><div class=\"no-page-break\"><h3>Examples</h3><table class=\"ioexample\"><tr><th>Input</th><th>Output</th></tr><tr><td><pre>3 3\n0 2\n1 3\n1 2\n</pre></td><td><pre>2 3\n</pre></td></tr><tr><td><pre>2 4\n0 4\n0 4\n</pre></td><td><pre>1 1\n</pre></td></tr><tr><td><pre>5 4\n0 2\n2 4\n0 3\n1 3\n3 4\n</pre></td><td><pre>2 4\n</pre></td></tr></table></div></p>\n", "p02070": "<style type=\"text/css\">\n    blockquote {\n        font-family: Menlo, Monaco, \"Courier New\", monospace;\n        display: block;\n        margin: 10px 0 10px 30px;\n        font-size: 16px;\n        line-height: 18px;\n        white-space: pre;\n        white-space: pre-wrap;\n        word-break: break-all;\n        word-wrap: break-word;\n    }\n    table.ioexample {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    table.ioexample td {\n        width: 50%;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        vertical-align: top;\n        padding: 5px;\n    }\n    .no-page-break {\n        page-break-inside: avoid;\n    }\n    .page-break {\n        page-break-before: always;\n    }\n</style>\n\n\n<h3>Problem Statement</h3>\n<p>One day (call it day 0), you find a permutation $P$ of $N$ integers written on the blackboard in a single row. \nFortunately you have another permutation $Q$ of $N$ integers, so you decide to play with these permutations.</p>\n<p>Every morning of the day 1,2,3,... , you rewrite every number on the blackboard in such a way that erases the number $x$ and write the number $Q_x$ at the same position. Please find the minimum non-negative integer $d$ such that in the evening of the day $d$ the sequence on the blackboard is sorted in increasing order.</p>\n<hr />\n<h3>Input</h3>\n<p>The input consists of a single test case in the format below.</p>\n<blockquote>$N$\n$P_1$ $\\ldots$ $P_N$\n$Q_1$ $\\ldots$ $Q_N$</blockquote>\n<p>The first line contains an integer $N$ ($1 \\leq N \\leq 200$). The second line contains $N$ integers $P_1,\\ldots,P_N$ ($1 \\leq P_i \\leq N$) which represent the permutation $P$. The third line contains $N$ integers $Q_1,\\ldots,Q_N$ ($1 \\leq Q_i \\leq N$) which represent the permutation $Q$. </p>\n<h3>Output</h3>\n<p>Print the minimum non-negative integer $d$ such that in the evening of the day $d$ the sequence on the blackboard is sorted in increasing order. If such $d$ does not exist, print -1 instead.</p>\n<p>It is guaranteed that the answer does not exceed $10^{18}$.</p>\n<p><div class=\"no-page-break\"><h3>Examples</h3><table class=\"ioexample\"><tr><th>Input</th><th>Output</th></tr><tr><td><pre>6\n2 3 1 4 5 6\n3 1 2 5 4 6\n</pre></td><td><pre>4\n</pre></td></tr><tr><td><pre>6\n1 2 3 4 5 6\n3 1 2 5 4 6\n</pre></td><td><pre>0\n</pre></td></tr><tr><td><pre>6\n2 3 1 4 5 6\n3 4 5 6 1 2\n</pre></td><td><pre>-1\n</pre></td></tr></table></div></p>\n", "p02072": "<style type=\"text/css\">\n    blockquote {\n        font-family: Menlo, Monaco, \"Courier New\", monospace;\n        display: block;\n        margin: 10px 0 10px 30px;\n        font-size: 16px;\n        line-height: 18px;\n        white-space: pre;\n        white-space: pre-wrap;\n        word-break: break-all;\n        word-wrap: break-word;\n    }\n    table.ioexample {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    table.ioexample td {\n        width: 50%;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        vertical-align: top;\n        padding: 5px;\n    }\n    .no-page-break {\n        page-break-inside: avoid;\n    }\n    .page-break {\n        page-break-before: always;\n    }\n</style>\n\n<h3>Problem Statement</h3>\n<p>In A.D. 2101, war was beginning. The enemy has taken over all of our bases. To recapture the bases, we decided to set up a headquarters. We need to define the location of the headquarters so that all bases are not so far away from the headquarters. Therefore, we decided to choose the location to minimize the sum of the distances from the headquarters to the furthest $K$ bases. The bases are on the 2-D plane, and we can set up the headquarters in any place on this plane even if it is not on a grid point.</p>\n<p>Your task is to determine the optimal headquarters location from the given base positions.</p>\n<hr />\n<h3>Input</h3>\n<p>The input consists of a single test case in the format below.</p>\n<blockquote>$N$ $K$\n$x_{1}$ $y_{1}$\n$\\vdots$\n$x_{N}$ $y_{N}$</blockquote>\n<p>The first line contains two integers $N$ and $K$. The integer $N$ is the number of the bases ($1 \\le N \\le 200$). The integer $K$ gives how many bases are considered for calculation ($1 \\le K \\le N$). Each of the following $N$ lines gives the x and y coordinates of each base. All of the absolute values of given coordinates are less than or equal to $1000$, i.e., $-1000 \\le x_{i}, y_{i} \\le 1000$ is satisfied.</p>\n<h3>Output</h3>\n<p>Output the minimum sum of the distances from the headquarters to the furthest $K$ bases. The output can contain an absolute or a relative error no more than $10^{-3}$.</p>\n<p><div class=\"no-page-break\"><h3>Examples</h3><table class=\"ioexample\"><tr><th>Input</th><th>Output</th></tr><tr><td><pre>3 1\n0 1\n1 0\n1 1\n</pre></td><td><pre>0.70711\n</pre></td></tr><tr><td><pre>6 3\n1 1\n2 1\n3 2\n5 3\n8 5\n13 8\n</pre></td><td><pre>17.50426\n</pre></td></tr><tr><td><pre>9 3\n573 -50\n-256 158\n-751 14\n314 207\n293 567\n59 -340\n-243 -22\n-268 432\n-91 -192\n</pre></td><td><pre>1841.20904\n</pre></td></tr></table></div></p>\n", "p02071": "<style type=\"text/css\">\n    blockquote {\n        font-family: Menlo, Monaco, \"Courier New\", monospace;\n        display: block;\n        margin: 10px 0 10px 30px;\n        font-size: 16px;\n        line-height: 18px;\n        white-space: pre;\n        white-space: pre-wrap;\n        word-break: break-all;\n        word-wrap: break-word;\n    }\n    table.ioexample {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    table.ioexample td {\n        width: 50%;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        vertical-align: top;\n        padding: 5px;\n    }\n    .no-page-break {\n        page-break-inside: avoid;\n    }\n    .page-break {\n        page-break-before: always;\n    }\n</style>\n\n<h3>Problem Statement</h3>\n<p>Your company is developing a video game. In this game, players can exchange items. This trading follows the rule set by the developers. The rule is defined as the following format: \"Players can exchange one item $A_i$ and $x_i$ item $B_i$\". Note that the trading can be done in both directions. Items are exchanged between players and the game system. Therefore players can exchange items any number of times.</p>\n<p>Sometimes, testers find bugs that a repetition of a specific sequence of tradings causes the unlimited increment of items. For example, the following rule set can cause this bug.</p>\n<ol>\n<li>Players can exchange one item 1 and two item 2.</li>\n<li>Players can exchange one item 2 and two item 3.</li>\n<li>Players can exchange one item 1 and three item 3.</li>\n</ol>\n<p>In this rule set, players can increase items unlimitedly. For example, players start tradings with one item 1. Using rules 1 and 2, they can exchange it for four item 3. And, using rule 3, they can get one item 1 and one item 3. By repeating this sequence, the amount of item 3 increases unlimitedly.</p>\n<p>These bugs can spoil the game, therefore the developers decided to introduce the system which prevents the inconsistent trading. Your task is to write a program which detects whether the rule set contains the bug or not.</p>\n<hr />\n<h3>Input</h3>\n<p>The input consists of a single test case in the format below.</p>\n<blockquote>$N$ $M$\n$A_{1}$ $B_{1}$ $x_{1}$\n$\\vdots$\n$A_{M}$ $B_{M}$ $x_{M}$</blockquote>\n<p>The first line contains two integers $N$ and $M$ which are the number of types of items and the number of rules, respectively ($1 \\le N \\le 100 000$, $1 \\le M \\le 100 000$). Each of the following $M$ lines gives the trading rule that one item $A_{i}$ and $x_{i}$ item $B_{i}$ ($1 \\le A_{i},B_{i} \\le N$, $1 \\le x_{i} \\le 1 000 000 000$) can be exchanged in both directions. There are no exchange between same items, i.e., $A_{i} \\ne B_{i}$.</p>\n<h3>Output</h3>\n<p>If there are no bugs, i.e., repetition of any sequence of tradings does not cause an unlimited increment of items, output \"Yes\". If not, output \"No\".</p>\n<p><div class=\"no-page-break\"><h3>Examples</h3><table class=\"ioexample\"><tr><th>Input</th><th>Output</th></tr><tr><td><pre>4 4\n1 2 2\n2 3 2\n3 4 2\n4 2 3\n</pre></td><td><pre>No\n</pre></td></tr><tr><td><pre>4 3\n1 2 7\n2 3 5\n4 1 2\n</pre></td><td><pre>Yes\n</pre></td></tr><tr><td><pre>4 4\n1 2 101\n2 3 99\n1 4 100\n4 3 100\n</pre></td><td><pre>No\n</pre></td></tr><tr><td><pre>5 6\n3 1 4\n2 3 4\n5 4 15\n2 1 16\n2 4 20\n5 3 3\n</pre></td><td><pre>Yes\n</pre></td></tr></table></div></p>\n", "p02075": "<style type=\"text/css\">\n    blockquote {\n        font-family: Menlo, Monaco, \"Courier New\", monospace;\n        display: block;\n        margin: 10px 0 10px 30px;\n        font-size: 16px;\n        line-height: 18px;\n        white-space: pre;\n        white-space: pre-wrap;\n        word-break: break-all;\n        word-wrap: break-word;\n    }\n    table.ioexample {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    table.ioexample td {\n        width: 50%;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        vertical-align: top;\n        padding: 5px;\n    }\n    .no-page-break {\n        page-break-inside: avoid;\n    }\n    .page-break {\n        page-break-before: always;\n    }\n</style>\n\n<h3>Problem Statement</h3>\n<p>Your friend, Tatsumi, is a producer of Immortal Culture Production in Chiba (ICPC). His company is planning to form a zombie rock band named Gray Faces and cheer Chiba Prefecture up.</p>\n<p>But, unfortunately, there is only one zombie in ICPC. So, Tatsumi decided to release the zombie on a platform of Soga station to produce a sufficient number of zombies. As you may know, a zombie changes a human into a new zombie by passing by the human. In other words, a human becomes a zombie when the human and a zombie are at the same point. Note that a zombie who used to be a human changes a human into a zombie too.</p>\n<p>The platform of Soga station is represented by an infinitely long line, and Tatsumi will release a zombie at a point with coordinate $x_Z$. After the release, the zombie will start walking in the positive direction at $v_Z$ per second. If $v_Z$ is negative, the zombie will walk in the negative direction at $|v_Z|$ per second.</p>\n<p>There are $N$ humans on the platform. When Tatsumi releases the zombie, the $i$-th human will be at a point with coordinate $x_i$ and will start walking in the positive direction at $v_i$ per second. If $v_i$ is negative, the human will walk in the negative direction at $|v_i|$ per second as well as the zombie.</p>\n<p>For each human on the platform, Tatsumi wants to know when the human becomes a zombie. Please help him by writing a program that calculates a time when each human on the platform becomes a zombie.</p>\n<hr />\n<h3>Input</h3>\n<p>The input consists of a single test case in the following format.</p>\n<blockquote>$N$\n$x_Z$ $v_Z$\n$x_1$ $v_1$\n$\\vdots$\n$x_N$ $v_N$</blockquote>\n<p>The first line consists of an integer $N \\, (1 \\le N \\le 2 \\times 10^5)$ which is the number of humans on a platform of Soga station. The second line consists of two integers $x_Z \\, (-10^9 \\le x_Z \\le 10^9)$ and $v_Z \\, (-10^9 \\le v_Z \\le 10^9)$ separated by a space, where $x_Z$ is an initial position of a zombie Tatsumi will release and $v_Z$ is the velocity of the zombie. The $i$-th line in the following $N$ lines contains two integers $x_i \\, (-10^9 \\le x_i \\le 10^9)$ and $v_i \\, (-10^9 \\le v_i \\le 10^9)$ separated by a space, where the $x_i$ is an initial position of the $i$-th human and $v_i$ is the velocity of the human. There is no human that shares their initial position with the zombie. In addition, initial positions of the humans are different from each other.</p>\n<h3>Output</h3>\n<p>The output consists of $N$ lines. In the $i$-th line, print how many seconds it will take for the $i$-th human to become a zombie. If the $i$-th human will never become a zombie, print $-1$ instead. The answer will be considered as correct if the values output have an absolute or relative error less than $10^{-9}$.</p>\n<p><div class=\"no-page-break\"><h3>Examples</h3><table class=\"ioexample\"><tr><th>Input</th><th>Output</th></tr><tr><td><pre>6\n3 1\n-5 0\n5 0\n-4 -3\n0 -2\n6 -3\n2 -1\n</pre></td><td><pre>3.66666666666667\n2.00000000000000\n-1\n6.00000000000000\n0.75000000000000\n2.00000000000000\n</pre></td></tr><tr><td><pre>5\n31415 -926\n5358 979\n323846 26\n-433832 7950\n288 -4\n-1971 -69\n</pre></td><td><pre>13.67821522309711\n95.61812216052499\n52.41629112212708\n33.76030368763558\n38.95682613768962\n</pre></td></tr></table></div></p>\n", "p02073": "<style type=\"text/css\">\n    blockquote {\n        font-family: Menlo, Monaco, \"Courier New\", monospace;\n        display: block;\n        margin: 10px 0 10px 30px;\n        font-size: 16px;\n        line-height: 18px;\n        white-space: pre;\n        white-space: pre-wrap;\n        word-break: break-all;\n        word-wrap: break-word;\n    }\n    table.ioexample {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    table.ioexample td {\n        width: 50%;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        vertical-align: top;\n        padding: 5px;\n    }\n    .no-page-break {\n        page-break-inside: avoid;\n    }\n    .page-break {\n        page-break-before: always;\n    }\n</style>\n<h3>Problem Statement</h3>\n<p>You have a grid with $H$ rows and $W$ columns. Each cell contains one of the following 11 characters: an addition operator <code>+</code>, a multiplication operator <code>*</code>, or a digit between $1$ and $9$. </p>\n<p>There are paths from the top-left cell to the bottom-right cell by moving right or down $H+W-2$ times. Let us define the value of a path by the evaluation result of the mathematical expression you can obtain by concatenating all the characters contained in the cells on the path in order.\nYour task is to compute the sum of values of any possible paths. Since the sum can be large, find it modulo $M$.</p>\n<p>It is guaranteed the top-left cell and the bottom-right cell contain digits. Moreover, if two cells share an edge, at least one of them contains a digit. In other words, each expression you can obtain from a path is mathematically valid.</p>\n<hr />\n<h3>Input</h3>\n<p>The input consists of a single test case in the format below.</p>\n<blockquote>$H$ $W$ $M$\n$a_{1,1}$ $\\cdots$ $a_{1,W}$\n$\\ldots$\n$a_{H,1}$ $\\cdots$ $a_{H,W}$</blockquote>\n<p>The first line consists of three integers $H$, $W$ and $M$ ($1 \\le H,W \\le 2 000$, $2 \\le M \\le 10^{9}$).The following $H$ lines represent the characters on the grid. $a_{i,j}$ represents the character contained in the cell at the $i$-th row and $j$-th column. Each $a_{i,j}$ is either <code>+</code>, <code>*</code>, or a digit between $1$ and $9$. $a_{1,1}$ and $a_{H,W}$ are both digits. If two cells share an edge, at least one of them contain a digit.</p>\n<h3>Output</h3>\n<p>Print the sum of values of all possible paths modulo $M$.</p>\n<p><div class=\"no-page-break\"><h3>Examples</h3><table class=\"ioexample\"><tr><th>Input</th><th>Output</th></tr><tr><td><pre>2 3 1000\n3*1\n+27\n</pre></td><td><pre>162\n</pre></td></tr><tr><td><pre>4 4 3000000\n24+7\n*23*\n9+48\n*123\n</pre></td><td><pre>2159570\n</pre></td></tr></table></div></p>\n", "p02077": "<style type=\"text/css\">\n    blockquote {\n        font-family: Menlo, Monaco, \"Courier New\", monospace;\n        display: block;\n        margin: 10px 0 10px 30px;\n        font-size: 16px;\n        line-height: 18px;\n        white-space: pre;\n        white-space: pre-wrap;\n        word-break: break-all;\n        word-wrap: break-word;\n    }\n    table.ioexample {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    table.ioexample td {\n        width: 50%;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        vertical-align: top;\n        padding: 5px;\n    }\n    .no-page-break {\n        page-break-inside: avoid;\n    }\n    .page-break {\n        page-break-before: always;\n    }\n</style>\n\n\n<h3>Problem Statement</h3>\n<p>JAG land is a country, which is represented as an $M \\times M$ grid. Its top-left cell is $(1, 1)$ and its bottom-right cell is $(M, M)$.</p>\n<p>Suddenly, a bomber invaded JAG land and dropped bombs to the country. Its bombing pattern is always fixed and represented by an $N \\times N$ grid. Each symbol in the bombing pattern is either <code>X</code> or <code>.</code>. The meaning of each symbol is as follows.</p>\n<ul>\n<li><code>X</code>: Bomb </li>\n<li><code>.</code>: Empty</li>\n</ul>\n<p>Here, suppose that a bomber is in $(br, bc)$ in the land and drops a bomb. The cell $(br + i - 1, bc + j - 1)$ will be damaged if the symbol in the $i$-th row and the $j$-th column of the bombing pattern is <code>X</code> ($1 \\le i, j \\le N$).</p>\n<p>Initially, the bomber reached $(1, 1)$ in JAG land. The bomber repeated to move to either of $4$-directions and then dropped a bomb just $L$ times. During this attack, the values of the coordinates of the bomber were between $1$ and $M - N + 1$, inclusive, while it dropped bombs. Finally, the bomber left the country.</p>\n<p>The moving pattern of the bomber is described as $L$ characters. The $i$-th character corresponds to the $i$-th move and the meaning of each character is as follows.</p>\n<ul>\n<li><code>U</code>: Up</li>\n<li><code>D</code>: Down</li>\n<li><code>L</code>: Left</li>\n<li><code>R</code>: Right</li>\n</ul>\n<p>Your task is to write a program to analyze the damage situation in JAG land. To investigate damage overview in the land, calculate the number of cells which were damaged by the bomber at least $K$ times.</p>\n<hr />\n<h3>Input</h3>\n<p>The input consists of a single test case in the format below.</p>\n<blockquote>$N$ $M$ $K$ $L$\n$B_{1}$\n$\\vdots$\n$B_{N}$\n$S$</blockquote>\n<p>The first line contains four integers $N$, $M$, $K$ and $L$($1 \\le N &lt; M \\le 500$, $1 \\le K \\le L \\le 2 \\times 10^{5}$).\nThe following $N$ lines represent the bombing pattern.\n$B_i$ is a string of length $N$. Each character of $B_i$ is either <code>X</code> or <code>.</code>. The last line denotes the moving pattern. \n$S$ is a string of length $L$, which consists of either <code>U</code>, <code>D</code>, <code>L</code> or <code>R</code>. \nIt's guaranteed that the values of the coordinates of the bomber are between $1$ and $M - N + 1$, inclusive, while it drops bombs in the country.</p>\n<h3>Output</h3>\n<p>Print the number of cells which were damaged by the bomber at least $K$ times.</p>\n<p><div class=\"no-page-break\"><h3>Examples</h3><table class=\"ioexample\"><tr><th>Input</th><th>Output</th></tr><tr><td><pre>2 3 2 4\nXX\nX.\nRDLU\n</pre></td><td><pre>3\n</pre></td></tr><tr><td><pre>7 8 3 5\n.XXX.X.\nX..X.X.\n...XX.X\nXX.XXXX\n..XXXX.\nX.X....\n..XXXXX\nDRULD\n</pre></td><td><pre>26\n</pre></td></tr></table></div></p>\n", "p02088": "\n<h2>A: Union Ball</h2>\n\n<h3>Problem Statement</h3>\n<p>There are <var>N</var> balls in a box. The <var>i</var>-th ball is labeled with a positive integer <var>A_i</var>.</p>\n\n<p>You can interact with balls in the box by taking actions under the following rules:</p>\n\n<ul>\n<li> If integers on balls in the box are all odd or all even, you cannot take actions anymore.</li>\n<li> Otherwise, you select arbitrary two balls in the box and remove them from the box. Then, you generate a new ball labeled with the sum of the integers on the two balls and put it into the box.</li>\n</ul>\n\n<p>For given balls, what is the maximum number of actions you can take under the above rules?</p>\n\n<h3>Input</h3>\n<pre>\n<var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n\n<ul>\n<li> The first line gives an integer <var>N</var> representing the initial number of balls in a box.</li>\n<li> The second line contains <var>N</var> integers, the <var>i</var>-th of which is the integer on the <var>i</var>-th ball.</li>\n</ul>\n\n<h3>Constraints</h3>\n<ul>\n<li> <var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li> <var>1 \\leq A_i \\leq 10^9</var></li>\n<li> Inputs consist only of integers.</li>\n</ul>\n\n<h3>Output</h3>\n<p>Output the maximum number of actions you can take in one line.</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n3\n4 5 6\n</pre>\n<h3>Output for Sample Input 1</h3>\n<pre>2</pre>\n\n<p>\nFirst, you select and remove balls labeled with <var>4</var> and <var>5</var>, respectively, and add a ball labeled with <var>9</var>.\nNext, you select and remove balls labeled with <var>6</var> and <var>9</var>, respectively, and add a ball labeled with <var>15</var>.\nNow, the balls in the box only have odd numbers. So you cannot take any actions anymore. The number of actions you took is two, and there is no way to achieve three actions or more. Thus the maximum is two and the series of the above actions is one of the optimal ways.\n</p>\n\n<h3>Sample Input 2</h3>\n<pre>\n4\n4 2 4 2\n</pre>\n<h3>Output for Sample Input 2</h3>\n<pre>0</pre>\n\n<p>You cannot take any actions in this case.</p>\n", "p02089": "\n<h2>B: AddMulSubDiv</h2>\n\n<h3>Problem Statement</h3>\n\n<p>You have an array <var>A</var> of <var>N</var> integers. <var>A_i</var> denotes the <var>i</var>-th element of <var>A</var>.</p>\n\n<p>You have to process one of the following queries <var>Q</var> times:</p>\n\n<ul>\n<li> Query 1: The query consists of non-negative integer <var>x</var>, and two positive integers <var>s, t</var>. For all the elements <b>greater</b> than or equal to <var>x</var> in <var>A</var>, you have to add <var>s</var> to the elements, and then multiply them by <var>t</var>. That is, an element with <var>v (v \\geq x)</var> becomes <var>t(v + s)</var> after this query.</li>\n</ul>\n\n<ul>\n<li> Query 2: The query consists of non-negative integer <var>x</var>, and two positive integers <var>s, t</var>. For all the elements <b>less</b> than or equal to <var>x</var> in <var>A</var>, you have to subtract <var>s</var> from the elements, and then divide them by <var>t</var>. If the result is not an integer, you truncate it towards zero. That is, an element with <var>v (v \\leq x)</var> becomes $\\mathrm{trunc}$ <var>( \\frac{v - s}{t} )</var> after this query, where $\\mathrm{trunc}$ <var>( y )</var> is the integer obtained by truncating <var>y</var> towards zero. </li>\n</ul>\n\n<ul>\n<ul>\n<li> \"Truncating towards zero\" means converting a decimal number to an integer so that if <var>x = 0.0</var> then <var>0 </var>, otherwise an integer whose absolute value is the maximum integer no more than <var>|x|</var> and whose sign is same as <var>x</var>. For example, truncating <var>3.5</var> towards zero is <var>3</var>, and truncating <var>-2.8</var> towards zero is <var>-2</var>.</li>\n</ul>\n</ul>\n\n<p>After applying <var>Q</var> queries one by one, how many elements in <var>A</var> are no less than <var>L</var> and no more than <var>R</var>?</p>\n\n<h3>Input</h3>\n<pre>\n<var>N</var> <var>Q</var> <var>L</var> <var>R</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n<var>q_1</var> <var>x_1</var> <var>s_1</var> <var>t_1</var>\n<var>:</var>\n<var>q_Q</var> <var>x_Q</var> <var>s_Q</var> <var>t_Q</var>\n</pre>\n\n<ul>\n<li> The first line contains four integers <var>N</var>, <var>Q</var>, <var>L</var>, and <var>R</var>. <var>N</var> is the number of elements in an integer array <var>A</var>, <var>Q</var> is the number of queries, and <var>L</var> and <var>R</var> specify the range of integers you want to count within after the queries.</li>\n<li> The second line consists of <var>N</var> integers, the <var>i</var>-th of which is the <var>i</var>-th element of <var>A</var>.</li>\n<li> The following <var>Q</var> lines represent information of queries. The <var>j</var>-th line of them corresponds to the <var>j</var>-th query and consists of four integers <var>q_j</var>, <var>x_j</var>, <var>s_j</var>, and <var>t_j</var>.  Here, <var>q_j = 1</var> stands for the <var>j</var>-th query is Query 1, and <var>q_j = 2</var> stands for the <var>j</var>-th query is Query 2. <var>x_j</var>, <var>s_j</var>, and <var>t_j</var> are parameters used for the <var>j</var>-th query.</li>\n</ul>\n\n<h3>Constraints</h3>\n<ul>\n<li> <var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li> <var>1 \\leq Q \\leq 2 \\times 10^5</var></li>\n<li> <var>-2^{63} &lt; L \\leq R &lt; 2^{63}</var></li>\n<li> <var>0 \\leq |A_i| \\leq 10^9</var></li>\n<li> <var>q_j \\in \\{ 1, 2 \\}</var></li>\n<li> <var>0 \\leq x_j &lt; 2^{63}</var></li>\n<li> <var>1 \\leq s_j, t_j \\leq 10^9</var></li>\n<li> Inputs consist only of integers.</li>\n<li> The absolute value of any element in the array dosen't exceed <var>2^{63}</var> at any point during query processing.</li>\n</ul>\n\n<h3>Output</h3>\n<p>Output the number of elements in <var>A</var> that are no less than <var>L</var> and no more than <var>R</var> after processing all given queries in one line.</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n3 3 3 10\n1 -2 3\n1 2 2 3\n2 20 1 3\n2 1 20 5\n</pre>\n\n<h3>Output for Sample Input 1</h3>\n<pre>1</pre>\n", "p02091": "\n<h2>D: XORANDORBAN</h2>\n\n<h3>Problem Statement</h3>\n<p>You are given a positive integer <var>N</var>. Your task is to determine a set <var>S</var> of <var>2^N</var> integers satisfying the following conditions:</p>\n\n<ul>\n<li> All the integers in <var>S</var> are at least <var>0 </var> and less than <var>2^{N+1}</var>.</li>\n<li> All the integers in <var>S</var> are distinct.</li>\n<li> You are also given three integers <var>X</var>, <var>A</var>, and <var>O</var>, where <var>0 \\leq X, A, O &lt; 2^{N+1}</var>. Then, any two integers (<var>a</var>, <var>b</var>) in <var>S</var> must satisfy <var>a</var> <var>{\\it xor}</var> <var>b \\neq X</var>, <var>a</var> <var>{\\it and}</var> <var>b \\neq A</var>, <var>a</var> <var>{\\it or}</var> <var>b \\neq O</var>, where <var>{\\it xor}</var>, <var>{\\it and}</var>, <var>{\\it or}</var> are <i>bitwise xor</i>, <i>bitwise and</i>, <i>bitwise or</i>, respectively. Note that <var>a</var> and <var>b</var> are not necessarily different.</li>\n</ul>\n\n<h3>Input</h3>\n<pre><var>N</var> <var>X</var> <var>A</var> <var>O</var></pre>\n\n<h3>Constraints</h3>\n<ul>\n<li> <var>1 \\leq N \\leq 13</var></li>\n<li> <var>0 \\leq X, A, O &lt; 2^{N+1}</var></li>\n<li> Inputs consist only of integers.</li>\n</ul>\n\n<h3>Output</h3>\n<p>If there is no set satisfying the conditions mentioned in the problem statement, output <code>No</code> in a line. Otherwise, output <code>Yes</code> in the first line, and then output <var>2^N</var> integers in such a set in the second line. If there are multiple sets satisfying the conditions, you can output any of them.</p>\n\n<h3>Sample Input 1</h3>\n<pre>2 6 1 5</pre>\n\n<h3>Output for Sample Input 1</h3>\n<pre>\nYes\n0 3 4 7\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>3 0 5 1</pre>\n\n<h3>Output for Sample Input 2</h3>\n<pre>No</pre>\n\n<h3>Sample Input 3</h3>\n<pre>3 4 2 5</pre>\n\n<h3>Output for Sample Input 3</h3>\n<pre>\nYes\n1 0 6 15 8 9 14 7\n</pre>\n", "p02090": "\n<h2>C: Shuttle Run</h2>\n\n<h3>Story</h3>\n<p>\nUniversity H has a unique physical fitness test program, aiming to grow the mindset of students.\nAmong the items in the program, shuttle run is well-known as especially eccentric one. Surprisingly, there are yokans (sweet beans jellies) on a route of the shuttle run. Greedy Homura-chan would like to challenge to eat all the yokans. And lazy Homura-chan wants to make the distance she would run as short as possible. For her, you decided to write a program to compute the minimum distance she would run required to eat all the yokans.\n</p>\n\n<h3>Problem Statement</h3>\n<p>At the beginning of a shuttle run, Homura-chan is at <var>0 </var> in a positive direction on a number line. During the shuttle run, Homura-chan repeats the following moves:</p>\n\n<ul>\n<li> Move in a positive direction until reaching <var>M</var>.</li>\n<li> When reaching <var>M</var>, change the direction to negative.</li>\n<li> Move in a negative direction until reaching <var>0 </var>.</li>\n<li> When reaching <var>0 </var>, change the direction to positive.</li>\n</ul>\n\n<p>During the moves, Homura-chan also eats yokans on the number line. There are <var>N</var> yokans on the number line. Initially, the <var>i</var>-th yokan, whose length is <var>R_i - L_i</var>, is at an interval <var>[L_i, R_i]</var> on the number line. When Homura-chan reaches <var>L_i</var> in a positive direction (or <var>R_i</var> in a negative direction), she can start eating the <var>i</var>-th yokan from <var>L_i</var> to <var>R_i</var> (or from <var>R_i</var> to <var>L_i</var>), and then the <var>i</var>-th yokan  disappears. Unfortunately, Homura-chan has only one mouth. So she cannot eat two yokans at the same moment, including even when she starts eating and finishes eating (See the example below). Also, note that she cannot stop eating in the middle of yokan and has to continue eating until she reaches the other end of the yokan she starts eating; it's her belief.</p>\n\n<p>Calculate the minimum distance Homura-chan runs to finish eating all the yokans. The shuttle run never ends until Homura-chan eats all the yokans.</p>\n\n<h3>Input</h3>\n<pre>\n<var>N</var> <var>M</var>\n<var>L_1</var> <var>R_1</var>\n<var>:</var>\n<var>L_N</var> <var>R_N</var>\n</pre>\n\n<p>The first line contains two integers <var>N</var> and <var>M</var>. The following <var>N</var> lines represent the information of yokan, where the <var>i</var>-th of them contains two integers <var>L_i</var> and <var>R_i</var> corresponding to the interval <var>[L_i, R_i]</var> the <var>i</var>-th yokan is.</p>\n\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>3 \\leq M \\leq 10^9</var></li>\n<li><var>0 &lt; L_i &lt; R_i &lt; M</var></li>\n<li> Inputs consist only of integers.</li>\n</ul>\n\n<h3>Output</h3>\n<p>Output the minimum distance Homura-chan runs to eat all the given yokan in a line.</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n1 3\n1 2\n</pre>\n\n<h3>Output for Sample Input 1</h3>\n<pre>2</pre>\n\n<h3>Sample Input 2</h3>\n<pre>\n2 5\n1 2\n2 4\n</pre>\n\n<h3>Output for Sample Input 2</h3>\n<pre>8</pre>\n\n<p>Note that when Homura-chan is at the coordinate <var>2</var>, she cannot eat the first and second yokan at the same time.</p>\n\n<object data=\"https://judgeapi.u-aizu.ac.jp/resources/images/JAGSummerCamp19Day3_C_shuttle_run.png\" type=\"image/png\" width=\"400\"></object>\n", "p02094": "\n<h2>G: Toss Cut Tree</h2>\n\n<h3>Problem Statement</h3>\n<p>You are given two trees <var>T, U</var>. Each tree has <var>N</var> vertices that are numbered <var>1</var> through <var>N</var>. The <var>i</var>-th edge (<var>1 \\leq i \\leq N-1</var>) of tree <var>T</var> connects vertices <var>a_i</var> and <var>b_i</var>. The <var>i</var>-th edge (<var>1 \\leq i \\leq N-1</var>) of tree <var>U</var> connects vertices <var>c_i</var> and <var>d_i</var>.</p>\n\n<p>The operation described below will be performed <var>N</var> times.</p>\n\n<ul>\n<li> On the <var>i</var>-th operation, flip a fair coin.</li>\n</ul>\n\n<ul>\n<ul>\n<li> If it lands heads up, remove vertex <var>i</var> and all edges directly connecting to it from tree <var>T</var>.</li>\n<li> If it lands tails up, remove vertex <var>i</var> and all edges directly connecting to it from tree <var>U</var>. </li>\n</ul>\n</ul>\n\n<p>\nAfter <var>N</var> operations, each tree will be divided into several connected components. Let <var>X</var> and <var>Y</var> be the number of connected components originated from tree <var>T</var> and <var>U</var>, respectively.\nYour task is to compute the expected value of <var>X \\times Y</var>. More specifically, your program must output an integer <var>R</var> described below.\nFirst, you can prove <var>X \\times Y</var> is a rational number. Let <var>P</var> and <var>Q</var> be coprime integers that satisfies <var>\\frac{P}{Q} = X \\times Y</var>. <var>R</var> is the only integer that satisfies <var>R \\times Q</var> $\\equiv$ <var>P</var> $ \\bmod \\;$ <var> 998244353, 0 \\leq R &lt; 998244353</var>.\n</p>\n\n<h3>Input</h3>\n<pre>\n<var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n<var>c_1</var> <var>d_1</var>\n<var>:</var>\n<var>c_{N-1}</var> <var>d_{N-1}</var>\n</pre>\n\n<h3>Constraints</h3>\n<ul>\n<li> <var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li> <var>1 \\leq a_i, b_i, c_i, d_i \\leq N</var></li>\n<li> The given two graphs are trees.</li>\n<li> All values in the input are integers.</li>\n</ul>\n\n<h3>Output</h3>\n<p>Print <var>R</var> described above in a single line.</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n3\n1 2\n2 3\n1 2\n3 1\n</pre>\n\n<h3>Output for Sample Input 1</h3>\n<pre>1</pre>\n\n<p>A coin is flipped <var>3</var> times. Therefore, there are <var>2^3 = 8</var> outcomes in total.</p>\n\n<p>Suppose that the outcome was (tail, head, tail) in this order. Vertex <var>2</var> of tree <var>T</var> and vertex <var>1</var>, <var>3</var> of tree <var>U</var> are removed along with all edges connecting to them. <var>T</var>, <var>U</var> are decomposed to <var>2</var>, <var>1</var> connected components, respectively. Thus, the value of <var>XY</var> is <var>2 \\times 1 = 2</var> in this case.</p>\n\n<p>It is possible to calculate <var>XY</var> for the other cases in the same way and the expected value of <var>XY</var> is <var>1</var>.</p>\n\n<h3>Sample Input 2</h3>\n<pre>\n4\n1 2\n1 4\n2 3\n1 4\n4 2\n2 3\n</pre>\n\n<h3>Output for Sample Input 2</h3>\n<pre>374341634</pre>\n\n<p>The expected number of <var>XY</var> is <var>\\frac{13}{8}</var>.</p>\n", "p02092": "\n<h2>E: Red Black Balloons</h2>\n<h3>Story</h3>\n<p>Homura-chan's dream comes true. It means ICPC Asia regional contest 20xx will be held in Sapporo! Homura-chan has been working hard for the preparation. And finally, it's the previous day of the contest. Homura-chan started to stock balloons to be delivered to contestants who get accepted. However, she noticed that there were only two colors of balloons: red and black.</p>\n\n<h3>Problem Statement</h3>\n<p>ICPC Asia regional contest in Sapporo plans to provide <var>N</var> problems to contestants. Homura-chan is a professional of contest preparation, so she already knows how many contestants would get acceptance for each problem (!!), <var>a_i</var> contestants for the <var>i</var>-th problem. You can assume the prediction is perfectly accurate. Ideally, Homura-chan would assign a distinct color of a balloon to each problem respectively. But you know, she has only two colors red and black now. Thus, Homura-chan comes up with the idea to differentiate the size of balloons in <b><var>K</var> levels</b>, that is, each problem has a balloon with a distinct pair of (color, size).</p>\n\n<p>Homura-chan now has <var>r_i</var> red balloons with size <var>i</var> (<var>1 \\leq i \\leq K</var>) and <var>b_j</var> black balloons with size <var>j</var> (<var>1 \\leq j \\leq K</var>). Suppose we assign a pair <var>(c_i, s_i)</var> of a color <var>c_i</var> (red or black) and a size <var>s_i</var> to the <var>i</var>-th problem, for each <var>i</var>. As noted, we have to assign distinct pairs to each problem, more precisely, <var>(c_i, s_i) \\neq (c_j, s_j)</var> holds for <var>i \\neq j</var>. Moreover, the number of balloons with <var>(c_i, s_i)</var> must be no less than <var>a_i</var>. In the case that there are no such assignments, Homura-chan can change the size of balloons by her magic power. Note that Homura-chan doesn't know magic to change the color of balloons, so it's impossible.</p>\n\n<p>Your task is to write a program computing the minimum number of balloons whose size is changed by Homura-chan's magic to realize an assignment satisfying the above-mentioned conditions. If there is no way to achieve such an assignment even if Homura-chan changes the size of balloons infinitely, output <code>-1</code> instead.</p>\n\n<h3>Input</h3>\n<pre>\n<var>N</var> <var>K</var>\n<var>a_1 ... a_N</var>\n<var>r_1 ... r_K</var>\n<var>b_1 ... b_K</var>\n</pre>\n\n<h3>Constraints</h3>\n<ul>\n<li> <var>1 \\leq N,K \\leq 60</var></li>\n<li> <var>N \\leq 2K</var></li>\n<li> <var>1 \\leq a_i \\leq 50</var> <var>(1 \\leq i \\leq N) </var></li>\n<li> <var>1 \\leq r_j,b_j \\leq 50</var> <var>(1 \\leq j \\leq K) </var></li>\n<li> Inputs consist only of integers.</li>\n</ul>\n\n<h3>Output</h3>\n<p>Output the minimum number of balloons whose size is changed to achieve an assignment in a line. If there are no ways to achieve assignments, output <code>-1</code> instead.</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n3 2\n6 5 4\n8 1\n7 1\n</pre>\n\n<h3>Output for Sample Input 1</h3>\n<pre>3</pre>\n\n<p>Homura-chan changes the size of three red balloons from 1 to 2.  Then she can assign (black,1) to the problem 1, (red,1) to the problem 2, and (red,2) to the problem 3.</p>\n\n<h3>Sample Input 2</h3>\n<pre>\n2 1\n50 50\n2\n3\n</pre>\n\n<h3>Output for Sample Input 2</h3>\n<pre>-1</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n4 3\n3 10 28 43\n40 18 2\n26 7 11\n</pre>\n\n<h3>Output for Sample Input 3</h3>\n<pre>5</pre>\n", "p02097": "\n<h2>J: Horizontal-Vertical Permutation</h2>\n\n<h3>Problem Statement</h3>\n<p>You are given a positive integer <var>N</var>. Your task is to determine if there exists a square matrix <var>A</var> whose dimension is <var>N</var> that satisfies the following conditions and provide an example of such matrices if it exists. <var>A_{i, j}</var> denotes the element of matrix <var>A</var> at the <var>i</var>-th row and <var>j</var>-th column.</p>\n\n<ul>\n<li> For all <var>i, j</var> <var>(1 \\leq i, j \\leq N)</var>, <var>A_{i, j}</var> is an integer that satisfies <var>1 \\leq A_{i, j} \\leq 2N - 1</var>.</li>\n<li> For all <var>k = 1, 2, ..., N</var>, a set consists of  <var>2N - 1</var> elements from the <var>k</var>-th row or <var>k</var>-th column is <var>\\{1, 2, ..., 2N - 1\\}</var>.</li>\n</ul>\n\n<p>If there are more than one possible matrices, output any of them.</p>\n\n<h3>Input</h3>\n<pre><var>N</var></pre>\n\n<p>Input consists of one line, which contains the integer <var>N</var> that is the size of a square matrix to construct.</p>\n\n<h3>Constraint</h3>\n<ul>\n<li> <var>N</var> is an integer that satisfies <var>1 \\leq N \\leq 500</var>.</li>\n</ul>\n\n<h3>Output</h3>\n<p>Output <code>No</code> in a single line if such a square matrix does not exist.</p>\n\n<p>If such a square matrix <var>A</var> exists, output <code>Yes</code> on the first line and <var>A</var> after that. More specifically, follow the following format.</p>\n\n<pre>\nYes\n<var>A_{1, 1}</var> <var>A_{1, 2}</var> <var>...</var> <var>A_{1, N}</var>\n<var>A_{2, 1}</var> <var>A_{2, 2}</var> <var>...</var> <var>A_{2, N}</var>\n<var>:</var>\n<var>A_{N, 1}</var> <var>A_{N, 2}</var> <var>...</var> <var>A_{N, N}</var>\n</pre>\n\n<h3>Sample Input 1</h3>\n<pre>4</pre>\n\n<h3>Output for Sample Input 1</h3>\n<pre>\nYes\n2 6 3 7\n4 5 2 1\n1 7 5 6\n5 3 4 2\n</pre>\n\n<h3>Sample Input 2</h3>\n<pre>3</pre>\n\n<h3>Output for Sample Input 2</h3>\n<pre>No</pre>\n", "p02096": "\n<h2>I: Add</h2>\n\n<h3>Problem Statement</h3>\n<p>Mr. T has had an integer sequence of <var>N</var> elements <var>a_1, a_2, ... , a_N</var> and an integer <var>K</var>. Mr. T has created <var>N</var> integer sequences <var>B_1, B_2, ... , B_N</var> such that <var>B_i</var> has <var>i</var> elements.</p>\n\n<ul>\n<li> <var>B_{N,j} = a_j</var> (<var>1 \\leq j \\leq N</var>) </li>\n<li> <var>B_{i,j} = K \\times B_{i+1,j} + B_{i+1,j+1}</var> (<var>1\\leq i \\leq N-1, 1 \\leq j \\leq i</var>)</li>\n</ul>\n\n<p>Mr. T was so careless that he lost almost all elements of these sequences <var>a</var> and <var>B_i</var>. Fortunately, <var>B_{1,1}, B_{2,1}, ... , B_{N,1}</var> and <var>K</var> are not lost. Your task is to write a program that restores the elements of the initial sequence <var>a</var> for him. Output the modulo <var>65537</var> of each element instead because the absolute value of these elements can be extremely large. More specifically, for all integers <var>i</var> (<var>1 \\leq i \\leq N</var>), output <var>r_i</var> that satisfies <var>r_i </var> $\\equiv$ <var>a_i</var> $ \\bmod \\;$ <var>65537, 0 \\leq r_i &lt; 65537</var>. Here, we can prove that the original sequence Mr. T had can be uniquely determined under the given constraints.</p>\n\n<h3>Input</h3>\n\n<pre>\n<var>T</var>\n<var>N_1</var> <var>K_1</var>\n<var>C_{1,1}</var> <var>C_{1,2}</var> <var>...</var> <var>C_{1,N}</var>\n<var>N_2</var> <var>K_2</var>\n<var>C_{2,1}</var> <var>C_{2,2}</var> <var>...</var> <var>C_{2,N}</var>\n<var>:</var>\n<var>N_T</var> <var>K_T</var>\n<var>C_{T,1}</var> <var>C_{T,2}</var> <var>...</var> <var>C_{T,N}</var>\n</pre>\n\n<p>The first line contains a single integer <var>T</var> that denotes the number of test cases. Each test case consists of 2 lines. The first line of the <var>i</var>-th test case contains two integers <var>N_i</var> and <var>K_i</var>. The second line of the <var>i</var>-th test case contains <var>N_i</var> integers <var>C_{i,j}</var> (<var>1 \\leq j \\leq N_i</var>). These values denote that <var>N = N_i , K = K_i , B_{j,1} = C_{i,j}</var> (<var>1 \\leq j \\leq N_i</var>) in the <var>i</var>-th test case.</p>\n\n<h3>Constraints</h3>\n<ul>\n<li> <var>1 \\leq T \\leq 10</var></li>\n<li> <var>1 \\leq N \\leq 50000</var></li>\n<li> <var>|K| \\leq 10^9</var></li>\n<li> <var>|B_{i,1}| \\leq 10^9</var> </li>\n<li> All input values are integers.</li>\n</ul>\n\n<h3>Output</h3>\n<p>Output <var>T</var> lines. For the <var>i</var>-th line, output the answer for the <var>i</var>-th test case <var>a_1, a_2, ..., a_N</var> in this order. Each number must be separated by a single space.</p>\n\n<h3>Sample Input 1</h3>\n<pre>\n2\n3 0\n1 2 3\n3 1\n1 2 3\n</pre>\n\n<h3>Output for Sample Input 1</h3>\n<pre>\n3 2 1\n3 65536 0\n</pre>\n", "p02228": "a", "p02229": "b", "p02230": "UF with binary input (K = 100)", "p02231": "UF with standard input (K = 100)", "p02234": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Matrix-chain Multiplication</H1>\n\n<p>\n  The goal of the matrix-chain multiplication problem is to find the most efficient way to multiply given $n$ matrices $M_1, M_2, M_3,...,M_n$.\n</p>\n\n<p>\n  Write a program which reads dimensions of $M_i$, and finds the minimum number of scalar multiplications to compute the maxrix-chain multiplication $M_1M_2...M_n$.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, an integer $n$ is given. In the following $n$ lines, the dimension of matrix $M_i$ ($i = 1...n$) is given by two integers $r$ and $c$ which respectively represents the number of rows and columns of $M_i$.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the minimum number of scalar multiplication in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$1 \\leq n \\leq 100$</li>\n<li>$1 \\leq r, c \\leq 100$</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n6\n30 35\n35 15\n15 5\n5 10\n10 20\n20 25\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n15125\n</pre>\n", "p02235": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Longest Common Subsequence</H1>\n\n<p>\nFor given two sequences $X$ and $Y$, a sequence $Z$ is a common subsequence of $X$ and $Y$ if $Z$ is a subsequence of both $X$ and $Y$. For example, if $X = \\{a,b,c,b,d,a,b\\}$ and $Y = \\{b,d,c,a,b,a\\}$, the sequence $\\{b,c,a\\}$ is a common subsequence of both $X$ and $Y$. On the other hand, the sequence $\\{b,c,a\\}$ is not a longest common subsequence (LCS) of $X$ and $Y$, since it has length 3 and the sequence $\\{b,c,b,a\\}$, which is also common to both $X$ and $Y$, has length 4. The sequence $\\{b,c,b,a\\}$ is an LCS of $X$ and $Y$, since there is no common subsequence of length 5 or greater.\n</p>\n\n<p>\n  Write a program which finds the length of LCS of given two sequences $X$ and $Y$. The sequence consists of alphabetical characters.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of multiple datasets. In the first line, an integer $q$ which is the number of datasets is given. In the following $2 \\times q$ lines, each dataset which consists of the two sequences $X$ and $Y$ are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each dataset, print the length of LCS of $X$ and $Y$ in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$1 \\leq q \\leq 150$</li>\n<li>$1 \\leq$ length of $X$ and $Y$ $\\leq 1,000$</li>\n<li>$q \\leq 20$ if the dataset includes a sequence whose length is more than 100</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3\nabcbdab\nbdcaba\nabc\nabc\nabc\nbc\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n4\n3\n2\n</pre>\n\n<H2>Reference</H2>\n\n<p>\nIntroduction to Algorithms, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. The MIT Press.\n</p>\n", "p02239": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Breadth First Search</H1>\n\n<p>\n  Write a program which reads an directed graph $G = (V, E)$, and finds the shortest distance from vertex $1$ to each vertex (the number of edges in the shortest path). Vertices are identified by IDs $1, 2, ... n$. \n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, an integer $n$ denoting the number of vertices, is given. In the next $n$ lines, adjacent lists of vertex $u$ are given in the following format:\n</p>\n\n<p>\n$u$ $k$ $v_1$ $v_2$ ... $v_k$\n</p>\n\n<p>\n$u$ is ID of the vertex and $k$ denotes its degree.$v_i$ are IDs of vertices adjacent to $u$.\n</p>\n\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$1 \\leq n \\leq 100$</li>\n</ul>\n\n<H2>Output</H2>\n\n<p>\n  For each vertex $u$, print $id$ and $d$ in a line. $id$ is ID of vertex $u$ and $d$ is the distance from vertex $1$ to vertex $u$. If there are no path from vertex $1$ to vertex $u$, print -1 as the shortest distance. Print in order of IDs.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n4\n1 2 2 4\n2 1 4\n3 0\n4 1 3\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n1 0\n2 1\n3 2\n4 1\n</pre>\n\n<br>\n\n\n<H2>Reference</H2>\n\n<p>\nIntroduction to Algorithms, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. The MIT Press.\n</p>", "p02240": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Connected Components</H1>\n\n<p>\n  Write a program which reads relations in a SNS (Social Network Service), and judges that given pairs of users are reachable each other through the network.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, two integer $n$ and $m$ are given. $n$ is the number of users in the SNS and $m$ is the number of relations in the SNS. The users in the SNS are identified by IDs $0, 1, ..., n-1$.\n</p>\n\n<p>\n  In the following $m$ lines, the relations are given. Each relation is given by two integers $s$ and $t$ that represents $s$ and $t$ are friends (and reachable each other).\n</p>\n\n<p>\n  In the next line, the number of queries $q$ is given. In the following $q$ lines, $q$ queries are given respectively. Each query consists of two integers $s$ and $t$ separated by a space character.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each query, print \"yes\" if $t$ is reachable from $s$ through the social network, \"no\" otherwise.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$2 \\leq n \\leq 100,000$</li>\n<li>$0 \\leq m \\leq 100,000$</li>\n<li>$1 \\leq q \\leq 10,000$</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n10 9\n0 1\n0 2\n3 4\n5 7\n5 6\n6 7\n6 8\n7 8\n8 9\n3\n0 1\n5 9\n1 3\n</pre>\n\n<H2>Sample Output</H2>\n<pre>\nyes\nyes\nno\n</pre>", "p02241": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Minimum Spanning Tree</H1>\n\n<p>\n  For a given weighted graph $G = (V, E)$, find the minimum spanning tree (MST) of $G$ and print total weight of edges belong to the MST.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, an integer $n$ denoting the number of vertices in $G$ is given. In the following $n$ lines, a $n \\times n$ adjacency matrix $A$ which represents $G$ is given.\n$a_{ij}$ denotes the weight of edge connecting vertex $i$ and vertex $j$. If there is no edge between $i$ and $j$, $a_{ij}$ is given by -1.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the total weight of the minimum spanning tree of $G$.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$1 \\leq n \\leq 100$</li>\n<li>$0 \\leq a_{ij} \\leq 2,000$ (if $a_{ij} \\neq -1$)</li>\n<li>$a_{ij} = a_{ji}$</li>\n<li>$G$ is a connected graph</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n5\n -1 2 3 1 -1\n 2 -1 -1 4 -1\n 3 -1 -1 1 1\n 1 4 1 -1 3\n -1 -1 1 3 -1\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n5\n</pre>\n\n<H2>Reference</H2>\n\n<p>\nIntroduction to Algorithms, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. The MIT Press.\n</p>", "p02242": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Single Source Shortest Path</H1>\n\n<p>\nFor a given weighted graph $G = (V, E)$, find the shortest path from a source to each vertex. For each vertex $u$, print the total weight of edges on the shortest path from vertex $0$ to $u$.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, an integer $n$ denoting the number of vertices in $G$ is given. In the following $n$ lines, adjacency lists for each vertex $u$ are respectively given in the following format:\n</p>\n\n<p>\n$u$ $k$ $v_1$ $c_1$ $v_2$ $c_2$ ... $v_k$ $c_k$\n</p>\n\n<p>\n  Vertices in $G$ are named with IDs $0, 1, ..., n-1$. $u$ is ID of the target vertex and $k$ denotes its degree. $v_i (i = 1, 2, ... k)$ denote IDs of vertices adjacent to $u$ and $c_i$ denotes the weight of a directed edge connecting $u$ and $v_i$ (from $u$ to $v_i$).\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each vertex, print its ID and the distance separated by a space character in a line respectively. Print in order of vertex IDs.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$1 \\leq n \\leq 100$</li>\n<li>$0 \\leq c_i \\leq 100,000$</li>\n<li>$|E| \\leq 10,000$</li>\n<li>All vertices are reachable from vertex $0$</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n5\n0 3 2 3 3 1 1 2\n1 2 0 2 3 4\n2 3 0 3 3 1 4 1\n3 4 2 1 0 1 1 4 4 3\n4 2 2 1 3 3\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n0 0\n1 2\n2 2\n3 1\n4 3\n</pre>\n\n<H2>Reference</H2>\n\n<p>\nIntroduction to Algorithms, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. The MIT Press.\n</p>", "p02237": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Graph</H1>\n\n<p>\nThere are two standard ways to represent a graph $G = (V, E)$, where $V$ is a set of vertices and $E$ is a set of edges; Adjacency list representation and Adjacency matrix representation.\n</p>\n\n<p>\n  An adjacency-list representation consists of an array $Adj[|V|]$ of $|V|$ lists, one for each vertex in $V$. For each $u \\in V$, the adjacency list $Adj[u]$ contains all vertices $v$ such that there is an edge $(u, v) \\in E$. That is, $Adj[u]$ consists of all vertices adjacent to $u$ in $G$.\n</p>\n\n<p>\n  An adjacency-matrix representation consists of $|V| \\times |V|$ matrix $A = a_{ij}$ such that $a_{ij} = 1$ if $(i, j) \\in E$, $a_{ij} = 0$ otherwise.\n</p>\n\n<p>\n  Write a program which reads a directed graph $G$ represented by the adjacency list, and prints its adjacency-matrix representation. $G$ consists of $n\\; (=|V|)$ vertices identified by their IDs $1, 2,.., n$ respectively.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  In the first line, an integer $n$ is given. In the next $n$ lines, an adjacency list $Adj[u]$ for vertex $u$ are given in the following format:\n</p>\n\n<p>\n$u$ $k$ $v_1$ $v_2$ ... $v_k$\n</p>\n\n\n<p>\n $u$ is vertex ID and $k$ denotes its degree. $v_i$ are IDs of vertices adjacent to $u$.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  As shown in the following sample output, print the adjacent-matrix representation of $G$. Put a single space character between $a_{ij}$.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$1 \\leq n \\leq 100$</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n<pre>\n4\n1 2 2 4\n2 1 4\n3 0\n4 1 3\n</pre>\n\n<H2>Sample Output</H2>\n<pre>\n0 1 0 1\n0 0 0 1\n0 0 0 0\n0 0 1 0\n</pre>\n\n", "p02245": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>8 Puzzle</H1>\n\n\n<p>\n  The goal of the 8 puzzle problem is to complete pieces on $3 \\times 3$ cells where one of the cells is empty space. \n</p>\n\n<p>\n  In this problem, the space is represented by 0 and pieces are represented by integers from 1 to 8 as shown below.\n</p>\n\n<pre>\n1 3 0\n4 2 5\n7 8 6\n</pre>\n\n<p>\n  You can move a piece toward the empty space at one step. Your goal is to make the pieces the following configuration in the shortest move (fewest steps).\n</p>\n\n\n<pre>\n1 2 3\n4 5 6\n7 8 0\n</pre>\n\n<p>\n  Write a program which reads an initial state of the puzzle and prints the fewest steps to solve the puzzle.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The $3 \\times 3$ integers denoting the pieces or space are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the fewest steps in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>There is a solution.</li>\n</ul>\n\n<H2>Sample Input </H2>\n<pre>\n1 3 0\n4 2 5\n7 8 6\n</pre>\n\n<H2>Sample Output</H2>\n<pre>\n4\n</pre>\n", "p02247": "\n<H1>Naive String Search</H1>\n\n<p>\n  Find places where a string <var>P</var> is found within a text <var>T</var>.\n  \n  Print all indices of <var>T</var> where <var>P</var> found. The indices of <var>T</var> start with 0.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, a text <var>T</var> is given. In the second line, a string <var>P</var> is given.\n</p>\n\n<H2>output</H2>\n\n<p>\n  Print an index of <var>T</var> where <var>P</var> found in a line. Print the indices in ascending order.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n  <li> 1 &le; length of <var>T</var> &le; 1000 </li>\n  <li> 1 &le; length of <var>P</var> &le; 1000 </li>\n  <li>The input consists of alphabetical characters and digits</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\naabaaa\naa\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n0\n3\n4\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\nxyzz\nyz\n</pre>\n\n<H2>Sample Output 2</H2>\n<pre>\n1\n</pre>\n\n\n\n<H2>Sample Input 3</H2>\n<pre>\nabc\nxyz\n</pre>\n\n<H2>Sample Output3</H2>\n<pre>\n</pre>\n<p>\nThe ouput should be empty.\n</p>\n", "p02243": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Single Source Shortest Path II</H1>\n\n\n<p>\n  For a given weighted graph $G = (V, E)$, find the shortest path from a source to each vertex. For each vertex $u$, print the total weight of edges on the shortest path from vertex $0$ to $u$.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, an integer $n$ denoting the number of vertices in $G$ is given. In the following $n$ lines, adjacency lists for each vertex $u$ are respectively given in the following format:\n</p>\n\n<p>\n$u$ $k$ $v_1$ $c_1$ $v_2$ $c_2$ ... $v_k$ $c_k$\n</p>\n\n<p>\n  Vertices in $G$ are named with IDs $0, 1, ..., n-1$. $u$ is ID of the target vertex and $k$ denotes its degree. $v_i (i = 1, 2, ... k)$ denote IDs of vertices adjacent to $u$ and $c_i$ denotes the weight of a directed edge connecting $u$ and $v_i$ (from $u$ to $v_i$).\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each vertex, print its ID and the distance separated by a space character in a line respectively. Print in order of vertex IDs.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$1 \\leq n \\leq 10,000$</li>\n<li>$0 \\leq c_i \\leq 100,000$</li>\n<li>$|E| < 500,000$</li>\n<li>All vertices are reachable from vertex $0$</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n5\n0 3 2 3 3 1 1 2\n1 2 0 2 3 4\n2 3 0 3 3 1 4 1\n3 4 2 1 0 1 1 4 4 3\n4 2 2 1 3 3\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n0 0\n1 2\n2 2\n3 1\n4 3\n</pre>\n\n<br>\n\n<H2>Reference</H2>\n\n<p>\nIntroduction to Algorithms, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. The MIT Press.\n</p>", "p02248": "\n<H1>String Search</H1>\n\n\n<p>\n  Find places where a string <var>P</var> is found within a text <var>T</var>.\n  Print all indices of <var>T</var> where <var>P</var> found. The indices of <var>T</var> start with 0.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  In the first line, a text <var>T</var> is given. In the second line, a string <var>P</var> is given.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print an index of <var>T</var> where <var>P</var> found in a line. Print the indices in ascending order.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n  <li> 1 &le; length of <var>T</var> &le; 1000000 </li>\n  <li> 1 &le; length of <var>P</var> &le; 10000 </li>\n  <li>The input consists of alphabetical characters and digits</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\naabaaa\naa\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n0\n3\n4\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\nxyzz\nyz\n</pre>\n\n<H2>Sample Output 2</H2>\n<pre>\n1\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\nabc\nxyz\n</pre>\n\n<H2>Sample Output 3</H2>\n<pre>\n</pre>\n<p>\nThe output should be empty.\n</p>\n", "p02246": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>15 Puzzle</H1>\n\n\n<p>\n  The goal of the 15 puzzle problem is to complete pieces on $4 \\times 4$ cells where one of the cells is empty space.\n</p>\n\n<p>\n  In this problem, the space is represented by 0 and pieces are represented by integers from 1 to 15 as shown below.\n</p>\n\n<pre>\n1 2 3 4\n6 7 8 0\n5 10 11 12\n9 13 14 15\n</pre>\n\n<p>\n  You can move a piece toward the empty space at one step. Your goal is to make the pieces the following configuration in the shortest move (fewest steps).\n</p>\n\n<pre>\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 0\n</pre>\n\n<p>\n  Write a program which reads an initial state of the puzzle and prints the fewest steps to solve the puzzle.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The $4 \\times 4$ integers denoting the pieces or space are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the fewest steps in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>The given puzzle is solvable in at most 45 steps.</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n<pre>\n1 2 3 4\n6 7 8 0\n5 10 11 12\n9 13 14 15\n</pre>\n\n<H2>Sample Output</H2>\n<pre>\n8\n</pre>\n", "p02250": "\n<H1>String Search</H1>\n\n\n<p>\n  Determine whether a text <var>T</var> includes a pattern <var>P</var>. Your program should answer for given queries consisting of <var>P_i</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, a text <var>T</var> is given. In the second line, an integer <var>Q</var> denoting the number of queries is given. In the following <var>Q</var> lines, the patterns <var>P_i</var> are given respectively.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each question, print 1 if the text includes <var>P_i</var>, or print 0 otherwise.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n  <li> 1 &le; length of <var>T</var> &le; 1000000 </li>\n  <li> 1 &le; length of <var>P_i</var> &le; 1000 </li>\n  <li> 1 &le; <var>Q</var> &le; 10000 </li>\n  <li>The input consists of alphabetical characters and digits</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\naabaaa\n4\naa\nba\nbb\nxyz\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n1\n1\n0\n0\n</pre>", "p02249": "\n<H1>Pattern Search</H1>\n\n<p>\nFind places where a <var>R</var> &times <var>C</var> pattern is found within a  <var>H</var> &times; <var>W</var> region. Print top-left coordinates (<var>i</var>, <var>j</var>) of sub-regions where the pattern found. The top-left and bottom-right coordinates of the region is (0, 0) and (<var>H</var>-1, <var>W</var>-1) respectively.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, two integers <var>H</var> and <var>W</var> are given. In the following <var>H</var> lines, <var>i</var>-th lines of the region are given.\n</p>\n\n<p>\n  In the next line, two integers <var>R</var> and <var>C</var> are given. In the following <var>R</var> lines, <var>i</var>-th lines of the pattern are given.\n</p>\n\n<H2>output</H2>\n\n<p>\n  For each sub-region found, print a coordinate <var>i</var> and <var>j</var> separated by a space character in a line. Print the coordinates in ascending order of the row numbers (<var>i</var>), or the column numbers (<var>j</var>) in case of a tie.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n  <li> 1 &le; <var>H, W</var> &le; 1000 </li>\n  <li> 1 &le; <var>R, C</var> &le; 1000 </li>\n  <li>The input consists of alphabetical characters and digits</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 5\n00010\n00101\n00010\n00100\n3 2\n10\n01\n10\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n0 3\n1 2\n</pre>", "p02252": "<h1>Fractional Knapsack Problem</h1>\n\n<p>You have $N$ items that you want to put them into a knapsack of capacity $W$. Item $i$ ($1 \\le i \\le N$) has weight $w_i$ and value $v_i$ for the weight.</p>\n\n<p>When you put some items into the knapsack, the following conditions must be satisfied:</p>\n<ul>\n  <li>The total value of the items is as large as possible.</li>\n  <li>The total weight of the selected items is at most $W$.</li>\n  <li>You can break some items if you want. If you put $w'$($0 \\le w' \\le w_i$) of item $i$, its value becomes $\\displaystyle v_i \\times \\frac{w'}{w_i}.$</li>\n</ul>\n\n<p>Find the maximum total value of items in the knapsack.</p>\n\n<h2>Input</h2>\n\n<pre>\n$N$ $W$\n$v_1$ $w_1$\n$v_2$ $w_2$\n:\n$v_N$ $w_N$\n</pre>\n\n<p>The first line consists of the integers $N$ and $W$. In the following $N$ lines, the value and weight of the $i$-th item are given.</p>\n\n<h2>Output</h2>\n\n<p>Print the maximum total value of the items in a line. The output must not contain an error greater than $10^{-6}$.</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li>$1 \\le N \\le 10^5$</li>\n  <li>$1 \\le W \\le 10^9$</li>\n  <li>$1 \\le v_i \\le 10^9 (1 \\le i \\le N)$</li>\n  <li>$1 \\le w_i \\le 10^9 (1 \\le i \\le N)$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n<pre>\n3 50\n60 10\n100 20\n120 30\n</pre>\n<h2>Sample Output 1</h2>\n<pre>\n240\n</pre>\n<p>When you put 10 of item $1$, 20 of item $2$ and 20 of item $3$, the total value is maximized.</p>\n\n<h2>Sample Input 2</h2>\n<pre>\n3 50\n60 13\n100 23\n120 33\n</pre>\n<h2>Sample Output 2</h2>\n<pre>\n210.90909091\n</pre>\n<p>When you put 13 of item $1$, 23 of item $2$ and 14 of item $3$, the total value is maximized. Note some outputs can be a real number.</p>\n\n<h2>Sample Input 3</h2>\n<pre>\n1 100\n100000 100000\n</pre>\n<h2>Sample Output 3</h2>\n<pre>\n100\n</pre>\n", "p02256": "\n<H1>Greatest Common Divisor</H1>\n\n<p>\nWrite a program which finds the greatest common divisor of two natural numbers <i>a</i> and <i>b</i>\n</p>\n\n<H2>Input</H2>\n\n<p>\n<i>a</i> and <i>b</i> are given in a line sparated by a single space.\n</p>\n\n<H2>Output</H2>\n\n<p>\nOutput the greatest common divisor of <i>a</i> and <i>b</i>.\n</p>\n\n\n<H2>Constrants</H2>\n<p>\n1 &le; <i>a</i>, <i>b</i> &le; 10<sup>9</sup>\n</p>\n\n<H2>Hint</H2>\n<p>\nYou can use the following observation:\n</p>\n<p>\nFor integers <i>x</i> and <i>y</i>, if <i>x</i> &ge; <i>y</i>, then gcd(<i>x</i>, <i>y</i>) = gcd(<i>y</i>, <i>x</i>%<i>y</i>)\n</p>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n54 20\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n2\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n147 105\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n21\n</pre>\n\n\n", "p02257": "\n<H1>Prime Numbers</H1>\n\n<p>\nA prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\n</p>\n\n<p>\nWrite a program which reads a list of <i>N</i> integers and prints the number of prime numbers in the list.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line contains an integer <i>N</i>, the number of elements in the list.\n</p>\n\n<p>\n<i>N</i> numbers are given in the following lines.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the number of prime numbers in the given list.\n</p>\n\n<H2>Constraints</H2>\n\n<p>\n1 &le; <i>N</i> &le; 10000\n</p>\n\n<p>\n2 &le; <i>an element of the list</i> &le; 10<sup>8</sup>\n</p>\n\n<H2>Sample Input 1</H2>\n<pre class=\"format\">\n5\n2\n3\n4\n5\n6\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n11\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n4\n</pre>\n\n\n", "p02260": "\n<H1>Selection Sort</H1>\n\n<p>\nWrite a program of the Selection Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:\n</p>\n\n<pre>\nSelectionSort(A)\n1 for i = 0 to A.length-1\n2     mini = i\n3     for j = i to A.length-1\n4         if A[j] < A[mini]\n5             mini = j\n6     swap A[i] and A[mini]\n</pre>\n\n<p>\nNote that, indices for array elements are based on 0-origin.\n</p>\n\n<p>\nYour program should also print the number of swap operations defined in line 6 of the pseudocode in the case where i &ne; mini.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input includes an integer <i>N</i>, the number of elements in the sequence.\n</p>\n<p>\nIn the second line, <i>N</i> elements of the sequence are given separated by space characters.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output consists of 2 lines. \n</p>\n\n<p>\nIn the first line, please print the sorted sequence. Two contiguous elements of the sequence should be separated by a space character.\n</p>\n\n<p>\nIn the second line, please print the number of swap operations.\n</p>\n\n<H2>Constraints</H2>\n\n<p>\n1 &le; <i>N</i> &le; 100\n</p>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n6\n5 6 4 2 1 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1 2 3 4 5 6\n4\n</pre>\n\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n6\n5 2 4 6 1 3\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n1 2 3 4 5 6\n3\n</pre>\n\n\n", "p02261": "\n<H1>Stable Sort</H1>\n\n<p>\nLet's arrange a deck of cards. There are totally 36 cards of 4 suits(S, H, C, D) and 9 values (1, 2, ... 9). For example, 'eight of heart' is represented by <span>H8</span> and 'one of diamonds' is represented by <span>D1</span>.\n</p>\n\n<p>\nYour task is to write a program which sorts a given set of cards in ascending order by their values using the Bubble Sort algorithms and the Selection Sort algorithm respectively. These algorithms should be based on the following pseudocode:\n</p>\n\n<pre>\nBubbleSort(C)\n1 for i = 0 to C.length-1\n2     for j = C.length-1 downto i+1\n3         if C[j].value < C[j-1].value\n4             swap C[j] and C[j-1]\n</pre>\n\n<pre>\nSelectionSort(C)\n1 for i = 0 to C.length-1\n2     mini = i\n3     for j = i to C.length-1\n4         if C[j].value < C[mini].value\n5             mini = j\n6     swap C[i] and C[mini]\n</pre>\n\n<p>\nNote that, indices for array elements are based on 0-origin.\n</p\n\n<p>\nFor each algorithm, report the stability of the output for the given input (instance). Here, 'stability of the output' means that: cards with the same value appear in the output in the same order as they do in the input (instance).\n</p>\n\n<!--\n<p>\nNote that, cards with same values but different suits must be appear in the same order of the input sequence.\n</p>\n-->\n\n<H2>Input</H2>\n\n<p>\nThe first line contains an integer <i>N</i>, the number of cards.\n</p>\n\n<p>\n<i>N</i> cards are given in the following line. Each card is represented by two characters. Two consecutive cards are separated by a space character.\n</p>\n\n<H2>Output</H2>\n\n<p>\nIn the first line, print the arranged cards provided by the Bubble Sort algorithm. Two consecutive cards should be separated by a space character.\n</p>\n\n<p>\nIn the second line, print the stability (\"<span>Stable</span>\" or \"<span>Not stable</span>\") of this output.\n</p>\n\n<p>\nIn the third line, print the arranged cards provided by the Selection Sort algorithm. Two consecutive cards should be separated by a space character.\n</p>\n\n<p>\nIn the fourth line, print the stability (\"<span>Stable</span>\" or \"<span>Not stable</span>\") of this output.\n</p>\n\n<H2>Constraints</H2>\n\n<p>\n1 &le; <i>N</i> &le; 36\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n5\nH4 C9 S4 D2 C3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\nD2 C3 H4 S4 C9\nStable\nD2 C3 S4 H4 C9\nNot stable\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n2\nS1 H1\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\nS1 H1\nStable\nS1 H1\nStable\n</pre>\n", "p02258": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>Maximum Profit</H1>\n\n<p>\nYou can obtain profits from foreign exchange margin transactions. For example,  if you buy 1000 dollar at a rate of 100 yen per dollar, and sell them at a rate of 108 yen per dollar, you can obtain (108 - 100) &times; 1000 = 8000 yen.\n</p>\n\n<p>\n  Write a program which reads values of a currency $R_t$ at a certain time $t$ ($t = 0, 1, 2, ... n-1$), and reports the maximum value of $R_j - R_i$ where $j > i$ .\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line contains an integer $n$. In the following $n$ lines, $R_t$ ($t = 0, 1, 2, ... n-1$) are given in order.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the maximum value in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n  <li>$2 \\leq n \\leq 200,000$</li>\n  <li>$1 \\leq R_t \\leq 10^9$</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n6\n5\n3\n1\n3\n4\n3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n3\n4\n3\n2\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n-1\n</pre>\n\n", "p02259": "\n<H1>Bubble Sort</H1>\n\n<p>\nWrite a program of the Bubble Sort algorithm which sorts a sequence <i>A</i> in ascending order. The algorithm should be based on the following pseudocode:\n</p>\n\n<pre>\nBubbleSort(A)\n1 for i = 0 to A.length-1\n2     for j = A.length-1 downto i+1\n3         if A[j] < A[j-1]\n4             swap A[j] and A[j-1]\n</pre>\n<p>\nNote that, indices for array elements are based on 0-origin.\n</p>\n\n<p>\nYour program should also print the number of swap operations defined in line 4 of the pseudocode.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input includes an integer <i>N</i>, the number of elements in the sequence.\n</p>\n<p>\nIn the second line, <i>N</i> elements of the sequence are given separated by spaces characters.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output consists of 2 lines. \n</p>\n\n<p>\nIn the first line, please print the sorted sequence. Two contiguous elements of the sequence should be separated by a space character.\n</p>\n\n<p>\nIn the second line, please print the number of swap operations.\n</p>\n\n<H2>Constraints</H2>\n\n<p>\n1 &le; <i>N</i> &le; 100\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n5\n5 3 2 4 1\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1 2 3 4 5\n8\n</pre>\n\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n6\n5 2 4 6 1 3\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n1 2 3 4 5 6\n9\n</pre>\n\n\n", "p02274": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>The Number of Inversions</H1>\n<br>\n\n<p>\n  For a given sequence $A = \\{a_0, a_1, ... a_{n-1}\\}$, the number of pairs $(i, j)$ where $a_i > a_j$ and $i < j$, is called the number of inversions. The number of inversions is equal to the number of swaps of Bubble Sort defined in the following program:\n</p>\n\n<pre>\nbubbleSort(A)\n  cnt = 0 // the number of inversions\n  for i = 0 to A.length-1\n    for j = A.length-1 downto i+1\n      if A[j] < A[j-1]\n\tswap(A[j], A[j-1])\n\tcnt++\n\n  return cnt\n</pre>\n\n<p>\n  For the given sequence $A$, print the number of inversions of $A$. Note that you should not use the above program, which brings Time Limit Exceeded.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, an integer $n$, the number of elements in $A$, is given. In the second line, the elements $a_i$ ($i = 0, 1, .. n-1$) are given separated by space characters.\n</p>\n\n<H2>output</H2>\n\n<p>\n  Print the number of inversions in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$ 1 \\leq n \\leq 200,000$</li>\n<li>$ 0 \\leq a_i \\leq 10^9$</li>\n<li>$a_i$ are all different</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n5\n3 5 2 1 4\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n6\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n3\n3 1 2\n</pre>\n\n<H2>Sample Output 2</H2>\n\n<pre>\n2\n</pre>\n", "p02275": "\n<H1>Counting Sort</H1>\n\n<p>\nCounting sort can be used for sorting elements in an array which each of the n input elements is an integer in the range 0 to k. The idea of counting sort is to determine, for each input element x, the number of elements less than x as C[x]. This information can be used to place element x directly into its position in the output array B. This scheme must be modified to handle the situation in which several elements have the same value. Please see the following pseudocode for the detail:\n</p>\n\n<pre>\nCounting-Sort(A, B, k)\n1    for i = 0 to k\n2        do C[i] = 0\n3    for j = 1 to length[A]\n4        do C[A[j]] = C[A[j]]+1\n5    /* C[i] now contains the number of elements equal to i */\n6    for i = 1 to k\n7    do C[i] = C[i] + C[i-1]\n8    /* C[i] now contains the number of elements less than or equal to i */\n9    for j = length[A] downto 1\n10       do B[C[A[j]]] = A[j]\n11          C[A[j]] = C[A[j]]-1\n</pre>\n\n<p>\nWrite a program which sorts elements of given array ascending order based on the counting sort.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input includes an integer <i>n</i>, the number of elements in the sequence.\n</p>\n<p>\nIn the second line, <i>n</i> elements of the sequence are given separated by spaces characters.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the sorted sequence. Two contiguous elements of the sequence should be separated by a space character.\n</p>\n\n\n<H2>Constraints</H2>\n\n\n<ul>\n<li>1 &le; <i>n</i> &le; 2,000,000</li>\n<li>0 &le; A[<i>i</i>] &le; 10,000</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n7\n2 5 1 3 2 3 0\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n0 1 2 2 3 3 5\n</pre>\n\n", "p02276": "<H1>Partition</H1>\n<!--\n<p style=\"color:#f00\">\nPlease note that problem description and judge data for this problem are still under construction. They may revised and your submissions can be rejudged.\n</p>\n-->\n\n<p>\nQuick sort is based on the Divide-and-conquer approach. In QuickSort(A, p, r), first, a procedure Partition(A, p, r) divides an array A[p..r] into two subarrays A[p..q-1] and A[q+1..r] such that each element of A[p..q-1] is less than or equal to A[q], which is, inturn, less than or equal to each element of A[q+1..r]. It also computes the index q.\n</p>\n\n<p>\nIn the conquer processes, the two subarrays A[p..q-1] and A[q+1..r] are sorted by recursive calls of QuickSort(A, p, q-1) and QuickSort(A, q+1, r).\n</p>\n\n\n<p>\nYour task is to read a sequence A and perform the Partition based on the following pseudocode:\n</p>\n\n<pre>\nPartition(A, p, r)\n1 x = A[r]\n2 i = p-1\n3 for j = p to r-1\n4     do if A[j] <= x\n5        then i = i+1\n6            exchange A[i] and A[j] \n7 exchange A[i+1] and A[r]\n8 return i+1\n</pre>\n\n</p>\nNote that, in this algorithm, Partition always selects an element A[r] as a pivot element around which to partition the array A[p..r].\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line of the input includes an integer <i>n</i>, the number of elements in the sequence A.\n</p>\n<p>\nIn the second line, <i>A<sub>i</sub></i> (<i>i</i> = 1,2,...,<i>n</i>), elements of the sequence are given separated by space characters.\n</p>\n\n<H2>Output</H2>\n\n\n<p>\nPrint the sorted sequence. Two contiguous elements of the sequence should be separated by a space character. The element which is selected as the pivot of the partition should be indicated by <span>[</span>&nbsp;&nbsp;<span>]</span>.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n  <li>1 &le; <i>n</i> &le; 100,000</li>\n  <li>0 &le; <i>A<sub>i</sub></i> &le; 100,000</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n12\n13 19 9 5 12 8 7 4 21 2 6 11\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n9 5 8 7 4 2 6 [11] 21 13 19 12\n</pre>\n\n\n\n", "p02277": "\n<H1>Quick Sort</H1>\n<!--\n<p style=\"color:#f00\">\nPlease note that problem description and judge data for this problem are still under construction. They may revised and your submissions can be rejudged.\n</p>\n-->\n\n<p>\nLet's arrange a deck of cards. Your task is to sort totally n cards. A card consists of a part of a suit (S, H, C or D) and an number. Write a program which sorts such cards based on the following pseudocode:\n</p>\n\n<pre>\nPartition(A, p, r)\n1 x = A[r]\n2 i = p-1\n3 for j = p to r-1\n4     do if A[j] <= x\n5        then i = i+1\n6            exchange A[i] and A[j] \n7 exchange A[i+1] and A[r]\n8 return i+1\n\n\nQuicksort(A, p, r)\n1 if p < r\n2    then q = Partition(A, p, r)\n3        run Quicksort(A, p, q-1)\n4        run Quicksort(A, q+1, r)\n</pre>\n\n<p>\nHere, A is an array which represents a deck of cards and comparison operations are performed based on the numbers.\n</p>\n\n<p>\nYour program should also report the stability of the output for the given input (instance). Here, 'stability of the output' means that: cards with the same value appear in the output in the same order as they do in the input (instance).\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe first line contains an integer <i>n</i>, the number of cards.\n</p>\n\n<p>\n<i>n</i> cards are given in the following lines. Each card is given in a line and represented by a pair of a character and an integer separated by a single space.\n</p>\n\n<H2>Output</H2>\n\n<p>\nIn the first line, print the stability (\"<span>Stable</span>\" or \"<span>Not stable</span>\") of this output.\n</p>\n\n<p>\nIn the following lines, print the arranged cards in the same manner of that of the input.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <i>n</i> &le; 100,000</li>\n<li>1 &le; the number of a card  &le; 10<sup>9</sup></li>\n<li>There are no identical card in the input</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n6\nD 3\nH 2\nD 1\nS 3\nD 2\nC 1\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\nNot stable\nD 1\nC 1\nD 2\nH 2\nD 3\nS 3\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n2\nS 1\nH 1\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\nStable\nS 1\nH 1\n</pre>\n\n", "p02278": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Minimum Cost Sort</H1>\n\n<p>\n  You are given $n$ integers $w_i (i = 0, 1, ..., n-1)$ to be sorted in ascending order. You can swap two integers $w_i$ and $w_j$. Each swap operation has a cost, which is the sum of the two integers $w_i + w_j$. You can perform the operations any number of times.\n</p>\n\n<p>\n  Write a program which reports the minimal total cost to sort the given integers.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  In the first line, an integer $n$ is given. In the second line, $n$ integers $w_i (i = 0, 1, 2, ... n-1)$ separated by space characters are given.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print the minimal cost in a line.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>$1 \\leq n \\leq 1,000$</li>\n<li>$0 \\leq w_i\\leq 10^4$</li>\n<li>$w_i$ are all different</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n<pre>\n5\n1 5 3 4 2\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n7\n</pre>\n\n<br>\n\n<h2>Sample Input 2</h2>\n<pre>\n4\n4 3 2 1\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n10\n</pre>\n", "p02282": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Reconstruction of a Tree</H1>\n\n<p>\n  Write a program which reads two sequences of nodes obtained by the preorder tree walk and the inorder tree walk on a binary tree respectively, and prints a sequence of the nodes obtained by the postorder tree walk on the binary tree.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, an integer $n$, which is the number of nodes in the binary tree, is given.<br>\n  In the second line, the sequence of node IDs obtained by the preorder tree walk is given separated by space characters.<br>\n    In the second line, the sequence of node IDs obtained by the inorder tree walk is given separated by space characters.\n</p>\n\n<p>\n  Every node has a unique ID from $1$ to $n$. Note that the root does not always correspond to $1$.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the sequence of node IDs obtained by the postorder tree walk in a line. Put a single space character between adjacent IDs.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>$1 \\leq n \\leq 40$</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n5\n1 2 3 4 5\n3 2 4 1 5\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n3 4 2 5 1\n</pre>\n\n\n<H2>Sample Input 2</H2>\n<pre>\n4\n1 2 3 4\n1 2 3 4\n</pre>\n\n<H2>Sample Output 2</H2>\n<pre>\n4 3 2 1\n</pre>", "p02284": "<H1>Binary Search Tree II</H1>\n\n<p>\nWrite a program which performs the following operations to a binary search tree $T$ by adding the find operation to A: Binary Search Tree I.\n</p>\n\n<ul>\n  <li><span>insert </span> $k$: Insert a node containing $k$ as key into $T$.</li>\n  <li><span>find </span>$k$: Report whether $T$ has a node containing $k$. </li>\n  <li><span>print</span>: Print the keys of the binary search tree by inorder tree walk and  preorder tree walk respectively.</li>\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\n  In the first line, the number of operations $m$ is given. In the following $m$ lines, operations represented by <span>insert </span>$k$, <span>find </span>$k$ or <span>print</span> are given.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each <span>find </span>$k$ operation, print \"<span>yes</span>\" if $T$ has a node containing $k$, \"<span>no</span>\" if not.\n</p>\n\n<p>\n  In addition, for each <span>print</span> operation, print a list of keys obtained by inorder tree walk and preorder tree walk in a line respectively. Put a space character <u>before each key</u>.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n  <li>The number of operations $\\leq 500,000$</li>\n<li>The number of print operations $\\leq 10$.</li>\n  <li>$-2,000,000,000 \\leq key \\leq 2,000,000,000$</li>\n  <li>The height of the binary tree does not exceed 100 if you employ the above pseudo code.</li>\n<li>The keys in the binary search tree are all different.</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n10\ninsert 30\ninsert 88\ninsert 12\ninsert 1\ninsert 20\nfind 12\ninsert 17\ninsert 25\nfind 16\nprint\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\nyes\nno\n 1 12 17 20 25 30 88\n 30 12 1 20 17 25 88\n</pre>\n\n<H2>Reference</H2>\n\n<p>\nIntroduction to Algorithms, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. The MIT Press.\n</p>\n\n", "p02285": "<H1>Binary Search Tree III</H1>\n\n<p>\nWrite a program which performs the following operations to a binary search tree $T$ by adding delete operation to B: Binary Search Tree II.\n</p>\n\n<ul>\n  <li><span>insert </span> $k$: Insert a node containing $k$ as key into $T$.</li>\n  <li><span>find </span>$k$: Report whether $T$ has a node containing $k$. </li>\n  <li><span>delete </span>$k$: Delete a node containing $k$.</li>\n  <li><span>print</span>: Print the keys of the binary search tree by inorder tree walk and  preorder tree walk respectively.</li>\n</ul>\n\n<p>\nThe operation delete $k$ for deleting a given node $z$ containing key $k$ from $T$ can be implemented by an algorithm which considers the following cases:\n</p>\n\n<ol>\n<li> If $z$ has no children, we modify its parent $z.p$ to replace $z$ with NIL as its child (delete $z$).</li>\n<li> If $z$ has only a single child, we \"splice out\" $z$ by making a new link between its child and its parent.</li>\n<li> If $z$ has two children, we splice out $z$'s successor $y$ and replace $z$'s key with $y$'s key.</li>\n</ol>\n\n<H2>Input</H2>\n\n<p>\n   In the first line, the number of operations $m$ is given. In the following $m$ lines, operations represented by <span>insert </span>$k$, <span>find </span>$k$, <span>delete </span>$k$ or <span>print</span> are given.\n</p>\n\n<H2>Output</H2>\n\n\n<p>\nFor each <span>find </span>$k$ operation, print \"<span>yes</span>\" if $T$ has a node containing $k$, \"<span>no</span>\" if not.\n</p>\n\n<p>\n  In addition, for each <span>print</span> operation, print a list of keys obtained by inorder tree walk and preorder tree walk in a line respectively. Put a space character <u>before each key</u>\n\n<H2>Constraints</H2>\n\n<ul>\n   <li>The number of operations $\\leq 500,000$</li>\n<li>The number of print operations $\\leq 10$.</li>\n  <li>$-2,000,000,000 \\leq key \\leq 2,000,000,000$</li>\n  <li>The height of the binary tree does not exceed 100 if you employ the above pseudo code.</li>\n<li>The keys in the binary search tree are all different.</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n18\ninsert 8\ninsert 2\ninsert 3\ninsert 7\ninsert 22\ninsert 1\nfind 1\nfind 2\nfind 3\nfind 4\nfind 5\nfind 6\nfind 7\nfind 8\nprint\ndelete 3\ndelete 7\nprint\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\nyes\nyes\nyes\nno\nno\nno\nyes\nyes\n 1 2 3 7 8 22\n 8 2 1 3 7 22\n 1 2 8 22\n 8 2 1 22\n</pre>\n\n<H2>Reference</H2>\n\n<p>\nIntroduction to Algorithms, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. The MIT Press.\n</p>\n", "p02270": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n\n<p>\n  You are given $n$ packages of $w_i$ kg from a belt conveyor in order ($i = 0, 1, ... n-1$). You should load all packages onto $k$ trucks which have the common maximum load $P$. Each truck can load consecutive packages (more than or equals to zero) from the belt conveyor unless the total weights of the packages in the sequence does not exceed the maximum load $P$. \n</p>\n\n<p>\n  Write a program which reads $n$, $k$ and $w_i$, and reports the minimum value of the maximum load $P$ to load all packages from the belt conveyor.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, two integers $n$ and $k$ are given separated by a space character. In the following $n$ lines, $w_i$ are given respectively.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the minimum value of $P$ in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li> $1 \\leq n \\leq 100,000$</li>\n<li> $1 \\leq k \\leq 100,000$</li>\n<li> $1 \\leq w_i \\leq 10,000$</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n5 3\n8\n1\n7\n3\n9\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n10\n</pre>\n\n<p>\n    If the first truck loads two packages of $\\{8, 1\\}$, the second truck loads two packages of $\\{7, 3\\}$ and the third truck loads a package of $\\{9\\}$, then the minimum value of the maximum load $P$ shall be 10.\n\n</p>\n\n<br/>\n\n\n<H2>Sample Input 2</H2>\n<pre>\n4 2\n1\n2\n2\n6\n</pre>\n\n<H2>Sample Output 2</H2>\n<pre>\n6\n</pre>\n\n<p>\n    If the first truck loads three packages of $\\{1, 2, 2\\}$ and the second truck loads a package of $\\{6\\}$, then the minimum value of the maximum load $P$ shall be 6.\n</p>", "p02289": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Priority Queue</H1>\n\n<p>\n  A priority queue is a data structure which maintains a set $S$ of elements, each of with an associated value (key), and supports the following operations:\n</p>\n\n<ul>\n<li>$insert(S, k)$: insert an element $k$ into the set $S$</li>\n<li>$extractMax(S)$: remove and return the element of $S$ with the largest key</li>\n</ul>\n\n<p>\n  Write a program which performs the $insert(S, k)$ and $extractMax(S)$ operations to a priority queue $S$.\n  The priority queue manages a set of integers, which are also keys for the priority.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  Multiple operations to the priority queue $S$ are given. Each operation is given by \"<span>insert </span>$k$\", \"<span>extract</span>\" or \"<span>end</span>\" in a line. Here, $k$ represents an integer element to be inserted to the priority queue.\n</p>\n\n<p>\nThe input ends with \"<span>end</span>\" operation.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each \"<span>extract</span>\" operation, print the element extracted from the priority queue $S$ in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>The number of operations $\\leq 2,000,000$</li>\n<li>$0 \\leq k \\leq 2,000,000,000$</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\ninsert 8\ninsert 2\nextract\ninsert 10\nextract\ninsert 11\nextract\nextract\nend\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n8\n10\n11\n2\n</pre>\n", "p02293": "\n<H1>Parallel/Orthogonal</H1>\n<br/>\n\n<p>\nFor given two lines <var>s1</var> and <var>s2</var>, print \"2\" if they are parallel, \"1\" if they are orthogonal, or \"0\" otherwise.\n</p>\n\n<p>\n<var>s1</var> crosses points <var>p0</var> and <var>p1</var>, and\n<var>s2</var> crosses points <var>p2</var> and <var>p3</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe entire input looks like:\n</p>\n\n<pre>\n<var>q</var> (the number of queries)\n1st query\n2nd query\n...\n<var>q</var>th query\n</pre>\n\n<p>\nEach query consists of integer coordinates of the points <var>p0</var>, <var>p1</var>, <var>p2</var>, <var>p3</var> in the following format:\n</p>\n\n<pre>\n<var>x<sub>p0</sub></var> <var>y<sub>p0</sub></var> <var>x<sub>p1</sub></var> <var>y<sub>p1</sub></var> <var>x<sub>p2</sub></var> <var>y<sub>p2</sub></var> <var>x<sub>p3</sub></var> <var>y<sub>p3</sub></var>\n</pre>\n\n\n<H2>Output</H2>\n\n<p>\nFor each query, print \"2\", \"1\" or \"0\".\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n1 &le; <var>q</var> &le; 1000\n</li>\n<li>\n-10000 &le; <var>x<sub>p<sub>i</sub></sub></var>, <var>y<sub>p<sub>i</sub></sub></var> &le; 10000\n</li>\n<li>\n<var>p0 &ne; p1</var> and\n<var>p2 &ne; p3</var>.\n</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3\n0 0 3 0 0 2 3 2\n0 0 3 0 1 1 1 4\n0 0 3 0 1 1 2 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n2\n1\n0\n</pre>\n<br/>", "p02294": "\n<H1>Intersection</H1>\n<br/>\n\n<p>\nFor given two segments <var>s1</var> and <var>s2</var>, print \"1\" if they are intersect, \"0\" otherwise.\n</p>\n\n<p>\n<var>s1</var> is formed by end points <var>p0</var> and <var>p1</var>, and\n<var>s2</var> is formed by end points <var>p2</var> and <var>p3</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe entire input looks like:\n</p>\n\n<pre>\n<var>q</var> (the number of queries)\n1st query\n2nd query\n...\n<var>q</var>th query\n</pre>\n\n<p>\nEach query consists of integer coordinates of end points of <var>s1</var> and <var>s2</var> in the following format:\n</p>\n\n<pre>\n<var>x<sub>p0</sub></var> <var>y<sub>p0</sub></var> <var>x<sub>p1</sub></var> <var>y<sub>p1</sub></var> <var>x<sub>p2</sub></var> <var>y<sub>p2</sub></var> <var>x<sub>p3</sub></var> <var>y<sub>p3</sub></var>\n</pre>\n\n\n<H2>Output</H2>\n\n<p>\nFor each query, print \"1\" or \"0\".\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n1 &le; <var>q</var> &le; 1000\n</li>\n<li>\n-10000 &le; <var>x<sub>p<sub>i</sub></sub></var>, <var>y<sub>p<sub>i</sub></sub></var> &le; 10000\n</li>\n<li>\n<var>p0 &ne; p1</var> and\n<var>p2 &ne; p3</var>.\n</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3\n0 0 3 0 1 1 2 -1\n0 0 3 0 3 1 3 -1\n0 0 3 0 3 -2 5 0\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1\n1\n0\n</pre>\n<br/>", "p02295": "<H1>Cross Point</H1>\n<br/>\n\n<p>\nFor given two segments <var>s1</var> and <var>s2</var>, print the coordinate of the cross point of them.\n</p>\n\n<p>\n<var>s1</var> is formed by end points <var>p0</var> and <var>p1</var>, and\n<var>s2</var> is formed by end points <var>p2</var> and <var>p3</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe entire input looks like:\n</p>\n\n<pre>\n<var>q</var> (the number of queries)\n1st query\n2nd query\n...\n<var>q</var>th query\n</pre>\n\n<p>\nEach query consists of integer coordinates of end points of <var>s1</var> and <var>s2</var> in the following format:\n</p>\n\n<pre>\n<var>x<sub>p0</sub></var> <var>y<sub>p0</sub></var> <var>x<sub>p1</sub></var> <var>y<sub>p1</sub></var> <var>x<sub>p2</sub></var> <var>y<sub>p2</sub></var> <var>x<sub>p3</sub></var> <var>y<sub>p3</sub></var>\n</pre>\n\n<H2>Output</H2>\n\n<p>\nFor each query, print the coordinate of the cross point. The output values should be in a decimal fraction with an error less than 0.00000001.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n1 &le; <i>q</i> &le; 1000\n</li>\n<li>\n-10000 &le; x<sub>p<sub>i</sub></sub>, y<sub>p<sub>i</sub></sub> &le; 10000\n</li>\n<li>\n<var>p0 &ne; p1</var> and\n<var>p2 &ne; p3</var>.\n</li>\n<li>\nThe given segments have a cross point and are not in parallel.\n</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n3\n0 0 2 0 1 1 1 -1\n0 0 1 1 0 1 1 0\n0 0 1 1 1 0 0 1\n</pre>\n<H2>Sample Output</H2>\n<pre>\n1.0000000000 0.0000000000\n0.5000000000 0.5000000000\n0.5000000000 0.5000000000\n</pre>\n<br/>\n\n\n", "p02296": "\n<H1>Distance</H1>\n<br/>\n\n<p>\nFor given two segments <var>s1</var> and <var>s2</var>, print the distance between them.\n</p>\n\n<p>\n<var>s1</var> is formed by end points <var>p0</var> and <var>p1</var>, and\n<var>s2</var> is formed by end points <var>p2</var> and <var>p3</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe entire input looks like:\n</p>\n\n<pre>\n<var>q</var> (the number of queries)\n1st query\n2nd query\n...\n<var>q</var>th query\n</pre>\n\n<p>\nEach query consists of integer coordinates of end points of <var>s1</var> and <var>s2</var> in the following format:\n</p>\n\n<pre>\n<var>x<sub>p0</sub></var> <var>y<sub>p0</sub></var> <var>x<sub>p1</sub></var> <var>y<sub>p1</sub></var> <var>x<sub>p2</sub></var> <var>y<sub>p2</sub></var> <var>x<sub>p3</sub></var> <var>y<sub>p3</sub></var>\n</pre>\n\n<H2>Output</H2>\n\n<p>\nFor each query, print the distance. The output values should be in a decimal fraction with an error less than 0.00000001.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n1 &le; <i>q</i> &le; 1000\n</li>\n<li>\n-10000 &le; x<sub>p<sub>i</sub></sub>, y<sub>p<sub>i</sub></sub> &le; 10000\n</li>\n<li>\n<var>p0 &ne; p1</var> and\n<var>p2 &ne; p3</var>.\n</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n3\n0 0 1 0 0 1 1 1\n0 0 1 0 2 1 1 2\n-1 0 1 0 0 1 0 -1\n</pre>\n<H2>Sample Output</H2>\n<pre>\n1.0000000000\n1.4142135624\n0.0000000000\n</pre>\n<br/>\n\n", "p02297": "\n<H1>Area</H1>\n<br/>\n\n<p>\nFor a given polygon <var>g</var>, computes the area of the polygon.\n</p>\n\n<p>\n<var>g</var> is represented by a sequence of points <var>p<sub>1</sub></var>, <var>p<sub>2</sub></var>,..., <var>p<sub>n</sub></var> where line segments connecting <var>p<sub>i</sub></var> and <var>p<sub>i+1</sub></var> (1 &le; <var>i</var> &le; <var>n-1</var>) are sides of <var>g</var>. The line segment connecting <var>p<sub>n</sub></var> and <var>p<sub>1</sub></var> is also a side of the polygon.\n</p>\n\n<p>\nNote that the polygon is not necessarily convex.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of coordinates of the points <var>p<sub>1</sub></var>,..., <var>p<sub>n</sub></var> in the following format:\n</p>\n\n<pre>\n<var>n</var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var> \n<var>x<sub>2</sub></var> <var>y<sub>2</sub></var>\n:\n<var>x<sub>n</sub></var> <var>y<sub>n</sub></var>\n</pre>\n\n\n<p>\nThe first integer <var>n</var> is the number of points. The coordinate of a point <var>p<sub>i</sub></var> is given by two integers <var>x<sub>i</sub></var> and <var>y<sub>i</sub></var>. The coordinates of points are given in the order of counter-clockwise visit of them.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the area of the polygon in a line. The area should be printed with one digit to the right of the decimal point.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n3 &le; <var>n</var> &le; 100\n</li>\n<li>\n-10000 &le; <var>x<sub>i</sub></var>, <var>y<sub>i</sub></var> &le; 10000\n</li>\n<li>No point will occur more than once.</li>\n<li>Two sides can intersect only at a common endpoint.</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3\n0 0\n2 2\n-1 1\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n2.0\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4\n0 0\n1 1\n1 2\n0 2\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n1.5\n</pre>\n", "p02298": "\n<H1>Is-Convex</H1>\n<br/>\n\n<p>\nFor a given polygon <var>g</var>, print \"1\" if <var>g</var> is a convex polygon, \"0\" otherwise. Here, in a convex polygon, all interior angles are less than or equal to 180 degrees.\n</p>\n\n<p>\n<var>g</var> is represented by a sequence of points <var>p<sub>1</sub></var>, <var>p<sub>2</sub></var>,..., <var>p<sub>n</sub></var> where line segments connecting <var>p<sub>i</sub></var> and <var>p<sub>i+1</sub></var> (1 &le; <var>i</var> &le; <var>n-1</var>) are sides of the polygon. The line segment connecting <var>p<sub>n</sub></var> and <var>p<sub>1</sub></var> is also a side of the polygon.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n<var>g</var> is given by coordinates of the points <var>p<sub>1</sub></var>,..., <var>p<sub>n</sub></var> in the following format:\n</p>\n\n<pre>\n<var>n</var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var> \n<var>x<sub>2</sub></var> <var>y<sub>2</sub></var>\n:\n<var>x<sub>n</sub></var> <var>y<sub>n</sub></var>\n</pre>\n\n<p>\nThe first integer <var>n</var> is the number of points. The coordinate of a point <var>p<sub>i</sub></var> is given by two integers <var>x<sub>i</sub></var> and <var>y<sub>i</sub></var>. The coordinates of points are given in the order of counter-clockwise visit of them.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint \"1\" or \"0\" in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n3 &le; <var>n</var> &le; 100\n</li>\n<li>\n-10000 &le; <var>x<sub>i</sub></var>, <var>y<sub>i</sub></var> &le; 10000\n</li>\n<li>No point of the polygon will occur more than once.</li>\n<li>Two sides of the polygon can intersect only at a common endpoint.</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4\n0 0\n3 1\n2 3\n0 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1\n</pre>\n<br/>\n<H2>Sample Input 2</H2>\n<pre>\n5\n0 0\n2 0 \n1 1\n2 2\n0 2\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n0\n</pre>\n", "p02299": "\n<H1>Polygon-Point-Containment</H1>\n<br/>\n\n<p>\nFor a given polygon <var>g</var> and target points <var>t</var>, print \"2\" if <var>g</var> contains <var>t</var>, \"1\" if <var>t</var> is on a segment of <var>g</var>, \"0\" otherwise.\n</p>\n\n<p>\n<var>g</var> is represented by a sequence of points <var>p<sub>1</sub></var>, <var>p<sub>2</sub></var>,..., <var>p<sub>n</sub></var> where line segments connecting <var>p<sub>i</sub></var> and <var>p<sub>i+1</sub></var> (1 &le; <var>i</var> &le; <var>n-1</var>) are sides of the polygon. The line segment connecting <var>p<sub>n</sub></var> and <var>p<sub>1</sub></var> is also a side of the polygon.\n</p>\n\n<p>\nNote that the polygon is not necessarily convex.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe entire input looks like:\n</p>\n\n<pre>\n<var>g</var> (the sequence of the points of the polygon)\n<var>q</var> (the number of queris = the number of target points)\n1st query\n2nd query\n:\n<var>q</var>th query\n</pre>\n\n\n<p>\n<var>g</var> is given by coordinates of the points <var>p<sub>1</sub></var>,..., <var>p<sub>n</sub></var> in the following format:\n</p>\n\n<pre>\n<var>n</var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var> \n<var>x<sub>2</sub></var> <var>y<sub>2</sub></var>\n:\n<var>x<sub>n</sub></var> <var>y<sub>n</sub></var>\n</pre>\n\n<p>\nThe first integer <var>n</var> is the number of points. The coordinate of a point <var>p<sub>i</sub></var> is given by two integers <var>x<sub>i</sub></var> and <var>y<sub>i</sub></var>. The coordinates of points are given in the order of counter-clockwise visit of them.\n</p>\n\n<p>\nEach query consists of the coordinate of a target point <var>t</var>. The coordinate is given by two intgers <var>x</var> and <var>y</var>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each query, print \"2\", \"1\" or \"0\".\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n3 &le; <var>n</var> &le; 100\n</li>\n<li>\n1 &le; <var>q</var> &le; 1000\n</li>\n<li>\n-10000 &le; <var>x<sub>i</sub></var>, <var>y<sub>i</sub></var> &le; 10000\n</li>\n<li>No point of the polygon will occur more than once.</li>\n<li>Two sides of the polygon can intersect only at a common endpoint.</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n4\n0 0\n3 1\n2 3\n0 3\n3\n2 1\n0 2\n3 2\n</pre>\n<H2>Sample Output</H2>\n<pre>\n2\n1\n0\n</pre>\n<br/>", "p02300": "\n<H1>Convex Hull</H1>\n<br/>\n\n<p>\nFind the convex hull of a given set of points <var>P</var>. In other words, find the smallest convex polygon containing all the points of <var>P</var>. Here, in a convex polygon, all interior angles are less than or equal to 180 degrees.\n</p>\n\n<p>\nPlease note that you should find all the points of <var>P</var> on both corner and boundary of the convex polygon.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var> \n<var>x<sub>2</sub></var> <var>y<sub>2</sub></var>\n:\n<var>x<sub>n</sub></var> <var>y<sub>n</sub></var>\n</pre>\n\n<p>\nThe first integer <var>n</var> is the number of points in <var>P</var>. The coordinate of the <var>i</var>-th point <var>p<sub>i</sub></var> is given by two integers <var>x<sub>i</sub></var> and <var>y<sub>i</sub></var>. \n</p>\n\n<H2>Output</H2>\n\n<p>\nIn the first line, print the number of points on the corner/boundary of the convex polygon. In the following lines, print <var>x y</var> coordinates of the set of points.\nThe coordinates should be given in the order of counter-clockwise visit of them starting from the point in <var>P</var> with the minimum <var>y</var>-coordinate, or the leftmost such point in case of a tie.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n3 &le; <var>n</var> &le; 100000\n</li>\n<li>\n-10000 &le; <var>x<sub>i</sub></var>, <var>y<sub>i</sub></var> &le; 10000\n</li>\n<li>No point in the <var>P</var> will occur more than once.</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n7\n2 1\n0 0\n1 2\n2 2\n4 2\n1 3\n3 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n5\n0 0\n2 1\n4 2\n3 3\n1 3\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4\n0 0\n2 2\n0 2\n0 1\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n4\n0 0\n2 2\n0 2\n0 1\n</pre>\n", "p02301": "\n<H1>Diameter of a Convex Polygon</H1>\n<br/>\n\n<p>\nFind the diameter of a convex polygon <var>g</var>. In other words, find a pair of points that have maximum distance between them.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var> \n<var>x<sub>2</sub></var> <var>y<sub>2</sub></var>\n:\n<var>x<sub>n</sub></var> <var>y<sub>n</sub></var>\n</pre>\n\n<p>\nThe first integer <var>n</var> is the number of points in <var>g</var>. \n</p>\n\n<p>\nIn the following lines, the coordinate of the <var>i</var>-th point <var>p<sub>i</sub></var> is given by two real numbers <var>x<sub>i</sub></var> and <var>y<sub>i</sub></var>. The coordinates of points are given in the order of counter-clockwise visit of them. Each value is a real number with at most 6 digits after the decimal point.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the diameter of <var>g</var> in a line. The output values should be in a decimal fraction with an error less than 0.000001.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n3 &le; <var>n</var> &le; 80000\n</li>\n<li>\n-100 &le; <var>x<sub>i</sub></var>, <var>y<sub>i</sub></var> &le; 100\n</li>\n<li>No point in the <var>g</var> will occur more than once.</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3\n0.0 0.0\n4.0 0.0\n2.0 2.0\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n4.00\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n4\n0.0 0.0\n1.0 0.0\n1.0 1.0\n0.0 1.0\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n1.414213562373\n</pre>\n\n\n", "p02303": "\n<H1>Closest Pair</H1>\n\n<p>\nFor given <var>n</var> points in metric space, find the distance of the closest points.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n<var>x<sub>0</sub></var> <var>y<sub>0</sub></var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var>\n:\n<var>x<sub>n-1</sub></var> <var>y<sub>n-1</sub></var>\n</pre>\n\n<p>\nThe first integer <var>n</var> is the number of points.\n</p>\n\n<p>\nIn the following <var>n</var> lines, the coordinate of the <var>i</var>-th point is given by two real numbers <var>x<sub>i</sub></var> and <var>y<sub>i</sub></var>. Each value is a real number with at most 6 digits after the decimal point.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the distance in a line. The output values should be in a decimal fraction with an error less than 0.000001.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>2 &le; <var>n</var> &le; 100,000</li>\n<li>-100 &le; <var>x</var>, <var>y</var> &le; 100</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n2\n0.0 0.0\n1.0 0.0\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1.000000\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n3\n0.0 0.0\n2.0 0.0\n1.0 1.0\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n1.41421356237\n</pre>", "p02304": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Segment Intersections: Manhattan Geometry</H1>\n\n<p>\n  For given $n$ segments which are parallel to X-axis or Y-axis, find the number of intersections of them.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, the number of segments $n$ is given. In the following $n$ lines, the $i$-th segment is given by coordinates of its end points in the following format:\n<br>\n<br>\n\n$x_1 \\; y_1 \\; x_2 \\; y_2$\n\n<br>\n<br>\nThe coordinates are given in integers.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\n  Print the number of intersections in a line.\n</p>\n\n\n<H2>Constraints</H2>\n<ul>\n<li>$1 \\leq n \\leq 100,000$</li>\n<li>$ -1,000,000,000 \\leq x_1, y_1, x_2, y_2 \\leq 1,000,000,000$</li>\n<li>Two parallel segments never overlap or touch.\n<li>The number of intersections  $\\leq 1,000,000$</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n6\n2 2 2 5\n1 3 5 3\n4 1 4 4\n5 2 7 2\n6 1 6 3\n6 5 6 7\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n3\n</pre>", "p02305": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>Intersection of Circles</H1>\n\n<p>\nFor given two circles $c1$ and $c2$, print\n</p>\n\n<pre>\n4\n</pre>\n\n<p>\nif they do not cross (there are 4 common tangent lines),\n</p>\n\n<pre>\n3\n</pre>\n\n<p>\nif they are circumscribed (there are 3 common tangent lines),\n</p>\n\n<pre>\n2\n</pre>\n\n<p>\nif they intersect (there are 2 common tangent lines),\n</p>\n\n<pre>\n1\n</pre>\n\n<p>\nif a circle is inscribed in another (there are 1 common tangent line),\n</p>\n\n<pre>\n0\n</pre>\n\n<p>\nif a circle includes another (there is no common tangent line).\n</p>\n\n<H2>Input</H2>\n\n<p>\nCoordinates and radii of $c1$ and $c2$ are given in the following format.\n</p>\n\n<p>\n$c1x \\; c1y \\; c1r$ <br>\n$c2x \\; c2y \\; c2r$\n</p>\n\n<p>\n  $c1x$, $c1y$ and $c1r$ represent the center coordinate and radius of the first circle.\n  $c2x$, $c2y$ and $c2r$ represent the center coordinate and radius of the second circle.\n  All input values are given in integers.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint \"4\", \"3\", \"2\", \"1\" or \"0\" in a line.\n</p>\n\n\n<H2>Constraints</H2>\n<ul>\n<li>$-1,000 \\leq c1x, c1y, c2x, c2y \\leq 1,000$</li>\n<li>$1 \\leq c1r, c2r \\leq 1,000$</li>\n<li>$c1$ and $c2$ are different</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n1 1 1\n6 2 2\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n4\n</pre>\n\n\n<H2>Sample Input 2</H2>\n<pre>\n1 2 1\n4 2 2\n</pre>\n\n<H2>Sample Output 2</H2>\n<pre>\n3\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n1 2 1\n3 2 2\n</pre>\n\n<H2>Sample Output 3</H2>\n<pre>\n2\n</pre>\n\n<H2>Sample Input 4</H2>\n<pre>\n0 0 1\n1 0 2\n</pre>\n\n<H2>Sample Output 4</H2>\n<pre>\n1\n</pre>\n\n<H2>Sample Input 5</H2>\n<pre>\n0 0 1\n0 0 2\n</pre>\n\n<H2>Sample Output 5</H2>\n<pre>\n0\n</pre>\n", "p02306": "<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>Incircle of a Triangle</H1>\n\n<p>\nWrite a program which prints the central coordinate ($cx$,$cy$) and the radius $r$ of a incircle of a triangle which is constructed by three points ($x_1$, $y_1$), ($x_2$, $y_2$) and ($x_3$, $y_3$) on the plane surface.\n</p>\n\n<h2>Input</h2>\n\n<p>The input is given in the following format</p>\n\n<pre>\n$x_1$ $y_1$\n$x_2$ $y_2$\n$x_3$ $y_3$\n</pre>\n\n<p>\nAll the input are integers.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$-10000 \\leq x_i, y_i \\leq 10000$</li>\n  <li>The three points are not on the same straight line</li>\n</ul>\n\n\n<h2>Output</h2>\n\n<p>\nPrint  $cx$, $cy$ and $r$ separated by a single space in a line. The output values should be in a decimal fraction with an error less than 0.000001.\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n1 -2\n3 2\n-2 0\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n0.53907943898209422325 -0.26437392711448356856 1.18845545916395465278\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n0 3\n4 0\n0 0\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n1.00000000000000000000 1.00000000000000000000 1.00000000000000000000\n</pre>\n", "p02307": "<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>Circumscribed Circle of a Triangle</H1>\n\n<p>\nWrite a program which prints the central coordinate ($cx$,$cy$) and the radius $r$ of a circumscribed circle of a triangle which is constructed by three points ($x_1$, $y_1$), ($x_2$, $y_2$) and ($x_3$, $y_3$) on the plane surface.\n\n</p>\n\n<h2>Input</h2>\n\n\n<p>The input is given in the following format</p>\n\n\n<pre>\n$x_1$ $y_1$\n$x_2$ $y_2$\n$x_3$ $y_3$\n</pre>\n\n<p>\nAll the input are integers.\n</p>\n\n\n<h2>Constraints</h2>\n<ul>\n  <li>$-10000 \\leq x_i, y_i \\leq 10000$</li>\n <li>The three points are not on the same straight line</li>\n</ul>\n\n\n<h2>Output</h2>\n\n<p>\nPrint  $cx$, $cy$ and $r$ separated by a single space in a line. The output val ues should be in a decimal fraction with an error less than 0.000001.\n\n</p>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n1 -2\n3 2\n-2 0\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n0.62500000000000000000 0.68750000000000000000 2.71353666826155124291\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n0 3\n4 0\n0 0\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n2.00000000000000000000 1.50000000000000000000 2.50000000000000000000\n</pre>\n", "p02308": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n<H1>Cross Points of a Circe and a Line</H1>\n\n<p>\n  For given a circle $c$ and a line $l$, print the coordinates of the cross points of them.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<p>\n$cx\\; cy\\; r$<br>\n$q$<br>\n$Line_1$<br>\n$Line_2$<br>\n:<br>\n$Line_q$<br>\n</p>\n\n<p>\n  In the first line, the center coordinate of the circle and its radius are given by $cx$, $cy$ and $r$. In the second line, the number of queries $q$ is given.\n</p>\n\n<p>\n  In the following $q$ lines, as queries, $Line_i$ are given ($1 \\leq i \\leq q$) in the following format.\n</p>\n<p>\n$x_1\\; y_1\\; x_2\\; y_2$\n</p>\n\n<p>\n  Each line is represented by two points $p1$ and $p2$ which the line crosses. The coordinate of $p1$ and $p2$ are given by ($x1$, $y1$) and ($x2$, $y2$) respectively. All input values are given in integers.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each query, print the coordinates of the cross points in the following rules.\n</p>\n\n<ul>\n<li>If there is one cross point, print two coordinates with the same values.</li>\n<li>Print the coordinate with smaller $x$ first. In case of a tie, print the coordinate with smaller $y$ first.</li>\n</ul>\n<p>\n  The output values should be in a decimal fraction with an error less than 0.000001.\n</p>\n\n\n\n<H2>Constraints</H2>\n<ul>\n<li>$p1$ and $p2$ are different</li>\n<li>The circle and line have at least one cross point</li>\n<li>$1 \\leq q \\leq 1,000$</li>\n<li>$-10,000 \\leq cx, cy, x1, y1, x2, y2 \\leq 10,000$</li>\n<li>$1 \\leq r \\leq 10,000$</li>\n</ul>\n\n<H2>Sample Input and Output</H2>\n<br>\n\n<H2>Sample Input</H2>\n<pre>\n2 1 1\n2\n0 1 4 1\n3 0 3 3\n</pre>\n<H2>Sample Output</H2>\n<pre>\n1.00000000 1.00000000 3.00000000 1.00000000\n3.00000000 1.00000000 3.00000000 1.00000000\n</pre>\n", "p02309": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>Cross Points of Circles</H1>\n\n<p>\nFor given two circles $c1$ and $c2$, print the coordinates of the cross points of them.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input is given in the following format.\n</p>\n\n<p>\n$c1x\\; c1y\\; c1r$ <br>\n$c2x\\; c2y\\; c2r$ <br>\n</p>\n\n<p>\n  $c1x$, $c1y$ and $c1r$ represent the coordinate and radius of the first circle.\n  $c2x$, $c2y$ and $c2r$ represent the coordinate and radius of the second circle.\n  All input values are given in integers.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the coordinates ($x1$, $y1$) and ($x2$, $y2$) of the cross points $p1$ and $p2$ respectively in the following rules.\n</p>\n\n<ul>\n  <li>If there is one cross point, print two coordinates with the same values.</li>\n  <li>Print the coordinate with smaller $x$ first. In case of a tie, print the coordinate with smaller $y$ first.</li>\n</ul>\n\n<p>\n  The output values should be in a decimal fraction with an error less than 0.000001.\n</p>\n\n<H2>Constraints</H2>\n<ul>\n<li>The given circle have at least one cross point and have different center coordinates.</li>\n<li>$-10,000 \\leq c1x, c1y, c2x, c2y \\leq 10,000$</li>\n<li>$1 \\leq c1r, c2r \\leq 10,000$</li>\n</ul>\n\n<H2>Sample Input and Output</H2>\n<br>\n\n<H2>Sample Input 1</H2>\n<pre>\n0 0 2\n2 0 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1.00000000 -1.73205080 1.00000000 1.73205080\n</pre>\n\n<br>\n\n<H2>Sample Input 2</H2>\n<pre>\n0 0 2\n0 3 1\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n0.00000000 2.00000000 0.00000000 2.00000000\n</pre>", "p02310": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>Tangent to a Circle</H1>\n\n<p>\n  Find the tangent lines between a point $p$ and a circle $c$.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<p>\n$px \\; py$ <br>\n$cx \\; cy \\; r$\n</p>\n\n<p>\n$px$ and $py$ represents the coordinate of the point $p$. $cx$, $cy$ and $r$ represents the center coordinate and radius of the circle $c$ respectively. All input values are given in integers.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print coordinates of the tangent points on the circle $c$ based on the following rules.\n</p>\n\n<ul>\n<li> Print the coordinate with smaller $x$ first. In case of a tie, print the coordinate with smaller $y$ first.</li>\n</ul>\n\n<p>\n  The output values should be in a decimal fraction with an error less than 0.00001.\n</p>\n\n<H2>Constraints</H2>\n<ul>\n<li>$-1,000 \\leq px, py, cx, cy \\leq 1,000$</li>\n<li>$1 \\leq r \\leq 1,000$</li>\n<li>Distance between $p$ and the center of $c$ is greater than the radius of $c$.</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n0 0\n2 2 2\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n0.0000000000 2.0000000000\n2.0000000000 0.0000000000\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n-3 0\n2 2 2\n</pre>\n\n<H2>Sample Output 2</H2>\n<pre>\n0.6206896552 3.4482758621\n2.0000000000 0.0000000000\n</pre>", "p02311": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n<H1>Common Tangent</H1>\n\n<p>\n  Find common tangent lines of two circles $c1$ and $c2$.\n</p>\n\n<H2>Input</H2>\n\n<p>\nCenter coordinates ($cix$, $ciy$) and radii $cir$ of two circles $c1$ are $c2$ are given in the following format.\n</p>\n\n<p>\n$c1x \\; c1y \\; c1r$ <br>\n$c2x \\; c2y \\; c2r$\n</p>\n\n<p>\nAll input values are given in integers.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print coordinates of the tangent points on circle $c1$ based on the following rules.\n</p>\n\n<ul>\n  <li>Print the coordinate with smaller $x$ first. In case of a tie, print the coordinate with smaller $y$ first.\n  </li>\n</ul>\n\n<p>\n  The output values should be in a decimal fraction with an error less than 0.00001.\n</p>\n\n<H2>Constraints</H2>\n<ul>\n<li>$-1,000 \\leq c1x, c1y, c2x, c2y \\leq 1,000$</li>\n<li>$1 \\leq c1r, c2r \\leq 1,000$</li>\n<li>$c1$ and $c2$ are different</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n1 1 1\n6 2 2\n</pre>\n\n<H2>Sample Output 1</H2>\n<pre>\n0.6153846154 1.9230769231\n1.0000000000 0.0000000000\n1.4183420913 1.9082895434\n1.7355040625 0.3224796874\n</pre>\n\n\n<H2>Sample Input 2</H2>\n<pre>\n1 2 1\n4 2 2\n</pre>\n\n<H2>Sample Output 2</H2>\n<pre>\n0.6666666667 1.0571909584\n0.6666666667 2.9428090416\n2.0000000000 2.0000000000\n</pre>\n\n\n<H2>Sample Input 3</H2>\n<pre>\n1 2 1\n3 2 2\n</pre>\n\n<H2>Sample Output 3</H2>\n<pre>\n0.5000000000 1.1339745962\n0.5000000000 2.8660254038\n</pre>\n\n\n<H2>Sample Input 4</H2>\n<pre>\n0 0 1\n1 0 2\n</pre>\n\n<H2>Sample Output 4</H2>\n<pre>\n-1.0000000000 0.0000000000\n</pre>\n\n<H2>Sample Input 5</H2>\n<pre>\n0 0 1\n0 0 2\n</pre>\n\n<H2>Sample Output 5</H2>\n<pre>\n</pre>\n<p>\nNo output.\n</p>\n", "p02313": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>Area of Intersection between Two Circles</H1>\n\n<p>\n  Write a program which prints the area of intersection between given circles $c1$ and $c2$.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<p>\n$c1x\\; c1y\\; c1r$ <br>\n$c2x\\; c2y\\; c2r$ <br>\n</p>\n\n<p>\n$c1x$, $c1y$ and $c1r$ represent the coordinate and radius of the first circle. $c2x$, $c2y$ and $c2r$ represent the coordinate and radius of the second circle. All input values are given in integers.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Output the area in a line.\n  The output values should be in a decimal fraction with an error less than 0.000001.\n</p>\n\n\n<H2>Constraints</H2>\n<ul>\n<li>$-10,000 \\leq c1x, c1y, c2x, c2y \\leq 10,000$</li>\n<li>$1 \\leq c1r, c2r \\leq 10,000$</li>\n</ul>\n\n<H2>Sample Input and Output</H2>\n<br>\n\n<H2>Sample Input 1</H2>\n<pre>\n0 0 1\n2 0 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1.40306643968573875104\n</pre>\n\n<br>\n\n<H2>Sample Input 2</H2>\n<pre>\n1 0 1\n0 0 3\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n3.14159265358979311600\n</pre>\n\n\n", "p02314": "\n<H1>Coin Changing Problem</H1>\n<br/>\n\n<p>\nFind the minimum number of coins to make change for <var>n</var> cents using coins of denominations <var>d<sub>1</sub></var>, <var>d<sub>2</sub></var>,.., <var>d</var><sub><var>m</var></sub>. The coins can be used any number of times.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var> <var>m</var>\n<var>d<sub>1</sub></var> <var>d<sub>2</sub></var> ... <var>d</var><sub><var>m</var></sub>\n</pre>\n\n<p>\nTwo integers <var>n</var> and <var>m</var> are given in the first line. The available denominations are given in the second line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the minimum number of coins in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n1 &le; <var>n</var> &le; 50000\n</li>\n<li>\n1 &le; <var>m</var> &le; 20\n</li>\n<li>\n1 &le; denomination &le; 10000\n</li>\n<li>\nThe denominations are all different and contain 1.\n</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n55 4\n1 5 10 50\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n2\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n15 6\n1 2 7 8 12 50\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n2\n</pre>\n\n<br/>\n\n<H2>Sample Input 3</H2>\n<pre>\n65 6\n1 2 7 8 12 50\n</pre>\n<H2>Sample Output 3</H2>\n<pre>\n3\n</pre>\n", "p02315": "\n<H1>0-1 Knapsack Problem</H1>\n<br/>\n\n<p>\nYou have <var>N</var> items that you want to put them into a knapsack. Item <var>i</var> has value <var>v<sub>i</sub></var> and weight <var>w<sub>i</sub></var>.\n</p>\n<p>\nYou want to find a subset of items to put such that:\n</p>\n<ul>\n<li>The total value of the items is as large as possible.</li>\n<li>The items have combined weight at most <var>W</var>, that is capacity of the knapsack.</li>\n\n</ul>\n\n<p>\nFind the maximum total value of items in the knapsack.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>N</var> <var>W</var>\n<var>v<sub>1</sub></var> <var>w<sub>1</sub></var>\n<var>v<sub>2</sub></var> <var>w<sub>2</sub></var>\n:\n<var>v<sub>N</sub></var> <var>w<sub>N</sub></var>\n</pre>\n\n<p>\nThe first line consists of the integers <var>N</var> and <var>W</var>. In the following lines, the value and weight of the <var>i</var>-th item are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the maximum total values of the items in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> 1 &le; <var>N</var> &le; 100</li>\t\n<li> 1 &le; <var>v<sub>i</sub></var> &le; 1000</li>\t\n<li> 1 &le; <var>w<sub>i</sub></var> &le; 1000</li>\t\n<li> 1 &le; <var>W</var> &le; 10000</li>\t\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 5\n4 2\n5 2\n2 1\n8 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n13\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n2 20\n5 9\n4 10\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n9\n</pre>", "p02316": "\n<H1>Knapsack Problem</H1>\n<br/>\n\n<p>\nYou have <var>N</var> kinds of items that you want to put them into a knapsack. Item <var>i</var> has value <var>v<sub>i</sub></var> and weight <var>w<sub>i</sub></var>.\n</p>\n<p>\nYou want to find a subset of items to put such that:\n</p>\n<ul>\n<li>The total value of the items is as large as possible.</li>\n<li>The items have combined weight at most <var>W</var>, that is capacity of the knapsack.</li>\n<li>You can select as many items as possible into a knapsack for each kind.</li>\n</ul>\n\n<p>\nFind the maximum total value of items in the knapsack.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>N</var> <var>W</var>\n<var>v<sub>1</sub></var> <var>w<sub>1</sub></var>\n<var>v<sub>2</sub></var> <var>w<sub>2</sub></var>\n:\n<var>v<sub>N</sub></var> <var>w<sub>N</sub></var>\n</pre>\n\n<p>\nThe first line consists of the integers <var>N</var> and <var>W</var>. In the following lines, the value and weight of the <var>i</var>-th item are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the maximum total values of the items in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> 1 &le; <var>N</var> &le; 100</li>\t\n<li> 1 &le; <var>v<sub>i</sub></var> &le; 1000</li>\t\n<li> 1 &le; <var>w<sub>i</sub></var> &le; 1000</li>\t\n<li> 1 &le; <var>W</var> &le; 10000</li>\t\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 8\n4 2\n5 2\n2 1\n8 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n21\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n2 20\n5 9\n4 10\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n10\n</pre>\n<br/>\n\n<H2>Sample Input 3</H2>\n<pre>\n3 9\n2 1\n3 1\n5 2\n</pre>\n<H2>Sample Output 3</H2>\n<pre>\n27\n</pre>", "p02317": "\n<H1>Longest Increasing Subsequence</H1>\n<br/>\n\n<p>\nFor a given sequence <var>A = {a<sub>0</sub>, a<sub>1</sub>, ... , a<sub>n-1</sub>}</var>, find the length of the longest increasing subsequnece (LIS) in <var>A</var>.\n</p>\n\n<p>\nAn increasing subsequence of <var>A</var> is defined by a subsequence <var>{a<sub>i<sub>0</sub></sub>, a<sub>i<sub>1</sub></sub>, ... , a<sub>i<sub>k</sub></sub>}</var> where <var>0 &le; i<sub>0</sub> &lt; i<sub>1</sub> &lt; ... &lt; i<sub>k</sub> &lt; n</var> and <var>a<sub>i<sub>0</sub></sub> &lt; a<sub>i<sub>1</sub></sub> &lt; ... &lt; a<sub>i<sub>k</sub></sub>.\n</p>\n\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n<var>a<sub>0</sub></var>\n<var>a<sub>1</sub></var>\n:\n<var>a<sub>n-1</sub></var>\n<var>\n</pre>\n\n<p>\nIn the first line, an integer <var>n</var> is given. In the next <var>n</var> lines, elements of <var>A</var> are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe length of the longest increasing subsequence of <var>A</var>.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <var>n</var> &le; 100000</li>\n<li>0 &le; <var>a<sub>i</sub></var> &le; 10<sup>9</sup></li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n5\n5\n1\n3\n2\n4\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n</pre>\n<br/>\n\n\n<H2>Sample Input 2</H2>\n<pre>\n3\n1\n1\n1\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n1\n</pre>\n<br/>", "p02318": "\n<H1>Edit Distance (Levenshtein Distance)</H1>\n<br/>\n\n<p>\nFind the edit distance between given two words <var>s1</var> and <var>s2</var>.\n</p>\n\n<p>\nThe disntace is the minimum number of single-character edits required to change one word into the other. The edits including the following operations:\n</p>\n<ul>\n<li><strong>insertion</strong>: Insert a character at a particular position.</li>\n<li><strong>deletion</strong>: Delete a character at a particular position. </li>\n<li><strong>substitution</strong>: Change the character at a particular position to a different character </li>\n</ul>\n\n<H2>Input</H2>\n\n<pre>\n<var>s1</var>\n<var>s2</var>\n</pre>\n\n<p>\nTwo words <var>s1</var> and <var>s2</var> are given in the first line and the second line respectively. The words will consist of lower case characters.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the edit distance in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; length of <var>s1</var> &le; 1000</li>\n<li>1 &le; length of <var>s2</var> &le; 1000</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\nacac\nacm\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n2\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\nicpc\nicpc\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n0\n</pre>", "p02319": "\n<H1>0-1 Knapsack Problem II</H1>\n<br/>\n\n<p>\nYou have <var>N</var> items that you want to put them into a knapsack. Item <var>i</var> has value <var>v<sub>i</sub></var> and weight <var>w<sub>i</sub></var>.\n</p>\n<p>\nYou want to find a subset of items to put such that:\n</p>\n<ul>\n<li>The total value of the items is as large as possible.</li>\n<li>The items have combined weight at most <var>W</var>, that is capacity of the knapsack.</li>\n\n</ul>\n\n<p>\nFind the maximum total value of items in the knapsack.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>N</var> <var>W</var>\n<var>v<sub>1</sub></var> <var>w<sub>1</sub></var>\n<var>v<sub>2</sub></var> <var>w<sub>2</sub></var>\n:\n<var>v<sub>N</sub></var> <var>w<sub>N</sub></var>\n</pre>\n\n<p>\nThe first line consists of the integers <var>N</var> and <var>W</var>. In the following <var>N</var> lines, the value and weight of the <var>i</var>-th item are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the maximum total values of the items in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> 1 &le; <var>N</var> &le; 100</li>\t\n<li> 1 &le; <var>v<sub>i</sub></var> &le; 100</li>\t\n<li> 1 &le; <var>w<sub>i</sub></var> &le; 10,000,000</li>\t\n<li> 1 &le; <var>W</var> &le; 1,000,000,000</li>\t\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 5\n4 2\n5 2\n2 1\n8 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n13\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n2 20\n5 9\n4 10\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n9\n</pre>", "p02320": "\n<H1>Knapsack Problem with Limitations</H1>\n<br/>\n\n<p>\nYou have <var>N</var> items that you want to put them into a knapsack. Item <var>i</var> has value <var>v<sub>i</sub></var>, weight <var>w<sub>i</sub></var> and limitation <var>m<sub>i</sub></var>.\n</p>\n<p>\nYou want to find a subset of items to put such that:\n</p>\n<ul>\n<li>The total value of the items is as large as possible.</li>\n<li>The items have combined weight at most <var>W</var>, that is capacity of the knapsack.</li>\n<li>You can select at most <var>m<sub>i</sub></var> items for <i>i</i>th item.</li>\n\n</ul>\n\n<p>\nFind the maximum total value of items in the knapsack.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>N</var> <var>W</var>\n<var>v<sub>1</sub></var> <var>w<sub>1</sub></var> <var>m<sub>1</sub></var>\n<var>v<sub>2</sub></var> <var>w<sub>2</sub></var> <var>m<sub>2</sub></var>\n:\n<var>v<sub>N</sub></var> <var>w<sub>N</sub></var> <var>m<sub>N</sub></var>\n</pre>\n\n<p>\nThe first line consists of the integers <var>N</var> and <var>W</var>. In the following <var>N</var> lines, the value, weight and limitation of the <var>i</var>-th item are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the maximum total values of the items in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> 1 &le; <var>N</var> &le; 100</li>\t\n<li> 1 &le; <var>v<sub>i</sub></var> &le; 1,000</li>\t\n<li> 1 &le; <var>w<sub>i</sub></var> &le; 1,000</li>\n<li> 1 &le; <var>m<sub>i</sub></var> &le; 10,000</li>\t\n<li> 1 &le; <var>W</var> &le; 10,000</li>\t\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 8\n4 3 2\n2 1 1\n1 2 4\n3 2 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n12\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n2 100\n1 1 100\n2 1 50\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n150\n</pre>", "p02321": "\n<H1>Huge Knapsack Problem</H1>\n<br/>\n\n<p>\nYou have <var>N</var> items that you want to put them into a knapsack. Item <var>i</var> has value <var>v<sub>i</sub></var> and weight <var>w<sub>i</sub></var>.\n</p>\n<p>\nYou want to find a subset of items to put such that:\n</p>\n<ul>\n<li>The total value of the items is as large as possible.</li>\n<li>The items have combined weight at most <var>W</var>, that is capacity of the knapsack.</li>\n\n</ul>\n\n<p>\nFind the maximum total value of items in the knapsack.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>N</var> <var>W</var>\n<var>v<sub>1</sub></var> <var>w<sub>1</sub></var>\n<var>v<sub>2</sub></var> <var>w<sub>2</sub></var>\n:\n<var>v<sub>N</sub></var> <var>w<sub>N</sub></var>\n</pre>\n\n<p>\nThe first line consists of the integers <var>N</var> and <var>W</var>. In the following <var>N</var> lines, the value and weight of the <var>i</var>-th item are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the maximum total values of the items in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> 1 &le; <var>N</var> &le; 40</li>\t\n<li> 1 &le; <var>v<sub>i</sub></var> &le; 10<sup>15</sup></li>\t\n<li> 1 &le; <var>w<sub>i</sub></var> &le; 10<sup>15</sup></li>\n<li> 1 &le; <var>W</var> &le; 10<sup>15</sup></li>\t\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 5\n4 2\n5 2\n2 1\n8 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n13\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n2 20\n5 9\n4 10\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n9\n</pre>", "p02322": "<h1>Knapsack Problem with Limitations II</h1>\n\n<p>You have $N$ items that you want to put them into a knapsack. Item $i$ has value $v_i$, weight $w_i$ and limitation $m_i$.</p>\n\n<p>You want to find a subset of items to put such that:</p>\n<ul>\n  <li>The total value of the items is as large as possible.</li>\n  <li>The items have combined weight at most $W$, that is capacity of the knapsack.</li>\n  <li>You can select at most $m_i$ items for $i$-th item.</li>\n</ul>\n\n\n<p>Find the maximum total value of items in the knapsack.</p>\n\n<h2>Input</h2>\n\n<pre>\n$N$ $W$\n$v_1$ $w_1$ $m_1$\n$v_2$ $w_2$ $m_2$\n:\n$v_N$ $w_N$ $m_N$\n</pre>\n\n<p>The first line consists of the integers $N$ and $W$. In the following $N$ lines, the value, weight and limitation of the $i$-th item are given.</p>\n\n<h2>Output</h2>\n\n\n<p>Print the maximum total values of the items in a line.</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li>$1 \\le N \\le 50$</li>\n  <li>$1 \\le v_i \\le 50$</li>\n  <li>$1 \\le w_i \\le 10^9$</li>\n  <li>$1 \\le m_i \\le 10^9$</li>\n  <li>$1 \\le W \\le 10^9$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n<pre>\n4 8\n4 3 2\n2 1 1\n1 2 4\n3 2 2\n</pre>\n<h2>Sample Output 1</h2>\n<pre>\n12\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n2 100\n1 1 100\n2 1 50\n</pre>\n<h2>Sample Output 2</h2>\n<pre>\n150\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n5 1000000000\n3 5 1000000000\n7 6 1000000000\n4 4 1000000000\n6 8 1000000000\n2 5 1000000000\n</pre>\n<h2>Sample Output 3</h2>\n<pre>\n1166666666\n</pre>\n", "p02323": "\n<H1>Traveling Salesman Problem </H1>\n<br/>\n\n<p>\nFor a given weighted directed graph <var>G(V, E)</var>, find the distance of the shortest route that meets the following criteria:\n</p>\n<ul>\n<li>It is a closed cycle where it ends at the same point it starts.</li>\n<li>It visits each vertex exactly once.</li>\n</ul>\n\n<H2>Input</H2>\n<pre>\n<var>|V|</var> <var>|E|</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var> <var>d<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var> <var>d<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var> <var>d<sub>|E|-1</sub></var>\n</pre>\n\n\n<p>\n<var>|V|</var> is the number of vertices and <var>|E|</var> is the number of edges in the graph. The graph vertices are named with the numbers 0, 1,..., <var>|V|</var>-1 respectively.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent source and target vertices of <var>i</var>-th edge (directed) and <var>d<sub>i</sub></var> represents the distance between <var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> (the <var>i</var>-th edge).\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the shortest distance in a line. If there is no solution, print -1.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li> 2 &le; <var>|V|</var> &le; 15</li>\t\n<li> 0 &le; <var>d<sub>i</sub></var> &le; 1,000</li>\t\n<li> There are no multiedge</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 6\n0 1 2\n1 2 3\n1 3 9\n2 0 1\n2 3 6\n3 2 4\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n16\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n3 3\n0 1 1\n1 2 1\n0 2 1\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n-1\n</pre>", "p02324": "\n<H1>Chinese Postman Problem</H1>\n\n<p>\nFor a given weighted undirected graph <var>G(V, E)</var>, find the distance of the shortest route that meets the following criteria:\n</p>\n\n<ul>\n<li>It is a closed cycle where it ends at the same point it starts.</li>\n<li>The route must go through every edge at least once.</li>\n</ul>\n\n<H2>Input</H2>\n\n<pre>\n<var>|V|</var> <var>|E|</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var> <var>d<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var> <var>d<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var> <var>d<sub>|E|-1</sub></var>\n</pre>\n\n<p>\n, where <var>|V|</var> is the number of vertices and <var>|E|</var> is the number of edges in the graph. The graph vertices are named with the numbers 0, 1,..., <var>|V|</var>-1 respectively.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent source and target verticess of <var>i</var>-th edge (undirected) and <var>d<sub>i</sub></var> represents the distance between <var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> (the <var>i</var>-th edge).\n</p>\n\n<p>\nNote that there can be multiple edges between a pair of vertices.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the shortest distance in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>2 &le; <var>|V|</var> &le; 15</li>\n<li>0 &le; <var>|E|</var> &le; 1,000</li>\n<li>0 &le; <var>d<sub>i</sub></var> &le; 1,000</li>\n<li> <var>s<sub>i</sub></var> &ne; <var>t<sub>i</sub></var></li>\n<li>The graph is connected</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 4\n0 1 1\n0 2 2\n1 3 3\n2 3 4\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n10\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4 5\n0 1 1\n0 2 2\n1 3 3\n2 3 4\n1 2 5\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n18\n</pre>\n\n<br/>\n\n<H2>Sample Input 3</H2>\n<pre>\n2 3\n0 1 1\n0 1 2\n0 1 3\n</pre>\n<H2>Sample Output 3</H2>\n<pre>\n7\n</pre>", "p02325": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>Bitonic Traveling Salesman Problem (Bitonic TSP)</H1>\n\n<p>\n  For given $N$ points in the 2D Euclidean plane, find the distance of the shortest tour that meets the following criteria:\n</p>\n\n<ul>\n  <li>Visit the points according to the following steps:\n    <ol>\n      <li>It starts from the leftmost point (starting point), goes strictly from left to right, and then visits the rightmost point (turn-around point). </li>\n      <li>Then it starts from the turn-around point, goes strictly from right to left, and then back to the starting point.</li>\n    </ol>\n  </li>\n  <li>Through the processes 1. 2., the tour must visit each point at least once.</li>\n</ul>\n\n<h2>Input</h2>\n\n<p>The input data is given in the following format:</p>\n\n<p>\n$N$<br>\n$x_1$ $y_1$<br>\n$x_2$ $y_2$<br>\n...<br>\n$x_N$ $y_N$<br>\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> $2 \\leq N \\leq 1000$ </li>\n<li> $-1000 \\leq x_i, y_i \\leq 1000$</li>\n<li> $x_i$ differ from each other</li>\n<li> The given points are already sorted by x-coordinates</li>\n</ul>\n\n\n<h2>Output</h2>\n<p>\n  Print the distance of the shortest tour in a line. The output should not have an error greater than 0.0001.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n3\n0 0\n1 1\n2 0\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n4.82842712\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n4\n0 1\n1 2\n2 0\n3 1\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n7.30056308\n</pre>\n\n<h2>Sample Input 3</h2>\n<pre>\n5\n0 0\n1 2\n2 1\n3 2\n4 0\n</pre>\n\n<h2>Sample Output 3</h2>\n<pre>\n10.94427191\n</pre>\n", "p02326": "\n<H1>Largest Square</H1>\n\n<p>\n  Given a matrix (<var>H</var> &times; <var>W</var>) which contains only 1 and 0, find the area of the largest square matrix which only contains 0s.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>H</var> <var>W</var>\n<var>c</var><sub>1,1</sub> <var>c</var><sub>1,2</sub> ... <var>c<sub>1,W</sub></var>\n<var>c</var><sub>2,1</sub> <var>c</var><sub>2,2</sub> ... <var>c<sub>2,W</sub></var>\n:\n<var>c<sub>H,1</sub></var> <var>c<sub>H,2</sub></var> ... <var>c<sub>H,W</sub></var>\n</pre>\n\n<p>\n  In the first line, two integers <var>H</var> and <var>W</var> separated by a space character are given. In the following <var>H</var> lines, <var>c</var><sub><var>i</var>,<var>j</var></sub>, elements of the <var>H</var> &times; <var>W</var> matrix, are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the area (the number of 0s) of the largest square.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li> 1 &le; <var>H</var>, <var>W</var> &le; 1,400</li>\t\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n4 5\n0 0 1 0 0\n1 0 0 0 0\n0 0 0 1 0\n0 0 0 1 0\n</pre>\n\n<H2>Sample Output</H2>\n<pre>\n4\n</pre>\n", "p02327": "\n<H1>Largest Rectangle</H1>\n\n<p>\n  Given a matrix (<var>H</var> &times; <var>W</var>) which contains only 1 and 0, find the area of the largest rectangle which only contains 0s.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>H</var> <var>W</var>\n<var>c</var><sub>1,1</sub> <var>c</var><sub>1,2</sub> ... <var>c<sub>1,W</sub></var>\n<var>c</var><sub>2,1</sub> <var>c</var><sub>2,2</sub> ... <var>c<sub>2,W</sub></var>\n:\n<var>c<sub>H,1</sub></var> <var>c<sub>H,2</sub></var> ... <var>c<sub>H,W</sub></var>\n</pre>\n\n<p>\n  In the first line, two integers <var>H</var> and <var>W</var> separated by a space character are given. In the following <var>H</var> lines, <var>c</var><sub><var>i</var>,<var>j</var></sub>, elements of the <var>H</var> &times; <var>W</var> matrix, are given.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the area (the number of 0s) of the largest rectangle.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li> 1 &le; <var>H</var>, <var>W</var> &le; 1,400</li>\t\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n4 5\n0 0 1 0 0\n1 0 0 0 0\n0 0 0 1 0\n0 0 0 1 0\n</pre>\n\n<H2>Sample Output</H2>\n<pre>\n6\n</pre>\n", "p02329": "\n<H1>Coin Combination Problem</H1>\n\n<p>\nYou have 4 bags A, B, C and D each of which includes <var>N</var> coins (there are totally <var>4N</var> coins). Values of the coins in each bag are <var>a<sub>i</sub></var>, <var>b<sub>i</sub></var>, <var>c<sub>i</sub></var> and <var>d<sub>i</sub></var> respectively.\n</p>\n\n<p>\n  Find the number of combinations that result when you choose one coin from each bag (totally <var>4</var> coins) in such a way that the total value of the coins is <var>V</var>. You should distinguish the coins in a bag. \n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>  1 &le; <var>N</var> &le; 1000 </li>\n<li>  1 &le; <var>a<sub>i</sub></var>, <var>b<sub>i</sub></var>, <var>c<sub>i</sub></var>, <var>d<sub>i</sub></var> &le; 10<sup>16</sup></li>\n<li>  1 &le; <var>V</var> &le; 10<sup>16</sup></li>\n<li> All input values are given in integers</li>\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>N</var> <var>V</var>\n<var>a<sub>1</sub></var> <var>a<sub>2</sub></var> ... <var>a<sub>N</sub></var>\n<var>b<sub>1</sub></var> <var>b<sub>2</sub></var> ... <var>b<sub>N</sub></var>\n<var>c<sub>1</sub></var> <var>c<sub>2</sub></var> ... <var>c<sub>N</sub></var>\n<var>d<sub>1</sub></var> <var>d<sub>2</sub></var> ... <var>d<sub>N</sub></var>\n</pre>\n\n\n<H2>Output</H2>\n\n<p>\n  Print the number of combinations in a line.\n</p>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n3 14\n3 1 2\n4 8 2\n1 2 3\n7 3 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n9\n</pre>\n\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n5 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n625\n</pre>", "p02330": "\n\n<H1>Coin Combination Problem II</H1>\n\n<p>\n  You have <var>N</var> coins each of which has a value <var>a<sub>i</sub></var>.\nFind the number of combinations that result when you choose <var>K</var> different coins in such a way that the total value of the coins is greater than or equal to <var>L</var> and less than or equal to <var>R</var>.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>  1 &le; <var>K</var> &le; <var>N</var> &le; 40 </li>\n<li>  1 &le; <var>a<sub>i</sub></var> &le; 10<sup>16</sup></li>\n<li>  1 &le; <var>L</var> &le; <var>R</var> &le; 10<sup>16</sup></li>\n<li> All input values are given in integers</li>\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n<var>N</var> <var>K</var> <var>L</var> <var>R</var>\n<var>a<sub>1</sub></var> <var>a<sub>2</sub></var> ... <var>a<sub>N</sub></var>\n</pre>\n\n\n<H2>Output</H2>\n\n<p>\n  Print the number of combinations in a line.\n</p>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n2 2 1 9\n5 1\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1\n</pre>\n\n\n<H2>Sample Input 2</H2>\n<pre>\n5 2 7 19\n3 5 4 2 2\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n5\n</pre>", "p02343": "\n<H1>Disjoint Set</H1>\n\n<p>\nWrite a program which manipulates a disjoint set <var>S = {S<sub>1</sub>, S<sub>2</sub>, . . . , S<sub>k</sub>}</var>.\n</p>\n\n<p>\nFirst of all, the program should read an integer <var>n</var>, then make a disjoint set where each element consists of 0, 1, ... <var>n&minus;1</var> respectively.\n</p>\n\n<p>\nNext, the program should read an integer <var>q</var> and manipulate the set for <var>q</var> queries. There are two kinds of queries for different operations:\n</p>\n\n<ul>\n<li><var>unite(x, y)</var>: unites sets that contain <var>x</var> and <var>y</var>, say <var>S<sub>x</sub></var> and <var>S<sub>y</sub></var>, into a new set.\n<li><var>same(x, y)</var>: determine whether <var>x</var> and <var>y</var> are in the same set.</li>\n</ul>\n\n<H2>Input</H2>\n\n\n<pre>\n<var>n</var> <var>q</var>\n<var>com<sub>1</sub></var> <var>x<sub>1</sub></var> <var>y<sub>1</sub></var>\n<var>com<sub>2</sub></var> <var>x<sub>2</sub></var> <var>y<sub>2</sub></var>\n...\n<var>com<sub>q</sub></var> <var>x<sub>q</sub></var> <var>y<sub>q</sub></var>\n</pre>\n\n<p>\nIn the first line, <var>n</var> and <var>q</var> are given. Then, <var>q</var> queries are given where <var>com</var> represents the type of queries. '0' denotes <var>unite</var> and '1' denotes <var>same</var> operation. \n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each <var>same</var> operation, print <span>1</span> if <var>x</var> and <var>y</var> are in the same set, otherwise <span>0<span>, in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n<var>1 &le; n &le; 10000\n</li>\n<li>\n<var>1 &le; q &le; 100000\n</li>\n<li>\n<var>x &ne; y</var>\n</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n<pre>\n5 12\n0 1 4\n0 2 3\n1 1 2\n1 3 4\n1 1 4\n1 3 2\n0 1 3\n1 2 4\n1 3 0\n0 0 4\n1 0 2\n1 3 0\n</pre>\n<H2>Sample Output</H2>\n<pre>\n0\n0\n1\n1\n1\n0\n1\n1\n</pre>", "p02344": "<H1>Weighted Union Find Trees</H1>\n\n<p>\n  There is a sequence $A = a_0, a_1, ..., a_{n-1}$. You are given the following information and questions.\n</p>\n\n<ul>\n<li>relate$(x, y, z)$: $a_y$ is greater than $a_x$ by $z$</li>\n<li>diff$(x, y)$: report the difference between $a_x$ and $a_y$ $(a_y - a_x)$</li>\n</ul>\n\n<H2>Input</H2>\n\n<pre>\n$n \\; q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\n  In the first line, $n$ and $q$ are given. Then, $q$ information/questions are given in the following format.\n</p>\n\n<pre>\n0 $x \\; y\\; z$\n</pre>\n\n<p>\n  or\n</p>\n\n<pre>\n1 $x \\; y$\n</pre>\n\n<p>\nwhere '<span>0</span>' of the first digit denotes the relate information and '<span>1</span>' denotes the diff question.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each diff question, print the difference between $a_x$ and $a_y$ $(a_y - a_x)$.\n</p>\n\n<H2>Constraints</H2>\n\n\n<ul>\n<li>\n  $2 \\leq n \\leq 100,000$\n</li>\n<li>\n  $1 \\leq q \\leq 200,000$\n</li>\n<li>\n  $0 \\leq x, y < n$\n</li>\n<li>\n  $x \\ne y$\n</li>\n<li>\n  $0 \\leq z \\leq 10000$\n</li>\n<li>There are no inconsistency in the given information</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n<pre>\n5 6\n0 0 2 5\n0 1 2 3\n1 0 1\n1 1 3\n0 1 4 8\n1 0 4\n</pre>\n<H2>Sample Output</H2>\n<pre>\n2\n?\n10\n</pre>\n", "p02345": "<H1>Range Minimum Query (RMQ)</H1>\n\n<p>\nWrite a program which manipulates a sequence <var>A</var> = {<var>a<sub>0</sub>, a<sub>1</sub>, . . .  , a<sub>n-1</sub></var>} with the following operations:\n</p>\n\n<ul>\n<li><var>find(s, t)</var>: report the minimum element in <var>a<sub>s</sub>, a<sub>s+1</sub>, . . . ,a<sub>t</sub></var>.</li>\n<li><var>update(i, x)</var>: change <var>a<sub>i</sub></var> to <var>x</var>.</li>\n</ul>\n\n<p>\nNote that the initial values of <var>a<sub>i</sub></var> (<var>i = 0, 1, . . .  , n&minus;1</var>) are  2<sup>31</sup>-1.\n</p>\n\n<H2>Input</H2>\n\n\n<pre>\n<var>n</var> <var>q</var>\n<var>com<sub>0</sub></var> <var>x<sub>0</sub></var> <var>y<sub>0</sub></var>\n<var>com<sub>1</sub></var> <var>x<sub>1</sub></var> <var>y<sub>1</sub></var>\n...\n<var>com<sub>q&minus;1</sub></var> <var>x<sub>q&minus;1</sub></var> <var>y<sub>q&minus;1</sub></var>\n</pre>\n\n<p>\nIn the first line, <var>n</var> (the number of elements in <var>A</var>) and <var>q</var> (the number of queries) are given. Then, <var>q</var> queries are given where <var>com</var> represents the type of queries. '0' denotes <var>update(x<sub>i</sub>, y<sub>i</sub>)</var> and '1' denotes <var>find(x<sub>i</sub>, y<sub>i</sub>)</var>.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each <var>find</var> operation, print the minimum element.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n<var>1 &le; n &le; 100000</var>\n</li>\n<li>\n<var>1 &le; q &le; 100000</var>\n</li>\n<li>\nIf <var>com<sub>i</sub></var> is 0, then <var>0 &le; x<sub>i</sub> &lt; n</var>, <var>0 &le; y<sub>i</sub> &lt; 2<sup>31</sup>-1</var>.\n</li>\n<li>\nIf <var>com<sub>i</sub></var> is 1, then <var>0 &le; x<sub>i</sub> &lt; n</var>, <var>0 &le; y<sub>i</sub> &lt; n</var>.\n</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n3 5\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1\n2\n</pre>\n\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n1 3\n1 0 0\n0 0 5\n1 0 0\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n2147483647\n5\n</pre>\n", "p02346": "\n<H1>Range Sum Query</H1>\n\n<p>\nWrite a program which manipulates a sequence <var>A</var> = {<var>a<sub>1</sub>, a<sub>2</sub>, . . . , a<sub>n</sub></var>} with the following operations:\n</p>\n\n<ul>\n<li><var>add(i, x)</var>: add <var>x</var> to <var>a<sub>i</sub></var>.</li>\n<li><var>getSum(s, t)</var>: print the sum of <var>a<sub>s</sub>, a<sub>s+1</sub>,...,a<sub>t</sub></var>.</li>\n</ul>\n\n<p>\nNote that the initial values of <var>a<sub>i</sub></var> (<var>i = 1, 2, . . . , n</var>) are 0.\n</p>\n\n<H2>Input</H2>\n\n\n<pre>\n<var>n</var> <var>q</var>\n<var>com<sub>1</sub></var> <var>x<sub>1</sub></var> <var>y<sub>1</sub></var>\n<var>com<sub>2</sub></var> <var>x<sub>2</sub></var> <var>y<sub>2</sub></var>\n...\n<var>com<sub>q</sub></var> <var>x<sub>q</sub></var> <var>y<sub>q</sub></var>\n</pre>\n\n<p>\nIn the first line, <var>n</var> (the number of elements in <var>A</var>) and <var>q</var> (the number of queries) are given. Then, <var>q</var> queries are given where <var>com</var> represents the type of queries. '0' denotes <var>add(x<sub>i</sub>, y<sub>i</sub>)</var> and '1' denotes <var>getSum(x<sub>i</sub>, y<sub>i</sub>)</var>.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each <var>getSum</var> operation, print the sum in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n<var>1 &le; n &le; 100000</var>\n</li>\n<li>\n<var>1 &le; q &le; 100000</var>\n</li>\n<li>\nIf <var>com<sub>i</sub></var> is 0, then <var>1 &le; x<sub>i</sub> &le; n</var>, <var>0 &le; y<sub>i</sub> &le; 1000</var>.\n</li>\n<li>\nIf <var>com<sub>i</sub></var> is 1, then <var>1 &le; x<sub>i</sub> &le; n</var>, <var>1 &le; y<sub>i</sub> &le; n</var>.\n</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n3 5\n0 1 1\n0 2 2\n0 3 3\n1 1 2\n1 2 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n2\n</pre>\n", "p02347": "\n<H1>Range Search (kD Tree)</H1>\n\n<p>\nThe range search problem consists of a set of attributed records <var>S</var> to determine which records from  <var>S</var> intersect with a given range.\n</p>\n\n<p>\nFor <var>n</var> points on a plane, report a set of points which are within in a given range. Note that you do not need to consider insert and delete operations for the set.\n</p>\n\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n<var>x<sub>0</sub></var> <var>y<sub>0</sub></var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var>\n:\n<var>x<sub>n-1</sub></var> <var>y<sub>n-1</sub></var>\n<var>q</var>\n<var>sx<sub>0</sub></var> <var>tx<sub>0</sub></var> <var>sy<sub>0</sub></var> <var>ty<sub>0</sub></var>\n<var>sx<sub>1</sub></var> <var>tx<sub>1</sub></var> <var>sy<sub>1</sub></var> <var>ty<sub>1</sub></var>\n:\n<var>sx<sub>q-1</sub></var> <var>tx<sub>q-1</sub></var> <var>sy<sub>q-1</sub></var> <var>ty<sub>q-1</sub></var>\n</pre>\n\n\n<p>\nThe first integer <var>n</var> is the number of points. In the following <var>n</var> lines, the coordinate of the <var>i</var>-th point is given by two integers <var>x<sub>i</sub></var> and <var>y<sub>i</sub></var>. \n</p>\n\n<p>\nThe next integer <var>q</var> is the number of queries. In the following <var>q</var> lines, each query is given by four integers, \n<var>sx<sub>i</sub></var>, \n<var>tx<sub>i</sub></var>, \n<var>sy<sub>i</sub></var>, \n<var>ty<sub>i</sub></var>.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each query, report IDs of points such that \n<var>sx<sub>i</sub></var> &le; <var>x</var> &le; <var>tx<sub>i</sub></var> and\n<var>sy<sub>i</sub></var> &le; <var>y</var> &le; <var>ty<sub>i</sub></var>.\nThe IDs should be reported in ascending order. Print an ID in a line, and print a blank line at the end of output for the each query.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>0 &le; <var>n</var> &le; 500,000</li>\n<li>0 &le; <var>q</var> &le; 20,000</li>\n<li>-1,000,000,000 &le; <var>x</var>, <var>y</var>, <var>sx</var>, <var>tx</var>, <var>sy</var>, <var>ty</var> &le; 1,000,000,000</li>\n<li><var>sx</var> &le; <var>tx</var></li>\n<li><var>sy</var> &le; <var>ty</var></li>\n<li>For each query, the number of points which are within the range is less than or equal to 100.</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n6\n2 1\n2 2\n4 2\n6 2\n3 3\n5 4\n2\n2 4 0 4\n4 10 2 5\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n0\n1\n2\n4\n\n2\n3\n5\n\n</pre>", "p02348": "\n<H1>Range Update Query (RUQ)</H1>\n\n<p>\nWrite a program which manipulates a sequence <var>A</var> = {<var>a<sub>0</sub>, a<sub>1</sub>, . . .  , a<sub>n&minus;1</sub></var>} with the following operations:\n</p>\n\n<ul>\n  <li><var>update(s, t, x)</var>: change <var>a<sub>s</sub></var>, <var>a<sub>s+1</sub></var>, ..., <var>a<sub>t</sub></var> to <var>x</var>.</li>\n  <li><var>find(i)</var>: output the value of <var>a<sub>i</sub>.</li>\n\n</ul>\n\n<p>\nNote that the initial values of <var>a<sub>i</sub></var> (<var>i = 0, 1, . . .  , n&minus;1</var>) are  2<sup>31</sup>-1.\n</p>\n\n<H2>Input</H2>\n\n\n<pre>\n<var>n</var> <var>q</var>\n<var>query<sub>1</sub></var>\n<var>query<sub>2</sub></var>\n:\n<var>query<sub>q</sub></var>\n</pre>\n\n<p>\n  In the first line, <var>n</var> (the number of elements in <var>A</var>) and <var>q</var> (the number of queries) are given. Then, <i>i</i>th query <var>query<sub>i</sub></var> is given in the following format:\n</p>\n\n<pre>\n0 <var>s</var> <var>t</var> <var>x</var> \n</pre>\n\n<p>\n  or\n</p>\n\n<pre>\n1 <var>i</var>\n</pre>\n\n<p>\n  The first digit represents the type of the query. '0' denotes <var>update(s, t, x)</var> and '1' denotes <var>find(i)</var>.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each <var>find</var> operation, print the value.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n<var>1 &le; n &le; 100000</var>\n</li>\n<li>\n<var>1 &le; q &le; 100000</var>\n</li>\n<li>\n  <var>0 &le; s &le; t &lt; n</var>\n</li>\n<li>\n  <var>0 &le; i &lt; n</var>\n</li>\n<li>\n  <var>0 &le; x &lt; 2<sup>31</sup>&minus;1</var>\n  </li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n3 5\n0 0 1 1\n0 1 2 3\n0 2 2 2\n1 0\n1 1\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1\n3\n</pre>\n\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n1 3\n1 0\n0 0 0 5\n1 0\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n2147483647\n5\n</pre>", "p02349": "\n<H1>Range Add Query (RAQ)</H1>\n\n<p>\nWrite a program which manipulates a sequence <var>A</var> = {<var>a<sub>1</sub>, a<sub>2</sub>, . . .  , a<sub>n</sub></var>} with the following operations:\n</p>\n\n<ul>\n  <li><var>add(s, t, x)</var>: add <var>x</var> to <var>a<sub>s</sub></var>, <var>a<sub>s+1</sub></var>, ..., <var>a<sub>t</sub></var>.</li>\n  <li><var>get(i)</var>: output the value of <var>a<sub>i</sub>.</li>\n\n</ul>\n\n<p>\nNote that the initial values of <var>a<sub>i</sub></var> (<var>i = 1, 2, . . .  , n</var>) are 0.\n</p>\n\n<H2>Input</H2>\n\n\n<pre>\n<var>n</var> <var>q</var>\n<var>query<sub>1</sub></var>\n<var>query<sub>2</sub></var>\n:\n<var>query<sub>q</sub></var>\n</pre>\n\n<p>\n  In the first line, <var>n</var> (the number of elements in <var>A</var>) and <var>q</var> (the number of queries) are given. Then, <i>i</i>th query <var>query<sub>i</sub></var> is given in the following format:\n</p>\n\n<pre>\n0 <var>s</var> <var>t</var> <var>x</var> \n</pre>\n\n<p>\n  or\n</p>\n\n<pre>\n1 <var>t</var>\n</pre>\n\n<p>\n  The first digit represents the type of the query. '0' denotes <var>add(s, t, x)</var> and '1' denotes <var>get(i)</var>.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each <var>get</var> operation, print the value.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n<var>1 &le; n &le; 100000</var>\n</li>\n<li>\n<var>1 &le; q &le; 100000</var>\n</li>\n<li>\n  <var>1 &le; s &le; t &le; n</var>\n</li>\n<li>\n  <var>1 &le; i &le; n</var>\n</li>\n<li>\n  <var>0 &le; x &le; 1000</var>\n  </li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n3 5\n0 1 2 1\n0 2 3 2\n0 3 3 3\n1 2\n1 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n5\n</pre>\n\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4 3\n1 2\n0 1 4 1\n1 2\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n0\n1\n</pre>", "p02350": "<H1>RMQ and RUQ</H1>\n\n<p>\nWrite a program which manipulates a sequence <var>A</var> = {<var>a<sub>0</sub>, a<sub>1</sub>, . . .  , a<sub>n&minus;1</sub></var>} with the following operations:\n</p>\n\n<ul>\n  <li><var>update(s, t, x)</var>: change <var>a<sub>s</sub></var>, <var>a<sub>s+1</sub></var>, ..., <var>a<sub>t</sub></var> to <var>x</var>.</li>\n  <li><var>find(s, t)</var>: report the minimum element in <var>a<sub>s</sub></var>, <var>a<sub>s+1</sub></var>, ..., <var>a<sub>t</sub></var>.</li>\n\n</ul>\n\n<p>\nNote that the initial values of <var>a<sub>i</sub></var> (<var>i = 0, 1, . . .  , n&minus;1</var>) are 2<sup>31</sup>-1.\n</p>\n\n<H2>Input</H2>\n\n\n<pre>\n<var>n</var> <var>q</var>\n<var>query<sub>1</sub></var>\n<var>query<sub>2</sub></var>\n:\n<var>query<sub>q</sub></var>\n</pre>\n\n<p>\n  In the first line, <var>n</var> (the number of elements in <var>A</var>) and <var>q</var> (the number of queries) are given. Then, <i>i</i>th query <var>query<sub>i</sub></var> is given in the following format:\n</p>\n\n<pre>\n0 <var>s</var> <var>t</var> <var>x</var> \n</pre>\n\n<p>\n  or\n</p>\n\n<pre>\n1 <var>s</var> <var>t</var>\n</pre>\n\n<p>\n  The first digit represents the type of the query. '0' denotes <var>update(s, t, x)</var> and '1' denotes <var>find(s, t)</var>.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each <var>find</var> operation, print the minimum value.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n<var>1 &le; n &le; 100000</var>\n</li>\n<li>\n<var>1 &le; q &le; 100000</var>\n</li>\n<li>\n  <var>0 &le; s &le; t &lt; n</var>\n</li>\n<li>\n  <var>0 &le; x &lt; 2<sup>31</sup>&minus;1</var>\n</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n3 5\n0 0 1 1\n0 1 2 3\n0 2 2 2\n1 0 2\n1 1 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1\n2\n</pre>\n\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n1 3\n1 0 0\n0 0 0 5\n1 0 0\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n2147483647\n5\n</pre>\n", "p02351": "\n<H1>RSQ and RAQ</H1>\n\n<p>\nWrite a program which manipulates a sequence <var>A</var> = {<var>a<sub>1</sub>, a<sub>2</sub>, . . .  , a<sub>n</sub></var>} with the following operations:\n</p>\n\n<ul>\n  <li><var>add(s, t, x)</var>: add <var>x</var> to <var>a<sub>s</sub></var>, <var>a<sub>s+1</sub></var>, ..., <var>a<sub>t</sub></var>.</li>\n  <li><var>getSum(s, t)</var>: report the sum of <var>a<sub>s</sub></var>, <var>a<sub>s+1</sub></var>, ..., <var>a<sub>t</sub></var>.</li>\n\n</ul>\n\n<p>\nNote that the initial values of <var>a<sub>i</sub></var> (<var>i = 1, 2, . . .  , n</var>) are 0.\n</p>\n\n<H2>Input</H2>\n\n\n<pre>\n<var>n</var> <var>q</var>\n<var>query<sub>1</sub></var>\n<var>query<sub>2</sub></var>\n:\n<var>query<sub>q</sub></var>\n</pre>\n\n<p>\n  In the first line, <var>n</var> (the number of elements in <var>A</var>) and <var>q</var> (the number of queries) are given. Then, <i>i</i>th query <var>query<sub>i</sub></var> is given in the following format:\n</p>\n\n<pre>\n0 <var>s</var> <var>t</var> <var>x</var> \n</pre>\n\n<p>\n  or\n</p>\n\n<pre>\n1 <var>s</var> <var>t</var>\n</pre>\n\n<p>\n  The first digit represents the type of the query. '0' denotes <var>add(s, t, x)</var> and '1' denotes <var>getSum(s, t)</var>.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each <var>getSum</var> operation, print the sum;\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n<var>1 &le; n &le; 100000</var>\n</li>\n<li>\n<var>1 &le; q &le; 100000</var>\n</li>\n<li>\n  <var>1 &le; s &le; t &le; n</var>\n</li>\n<li>\n  <var>0 &le; x &lt; 1000</var>\n</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n3 5\n0 1 2 1\n0 2 3 2\n0 3 3 3\n1 1 2\n1 2 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n4\n8\n</pre>\n\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4 3\n1 1 4\n0 1 4 1\n1 1 4\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n0\n4\n</pre>", "p02352": "<H1>RMQ and RAQ</H1>\n\n<p>\n  Write a program which manipulates a sequence $A$ = {$a_0, a_1, ..., a_{n-1}$} with the following operations:\n</p>\n\n  <ul>\n    <li> $add(s, t, x)$ : add $x$ to $a_s, a_{s+1}, ..., a_t$.</li>\n    <li> $find(s, t)$ : report the minimum value in $a_s, a_{s+1}, ..., a_t$.</li>\n  </ul>\n\n<p>\n  Note that the initial values of $a_i ( i = 0, 1, ..., n-1 )$ are 0.\n</p>\n\n<h2>Input</h2>\n<pre>\n$n$ $q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n<p>\n  In the first line, $n$ (the number of elements in $A$) and $q$ (the number of queries) are given. Then, $i$th query $query_i$ is given in the following format:\n</p>\n<pre>\n0 $s$ $t$ $x$\n</pre>\n<p>or</p>\n<pre>\n1 $s$ $t$\n</pre>\n<p>\n  The first digit represents the type of the query. '0' denotes $add(s, t, x)$  and '1' denotes $find(s, t)$.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each $find$ query, print the minimum value.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 &le; n &le; 100000$</li>\n  <li>$1 &le; q &le; 100000$</li>\n  <li>$0 &le; s &le; t &lt; n$</li>\n  <li>$-1000 &le; x &le; 1000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n<pre>\n6 7\n0 1 3 1\n0 2 4 -2\n1 0 5\n1 0 1\n0 3 5 3\n1 3 4\n1 0 5\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n-2\n0\n1\n-1\n</pre>\n\n", "p02353": "<H1>RSQ and RUQ</H1>\n\n<p>\n  Write a program which manipulates a sequence $A$ = {$a_0, a_1, ..., a_{n-1}$} with the following operations:\n</p>\n\n<p>\n  <ul>\n    <li> $update(s, t, x)$: change $a_s, a_{s+1}, ..., a_t$ to $x$.</li>\n    <li> $getSum(s, t)$: print the sum of $a_s, a_{s+1}, ..., a_t$.</li>\n  </ul>\n</p>\n\n<p>\n  Note that the initial values of $a_i ( i = 0, 1, ..., n-1 )$ are 0.\n</p>\n\n<h2>Input</h2>\n<pre>\n$n$ $q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n<p>\nIn the first line, $n$ (the number of elements in $A$) and $q$ (the number of queries) are given. Then, $i$-th query $query_i$ is given in the following format:\n</p>\n\n</p>\n<pre>\n0 $s$ $t$ $x$\n</pre>\n<p>or</p>\n<pre>\n1 $s$ $t$\n</pre>\n<p>\n  The first digit represents the type of the query. '<span>0</span>' denotes $update(s, t, x)$\n and '<span>1</span>' denotes $find(s, t)$.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each $getSum$ query, print the sum in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 &le; n &le; 100000$</li>\n  <li>$1 &le; q &le; 100000$</li>\n  <li>$0 &le; s &le; t &lt; n$</li>\n  <li>$-1000 &le; x &le; 1000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n<pre>\n6 7\n0 1 3 1\n0 2 4 -2\n1 0 5\n1 0 1\n0 3 5 3\n1 3 4\n1 0 5\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n-5\n1\n6\n8\n</pre>\n", "p02354": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>The Smallest Window I</H1>\n\n<p>\n  For a given array $a_1, a_2, a_3, ... , a_N$ of $N$ elements and an integer $S$, find the smallest sub-array size (smallest window length) where the sum of the sub-array is greater than or equal to $S$. If there is not such sub-array, report 0.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> $1 \\leq N \\leq 10^5$ </li>\n<li> $1 \\leq S \\leq 10^9$</li>\n<li> $1 \\leq a_i \\leq 10^4$</li>\n</ul>\n\n<h2>Input</h2>\n\n<p>The input is given in the following format.</p>\n\n<p>\n$N$ $S$<br>\n$a_1$ $a_2$ ... $a_N$<br>\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print the smallest sub-array size in a line.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n6 4\n1 2 1 2 3 2\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n2\n</pre>\n\n\n\n<h2>Sample Input 2</h2>\n<pre>\n6 6\n1 2 1 2 3 2\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n3\n</pre>\n\n\n<h2>Sample Input 3</h2>\n<pre>\n3 7\n1 2 3\n</pre>\n\n<h2>Sample Output 3</h2>\n<pre>\n0\n</pre>\n", "p02355": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>The Smallest Window II</H1>\n\n<p>\n  For a given array $a_1, a_2, a_3, ... , a_N$ of $N$ elements and an integer $K$, find the smallest sub-array size (smallest window length) where the elements in the sub-array contains all integers in range [$1, 2, ..., K$]. If there is no such sub-array, report 0.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> $1 \\leq N \\leq 10^5$ </li>\n<li> $1 \\leq K \\leq 10^5$</li>\n<li> $1 \\leq a_i \\leq 10^5$</li>\n</ul>\n\n<h2>Input</h2>\n\n<p>The input is given in the following format.</p>\n\n<p>\n$N$ $K$<br>\n$a_1$ $a_2$ ... $a_N$<br>\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print the smallest sub-array size in a line.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n6 2\n4 1 2 1 3 5\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n2\n</pre>\n\n\n\n<h2>Sample Input 2</h2>\n<pre>\n6 3\n4 1 2 1 3 5\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\n3\n</pre>\n\n\n<h2>Sample Input 3</h2>\n<pre>\n3 4\n1 2 3\n</pre>\n\n<h2>Sample Output 3</h2>\n<pre>\n0\n</pre>", "p02356": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>The Number of Windows</H1>\n\n<p>\n  For a given array $a_1, a_2, a_3, ... , a_N$ of $N$ elements and $Q$ integers $x_i$ as queries, for each query, print the number of combinations of two integers $(l, r)$ which satisfies the condition: $1 \\leq l \\leq r \\leq N$ and $a_l + a_{l+1} + ... + a_{r-1} + a_r \\leq x_i$.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> $1 \\leq N \\leq 10^5$ </li>\n<li> $1 \\leq Q \\leq 500$</li>\n<li> $1 \\leq a_i \\leq 10^9$</li>\n<li> $1 \\leq x_i \\leq 10^{14}$</li>\n</ul>\n\n<h2>Input</h2>\n\n<p>The input is given in the following format.</p>\n\n<p>\n$N$ $Q$<br>\n$a_1$ $a_2$ ... $a_N$<br>\n$x_1$ $x_2$ ... $x_Q$<br>\n</p>\n\n<h2>Output</h2>\n<p>\n  For each query, print the number of combinations in a line.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n6 5\n1 2 3 4 5 6\n6 9 12 21 15\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n9\n12\n15\n21\n18\n</pre>\n", "p02357": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>Sliding Minimum Element</H1>\n\n<p>\n  For a given array $a_1, a_2, a_3, ... , a_N$ of $N$ elements and an integer $L$, find the minimum of each possible sub-arrays with size $L$ and print them from the beginning. For example, for an array $\\{1, 7, 7, 4, 8, 1, 6\\}$ and $L = 3$, the possible sub-arrays with size $L = 3$ includes $\\{1, 7, 7\\}$, $\\{7, 7, 4\\}$, $\\{7, 4, 8\\}$, $\\{4, 8, 1\\}$, $\\{8, 1, 6\\}$ and the minimum of each sub-array is 1, 4, 4, 1, 1 respectively.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> $1 \\leq N \\leq 10^6$ </li>\n<li> $1 \\leq L \\leq 10^6$</li>\n<li> $1 \\leq a_i \\leq 10^9$</li>\n<li> $L \\leq N$ </li>\n</ul>\n\n<h2>Input</h2>\n\n<p>The input is given in the following format.</p>\n\n<p>\n$N$ $L$<br>\n$a_1$ $a_2$ ... $a_N$<br>\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print a sequence of the minimum in a line. Print a space character between adjacent elements.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n7 3\n1 7 7 4 8 1 6\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n1 4 4 1 1\n</pre>", "p02359": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n\n<H1>The Maximum Number of Customers</H1>\n\n<p>\n  $N$ persons visited a restaurant. The restaurant is open from 0 to $T$. The $i$-th person entered the restaurant at $l_i$ and left at $r_i$. Find the maximum number of persons during the business hours.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li>$ 1 \\leq N \\leq 10^5 $</li>\n<li>$ 1 \\leq T \\leq 10^5 $</li>\n<li>$ 0 \\leq l_i < r_i \\leq T $</li>\n</ul>\n\n<h2>Input</h2>\n<p>\n  The input is given in the following format.\n</p>\n\n<p>\n$N$ $T$<br>\n$l_1$ $r_1$<br>\n$l_2$ $r_2$<br>\n:<br>\n$l_N$ $r_N$<br>\n</p>\n\n<h2>Output</h2>\n<p>\n  Print the maximum number of persons in a line.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n6 10\n0 2\n1 3\n2 6\n3 8\n4 10\n5 10\n</pre>\n<h2>Sample Output 1</h2>\n<pre>\n4\n</pre>\n\n\n<h2>Sample Input 2</h2>\n<pre>\n2 2\n0 1\n1 2\n</pre>\n<h2>Sample Output 2</h2>\n<pre>\n1\n</pre>", "p02360": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n<H1>The Maximum Number of Overlaps</H1>\n\n<p>\n  Given a set of $N$ axis-aligned rectangular seals, find the number of overlapped seals on the region which has the maximum number of overlapped seals.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input is given in the following format.\n</p>\n\n<p>\n$N$<br>\n$x1_1$ $y1_1$ $x2_1$ $y2_1$<br>\n$x1_2$ $y1_2$ $x2_2$ $y2_2$<br>\n:<br>\n$x1_N$ $y1_N$ $x2_N$ $y2_N$<br>\n</p>\n\n<p>\n($x1_i, y1_i$) and ($x2_i, y2_i$) are the coordinates of the top-left and the bottom-right corner of the $i$-th seal respectively.\n  </p>\n\n\n<h2>Constraints</h2>\n<ul>\n<li>$ 1 \\leq N \\leq 100000 $</li>\n<li>$ 0 \\leq x1_i < x2_i \\leq 1000 $</li>\n<li>$ 0 \\leq y1_i < y2_i \\leq 1000 $</li>\n<li>$ x1_i, y1_i, x2_i, y2_i$ are given in integers</li>\n</ul>\n\n\n<h2>Output</h2>\n<p>\n  Print the maximum number of overlapped seals in a line.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n2\n0 0 3 2\n2 1 4 3\n</pre>\n<h2>Sample Output 1</h2>\n<pre>\n2\n</pre>\n<br>\n\n<h2>Sample Input 2</h2>\n<pre>\n2\n0 0 2 2\n2 0 4 2\n</pre>\n<h2>Sample Output 2</h2>\n<pre>\n1\n</pre>\n<br>\n\n<h2>Sample Input 3</h2>\n<pre>\n3\n0 0 2 2\n0 0 2 2\n0 0 2 2\n</pre>\n<h2>Sample Output 3</h2>\n<pre>\n3\n</pre>", "p02363": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n<H1>All Pairs Shortest Path</H1>\n<br/>\n<H2>Input</H2>\n\n<p>\nAn edge-weighted graph <var>G</var> (<var>V</var>, <var>E</var>).\n</p>\n\n<pre>\n|<var>V</var>| |<var>E</var>|\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var> <var>d<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var> <var>d<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var> <var>d<sub>|E|-1</sub></var>\n</pre>\n\n<p>\n<var>|V|</var> is the number of vertices and <var>|E|</var> is the number of edges in <var>G</var>. The graph vertices are named with the numbers 0, 1,..., <var>|V|-1</var> respectively.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var>  represent source and target vertices of <var>i</var>-th edge (directed) and <var>d<sub>i</sub></var> represents the cost of the <var>i</var>-th edge.\n</p>\n\n<H2>Output</H2>\n\n<p>\nIf the graph contains a negative cycle (a cycle whose sum of edge costs is a negative value), print \n\n<pre>\nNEGATIVE CYCLE\n</pre>\n\n<p>\nin a line.\n</p>\n\n<p>\nOtherwise, print\n</p>\n\n<pre>\n<var>D<sub>0,0</sub></var> <var>D<sub>0,1</sub></var> ... <var>D<sub>0,|V|-1</sub></var>\n<var>D<sub>1,0</sub></var> <var>D<sub>1,1</sub></var> ... <var>D<sub>1,|V|-1</sub></var>\n:\n<var>D<sub>|V|-1,0</sub></var> <var>D<sub>1,1</sub></var> ... <var>D<sub>|V|-1,|V|-1</sub></var>\n</pre>\n\n<p>\nThe output consists of <var>|V|</var> lines. For each <var>i</var>th line, print the cost of the shortest path from vertex <var>i</var> to each vertex <var>j</var> (<var>j = 0, 1, ... |V|-1</var>) respectively. If there is no path from vertex <var>i</var> to vertex <var>j</var>, print \"<span>INF</span>\". Print a space between the costs.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li> 1 &le; <var>|V|</var> &le; 100</li>\n<li> 0 &le; <var>|E|</var> &le; 9900</li>\n<li> -2 &times 10<sup>7</sup> &le; <var>d<sub>i</sub></var> &le; 2 &times 10<sup>7</sup></li>\n<li> There are no parallel edges</li>\n<li> There are no self-loops</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 6\n0 1 1\n0 2 5\n1 2 2\n1 3 4\n2 3 1\n3 2 7\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n0 1 3 4\nINF 0 2 3\nINF INF 0 1\nINF INF 7 0\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4 6\n0 1 1\n0 2 -5\n1 2 2\n1 3 4\n2 3 1\n3 2 7\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n0 1 -5 -4\nINF 0 2 3\nINF INF 0 1\nINF INF 7 0\n</pre>\n<br/>\n\n<H2>Sample Input 3</H2>\n<pre>\n4 6\n0 1 1\n0 2 5\n1 2 2\n1 3 4\n2 3 1\n3 2 -7\n</pre>\n<H2>Sample Output 3</H2>\n<pre>\nNEGATIVE CYCLE\n</pre>\n<br/>\n", "p02362": "\n<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n<H1>Single Source Shortest Path (Negative Edges)</H1>\n<br/>\n<H2>Input</H2>\n\n<p>\nAn edge-weighted graph <var>G</var> (<var>V</var>, <var>E</var>) and the source <var>r</var>.\n</p>\n\n<pre>\n|<var>V</var>| |<var>E</var>| <var>r</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var> <var>d<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var> <var>d<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var> <var>d<sub>|E|-1</sub></var>\n</pre>\n\n<p>\n<var>|V|</var> is the number of vertices and <var>|E|</var> is the number of edges in <var>G</var>. The graph vertices are named with the numbers 0, 1,..., <var>|V|-1</var> respectively. <var>r</var> is the source of the graph.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var>  represent source and target vertices of <var>i</var>-th edge (directed) and <var>d<sub>i</sub></var> represents the cost of the <var>i</var>-th edge.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nIf the graph contains a negative cycle (a cycle whose sum of edge costs is a negative value) which is reachable from the source <var>r</var>, print \n\n<pre>\nNEGATIVE CYCLE\n</pre>\n\n<p>\nin a line.\n</p>\n\n<p>\nOtherwise, print\n</p>\n\n<pre>\n<var>c<sub>0</sub></var>\n<var>c<sub>1</sub></var>\n:\n<var>c<sub>|V|-1</sub></var>\n</pre>\n\n<p>\nThe output consists of <var>|V|</var> lines. Print the cost of the shortest path from the source <var>r</var> to each vertex 0, 1, ... <var>|V|-1</var> in order. If there is no path from the source to a vertex, print \"<span>INF</span>\". \n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li> 1 &le; <var>|V|</var> &le; 1000</li>\n<li> 0 &le; <var>|E|</var> &le; 2000</li>\n<li> -10000 &le; <var>d<sub>i</sub></var> &le; 10000</li>\n<li> There are no parallel edges</li>\n<li> There are no self-loops</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 5 0\n0 1 2\n0 2 3\n1 2 -5\n1 3 1\n2 3 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n0\n2\n-3\n-1\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4 6 0\n0 1 2\n0 2 3\n1 2 -5\n1 3 1\n2 3 2\n3 1 0\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\nNEGATIVE CYCLE\n</pre>\n<br/>\n\n<H2>Sample Input 3</H2>\n<pre>\n4 5 1\n0 1 2\n0 2 3\n1 2 -5\n1 3 1\n2 3 2\n</pre>\n<H2>Sample Output 3</H2>\n<pre>\nINF\n0\n-5\n-3\n</pre>\n\n", "p02361": "<script src=\"./IMAGE/varmath.js\" charset=\"UTF-8\"></script>\n<H1>Single Source Shortest Path</H1>\n\n<p>\n  For a given weighted graph <var>G(V, E)</var> and a source <var>r</var>, find the source shortest path to each vertex from the source (SSSP: Single Source Shortest Path).\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nAn edge-weighted graph <var>G</var> (<var>V</var>, <var>E</var>) and the source <var>r</var>.\n</p>\n\n<pre>\n|<var>V</var>| |<var>E</var>| <var>r</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var> <var>d<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var> <var>d<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var> <var>d<sub>|E|-1</sub></var>\n</pre>\n\n<p>\n<var>|V|</var> is the number of vertices and <var>|E|</var> is the number of edges in <var>G</var>. The graph vertices are named with the numbers 0, 1,..., <var>|V|-1</var> respectively. <var>r</var> is the source of the graph.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var>  represent source and target vertices of <var>i</var>-th edge (directed) and <var>d<sub>i</sub></var> represents the cost of the <var>i</var>-th edge.\n</p>\n\n\n<H2>Output</H2>\n<p>\nPrint the costs of SSSP in the following format.\n</p>\n\n<pre>\n<var>c<sub>0</sub></var>\n<var>c<sub>1</sub></var>\n:\n<var>c<sub>|V|-1</sub></var>\n</pre>\n\n<p>\nThe output consists of <var>|V|</var> lines. Print the cost of the shortest path from the source <var>r</var> to each vertex 0, 1, ... <var>|V|-1</var> in order. If there is no path from the source to a vertex, print <span>INF</span>. \n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li> 1 &le; <var>|V|</var> &le; 100000</li>\n<li>0 &le; <var>d<sub>i</sub></var> &le; 10000</li>\n<li> 0 &le; <var>|E|</var> &le; 500000</li>\n<li> There are no parallel edges</li>\n<li> There are no self-loops</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 5 0\n0 1 1\n0 2 4\n1 2 2\n2 3 1\n1 3 5\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n0\n1\n3\n4\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4 6 1\n0 1 1\n0 2 4\n2 0 1\n1 2 2\n3 1 1\n3 2 5\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n3\n0\n2\nINF\n</pre>\n\n\n\n", "p02364": "\n<H1>Minimum Spanning Tree</H1>\n<br/>\n\n<p>\nFind the sum of weights of edges of the Minimum Spanning Tree for a given weighted undirected graph <var>G</var> = (<var>V</var>, <var>E</var>).\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>|V|</var> <var>|E|</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var> <var>w<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var> <var>w<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var> <var>w<sub>|E|-1</sub></var>\n</pre>\n\n<p>\n, where <var>|V|</var> is the number of vertices and <var>|E|</var> is the number of edges in the graph. The graph vertices are named with the numbers 0, 1,..., <var>|V|</var>-1 respectively.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent source and target verticess of <var>i</var>-th edge (undirected) and <var>w<sub>i</sub></var> represents the weight of the <var>i</var>-th edge.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the sum of the weights of the Minimum Spanning Tree.\n</p>\n\n<H2>Constraints</H2>\n\n\n<ul>\n<li>1 &le; <var>|V|</var> &le; 10,000</li>\n<li>0 &le; <var>|E|</var> &le; 100,000</li>\n<li>0 &le; <var>w<sub>i</sub></var> &le; 10,000</li>\n<li>The graph is connected</li>\n<li>There are no parallel edges</li>\n<li>There are no self-loops</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 6\n0 1 2\n1 2 1\n2 3 1\n3 0 1\n0 2 3\n1 3 5\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n6 9\n0 1 1\n0 2 3\n1 2 1\n1 3 7\n2 4 1\n1 4 3\n3 4 1\n3 5 1\n4 5 6\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n5\n</pre>", "p02365": "\n<H1>Minimum-Cost Arborescence</H1>\n<br/>\n\n<p>\nFind the sum of the weights of edges of the Minimum-Cost Arborescence with the root <var>r</var> for a given weighted directed graph <var>G</var> = (<var>V</var>, <var>E</var>).\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>|V|</var> <var>|E|</var> <var>r</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var> <var>w<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var> <var>w<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var> <var>w<sub>|E|-1</sub></var>\n</pre>\n\n<p>\n, where <var>|V|</var> is the number of vertices and <var>|E|</var> is the number of edges in the graph. The graph vertices are named with the numbers 0, 1,..., <var>|V|</var>-1 respectively. <var>r</var> is the root of the Minimum-Cost Arborescence.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent source and target verticess of <var>i</var>-th directed edge. <var>w<sub>i</sub></var> represents the weight of the <var>i</var>-th directed edge.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the sum of the weights the Minimum-Cost Arborescence.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <var>|V|</var> &le; 100</li>\n<li>0 &le; <var>|E|</var> &le; 1,000</li>\n<li>0 &le; <var>w<sub>i</sub></var> &le; 10,000</li>\n<li><var>G</var> has arborescence(s) with the root <var>r</var></li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 6 0\n0 1 3\n0 2 2\n2 0 1\n2 3 1\n3 0 1\n3 1 5\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n6\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n6 10 0\n0 2 7\n0 1 1\n0 3 5\n1 4 9\n2 1 6\n1 3 2\n3 4 3\n4 2 2\n2 5 8\n3 5 3\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n11\n</pre>", "p02366": "\n<H1>Articulation Points</H1>\n\n\n<p>\nFind articulation points of a given undirected graph <var>G(V, E)</var>.\n</p>\n\n<p>\nA vertex in an undirected graph is an articulation point (or cut vertex) iff removing it disconnects the graph.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>|V|</var> <var>|E|</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var>\n</pre>\n\n<p>\n, where <var>|V|</var> is the number of vertices and <var>|E|</var> is the number of edges in the graph. The graph vertices are named with the numbers 0, 1,..., <var>|V|</var>-1 respectively.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent source and target verticess of <var>i</var>-th edge (undirected).\n</p>\n\n<H2>Output</H2>\n\n<p>\nA list of <i>articulation points</i> of the graph <var>G</var> ordered by name.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <var>|V|</var> &le; 100,000</li>\n<li>0 &le; <var>|E|</var> &le; 100,000</li>\n<li>The graph is connected</li>\n<li>There are no parallel edges</li>\n<li>There are no self-loops</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 4\n0 1\n0 2\n1 2\n2 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n2\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n5 4\n0 1\n1 2\n2 3\n3 4\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n1\n2\n3\n</pre>", "p02367": "\n<H1>Bridges</H1>\n\n<p>\nFind bridges of an undirected graph <var>G(V, E)</var>.\n</p>\n\n<p>\nA bridge (also known as a cut-edge) is an edge whose deletion increase the number of connected components.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>|V|</var> <var>|E|</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var>\n</pre>\n\n<p>\n, where <var>|V|</var> is the number of nodes and <var>|E|</var> is the number of edges in the graph. The graph nodes are named with the numbers 0, 1,..., <var>|V|</var>-1 respectively.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent source and target nodes of <var>i</var>-th edge (undirected).\n</p>\n\n<H2>Output</H2>\n\n<p>\nA list of <i>bridges</i> of the graph ordered by name. For each bridge, names of its end-ponints, source and target (source &lt; target), should be printed separated by a space. The sources should be printed ascending order, then the target should also be printed ascending order for the same source.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <var>|V|</var> &le; 100,000</li>\n<li>0 &le; <var>|E|</var> &le; 100,000</li>\n<li>The graph is connected</li>\n<li>There are no parallel edges</li>\n<li>There are no self-loops</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n4 4\n0 1\n0 2\n1 2\n2 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n2 3\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n5 4\n0 1\n1 2\n2 3\n3 4\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n0 1\n1 2\n2 3\n3 4\n</pre>", "p02368": "\n<H1>Strongly Connected Components</H1>\n\n<p>\nA direced graph is strongly connected if every two nodes are reachable from each other. In a strongly connected component of a directed graph, every two nodes of the component are mutually reachable.\n</p>\n\n<H2>Input</H2>\n\n<p>\nA directed graph <var>G(V, E)</var> and a sequence of queries where each query contains a pair of nodes <var>u</var> and <var>v</var>.\n</p>\n\n<pre>\n<var>|V|</var> <var>|E|</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var>\n<var>Q</var>\n<var>u<sub>0</sub></var> <var>v<sub>0</sub></var>\n<var>u<sub>1</sub></var> <var>v<sub>1</sub></var>\n:\n<var>u<sub>Q-1</sub></var> <var>v<sub>Q-1</sub></var>\n</pre>\n\n<p>\n<var>|V|</var> is the number of nodes and <var>|E|</var> is the number of edges in the graph. The graph nodes are named with the numbers 0, 1,..., <var>|V|</var>-1 respectively.\n</p>\n\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent source and target nodes of <var>i</var>-th edge (directed).\n</p>\n\n<p>\n<var>u<sub>i</sub></var> and <var>v<sub>i</sub></var> represent a pair of nodes given as the <var>i</var>-th query.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each query, pinrt \"1\" if the given nodes belong to the same strongly connected component, \"0\" otherwise.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <var>|V|</var> &le; 10,000</li>\n<li>0 &le; <var>|E|</var> &le; 30,000</li>\n<li>1 &le; <var>Q</var> &le; 100,000</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n5 6\n0 1\n1 0\n1 2\n2 4\n4 3\n3 2\n4\n0 1\n0 3\n2 3\n3 4\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1\n0\n1\n1\n</pre>", "p02369": "\n<H1>Cycle Detection for a Directed Graph</H1>\n<br/>\n\n<p>\nFind a cycle in a directed graph <var>G(V, E)</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nA directed graph <var>G</var> is given in the following format:\n</p>\n\n<pre>\n<var>|V|</var> <var>|E|</var>\n<var>s<sub>0</sub></var> <var>t<sub>0</sub></var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var>\n:\n<var>s<sub>|E|-1</sub></var> <var>t<sub>|E|-1</sub></var>\n</pre>\n\n\n<p>\n<var>|V|</var> is the number of nodes and <var>|E|</var> is the number of edges in the graph. The graph nodes are named with the numbers 0, 1,..., <var>|V|</var>-1 respectively.\n</p>\n<p>\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent source and target nodes of <var>i</var>-th edge (directed).\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint 1 if <var>G</var> has cycle(s), 0 otherwise.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> 1 &le; <var>|V|</var> &le; 100</li>\t\n<li> 0 &le; <var>|E|</var> &le; 1,000</li>\n<li> <var>s<sub>i</sub></var> &ne; <var>t<sub>i</sub></var></li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n3 3\n0 1\n0 2\n1 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n0\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n3 3\n0 1\n1 2\n2 0\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n1\n</pre>", "p02371": "\n<H1>Diameter of a Tree</H2>\n<br/>\n\n<p>\nGiven a tree <var>T</var> with non-negative weight, find the diameter of the tree.\n</p>\n\n<p>\nThe diameter of a tree is the maximum distance between two nodes in a tree.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var> <var>w<sub>1</sub></var>\n<var>s<sub>2</sub></var> <var>t<sub>2</sub></var> <var>w<sub>2</sub></var>\n:\n<var>s<sub>n-1</sub></var> <var>t<sub>n-1</sub></var> <var>w<sub>n-1</sub></var>\n</pre>\n\n<p>\nThe first line consists of an integer <var>n</var> which represents the number of nodes in the tree. Every node has a unique ID from 0 to <var>n</var>-1 respectively.\n</p>\n\n<p>\nIn the following <var>n</var>-1 lines, edges of the tree are given.\n\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent end-points of the <var>i</var>-th edge (undirected) and <var>w<sub>i</sub></var> represents the weight (distance) of the <var>i</var>-th edge.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the diameter of the tree in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> 1 &le; <var>n</var> &le; 100,000</li>\t\n<li> 0 &le; <var>w<sub>i</sub></var> &le; 1,000</li>\t\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n4\n0 1 2\n1 2 1\n1 3 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n5\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4\n0 1 1\n1 2 2\n2 3 4\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n7\n</pre>", "p02372": "\n<H1>Height of a Tree</H1>\n<br/>\n\n\n<p>\nGiven a tree <var>T</var> with non-negative weight, find the height of each node of the tree. For each node, the height is the distance to the most distant leaf from the node.\n</p>\n\n\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n<var>s<sub>1</sub></var> <var>t<sub>1</sub></var> <var>w<sub>1</sub></var>\n<var>s<sub>2</sub></var> <var>t<sub>2</sub></var> <var>w<sub>2</sub></var>\n:\n<var>s<sub>n-1</sub></var> <var>t<sub>n-1</sub></var> <var>w<sub>n-1</sub></var>\n</pre>\n\n<p>\nThe first line consists of an integer <var>n</var> which represents the number of nodes in the tree. Every node has a unique ID from 0 to <var>n</var>-1 respectively.\n</p>\n\n<p>\nIn the following <var>n</var>-1 lines, edges of the tree are given.\n\n<var>s<sub>i</sub></var> and <var>t<sub>i</sub></var> represent end-points of the <var>i</var>-th edge (undirected) and <var>w<sub>i</sub></var> represents the weight (distance) of the <var>i</var>-th edge.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nThe output consists of <var>n</var> lines. Print the height of each node 0, 1, 2, ..., <var>n-1</var> in order.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> 1 &le; <var>n</var> &le; 10,000</li>\t\n<li> 0 &le; <var>w<sub>i</sub></var> &le; 1,000</li>\t\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n4\n0 1 2\n1 2 1\n1 3 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n5\n3\n4\n5\n</pre>", "p02373": "\n<H1>LCA: Lowest Common Ancestor</H1>\n\n\n<p>\nFor a rooted tree, find the lowest common ancestor of two nodes <var>u</var> and <var>v</var>.\n</p>\n\n<p>\nThe given tree consists of <var>n</var> nodes and every node has a unique ID from 0 to <var>n</var>-1 where 0 is the root. \n</p>\n\n\n<H2>Input</H2>\n\n\n<pre>\n<var>n</var>\n<var>k<sub>0</sub></var> <var>c<sub>1</sub></var> <var>c<sub>2</sub></var> ... <var>c<sub>k<sub>0</sub></sub></var>\n<var>k<sub>1</sub></var> <var>c<sub>1</sub></var> <var>c<sub>2</sub></var> ... <var>c<sub>k<sub>1</sub></sub></var>\n:\n<var>k<sub>n-1</sub></var> <var>c<sub>1</sub></var> <var>c<sub>2</sub></var> ... <var>c<sub>k<sub>n-1</sub></sub></var>\n<var>q</var>\n<var>u<sub>1</sub></var> <var>v<sub>1</sub></var>\n<var>u<sub>2</sub></var> <var>v<sub>2</sub></var>\n:\n<var>u<sub>q</sub></var> <var>v<sub>q</sub></var>\n</pre>\n\n<p>\nThe first line of the input includes an integer <var>n</var>, the number of nodes of the tree.\n</p>\n<p>\nIn the next <var>n</var> lines, the information of node <var>i</var> is given. <var>k<sub>i</sub></var> is the number of children of node <var>i</var>, and <var>c<sub>1</sub></var>, ... <var>c<sub>k<sub>i</sub></sub></var> are node IDs of 1st, ... <var>k</var>th child of node <var>i</var>. \n</P>\n\n<p>\nIn the next line, the number of queryies <var>q</var> is given. In the next <var>q</var> lines, pairs of <var>u</var> and <var>v</var> are given as the queries.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each query, print the LCA of <var>u</var> and <var>v</var> in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n<var>1 &le; n &le; 100000</var>\n</li>\n<li>\n<var>1 &le; q &le; 100000</var>\n</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n8\n3 1 2 3\n2 4 5\n0\n0\n0\n2 6 7\n0\n0\n4\n4 6\n4 7\n4 3\n5 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1\n1\n0\n0\n</pre>", "p02374": "<H1>Range Query on a Tree</H1>\n\n<p>\nWrite a program which manipulates a weighted rooted tree $T$ with the following operations:\n</p>\n<ul>\n  <li>$add(v,w)$: add $w$ to the edge which connects node $v$ and its parent<br>\n  <li>$getSum(u)$: report the sum of weights of all edges from the root to node $u$<br>\n</ul>\n\n<p>\n\n  The given tree $T$ consists of $n$ nodes and every node has a unique ID from $0$ to $n-1$ respectively where ID of the root is $0$.\n  Note that all weights are initialized to zero.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input is given in the following format.\n</p>\n\n<p>\n$n$<br>\n$node_0$<br>\n$node_1$<br>\n$node_2$<br>\n$:$<br>\n$node_{n-1}$<br>\n$q$<br>\n$query_1$<br>\n$query_2$<br>\n$:$<br>\n$query_{q}$<br>\n</p>\n\n<p>\n  The first line of the input includes an integer $n$, the number of nodes in the tree.\n</p>\n\n<p>\n  In the next $n$ lines,the information of node $i$ is given in the following format:\n</p>\n<pre>\n<var>k<sub>i</sub></var> <var>c<sub>1</sub></var> <var>c<sub>2</sub></var> ... <var>c<sub>k</sub></var>\n</pre>\n<p>\n  $k_i$ is the number of children of node $i$, and $c_1$ $c_2$ ... $c_{k_i}$ are node IDs of 1st, ... $k$th child of node $i$.\n</p>\n\n<p>\n  In the next line, the number of queries $q$ is given. In the next $q$ lines, $i$th query is given in the following format:\n</p>\n\n<pre>\n0 <var>v</var> <var>w</var>\n</pre>\n<p>\nor\n</p>\n<pre>\n1 <var>u</var>\n</pre>\n\n<p>\n  The first integer represents the type of queries.'0' denotes $add(v, w)$ and '1' denotes $getSum(u)$.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>All the inputs are given in integers</li>\n  <li>$ 2 \\leq n \\leq 100000 $</li>\n  <li>$ c_j < c_{j+1} $ &nbsp; $( 1 \\leq j \\leq k-1 )$</li>\n  <li>$ 2 \\leq q \\leq 200000 $</li>\n  <li>$ 1 \\leq u,v \\leq n-1 $</li>\n  <li>$ 1 \\leq w \\leq 10000 $</li>\n</ul>\n\n<h2>Output</h2>\n<p>\n  For each $getSum$ query, print the sum in a line.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n6\n2 1 2\n2 3 5\n0\n0\n0\n1 4\n7\n1 1\n0 3 10\n1 2\n0 4 20\n1 3\n0 5 40\n1 4\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n0\n0\n10\n60\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n4\n1 1\n1 2\n1 3\n0\n6\n0 3 1000\n0 2 1000\n0 1 1000\n1 1\n1 2\n1 3\n</pre>\n<h2>Sample Output 2</h2>\n<pre>\n1000\n2000\n3000\n</pre>\n<br>\n\n<h2>Sample Input 3</h2>\n<pre>\n2\n1 1\n0\n4\n0 1 1\n1 1\n0 1 1\n1 1\n</pre>\n<h2>Sample Output 3</h2>\n<pre>\n1\n2\n</pre>\n", "p02375": "<H1>Range Query on a Tree II</H1>\n\n<p>\nWrite a program which manipulates a weighted rooted tree $T$ with the following operations:\n</p>\n<ul>\n  <li>$add(v,w)$: add $w$ to all edges from the root to node $u$<br>\n  <li>$getSum(u)$: report the sum of weights of all edges from the root to node $u$<br>\n</ul>\n\n<p>\n\n  The given tree $T$ consists of $n$ nodes and every node has a unique ID from $0$ to $n-1$ respectively where ID of the root is $0$.\n  Note that all weights are initialized to zero.\n</p>\n\n<h2>Input</h2>\n<p>\n  The input is given in the following format.\n</p>\n\n<p>\n$n$<br>\n$node_0$<br>\n$node_1$<br>\n$node_2$<br>\n$:$<br>\n$node_{n-1}$<br>\n$q$<br>\n$query_1$<br>\n$query_2$<br>\n$:$<br>\n$query_{q}$<br>\n</p>\n\n<p>\n  The first line of the input includes an integer $n$, the number of nodes in the tree.\n</p>\n\n<p>\n  In the next $n$ lines,the information of node $i$ is given in the following format:\n</p>\n<pre>\n<var>k<sub>i</sub></var> <var>c<sub>1</sub></var> <var>c<sub>2</sub></var> ... <var>c<sub>k</sub></var>\n</pre>\n<p>\n  $k_i$ is the number of children of node $i$, and $c_1$ $c_2$ ... $c_{k_i}$ are node IDs of 1st, ... $k$th child of node $i$.\n</p>\n\n<p>\n  In the next line, the number of queries $q$ is given. In the next $q$ lines, $i$th query is given in the following format:\n</p>\n\n<pre>\n0 <var>v</var> <var>w</var>\n</pre>\n<p>\nor\n</p>\n<pre>\n1 <var>u</var>\n</pre>\n\n<p>\n  The first integer represents the type of queries.'0' denotes $add(v, w)$ and '1' denotes $getSum(u)$.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>All the inputs are given in integers</li>\n  <li>$ 2 \\leq n \\leq 100000 $</li>\n  <li>$ c_j < c_{j+1} $ &nbsp; $( 1 \\leq j \\leq k-1 )$</li>\n  <li>$ 2 \\leq q \\leq 200000 $</li>\n  <li>$ 1 \\leq u,v \\leq n-1 $</li>\n  <li>$ 1 \\leq w \\leq 10000 $</li>\n</ul>\n\n<h2>Output</h2>\n<p>\n  For each $getSum$ query, print the sum in a line.\n</p>\n\n<h2>Sample Input 1</h2>\n<pre>\n6\n2 1 2\n2 3 5\n0\n0\n0\n1 4\n7\n1 1\n0 3 10\n1 2\n0 4 20\n1 3\n0 5 40\n1 4\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\n0\n0\n40\n150\n</pre>\n\n<h2>Sample Input 2</h2>\n<pre>\n4\n1 1\n1 2\n1 3\n0\n6\n0 3 1000\n0 2 1000\n0 1 1000\n1 1\n1 2\n1 3\n</pre>\n<h2>Sample Output 2</h2>\n<pre>\n3000\n5000\n6000\n</pre>\n", "p02376": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<H1>Maximum Flow</H1>\n\n<p>\nA flow network is a directed graph which has a $source$ and a $sink$. In a flow network, each edge $(u, v)$ has a capacity $c(u, v)$. Each edge receives a flow, but the amount of flow on the edge can not exceed the corresponding capacity. Find the maximum flow from the $source$ to the $sink$.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nA flow network is given in the following format.\n</p>\n\n$|V|\\;|E|$<br>\n$u_0\\;v_0\\;c_0$<br>\n$u_1\\;v_1\\;c_1$<br>\n:<br>\n$u_{|E|-1}\\;v_{|E|-1}\\;c_{|E|-1}$<br>\n<br>\n\n<p>\n$|V|$, $|E|$ is the number of vertices and edges of the flow network respectively. The vertices in $G$ are named with the numbers 0, 1,..., $|V|-1$. The source is 0 and the sink is $|V|-1$.\n</p>\n\n<p>\n$u_i$, $v_i$, $c_i$ represent $i$-th edge of the flow network.\nA pair of $u_i$ and $v_i$ denotes that there is an edge from $u_i$ to $v_i$ and $c_i$ is the capacity of $i$-th edge.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the maximum flow.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li> $2 \\leq |V| \\leq 100$</li>\t\n<li> $1 \\leq |E| \\leq 1000$</li>\t\n<li> $0 \\leq c_i \\leq 10000$</li>\t\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n4 5\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n</pre>\n", "p02378": "\n<H1>Bipartite Matching</H1>\n\n<p>\nA bipartite graph <var>G = (V, E)</var> is a graph in which the vertex set <var>V</var> can be divided into two disjoint subsets <var>X</var> and <var>Y</var> such that every edge <var>e &isin; E</var> has one end point in <var>X</var> and the other end point in <var>Y</var>.\n</p>\n\n<p>\nA matching <var>M</var> is a subset of edges such that each node in <var>V</var> appears in at most one edge in <var>M</var>.\n</p>\n\n<p>\nGiven a bipartite graph, find the size of the matching which has the largest size.\n</p>\n\n\n<H2>Input</H2>\n\n<pre>\n<var>|X|</var> <var>|Y|</var> <var>|E|</var>\n<var>x<sub>0</sub></var> <var>y<sub>0</sub></var>\n<var>x<sub>1</sub></var> <var>y<sub>1</sub></var>\n:\n<var>x<sub>|E|-1</sub></var> <var>y<sub>|E|-1</sub></var>\n</pre>\n\n<p>\n<var>|X|</var> and <var>|Y|</var> are the number of vertices in <var>X</var> and <var>Y</var> respectively, and <var>|E|</var> is the number of edges in the graph <var>G</var>. The vertices in <var>X</var> are named with the numbers 0, 1,..., <var>|X|</var>-1, and vertices in <var>Y</var> are named with the numbers 0, 1,..., <var>|Y|</var>-1, respectively.\n</p>\n\n<p>\n<var>x<sub>i</sub></var> and <var>y<sub>i</sub></var> are the node numbers from <var>X</var> and <var>Y</var> respectevely which represent the end-points of the <var>i</var>-th edge.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nPrint the largest size of the matching.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <var>|X|</var>, <var>|Y|</var> &le; 100</li>\n<li>0 &le; <var>|E|</var> &le; 10,000</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 4 6\n0 0\n0 2\n0 3\n1 1\n2 1\n2 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n</pre>\n", "p02380": "\n<H1>Triangle</H1><br>\n\n<p>\n  For given two sides of a triangle <i>a</i> and <i>b</i> and the angle <i>C</i> between them, calculate the following properties:\n</p>\n\n<ul>\n  <li><var>S</var>: Area of the triangle</li>\n  <li><var>L</var>: The length of the circumference of the triangle</li>\n  <li><var>h</var>: The height of the triangle with side <var>a</var> as a bottom edge</li>\n  </ul>\n\n<H2>Input</H2>\n\n<p>\n  The length of <i>a</i>, the length of <i>b</i> and the angle <i>C</i> are given in integers.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print <var>S</var>, <var>L</var> and <var>h</var> in a line respectively. The output should not contain an absolute error greater than 10<sup>-4</sup>.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n4 3 90\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n6.00000000\n12.00000000\n3.00000000\n</pre>\n", "p02381": "\n<H1>Standard Deviation</H1><br>\n\n<p>\n  You have final scores of an examination for <var>n</var> students. Calculate standard deviation of the scores <var>s<sub>1</sub></var>, <var>s<sub>2</sub></var> ... <var>s<sub>n</sub></var>.\n</p>\n\n<p>\nThe variance &alpha;<sup>2</sup> is defined by  \n</p>\n\n<p>\n&alpha;<sup>2</sup>  = (&sum;<sup>n</sup><sub><i>i</i>=1</sub>(s<sub><i>i</i></sub> - m)<sup>2</sup>)/n\n</p>\n\n<p>\n  where <var>m</var> is an average of <var>s<sub>i</sub></var>.\n\n  The standard deviation of the scores is the square root of their variance.\n  </p>\n\n<H2>Input</H2>\n\n<p>\n  The input consists of multiple datasets. Each dataset is given in the following format:\n</p>\n\n<pre>\n<var>n</var>\n<var>s</var><sub>1</sub> <var>s</var><sub>2</sub> ... <var>s</var><sub><var>n</var></sub>\n</pre>\n\n<p>\n  The input ends with single zero for <var>n</var>.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each dataset, print the standard deviation in a line. The output should not contain an absolute error greater than 10<sup>-4</sup>.\n</p>\n\n\n<H2>Constraints</H2>\n\n\n<ul>\n<li><var>n</var> &le; 1000</li>\n<li>0 &le; <var>s<sub>i</sub></var> &le; 100 </li>\n</ul>\n\n\n<H2>Sample Input</H2>\n\n<pre>\n5\n70 80 100 90 20\n3\n80 80 80\n0\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n27.85677655\n0.00000000\n</pre>\n\n", "p02382": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<h1>Distance II</h1><br>\n\n<p>\n  Your task is to calculate the distance between two $n$ dimensional vectors $x = \\{x_1, x_2, ..., x_n\\}$ and $y = \\{y_1, y_2, ..., y_n\\}$.\n</p>\n\n<p>\n  The Minkowski's distance defined below is a metric which is a generalization of both the Manhattan distance and the Euclidean distance.\n<br>\n\\[\nD_{xy} = (\\sum_{i=1}^n |x_i - y_i|^p)^{\\frac{1}{p}}\n\\]\n<br>\n\nIt can be the Manhattan distance \n<br>\n\n\\[\nD_{xy} = |x_1 - y_1| + |x_2 - y_2| + ... + |x_n - y_n|\n\\]\n\n<br>\nwhere $p = 1 $.\n\n<br>\n<br>\nIt can be the Euclidean distance\n<br>\n\\[\nD_{xy} = \\sqrt{(|x_1 - y_1|)^{2} + (|x_2 - y_2|)^{2} + ... + (|x_n - y_n|)^{2}}\n\\]\n<br>\nwhere $p = 2 $.\n\n<br>\n<br>\nAlso, it can be the Chebyshev distance\n<br>\n<br>\n\\[\nD_{xy} = max_{i=1}^n (|x_i - y_i|)\n\\]\n<br>\n<br>\nwhere $p = \\infty$\n</p>\n\n<p>\nWrite a program which reads two $n$ dimensional vectors $x$ and $y$, and calculates Minkowski's distance where $p = 1, 2, 3, \\infty$ respectively.\n</p>\n\n<h2>Input</h2>\n<p>\n  In the first line, an integer $n$ is given. In the second and third line, $x = \\{x_1, x_2, ... x_n\\}$ and $y = \\{y_1, y_2, ... y_n\\}$ are given respectively. The elements in $x$ and $y$ are given in integers.\n</p>\n\n<h2>Output</h2>\n<p>\n  Print the distance where $p = 1, 2, 3$ and $\\infty$ in a line respectively.\nThe output should not contain an absolute error greater than 10<sup>-5</sup>.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li>$1 \\leq n \\leq 100$</li>\n<li>$0 \\leq x_i, y_i \\leq 1000$</li>\n</ul>\n\n<h2>Sample Input</h2>\n<pre>\n3\n1 2 3\n2 0 4\n</pre>\n\n\n<h2>Sample Output</h2>\n\n<pre>\n4.000000\n2.449490\n2.154435\n2.000000\n</pre>\n", "p02387": "<H1>Hello World</H1>\n\n<p>\nWelcome to Online Judge!\n</p>\n\n<p>\nWrite a program which prints \"Hello World\" to standard output.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThere is no input for this problem.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint \"Hello World\" in a line.\n</p>\n\n\n<H2>Sample Input 1</H2>\n<pre>\nNo input\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\nHello World\n</pre>\n", "p02388": "\n<H1>X Cubic</H1>\n\n<p>\nWrite a program which calculates the cube of a given integer <var>x</var>.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nAn integer <var>x</var> is given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the cube of <var>x</var> in a line.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> 1 &le; <var>x</var> &le; 100</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n8\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n3\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n27\n</pre>", "p02389": "\n<H1>Rectangle</H1>\n\n<p>\nWrite a program which calculates the area and perimeter of a given rectangle.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  The length <var>a</var> and breadth <var>b</var> of the rectangle are given in a line separated by a single space.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the area and perimeter of the rectangle in a line. The two integers should be separated by a single space.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> 1 &le; <var>a</var>, <var>b</var> &le; 100</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 5\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n15 16\n</pre>", "p02390": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n\n<H1>Watch</H1>\n\n<p>\nWrite a program which reads an integer $S$ [second] and converts it to $h:m:s$ where $h$, $m$, $s$ denote hours, minutes (less than 60) and seconds (less than 60) respectively.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nAn integer $S$ is given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint $h$, $m$ and $s$ separated by ':'. You do not need to put '0' for a value, which consists of a digit.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li>$0 \\leq S \\leq 86400$</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n46979\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n13:2:59\n</pre>", "p02391": "\n<H1>Small, Large, or Equal</H1>\n\n<p>\nWrite a program which prints small/large/equal relation of given two integers <var>a</var> and <var>b</var>.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  Two integers <var>a</var> and <var>b</var> separated by a single space are given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor given two integers <var>a</var> and <var>b</var>, print\n</p>\n\n<pre>\na < b\n</pre>\n\n<p>\n  if <var>a</var> is less than <var>b</var>,\n</p>\n\n<pre>\na > b\n</pre>\n\n<p>\n  if <var>a</var> is greater than <var>b</var>, and\n</p>\n\n<pre>\na == b\n</pre>\n\n<p>\n  if <var>a</var> equals to <var>b</var>.\n</p>\n\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> -1000 &le; <var>a</var>, <var>b</var> &le; 1000</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n1 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\na < b\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n4 3\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\na > b\n</pre>\n\n<H2>Sample Input 3</H2>\n<pre>\n5 5\n</pre>\n<H2>Sample Output 3</H2>\n<pre>\na == b\n</pre>", "p02392": "\n<H1>Range</H1>\n\n<p>\n  Write a program which reads three integers <var>a</var>, <var>b</var> and <var>c</var>, and prints \"Yes\" if <var>a &lt; b &lt; c</var>, otherwise \"No\".\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  Three integers <var>a</var>, <var>b</var> and <var>c</var> separated by a single space are given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print \"Yes\" or \"No\" in a line.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> 0 &le; <var>a</var>, <var>b</var>, <var>c</var> &le; 100</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n1 3 8\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\nYes\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n3 8 1\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\nNo\n</pre>", "p02393": "\n<H1>Sorting Three Numbers</H1>\n\n<p>\n  Write a program which reads three integers, and prints them in ascending order.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  Three integers separated by a single space are given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the given integers in ascending order in a line. Put a single space between two integers.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> 1 &le; the three integers &le; 10000</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 8 1\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1 3 8\n</pre>", "p02379": "\n<H1>Distance</H1><br>\n\n<p>\n  Write a program which calculates the distance between two points P1(x1, y1) and P2(x2, y2).\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  Four real numbers x1, y1, x2 and y2 are given in a line.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\n  Print the distance in real number. The output should not contain an absolute error greater than 10<sup>-4</sup>.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n0 0 1 1\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n1.41421356\n</pre>", "p02396": "\n<H1>Print Test Cases</H1>\n\n<p>\nIn the online judge system, a judge file may include multiple datasets to check whether the submitted program outputs a correct answer for each test case. This task is to practice solving a problem with multiple datasets.\n</p>\n\n<p>\nWrite a program which reads an integer <var>x</var> and print it as is. Note that multiple datasets are given for this problem.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset consists of an integer <var>x</var> in a line.\n</p>\n\n<p>\nThe input ends with an integer 0. You program should not process (print) for this terminal symbol.\n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print <var>x</var> in the following format:\n</p>\n\n<pre>\nCase i: x\n</pre>\n\n<p>\nwhere <var>i</var> is the case number which starts with 1. Put a single space between \"Case\" and <var>i</var>. Also, put a single space between ':' and <var>x</var>.\n  </p>\n\n<H2>Constraints</H2>\n\n<ul>\n  <li>1 &le; <var>x</var> &le; 10000</li>\n  <li>The number of datasets &le; 10000</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n<pre>\n3\n5\n11\n7\n8\n19\n0\n</pre>\n<H2>Sample Output</H2>\n<pre>\nCase 1: 3\nCase 2: 5\nCase 3: 11\nCase 4: 7\nCase 5: 8\nCase 6: 19\n</pre>", "p02395": "\n<H1>Print Many Hello World</H1>\n\n<p>\nWrite a program which prints 1000 \"Hello World\".\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n There is no input for this problem.\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe output consists of 1000 lines. Print \"Hello World\" in each line.\n</p>\n\n<H2>Sample Input</H2>\n<pre>\nNo input\n</pre>\n<H2>Sample Output</H2>\n<pre>\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\nHello World\n.\n.\n.\n.\n.\n.\nHello World\n</pre>", "p02397": "\n<H1>Swapping Two Numbers</H1>\n\n<p>\n  Write a program which reads two integers <var>x</var> and <var>y</var>, and prints them in ascending order. \n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset consists of two integers <var>x</var> and <var>y</var> separated by a single space.\n</p>\n\n<p>\nThe input ends with two 0 (when both <var>x</var> and <var>y</var> are zero). Your program should not process for these terminal symbols.\n  </p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print <var>x</var> and <var>y</var> in ascending order in a line. Put a single space between <var>x</var> and </var>y</var>.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> 0 &le; <var>x</var>, <var>y</var> &le; 10000</li>\n  <li> the number of datasets &le; 3000</li>\n</ul>\n\n<H2>Sample Input</H2>\n<pre>\n3 2\n2 2\n5 3\n0 0\n</pre>\n<H2>Sample Output</H2>\n<pre>\n2 3\n2 2\n3 5\n</pre>", "p02400": "<H1>Circle</H1>\n\n<p>\nWrite a program which calculates the area and circumference of a circle for given radius <var>r</var>.\n</p>\n\n<H2>Input</H2>\n\n<p>\nA real number <var>r</var> is given.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the area and circumference of the circle in a line. Put a single space between them. The output should not contain an absolute error greater than 10<sup>-5</sup>.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> 0 &lt; <var>r</var> &lt; 10000</sup></li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n12.566371 12.566371\n</pre>\n\n<H2>Sample Input 2</H2>\n<pre>\n3\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n28.274334 18.849556\n</pre>\n", "p02401": "<H1>Simple Calculator</H1>\n\n<p>\nWrite a program which reads two integers <var>a</var>, <var>b</var> and an operator <var>op</var>, and then prints the value of <var>a</var> <var>op</var> <var>b</var>.\n</p>\n\n<p>\nThe operator <var>op</var> is '+', '-', '*' or '/' (sum, difference, product or quotient). The division should truncate any fractional part.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset is given in the following format.\n</p>\n\n<pre>\n<var>a</var> <var>op</var> <var>b</var>\n</pre>\n\n<p>\nThe input ends with a dataset where <var>op</var> = '?'. Your program should not process for this dataset.\n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the value in a line.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> 0 &le; <var>a</var>, <var>b</var> &le; 20000</sup></li>\n<li>No divisions by zero are given.</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n1 + 2\n56 - 18\n13 * 2\n100 / 10\n27 + 81\n0 ? 0\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n38\n26\n10\n108\n</pre>\n", "p02399": "\n<H1>A/B Problem</H1>\n\n<p>\nWrite a program which reads two integers <var>a</var> and <var>b</var>, and calculates the following values:\n</p>\n\n<ul>\n  <li><var>a</var> &divide; <var>b</var>:  <var>d</var> (in integer)</li>\n  <li>remainder of <var>a</var> &divide; <var>b</var>:  <var>r</var> (in integer)</li>\n  <li><var>a</var> &divide; <var>b</var>:  <var>f</var> (in real number)</li>\n\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\nTwo integers <var>a</var> and <var>b</var> are given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint <var>d</var>, <var>r</var> and <var>f</var> separated by a space in a line. For <var>f</var>, the output should not contain an absolute error greater than 10<sup>-5</sup>.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> 1 &le; <var>a</var>, <var>b</var> &le; 10<sup>9</sup></li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3 2\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1 1 1.50000\n</pre>", "p02398": "\n<H1>How Many Divisors?</H2>\n\n<p>\n  Write a program which reads three integers <var>a</var>, <var>b</var> and <var>c</var>, and prints the number of divisors of <var>c</var> between <var>a</var> and <var>b</var>.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  Three integers <var>a</var>, <var>b</var> and <var>c</var> are given in a line separated by a single space.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the number of divisors in a line.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n  <li> 1 &le; <var>a</var>, <var>b</var>, <var>c</var> &le; 10000</li>\n  <li> <var>a</var> &le; <var>b</var></li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n5 14 80\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n3\n</pre>", "p02402": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<h1>Min, Max and Sum</h1>\n\n<p>\nWrite a program which reads a sequence of $n$ integers $a_i (i = 1, 2, ... n)$, and prints the minimum value, maximum value and sum of the sequence.\n</p>\n\n<h2>Input</h2>\n<p>\n  In the first line, an integer $n$ is given. In the next line, $n$ integers $a_i$ are given in a line.\n</p>\n\n<h2>Output</h2>\n<p>\n  Print the minimum value, maximum value and sum in a line. Put a single space between the values.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>$0 < n \\leq 10000$</li>\n<li>$-1000000 \\leq a_i \\leq 1000000$</li>\n</ul>\n\n<h2>Sample Input</h2>\n<pre>\n5\n10 1 5 4 17\n</pre>\n\n<h2>Sample Output</h2>\n\n<pre>\n1 17 37\n</pre>\n\n", "p02404": "<H1>Print a Frame</H1>\n\n<p>\n  Draw a frame which has a height of <var>H</var> cm and a width of <var>W</var> cm. For example, the following figure shows a frame which has a height of 6 cm and a width of 10 cm.\n</p>\n\n<pre>\n##########\n#........#\n#........#\n#........#\n#........#\n##########\n</pre>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset consists of two integers <var>H</var> and <var>W</var> separated by a single space.\n</p>\n\n<p>\n  The input ends with two 0 (when both <var>H</var> and <var>W</var> are zero). \n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the frame made of '#' and '.'.\n</p>\n\n<p>\n  Print a blank line after each dataset.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>3 &le; <i>H</i> &le; 300</li>\n  <li>3 &le; <i>W</i> &le; 300</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n\n<pre>\n3 4\n5 6\n3 3\n0 0\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n####\n#..#\n####\n\n######\n#....#\n#....#\n#....#\n######\n\n###\n#.#\n###\n\n</pre>\n", "p02403": "<H1>Print a Rectangle</H1>\n\n<p>\n  Draw a rectangle which has a height of <var>H</var> cm and a width of <var>W</var> cm. Draw a 1-cm square by single '#'.\n</p>\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset consists of two integers <var>H</var> and <var>W</var> separated by a single space.\n</p>\n\n<p>\n  The input ends with two 0 (when both <var>H</var> and <var>W</var> are zero). \n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the rectangle made of <var>H</var> &times; <var>W</var> '#'.\n</p>\n\n<p>\n  Print a blank line after each dataset.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>1 &le; <i>H</i> &le; 300</li>\n  <li>1 &le; <i>W</i> &le; 300</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n\n<pre>\n3 4\n5 6\n2 2\n0 0\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n####\n####\n####\n\n######\n######\n######\n######\n######\n\n##\n##\n\n</pre>\n", "p02405": "<H1>Print a Chessboard</H1>\n\n<p>\n  Draw a chessboard which has a height of <var>H</var> cm and a width of <var>W</var> cm. For example, the following figure shows a chessboard which has a height of 6 cm and a width of 10 cm.\n</p>\n\n<pre>\n#.#.#.#.#.\n.#.#.#.#.#\n#.#.#.#.#.\n.#.#.#.#.#\n#.#.#.#.#.\n.#.#.#.#.#\n</pre>\n\n<p>\nNote that the top left corner should be drawn by '#'.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\nThe input consists of multiple datasets. Each dataset consists of two integers <var>H</var> and <var>W</var> separated by a single space.\n</p>\n\n<p>\n  The input ends with two 0 (when both <var>H</var> and <var>W</var> are zero). \n</p>\n\n<H2>Output</H2>\n\n<p>\nFor each dataset, print the chessboard made of '#' and '.'.\n</p>\n\n<p>\n  Print a blank line after each dataset.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>1 &le; <i>H</i> &le; 300</li>\n  <li>1 &le; <i>W</i> &le; 300</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n\n<pre>\n3 4\n5 6\n3 3\n2 2\n1 1\n0 0\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n#.#.\n.#.#\n#.#.\n\n#.#.#.\n.#.#.#\n#.#.#.\n.#.#.#\n#.#.#.\n\n#.#\n.#.\n#.#\n\n#.\n.#\n\n#\n\n</pre>\n", "p02406": "\n<H1>Structured Programming</H1>\n\n<p>\nIn programming languages like C/C++, a goto statement provides an unconditional jump from the \"goto\" to a labeled statement. For example, a statement \"goto CHECK_NUM;\" is executed, control of the program jumps to CHECK_NUM. Using these constructs, you can implement, for example, loops.\n</p>\n\n<p>\nNote that use of goto statement is highly discouraged, because it is difficult to trace the control flow of a program which includes goto.\n</p>\n\n<p>\nWrite a program which does precisely the same thing as the following program (this example is wrtten in C++). Let's try to write the program without goto statements.\n</p>\n\n<pre>\nvoid call(int n){\n  int i = 1;\n CHECK_NUM:\n  int x = i;\n  if ( x % 3 == 0 ){\n    cout << \" \" << i;\n    goto END_CHECK_NUM;\n  }\n INCLUDE3:\n  if ( x % 10 == 3 ){\n    cout << \" \" << i;\n    goto END_CHECK_NUM;\n  }\n  x /= 10;\n  if ( x ) goto INCLUDE3;\n END_CHECK_NUM:\n  if ( ++i <= n ) goto CHECK_NUM;\n\n  cout << endl;\n}\n</pre>\n\n\n<H2>Input</H2>\n\n<p>\nAn integer <var>n</var> is given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the output result of the above program for given integer <var>n</var>.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li>3 &le; <i>n</i> &le; 10000</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n\n<pre>\n30\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n 3 6 9 12 13 15 18 21 23 24 27 30\n</pre>\n\n<p>\n  Put a single space character before each element.\n</p>", "p02409": "<H1>Official House</H1>\n\n<p>\nYou manage 4 buildings, each of which has 3 floors, each of which consists of 10 rooms. Write a program which reads a sequence of tenant/leaver notices, and reports the number of tenants for each room.\n</p>\n\n<p>\n  For each notice, you are given four integers <var>b</var>, <var>f</var>, <var>r</var> and <var>v</var> which represent that <var>v</var> persons entered to room <var>r</var> of <var>f</var>th floor at building <var>b</var>. If <var>v</var> is negative, it means that <var>&minus;v</var> persons left.\n</p>\n\n<p>\nAssume that initially no person lives in the building. \n</p>\n\n\n<H2>Input</H2>\n<p>\n  In the first line, the number of notices <var>n</var> is given. In the following <var>n</var> lines, a set of four integers <var>b</var>, <var>f</var>, <var>r</var> and <var>v</var> which represents <var>i</var>th notice is given in a line. \n</p>\n\n\n<H2>Output</H2>\n\n<p>\nFor each building, print the information of 1st, 2nd and 3rd floor in this order. For each floor information, print the number of tenants of 1st, 2nd, .. and 10th room in this order. Print a single space character before the number of tenants. Print \"####################\" (20 '#') between buildings.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>No incorrect building, floor and room numbers are given.</li>\n<li>0 &le; the number of tenants during the management &le; 9</li>\n</ul>\n\n<H2>Sample Input</H2>\n\n<pre>\n3\n1 1 3 8\n3 2 2 7\n4 3 8 1\n</pre>\n\n\n\n<H2>Sample Output</H2>\n\n<pre>\n 0 0 8 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 7 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 1 0 0\n</pre>\n", "p02410": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n\n<h1>Matrix Vector Multiplication</h1><br>\n\n<p>\nWrite a program which reads a $ n \\times m$ matrix $A$  and a $m \\times 1$ vector $b$, and prints their product $Ab$.\n</p>\n\n<p>\n  A column vector with <var>m</var> elements is represented by the following equation.\n</p>\n\n\\[\n  b = \\left(\n    \\begin{array}{c}\n      b_1  \\\\\n      b_2  \\\\\n      : \\\\ \n      b_m \\\\ \n    \\end{array}\n  \\right)\n\\]\n\n<p>\n  A $n \\times m$ matrix with $m$ column vectors, each of which consists of $n$ elements, is represented by the following equation.\n</p>\n\n\\[\n  A = \\left(\n    \\begin{array}{cccc}\n      a_{11} & a_{12} & ... & a_{1m} \\\\\n      a_{21} & a_{22} & ... & a_{2m} \\\\\n       :    &   :   &  :  &  : \\\\\n      a_{n1} & a_{n2} & ... & a_{nm} \\\\\n    \\end{array}\n  \\right)\n\\]\n\n<p>\n  $i$-th element of a $m \\times 1$ column vector $b$ is represented by $b_i$ ($i = 1, 2, ..., m$), and the element in $i$-th row and $j$-th column of a matrix $A$ is represented by $a_{ij}$ ($i = 1, 2, ..., n,$  $j = 1, 2, ..., m$).\n</p>\n\n<p>\nThe product of a $n \\times m$ matrix $A$ and a $m \\times 1$ column vector $b$ is a $n \\times 1$ column vector $c$, and $c_i$ is obtained by the following formula:\n</p>\n\n\\[\nc_i = \\sum_{j=1}^m a_{ij}b_j  = a_{i1}b_1 + a_{i2}b_2 + ... + a_{im}b_m\n\\]\n\n\n<h2>Input</h2>\n<p>\n  In the first line, two integers $n$ and $m$ are given. In the following $n$ lines, $a_{ij}$ are given separated by a single space character. In the next $m$ lines, $b_i$ is given in a line.\n</p>\n\n<h2>Output</h2>\n<p>\n  The output consists of $n$ lines. Print $c_i$ in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li>$1 \\leq n, m \\leq 100$</li>\n<li>$0 \\leq b_i, a_{ij} \\leq 1000$</li>\n</ul>\n\n<h2>Sample Input</h2>\n<pre>\n3 4\n1 2 0 1\n0 3 0 1\n4 1 1 0\n1\n2\n3\n0\n</pre>\n\n\n<h2>Sample Output</h2>\n<pre>\n5\n6\n9\n</pre>", "p02411": "<H1>Grading</H1>\n\n<p>\n  Write a program which reads a list of student test scores and evaluates the performance for each student.\n</p>\n\n<p>\n  The test scores for a student include scores of the midterm examination <var>m</var> (out of 50), the final examination <var>f</var> (out of 50) and the makeup examination <var>r</var> (out of 100). If the student does not take the examination, the score is indicated by -1.\n</p>\n\n<p>\n  The final performance of a student is evaluated by the following procedure:\n</p>\n\n<ul>\n  <li>If the student does not take the midterm or final examination, the student's grade shall be F.</li>\n  <li>If the total score of the midterm and final examination is greater than or equal to 80, the student's grade shall be A.</li>\n  <li>If the total score of the midterm and final examination is greater than or equal to 65 and less than 80, the student's grade shall be B.</li>\n  <li>If the total score of the midterm and final examination is greater than or equal to 50 and less than 65, the student's grade shall be C.</li>\n  <li>If the total score of the midterm and final examination is greater than or equal to 30 and less than 50, the student's grade shall be D. However, if the score of the makeup examination is greater than or equal to 50, the grade shall be C.</li>\n  <li>If the total score of the midterm and final examination is less than 30, the student's grade shall be F.</li>\n</ul>\n\n\n<H2>Input</H2>\n<p>\n  The input consists of multiple datasets. For each dataset, three integers <var>m</var>, <var>f</var> and <var>r</var> are given in a line.\n</p>\n\n<p>\n  The input ends with three -1 for <var>m</var>, <var>f</var> and <var>r</var> respectively. Your program should not process for the terminal symbols.\n</p>\n\n<p>\nThe number of datasets (the number of students) does not exceed 50.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each dataset, print the grade (<span>A</span>, <span>B</span>, <span>C</span>, <span>D</span> or <span>F</span>) in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n40 42 -1\n20 30 -1\n0 2 -1\n-1 -1 -1\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\nA\nC\nF\n</pre>\n\n", "p02413": "\n<H1>Spreadsheet</H1><br>\n\n<p>\n  Your task is to perform a simple table calculation.\n</p>\n\n<p>\n  Write a program which reads the number of rows <var>r</var>, columns <var>c</var> and a table of <var>r</var> &times; <var>c</var> elements, and prints a new table, which includes the total sum for each row and column. \n</p>\n\n<H2>Input</H2>\n<p>\n  In the first line, two integers <var>r</var> and <var>c</var> are given. Next, the table is given by <var>r</var> lines, each of which consists of <var>c</var> integers separated by space characters.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the new table of (<var>r</var>+1) &times; (<var>c</var>+1) elements. Put a single space character between adjacent elements. For each row, print the sum of it's elements in the last column. For each column, print the sum of it's elements in the last row. Print the total sum of the elements at the bottom right corner of the table.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li> 1 &le; <var>r</var>, <var>c</var> &le; 100</li>\n<li> 0 &le; an element of the table &le; 100</li>\n</ul>\n\n\n<H2>Sample Input</H2>\n\n<pre>\n4 5\n1 1 3 4 5\n2 2 2 4 5\n3 3 0 1 1\n2 3 4 4 6\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n1 1 3 4 5 14\n2 2 2 4 5 15\n3 3 0 1 1 8\n2 3 4 4 6 19\n8 9 9 13 17 56\n</pre>\n", "p02415": "\n\n<H1>Toggling Cases</H1><br>\n\n<p>\n  Write a program which converts uppercase/lowercase letters to lowercase/uppercase for a given string.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  A string is given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the converted string in a line. Note that you do not need to convert any characters other than alphabetical letters.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>The length of the input string &lt; 1200</li>\n</ul>\n\n<H2>Sample Input</H2>\n\n<pre>\nfAIR, LATER, OCCASIONALLY CLOUDY.\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\nFair, later, occasionally cloudy.\n</pre>\n", "p02416": "\n<H1>Sum of Numbers</H1><br>\n\n<p>\n  Write a program which reads an integer and prints sum of its digits.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  The input consists of multiple datasets. For each dataset, an integer <var>x</var> is given in a line. The number of digits in <var>x</var> does not exceed 1000.\n</p>\n\n<p>\nThe input ends with a line including single zero. Your program should not process for this terminal symbol.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  For each dataset, print the sum of digits in <var>x</var>.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n123\n55\n1000\n0\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n6\n10\n1\n</pre>\n", "p02417": "\n<H1>Counting Characters</H1><br>\n\n<p>\n  Write a program which counts and reports the number of each alphabetical letter. Ignore the case of characters.\n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  A sentence in English is given in several lines.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Prints the number of alphabetical letters in the following format:\n</p>\n\n<pre>\na : <i>The number of 'a'</i>\nb : <i>The number of 'b'</i>\nc : <i>The number of 'c'</i>\n  .\n  .\nz : <i>The number of 'z'</i>\n</pre>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>The number of characters in the sentence &lt; 1200</li>\n</ul>\n\n<H2>Sample Input</H2>\n\n<pre>\nThis is a pen.\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\na : 1\nb : 0\nc : 0\nd : 0\ne : 1\nf : 0\ng : 0\nh : 1\ni : 2\nj : 0\nk : 0\nl : 0\nm : 0\nn : 1\no : 0\np : 1\nq : 0\nr : 0\ns : 2\nt : 1\nu : 0\nv : 0\nw : 0\nx : 0\ny : 0\nz : 0\n</pre>\n", "p02419": "<H1>Finding a Word</H1><br>\n\n<p>\nWrite a program which reads a word <var>W</var> and a text <var>T</var>, and prints the number of word <var>W</var> which appears in text <var>T</var>\n</p>\n\n<p>\n  <var>T</var> consists of string <var>T<sub>i</sub></var> separated by space characters and newlines. Count the number of <var>T<sub>i</sub></var> which equals to <var>W</var>. The word and text are case insensitive.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n  <li>The length of <var>W</var> &le; 10</li>\n  <li><var>W</var> consists of lower case letters</li>\n<li>The length of <var>T</var> in a line &le; 1000</li>\n</ul>\n\n\n<H2>Input</H2>\n\n<p>\n  In the first line, the word <var>W</var> is given. In the following lines, the text <var>T</var> is given separated by space characters and newlines.\n</p>\n\n<p>\n\"<span>END_OF_TEXT</span>\" indicates the end of the text.\n</p>\n\n<H2>Output</H2>\n\n<p>\n  Print the number of <var>W</var> in the text.\n</p>\n\n\n<H2>Sample Input</H2>\n\n<pre>\ncomputer\nNurtures computer scientists and highly-skilled computer engineers\nwho will create and exploit \"knowledge\" for the new era.\nProvides an outstanding computer environment.\nEND_OF_TEXT\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n3\n</pre>\n", "p02420": "<H1>Shuffle</H1><br>\n\n<p>\n  Your task is to shuffle a deck of <var>n</var> cards, each of which is marked by a alphabetical letter.\n</p>\n\n<p>\n  A single shuffle action takes out <var>h</var> cards from the bottom of the deck and moves them to the top of the deck.\n</p>\n\n<p>\n  The deck of cards is represented by a string as follows.\n</p>\n\n<pre>\nabcdeefab\n</pre>\n\n<p>\n  The first character and the last character correspond to the card located at the bottom of the deck and the card on the top of the deck respectively.\n</p>\n\n<p>\n  For example, a shuffle with <var>h</var> = 4 to the above deck, moves the first 4 characters \"abcd\" to the end of the remaining characters \"eefab\", and generates the following deck:\n</p>\n\n<pre>\neefababcd\n</pre>\n\n<p>\n  You can repeat such shuffle operations.\n</p>\n\n<p>\n  Write a program which reads a deck (a string) and a sequence of <var>h</var>, and prints the final state (a string). \n</p>\n\n\n<H2>Input</H2>\n\n<p>\n  The input consists of multiple datasets. Each dataset is given in the following format:\n</p>\n\n<pre>\nA string which represents a deck\nThe number of shuffle <var>m</var>\n<var>h</var><sub>1</sub>\n<var>h</var><sub>2</sub>\n  .\n  .\n<var>h</var><sub><var>m</var></sub>\n</pre>\n\n<p>\n  The input ends with a single character '-' for the string.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>The length of the string &le; 200</li>\n<li>1 &le; <var>m</var> &le; 100</li>\n<li>1 &le; <var>h<sub>i</sub></var> &lt; The length of the string</li>\n<li> The number of datasets &le; 10</li>\n</ul>\n\n\n\n<H2>Output</H2>\n\n<p>\n  For each dataset, print a string which represents the final state in a line.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\naabc\n3\n1\n2\n1\nvwxyz\n2\n3\n4\n-\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\naabc\nxyzvw\n</pre>\n", "p02423": "<h1>Bit Operation I</h1>\n\n<p>\n  Given a non-negative decimal integer $x$, convert it to binary representation $b$ of 32 bits. Then, print the result of the following operations to $b$ respecitvely.\n</p>\n<ul>\n<li>Inversion: change the state of each bit to the opposite state</li>\n<li>Logical left shift: shift left by 1</li>\n<li>Logical right shift: shift right by 1</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$x$\n</pre>\n\n\n<h2>Output</h2>\n<p>\n  Print the given bits, results of inversion, left shift and right shift in a line respectively.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$0 \\leq x \\leq 2^{32} - 1$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n8\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n00000000000000000000000000001000\n11111111111111111111111111110111\n00000000000000000000000000010000\n00000000000000000000000000000100\n</pre>\n\n\n<h2>Sample Input 2</h2>\n\n<pre>\n13\n</pre>\n\n<h2>Sample Output 2</h2>\n\n<pre>\n00000000000000000000000000001101\n11111111111111111111111111110010\n00000000000000000000000000011010\n00000000000000000000000000000110\n</pre>\n\n", "p02421": "\n<H1>Card Game</H1><br>\n\n<p>\n  Taro and Hanako are playing card games. They have <var>n</var> cards each, and they compete <var>n</var> turns. At each turn Taro and Hanako respectively puts out a card.\n  The name of the animal consisting of alphabetical letters is written on each card, and the bigger one in lexicographical order becomes the winner of that turn. The winner obtains 3 points. In the case of a draw, they obtain 1 point each.\n</p>\n\n<p>\n  Write a program which reads a sequence of cards Taro and Hanako have and reports the final scores of the game.\n</p>\n\n<H2>Input</H2>\n\n<p>\n  In the first line, the number of cards <var>n</var> is given. In the following <var>n</var> lines, the cards for <var>n</var> turns are given respectively. For each line, the first string represents the Taro's card and the second one represents Hanako's card.\n</p>\n\n\n<h2>Constraints</h2>\n<ul>\n<li><var>n</var> &le; 1000</li>\n<li>The length of the string &le; 100</li>\n</ul>\n\n<H2>Output</H2>\n\n<p>\n  Print the final scores of Taro and Hanako respectively. Put a single space character between them.\n</p>\n\n<H2>Sample Input</H2>\n\n<pre>\n3\ncat dog\nfish fish\nlion tiger\n</pre>\n\n<H2>Sample Output</H2>\n\n<pre>\n1 7\n</pre>", "p02424": "<h1>Bit Operation II</h1>\n\n\n<p>\n  Given two non-negative decimal integers $a$ and $b$, calculate their AND (logical conjunction), OR (logical disjunction) and XOR (exclusive disjunction) and print them in binary representation of 32 bits.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$a \\; b$\n</pre>\n\n<h2>Output</h2>\n<p>\n  Print results of AND, OR and  XOR in a line respectively.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$0 \\leq a, b \\leq 2^{32} - 1$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n8 10\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n00000000000000000000000000001000\n00000000000000000000000000001010\n00000000000000000000000000000010\n</pre>\n", "p02426": "<h1>Bit Mask</h1>\n\n\n<p>\n   A state with $n$ flags of ON or OFF can be represented by a sequence of bits where $0, 1, ..., n-1$ th flag corresponds to 1 (ON) or 0 (OFF).\n  The state can be managed by the corresponding decimal integer, because the sequence of bits is a binary representation where each bit is 0 or 1.\n</p>\n\n<p>\n  On the other hand, a mask is a special bit sequence which can be used to set specified bits of a given bit sequence to ON/OFF. It can also be used to extract/exclude a  bit sequence based on a specified pattern.\n</p>\n\n<p>\n  Given a sequence of bits with 64 flags which represent a state, perform the following operations using a set of pre-defined masks. Note that each flag of the bits is initialized by OFF.\n</p>\n\n<ul>\n  <li>test(i): \tPrint 1 if $i$-th flag is ON, otherwise 0</li>\n  <li>set(m): \tSet flags specified by mask $m$ to ON</li>\n  <li>clear(m):\tSet flags specified by mask $m$ to OFF</li>\n  <li>flip(m):\tInverse flags specified by mask $m$</li>\n  <li>all(m):\tPrint 1 if all flags specified by mask $m$ are ON, otherwise 0</li>\n  <li>any(m):\tPrint 1 if at least one flag specified by mask $m$ is ON, otherwise 0</li>\n  <li>none(m):\tPrint 1 if all flags specified by mask $m$ are OFF, otherwise 0</li>\n  <li>count(m):\tPrint the number of flags specifed by mask $m$ with ON</li>\n  <li>val(m):\tPrint the decimal value of the state specified by mask $m$</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$mask_0$\n$mask_1$\n:\n$mask_{n-1}$\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\n  $n$ represents the number of masks. $mask_i$ represents state of $i$-th mask and is given in the following format:\n</p>\n\n<pre>\n$k$ $b_0$ $b_1$ ... $b_k$\n</pre>\n\n<p>\n$k$ is the number of ON in the bits. The following $k$ integers $b_j$ show that $b_j$-th bit is ON.\n</p>\n\n<p>\n$query_i$ represents $i$-th query and is given in the following format:\n</p>\n\n<pre>\n0 $i$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $m$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $m$\n</pre>\n\n<p>or</p>\n\n<pre>\n3 $m$\n</pre>\n\n<p>or</p>\n\n<pre>\n4 $m$\n</pre>\n\n<p>or</p>\n\n<pre>\n5 $m$\n</pre>\n\n<p>or</p>\n\n<pre>\n6 $m$\n</pre>\n\n<p>or</p>\n\n<pre>\n7 $m$\n</pre>\n\n<p>or</p>\n\n<pre>\n8 $m$\n</pre>\n\n<p>\nThe first digit <span>0</span>, <span>1</span>,...,<span>8</span> represents the operation test(i), set(m), clear(m), flip(m), all(m), any(m), none(m), count(m) or val(m) respectively.\n</p>\n\n<h2>Output</h2>\n<p>\nPrint the result in a line for each test, all, any, none, count and val operation.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 10$</li>\n  <li>$1 \\leq k \\leq 64$</li>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq i < 64$</li>\n  <li>$0 \\leq m < n$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n3\n3 0 1 3\n1 3\n3 0 1 2\n8\n1 0\n2 1\n3 1\n4 2\n5 2\n6 2\n7 2\n8 2\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n0\n1\n0\n2\n3\n</pre>\n", "p02425": "<h1>Bit Flag</h1>\n\n\n<p>\n  A state with $n$ flags of ON or OFF can be represented by a sequence of bits where $0, 1, ..., n-1$ -th flag corresponds to 1 (ON) or 0 (OFF).\n  The state can be managed by the corresponding decimal integer, because the sequence of bits is a binary representation where each bit is 0 or 1.\n</p>\n\n<p>\n  Given a sequence of bits with 64 flags which represent a state, perform the following operations. Note that each flag of the bits is initialized by OFF.\n</p>\n\n<ul>\n  <li>test(i): \t\tPrint 1 if $i$-th flag is ON, otherwise 0</li>\t\n  <li>set(i): \t\tSet $i$-th flag to ON</li>\n  <li>clear(i):\t\tSet $i$-th flag to OFF</li>\n  <li>flip(i): \t\tInverse $i$-th flag</li>\n  <li>all:\t\tPrint 1 if all flags are ON, otherwise 0</li>\n  <li>any:\t\tPrint 1 if at least one flag is ON, otherwise 0</li>\n  <li>none:\t\tPrint 1 if all flags are OFF, otherwise 0</li>\n  <li>count:\t\tPrint the number of ON flags</li>\n  <li>val:\t\tPrint the decimal value of the state</li>\t\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given in the following format:\n</p>\n\n<pre>\n0 $i$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $i$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $i$\n</pre>\n\n<p>or</p>\n\n<pre>\n3 $i$\n</pre>\n\n<p>or</p>\n\n<pre>\n4\n</pre>\n\n<p>or</p>\n\n<pre>\n5\n</pre>\n\n<p>or</p>\n\n<pre>\n6\n</pre>\n\n<p>or</p>\n\n<pre>\n7\n</pre>\n\n<p>or</p>\n\n<pre>\n8\n</pre>\n\n<p>\n  The first digit <span>0</span>, <span>1</span>,...,<span>8</span> represents the operation test(i), set(i), clear(i), flip(i), all, any, none, count or val respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  Print the result in a line for each test, all, any, none, count and val operation.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq i < 64$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n14\n1 0\n1 1\n1 2\n2 1\n0 0\n0 1\n0 2\n0 3\n3 3\n4\n5\n6\n7\n8\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n0\n1\n0\n0\n1\n0\n3\n13\n</pre>\n", "p02427": "<h1>Enumeration of Subsets I</h1>\n\n\n<p>\nPrint all subsets of a set $S$, which contains $0, 1, ... n-1$ as elements. Note that we represent $0, 1, ... n-1$ as 00...0001, 00...0010, 00...0100, ..., 10...0000 in binary respectively and the integer representation of a subset is calculated by bitwise OR of existing elements. \n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n</pre>\n\n\n<h2>Output</h2>\n\n<p>\n  Print subsets ordered by their decimal integers. Print a subset in a line in the following format.\n</p>\n\n<pre>\n$d$: $e_0$ $e_1$ ... \n</pre>\n\n<p>\n  Print '<span>:</span>' after the integer value $d$, then print elements $e_i$ in the subset in ascending order. Seprate two adjacency elements by a space character.\n</p>\n\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 18$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n0:\n1: 0\n2: 1\n3: 0 1\n4: 2\n5: 0 2\n6: 1 2\n7: 0 1 2\n8: 3\n9: 0 3\n10: 1 3\n11: 0 1 3\n12: 2 3\n13: 0 2 3\n14: 1 2 3\n15: 0 1 2 3\n</pre>\n\n<p>\n  Note that if the subset is empty, your program should not output a space character after '<span>:</span>'.\n</p>\n\n", "p02422": "\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({ tex2jax: { inlineMath: [[\"$\",\"$\"], [\"\\\\(\",\"\\\\)\"]], processEscapes: true }});\n</script>\n<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\">\n</script>\n\n<h2>Transformation</h2><br>\n\n<p>\n  Write a program which performs a sequence of commands to a given string $str$. The command is one of:\n</p>\n\n<ul>\n<li><span>print a b</span>: print from the <apan>a</span>-th character to the <span>b</span>-th character of $str$</li>\n<li><span>reverse a b</span>: reverse from the <span>a</span>-th character to the <span>b</span>-th character of $str$</li>\n<li><span>replace a b p</span>: replace from the <span>a</span>-th character to the <span>b</span>-th character of $str$ with <span>p</span></li>\n</ul>\n\n<p>\n  Note that the indices of $str$ start with 0.\n</p>\n\n<h2>Input</h2>\n<p>\n  In the first line, a string $str$ is given. $str$ consists of lowercase letters. In the second line, the number of commands <var>q</var> is given. In the next <var>q</var> lines, each command is given in the above mentioned format.\n</p>\n\n<h2>Output</h2>\n<p>\nFor each <span>print</span> command, print a string in a line.\n</p>\n\n<h2>Constraints</h2>\n\n<ul>\n<li>$1 \\leq $ length of $str \\leq 1000$</li>\n<li>$1 \\leq q \\leq 100$</li>\n<li>$0 \\leq a \\leq b < $ length of $str$</li>\n<li>for replace command, $b - a + 1 = $ length of $p$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n<pre>\nabcde\n3\nreplace 1 3 xyz\nreverse 0 2\nprint 1 4\n</pre>\n\n<h2>Sample Output 1</h2>\n<pre>\nxaze\n</pre>\n\n\n<h2>Sample Input 2</h2>\n<pre>\nxyz\n3\nprint 0 2\nreplace 0 2 abc\nprint 0 2\n</pre>\n\n<h2>Sample Output 2</h2>\n<pre>\nxyz\nabc\n</pre>", "p02428": "<h1>Enumeration of Subsets II</h1>\n\n\n<p>\n  You are given a set $T$, which is a subset of $U$. The set $U$ consists of $0, 1, ... n-1$.\n\n  Print all sets, each of which is a subset of $U$ and includes $T$ as a subset.\n\n  Note that we represent $0, 1, ... n-1$ as 00...0001, 00...0010, 00...0100, ..., 10...0000 in binary respectively and the integer representation of a subset is calculated by bitwise OR of existing elements. \n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$k \\; b_0 \\; b_1 \\; ... \\; b_{k-1}$\n</pre>\n\n<p>\n$k$ is the number of elements in $T$, and $b_i$ represents elements in $T$.\n</p>\n\n\n\n<h2>Output</h2>\n\n<p>\n  Print the subsets ordered by their decimal integers. Print a subset in the following format.\n</p>\n\n<pre>\n$d$: $e_0$ $e_1$ ...\n</pre>\n\n<p>\n  Print '<span>:</span>' after the integer value $d$, then print elements $e_i$ in the subset in ascending order. Separate two adjacency elements by a space character.\n</p>\n\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 18$</li>\n  <li>$0 \\leq k \\leq n$</li>\n  <li>$0 \\leq b_i < n$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n2 0 2\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n5: 0 2\n7: 0 1 2\n13: 0 2 3\n15: 0 1 2 3\n</pre>\n", "p02429": "<h1>Enumeration of Subsets III</h1>\n\n\n<p>\n\n   You are given a set $T$, which is a subset of $S$. The set $S$ consists of $0, 1, ... n-1$.\n\n  Print all subsets of $T$.\n\n  Note that we represent $0, 1, ... n-1$ as 00...0001, 00...0010, 00...0100, ..., 10...0000 in binary respectively and the integer representation of a subset is calculated by bitwise OR of existing elements. \n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$k \\; b_0 \\; b_1 \\; ... \\; b_{k-1}$\n</pre>\n\n\n<p>\n$k$ is the number of elements in $T$, and $b_i$ represents elements in $T$.\n</p>\n\n<h2>Output</h2>\n\n<p>\nPrint the subsets ordered by their decimal integers. Print a subset in the following format.\n</p>\n\n<pre>\n$d$: $e_0$ $e_1$ ...\n</pre>\n\n<p>\n  Print '<span>:</span>' after the integer value $d$, then print elements $e_i$ in the subset in ascending order. Separate two adjacency elements by a space character.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 28$</li>\n  <li>$0 \\leq k \\leq 18$</li>\n  <li>$k \\leq n$</li>\n  <li>$0 \\leq b_i < n$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n2 0 2\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n0:\n1: 0\n4: 2\n5: 0 2\n</pre>\n", "p02430": "<h1>Enumeration of Combinations</h1>\n\n<p>\nPrint all combinations which can be made by $k$ different elements from $0, 1, ..., n-1$.\n\n  Note that we represent $0, 1, ... n-1$ as 00...0001, 00...0010, 00...0100, ..., 10...0000 in binary respectively and the integer representation of a combination is calculated by bitwise OR of the selected elements.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n \\; k$\n</pre>\n\n\n<h2>Output</h2>\n\n<p>\n  Print the combinations ordered by their decimal integers. Print a combination in the following format.\n</p>\n\n\n<pre>\n$d$: $e_0$ $e_1$ ...\n</pre>\n\n<p>\n  Print '<span>:</span>' after the integer value $d$, then print elements $e_i$ in the combination in ascending order. Separate two adjacency elements by a space character.\n </p>\n\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 18$</li>\n  <li>$k \\leq n$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n5 3\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n7: 0 1 2\n11: 0 1 3\n13: 0 2 3\n14: 1 2 3\n19: 0 1 4\n21: 0 2 4\n22: 1 2 4\n25: 0 3 4\n26: 1 3 4\n28: 2 3 4\n</pre>\n", "p02432": "<h1>Deque</h1>\n \n<p>\n  For a dynamic array $A = \\{a_0, a_1, ...\\}$ of integers, perform a sequence of the following operations:\n</p>\n\n<ul>\n  <li>push($d$, $x$): Add element $x$ at the begining of $A$, if $d = 0$. Add element $x$ at the end of $A$, if $d = 1$.</li>\n  <li>randomAccess($p$): Print element $a_p$.</li>\n  <li>pop($d$): Delete the first element of $A$, if $d = 0$. Delete the last element of $A$, if $d = 1$.</li>\n</ul>\n\n<p>\n  $A$ is a 0-origin array and it is empty in the initial state.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $d$ $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $p$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $d$\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span> and <span>2</span> represent push, randomAccess and pop operations respectively.\n</p>\n\n<p>\n randomAccess and pop operations will not be given for an empty array.  \n</p>\n\n<h2>Output</h2>\n<p>\n  For each randomAccess, print $a_p$ in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 400,000$</li>\n  <li>$0 \\leq p < $ the size of $A$</li>\n  <li>$-1,000,000,000 \\leq x \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n11\n0 0 1\n0 0 2\n0 1 3\n1 0\n1 1\n1 2\n2 0\n2 1\n0 0 4\n1 0\n1 1\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n2\n1\n3\n4\n1\n</pre>\n", "p02431": "<h1>Vector</h1>\n \n<p>\n  For a dynamic array $A = \\{a_0, a_1, ...\\}$ of integers, perform a sequence of the following operations:\n</p>\n\n<ul>\n  <li>pushBack($x$): add element $x$ at the end of $A$</li>\n  <li>randomAccess($p$):print element $a_p$</li>\n  <li>popBack(): delete the last element of $A$</li>\n</ul>\n\n<p>\n  \n$A$ is a 0-origin array and it is empty in the initial state.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\n  Each query $query_i$ is given by\n</p>\n\n<pre>\n0 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $p$\n</pre>\n\n<p>or</p>\n\n<pre>\n2\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span> and <span>2</span> represent pushBack, randomAccess and popBack operations respectively.\n</p>\n\n<p>\n  randomAccess and popBack operations will not be given for an empty array.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each randomAccess, print $a_p$ in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq p < $ the size of $A$</li>\n  <li>$-1,000,000,000 \\leq x \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n8\n0 1\n0 2\n0 3\n2\n0 4\n1 0\n1 1\n1 2\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n2\n4\n</pre>\n", "p02434": "<h1>Vector II</h1>\n \n<p>\n  For $n$ dynamic arrays $A_i$ ($i = 0, 1, ..., n-1$), perform a sequence of the following operations:\n</p>\n\n<ul>\n  <li>pushBack($t$, $x$): Add element $x$ at the end of $A_t$.</li>\n  <li>dump($t$): Print all elements in $A_t$.</li>\n  <li>clear($t$): Clear $A_t$. If $A_t$ is empty, do nothing.</li>\n</ul>\n\n<p>\n  $A_i$ is a 0-origin array and it is empty in the initial state.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$ $q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $t$ $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $t$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $t$\n</pre>\n\n<p>\nwhere the first digits <span>0</span>, <span>1</span> and <span>2</span> represent pushBack, dump and clear operations respectively.\n</p>\n\n<h2>Output</h2>\n<p>\nFor each dump operation, print elements of $A_t$ a line. Separete adjacency elements by a space character (do not print the space after the last element). Note that, if the array is empty, an empty line should be printed.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 1,000$</li>\n  <li>$1 \\leq q \\leq 500,000$</li>\n  <li>$-1,000,000,000 \\leq x \\leq 1,000,000,000$</li>\n  <li>The total number of elements printed by dump operations do not exceed 500,000</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n3 13\n0 0 1\n0 0 2\n0 0 3\n0 1 -1\n0 2 4\n0 2 5\n1 0\n1 1\n1 2\n2 1\n1 0\n1 1\n1 2\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1 2 3\n-1\n4 5\n1 2 3\n\n4 5\n</pre>\n", "p02436": "<h1>Queue</h1>\n\n<p>\nQueue is a container of elements that are inserted and deleted according to FIFO (First In First Out).\n</p>\n\n<p>\n  For $n$ queues $Q_i$ ($i = 0, 1, ..., n-1$), perform a sequence of the following operations.\n</p>\n\n<ul>\n  <li>enqueue($t$, $x$): Insert an integer $x$ to $Q_t$.</li>\n  <li>front($t$): Report the value which should be deleted next from $Q_t$. If $Q_t$ is empty, do nothing.</li>\n  <li>dequeue($t$): Delete an element from $Q_t$. If $Q_t$ is empty, do nothing.</li>\n</ul>\n\n<p>\nIn the initial state, all queues are empty.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n \\; q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $t$ $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $t$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $t$\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span> and <span>2</span> represent enqueue, front and dequeue operations respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each front operation, print an integer in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 1,000$</li>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$-1,000,000,000 \\leq x \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n3 9\n0 0 1\n0 0 2\n0 0 3\n0 2 4\n0 2 5\n1 0\n1 2\n2 0\n1 0\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n4\n2\n</pre>\n", "p02437": "<h1>Priority Queue</h1>\n\n<p>\n  Priority queue is a container of elements which the element with the highest priority should be extracted first.\n</p>\n\n<p>\n  For $n$ priority queues $Q_i$ ($i = 0, 1, ..., n-1$) of integers, perform a sequence of the following operations.\n</p>\n\n<ul>\n  <li>insert($t$, $x$): Insert $x$ to $Q_t$.</li>\n  <li>getMax($t$): Report the maximum value in $Q_t$. If $Q_t$ is empty, do nothing.</li>\n  <li>deleteMax($t$): Delete the maximum element from $Q_t$. If $Q_t$ is empty, do nothing.</li>\n</ul>\n\n<p>\nIn the initial state, all queues are empty.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n \\; q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $t$ $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $t$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $t$\n</pre>\n\n<p>\n  where  the first digits <span>0</span>, <span>1</span> and <span>2</span> represent insert, getMax and deleteMax operations respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each getMax operation, print an integer in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 1,000$</li>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$-1,000,000,000 \\leq x \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n\n<pre>\n2 10\n0 0 3\n0 0 9\n0 0 1\n1 0\n2 0\n1 0\n0 0 4\n1 0\n0 1 8\n1 1\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n9\n3\n4\n8\n</pre>\n\n\n", "p02433": "<h1>List</h1>\n \n<p>\n  For a dynamic list $L$ of integers, perform a sequence of the following operations. $L$ has a special element called END at the end of the list and an element of $L$ is indicated by a cursor.\n</p>\n\n<ul>\n  <li>insert($x$): Insert $x$ before the element indicated by the cursor. After this operation, the cursor points the inserted element.</li>\n  <li>move($d$): Move the cursor to the end by $d$, if $d$ is positive. Move the cursor to the front by $d$, if $d$ is negative.</li>\n  <li>erase(): Delete the element indicated by the cursor. After this operation, the cursor points the element next to the deleted element. In case there is no such element, the cursor should point END.\n  </li>\n</ul>\n\n<p>\n  In the initial state, $L$ is empty and the cursor points END.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $d$\n</pre>\n\n<p>or</p>\n\n<pre>\n2\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span> and <span>2</span> represent insert, move and erase operations respectively.\n</p>\n\n\n<h2>Output</h2>\n<p>\n  Print all elements of the list in order after performing given operations. Print an element in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 500,000$</li>\n  <li>The cursor indicates an element of $L$ or END during the operations</li>\n  <li>Erase operation will not given when the cursor points END</li>\n  <li>$-1,000,000,000 \\leq x \\leq 1,000,000,000$</li>\n  <li>Moving distance of the cursor ($\\sum{|d|}$) does not exceed 1,000,000</li>\n  <li>$L$ is not empty after performing all operations</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n5\n0 1\n0 2\n0 3\n1 1\n2\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n3\n1\n</pre>\n", "p02435": "<h1>Stack</h1>\n\n<p>\n  Stack is a container of elements that are inserted and deleted according to LIFO (Last In First Out).\n</p>\n\n<p>\n  For $n$ stack $S_i$ ($i = 0, 1, ..., n-1$), perform a sequence of the following operations.\n</p>\n\n<ul>\n  <li>push($t$, $x$): Insert an integer $x$ to $S_t$.</li>\n  <li>top($t$): Report the value which should be deleted next from $S_t$. If $S_t$ is empty, do nothing.</li>\n  <li>pop($t$): Delete an element from $S_t$. If $S_t$ is empty, do nothing.</li>\n</ul>\n\n<p>\nIn the initial state, all stacks are empty.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n \\; q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $t$ $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $t$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $t$\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span> and <span>2</span> represent push, top and pop operations respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each top operation, print an integer in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 1,000$</li>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$-1,000,000,000 \\leq x \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n3 9\n0 0 1\n0 0 2\n0 0 3\n0 2 4\n0 2 5\n1 0\n1 2\n2 0\n1 0\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n3\n5\n2\n</pre>\n", "p02441": "<h1>Count</h1>\n \n<p>\n  For a given sequence of integers $A = \\{a_0, a_1, ..., a_{n-1}\\}$, perform the following operations.\n</p>\n<ul>\n<li>count($b, e, k$): print the number of the specific values $k$ in $a_b, a_{b+1}, ..., a_{e-1}$.\n  </ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1, ..., \\; a_{n-1}$\n$q$\n$b_1 \\; e_1 \\; k_1$\n$b_2 \\; e_2 \\; k_2$\n:\n$b_q \\; e_q \\; k_q$\n</pre>\n\n<p>\nThe number of elements $n$ and each element $a_i$ are given in the first line and the second line respectively. In the third line, the number of queries $q$ is given and the following $q$ lines, $q$ integers $b_i \\; b_e \\; k_i$ are given as queries.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each query, print the number of specified values.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 1,000$</li>\n  <li>$-1,000,000,000 \\leq a_i, k_i \\leq 1,000,000,000$</li>\n  <li>$1 \\leq q \\leq 1,000$</li>\n  <li>$0 \\leq b  < e \\leq n$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n9\n1 4 1 4 2 1 3 5 6\n3\n0 9 1\n1 6 1\n3 7 5\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n3\n2\n0\n</pre>\n\n", "p02439": "<h1>Min-Max</h1>\n \n<p>\nFor given three integers $a, b, c$,  print the minimum value and the maximum value.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$a \\; b \\; c\\;$\n</pre>\n\n<p>\n  Three integers $a, b, c$ are given in a line.\n</p>\n\n<h2>Output</h2>\n<p>\n  Print the minimum and maximum values separated by a space in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$-1,000,000,000 \\leq a, b, c \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4 5 3\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n3 5\n</pre>\n\n", "p02440": "<h1>Min-Max Element</h1>\n \n<p>\n  Write a program which manipulates a sequence $A = \\{a_0, a_1, ..., a_{n-1}\\}$ by the following operations:\n</p>\n\n<ul>\n  <li>min($b, e$): report the minimum element in $a_b, a_{b+1}, ..., a_{e-1}$</li>\n  <li>max($b, e$): report the maximum element in $a_b, a_{b+1}, ..., a_{e-1}$</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1, ..., \\; a_{n-1}$\n$q$\n$com_1 \\; b_1 \\; e_1$\n$com_2 \\; b_2 \\; e_2$\n:\n$com_{q} \\; b_{q} \\; e_{q}$\n</pre>\n\n<p>\nIn the first line, $n$ (the number of elements in $A$) is given. In the second line, $a_i$ (each element in $A$) are given. In the third line, the number of queries $q$ is given and each query is given in the following $q$ lines. $com_i$ denotes a type of query. <span>0</span> and <span>1</span> represents min($b, e$) and max($b, e$) respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each query, print the minimum element or the maximum element in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 1,000$</li>\n  <li>$-1,000,000,000 \\leq a_i \\leq 1,000,000,000$</li>\n  <li>$1 \\leq q \\leq 1,000$</li>\n  <li>$0 \\leq b < e \\leq n$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n7\n8 3 7 1 9 1 4\n3\n0 0 3\n0 1 5\n1 0 7\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n3\n1\n9\n</pre>\n\n", "p02442": "<h1>Lexicographical Comparison</h1>\n \n<p>\n  Compare given two sequence $A = \\{a_0, a_1, ..., a_{n-1}\\}$ and $B = \\{b_0, b_1, ..., b_{m-1}$ lexicographically.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1, ..., \\; a_{n-1}$\n$m$\n$b_0 \\; b_1, ..., \\; b_{m-1}$\n</pre>\n\n<p>\n  The number of elements in $A$ and its elements $a_i$ are given in the first and second lines respectively.\n  The number of elements in $B$ and its elements $b_i$ are given in the third and fourth lines respectively. All input are given in integers.\n</p>\n\n<h2>Output</h2>\n<p>\n  Print <span>1</span> $B$ is greater than $A$, otherwise <span>0</span>.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n, m \\leq 1,000$</li>\n  <li>$0 \\leq a_i, b_i \\leq 1,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n3\n1 2 3\n2\n2 4\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>\n4\n5 4 7 0\n5\n1 2 3 4 5\n</pre>\n\n<h2>Sample Output 2</h2>\n\n<pre>\n0\n</pre>\n\n<h2>Sample Input 3</h2>\n\n<pre>\n3\n1 1 2\n4\n1 1 2 2\n</pre>\n\n<h2>Sample Output 3</h2>\n\n<pre>\n1\n</pre>\n\n", "p02444": "<h1>Rotate</h1>\n\n<p>\n  Write a program which reads a sequence of integers $A = \\{a_0, a_1, ..., a_{n-1}\\}$ and rotate specified elements by a list of the following operation: \n</p>\n\n<ul>\n  <li>rotate($b, m, e$): For each integer $k$ ($0 \\leq k < (e - b)$), move element $b + k$ to the place of element $b + ((k + (e - m)) \\mod (e - b))$.</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ...,\\; a_{n-1}$\n$q$\n$b_1 \\; m_1 \\; e_1$\n$b_2 \\; m_2 \\; e_2$\n:\n$b_{q} \\; m_{q} \\; e_{q}$\n</pre>\n\n<p>\nIn the first line, $n$ (the number of elements in $A$) is given. In the second line, $a_i$ (each element in $A$) are given. In the third line, the number of queries $q$ is given and each query is given by three integers $b_i \\; m_i \\; e_i$ in the following $q$ lines.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  Print all elements of $A$ in a line after performing the given operations. Put a single space character between adjacency elements and a newline at the end of the last element.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 1,000$</li>\n  <li>$-1,000,000,000 \\leq a_i \\leq 1,000,000,000$</li>\n  <li>$1 \\leq q \\leq 1,000$</li>\n  <li>$0 \\leq b_i \\leq m_i < e_i \\leq n$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n11\n1 2 3 4 5 6 7 8 9 10 11\n1\n2 6 9\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1 2 7 8 9 3 4 5 6 10 11\n</pre>\n", "p02445": "<h1>Swap</h1>\n \n<p>\nWrite a program which reads a sequence of integers $A = \\{a_0, a_1, ..., a_{n-1}\\}$ and swap specified elements by a list of the following operation:\n</p>\n\n<ul>\n  <li>swapRange($b, e, t$): For each integer $k$ ($0 \\leq k < (e - b)$, swap element $(b + k)$ and element $(t + k)$.</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ...,\\; a_{n-1}$\n$q$\n$b_1 \\; e_1 \\; t_1$\n$b_2 \\; e_2 \\; t_2$\n:\n$b_{q} \\; e_{q} \\; t_{q}$\n</pre>\n\n<p>\n  In the first line, $n$ (the number of elements in $A$) is given. In the second line, $a_i$ (each element in $A$) are given. In the third line, the number of queries $q$ is given and each query is given by three integers $b_i \\; e_i \\; t_i$ in the following $q$ lines.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n    Print all elements of $A$ in a line after performing the given operations. Put a single space character between adjacency elements and a newline at the end of the last element.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 1,000$</li>\n  <li>$-1,000,000,000 \\leq a_i \\leq 1,000,000,000$</li>\n  <li>$1 \\leq q \\leq 1,000$</li>\n  <li>$0 \\leq b_i < e_i \\leq n$</li>\n  <li>$0 \\leq t_i < t_i + (e_i - b_i) \\leq n$</li>\n  <li>Given swap ranges do not overlap each other</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n11\n1 2 3 4 5 6 7 8 9 10 11\n1\n1 4 7\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1 8 9 10 5 6 7 2 3 4 11\n</pre>\n", "p02446": "<h1>Unique</h1>\n \n<p>\n  For a sequence of integers $A = \\{a_0, a_1, ..., a_{n-1}\\}$ which is sorted by ascending order, eliminate all equivalent elements.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  A sequence is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ,..., \\; a_{n-1}$\n</pre>\n\n<h2>Output</h2>\n\n<p>\n  Print the sequence after eliminating equivalent elements in a line. Separate adjacency elements by a space character.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 100,000$</li>\n  <li>$-1000,000,000 \\leq a_i \\leq 1,000,000,000$</li>\n  <li>$a_0 \\leq a_1 \\leq ... \\leq a_{n-1}$\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n1 2 2 4\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1 2 4\n</pre>\n", "p02443": "<h1>Reverse</h1>\n \n<p>\n  Write a program which reads a sequence of integers $A = \\{a_0, a_1, ..., a_{n-1}\\}$ and reverse specified elements by a list of the following operation:\n</p>\n\n<ul>\n  <li>reverse($b, e$): reverse the order of $a_b, a_{b+1}, ..., a_{e-1}$</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ...,\\; a_{n-1}$\n$q$\n$b_1 \\; e_1$\n$b_2 \\; e_2$\n:\n$b_{q} \\; b_{q}$\n</pre>\n\n<p>\n  In the first line, $n$ (the number of elements in $A$) is given. In the second line, $a_i$ (each element in $A$) are given. In the third line, the number of queries $q$ is given and each query is given by two integers $b_i \\; e_i$ in the following $q$ lines. \n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  Print all elements of $A$ in a line after performing the given operations. Put a single space character between adjacency elements and a newline at the end of the last element.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 1,000$</li>\n  <li>$-1,000,000,000 \\leq a_i \\leq 1,000,000,000$</li>\n  <li>$1 \\leq q \\leq 1,000$</li>\n  <li>$0 \\leq b < e \\leq n$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n8\n1 2 3 4 5 6 7 8\n2\n1 6\n3 8\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1 6 5 8 7 2 3 4\n</pre>\n", "p02447": "<h1>Sorting Pairs</h1>\n \n<p>\n  Write a program which print coordinates $(x_i, y_i)$ of given $n$ points on the plane by the following criteria.\n</p>\n\n<ol>\n<li>first by $x$-coordinate</li>\n<li>in case of a tie, by $y$-coordinate</li>\n</ol>\n\n<h2>Input</h2>\n \n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$x_0 \\; y_0$\n$x_1 \\; y_1$\n:\n$x_{n-1} \\; y_{n-1}$\n</pre>\n\n<p>\n  In the first line, the number of points $n$ is given. In the following $n$ lines, coordinates of each point are given.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print coordinate of given points in order.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li>$1 \\leq n \\leq 100,000$</li>\n<li>$-1,000,000,000 \\leq x_i, y_i \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n5\n4 7\n5 5\n2 3\n6 8\n2 1\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n2 1\n2 3\n4 7\n5 5\n6 8\n</pre>\n", "p02448": "<h1>Sorting Tuples</h1>\n \n<p>\n  Write a program which reads $n$ items and sorts them. Each item has attributes $\\{value, weight, type, date, name\\}$ and they are represented by $\\{$ integer, integer, upper-case letter, integer, string $\\}$ respectively. Sort the items based on the following priorities.\n</p>\n\n<ol>\n  <li>first by value (ascending)</li>\n  <li>in case of a tie, by weight (ascending)</li>\n  <li>in case of a tie, by type (ascending in lexicographic order)</li>\n  <li>in case of a tie, by date (ascending)</li>\n  <li>in case of a tie, by name (ascending in lexicographic order)</li>\n</ol>\n\n<h2>Input</h2>\n \n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$v_0 \\; w_0 \\; t_0 \\; d_0 \\; s_0$\n$v_1 \\; w_1 \\; t_1 \\; d_1 \\; s_1$\n:\n$v_{n-1} \\; w_{n-1} \\; t_{n-1} \\; d_{n-1} \\; s_{n-1}$\n</pre>\n\n<p>\n  In the first line, the number of items $n$. In the following $n$ lines, attributes of each item are given. $v_i \\; w_i \\; t_i \\; d_i \\; s_i$ represent value, weight, type, date and name of the $i$-th item respectively.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print attributes of each item in order. Print an item in a line and adjacency attributes should be separated by a single space.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li>$1 \\leq n \\leq 100,000$</li>\n<li>$0 \\leq v_i \\leq 1,000,000,000$</li>\n<li>$0 \\leq w_i \\leq 1,000,000,000$</li>\n<li>$t_i$ is a upper-case letter</li>\n<li>$0 \\leq d_i \\leq 2,000,000,000,000$</li>\n<li>$1 \\leq $ size of $s_i \\leq 20$</li>\n<li>$s_i \\ne s_j$ if $(i \\ne j)$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n5\n105 24 C 1500000000000 white\n100 23 C 1500000000000 blue\n105 23 A 1480000000000 pink\n110 25 B 1500000000000 black\n110 20 A 1300000000000 gree\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n100 23 C 1500000000000 blue\n105 23 A 1480000000000 pink\n105 24 C 1500000000000 white\n110 20 A 1300000000000 gree\n110 25 B 1500000000000 black\n</pre>\n", "p02451": "<h1>Binary Search</h1>\n \n<p>\n  For a given sequence $A = \\{a_0, a_1, ..., a_{n-1}\\}$ which is sorted by ascending order, find a specific value $k$ given as a query.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ,..., \\; a_{n-1}$\n$q$\n$k_1$\n$k_2$\n:\n$k_q$\n</pre>\n\n<p>\nThe number of elements $n$ and each element $a_i$ are given in the first line and the second line respectively. In the third line, the number of queries $q$ is given and the following $q$ lines, $q$ integers $k_i$ are given as queries.\n\n<h2>Output</h2>\n\n<p>\n  For each query, print <span>1</span> if any element in $A$ is equivalent to $k$, and <span>0</span> otherwise.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 100,000$</li>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq a_0 \\leq a_1 \\leq ... \\leq a_{n-1} \\leq 1,000,000,000$\n  <li>$0 \\leq k_i \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n1 2 2 4\n3\n2\n3\n5\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n0\n0\n</pre>\n", "p02452": "<h1>Includes</h1>\n \n<p>\n  For given two sequneces $A = \\{a_0, a_1, ..., a_{n-1}\\}$ and $B = \\{b_0, b_1, ..., b_{m-1}\\}$, determine whether all elements of $B$ are included in $A$. Note that, elements of $A$ and $B$ are sorted by ascending order respectively.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ,..., \\; a_{n-1}$\n$m$\n$b_0 \\; b_1 \\; ,..., \\; b_{m-1}$\n</pre>\n\n<p>\n  The number of elements in $A$ and its elements $a_i$ are given in the first and second\n lines respectively.\n  The number of elements in $B$ and its elements $b_i$ are given in the third and fourth\n lines respectively.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  Print <span>1</span>, if $A$ contains all elements of $B$, otherwise <span>0</span>.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n, m \\leq 200,000$</li>\n  <li>$-1,000,000,000 \\leq a_0 < a_1 < ... < a_{n-1} \\leq 1,000,000,000$</li>\n  <li>$-1,000,000,000 \\leq b_0 < b_1 < ... < b_{m-1} \\leq 1,000,000,000$</li>\n\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n1 2 3 4\n2\n2 4\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n</pre>\n\n\n<h2>Sample Input 2</h2>\n\n<pre>\n4\n1 2 3 4\n3\n1 2 5\n</pre>\n\n<h2>Sample Output 2</h2>\n\n<pre>\n0\n</pre>\n", "p02449": "<h1>Permutation</h1>\n \n<p>\n  For given a sequence $A = \\{a_0, a_1, ..., a_{n-1}\\}$, print the previous permutation and the next permutation in lexicographic order.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  A sequence is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ... \\; a_{n-1}$\n</pre>\n\n<h2>Output</h2>\n\n<p>\n  Print the previous permutation, the given sequence and the next permutation in the 1st, 2nd and 3rd lines respectively.\n  Separate adjacency elements by a space character. Note that if there is no permutation, print nothing in the corresponding line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 9$</li>\n  <li>$a_i$ consist of $1, 2, ..., n$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n3\n2 1 3\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1 3 2\n2 1 3\n2 3 1\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>\n3\n3 2 1\n</pre>\n\n<h2>Sample Output 2</h2>\n\n<pre>\n3 1 2\n3 2 1\n</pre>\n\n\n", "p02453": "<h1>Lower Bound</h1>\n \n<p>\n  For a given sequence $A = \\{a_0, a_1, ..., a_{n-1}\\}$ which is sorted by ascending order, find the lower bound for a specific value $k$ given as a query.\n</p>\n\n<ul>\n  <li>\n    lower bound: the place pointing to the first element greater than or equal to a specific value, or $n$ if there is no such element.\n  </li>\n  \n</ul>\n\n\n<h2>Input</h2>\n\n<p>\nThe input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ,..., \\; a_{n-1}$\n$q$\n$k_1$\n$k_2$\n:\n$k_q$\n</pre>\n\n<p>\nThe number of elements $n$ and each element $a_i$ are given in the first line and the second line respectively. In the third line, the number of queries $q$ is given and the following $q$ lines, $q$ integers $k_i$ are given as queries.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n  For each query, print the position $i$ ($i = 0, 1, ..., n$) of the lower bound in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 100,000$</li>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq a_0 \\leq a_1 \\leq ... \\leq a_{n-1} \\leq 1,000,000,000$\n  <li>$0 \\leq  k_i \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n1 2 2 4\n3\n2\n3\n5\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n3\n4\n</pre>\n", "p02454": "<h1>Equal Range</h1>\n \n<p>\nFor a given sequence $A = \\{a_0, a_1, ..., a_{n-1}\\}$ which is sorted by ascending order, print a pair of the lower bound and the upper bound for a specific value $k$ given as a query.\n</p>\n\n<ul>\n<li>\n  lower bound: the place pointing to the first element greater than or equal to a specific value, or $n$ if there is no such element.\n</li>\n<li>\n  upper bound: the place pointing to the first element greater than a specific value, or $n$ if there is no such element.\n  </li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ,..., \\; a_{n-1}$\n$q$\n$k_1$\n$k_2$\n:\n$k_q$\n</pre>\n\n<p>\nThe number of elements $n$ and each element $a_i$ are given in the first line and the second line respectively. In the third line, the number of queries $q$ is given and the following $q$ lines, $q$ integers $k_i$ are given as queries.\n</p>\n\n\n<h2>Output</h2>\n\n<p>\n\n  For each query, print the pari of the lower bound $l$ ($l = 0, 1, ..., n$) and upper bound $r$ ($r = 0, 1, ..., n$) separated by a space character in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 100,000$</li>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq a_0 \\leq a_1 \\leq ... \\leq a_{n-1} \\leq 1,000,000,000$\n  <li>$0 \\leq k_i \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n1 2 2 4\n3\n2\n3\n5\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1 3\n3 3\n4 4\n</pre>\n", "p02450": "<h1>Permutation Enumeration</h1>\n \n<p>\n    For given an integer $n$, print all permutations of $\\{1, 2, ..., n\\}$ in lexicographic order.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  An integer $n$ is given in a line.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print each permutation in a line in order. Separate adjacency elements by a space character. \n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n \\leq 9$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n2\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1 2\n2 1\n</pre>\n\n<h2>Sample Input 2</h2>\n\n<pre>\n3\n</pre>\n\n<h2>Sample Output 2</h2>\n\n<pre>\n1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1\n</pre>\n\n\n", "p02455": "<h1>Set: Search</h1>\n\n\n<p>\n  For a set $S$ of integers, perform a sequence of the following operations. Note that <u>each value in $S$ must be unique</u>.\n</p>\n\n<ul>\n  <li>insert($x$): Insert $x$ to $S$ and report the number of elements in $S$ after the operation.</li>\n  <li>find($x$): Report the number of $x$ in $S$ (0 or 1).</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $x$\n</pre>\n\n<p>\nwhere the first digits <span>0</span> and <span>1</span> represent insert and find operations respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each insert operation, print the number of elements in $S$.<br>\n  For each find operation, print the number of specified elements in $S$.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq x \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n7\n0 1\n0 2\n0 3\n0 2\n0 4\n1 3\n1 10\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n2\n3\n3\n4\n1\n0\n</pre>\n", "p02456": "<h1>Set: Delete</h1>\n\n\n<p>\n  For a set $S$ of integers, perform a sequence of the following operations. Note that <u>each value in $S$ must be unique</u>.\n</p>\n\n<ul>\n  <li>insert($x$): Insert $x$ to $S$ and report the number of elements in $S$ after the operation.</li>\n  <li>find($x$): Report the number of $x$ in $S$ (0 or 1).</li>\n  <li>delete($x$): Delete $x$ from $S$.</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $x$\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span> and <span>2</span> represent insert, find and delete operations respectively.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  For each insert operation, print the number of elements in $S$.<br>\n  For each find operation, print the number of specified elements in $S$.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq x \\leq 1,000,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n8\n0 1\n0 2\n0 3\n2 2\n1 1\n1 2\n1 3\n0 2\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n2\n3\n1\n0\n1\n3\n</pre>\n", "p02458": "<h1>Multi-Set</h1>\n\n\n<p>\n  For a set $S$ of integers, perform a sequence of the following operations. Note that <u>multiple elements can have equivalent values in $S$</u>.\n</p>\n\n<ul>\n  <li>insert($x$): Insert $x$ to $S$ and report the number of elements in $S$ after the operation.</li>\n  <li>find($x$): Report the number of $x$ in $S$.</li>\n  <li>delete($x$): Delete all $x$ from $S$.</li>\n  <li>dump($L$, $R$): Print elements $x$ in $S$ such that $L \\leq x \\leq R$.</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n3 $L$ $R$\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span>, <span>2</span> and <span>3</span> represent insert, find, delete and dump operations respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each insert operation, print the number of elements in $S$.<br>\n  For each find operation, print the number of specified elements in $S$.<br>\n  For each dump operation, print the corresponding elements in ascending order. Print an element in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq x \\leq 1,000,000,000$</li>\n  <li>The total number of elements printed by dump operations does not exceed $1,000,000$</li>\n  <li>The sum of numbers printed by find operations does not exceed $2,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n10\n0 1\n0 1\n0 2\n0 3\n2 2\n1 1\n1 2\n1 3\n0 4\n3 1 4\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n2\n3\n4\n2\n0\n1\n4\n1\n1\n3\n4\n</pre>\n", "p02457": "<h1>Set: Range Search</h1>\n\n<p>\n  For a set $S$ of integers, perform a sequence of the following operations. Note that <u>each value in $S$ must be unique</u>.\n</p>\n\n<ul>\n  <li>insert($x$): Insert $x$ to $S$ and report the number of elements in $S$ after the operation.</li>\n  <li>find($x$): Report the number of $x$ in $S$ (0 or 1).</li>\n  <li>delete($x$): Delete $x$ from $S$.</li>\n  <li>dump($L$, $R$): Print elements $x$ in $S$ such that $L \\leq x \\leq R$.</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n3 $L$ $R$\n</pre>\n\n<p>\nwhere the first digits <span>0</span>, <span>1</span>, <span>2</span> and <span>3</span> represent insert, find, delete and dump operations respectively.\n</p>\n\n<h2>Output</h2>\n<p>\nFor each insert operation, print the number of elements in $S$.<br>\nFor each find operation, print the number of specified elements in $S$.<br>\nFor each dump operation, print the corresponding elements in ascending order. Print an element in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$0 \\leq x \\leq 1,000,000,000$</li>\n<li>The total number of elements printed by dump operations does not exceed $1,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n9\n0 1\n0 2\n0 3\n2 2\n1 1\n1 2\n1 3\n0 4\n3 2 4\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n2\n3\n1\n0\n1\n3\n3\n4\n</pre>\n", "p02460": "<h1>Map: Delete</h1>\n\n\n<p>\n    For a dictionary $M$ that stores elements formed by a pair of a string key and an integer value, perform a sequence of the following operations. Note that <u>each key in $M$ must be unique</u>.\n</p>\n\n<ul>\n  <li>insert($key$, $x$): Insert an element formed by a pair of $key$ and $x$ to $M$.</li>\n  <li>get($key$): Print the value with the specified $key$. <u>Print 0 if there is no such element</u>.</li>\n  <li>delete($key$): Delete the element with the specified $key$.</li>\n</ul>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $key$ $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $key$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $key$\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span> and <span>2</span> represent insert, get and delete operations respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each get operation, print an integer in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$1 \\leq x \\leq 1,000,000,000$</li>\n  <li>$1 \\leq $ length of $key$ $ \\leq 20$ </li>\n  <li>$key$ consits of lower case letters</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n8\n0 blue 4\n0 red 1\n0 white 5\n1 red\n1 blue\n2 red\n1 black\n1 red\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n4\n0\n0\n</pre>\n", "p02462": "<h1>Multi-Map</h1>\n\n\n<p>\nFor a dictionary $M$ that stores elements formed by a pair of a string key and an integer value, perform a sequence of the following operations. Note that <u>multiple elements can have equivalent keys</u>.\n</p>\n\n<ul>\n  <li>insert($key$, $x$): Insert an element formed by a pair of $key$ and $x$ to $M$.</li>\n  <li>get($key$): Print all values with the specified $key$.</li>\n  <li>delete($key$): Delete all elements with the specified $key$.</li>\n  <li>dump($L$, $R$): Print all elements formed by a pair of the key and the value such that the key is greater than or equal to $L$ and less than or equal to $R$ in lexicographic order.</li>\n</ul>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $key$ $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $key$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $key$\n</pre>\n\n<p>or</p>\n\n<pre>\n3 $L$ $R$\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span>, <span>2</span> and <span>3</span> represent insert, get, delete and dump operations.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each get operation, print the corresponding values in the order of insertions.<br>\n  For each dump operation, print the corresponding elements formed by a pair of the key and the value. For the dump operation, print the elements in ascending order of the keys, in case of a tie, in the order of insertions.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$1 \\leq x \\leq 1,000,000,000$</li>\n  <li>$1 \\leq $ length of $key$ $ \\leq 20$ </li>\n  <li>$key$ consists of lower-case letters</li>\n  <li>$L \\leq R$ in lexicographic order</li>\n  <li>The total number of elements printed by get operations does not exceed $500,000$</li>\n  <li>The total number of elements printed by dump operations does not exceed $500,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n10\n0 blue 6\n0 red 1\n0 blue 4\n0 white 5\n1 red\n1 blue\n2 red\n1 black\n1 red\n3 w z\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n6\n4\nwhite 5\n</pre>\n", "p02461": "<h1>Map: Range Search</h1>\n\n<p>\n  For a dictionary $M$ that stores elements formed by a pair of a string key and an integer value, perform a sequence of the following operations. Note that <u>each key in $M$ must be unique</u>.\n</p>\n\n<ul>\n  <li>insert($key$, $x$): Insert an element formed by a pair of $key$ and $x$ to $M$.</li>\n  <li>get($key$): Print the value with the specified $key$. <u>Print 0 if there is no such element</u>. </li>\n  <li>delete($key$): Delete the element with the specified $key$.</li>\n  <li>dump($L$, $R$): Print all elements formed by a pair of the key and the value such that the key is greater than or equal to $L$ and less than or equal to $R$ in lexicographic order.</li>\n</ul>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $key$ $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $key$\n</pre>\n\n<p>or</p>\n\n<pre>\n2 $key$\n</pre>\n\n<p>or</p>\n\n<pre>\n3 $L$ $R$\n</pre>\n\n<p>\n where the first digits <span>0</span>, <span>1</span>, <span>2</span> and <span>3</span> represent insert, get, delete and dump operations.\n</p>\n\n<h2>Output</h2>\n\n<p>\nFor each get operation, print the corresponding value.<br>\nFor each dump operation, print the corresponding elements formed by a pair of the key and the value. For the dump operation, print the elements (a pair of key and value separated by a space character) in ascending order of the keys.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$1 \\leq x \\leq 1,000,000,000$</li>\n  <li>$1 \\leq $ length of $key$ $ \\leq 20$ </li>\n  <li>$key$ consists of lower-case letters</li>\n  <li>$L \\leq R$ in lexicographic order</li>\n  <li>The total number of elements printed by dump operations does not exceed $1,000,000$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n9\n0 blue 4\n0 red 1\n0 white 5\n1 red\n1 blue\n2 red\n1 black\n1 red\n3 w z\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n4\n0\n0\nwhite 5\n</pre>\n", "p02463": "<h1>Set Union</h1>\n\n\n<p>\n  Find the union of two sets $A = \\{a_0, a_1, ..., a_{n-1}\\}$ and $B = \\{b_0, b_1, ..., b_{m-1}\\}$.\n</p>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ... \\; a_{n-1}$\n$m$\n$b_0 \\; b_1 \\; ... \\; b_{m-1}$\n</pre>\n\n<p>\n  Elements of $A$ and $B$ are given in ascending order respectively. There are no duplicate elements in each set.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print elements in the union in ascending order. Print an element in a line.\n </p>\n\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n, m \\leq 200,000$</li>\n  <li>$0 \\leq a_0 < a_1 < ... < a_{n-1} \\leq 10^9$</li>\n  <li>$0 \\leq b_0 < b_1 < ... < b_{m-1} \\leq 10^9$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n3\n1 5 8\n2\n5 9\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n5\n8\n9\n</pre>\n", "p02465": "<h1>Set Difference</h1>\n\n<p>\n  Find the difference of two sets $A = \\{a_0, a_1, ..., a_{n-1}\\}$ and $B = \\{b_0, b_1, ..., b_{m-1}\\}$,  $A - B$.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ... \\; a_{n-1}$\n$m$\n$b_0 \\; b_1 \\; ... \\; b_{m-1}$\n</pre>\n\n<p>\n  Elements in $A$ and $B$ are given in ascending order. There are no duplicate elements in each set.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print elements in the difference in ascending order. Print an element in a line.\n </p>\n\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n, m \\leq 200,000$</li>\n    <li>$0 \\leq a_0 < a_1 < ... < a_{n-1} \\leq 10^9$</li>\n  <li>$0 \\leq b_0 < b_1 < ... < b_{m-1} \\leq 10^9$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n5\n1 2 3 5 8\n2\n2 5\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n3\n8\n</pre>\n", "p02459": "<h1>Map: Search</h1>\n\n<p>\nFor a dictionary $M$ that stores elements formed by a pair of a string key and an integer value, perform a sequence of the following operations. Note that <u>each key in $M$ must be unique</u>.\n</p>\n\n<ul>\n  <li>insert($key$, $x$): Insert an element formed by a pair of $key$ and $x$ to $M$. If there is an element with $key$, replace the corresponding value with $x$.</li>\n  <li>get($key$): Print the value with the specified $key$.</li>\n</ul>\n\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$q$\n$query_1$\n$query_2$\n:\n$query_q$\n</pre>\n\n<p>\nEach query $query_i$ is given by\n</p>\n\n<pre>\n0 $key$ $x$\n</pre>\n\n<p>or</p>\n\n<pre>\n1 $key$\n</pre>\n\n<p>\n  where the first digits <span>0</span>, <span>1</span> and <span>2</span> represent insert and get operations respectively.\n</p>\n\n<h2>Output</h2>\n<p>\n  For each get operation, print an integer in a line.\n</p>\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq q \\leq 200,000$</li>\n  <li>$1 \\leq x \\leq 1,000,000,000$</li>\n  <li>$1 \\leq $ length of $key$ $ \\leq 20$ </li>\n  <li>$key$ consits of lower-case letter</li>\n  <li>For a get operation, the element with the specified key exists in $M$.</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n7\n0 blue 4\n0 red 1\n0 white 5\n1 red\n1 blue\n0 black 8\n1 black\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n4\n8\n</pre>\n", "p02464": "<h1>Set Intersection</h1>\n\n<p>\n  Find the intersection of two sets $A = \\{a_0, a_1, ..., a_{n-1}\\}$ and $B = \\{b_0, b_1, ..., b_{m-1}\\}$.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ... \\; a_{n-1}$\n$m$\n$b_0 \\; b_1 \\; ... \\; b_{m-1}$\n</pre>\n\n<p>\n  Elements of $A$ and $B$ are given in ascending order respectively. There are no duplicate elements in each set.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print elements in the intersection in ascending order. Print an element in a line.\n </p>\n\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n, m \\leq 200,000$</li>\n    <li>$0 \\leq a_0 < a_1 < ... < a_{n-1} \\leq 10^9$</li>\n  <li>$0 \\leq b_0 < b_1 < ... < b_{m-1} \\leq 10^9$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n4\n1 2 5 8\n5\n2 3 5 9 11\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n2\n5\n</pre>\n", "p02466": "<h1>Set Symmetric Difference</h1>\n\n<p>\n  Find the symmetric difference of two sets $A = \\{a_0, a_1, ..., a_{n-1}\\}$ and $B = \\{b_0, b_1, ..., b_{m-1}\\}$.\n</p>\n\n<h2>Input</h2>\n\n<p>\n  The input is given in the following format.\n</p>\n\n<pre>\n$n$\n$a_0 \\; a_1 \\; ... \\; a_{n-1}$\n$m$\n$b_0 \\; b_1 \\; ... \\; b_{m-1}$\n</pre>\n\n<p>\n  Elements in $A$ and $B$ are given in ascending order. There are no duplicate elements in each set.\n</p>\n\n<h2>Output</h2>\n\n<p>\n  Print elements in the symmetric difference in ascending order. Print an element in a line.\n </p>\n\n\n<h2>Constraints</h2>\n<ul>\n  <li>$1 \\leq n, m \\leq 200,000$</li>\n  <li>$0 \\leq a_0 < a_1 < ... < a_{n-1} \\leq 10^9$</li>\n  <li>$0 \\leq b_0 < b_1 < ... < b_{m-1} \\leq 10^9$</li>\n</ul>\n\n<h2>Sample Input 1</h2>\n\n<pre>\n7\n1 2 3 4 5 6 7\n4\n2 4 6 8\n</pre>\n\n<h2>Sample Output 1</h2>\n\n<pre>\n1\n3\n5\n7\n8\n</pre>\n", "p02469": "\n<H1>Least Common Multiple</H1>\n<br/>\n\n<p>\nFind the least common multiple (LCM) of given <var>n</var> integers.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n<var>a<sub>1</sub></var> <var>a<sub>2</sub></var> ... <var>a</var><sub><var>n</var></sub>\n</pre>\n\n<p>\n<var>n</var> is given in the first line. Then, <var>n</var> integers are given in the second line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the least common multiple of the given integers in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n2 &le; <var>n</var> &le; 10\n</li>\n<li>\n1 &le; <var>a<sub>i</sub></var> &le; 1000\n</li>\n<li>\nProduct of given integers <var>a<sub>i</sub></var>(<var>i = 1, 2, ... n</var>) does not exceed 2<sup>31</sup>-1\n</li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n3\n3 4 6\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n12\n</pre>\n\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n4\n1 2 3 5\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n30\n</pre>\n", "p02467": "\n<H1>Prime Factorization</H1>\n<br/>\n\n<p>\nFactorize a given integer <var>n</var>.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n</pre>\n\n<p>\nAn integer <var>n</var> is given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint the given integer <var>n</var> and <span>:</span>. Then, print prime factors in ascending order. If <var>n</var> is divisible by a prime factor several times, the prime factor should be printed according to the number of times. Print a space before each prime factor.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>\n2 &le; <var>n</var> &le; 10<sup>9</sup>\n</li>\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n12\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n12: 2 2 3\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n126\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n126: 2 3 3 7\n</pre>\n", "p02470": "\n<H1>Euler's Phi Function</H1>\n<br/>\n\n<p>\nFor given integer <var>n</var>, count the totatives of <var>n</var>, that is, the positive integers less than or equal to <var>n</var> that are relatively prime to <var>n</var>.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>n</var>\n</pre>\n\n<p>\nAn integer <var>n</var> (1 &le; <var>n</var> &le; 1000000000).\n</p>\n\n<H2>Output</H2>\n\n<p>\nThe number of totatives in a line.\n</p>\n\n<H2>Sample Input 1</H2>\n<pre>\n6\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n2\n</pre>\n<br/>\n\n\n<H2>Sample Input 2</H2>\n<pre>\n1000000\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n400000\n</pre>\n<br/>", "p02468": "\n<H1>Power</H1>\n<br/>\n\n<p>\nFor given integers <var>m</var> and <var>n</var>, compute <var>m<sup>n</sup></var> (mod 1,000,000,007). Here, <var>A</var> (mod <var>M</var>) is the remainder when <var>A</var> is divided by <var>M</var>.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>m</var> <var>n</var>\n</pre>\n\n<p>\nTwo integers <var>m</var> and <var>n</var> are given in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint <var>m<sup>n</sup></var> (mod 1,000,000,007) in a line.\n</p>\n\n<H2>Constraints</H2>\n\n<ul>\n<li>1 &le; <var>m</var> &le; 100</li>\n<li>1 &le; <var>n</var> &le; 10<sup>9</sup></li>\n</ul>\n\n<H2>Sample Input 1</H2>\n<pre>\n2 3\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n8\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n5 8\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n390625\n</pre>\n", "p02472": "<h2>Addition of Big Integers</h2>\n\n<p>\n  Given two integers $A$ and $B$, compute the sum, $A + B$.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  Two integers $A$ and $B$ separated by a space character are given in a line.\n</p>\n\n<h3>Output</h3>\n\n<p>\nPrint the sum in a line.\n</p>\n\n<h3>Constraints</h3>\n\n<ul>\n  <li>$-1 \\times 10^{100000} \\leq A, B \\leq 10^{100000}$</li>\n</ul>\n\n<h3>Sample Input 1</h3>\n<pre>\n5 8\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n13\n</pre>\n\n\n<h3>Sample Input 2</h3>\n<pre>\n100 25\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n125\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n-1 1\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n0\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n12 -3\n</pre>\n\n<h3>Sample Output 4</h3>\n<pre>\n9\n</pre>\n", "p02474": "<h2>Multiplication of Big Integers</h2>\n\n<p>\n  Given two integers $A$ and $B$, compute the product, $A \\times B$.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  Two integers $A$ and $B$ separated by a space character are given in a line.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  Print the product in a line.\n</p>\n\n<h3>Constraints</h3>\n\n<ul>\n  <li>$-1 \\times 10^{1000} \\leq A, B \\leq 10^{1000}$</li>\n</ul>\n\n<h3>Sample Input 1</h3>\n<pre>\n5 8\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n40\n</pre>\n\n\n<h3>Sample Input 2</h3>\n<pre>\n100 25\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n2500\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n-1 0\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n0\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n12 -3\n</pre>\n\n<h3>Sample Output 4</h3>\n<pre>\n-36\n</pre>\n", "p02471": "\n<H1>Extended Euclid Algorithm</H2>\n<br/>\n\n<p>\nGiven positive integers <var>a</var> and <var>b</var>, find the integer solution (<var>x</var>, <var>y</var>) to <var>ax + by = gcd(a, b)</var>, where <var>gcd(a, b)</var> is the greatest common divisor of <var>a</var> and <var>b</var>.\n</p>\n\n<H2>Input</H2>\n\n<pre>\n<var>a</var> <var>b</var>\n</pre>\n\n<p>\nTwo positive integers <var>a</var> and <var>b</var> are given separated by a space in a line.\n</p>\n\n<H2>Output</H2>\n\n<p>\nPrint two integers <var>x</var> and <var>y</var> separated by a space. If there are several pairs of such <var>x</var> and <var>y</var>, print that pair for which <var>|x| + |y|</var> is the minimal (primarily) and <var>x</var> &le; <var>y</var> (secondarily).\n</p>\n\n<h2>Constraints</h2>\n<ul>\n<li> 1 &le; <var>a</var>, <var>b</var> &le; 10<sup>9</sup></li>\t\n</ul>\n\n\n<H2>Sample Input 1</H2>\n<pre>\n4 12\n</pre>\n<H2>Sample Output 1</H2>\n<pre>\n1 0\n</pre>\n<br/>\n\n<H2>Sample Input 2</H2>\n<pre>\n3 8\n</pre>\n<H2>Sample Output 2</H2>\n<pre>\n3 -1\n</pre>", "p02475": "<h2>Division of Big Integers</h2>\n\n<p>\n  Given two integers $A$ and $B$, compute the quotient, $\\frac{A}{B}$. Round down to the nearest decimal.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  Two integers $A$ and $B$ separated by a space character are given in a line.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  Print the quotient in a line.\n</p>\n\n<h3>Constraints</h3>\n\n<ul>\n  <li>$-1 \\times 10^{1000} \\leq A, B \\leq 10^{1000}$</li>\n  <li>$B \\ne 0$</li>\n</ul>\n\n<h3>Sample Input 1</h3>\n<pre>\n5 8\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n0\n</pre>\n\n\n<h3>Sample Input 2</h3>\n<pre>\n100 25\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n4\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n-1 3\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n0\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n12 -3\n</pre>\n\n<h3>Sample Output 4</h3>\n<pre>\n-4\n</pre>\n", "p02473": "<h2>Difference of Big Integers</h2>\n\n<p>\n  Given two integers $A$ and $B$, compute the difference, $A - B$.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  Two integers $A$ and $B$ separated by a space character are given in a line.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  Print the difference in a line.\n</p>\n\n<h3>Constraints</h3>\n\n<ul>\n  <li>$-1 \\times 10^{100000} \\leq A, B \\leq 10^{100000}$</li>\n</ul>\n\n<h3>Sample Input 1</h3>\n<pre>\n5 8\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n-3\n</pre>\n\n\n<h3>Sample Input 2</h3>\n<pre>\n100 25\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n75\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n-1 -1\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n0\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n12 -3\n</pre>\n\n<h3>Sample Output 4</h3>\n<pre>\n15\n</pre>\n", "p02477": "<h2>Multiplication of Big Integers II</h2>\n\n<p>\n  Given two integers $A$ and $B$, compute the product, $A \\times B$.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  Two integers $A$ and $B$ separated by a space character are given in a line.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  Print the product in a line.\n</p>\n\n<h3>Constraints</h3>\n\n<ul>\n  <li>$-1 \\times 10^{200000} \\leq A, B \\leq 10^{200000}$</li>\n</ul>\n\n<h3>Sample Input 1</h3>\n<pre>\n5 8\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n40\n</pre>\n\n\n<h3>Sample Input 2</h3>\n<pre>\n100 25\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n2500\n</pre>\n\n<h3>Sample Input 3</h3>\n<pre>\n-1 0\n</pre>\n\n<h3>Sample Output 3</h3>\n<pre>\n0\n</pre>\n\n<h3>Sample Input 4</h3>\n<pre>\n12 -3\n</pre>\n\n<h3>Sample Output 4</h3>\n<pre>\n-36\n</pre>\n\n\n", "p02476": "<h2>Remainder of Big Integers</h2>\n\n<p>\n  Given two integers $A$ and $B$, compute the remainder of $\\frac{A}{B}$.\n</p>\n\n<h3>Input</h3>\n\n<p>\n  Two integers $A$ and $B$ separated by a space character are given in a line.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  Print the remainder in a line.\n</p>\n\n<h3>Constraints</h3>\n\n<ul>\n  <li>$0 \\leq A, B \\leq 10^{1000}$</li>\n  <li>$B \\ne 0$</li>\n</ul>\n\n<h3>Sample Input 1</h3>\n<pre>\n5 8\n</pre>\n\n<h3>Sample Output 1</h3>\n<pre>\n5\n</pre>\n\n\n<h3>Sample Input 2</h3>\n<pre>\n100 25\n</pre>\n\n<h3>Sample Output 2</h3>\n<pre>\n0\n</pre>\n", "p02534": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>K</var>.\nPrint the string obtained by repeating the string <code>ACL</code> <var>K</var> times and concatenating them.</p>\n<p>For example, if <var>K = 3</var>, print <code>ACLACLACL</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the string obtained by repeating the string <code>ACL</code> <var>K</var> times and concatenating them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>ACLACLACL\n</pre></section>\n</div>\n</span>", "p02535": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke likes integers that are greater than or equal to <var>A</var>, and less than or equal to <var>B</var>.\nTakahashi likes integers that are greater than or equal to <var>C</var>, and less than or equal to <var>D</var>.</p>\n<p>Does there exist an integer liked by both people?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq A \\leq B \\leq 10^{18}</var></li>\n<li><var>0 \\leq C \\leq D \\leq 10^{18}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Yes</code> or <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 30 20 40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>For example, both like <var>25</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 20 30 40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02536": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> cities numbered <var>1</var> through <var>N</var>, and <var>M</var> bidirectional roads numbered <var>1</var> through <var>M</var>.\nRoad <var>i</var> connects City <var>A_i</var> and City <var>B_i</var>.</p>\n<p>Snuke can perform the following operation zero or more times:</p>\n<ul>\n<li>Choose two distinct cities that are not directly connected by a road, and build a new road between the two cities.</li>\n</ul>\n<p>After he finishes the operations, it must be possible to travel from any city to any other cities by following roads (possibly multiple times).</p>\n<p>What is the minimum number of roads he must build to achieve the goal?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100,000</var></li>\n<li><var>1 \\leq M \\leq 100,000</var></li>\n<li><var>1 \\leq A_i &lt; B_i \\leq N</var></li>\n<li>No two roads connect the same pair of cities.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_M</var> <var>B_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Initially, there are three cities, and there is a road between City <var>1</var> and City <var>2</var>.</p>\n<p>Snuke can achieve the goal by building one new road, for example, between City <var>1</var> and City <var>3</var>.\nAfter that,</p>\n<ul>\n<li>We can travel between <var>1</var> and <var>2</var> directly.</li>\n<li>We can travel between <var>1</var> and <var>3</var> directly.</li>\n<li>We can travel between <var>2</var> and <var>3</var> by following both roads (<var>2</var> - <var>1</var> - <var>3</var>).</li>\n</ul></section>\n</div>\n</span>", "p02539": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>2N</var> people numbered <var>1</var> through <var>2N</var>.\nThe height of Person <var>i</var> is <var>h_i</var>.</p>\n<p>How many ways are there to make <var>N</var> pairs of people such that the following conditions are satisfied?\nCompute the answer modulo <var>998,244,353</var>.</p>\n<ul>\n<li>Each person is contained in exactly one pair.</li>\n<li>For each pair, the heights of the two people in the pair are different.</li>\n</ul>\n<p>Two ways are considered different if for some <var>p</var> and <var>q</var>, Person <var>p</var> and Person <var>q</var> are paired in one way and not in the other.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50,000</var></li>\n<li><var>1 \\leq h_i \\leq 100,000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>h_1</var>\n<var>:</var>\n<var>h_{2N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1\n1\n2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>There are two ways:</p>\n<ul>\n<li>Form the pair (Person <var>1</var>, Person <var>3</var>) and the pair (Person <var>2</var>, Person <var>4</var>).</li>\n<li>Form the pair (Person <var>1</var>, Person <var>4</var>) and the pair (Person <var>2</var>, Person <var>3</var>).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n30\n10\n20\n40\n20\n10\n10\n30\n50\n60\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>516\n</pre></section>\n</div>\n</span>", "p02540": "<span class=\"lang-en\"><p>Score : <var>300</var> points</p><div class=\"part\"><section><h3>Problem Statement</h3><p>There are <var>N</var> cities on a 2D plane. The coordinate of the <var>i</var>-th city is <var>(x_i, y_i)</var>. Here <var>(x_1, x_2, \\dots, x_N)</var> and <var>(y_1, y_2, \\dots, y_N)</var> are both permuations of <var>(1, 2, \\dots, N)</var>.</p><p>For each <var>k = 1,2,\\dots,N</var>, find the answer to the following question:</p><p>Rng is in City <var>k</var>.\nRng can perform the following move arbitrarily many times:</p><ul><li>move to another city that has a smaller <var>x</var>-coordinate and a smaller <var>y</var>-coordinate, or a larger <var>x</var>-coordinate and a larger <var>y</var>-coordinate, than the city he is currently in.</li></ul><p>How many cities (including City <var>k</var>) are reachable from City <var>k</var>?</p></section></div><div class=\"part\"><section><h3>Constraints</h3><ul><li><var>1 \\leq N \\leq 200,000</var></li><li><var>(x_1, x_2, \\dots, x_N)</var> is a permutation of <var>(1, 2, \\dots, N)</var>.</li><li><var>(y_1, y_2, \\dots, y_N)</var> is a permutation of <var>(1, 2, \\dots, N)</var>.</li><li>All values in input are integers.</li></ul></section></div><hr/><div class=\"io-style\"><div class=\"part\"><section><h3>Input</h3><p>Input is given from Standard Input in the following format:</p><pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>x_2</var> <var>y_2</var>\n<var>:</var>\n<var>x_N</var> <var>y_N</var>\n</pre></section></div><div class=\"part\"><section><h3>Output</h3><p>Print <var>N</var> lines. In <var>i</var>-th line print the answer to the question when <var>k = i</var>.</p></section></div></div><hr/><div class=\"part\"><section><h3>Sample Input 1</h3><pre>4\n1 4\n2 3\n3 1\n4 2\n</pre></section></div><div class=\"part\"><section><h3>Sample Output 1</h3><pre>1\n1\n2\n2\n</pre><p>Rng can reach City <var>4</var> from City <var>3</var>, or conversely City <var>3</var> from City <var>4</var>.</p></section></div><hr/><div class=\"part\"><section><h3>Sample Input 2</h3><pre>7\n6 4\n4 3\n3 5\n7 1\n2 7\n5 2\n1 6\n</pre></section></div><div class=\"part\"><section><h3>Sample Output 2</h3><pre>3\n3\n1\n1\n2\n3\n2\n</pre></section></div></span>", "p02538": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have a string <var>S</var> of length <var>N</var>.\nInitially, all characters in <var>S</var> are <code>1</code>s.</p>\n<p>You will perform queries <var>Q</var> times.\nIn the <var>i</var>-th query, you are given two integers <var>L_i, R_i</var> and a character <var>D_i</var> (which is a digit).\nThen, you must replace all characters from the <var>L_i</var>-th to the <var>R_i</var>-th (inclusive) with <var>D_i</var>.</p>\n<p>After each query, read the string <var>S</var> as a decimal integer, and print its value modulo <var>998,244,353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, Q \\leq 200,000</var></li>\n<li><var>1 \\leq L_i \\leq R_i \\leq N</var></li>\n<li><var>1 \\leq D_i \\leq 9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>L_1</var> <var>R_1</var> <var>D_1</var>\n<var>:</var>\n<var>L_Q</var> <var>R_Q</var> <var>D_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines.\nIn the <var>i</var>-th line print the value of <var>S</var> after the <var>i</var>-th query, modulo <var>998,244,353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8 5\n3 6 2\n1 4 7\n3 8 3\n2 2 2\n4 5 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11222211\n77772211\n77333333\n72333333\n72311333\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>200000 1\n123 456 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>641437905\n</pre>\n<p>Don't forget to take the modulo.</p></section>\n</div>\n</span>", "p02541": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer <var>N</var>.\nFind the minimum possible positive integer <var>k</var> such that <var>(1+2+\\cdots+k)</var> is a multiple of <var>N</var>.\nIt can be proved that such a positive integer <var>k</var> always exists.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^{15}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer in a line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p><var>1+2+\\cdots+10=55</var> holds and <var>55</var> is indeed a multple of <var>N=11</var>.\nThere are no positive integers <var>k \\leq 9</var> that satisfy the condition, so the answer is <var>k = 10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>20200920\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1100144\n</pre></section>\n</div>\n</span>", "p02537": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a sequence <var>A_1, A_2, ..., A_N</var> and an integer <var>K</var>.</p>\n<p>Print the maximum possible length of a sequence <var>B</var> that satisfies the following conditions:</p>\n<ul>\n<li><var>B</var> is a (not necessarily continuous) subsequence of <var>A</var>.</li>\n<li>For each pair of adjacents elements of <var>B</var>, the absolute difference of the elements is at most <var>K</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 300,000</var></li>\n<li><var>0 \\leq A_i \\leq 300,000</var></li>\n<li><var>0 \\leq K \\leq 300,000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var>\n<var>A_2</var>\n<var>:</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 3\n1\n5\n4\n3\n8\n6\n9\n7\n2\n4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>For example, <var>B = (1, 4, 3, 6, 9, 7, 4)</var> satisfies the conditions.</p>\n<ul>\n<li>It is a subsequence of <var>A = (1, 5, 4, 3, 8, 6, 9, 7, 2, 4)</var>.</li>\n<li>All of the absolute differences between two adjacent elements (<var>|1-4|, |4-3|, |3-6|, |6-9|, |9-7|, |7-4|</var>) are at most <var>K = 3</var>.</li>\n</ul></section>\n</div>\n</span>", "p02542": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a board with <var>N</var> rows and <var>M</var> columns.\nThe information of this board is represented by <var>N</var> strings <var>S_1,S_2,\\ldots,S_N</var>.\nSpecifically, the state of the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left is represented as follows:</p>\n<ul>\n<li><var>S_{i,j}=</var><code>.</code> : the square is empty.</li>\n<li><var>S_{i,j}=</var><code>#</code> : an obstacle is placed on the square.</li>\n<li><var>S_{i,j}=</var><code>o</code> : a piece is placed on the square.</li>\n</ul>\n<p>Yosupo repeats the following operation:</p>\n<ul>\n<li>Choose a piece and move it to its right adjecent square or its down adjacent square.\nMoving a piece to squares with another piece or an obstacle is prohibited.\nMoving a piece out of the board is also prohibited.</li>\n</ul>\n<p>Yosupo wants to perform the operation as many times as possible.\nFind the maximum possible number of operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq M \\leq 50</var></li>\n<li><var>S_i</var> is a string of length <var>M</var> consisting of <code>.</code>, <code>#</code> and <code>o</code>.</li>\n<li><var>1 \\leq (</var> the number of pieces <var>)\\leq 100</var>.\nIn other words, the number of pairs <var>(i, j)</var> that satisfy <var>S_{i,j}=</var><code>o</code> is between <var>1</var> and <var>100</var>, both inclusive.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>\\vdots</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of operations in a line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\no..\n...\no.#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Yosupo can perform operations <var>4</var> times as follows:</p>\n<pre>o..      .o.      ..o      ...      ...\n...  -&gt;  ...  -&gt;  ...  -&gt;  ..o  -&gt;  ..o\no.#      o.#      o.#      o.#      .o#\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9 10\n.#....o#..\n.#..#..##o\n.....#o.##\n.###.#o..o\n#.#...##.#\n..#..#.###\n#o.....#..\n....###..o\no.......o#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>24\n</pre></section>\n</div>\n</span>", "p02543": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> points on a number line, <var>i</var>-th of which is placed on coordinate <var>X_i</var>.\nThese points are numbered in the increasing order of coordinates.\nIn other words, for all <var>i</var> (<var>1 \\leq i \\leq N-1</var>), <var>X_i &lt; X_{i+1}</var> holds.\nIn addition to that, an integer <var>K</var> is given.</p>\n<p>Process <var>Q</var> queries.</p>\n<p>In the <var>i</var>-th query, two integers <var>L_i</var> and <var>R_i</var> are given.\nHere, a set <var>s</var> of points is said to be a <em>good</em> set if it satisfies all of the following conditions.\nNote that the definition of good sets varies over queries.</p>\n<ul>\n<li>Each point in <var>s</var> is one of <var>X_{L_i},X_{L_i+1},\\ldots,X_{R_i}</var>.</li>\n<li>For any two distinct points in <var>s</var>, the distance between them is greater than or equal to <var>K</var>.</li>\n<li>The size of <var>s</var> is maximum among all sets that satisfy the aforementioned conditions.</li>\n</ul>\n<p>For each query, find the size of the union of all good sets.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>0 \\leq X_1 &lt; X_2 &lt; \\cdots &lt; X_N \\leq 10^9</var></li>\n<li><var>1 \\leq Q \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq L_i \\leq R_i \\leq N</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>X_1</var> <var>X_2</var> <var>\\cdots</var> <var>X_N</var>\n<var>Q</var>\n<var>L_1</var> <var>R_1</var>\n<var>L_2</var> <var>R_2</var>\n<var>\\vdots</var>\n<var>L_Q</var> <var>R_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each query, print the size of the union of all good sets in a line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n1 2 4 7 8\n2\n1 5\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n2\n</pre>\n<p>In the first query, you can have at most <var>3</var> points in a good set.\nThere exist two good sets: <var>\\{1,4,7\\}</var> and <var>\\{1,4,8\\}</var>.\nTherefore, the size of the union of all good sets is <var>|\\{1,4,7,8\\}|=4</var>.</p>\n<p>In the second query, you can have at most <var>1</var> point in a good set.\nThere exist two good sets: <var>\\{1\\}</var> and <var>\\{2\\}</var>.\nTherefore, the size of the union of all good sets is <var>|\\{1,2\\}|=2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>15 220492538\n4452279 12864090 23146757 31318558 133073771 141315707 263239555 350278176 401243954 418305779 450172439 560311491 625900495 626194585 891960194\n5\n6 14\n1 8\n1 13\n7 12\n4 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n6\n11\n2\n3\n</pre></section>\n</div>\n</span>", "p02544": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are a permutation <var>p_1, p_2, \\dots, p_N</var> of <var>(1, 2, ..., N)</var> and an integer <var>K</var>. Maroon performs the following operation for <var>i = 1, 2, \\dots, N - K + 1</var> in this order:</p>\n<ul>\n<li>Shuffle <var>p_i, p_{i + 1}, \\dots, p_{i + K - 1}</var> uniformly randomly.</li>\n</ul>\n<p>Find the expected value of the inversion number of the sequence after all the operations are performed, and print it modulo <var>998244353</var>.</p>\n<p>More specifically, from the constraints of this problem, it can be proved that the expected value is always a rational number, which can be represented as an irreducible fraction <var>\\frac{P}{Q}</var>, and that the integer <var>R</var> that satisfies <var>R \\times Q \\equiv P \\pmod{998244353}, 0 \\leq R &lt; 998244353</var> is uniquely determined. Print this <var>R</var>.</p>\n<p>Here, the inversion number of a sequence <var>a_1, a_2, \\dots, a_N</var> is defined to be the number of ordered pairs <var>(i, j)</var> that satisfy <var>i &lt; j, a_i &gt; a_j</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200,000</var></li>\n<li><var>2 \\leq K \\leq N</var></li>\n<li><var>(p_1, p_2, \\dots, p_N)</var> is a permutation of <var>(1, 2, \\dots, N)</var>.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>p_1</var> <var>p_2</var> ... <var>p_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the expected value modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The final sequence is one of <var>(1, 2, 3)</var>, <var>(2, 1, 3)</var>, <var>(1, 3, 2)</var>, <var>(2, 3, 1)</var>, each with probability <var>\\frac{1}{4}</var>.\nTheir inversion numbers are <var>0, 1, 1, 2</var> respectively, so the expected value is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 3\n1 8 4 9 2 3 7 10 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>164091855\n</pre></section>\n</div>\n</span>", "p02546": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.</p>\n<p>In Taknese, the plural form of a noun is spelled based on the following rules:</p>\n<ul>\n<li>If a noun's singular form does not end with <code>s</code>, append <code>s</code> to the end of the singular form.</li>\n<li>If a noun's singular form ends with <code>s</code>, append <code>es</code> to the end of the singular form.</li>\n</ul>\n<p>You are given the singular form <var>S</var> of a Taknese noun. Output its plural form.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is a string of length <var>1</var> between <var>1000</var>, inclusive.</li>\n<li><var>S</var> contains only lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the plural form of the given Taknese word.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>apple\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>apples\n</pre>\n<p><code>apple</code> ends with <code>e</code>, so its plural form is <code>apples</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>bus\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>buses\n</pre>\n<p><code>bus</code> ends with <code>s</code>, so its plural form is <code>buses</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>box\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>boxs\n</pre></section>\n</div>\n</span>", "p02545": "<span class=\"lang-en\">\n<p>Score : <var>1800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are integer sequences <var>A</var> and <var>B</var> of length <var>3N</var>. Each of these two sequences contains three copies of each of <var>1, 2, \\dots, N</var>.\nIn other words, <var>A</var> and <var>B</var> are both arrangements of <var>(1, 1, 1, 2, 2, 2, \\dots, N, N, N)</var>.</p>\n<p>Tak can perform the following operation to the sequence <var>A</var> arbitrarily many times:</p>\n<ul>\n<li>Pick a value from <var>1, 2, \\dots, N</var> and call it <var>x</var>. <var>A</var> contains exactly three copies of <var>x</var>. Remove the middle element of these three. After that, append <var>x</var> to the beginning or the end of <var>A</var>.</li>\n</ul>\n<p>Check if he can turn <var>A</var> into <var>B</var>. If he can, print the minimum required number of operations to achieve that.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 33</var></li>\n<li><var>A</var> and <var>B</var> are both arrangements of <var>(1, 1, 1, 2, 2, 2, \\dots, N, N, N)</var>.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_{3N}</var>\n<var>B_1</var> <var>B_2</var> ... <var>B_{3N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Tak can turn <var>A</var> into <var>B</var>, print the minimum required number of operations to achieve that. Otherwise, print <var>-1</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 3 1 1 3 2 2 1 3\n1 2 2 3 1 2 3 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>For example, Tak can perform operations as follows:</p>\n<ul>\n<li><code>2 3 1 1 3 2 2 1 3</code> (The initial state)</li>\n<li><code>2 2 3 1 1 3 2 1 3</code> (Pick <var>x = 2</var> and append it to the beginning)</li>\n<li><code>2 2 3 1 3 2 1 3 1</code> (Pick <var>x = 1</var> and append it to the end)</li>\n<li><code>1 2 2 3 1 3 2 3 1</code> (Pick <var>x = 1</var> and append it to the beginning)</li>\n<li><code>1 2 2 3 1 2 3 1 3</code> (Pick <var>x = 3</var> and append it to the end)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1 1 2 2 2 3 3 3\n1 1 1 2 2 2 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n2 3 3 1 1 1 2 2 3\n3 2 2 1 1 1 3 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8\n3 6 7 5 4 8 4 1 1 3 8 7 3 8 2 4 7 5 2 2 6 5 6 1\n7 5 8 1 3 6 7 5 4 8 1 3 3 8 2 4 2 6 5 6 1 4 7 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>7\n</pre></section>\n</div>\n</span>", "p02548": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a positive integer <var>N</var>.\nHow many tuples <var>(A,B,C)</var> of positive integers satisfy <var>A \\times B + C = N</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var> 2 \\leq N \\leq 10^6</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>There are <var>3</var> tuples of integers that satisfy <var>A \\times B + C = 3</var>: <var>(A, B, C) = (1, 1, 2), (1, 2, 1), (2, 1, 1)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>473\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>13969985\n</pre></section>\n</div>\n</span>", "p02547": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Tak performed the following action <var>N</var> times: rolling two dice.\nThe result of the <var>i</var>-th roll is <var>D_{i,1}</var> and <var>D_{i,2}</var>.</p>\n<p>Check if doublets occurred at least three times in a row.\nSpecifically, check if there exists at lease one <var>i</var> such that <var>D_{i,1}=D_{i,2}</var>, <var>D_{i+1,1}=D_{i+1,2}</var> and <var>D_{i+2,1}=D_{i+2,2}</var> hold.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 100</var></li>\n<li><var>1\\leq D_{i,j} \\leq 6</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>D_{1,1}</var> <var>D_{1,2}</var>\n<var>\\vdots</var>\n<var>D_{N,1}</var> <var>D_{N,2}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Yes</code> if doublets occurred at least three times in a row. Print <code>No</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 2\n6 6\n4 4\n3 3\n3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>From the second roll to the fourth roll, three doublets occurred in a row.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 1\n2 2\n3 4\n5 5\n6 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02550": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let us denote by <var>f(x, m)</var> the remainder of the Euclidean division of <var>x</var> by <var>m</var>.</p>\n<p>Let <var>A</var> be the sequence that is defined by the initial value <var>A_1=X</var> and the recurrence relation <var>A_{n+1} = f(A_n^2, M)</var>.\nFind <var>\\displaystyle{\\sum_{i=1}^N A_i}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^{10}</var></li>\n<li><var>0 \\leq X &lt; M \\leq 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>\\displaystyle{\\sum_{i=1}^N A_i}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 2 1001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1369\n</pre>\n<p>The sequence <var>A</var> begins <var>2,4,16,256,471,620,\\ldots</var> Therefore, the answer is <var>2+4+16+256+471+620=1369</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000 2 16\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n<p>The sequence <var>A</var> begins <var>2,4,0,0,\\ldots</var> Therefore, the answer is <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10000000000 10 99959\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>492443256176507\n</pre></section>\n</div>\n</span>", "p02552": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer <var>x</var> that is greater than or equal to <var>0</var>, and less than or equal to <var>1</var>.\nOutput <var>1</var> if <var>x</var> is equal to <var>0</var>, or <var>0</var> if <var>x</var> is equal to <var>1</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq x \\leq 1</var></li>\n<li><var>x</var> is an integer</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>x</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>1</var> if <var>x</var> is equal to <var>0</var>, or <var>0</var> if <var>x</var> is equal to <var>1</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre></section>\n</div>\n</span>", "p02553": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are integers <var>a,b,c</var> and <var>d</var>.\nIf <var>x</var> and <var>y</var> are integers and <var>a \\leq x \\leq b</var> and <var>c\\leq y \\leq d</var> hold, what is the maximum possible value of <var>x \\times y</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>-10^9 \\leq a \\leq b \\leq 10^9</var></li>\n<li><var>-10^9 \\leq c \\leq d \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var> <var>c</var> <var>d</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If <var>x = 1</var> and <var>y = 1</var> then <var>x \\times y = 1</var>.\nIf <var>x = 2</var> and <var>y = 1</var> then <var>x \\times y = 2</var>.\nTherefore, the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 5 -4 -2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-6\n</pre>\n<p>The answer can be negative.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>-1000000000 0 -1000000000 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1000000000000000000\n</pre></section>\n</div>\n</span>", "p02554": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>How many integer sequences <var>A_1,A_2,\\ldots,A_N</var> of length <var>N</var> satisfy all of the following conditions?</p>\n<ul>\n<li><var>0 \\leq A_i \\leq 9</var></li>\n<li>There exists some <var>i</var> such that <var>A_i=0</var> holds.</li>\n<li>There exists some <var>i</var> such that <var>A_i=9</var> holds.</li>\n</ul>\n<p>The answer can be very large, so output it modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^6</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Two sequences <var>\\{0,9\\}</var> and <var>\\{9,0\\}</var> satisfy all conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>869121\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2511445\n</pre></section>\n</div>\n</span>", "p02557": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are two sequences <var>A</var> and <var>B</var>, both of length <var>N</var>.\n<var>A</var> and <var>B</var> are each sorted in the ascending order.\nCheck if it is possible to reorder the terms of <var>B</var> so that for each <var>i</var> (<var>1 \\leq i \\leq N</var>) <var>A_i \\neq B_i</var> holds, and if it is possible, output any of the reorderings that achieve it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1\\leq A_i,B_i \\leq N</var></li>\n<li><var>A</var> and <var>B</var> are each sorted in the ascending order.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_N</var>\n<var>B_1</var> <var>B_2</var> <var>\\cdots</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there exist no reorderings that satisfy the condition, print <code>No</code>.</p>\n<p>If there exists a reordering that satisfies the condition, print <code>Yes</code> on the first line.\nAfter that, print a reordering of <var>B</var> on the second line, separating terms with a whitespace.</p>\n<p>If there are multiple reorderings that satisfy the condition, you can print any of them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 1 1 2 2 3\n1 1 1 2 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n2 2 3 1 1 1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1 2\n1 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n1 1 2 3\n1 2 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n3 3 1 2\n</pre></section>\n</div>\n</span>", "p02555": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer <var>S</var>.\nFind how many sequences there are whose terms are all integers greater than or equal to <var>3</var>, and whose sum is equal to <var>S</var>.\nThe answer can be very large, so output it modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq S \\leq 2000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><var>3</var> sequences satisfy the condition: <var>\\{3,4\\}</var>, <var>\\{4,3\\}</var> and <var>\\{7\\}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>There are no sequences that satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1729\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>294867501\n</pre></section>\n</div>\n</span>", "p02556": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> points on the 2D plane, <var>i</var>-th of which is located on <var>(x_i, y_i)</var>.\nThere can be multiple points that share the same coordinate.\nWhat is the maximum possible Manhattan distance between two distinct points?</p>\n<p>Here, the <em>Manhattan distance</em> between two points <var>(x_i, y_i)</var> and <var>(x_j, y_j)</var> is defined by <var>|x_i-x_j| + |y_i-y_j|</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq x_i,y_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>x_2</var> <var>y_2</var>\n<var>:</var>\n<var>x_N</var> <var>y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 1\n2 4\n3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>The Manhattan distance between the first point and the second point is <var>|1-2|+|1-4|=4</var>, which is maximum possible.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n1 1\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02561": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a grid of <var>N</var> rows and <var>M</var> columns. The square at the <var>i</var>-th row and <var>j</var>-th column will be denoted as <var>(i,j)</var>.\nSome of the squares contain an object. All the remaining squares are empty.\nThe state of the grid is represented by strings <var>S_1,S_2,\\cdots,S_N</var>. The square <var>(i,j)</var> contains an object if <var>S_{i,j}=</var> <code>#</code> and is empty if <var>S_{i,j}=</var> <code>.</code>.</p>\n<p>Consider placing <var>1 \\times 2</var> tiles on the grid. Tiles can be placed vertically or horizontally to cover two adjacent empty squares.\nTiles must not stick out of the grid, and no two different tiles may intersect. Tiles cannot occupy the square with an object.</p>\n<p>Calculate the maximum number of tiles that can be placed and any configulation that acheives the maximum.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq M \\leq 100</var></li>\n<li><var>S_i</var> is a string with length <var>M</var> consists of <code>#</code> and <code>.</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>\\vdots</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>On the first line, print the maximum number of tiles that can be placed.</p>\n<p>On the next <var>N</var> lines, print a configulation that achieves the maximum.\nPrecisely, output the strings <var>t_1,t_2,\\cdots,t_N</var> constructed by the following way.</p>\n<ul>\n<li><var>t_i</var> is initialized to <var>S_i</var>.</li>\n<li>For each <var>(i,j)</var>, if there is a tile that occupies <var>(i,j)</var> and <var>(i+1,j)</var>, change <var>t_{i,j}</var>:=<code>v</code>, <var>t_{i+1,j}</var>:=<code>^</code>.</li>\n<li>For each <var>(i,j)</var>, if there is a tile that occupies <var>(i,j)</var> and <var>(i,j+1)</var>, change <var>t_{i,j}</var>:=<code>&gt;</code>, <var>t_{i,j+1}</var>:=<code>&lt;</code>.</li>\n</ul>\n<p>See samples for further information.</p>\n<p>You may print any configulation that maximizes the number of tiles.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n#..\n..#\n...\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n#&gt;&lt;\nvv#\n^^.\n</pre>\n<p>The following output is also treated as a correct answer.</p>\n<pre>3\n#&gt;&lt;\nv.#\n^&gt;&lt;\n</pre></section>\n</div>\n</span>", "p02559": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an array <var>a_0, a_1, ..., a_{N-1}</var> of length <var>N</var>. Process <var>Q</var> queries of the following types.</p>\n<ul>\n<li><code>0 p x</code>: <var>a_p \\gets a_p + x</var></li>\n<li><code>1 l r</code>: Print <var>\\sum_{i = l}^{r - 1}{a_i}</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, Q \\leq 500,000</var></li>\n<li><var>0 \\leq a_i, x \\leq 10^9</var></li>\n<li><var>0 \\leq p &lt; N</var></li>\n<li><var>0 \\leq l_i &lt; r_i \\leq N</var></li>\n<li>All values in Input are integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>a_0</var> <var>a_1</var> ... <var>a_{N - 1}</var>\n<var>\\textrm{Query}_0</var>\n<var>\\textrm{Query}_1</var>\n:\n<var>\\textrm{Query}_{Q - 1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each query of the latter type, print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 5\n1 2 3 4 5\n1 0 5\n1 2 4\n0 3 10\n1 0 5\n1 0 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>15\n7\n25\n6\n</pre></section>\n</div>\n</span>", "p02562": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a grid of <var>N</var> rows and <var>M</var> columns. The square at the <var>i</var>-th row and <var>j</var>-th column will be denoted as <var>(i,j)</var>.\nA nonnegative integer <var>A_{i,j}</var> is written for each square <var>(i,j)</var>.</p>\n<p>You choose some of the squares so that each row and column contains at most <var>K</var> chosen squares.\nUnder this constraint, calculate the maximum value of the sum of the integers written on the chosen squares.\nAdditionally, calculate a way to choose squares that acheives the maximum.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n<li><var>0 \\leq A_{i,j} \\leq 10^9</var></li>\n<li>All values in Input are integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_{1,1}</var> <var>A_{1,2}</var> <var>\\cdots</var> <var>A_{1,N}</var>\n<var>A_{2,1}</var> <var>A_{2,2}</var> <var>\\cdots</var> <var>A_{2,N}</var>\n<var>\\vdots</var>\n<var>A_{N,1}</var> <var>A_{N,2}</var> <var>\\cdots</var> <var>A_{N,N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>On the first line, print the maximum value of the sum of the integers written on the chosen squares.</p>\n<p>On the next <var>N</var> lines, print a way that achieves the maximum.</p>\n<p>Precisely, output the strings <var>t_1,t_2,\\cdots,t_N</var>, that satisfies <var>t_{i,j}=</var><code>X</code> if you choose <var>(i,j)</var> and <var>t_{i,j}=</var><code>.</code> otherwise.</p>\n<p>You may print any way to choose squares that maximizes the sum.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1\n5 3 2\n1 4 8\n7 6 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>19\nX..\n..X\n.X.\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n10 10 1\n10 10 1\n1 1 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>50\nXX.\nXX.\n..X\n</pre></section>\n</div>\n</span>", "p02564": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a directed graph with <var>N</var> vertices and <var>M</var> edges, not necessarily simple. The <var>i</var>-th edge is oriented from the vertex <var>a_i</var> to the vertex <var>b_i</var>.\nDivide this graph into strongly connected components and print them in their topological order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 500,000</var></li>\n<li><var>1 \\leq M \\leq 500,000</var></li>\n<li><var>0 \\leq a_i, b_i &lt; N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_0</var> <var>b_0</var>\n<var>a_1</var> <var>b_1</var>\n:\n<var>a_{M - 1}</var> <var>b_{M - 1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>1+K</var> lines, where <var>K</var> is the number of strongly connected components.\nPrint <var>K</var> on the first line. \nPrint the information of each strongly connected component in next <var>K</var> lines in the following format, where <var>l</var> is the number of vertices in the strongly connected component and <var>v_i</var> is the index of the vertex in it.</p>\n<pre><var>l</var> <var>v_0</var> <var>v_1</var> ... <var>v_{l-1}</var>\n</pre>\n<p>Here, for each edge <var>(a_i, b_i)</var>, <var>b_i</var> should not appear in <strong>earlier</strong> line than <var>a_i</var>.</p>\n<p>If there are multiple correct output, print any of them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 7\n1 4\n5 2\n3 0\n5 5\n4 1\n0 3\n4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n1 5\n2 4 1\n1 2\n2 3 0\n</pre></section>\n</div>\n</span>", "p02565": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Consider placing <var>N</var> flags on a line. Flags are numbered through <var>1</var> to <var>N</var>.</p>\n<p>Flag <var>i</var> can be placed on the coordinate <var>X_i</var> or <var>Y_i</var>.\nFor any two different flags, the distance between them should be at least <var>D</var>.</p>\n<p>Decide whether it is possible to place all <var>N</var> flags. If it is possible, print such a configulation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>0 \\leq D \\leq 10^9</var></li>\n<li><var>0 \\leq X_i &lt; Y_i \\leq 10^9</var></li>\n<li>All values in Input are integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>D</var>\n<var>X_1</var> <var>Y_1</var>\n<var>X_2</var> <var>Y_2</var>\n<var>\\vdots</var>\n<var>X_N</var> <var>Y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>No</code> if it is impossible to place <var>N</var> flags.</p>\n<p>If it is possible, print <code>Yes</code> first.\nAfter that, print <var>N</var> lines. <var>i</var>-th line of them should contain the coodinate of flag <var>i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n1 4\n2 5\n0 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n4\n2\n0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n1 4\n2 5\n0 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02563": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given two integer arrays <var>a_0, a_1, ..., a_{N - 1}</var> and <var>b_0, b_1, ..., b_{M - 1}</var>. Calculate the array <var>c_0, c_1, ..., c_{(N - 1) + (M - 1)}</var>, defined by <var>c_i = \\sum_{j = 0}^i a_j b_{i - j} \\bmod 998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, M \\leq 524288</var></li>\n<li><var>0 \\leq a_i, b_i &lt; 998244353</var></li>\n<li>All values in Input are integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_0</var> <var>a_1</var> ... <var>a_{N-1}</var>\n<var>b_0</var> <var>b_1</var> ... <var>b_{M-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer in the following format:</p>\n<pre><var>c_0</var> <var>c_1</var> ... <var>c_{(N - 1) + (M - 1)}</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n1 2 3 4\n5 6 7 8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5 16 34 60 70 70 59 36\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1\n10000000\n10000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>871938225\n</pre></section>\n</div>\n</span>", "p02566": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string of length <var>N</var>. Calculate the number of distinct substrings of <var>S</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 500,000</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abcbcba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>21\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>mississippi\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>53\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>ababacaca\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>33\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>aaaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n</pre></section>\n</div>\n</span>", "p02568": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an array <var>a_0, a_1, ..., a_{N-1}</var> of length <var>N</var>. Process <var>Q</var> queries of the following types.</p>\n<ul>\n<li><code>0 l r b c</code>: For each <var>i = l, l+1, \\dots, {r - 1}</var>, set <var>a_i \\gets b \\times a_i + c</var>.</li>\n<li><code>1 l r</code>: Print <var>\\sum_{i = l}^{r - 1} a_i \\bmod 998244353</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, Q \\leq 500000</var></li>\n<li><var>0 \\leq a_i, c &lt; 998244353</var></li>\n<li><var>1 \\leq b &lt; 998244353</var></li>\n<li><var>0 \\leq l &lt; r \\leq N</var></li>\n<li>All values in Input are integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>a_0</var> <var>a_1</var> ... <var>a_{N - 1}</var>\n<var>\\textrm{Query}_0</var>\n<var>\\textrm{Query}_1</var>\n:\n<var>\\textrm{Query}_{Q - 1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each query of the latter type, print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 7\n1 2 3 4 5\n1 0 5\n0 2 4 100 101\n1 0 3\n0 1 3 102 103\n1 2 5\n0 2 5 104 105\n1 0 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>15\n404\n41511\n4317767\n</pre></section>\n</div>\n</span>", "p02570": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is meeting up with Aoki.</p>\n<p>They have planned to meet at a place that is <var>D</var> meters away from Takahashi's house in <var>T</var> minutes from now.</p>\n<p>Takahashi will leave his house now and go straight to the place at a speed of <var>S</var> meters per minute.</p>\n<p>Will he arrive in time?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq D \\leq 10000</var></li>\n<li><var>1 \\leq T \\leq 10000</var></li>\n<li><var>1 \\leq S \\leq 10000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>D</var> <var>T</var> <var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Takahashi will reach the place in time, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1000 15 80\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>It takes <var>12.5</var> minutes to go <var>1000</var> meters to the place at a speed of <var>80</var> meters per minute. They have planned to meet in <var>15</var> minutes so he will arrive in time.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2000 20 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n<p>It takes <var>20</var> minutes to go <var>2000</var> meters to the place at a speed of <var>100</var> meters per minute. They have planned to meet in <var>20</var> minutes so he will arrive just on time.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10000 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n<p>He will be late.</p></section>\n</div>\n</span>", "p02572": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are <var>N</var> integers <var>A_1,\\ldots,A_N</var>.</p>\n<p>Find the sum of <var>A_i \\times A_j</var> over all pairs <var>(i,j)</var> such that <var>1\\leq i &lt; j \\leq N</var>, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>0 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} A_i A_j</var>, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11\n</pre>\n<p>We have <var>1 \\times 2 + 1 \\times 3 + 2 \\times 3 = 11</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n141421356 17320508 22360679 244949\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>437235829\n</pre></section>\n</div>\n</span>", "p02571": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are two strings <var>S</var> and <var>T</var>.</p>\n<p>Let us change some of the characters in <var>S</var> so that <var>T</var> will be a substring of <var>S</var>.</p>\n<p>At least how many characters do we need to change?</p>\n<p>Here, a substring is a consecutive subsequence. For example, <code>xxx</code> is a substring of <code>yxxxy</code>, but not a substring of <code>xxyxx</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The lengths of <var>S</var> and <var>T</var> are each at least <var>1</var> and at most <var>1000</var>.</li>\n<li>The length of <var>T</var> is at most that of <var>S</var>.</li>\n<li><var>S</var> and <var>T</var> consist of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of characters in <var>S</var> that need to be changed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>cabacc\nabc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>For example, changing the fourth character <code>a</code> in <var>S</var> to <code>c</code> will match the second through fourth characters in <var>S</var> to <var>T</var>.</p>\n<p>Since <var>S</var> itself does not have <var>T</var> as its substring, this number of changes - one - is the minimum needed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>codeforces\natcoder\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre></section>\n</div>\n</span>", "p02573": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> persons called Person <var>1</var> through Person <var>N</var>.</p>\n<p>You are given <var>M</var> facts that \"Person <var>A_i</var> and Person <var>B_i</var> are friends.\" The same fact may be given multiple times.</p>\n<p>If <var>X</var> and <var>Y</var> are friends, and <var>Y</var> and <var>Z</var> are friends, then <var>X</var> and <var>Z</var> are also friends. There is no friendship that cannot be derived from the <var>M</var> given facts.</p>\n<p>Takahashi the evil wants to divide the <var>N</var> persons into some number of groups so that every person has no friend in his/her group.</p>\n<p>At least how many groups does he need to make?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>0 \\leq M \\leq 2\\times 10^5</var></li>\n<li><var>1\\leq A_i,B_i\\leq N</var></li>\n<li><var>A_i \\neq B_i</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>\\vdots</var>\n<var>A_M</var> <var>B_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n1 2\n3 4\n5 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>Dividing them into three groups such as <var>\\{1,3\\}</var>, <var>\\{2,4\\}</var>, and <var>\\{5\\}</var> achieves the goal.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 10\n1 2\n2 1\n1 2\n2 1\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 4\n3 1\n4 1\n5 9\n2 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02576": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi loves takoyaki - a ball-shaped snack.</p>\n<p>With a takoyaki machine, he can make at most <var>X</var> pieces of takoyaki at a time, taking <var>T</var> minutes regardless of the number of pieces to make.</p>\n<p>How long does it take to make <var>N</var> takoyaki?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,X,T \\leq 1000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var> <var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the minimum number of minutes needed to make <var>N</var> pieces of takoyaki.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>20 12 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>He can make <var>12</var> pieces of takoyaki in the first <var>6</var> minutes and <var>8</var> more in the next <var>6</var> minutes, so he can make <var>20</var> in a total of <var>12</var> minutes.</p>\n<p>Note that being able to make <var>12</var> in <var>6</var> minutes does not mean he can make <var>2</var> in <var>1</var> minute.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000 1 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1000000\n</pre>\n<p>It seems to take a long time to make this kind of takoyaki.</p></section>\n</div>\n</span>", "p02574": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> integers. The <var>i</var>-th number is <var>A_i</var>.</p>\n<p><var>\\{A_i\\}</var> is said to be pairwise coprime when <var>GCD(A_i,A_j)=1</var> holds for every pair <var>(i, j)</var> such that <var>1\\leq i &lt; j \\leq N</var>.</p>\n<p><var>\\{A_i\\}</var> is said to be setwise coprime when <var>\\{A_i\\}</var> is not pairwise coprime but <var>GCD(A_1,\\ldots,A_N)=1</var>.</p>\n<p>Determine if <var>\\{A_i\\}</var> is pairwise coprime, setwise coprime, or neither.</p>\n<p>Here, <var>GCD(\\ldots)</var> denotes greatest common divisor.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^6</var></li>\n<li><var>1 \\leq A_i\\leq 10^6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>\\{A_i\\}</var> is pairwise coprime, print <code>pairwise coprime</code>; if <var>\\{A_i\\}</var> is setwise coprime, print <code>setwise coprime</code>; if neither, print <code>not coprime</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>pairwise coprime\n</pre>\n<p><var>GCD(3,4)=GCD(3,5)=GCD(4,5)=1</var>, so they are pairwise coprime.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n6 10 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>setwise coprime\n</pre>\n<p>Since <var>GCD(6,10)=2</var>, they are not pairwise coprime. However, since <var>GCD(6,10,15)=1</var>, they are setwise coprime.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n6 10 16\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>not coprime\n</pre>\n<p><var>GCD(6,10,16)=2</var>, so they are neither pairwise coprime nor setwise coprime.</p></section>\n</div>\n</span>", "p02577": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>An integer <var>N</var> is a multiple of <var>9</var> if and only if the sum of the digits in the decimal representation of <var>N</var> is a multiple of <var>9</var>.</p>\n<p>Determine whether <var>N</var> is a multiple of <var>9</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq N &lt; 10^{200000}</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>N</var> is a multiple of <var>9</var>, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>123456789\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>The sum of these digits is <var>1+2+3+4+5+6+7+8+9=45</var>, which is a multiple of <var>9</var>, so <var>123456789</var> is a multiple of <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31415926535897932384626433832795028841971693993751058209749445923078164062862089986280\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02579": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A maze is composed of a grid of <var>H \\times W</var> squares - <var>H</var> vertical, <var>W</var> horizontal.</p>\n<p>The square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left - <var>(i,j)</var> - is a wall if <var>S_{ij}</var> is <code>#</code> and a road if <var>S_{ij}</var> is <code>.</code>.</p>\n<p>There is a magician in <var>(C_h,C_w)</var>. He can do the following two kinds of moves:</p>\n<ul>\n<li>Move A: Walk to a road square that is vertically or horizontally adjacent to the square he is currently in.</li>\n<li>Move B: Use magic to warp himself to a road square in the <var>5\\times 5</var> area centered at the square he is currently in.</li>\n</ul>\n<p>In either case, he cannot go out of the maze.</p>\n<p>At least how many times does he need to use the magic to reach <var>(D_h, D_w)</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 10^3</var></li>\n<li><var>1 \\leq C_h,D_h \\leq H</var></li>\n<li><var>1 \\leq C_w,D_w \\leq W</var></li>\n<li><var>S_{ij}</var> is <code>#</code> or <code>.</code>.</li>\n<li><var>S_{C_h C_w}</var> and <var>S_{D_h D_w}</var> are <code>.</code>.</li>\n<li><var>(C_h,C_w) \\neq (D_h,D_w)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>C_h</var> <var>C_w</var>\n<var>D_h</var> <var>D_w</var>\n<var>S_{11}\\ldots S_{1W}</var>\n<var>\\vdots</var>\n<var>S_{H1}\\ldots S_{HW}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of times the magician needs to use the magic. If he cannot reach <var>(D_h,D_w)</var>, print <code>-1</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 4\n1 1\n4 4\n..#.\n..#.\n.#..\n.#..\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>For example, by walking to <var>(2,2)</var> and then using the magic to travel to <var>(4,4)</var>, just one use of magic is enough.</p>\n<p>Note that he cannot walk diagonally.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4\n1 4\n4 1\n.##.\n####\n####\n.##.\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>He cannot move from there.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 4\n2 2\n3 3\n....\n....\n....\n....\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>No use of magic is needed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4 5\n1 2\n2 5\n#.###\n####.\n#..##\n#..##\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>2\n</pre></section>\n</div>\n</span>", "p02580": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a two-dimensional grid with <var>H \\times W</var> squares. There are <var>M</var> targets to destroy in this grid - the position of the <var>i</var>-th target is <var>\\left(h_i, w_i \\right)</var>.</p>\n<p>Takahashi will choose one square in this grid, place a bomb there, and ignite it. The bomb will destroy all targets that are in the row or the column where the bomb is placed. It is possible to place the bomb at a square with a target.</p>\n<p>Takahashi is trying to maximize the number of targets to destroy. Find the maximum number of targets that can be destroyed.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq H, W \\leq 3 \\times 10^5</var></li>\n<li><var>1 \\leq M \\leq \\min\\left(H\\times W, 3 \\times 10^5\\right)</var></li>\n<li><var>1 \\leq h_i \\leq H</var></li>\n<li><var>1 \\leq w_i \\leq W</var></li>\n<li><var>\\left(h_i, w_i\\right) \\neq \\left(h_j, w_j\\right) \\left(i \\neq j\\right)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var> <var>M</var>\n<var>h_1</var> <var>w_1</var>\n<var>\\vdots</var>\n<var>h_M</var> <var>w_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 3\n2 2\n1 1\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>We can destroy all the targets by placing the bomb at <var>\\left(1, 2\\right)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3 4\n3 3\n3 1\n1 1\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 5 10\n2 5\n4 3\n2 3\n5 5\n2 2\n5 4\n5 3\n5 1\n3 5\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n</pre></section>\n</div>\n</span>", "p02578": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> persons are standing in a row. The height of the <var>i</var>-th person from the front is <var>A_i</var>.</p>\n<p>We want to have each person stand on a stool of some heights - at least zero - so that the following condition is satisfied for every person:</p>\n<p>Condition: Nobody in front of the person is taller than the person. Here, the height of a person includes the stool.</p>\n<p>Find the minimum total height of the stools needed to meet this goal.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total height of the stools needed to meet the goal.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n2 1 5 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>If the persons stand on stools of heights <var>0</var>, <var>1</var>, <var>0</var>, <var>1</var>, and <var>2</var>, respectively, their heights will be <var>2</var>, <var>2</var>, <var>5</var>, <var>5</var>, and <var>5</var>, satisfying the condition.</p>\n<p>We cannot meet the goal with a smaller total height of the stools.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n3 3 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Giving a stool of height <var>0</var> to everyone will work.</p></section>\n</div>\n</span>", "p02581": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>3N</var> cards arranged in a row from left to right, where each card has an integer between <var>1</var> and <var>N</var> (inclusive) written on it. The integer written on the <var>i</var>-th card from the left is <var>A_i</var>.</p>\n<p>You will do the following operation <var>N-1</var> times:</p>\n<ul>\n<li>Rearrange the five leftmost cards in any order you like, then remove the three leftmost cards. If the integers written on those three cards are all equal, you gain <var>1</var> point.</li>\n</ul>\n<p>After these <var>N-1</var> operations, if the integers written on the remaining three cards are all equal, you will gain <var>1</var> additional point.</p>\n<p>Find the maximum number of points you can gain.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2000</var></li>\n<li><var>1 \\leq A_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_{3N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of points you can gain.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 2 1 2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Let us rearrange the five leftmost cards so that the integers written on the six cards will be <var>2\\ 2\\ 2\\ 1\\ 1\\ 1</var> from left to right.</p>\n<p>Then, remove the three leftmost cards, all of which have the same integer <var>2</var>, gaining <var>1</var> point.</p>\n<p>Now, the integers written on the remaining cards are <var>1\\ 1\\ 1</var>.</p>\n<p>Since these three cards have the same integer <var>1</var>, we gain <var>1</var> more point.</p>\n<p>In this way, we can gain <var>2</var> points - which is the maximum possible.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1 2 2 3 3 3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n1 1 2 2 2 3 3 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02583": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have sticks numbered <var>1, \\cdots, N</var>. The length of Stick <var>i</var> <var>(1 \\leq i \\leq N)</var> is <var>L_i</var>.</p>\n<p>In how many ways can we choose three of the sticks with different lengths that can form a triangle?</p>\n<p>That is, find the number of triples of integers <var>(i, j, k)</var> <var>(1 \\leq i &lt; j &lt; k \\leq N)</var> that satisfy both of the following conditions:</p>\n<ul>\n<li><var>L_i</var>, <var>L_j</var>, and <var>L_k</var> are all different.</li>\n<li>There exists a triangle whose sides have lengths <var>L_i</var>, <var>L_j</var>, and <var>L_k</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq L_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>L_1</var> <var>L_2</var> <var>\\cdots</var> <var>L_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to choose three of the sticks with different lengths that can form a triangle.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n4 4 9 7 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>The following five triples <var>(i, j, k)</var> satisfy the conditions: <var>(1, 3, 4)</var>, <var>(1, 4, 5)</var>, <var>(2, 3, 4)</var>, <var>(2, 4, 5)</var>, and <var>(3, 4, 5)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n4 5 4 3 3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre>\n<p>We have two sticks for each of the lengths <var>3</var>, <var>4</var>, and <var>5</var>. To satisfy the first condition, we have to choose one from each length.</p>\n<p>There is a triangle whose sides have lengths <var>3</var>, <var>4</var>, and <var>5</var>, so we have <var>2 ^ 3 = 8</var> triples <var>(i, j, k)</var> that satisfy the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n9 4 6 1 9 6 10 6 6 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>39\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>2\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0\n</pre>\n<p>No triple <var>(i, j, k)</var> satisfies <var>1 \\leq i &lt; j &lt; k \\leq N</var>, so we should print <var>0</var>.</p></section>\n</div>\n</span>", "p02582": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have weather records at AtCoder Town for some consecutive three days. A string of length <var>3</var>, <var>S</var>, represents the records - if the <var>i</var>-th character is <code>S</code>, it means it was sunny on the <var>i</var>-th day; if that character is <code>R</code>, it means it was rainy on that day.</p>\n<p>Find the maximum number of consecutive rainy days in this period.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>|S| = 3</var></li>\n<li>Each character of <var>S</var> is <code>S</code> or <code>R</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of consecutive rainy days in the period.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>RRS\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>We had rain on the <var>1</var>-st and <var>2</var>-nd days in the period. Here, the maximum number of consecutive rainy days is <var>2</var>, so we should print <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>SSS\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>It was sunny throughout the period. We had no rainy days, so we should print <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>RSR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n<p>We had rain on the <var>1</var>-st and <var>3</var>-rd days - two \"streaks\" of one rainy day, so we should print <var>1</var>.</p></section>\n</div>\n</span>", "p02585": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi will play a game using a piece on an array of squares numbered <var>1, 2, \\cdots, N</var>. Square <var>i</var> has an integer <var>C_i</var> written on it. Also, he is given a permutation of <var>1, 2, \\cdots, N</var>: <var>P_1, P_2, \\cdots, P_N</var>.</p>\n<p>Now, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between <var>1</var> and <var>K</var> (inclusive):</p>\n<ul>\n<li>In one move, if the piece is now on Square <var>i</var> <var>(1 \\leq i \\leq N)</var>, move it to Square <var>P_i</var>. Here, his score increases by <var>C_{P_i}</var>.</li>\n</ul>\n<p>Help him by finding the maximum possible score at the end of the game. (The score is <var>0</var> at the beginning of the game.)</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 5000</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>1 \\leq P_i \\leq N</var></li>\n<li><var>P_i \\neq i</var></li>\n<li><var>P_1, P_2, \\cdots, P_N</var> are all different.</li>\n<li><var>-10^9 \\leq C_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>P_1</var> <var>P_2</var> <var>\\cdots</var> <var>P_N</var>\n<var>C_1</var> <var>C_2</var> <var>\\cdots</var> <var>C_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible score at the end of the game.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2\n2 4 5 1 3\n3 4 -10 -8 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>When we start at some square of our choice and make at most two moves, we have the following options:</p>\n<ul>\n<li>If we start at Square <var>1</var>, making one move sends the piece to Square <var>2</var>, after which the score is <var>4</var>. Making another move sends the piece to Square <var>4</var>, after which the score is <var>4 + (-8) = -4</var>.</li>\n<li>If we start at Square <var>2</var>, making one move sends the piece to Square <var>4</var>, after which the score is <var>-8</var>. Making another move sends the piece to Square <var>1</var>, after which the score is <var>-8 + 3 = -5</var>.</li>\n<li>If we start at Square <var>3</var>, making one move sends the piece to Square <var>5</var>, after which the score is <var>8</var>. Making another move sends the piece to Square <var>3</var>, after which the score is <var>8 + (-10) = -2</var>.</li>\n<li>If we start at Square <var>4</var>, making one move sends the piece to Square <var>1</var>, after which the score is <var>3</var>. Making another move sends the piece to Square <var>2</var>, after which the score is <var>3 + 4 = 7</var>.</li>\n<li>If we start at Square <var>5</var>, making one move sends the piece to Square <var>3</var>, after which the score is <var>-10</var>. Making another move sends the piece to Square <var>5</var>, after which the score is <var>-10 + 8 = -2</var>.</li>\n</ul>\n<p>The maximum score achieved is <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3\n2 1\n10 -7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>13\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 3\n3 1 2\n-1000 -2000 -3000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1000\n</pre>\n<p>We have to make at least one move.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 58\n9 1 6 7 8 4 3 2 10 5\n695279662 988782657 -119067776 382975538 -151885171 -177220596 -169777795 37619092 389386780 980092719\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>29507023469\n</pre>\n<p>The absolute value of the answer may be enormous.</p></section>\n</div>\n</span>", "p02587": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> strings of lowercase English letters: <var>S_1, S_2, \\cdots, S_N</var>.</p>\n<p>Takahashi wants to make a string that is a palindrome by choosing one or more of these strings - the same string can be chosen more than once - and concatenating them in some order of his choice.</p>\n<p>The cost of using the string <var>S_i</var> once is <var>C_i</var>, and the cost of using it multiple times is <var>C_i</var> multiplied by that number of times.</p>\n<p>Find the minimum total cost needed to choose strings so that Takahashi can make a palindrome.</p>\n<p>If there is no choice of strings in which he can make a palindrome, print <var>-1</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq |S_i| \\leq 20</var></li>\n<li><var>S_i</var> consists of lowercase English letters.</li>\n<li><var>1 \\leq C_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_1</var> <var>C_1</var>\n<var>S_2</var> <var>C_2</var>\n<var>:</var>\n<var>S_N</var> <var>C_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total cost needed to choose strings so that Takahashi can make a palindrome, or <var>-1</var> if there is no such choice.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\nba 3\nabc 4\ncbaa 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>We have <code>ba</code>, <code>abc</code>, and <code>cbaa</code>.</p>\n<p>For example, we can use <code>ba</code> once and <code>abc</code> once for a cost of <var>7</var>, then concatenate them in the order <code>abc</code>, <code>ba</code> to make a palindrome.\nAlso, we can use <code>abc</code> once and <code>cbaa</code> once for a cost of <var>9</var>, then concatenate them in the order <code>cbaa</code>, <code>abc</code> to make a palindrome.</p>\n<p>We cannot make a palindrome for a cost less than <var>7</var>, so we should print <var>7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\nabcab 5\ncba 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>11\n</pre>\n<p>We can choose <code>abcab</code> once and <code>cba</code> twice, then concatenate them in the order <code>abcab</code>, <code>cba</code>, <code>cba</code> to make a palindrome for a cost of <var>11</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\nab 5\ncba 3\na 12\nab 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre>\n<p>We can choose <code>a</code> once, which is already a palindrome, but it is cheaper to concatenate <code>ab</code> and <code>cba</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>2\nabc 1\nab 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>-1\n</pre>\n<p>We cannot make a palindrome, so we should print <var>-1</var>.</p></section>\n</div>\n</span>", "p02588": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N</var> real values <var>A_1, A_2, \\ldots, A_N</var>.\nCompute the number of pairs of indices <var>(i, j)</var>\n    such that <var>i &lt; j</var> and the product <var>A_i \\cdot A_j</var> is integer.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200\\,000</var></li>\n<li><var>0 &lt; A_i &lt; 10^4</var></li>\n<li><var>A_i</var> is given with at most 9 digits after the decimal.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format.</p>\n<pre><var>N</var>\n<var>A_1</var>\n<var>A_2</var>\n<var>\\vdots</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of pairs with integer product <var>A_i \\cdot A_j</var> (and <var>i &lt; j</var>).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n7.5\n2.4\n17.000000001\n17\n16.000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>There are 3 pairs with integer product:</p>\n<ul>\n<li><var>7.5 \\cdot 2.4 = 18</var></li>\n<li><var>7.5 \\cdot 16 = 120</var></li>\n<li><var>17 \\cdot 16 = 272</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>11\n0.9\n1\n1\n1.25\n2.30000\n5\n70\n0.000000001\n9999.999999999\n0.999999999\n1.000000001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre></section>\n</div>\n</span>", "p02589": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Limak can repeatedly remove one of the first two characters of a string,\n    for example <var>abcxyx \\rightarrow acxyx \\rightarrow cxyx \\rightarrow cyx</var>.</p>\n<p>You are given <var>N</var> different strings <var>S_1, S_2, \\ldots, S_N</var>.\nAmong <var>N \\cdot (N-1) / 2</var> pairs <var>(S_i, S_j)</var>,\n    in how many pairs could Limak obtain one string from the other?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200\\,000</var></li>\n<li><var>S_i</var> consists of lowercase English letters <code>a</code>-<code>z</code>.</li>\n<li><var>S_i \\neq S_j</var></li>\n<li><var>1 \\leq |S_i|</var></li>\n<li><var>|S_1| + |S_2| + \\ldots + |S_N| \\leq 10^6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format.</p>\n<pre><var>N</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>\\vdots</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of unordered pairs <var>(S_i, S_j)</var>\n    where <var>i \\neq j</var> and Limak can obtain one string from the other.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\nabcxyx\ncyx\nabc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The only good pair is <var>(abcxyx, cyx)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\nb\na\nabc\nc\nd\nab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>There are five good pairs: <var>(b, abc)</var>, <var>(a, abc)</var>, <var>(abc, c)</var>, <var>(b, ab)</var>, <var>(a, ab)</var>.</p></section>\n</div>\n</span>", "p02586": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>K</var> items placed on a grid of squares with <var>R</var> rows and <var>C</var> columns. Let <var>(i, j)</var> denote the square at the <var>i</var>-th row (<var>1 \\leq i \\leq R</var>) and the <var>j</var>-th column (<var>1 \\leq j \\leq C</var>). The <var>i</var>-th item is at <var>(r_i, c_i)</var> and has the value <var>v_i</var>.</p>\n<p>Takahashi will begin at <var>(1, 1)</var>, the start, and get to <var>(R, C)</var>, the goal. When he is at <var>(i, j)</var>, he can move to <var>(i + 1, j)</var> or <var>(i, j + 1)</var> (but cannot move to a non-existent square).</p>\n<p>He can pick up items on the squares he visits, including the start and the goal, but at most three for each row. It is allowed to ignore the item on a square he visits.</p>\n<p>Find the maximum possible sum of the values of items he picks up.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq R, C \\leq 3000</var></li>\n<li><var>1 \\leq K \\leq \\min(2 \\times 10^5, R \\times C)</var></li>\n<li><var>1 \\leq r_i \\leq R</var></li>\n<li><var>1 \\leq c_i \\leq C</var></li>\n<li><var>(r_i, c_i) \\neq (r_j, c_j) (i \\neq j)</var></li>\n<li><var>1 \\leq v_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>R</var> <var>C</var> <var>K</var>\n<var>r_1</var> <var>c_1</var> <var>v_1</var>\n<var>r_2</var> <var>c_2</var> <var>v_2</var>\n<var>:</var>\n<var>r_K</var> <var>c_K</var> <var>v_K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the values of items Takahashi picks up.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 3\n1 1 3\n2 1 4\n1 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>He has two ways to get to the goal:</p>\n<ul>\n<li>Visit <var>(1, 1)</var>, <var>(1, 2)</var>, and <var>(2, 2)</var>, in this order. In this case, the total value of the items he can pick up is <var>3 + 5 = 8</var>.</li>\n<li>Visit <var>(1, 1)</var>, <var>(2, 1)</var>, and <var>(2, 2)</var>, in this order. In this case, the total value of the items he can pick up is <var>3 + 4 = 7</var>.</li>\n</ul>\n<p>Thus, the maximum possible sum of the values of items he picks up is <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 5 5\n1 1 3\n2 4 20\n1 2 1\n1 3 4\n1 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>29\n</pre>\n<p>We have four items in the <var>1</var>-st row. The optimal choices are as follows:</p>\n<ul>\n<li>Visit <var>(1, 1)</var> <var>(1, 2)</var>, <var>(1, 3)</var>, <var>(1, 4)</var>, <var>(2, 4)</var>, and <var>(2, 5)</var>, in this order, and pick up all items except the one on <var>(1, 2)</var>. Then, the total value of the items he picks up will be <var>3 + 4 + 2 + 20 = 29</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 5 10\n2 5 12\n1 5 12\n2 3 15\n1 2 20\n1 1 28\n2 4 26\n3 2 27\n4 5 21\n3 5 10\n1 3 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>142\n</pre></section>\n</div>\n</span>", "p02594": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You will turn on the air conditioner if, and only if, the temperature of the room is <var>30</var> degrees Celsius or above.</p>\n<p>The current temperature of the room is <var>X</var> degrees Celsius. Will you turn on the air conditioner?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>-40 \\leq X \\leq 40</var></li>\n<li><var>X</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Yes</code> if you will turn on the air conditioner; print <code>No</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>25\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02595": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> points in the two-dimensional plane. The coordinates of the <var>i</var>-th point are <var>(X_i,Y_i)</var>.</p>\n<p>Among them, we are looking for the points such that the distance from the origin is at most <var>D</var>. How many such points are there?</p>\n<p>We remind you that the distance between the origin and the point <var>(p, q)</var> can be represented as <var>\\sqrt{p^2+q^2}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>0 \\leq D \\leq 2\\times 10^5</var></li>\n<li><var>|X_i|,|Y_i| \\leq 2\\times 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>D</var>\n<var>X_1</var> <var>Y_1</var>\n<var>\\vdots</var>\n<var>X_N</var> <var>Y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the number of points such that the distance from the origin is at most <var>D</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n0 5\n-2 4\n3 4\n4 -4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The distance between the origin and each of the given points is as follows:</p>\n<ul>\n<li><var>\\sqrt{0^2+5^2}=5</var></li>\n<li><var>\\sqrt{(-2)^2+4^2}=4.472\\ldots</var></li>\n<li><var>\\sqrt{3^2+4^2}=5</var></li>\n<li><var>\\sqrt{4^2+(-4)^2}=5.656\\ldots</var></li>\n</ul>\n<p>Thus, we have three points such that the distance from the origin is at most <var>5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>12 3\n1 1\n1 1\n1 1\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n<p>Multiple points may exist at the same coordinates.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20 100000\n14309 -32939\n-56855 100340\n151364 25430\n103789 -113141\n147404 -136977\n-37006 -30929\n188810 -49557\n13419 70401\n-88280 165170\n-196399 137941\n-176527 -61904\n46659 115261\n-153551 114185\n98784 -6820\n94111 -86268\n-30401 61477\n-55056 7872\n5901 -163796\n138819 -185986\n-69848 -96669\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n</pre></section>\n</div>\n</span>", "p02597": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>An altar enshrines <var>N</var> stones arranged in a row from left to right. The color of the <var>i</var>-th stone from the left <var>(1 \\leq i \\leq N)</var> is given to you as a character <var>c_i</var>; <code>R</code> stands for red and <code>W</code> stands for white.</p>\n<p>You can do the following two kinds of operations any number of times in any order:</p>\n<ul>\n<li>Choose two stones (not necessarily adjacent) and swap them.</li>\n<li>Choose one stone and change its color (from red to white and vice versa).</li>\n</ul>\n<p>According to a fortune-teller, a white stone placed to the immediate left of a red stone will bring a disaster. At least how many operations are needed to reach a situation without such a white stone?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200000</var></li>\n<li><var>c_i</var> is <code>R</code> or <code>W</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>c_{1}c_{2}...c_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the minimum number of operations needed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\nWWRR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, the two operations below will achieve the objective.</p>\n<ul>\n<li>Swap the <var>1</var>-st and <var>3</var>-rd stones from the left, resulting in <code>RWWR</code>.</li>\n<li>Change the color of the <var>4</var>-th stone from the left, resulting in <code>RWWW</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\nRR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>It can be the case that no operation is needed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\nWRWWRWRR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02596": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi loves the number <var>7</var> and multiples of <var>K</var>.</p>\n<p>Where is the first occurrence of a multiple of <var>K</var> in the sequence <var>7,77,777,\\ldots</var>? (Also see Output and Sample Input/Output below.)</p>\n<p>If the sequence contains no multiples of <var>K</var>, print <code>-1</code> instead.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 10^6</var></li>\n<li><var>K</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the position of the first occurrence of a multiple of <var>K</var>. (For example, if the first occurrence is the fourth element of the sequence, print <code>4</code>.)</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>None of <var>7</var>, <var>77</var>, and <var>777</var> is a multiple of <var>101</var>, but <var>7777</var> is.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>All elements in the sequence are odd numbers; there are no multiples of <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>999983\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>999982\n</pre></section>\n</div>\n</span>", "p02598": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> logs of lengths <var>A_1,A_2,\\cdots A_N</var>.</p>\n<p>We can cut these logs at most <var>K</var> times in total. When a log of length <var>L</var> is cut at a point whose distance from an end of the log is <var>t</var> <var>(0&lt;t&lt;L)</var>, it becomes two logs of lengths <var>t</var> and <var>L-t</var>.</p>\n<p>Find the shortest possible length of the longest log after at most <var>K</var> cuts, and print it after rounding up to an integer.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq K \\leq 10^9</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n7 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<ul>\n<li>First, we will cut the log of length <var>7</var> at a point whose distance from an end of the log is <var>3.5</var>, resulting in two logs of length <var>3.5</var> each.</li>\n<li>Next, we will cut the log of length <var>9</var> at a point whose distance from an end of the log is <var>3</var>, resulting in two logs of length <var>3</var> and <var>6</var>.</li>\n<li>Lastly, we will cut the log of length <var>6</var> at a point whose distance from an end of the log is <var>3.3</var>, resulting in two logs of length <var>3.3</var> and <var>2.7</var>.</li>\n</ul>\n<p>In this case, the longest length of a log will be <var>3.5</var>, which is the shortest possible result. After rounding up to an integer, the output should be <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 0\n3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 10\n158260522 877914575 602436426 24979445 861648772 623690081 433933447 476190629 262703497 211047202\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>292638192\n</pre></section>\n</div>\n</span>", "p02600": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>M-kun is a competitor in AtCoder, whose highest rating is <var>X</var>.<br/>\nIn this site, a competitor is given a <em>kyu</em> (class) according to his/her highest rating. For ratings from <var>400</var> through <var>1999</var>, the following kyus are given:</p>\n<ul>\n<li>From <var>400</var> through <var>599</var>: <var>8</var>-kyu</li>\n<li>From <var>600</var> through <var>799</var>: <var>7</var>-kyu</li>\n<li>From <var>800</var> through <var>999</var>: <var>6</var>-kyu</li>\n<li>From <var>1000</var> through <var>1199</var>: <var>5</var>-kyu</li>\n<li>From <var>1200</var> through <var>1399</var>: <var>4</var>-kyu</li>\n<li>From <var>1400</var> through <var>1599</var>: <var>3</var>-kyu</li>\n<li>From <var>1600</var> through <var>1799</var>: <var>2</var>-kyu</li>\n<li>From <var>1800</var> through <var>1999</var>: <var>1</var>-kyu</li>\n</ul>\n<p>What kyu does M-kun have?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>400 \\leq X \\leq 1999</var></li>\n<li><var>X</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the kyu M-kun has, as an integer.\nFor example, if he has <var>8</var>-kyu, print <code>8</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>725\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>M-kun's highest rating is <var>725</var>, which corresponds to <var>7</var>-kyu.<br/>\nThus, <code>7</code> is the correct output.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1600\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p>M-kun's highest rating is <var>1600</var>, which corresponds to <var>2</var>-kyu.<br/>\nThus, <code>2</code> is the correct output.</p></section>\n</div>\n</span>", "p02601": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>M-kun has the following three cards:</p>\n<ul>\n<li>A red card with the integer <var>A</var>.</li>\n<li>A green card with the integer <var>B</var>.</li>\n<li>A blue card with the integer <var>C</var>.</li>\n</ul>\n<p>He is a genius magician who can do the following operation at most <var>K</var> times:</p>\n<ul>\n<li>Choose one of the three cards and multiply the written integer by <var>2</var>.</li>\n</ul>\n<p>His magic is successful if both of the following conditions are satisfied after the operations:</p>\n<ul>\n<li>The integer on the green card is <strong>strictly</strong> greater than the integer on the red card.</li>\n<li>The integer on the blue card is <strong>strictly</strong> greater than the integer on the green card.</li>\n</ul>\n<p>Determine whether the magic can be successful.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq A, B, C \\leq 7</var></li>\n<li><var>1 \\leq K \\leq 7</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n<var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If the magic can be successful, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7 2 5\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>The magic will be successful if, for example, he does the following operations:</p>\n<ul>\n<li>First, choose the blue card. The integers on the red, green, and blue cards are now <var>7</var>, <var>2</var>, and <var>10</var>, respectively.</li>\n<li>Second, choose the green card. The integers on the red, green, and blue cards are now <var>7</var>, <var>4</var>, and <var>10</var>, respectively.</li>\n<li>Third, choose the green card. The integers on the red, green, and blue cards are now <var>7</var>, <var>8</var>, and <var>10</var>, respectively.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 4 2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>He has no way to succeed in the magic with at most three operations.</p></section>\n</div>\n</span>", "p02599": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> colored balls arranged in a row from left to right; the color of the <var>i</var>-th ball from the left is <var>c_i</var>.</p>\n<p>You are given <var>Q</var> queries. The <var>i</var>-th query is as follows: how many different colors do the <var>l_i</var>-th through <var>r_i</var>-th balls from the left have?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq N,Q \\leq 5 \\times 10^5</var></li>\n<li><var>1\\leq c_i \\leq N</var></li>\n<li><var>1\\leq l_i \\leq r_i \\leq N</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>c_1</var> <var>c_2</var> <var>\\cdots</var> <var>c_N</var>\n<var>l_1</var> <var>r_1</var>\n<var>l_2</var> <var>r_2</var>\n<var>:</var>\n<var>l_Q</var> <var>r_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines. The <var>i</var>-th line should contain the response to the <var>i</var>-th query.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n1 2 1 3\n1 3\n2 4\n3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n3\n1\n</pre>\n<ul>\n<li>The <var>1</var>-st, <var>2</var>-nd, and <var>3</var>-rd balls from the left have the colors <var>1</var>, <var>2</var>, and <var>1</var> - two different colors.</li>\n<li>The <var>2</var>-st, <var>3</var>-rd, and <var>4</var>-th balls from the left have the colors <var>2</var>, <var>1</var>, and <var>3</var> - three different colors.</li>\n<li>The <var>3</var>-rd ball from the left has the color <var>1</var> - just one color.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 10\n2 5 6 5 2 1 7 9 7 2\n5 5\n2 4\n6 7\n2 2\n7 8\n7 9\n1 8\n6 9\n8 10\n6 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n2\n2\n1\n2\n2\n6\n3\n3\n3\n</pre></section>\n</div>\n</span>", "p02602": "<span class=\"lang-en\">\n<p>Score: <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>M-kun is a student in Aoki High School, where a year is divided into <var>N</var> terms.<br/>\nThere is an exam at the end of each term. According to the scores in those exams, a student is given a grade for each term, as follows:</p>\n<ul>\n<li>For the first through <var>(K-1)</var>-th terms: not given.</li>\n<li>For each of the <var>K</var>-th through <var>N</var>-th terms: the multiplication of the scores in the last <var>K</var> exams, including the exam in the graded term.</li>\n</ul>\n<p>M-kun scored <var>A_i</var> in the exam at the end of the <var>i</var>-th term.<br/>\nFor each <var>i</var> such that <var>K+1 \\leq i \\leq N</var>, determine whether his grade for the <var>i</var>-th term is <strong>strictly</strong> greater than the grade for the <var>(i-1)</var>-th term.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>2 \\leq N \\leq 200000</var></li>\n<li><var>1 \\leq K \\leq N-1</var></li>\n<li><var>1 \\leq A_i \\leq 10^{9}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>A_3</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer in <var>N-K</var> lines.<br/>\nThe <var>i</var>-th line should contain <code>Yes</code> if the grade for the <var>(K+i)</var>-th term is greater than the grade for the <var>(K+i-1)</var>-th term, and <code>No</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n96 98 95 100 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\nNo\n</pre>\n<p>His grade for each term is computed as follows:</p>\n<ul>\n<li><var>3</var>-rd term: <var>(96 \\times 98 \\times 95) = 893760</var></li>\n<li><var>4</var>-th term: <var>(98 \\times 95 \\times 100) = 931000</var></li>\n<li><var>5</var>-th term: <var>(95 \\times 100 \\times 20) = 190000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n1001 869120 1001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>Note that the output should be <code>No</code> if the grade for the <var>3</var>-rd term is equal to the grade for the <var>2</var>-nd term.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15 7\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\nYes\nNo\nYes\nYes\nNo\nYes\nYes\n</pre></section>\n</div>\n</span>", "p02605": "<span class=\"lang-en\">\n<p>Score: <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>M-kun is a brilliant air traffic controller.</p>\n<p>On the display of his radar, there are <var>N</var> airplanes numbered <var>1, 2, ..., N</var>, all flying at the same altitude.<br/>\nEach of the airplanes flies at a constant speed of <var>0.1</var> per second in a constant direction. The current coordinates of the airplane numbered <var>i</var> are <var>(X_i, Y_i)</var>, and the direction of the airplane is as follows:</p>\n<ul>\n<li>if <var>U_i</var> is <code>U</code>, it flies in the positive <var>y</var> direction;</li>\n<li>if <var>U_i</var> is <code>R</code>, it flies in the positive <var>x</var> direction;</li>\n<li>if <var>U_i</var> is <code>D</code>, it flies in the negative <var>y</var> direction;</li>\n<li>if <var>U_i</var> is <code>L</code>, it flies in the negative <var>x</var> direction.</li>\n</ul>\n<p>To help M-kun in his work, determine whether there is a pair of airplanes that will collide with each other if they keep flying as they are now.<br/>\nIf there is such a pair, find the number of seconds after which the first collision will happen.<br/>\nWe assume that the airplanes are negligibly small so that two airplanes only collide when they reach the same coordinates simultaneously.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 200000</var></li>\n<li><var>0 \\leq X_i, Y_i \\leq 200000</var></li>\n<li><var>U_i</var> is <code>U</code>, <code>R</code>, <code>D</code>, or <code>L</code>.</li>\n<li>The current positions of the <var>N</var> airplanes, <var>(X_i, Y_i)</var>, are all distinct.</li>\n<li><var>N</var>, <var>X_i</var>, and <var>Y_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>Y_1</var> <var>U_1</var>\n<var>X_2</var> <var>Y_2</var> <var>U_2</var>\n<var>X_3</var> <var>Y_3</var> <var>U_3</var>\n<var>:</var>\n<var>X_N</var> <var>Y_N</var> <var>U_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If there is a pair of airplanes that will collide with each other if they keep flying as they are now, print an integer representing the number of seconds after which the first collision will happen.<br/>\nIf there is no such pair, print <code>SAFE</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n11 1 U\n11 47 D\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>230\n</pre>\n<p>If the airplanes keep flying as they are now, two airplanes numbered <var>1</var> and <var>2</var> will reach the coordinates <var>(11, 24)</var> simultaneously and collide.  </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n20 30 U\n30 20 R\n20 10 D\n10 20 L\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>SAFE\n</pre>\n<p>No pair of airplanes will collide.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\n168 224 U\n130 175 R\n111 198 D\n121 188 L\n201 116 U\n112 121 R\n145 239 D\n185 107 L\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100\n</pre></section>\n</div>\n</span>", "p02603": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>To become a millionaire, M-kun has decided to make money by trading in the next <var>N</var> days. Currently, he has <var>1000</var> yen and no stocks - only one kind of stock is issued in the country where he lives.</p>\n<p>He is famous across the country for his ability to foresee the future. He already knows that the price of one stock in the next <var>N</var> days will be as follows:</p>\n<ul>\n<li><var>A_1</var> yen on the <var>1</var>-st day, <var>A_2</var> yen on the <var>2</var>-nd day, ..., <var>A_N</var> yen on the <var>N</var>-th day.</li>\n</ul>\n<p>In the <var>i</var>-th day, M-kun can make the following trade <strong>any number of times</strong> (possibly zero), <strong>within the amount of money and stocks that he has at the time</strong>.</p>\n<ul>\n<li>Buy stock: Pay <var>A_i</var> yen and receive one stock.</li>\n<li>Sell stock: Sell one stock for <var>A_i</var> yen.</li>\n</ul>\n<p>What is the maximum possible amount of money that M-kun can have in the end by trading optimally?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>2 \\leq N \\leq 80</var></li>\n<li><var>100 \\leq A_i \\leq 200</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the maximum possible amount of money that M-kun can have in the end, as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n100 130 130 130 115 115 150\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1685\n</pre>\n<p>In this sample input, M-kun has seven days of trading. One way to have <var>1685</var> yen in the end is as follows:</p>\n<ul>\n<li>Initially, he has <var>1000</var> yen and no stocks.</li>\n<li>Day <var>1</var>: Buy <var>10</var> stocks for <var>1000</var> yen. Now he has <var>0</var> yen.</li>\n<li>Day <var>2</var>: Sell <var>7</var> stocks for <var>910</var> yen. Now he has <var>910</var> yen.</li>\n<li>Day <var>3</var>: Sell <var>3</var> stocks for <var>390</var> yen. Now he has <var>1300</var> yen.</li>\n<li>Day <var>4</var>: Do nothing.</li>\n<li>Day <var>5</var>: Buy <var>1</var> stock for <var>115</var> yen. Now he has <var>1185</var> yen.</li>\n<li>Day <var>6</var>: Buy <var>10</var> stocks for <var>1150</var> yen. Now he has <var>35</var> yen.</li>\n<li>Day <var>7</var>: Sell <var>11</var> stocks for <var>1650</var> yen. Now he has <var>1685</var> yen.</li>\n</ul>\n<p>There is no way to have <var>1686</var> yen or more in the end, so the answer is <var>1685</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n200 180 160 140 120 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1000\n</pre>\n<p>In this sample input, it is optimal to do nothing throughout the six days, after which we will have <var>1000</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n157 193\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1216\n</pre>\n<p>In this sample input, it is optimal to buy <var>6</var> stocks in Day <var>1</var> and sell them in Day <var>2</var>, after which we will have <var>1216</var> yen.</p></section>\n</div>\n</span>", "p02606": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>How many multiples of <var>d</var> are there among the integers between <var>L</var> and <var>R</var> (inclusive)?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq L \\leq R \\leq 100</var></li>\n<li><var>1 \\leq d \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>L</var> <var>R</var> <var>d</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of multiples of <var>d</var> among the integers between <var>L</var> and <var>R</var> (inclusive).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 10 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<ul>\n<li>Among the integers between <var>5</var> and <var>10</var>, there are three multiples of <var>2</var>: <var>6</var>, <var>8</var>, and <var>10</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 20 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<ul>\n<li>Among the integers between <var>6</var> and <var>20</var>, there are two multiples of <var>7</var>: <var>7</var> and <var>14</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 100 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100\n</pre></section>\n</div>\n</span>", "p02608": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>f(n)</var> be the number of triples of integers <var>(x,y,z)</var> that satisfy both of the following conditions:</p>\n<ul>\n<li><var>1 \\leq x,y,z</var></li>\n<li><var>x^2 + y^2 + z^2 + xy + yz + zx = n</var></li>\n</ul>\n<p>Given an integer <var>N</var>, find each of <var>f(1),f(2),f(3),\\ldots,f(N)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^4</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines. The <var>i</var>-th line should contain the value <var>f(i)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n3\n3\n0\n0\n</pre>\n<ul>\n<li>For <var>n=6</var>, only <var>(1,1,1)</var> satisfies both of the conditions. Thus, <var>f(6) = 1</var>.</li>\n<li>For <var>n=11</var>, three triples, <var>(1,1,2)</var>, <var>(1,2,1)</var>, and <var>(2,1,1)</var>, satisfy both of the conditions. Thus, <var>f(6) = 3</var>.</li>\n<li>For <var>n=17</var>, three triples, <var>(1,2,2)</var>, <var>(2,1,2)</var>, and <var>(2,2,1)</var>, satisfy both of the conditions. Thus, <var>f(17) = 3</var>.</li>\n<li>For <var>n=18</var>, three triples, <var>(1,1,3)</var>, <var>(1,3,1)</var>, and <var>(3,1,1)</var>, satisfy both of the conditions. Thus, <var>f(18) = 3</var>.</li>\n</ul></section>\n</div>\n</span>", "p02609": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>\\mathrm{popcount}(n)</var> be the number of <code>1</code>s in the binary representation of <var>n</var>.\nFor example, <var>\\mathrm{popcount}(3) = 2</var>, <var>\\mathrm{popcount}(7) = 3</var>, and <var>\\mathrm{popcount}(0) = 0</var>.</p>\n<p>Let <var>f(n)</var> be the number of times the following operation will be done when we repeat it until <var>n</var> becomes <var>0</var>: \"replace <var>n</var> with the remainder when <var>n</var> is divided by <var>\\mathrm{popcount}(n)</var>.\" (It can be proved that, under the constraints of this problem, <var>n</var> always becomes <var>0</var> after a finite number of operations.)</p>\n<p>For example, when <var>n=7</var>, it becomes <var>0</var> after two operations, as follows:</p>\n<ul>\n<li><var>\\mathrm{popcount}(7)=3</var>, so we divide <var>7</var> by <var>3</var> and replace it with the remainder, <var>1</var>.</li>\n<li><var>\\mathrm{popcount}(1)=1</var>, so we divide <var>1</var> by <var>1</var> and replace it with the remainder, <var>0</var>.</li>\n</ul>\n<p>You are given an integer <var>X</var> with <var>N</var> digits in binary.\nFor each integer <var>i</var> such that <var>1 \\leq i \\leq N</var>, let <var>X_i</var> be what <var>X</var> becomes when the <var>i</var>-th bit from the top is inverted.\nFind <var>f(X_1), f(X_2), \\ldots, f(X_N)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>X</var> is an integer with <var>N</var> digits in binary, possibly with leading zeros.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines. The <var>i</var>-th line should contain the value <var>f(X_i)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n011\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n1\n1\n</pre>\n<ul>\n<li><var>X_1 = 7</var>, which will change as follows: <var>7 \\rightarrow 1 \\rightarrow 0</var>. Thus, <var>f(7) = 2</var>.</li>\n<li><var>X_2 = 1</var>, which will change as follows: <var>1 \\rightarrow 0</var>. Thus, <var>f(1) = 1</var>.</li>\n<li><var>X_3 = 2</var>, which will change as follows: <var>2 \\rightarrow 0</var>. Thus, <var>f(2) = 1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>23\n00110111001011011001110\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n1\n2\n2\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n3\n</pre></section>\n</div>\n</span>", "p02607": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> squares assigned the numbers <var>1,2,3,\\ldots,N</var>. Each square has an integer written on it, and the integer written on Square <var>i</var> is <var>a_i</var>.</p>\n<p>How many squares <var>i</var> satisfy both of the following conditions?</p>\n<ul>\n<li>The assigned number, <var>i</var>, is odd.</li>\n<li>The written integer is odd.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N, a_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>\\cdots</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of squares that satisfy both of the conditions.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 3 4 5 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<ul>\n<li>Two squares, Square <var>1</var> and <var>5</var>, satisfy both of the conditions.</li>\n<li>For Square <var>2</var> and <var>4</var>, the assigned numbers are not odd.</li>\n<li>For Square <var>3</var>, the written integer is not odd.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>15\n13 76 46 15 50 98 93 77 31 43 84 90 6 24 14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02610": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> camels numbered <var>1,2,\\ldots,N</var>.\nSnuke has decided to make them line up in a row.</p>\n<p>The happiness of Camel <var>i</var> will be <var>L_i</var> if it is among the <var>K_i</var> frontmost camels, and <var>R_i</var> otherwise.</p>\n<p>Snuke wants to maximize the total happiness of the camels. Find the maximum possible total happiness of the camel.</p>\n<p>Solve this problem for each of the <var>T</var> test cases given.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq T \\leq 10^5</var></li>\n<li><var>1 \\leq N \\leq 2 \\times 10^{5}</var></li>\n<li><var>1 \\leq K_i \\leq N</var></li>\n<li><var>1 \\leq L_i, R_i \\leq 10^9</var></li>\n<li>The sum of values of <var>N</var> in each input file is at most <var>2 \\times 10^5</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>T</var>\n<var>\\mathrm{case}_1</var>\n<var>\\vdots</var>\n<var>\\mathrm{case}_T</var>\n</pre>\n<p>Each case is given in the following format:</p>\n<pre><var>N</var>\n<var>K_1</var> <var>L_1</var> <var>R_1</var>\n<var>\\vdots</var>\n<var>K_N</var> <var>L_N</var> <var>R_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>T</var> lines. The <var>i</var>-th line should contain the answer to the <var>i</var>-th test case.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2\n1 5 10\n2 15 5\n3\n2 93 78\n1 71 59\n3 57 96\n19\n19 23 16\n5 90 13\n12 85 70\n19 67 78\n12 16 60\n18 48 28\n5 4 24\n12 97 97\n4 57 87\n19 91 74\n18 100 76\n7 86 46\n9 100 57\n3 76 73\n6 84 93\n1 6 84\n11 75 94\n19 15 3\n12 11 34\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>25\n221\n1354\n</pre>\n<ul>\n<li>In the first test case, it is optimal to line up the camels in the order <var>2, 1</var>.<ul>\n<li>Camel <var>1</var> is not the frontmost camel, so its happiness will be <var>10</var>.</li>\n<li>Camel <var>2</var> is among the two frontmost camels, so its happiness will be <var>15</var>.</li>\n</ul>\n</li>\n<li>In the second test case, it is optimal to line up the camels in the order <var>2, 1, 3</var>.<ul>\n<li>Camel <var>1</var> is among the two frontmost camels, so its happiness will be <var>93</var>.</li>\n<li>Camel <var>2</var> is the frontmost camel, so its happiness will be <var>71</var>.</li>\n<li>Camel <var>3</var> is among the three frontmost camels, so its happiness will be <var>57</var>.</li>\n</ul>\n</li>\n</ul></section>\n</div>\n</span>", "p02560": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In this problem, you should process <var>T</var> testcases.</p>\n<p>For each testcase, you are given four integers <var>N, M, A, B</var>.</p>\n<p>Calculate <var>\\sum_{i = 0}^{N - 1} floor((A \\times i + B) / M)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq T \\leq 100,000</var></li>\n<li><var>1 \\leq N, M \\leq 10^9</var></li>\n<li><var>0 \\leq A, B &lt; M</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>T</var>\n<var>N_0</var> <var>M_0</var> <var>A_0</var> <var>B_0</var>\n<var>N_1</var> <var>M_1</var> <var>A_1</var> <var>B_1</var>\n:\n<var>N_{T - 1}</var> <var>M_{T - 1}</var> <var>A_{T - 1}</var> <var>B_{T - 1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer for each testcase.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n4 10 6 3\n6 5 4 3\n1 1 0 0\n31415 92653 58979 32384\n1000000000 1000000000 999999999 999999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n13\n0\n314095480\n499999999500000000\n</pre></section>\n</div>\n</span>", "p02612": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will buy a product for <var>N</var> yen (the currency of Japan) at a shop.</p>\n<p>If we use only <var>1000</var>-yen bills to pay the price, how much change will we receive?</p>\n<p>Assume we use the minimum number of bills required.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10000</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the amount of change as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1900\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>100\n</pre>\n<p>We will use two <var>1000</var>-yen bills to pay the price and receive <var>100</var> yen in change.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>We can pay the exact price.</p></section>\n</div>\n</span>", "p02613": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is participating in a programming contest called AXC002, and he has just submitted his code to Problem A.</p>\n<p>The problem has <var>N</var> test cases.</p>\n<p>For each test case <var>i</var> (<var>1\\leq i \\leq N</var>), you are given a string <var>S_i</var> representing the verdict for that test case. Find the numbers of test cases for which the verdict is <code>AC</code>, <code>WA</code>, <code>TLE</code>, and <code>RE</code>, respectively.</p>\n<p>See the Output section for the output format.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>S_i</var> is <code>AC</code>, <code>WA</code>, <code>TLE</code>, or <code>RE</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_1</var>\n<var>\\vdots</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>C_0</var>, <var>C_1</var>, <var>C_2</var>, and <var>C_3</var> be the numbers of test cases for which the verdict is <code>AC</code>, <code>WA</code>, <code>TLE</code>, and <code>RE</code>, respectively. Print the following:</p>\n<pre>AC x <var>C_0</var>\nWA x <var>C_1</var>\nTLE x <var>C_2</var>\nRE x <var>C_3</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\nAC\nTLE\nAC\nAC\nWA\nTLE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>AC x 3\nWA x 1\nTLE x 2\nRE x 0\n</pre>\n<p>We have <var>3</var>, <var>1</var>, <var>2</var>, and <var>0</var> test case(s) for which the verdict is <code>AC</code>, <code>WA</code>, <code>TLE</code>, and <code>RE</code>, respectively.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>AC x 10\nWA x 0\nTLE x 0\nRE x 0\n</pre></section>\n</div>\n</span>", "p02614": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a grid of <var>H</var> rows and <var>W</var> columns of squares. The color of the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left <var>(1 \\leq i \\leq H, 1 \\leq j \\leq W)</var> is given to you as a character <var>c_{i,j}</var>: the square is white if <var>c_{i,j}</var> is <code>.</code>, and black if <var>c_{i,j}</var> is <code>#</code>.</p>\n<p>Consider doing the following operation:</p>\n<ul>\n<li>Choose some number of rows (possibly zero), and some number of columns (possibly zero). Then, paint red all squares in the chosen rows and all squares in the chosen columns.</li>\n</ul>\n<p>You are given a positive integer <var>K</var>. How many choices of rows and columns result in exactly <var>K</var> black squares remaining after the operation? Here, we consider two choices different when there is a row or column chosen in only one of those choices.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H, W \\leq 6</var></li>\n<li><var>1 \\leq K \\leq HW</var></li>\n<li><var>c_{i,j}</var> is <code>.</code> or <code>#</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var> <var>K</var>\n<var>c_{1,1}c_{1,2}...c_{1,W}</var>\n<var>c_{2,1}c_{2,2}...c_{2,W}</var>\n<var>:</var>\n<var>c_{H,1}c_{H,2}...c_{H,W}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the number of choices of rows and columns satisfying the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 2\n..#\n###\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>Five choices below satisfy the condition.</p>\n<ul>\n<li>The <var>1</var>-st row and <var>1</var>-st column</li>\n<li>The <var>1</var>-st row and <var>2</var>-nd column</li>\n<li>The <var>1</var>-st row and <var>3</var>-rd column</li>\n<li>The <var>1</var>-st and <var>2</var>-nd column</li>\n<li>The <var>3</var>-rd column</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3 4\n..#\n###\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>One choice, which is choosing nothing, satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 2 3\n##\n##\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>6 6 8\n..##..\n.#..#.\n#....#\n######\n#....#\n#....#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>208\n</pre></section>\n</div>\n</span>", "p02617": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a tree with <var>N</var> vertices and <var>N-1</var> edges, respectively numbered <var>1, 2,\\cdots, N</var> and <var>1, 2, \\cdots, N-1</var>. Edge <var>i</var> connects Vertex <var>u_i</var> and <var>v_i</var>.</p>\n<p>For integers <var>L, R</var> (<var>1 \\leq L \\leq R \\leq N</var>), let us define a function <var>f(L, R)</var> as follows:</p>\n<ul>\n<li>Let <var>S</var> be the set of the vertices numbered <var>L</var> through <var>R</var>. <var>f(L, R)</var> represents the number of connected components in the subgraph formed only from the vertex set <var>S</var> and the edges whose endpoints both belong to <var>S</var>.</li>\n</ul>\n<p>Compute <var>\\sum_{L=1}^{N} \\sum_{R=L}^{N} f(L, R)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq u_i, v_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>u_1</var> <var>v_1</var>\n<var>u_2</var> <var>v_2</var>\n<var>:</var>\n<var>u_{N-1}</var> <var>v_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>\\sum_{L=1}^{N} \\sum_{R=L}^{N} f(L, R)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 3\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>We have six possible pairs <var>(L, R)</var> as follows:</p>\n<ul>\n<li>For <var>L = 1, R = 1</var>, <var>S = \\{1\\}</var> and we have <var>1</var> connected component.</li>\n<li>For <var>L = 1, R = 2</var>, <var>S = \\{1, 2\\}</var> and we have <var>2</var> connected components.</li>\n<li>For <var>L = 1, R = 3</var>, <var>S = \\{1, 2, 3\\}</var> and we have <var>1</var> connected component, since <var>S</var> contains both endpoints of each of the edges <var>1, 2</var>.</li>\n<li>For <var>L = 2, R = 2</var>, <var>S = \\{2\\}</var> and we have <var>1</var> connected component.</li>\n<li>For <var>L = 2, R = 3</var>, <var>S = \\{2, 3\\}</var> and we have <var>1</var> connected component, since <var>S</var> contains both endpoints of Edge <var>2</var>.</li>\n<li>For <var>L = 3, R = 3</var>, <var>S = \\{3\\}</var> and we have <var>1</var> connected component.</li>\n</ul>\n<p>The sum of these is <var>7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n5 3\n5 7\n8 9\n1 9\n9 10\n8 4\n7 4\n6 10\n7 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>113\n</pre></section>\n</div>\n</span>", "p02619": "<span class=\"lang-en\">\n<p>(Please read problem A first. The maximum score you can get by solving this problem B is 1, which will have almost no effect on your ranking.)</p>\n<div class=\"part\">\n<section>\n<h3>Beginner's Guide</h3><p>Let's first write a program to calculate the score from a pair of input and output. You can know the total score by submitting your solution, or an official program to calculate a score is often provided for local evaluation as in this contest. Nevertheless, writing a score calculator by yourself is still useful to check your understanding of the problem specification. Moreover, the source code of the score calculator can often be reused for solving the problem or debugging your solution. So it is worthwhile to write a score calculator unless it is very complicated.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You will be given a contest schedule for <var>D</var> days.\nFor each <var>d=1,2,\\ldots,D</var>, calculate the satisfaction at the end of day <var>d</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the form of the input of Problem A followed by the output of Problem A.</p>\n<pre><var>D</var>\n<var>c_1</var> <var>c_2</var> <var>\\cdots</var> <var>c_{26}</var>\n<var>s_{1,1}</var> <var>s_{1,2}</var> <var>\\cdots</var> <var>s_{1,26}</var>\n<var>\\vdots</var>\n<var>s_{D,1}</var> <var>s_{D,2}</var> <var>\\cdots</var> <var>s_{D,26}</var>\n<var>t_1</var>\n<var>t_2</var>\n<var>\\vdots</var>\n<var>t_D</var>\n</pre>\n<ul>\n<li>The constraints and generation methods for the input part are the same as those for Problem A.</li>\n<li>For each <var>d</var>, <var>t_d</var> is an integer satisfying <var>1\\leq t_d \\leq 26</var>, and your program is expected to work correctly for any value that meets the constraints.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>v_d</var> be the satisfaction at the end of day <var>d</var>.\nPrint <var>D</var> integers <var>v_d</var> to Standard Output in the following format:</p>\n<pre><var>v_1</var>\n<var>v_2</var>\n<var>\\vdots</var>\n<var>v_D</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82\n19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424\n6674 17707 13855 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277 18094 3929 3705 7169 6159 18683 15410 9092 4570\n6878 4239 19925 1799 375 9563 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921 14172 16730 11157 5439 256\n8633 15862 15303 10749 18499 7792 10317 5901 9395 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197 8471 7452\n19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192\n1\n17\n13\n14\n13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>18398\n35037\n51140\n65837\n79325\n</pre>\n<p>Note that this example is a small one for checking the problem specification. It does not satisfy the constraint <var>D=365</var> and is never actually given as a test case.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Next Step</h3><p>We can build a solution (schedule) for this problem in the order of day 1, day 2, and so on. And for every partial solution we have built, we can calculate the goodness (satisfaction) by using the above score calculator. So we can construct the following algorithm: for each <var>d=1,2,\\ldots,D</var>, we select the contest type that maximizes the satisfaction at the end of day <var>d</var>. You may have already encountered this kind of \"greedy algorithms\" in algorithm contests such as ABC. Greedy algorithms can guarantee the optimality for several problems, but unfortunately, it doesn't ensure optimality for this problem. However, even if it does not ensure optimality, we can still obtain a reasonable solution in many cases. Let's go back to Problem A and implement the greedy algorithm by utilizing the score calculator you just implemented!</p>\n<p>Greedy methods can be applied to a variety of problems, are easy to implement, and often run relatively fast compared to other methods. Greedy is often the most powerful method when we need to process huge inputs.\nWe can further improve the score by changing the greedy selection criteria (evaluation function), keeping multiple candidates instead of focusing on one best partial solution (beam search), or using the output of greedy algorithms as an initial solution of other methods.\nFor more information, please refer to the editorial that will be published after the contest.</p></section>\n</div>\n</span>", "p02620": "<span class=\"lang-en\">\n<p>(Please read problem A first. The maximum score you can get by solving this problem C is 1, which will have almost no effect on your ranking.)</p>\n<div class=\"part\">\n<section>\n<h3>Beginner's Guide</h3><p>\"Local search\" is a powerful method for finding a high-quality solution.\nIn this method, instead of constructing a solution from scratch, we try to find a better solution by slightly modifying the already found solution.\nIf the solution gets better, update it, and if it gets worse, restore it.\nBy repeating this process, the quality of the solution is gradually improved over time.\nThe pseudo-code is as follows.</p>\n<pre>solution = compute an initial solution (by random generation, or by applying other methods such as greedy)\nwhile the remaining time &gt; 0:\n    slightly modify the solution (randomly)\n    if the solution gets worse:\n        restore the solution\n</pre>\n<p>For example, in this problem, we can use the following modification: pick the date <var>d</var> and contest type <var>q</var> at random and change the type of contest to be held on day <var>d</var> to <var>q</var>.\nThe pseudo-code is as follows.</p>\n<pre>t[1..D] = compute an initial solution (by random generation, or by applying other methods such as greedy)\nwhile the remaining time &gt; 0:\n    pick d and q at random\n    old = t[d] # Remember the original value so that we can restore it later\n    t[d] = q\n    if the solution gets worse:\n        t[d] = old\n</pre>\n<p>The most important thing when using the local search method is the design of how to modify solutions.</p>\n<ol>\n<li>If the amount of modification is too small, we will soon fall into a dead-end (local optimum) and, conversely, if the amount of modification is too large, the probability of finding an improving move becomes extremely small.</li>\n<li>In order to increase the number of iterations, it is desirable to be able to quickly calculate the score after applying a modification.</li>\n</ol>\n<p>In this problem C, we focus on the second point.\nThe score after the modification can, of course, be obtained by calculating the score from scratch.\nHowever, by focusing on only the parts that have been modified, it may be possible to quickly compute the difference between the scores before and after the modification.\nFrom another viewpoint, the impossibility of such a fast incremental calculation implies that a small modification to the solution affects a majority of the score calculation.\nIn such a case, we may need to redesign how to modify solutions, or there is a high possibility that the problem is not suitable for local search.\nLet's implement fast incremental score computation.\nIt's time to demonstrate the skills of algorithms and data structures you have developed in ABC and ARC!</p>\n<p>In this kind of contest, where the objective is to find a better solution instead of the optimal one, a bug in a program does not result in a wrong answer, which may delay the discovery of the bug.\nFor early detection of bugs, it is a good idea to unit test functions you implemented complicated routines.\nFor example, if you implement fast incremental score calculation, it is a good idea to test that the scores computed by the fast implementation match the scores computed from scratch, as we will do in this problem C.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You will be given a contest schedule for <var>D</var> days and <var>M</var> queries of schedule modification.\nIn the <var>i</var>-th query, given integers <var>d_i</var> and <var>q_i</var>, change the type of contest to be held on day <var>d_i</var> to <var>q_i</var>, and then output the final satisfaction at the end of day <var>D</var> on the updated schedule.\nNote that we do not revert each query. That is, the <var>i</var>-th query is applied to the new schedule obtained by the <var>(i-1)</var>-th query.</p>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the form of the input of Problem A followed by the output of Problem A and the queries.</p>\n<pre><var>D</var>\n<var>c_1</var> <var>c_2</var> <var>\\cdots</var> <var>c_{26}</var>\n<var>s_{1,1}</var> <var>s_{1,2}</var> <var>\\cdots</var> <var>s_{1,26}</var>\n<var>\\vdots</var>\n<var>s_{D,1}</var> <var>s_{D,2}</var> <var>\\cdots</var> <var>s_{D,26}</var>\n<var>t_1</var>\n<var>t_2</var>\n<var>\\vdots</var>\n<var>t_D</var>\n<var>M</var>\n<var>d_1</var> <var>q_1</var>\n<var>d_2</var> <var>q_2</var>\n<var>\\vdots</var>\n<var>d_M</var> <var>q_M</var>\n</pre>\n<ul>\n<li>The constraints and generation methods for the input part are the same as those for Problem A.</li>\n<li>For each <var>d=1,\\ldots,D</var>, <var>t_d</var> is an integer generated independently and uniformly at random from <var>{1,2,\\ldots,26}</var>.</li>\n<li>The number of queries <var>M</var> is an integer satisfying <var>1\\leq M\\leq 10^5</var>.</li>\n<li>For each <var>i=1,\\ldots,M</var>, <var>d_i</var> is an integer generated independently and uniformly at random from <var>{1,2,\\ldots,D}</var>.</li>\n<li>For each <var>i=1,\\ldots,26</var>, <var>q_i</var> is an integer satisfying <var>1\\leq q_i\\leq 26</var> generated uniformly at random from the <var>25</var> values that differ from the type of contest on day <var>d_i</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>v_i</var> be the final satisfaction at the end of day <var>D</var> on the schedule after applying the <var>i</var>-th query.\nPrint <var>M</var> integers <var>v_i</var> to Standard Output in the following format:</p>\n<pre><var>v_1</var>\n<var>v_2</var>\n<var>\\vdots</var>\n<var>v_M</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82\n19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424\n6674 17707 13855 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277 18094 3929 3705 7169 6159 18683 15410 9092 4570\n6878 4239 19925 1799 375 9563 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921 14172 16730 11157 5439 256\n8633 15862 15303 10749 18499 7792 10317 5901 9395 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197 8471 7452\n19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192\n1\n17\n13\n14\n13\n5\n1 7\n4 11\n3 4\n5 24\n4 19\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>72882\n56634\n38425\n27930\n42884\n</pre>\n<p>Note that this example is a small one for checking the problem specification. It does not satisfy the constraint <var>D=365</var> and is never actually given as a test case.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Next Step</h3><p>Let's go back to Problem A and implement the local search algorithm by utilizing the incremental score calculator you just implemented!\nFor this problem, the current modification \"pick the date <var>d</var> and contest type <var>q</var> at random and change the type of contest to be held on day <var>d</var> to <var>q</var>\" is actually not so good. By considering why it is not good, let's improve the modification operation.\nOne of the most powerful and widely used variant of the local search method is \"Simulated Annealing (SA)\", which makes it easier to reach a better solution by stochastically accepting worsening moves.\nFor more information about SA and other local search techniques, please refer to the editorial that will be published after the contest.</p></section>\n</div>\n</span>", "p02621": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given an integer <var>a</var> as input, print the value <var>a + a^2 + a^3</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq a \\leq 10</var></li>\n<li><var>a</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value <var>a + a^2 + a^3</var> as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>14\n</pre>\n<p>When <var>a = 2</var>, we have <var>a + a^2 + a^3 = 2 + 2^2 + 2^3 = 2 + 4 + 8 = 14</var>.</p>\n<p>Print the answer as an input. Outputs such as <code>14.0</code> will be judged as incorrect.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1110\n</pre></section>\n</div>\n</span>", "p02616": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are <var>N</var> integers <var>A_1,\\ldots,A_N</var>.</p>\n<p>We will choose exactly <var>K</var> of these elements. Find the maximum possible product of the chosen elements.</p>\n<p>Then, print the maximum product modulo <var>(10^9+7)</var>, using an integer between <var>0</var> and <var>10^9+6</var> (inclusive).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>|A_i| \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum product modulo <var>(10^9+7)</var>, using an integer between <var>0</var> and <var>10^9+6</var> (inclusive).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2\n1 2 -3 -4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>The possible products of the two chosen elements are <var>2</var>, <var>-3</var>, <var>-4</var>, <var>-6</var>, <var>-8</var>, and <var>12</var>, so the maximum product is <var>12</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n-1 -2 -3 -4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1000000001\n</pre>\n<p>The possible products of the three chosen elements are <var>-24</var>, <var>-12</var>, <var>-8</var>, and <var>-6</var>, so the maximum product is <var>-6</var>.</p>\n<p>We print this value modulo <var>(10^9+7)</var>, that is, <var>1000000001</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 1\n-1 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1000000000\n</pre>\n<p>The possible products of the one chosen element are <var>-1</var> and <var>1000000000</var>, so the maximum product is <var>1000000000</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 10\n1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>999983200\n</pre>\n<p>Be sure to print the product modulo <var>(10^9+7)</var>.</p></section>\n</div>\n</span>", "p02622": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are strings <var>S</var> and <var>T</var>. Consider changing <var>S</var> to <var>T</var> by repeating the operation below. Find the minimum number of operations required to do so.</p>\n<p>Operation: Choose one character of <var>S</var> and replace it with a different character.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> and <var>T</var> have lengths between <var>1</var> and <var>2\\times 10^5</var> (inclusive).</li>\n<li><var>S</var> and <var>T</var> consists of lowercase English letters.</li>\n<li><var>S</var> and <var>T</var> have equal lengths.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>cupofcoffee\ncupofhottea\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>We can achieve the objective in four operations, such as the following:</p>\n<ul>\n<li>First, replace the sixth character <code>c</code> with <code>h</code>.</li>\n<li>Second, replace the eighth character <code>f</code> with <code>t</code>.</li>\n<li>Third, replace the ninth character <code>f</code> with <code>t</code>.</li>\n<li>Fourth, replace the eleventh character <code>e</code> with <code>a</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>abcde\nbcdea\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>apple\napple\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>No operations may be needed to achieve the objective.</p></section>\n</div>\n</span>", "p02623": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have two desks: A and B. Desk A has a vertical stack of <var>N</var> books on it, and Desk B similarly has <var>M</var> books on it.</p>\n<p>It takes us <var>A_i</var> minutes to read the <var>i</var>-th book from the top on Desk A <var>(1 \\leq i \\leq N)</var>, and <var>B_i</var> minutes to read the <var>i</var>-th book from the top on Desk B <var>(1 \\leq i \\leq M)</var>.</p>\n<p>Consider the following action:</p>\n<ul>\n<li>Choose a desk with a book remaining, read the topmost book on that desk, and remove it from the desk.</li>\n</ul>\n<p>How many books can we read at most by repeating this action so that it takes us at most <var>K</var> minutes in total? We ignore the time it takes to do anything other than reading.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, M \\leq 200000</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>1 \\leq A_i, B_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>\\ldots</var> <var>A_N</var>\n<var>B_1</var> <var>B_2</var> <var>\\ldots</var> <var>B_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the maximum number of books that can be read.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4 240\n60 90 120\n80 150 80 150\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>In this case, it takes us <var>60</var>, <var>90</var>, <var>120</var> minutes to read the <var>1</var>-st, <var>2</var>-nd, <var>3</var>-rd books from the top on Desk A, and <var>80</var>, <var>150</var>, <var>80</var>, <var>150</var> minutes to read the <var>1</var>-st, <var>2</var>-nd, <var>3</var>-rd, <var>4</var>-th books from the top on Desk B, respectively.</p>\n<p>We can read three books in <var>230</var> minutes, as shown below, and this is the maximum number of books we can read within <var>240</var> minutes.</p>\n<ul>\n<li>Read the topmost book on Desk A in <var>60</var> minutes, and remove that book from the desk.</li>\n<li>Read the topmost book on Desk B in <var>80</var> minutes, and remove that book from the desk.</li>\n<li>Read the topmost book on Desk A in <var>90</var> minutes, and remove that book from the desk.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4 730\n60 90 120\n80 150 80 150\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 4 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n1000000000 1000000000 1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>Watch out for integer overflows.</p></section>\n</div>\n</span>", "p02626": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> piles of stones. The <var>i</var>-th pile has <var>A_i</var> stones.</p>\n<p>Aoki and Takahashi are about to use them to play the following game:</p>\n<ul>\n<li>Starting with Aoki, the two players alternately do the following operation:<ul>\n<li>Operation: Choose one pile of stones, and remove one or more stones from it.</li>\n</ul>\n</li>\n<li>When a player is unable to do the operation, he loses, and the other player wins.</li>\n</ul>\n<p>When the two players play optimally, there are two possibilities in this game: the player who moves first always wins, or the player who moves second always wins, only depending on the initial number of stones in each pile.</p>\n<p>In such a situation, Takahashi, the second player to act, is trying to guarantee his win by moving at least zero and at most <var>(A_1 - 1)</var> stones from the <var>1</var>-st pile to the <var>2</var>-nd pile before the game begins.</p>\n<p>If this is possible, print the minimum number of stones to move to guarantee his victory; otherwise, print <code>-1</code> instead.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 300</var></li>\n<li><var>1 \\leq A_i \\leq 10^{12}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of stones to move to guarantee Takahashi's win; otherwise, print <code>-1</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Without moving stones, if Aoki first removes <var>2</var> stones from the <var>1</var>-st pile, Takahashi cannot win in any way.</p>\n<p>If Takahashi moves <var>1</var> stone from the <var>1</var>-st pile to the <var>2</var>-nd before the game begins so that both piles have <var>4</var> stones, Takahashi can always win by properly choosing his actions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>It is not allowed to move stones from the <var>2</var>-nd pile to the <var>1</var>-st.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n1 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n<p>It is not allowed to move all stones from the <var>1</var>-st pile.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8\n10 9 8 7 6 5 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>3\n4294967297 8589934593 12884901890\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>1\n</pre>\n<p>Watch out for overflows.</p></section>\n</div>\n</span>", "p02625": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Count the pairs of length-<var>N</var> sequences consisting of integers between <var>1</var> and <var>M</var> (inclusive), <var>A_1, A_2, \\cdots, A_{N}</var> and <var>B_1, B_2, \\cdots, B_{N}</var>, that satisfy all of the following conditions:</p>\n<ul>\n<li><var>A_i \\neq B_i</var>, for every <var>i</var> such that <var>1\\leq i\\leq N</var>.</li>\n<li><var>A_i \\neq A_j</var> and <var>B_i \\neq B_j</var>, for every <var>(i, j)</var> such that <var>1\\leq i &lt; j\\leq N</var>.</li>\n</ul>\n<p>Since the count can be enormous, print it modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq N \\leq M \\leq 5\\times10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the count modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p><var>A_1=1,A_2=2,B_1=2,B_2=1</var> and <var>A_1=2,A_2=1,B_1=1,B_2=2</var> satisfy the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>18\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>141421 356237\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>881613484\n</pre></section>\n</div>\n</span>", "p02628": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A shop sells <var>N</var> kinds of fruits, Fruit <var>1, \\ldots, N</var>, at prices of <var>p_1, \\ldots, p_N</var> yen per item, respectively. (Yen is the currency of Japan.)</p>\n<p>Here, we will choose <var>K</var> kinds of fruits and buy one of each chosen kind. Find the minimum possible total price of those fruits.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N \\leq 1000</var></li>\n<li><var>1 \\leq p_i \\leq 1000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>p_1</var> <var>p_2</var> <var>\\ldots</var> <var>p_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the minimum possible total price of fruits.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n50 100 80 120 80\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>210\n</pre>\n<p>This shop sells Fruit <var>1</var>, <var>2</var>, <var>3</var>, <var>4</var>, and <var>5</var> for <var>50</var> yen, <var>100</var> yen, <var>80</var> yen, <var>120</var> yen, and <var>80</var> yen, respectively.</p>\n<p>The minimum total price for three kinds of fruits is <var>50 + 80 + 80 = 210</var> yen when choosing Fruit <var>1</var>, <var>3</var>, and <var>5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1\n1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1000\n</pre></section>\n</div>\n</span>", "p02624": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For a positive integer <var>X</var>, let <var>f(X)</var> be the number of positive divisors of <var>X</var>.</p>\n<p>Given a positive integer <var>N</var>, find <var>\\sum_{K=1}^N K\\times f(K)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^7</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value <var>\\sum_{K=1}^N K\\times f(K)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>23\n</pre>\n<p>We have <var>f(1)=1</var>, <var>f(2)=2</var>, <var>f(3)=2</var>, and <var>f(4)=3</var>, so the answer is <var>1\\times 1 + 2\\times 2 + 3\\times 2 + 4\\times 3 =23</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>26879\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>838627288460105\n</pre>\n<p>Watch out for overflows.</p></section>\n</div>\n</span>", "p02629": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>1000000000000001</var> dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered <var>1</var> through <var>1000000000000001</var>, but he gave them new names, as follows:</p>\n<ul>\n<li>the dogs numbered <var>1,2,\\cdots,26</var> were respectively given the names <code>a</code>, <code>b</code>, ..., <code>z</code>;</li>\n<li>the dogs numbered <var>27,28,29,\\cdots,701,702 </var> were respectively given the names <code>aa</code>, <code>ab</code>, <code>ac</code>, ..., <code>zy</code>, <code>zz</code>;</li>\n<li>the dogs numbered <var>703,704,705,\\cdots,18277,18278 </var> were respectively given the names <code>aaa</code>, <code>aab</code>, <code>aac</code>, ..., <code>zzy</code>, <code>zzz</code>;</li>\n<li>the dogs numbered <var>18279,18280,18281,\\cdots,475253,475254 </var> were respectively given the names <code>aaaa</code>, <code>aaab</code>, <code>aaac</code>, ..., <code>zzzy</code>, <code>zzzz</code>;</li>\n<li>the dogs numbered <var>475255,475256,\\cdots </var> were respectively given the names <code>aaaaa</code>, <code>aaaab</code>, ...;</li>\n<li>and so on.</li>\n</ul>\n<p>To sum it up, the dogs numbered <var>1, 2, \\cdots</var> were respectively given the following names:</p>\n<p><code>a</code>, <code>b</code>, ..., <code>z</code>, <code>aa</code>, <code>ab</code>, ..., <code>az</code>, <code>ba</code>, <code>bb</code>, ..., <code>bz</code>, ..., <code>za</code>, <code>zb</code>, ..., <code>zz</code>, <code>aaa</code>, <code>aab</code>, ..., <code>aaz</code>, <code>aba</code>, <code>abb</code>, ..., <code>abz</code>, ..., <code>zzz</code>, <code>aaaa</code>, ...</p>\n<p>Now, Roger asks you:</p>\n<p>\"What is the name for the dog numbered <var>N</var>?\"</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var> is an integer.</li>\n<li><var> 1 \\leq N \\leq 1000000000000001</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer to Roger's question as a string consisting of lowercase English letters.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>b\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>27\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>aa\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>123456789\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>jjddja\n</pre></section>\n</div>\n</span>", "p02630": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have a sequence <var>A</var> composed of <var>N</var> positive integers: <var>A_{1}, A_{2}, \\cdots, A_{N}</var>.</p>\n<p>You will now successively do the following <var>Q</var> operations:</p>\n<ul>\n<li>In the <var>i</var>-th operation, you replace every element whose value is <var>B_{i}</var> with <var>C_{i}</var>.</li>\n</ul>\n<p>For each <var>i</var> <var>(1 \\leq i \\leq Q)</var>, find <var>S_{i}</var>: the sum of all elements in <var>A</var> just after the <var>i</var>-th operation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var> 1 \\leq N, Q, A_{i}, B_{i}, C_{i} \\leq 10^{5} </var></li>\n<li><var> B_{i} \\neq C_{i} </var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_{1}</var> <var>A_{2}</var> <var>\\cdots</var> <var>A_{N}</var>\n<var>Q</var>\n<var>B_{1}</var> <var>C_{1}</var>\n<var>B_{2}</var> <var>C_{2}</var>\n<var>\\vdots</var>\n<var>B_{Q}</var> <var>C_{Q}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> integers <var>S_{i}</var> to Standard Output in the following format:</p>\n<pre><var>S_{1}</var>\n<var>S_{2}</var>\n<var>\\vdots</var>\n<var>S_{Q}</var>\n</pre>\n<p>Note that <var>S_{i}</var> may not fit into a <var>32</var>-bit integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 2 3 4\n3\n1 2\n3 4\n2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11\n12\n16\n</pre>\n<p>Initially, the sequence <var>A</var> is <var>1,2,3,4</var>.</p>\n<p>After each operation, it becomes the following:</p>\n<ul>\n<li><var>2, 2, 3, 4</var></li>\n<li><var>2, 2, 4, 4</var></li>\n<li><var>4, 4, 4, 4</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 1 1 1\n3\n1 2\n2 1\n3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n4\n4\n</pre>\n<p>Note that the sequence <var>A</var> may not contain an element whose value is <var>B_{i}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1 2\n3\n1 100\n2 100\n100 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>102\n200\n2000\n</pre></section>\n</div>\n</span>", "p02632": "<span class=\"lang-en\">\n<p>Score: <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>How many strings can be obtained by applying the following operation on a string <var>S</var> exactly <var>K</var> times: \"choose one lowercase English letter and insert it somewhere\"?</p>\n<p>The answer can be enormous, so print it modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>K</var> is an integer between <var>1</var> and <var>10^6</var> (inclusive).</li>\n<li><var>S</var> is a string of length between <var>1</var> and <var>10^6</var> (inclusive) consisting of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of strings satisfying the condition, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\noof\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>575111451\n</pre>\n<p>For example, we can obtain <code>proofend</code>, <code>moonwolf</code>, and <code>onionpuf</code>, while we cannot obtain <code>oofsix</code>, <code>oofelevennn</code>, <code>voxafolt</code>, or <code>fooooooo</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>37564\nwhydidyoudesertme\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>318008117\n</pre></section>\n</div>\n</span>", "p02633": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is standing on a two-dimensional plane, facing north. Find the minimum positive integer <var>K</var> such that Takahashi will be at the starting position again after he does the following action <var>K</var> times:</p>\n<ul>\n<li>Go one meter in the direction he is facing. Then, turn <var>X</var> degrees counter-clockwise.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X \\leq 179</var></li>\n<li><var>X</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of times Takahashi will do the action before he is at the starting position again.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>90\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Takahashi's path is a square.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>360\n</pre></section>\n</div>\n</span>", "p02634": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a grid with <var>A</var> horizontal rows and <var>B</var> vertical columns, with the squares painted white. On this grid, we will repeatedly apply the following operation:</p>\n<ul>\n<li>Assume that the grid currently has <var>a</var> horizontal rows and <var>b</var> vertical columns. Choose \"vertical\" or \"horizontal\".<ul>\n<li>If we choose \"vertical\", insert one row at the top of the grid, resulting in an <var>(a+1) \\times b</var> grid.</li>\n<li>If we choose \"horizontal\", insert one column at the right end of the grid, resulting in an <var>a \\times (b+1)</var> grid.</li>\n</ul>\n</li>\n<li>Then, paint one of the added squares black, and the other squares white.</li>\n</ul>\n<p>Assume the grid eventually has <var>C</var> horizontal rows and <var>D</var> vertical columns. Find the number of ways in which the squares can be painted in the end, modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A \\leq C \\leq 3000</var></li>\n<li><var>1 \\leq B \\leq D \\leq 3000</var></li>\n<li><var>A</var>, <var>B</var>, <var>C</var>, and <var>D</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways in which the squares can be painted in the end, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 1 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>Any two of the three squares other than the bottom-left square can be painted black.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 1 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>65\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31 41 59 265\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>387222020\n</pre></section>\n</div>\n</span>", "p02635": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var> consisting of <code>0</code> and <code>1</code>. Find the number of strings, modulo <var>998244353</var>, that can result from applying the following operation on <var>S</var> between <var>0</var> and <var>K</var> times (inclusive):</p>\n<ul>\n<li>Choose a pair of integers <var>i, j</var> <var>(1\\leq i &lt; j\\leq |S|)</var> such that the <var>i</var>-th and <var>j</var>-th characters of <var>S</var> are <code>0</code> and <code>1</code>, respectively. Remove the <var>j</var>-th character from <var>S</var> and insert it to the immediate left of the <var>i</var>-th character.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 300</var></li>\n<li><var>0 \\leq K \\leq 10^9</var></li>\n<li><var>S</var> consists of <code>0</code> and <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the number of strings, modulo <var>998244353</var>, that can result from applying the operation on <var>S</var> between <var>0</var> and <var>K</var> times (inclusive).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>0101 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Four strings, <code>0101</code>, <code>0110</code>, <code>1001</code>, and <code>1010</code>, can result.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>01100110 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>14\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1101010010101101110111100011011111011000111101110101010010101010101 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>113434815\n</pre></section>\n</div>\n</span>", "p02631": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> Snuke Cats numbered <var>1, 2, \\ldots, N</var>, where <var>N</var> is <strong>even</strong>.</p>\n<p>Each Snuke Cat wears a red scarf, on which his favorite non-negative integer is written.</p>\n<p>Recently, they learned the operation called xor (exclusive OR).</p>\n<details>\n<summary style=\"display: list-item; outline: none;\">What is xor?</summary>\n<p>\nFor <var>n</var> non-negative integers <var>x_1, x_2, \\ldots, x_n</var>, their xor, <var>x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n</var> is defined as follows:\n<ul>\n<li> When <var>x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if the number of integers among <var>x_1, x_2, \\ldots, x_n</var> whose binary representations have <var>1</var> in the <var>2^k</var>'s place is odd, and <var>0</var> if that count is even. </li>\n</ul>\nFor example, <var>3~\\textrm{xor}~5 = 6</var>.\n</p>\n</details>\n<p>They wanted to use this operation quickly, so each of them calculated the xor of the integers written on their scarfs except his scarf.</p>\n<p>We know that the xor calculated by Snuke Cat <var>i</var>, that is, the xor of the integers written on the scarfs except the scarf of Snuke Cat <var>i</var> is <var>a_i</var>.\nUsing this information, restore the integer written on the scarf of each Snuke Cat.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 200000</var></li>\n<li><var>N</var> is <strong>even</strong>.</li>\n<li><var>0 \\leq a_i \\leq 10^9</var></li>\n<li>There exists a combination of integers on the scarfs that is consistent with the given information.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>\\ldots</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print a line containing <var>N</var> integers separated with space.</p>\n<p>The <var>i</var>-th of the integers from the left should represent the integer written on the scarf of Snuke Cat <var>i</var>.</p>\n<p>If there are multiple possible solutions, you may print any of them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n20 11 9 24\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>26 5 7 22\n</pre>\n<ul>\n<li><var>5~\\textrm{xor}~7~\\textrm{xor}~22 = 20</var></li>\n<li><var>26~\\textrm{xor}~7~\\textrm{xor}~22 = 11</var></li>\n<li><var>26~\\textrm{xor}~5~\\textrm{xor}~22 = 9</var></li>\n<li><var>26~\\textrm{xor}~5~\\textrm{xor}~7 = 24</var></li>\n</ul>\n<p>Thus, this output is consistent with the given information.</p></section>\n</div>\n</span>", "p02636": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var> consisting of <code>0</code> and <code>1</code>. Find the number of strings, modulo <var>998244353</var>, that can result from applying the following operation on <var>S</var> zero or more times:</p>\n<ul>\n<li>Remove the two characters at the beginning of <var>S</var>, erase one of them, and reinsert the other somewhere in <var>S</var>. This operation can be applied only when <var>S</var> has two or more characters.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 300</var></li>\n<li><var>S</var> consists of <code>0</code> and <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of strings, modulo <var>998244353</var>, that can result from applying the operation on <var>S</var> zero or more times.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>0001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>Eight strings, <code>0001</code>, <code>001</code>, <code>010</code>, <code>00</code>, <code>01</code>, <code>10</code>, <code>0</code>, and <code>1</code>, can result.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>110001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>24\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11101111011111000000000110000001111100011111000000001111111110000000111111111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>697354558\n</pre></section>\n</div>\n</span>", "p02637": "<span class=\"lang-en\">\n<p>Score : <var>1500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are an integer <var>K</var> and integers <var>a_1,\\dots, a_K</var>. Determine whether a sequence <var>P</var> satisfying below exists. If it exists, find the lexicographically smallest such sequence.</p>\n<ul>\n<li>Every term in <var>P</var> is an integer between <var>1</var> and <var>K</var> (inclusive).</li>\n<li>For each <var>i=1,\\dots, K</var>, <var>P</var> contains <var>a_i</var> occurrences of <var>i</var>.</li>\n<li>For each term in <var>P</var>, there is a contiguous subsequence of length <var>K</var> that contains that term and is a permutation of <var>1,\\dots, K</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 100</var></li>\n<li><var>1 \\leq a_i \\leq 1000 \\quad (1\\leq i\\leq K)</var></li>\n<li><var>a_1 + \\dots + a_K\\leq 1000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n<var>a_1</var> <var>a_2</var> <var>\\dots</var> <var>a_K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is no sequence satisfying the conditions, print <code>-1</code>.\nOtherwise, print the lexicographically smallest sequence satisfying the conditions.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 1 3 2 2 3 1 2 3 \n</pre>\n<p>For example, the fifth term, which is <var>2</var>, is in the subsequence <var>(2, 3, 1)</var> composed of the fifth, sixth, and seventh terms.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n3 2 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 2 3 4 1 3 1 2 4 3 \n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n3 1 4 1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p02639": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have five variables <var>x_1, x_2, x_3, x_4,</var> and <var>x_5</var>.</p>\n<p>The variable <var>x_i</var> was initially assigned a value of <var>i</var>.</p>\n<p>Snuke chose one of these variables and assigned it <var>0</var>.</p>\n<p>You are given the values of the five variables after this assignment.</p>\n<p>Find out which variable Snuke assigned <var>0</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The values of <var>x_1, x_2, x_3, x_4,</var> and <var>x_5</var> given as input are a possible outcome of the assignment by Snuke.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>x_1</var> <var>x_2</var> <var>x_3</var> <var>x_4</var> <var>x_5</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the variable Snuke assigned <var>0</var> was <var>x_i</var>, print the integer <var>i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>0 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>In this case, Snuke assigned <var>0</var> to <var>x_1</var>, so we should print <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 2 0 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02640": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are some animals in a garden. Each of them is a crane with two legs or a turtle with four legs.</p>\n<p>Takahashi says: \"there are <var>X</var> animals in total in the garden, and they have <var>Y</var> legs in total.\" Determine whether there is a combination of numbers of cranes and turtles in which this statement is correct.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X \\leq 100</var></li>\n<li><var>1 \\leq Y \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is a combination of numbers of cranes and turtles in which the statement is correct, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>The statement \"there are <var>3</var> animals in total in the garden, and they have <var>8</var> legs in total\" is correct if there are two cranes and one turtle. Thus, there is a combination of numbers of cranes and turtles in which the statement is correct.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>There is no combination of numbers of cranes and turtles in which this statement is correct.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n<p>We also consider the case in which there are only cranes or only turtles.</p></section>\n</div>\n</span>", "p02641": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are an integer <var>X</var> and an integer sequence of length <var>N</var>: <var>p_1, \\ldots, p_N</var>.</p>\n<p>Among the integers not contained in the sequence <var>p_1, \\ldots, p_N</var> (not necessarily positive), find the integer nearest to <var>X</var>, that is, find the integer whose absolute difference with <var>X</var> is the minimum. If there are multiple such integers, report the smallest such integer.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X \\leq 100</var></li>\n<li><var>0 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq p_i \\leq 100</var></li>\n<li><var>p_1, \\ldots, p_N</var> are all distinct.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>N</var>\n<var>p_1</var> <var>...</var> <var>p_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 5\n4 7 10 6 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>Among the integers not contained in the sequence <var>4, 7, 10, 6, 5</var>, the one nearest to <var>6</var> is <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 5\n4 7 10 6 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9\n</pre>\n<p>Among the integers not contained in the sequence <var>4, 7, 10, 6, 5</var>, the ones nearest to <var>10</var> are <var>9</var> and <var>11</var>. We should print the smaller one, <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 0\n\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100\n</pre>\n<p>When <var>N = 0</var>, the second line in the input will be empty. Also, as seen here, <var>X</var> itself can be the answer.</p></section>\n</div>\n</span>", "p02642": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a number sequence <var>A</var> of length <var>N</var>.</p>\n<p>Find the number of integers <var>i</var> <var>\\left(1 \\leq i \\leq N\\right)</var> with the following property:</p>\n<ul>\n<li>For every integer <var>j</var> <var>\\left(1 \\leq j \\leq N\\right)</var> such that <var>i \\neq j </var>, <var>A_j</var> does not divide <var>A_i</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n24 11 8 3 16\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The integers with the property are <var>2</var>, <var>3</var>, and <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n5 5 5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Note that there can be multiple equal numbers.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n33 18 45 28 8 19 89 86 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p02638": "<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are integers <var>N</var> and <var>K</var>, and a prime number <var>P</var>. Find the number, modulo <var>P</var>, of directed graphs <var>G</var> with <var>N</var> vertices that satisfy below. Here, the vertices are distinguishable from each other.</p>\n<ul>\n<li><var>G</var> is a tournament, that is, <var>G</var> contains no duplicated edges or self-loops, and exactly one of the edges <var>u\\to v</var> and <var>v\\to u</var> exists for any two vertices <var>u</var> and <var>v</var>.</li>\n<li>The in-degree of every vertex in <var>G</var> is at most <var>K</var>.</li>\n<li>For any four distinct vertices <var>a</var>, <var>b</var>, <var>c</var>, and <var>d</var> in <var>G</var>, it is not the case that all of the six edges <var>a\\to b</var>, <var>b\\to c</var>, <var>c\\to a</var>, <var>a\\to d</var>, <var>b\\to d</var>, and <var>c\\to d</var> exist simultaneously.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>4 \\leq N \\leq 200</var></li>\n<li><var>\\frac{N-1}{2} \\leq K \\leq N-1</var></li>\n<li><var>10^8&lt;P&lt;10^9</var></li>\n<li><var>N</var> and <var>K</var> are integers.</li>\n<li><var>P</var> is a prime number.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var> <var>P</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of directed graphs that satisfy the conditions, modulo <var>P</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>56\n</pre>\n<p>Among the <var>64</var> graphs with four vertices, <var>8</var> are isomorphic to the forbidden induced subgraphs, and the other <var>56</var> satisfy the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 3 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>720\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>50 37 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>495799508\n</pre></section>\n</div>\n</span>", "p02643": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> infants registered in AtCoder, numbered <var>1</var> to <var>N</var>, and <var>2\\times 10^5</var> kindergartens, numbered <var>1</var> to <var>2\\times 10^5</var>.\nInfant <var>i</var> has a rating of <var>A_i</var> and initially belongs to Kindergarten <var>B_i</var>.</p>\n<p>From now on, <var>Q</var> transfers will happen.\nAfter the <var>j</var>-th transfer, Infant <var>C_j</var> will belong to Kindergarten <var>D_j</var>.</p>\n<p>Here, we define the <em>evenness</em> as follows. For each kindergarten with one or more infants registered in AtCoder, let us find the highest rating of an infant in the kindergarten. The evenness is then defined as the lowest among those ratings.</p>\n<p>For each of the <var>Q</var> transfers, find the evenness just after the transfer.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,Q \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>1 \\leq C_j \\leq N</var></li>\n<li><var>1 \\leq B_i,D_j \\leq 2 \\times 10^5</var></li>\n<li>All values in input are integers.</li>\n<li>In the <var>j</var>-th transfer, Infant <var>C_j</var> changes the kindergarten it belongs to.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n<var>C_1</var> <var>D_1</var>\n<var>C_2</var> <var>D_2</var>\n<var>:</var>\n<var>C_Q</var> <var>D_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines.\nThe <var>j</var>-th line should contain the evenness just after the <var>j</var>-th transfer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 3\n8 1\n6 2\n9 3\n1 1\n2 2\n1 3\n4 3\n2 1\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n2\n6\n</pre>\n<p>Initially, Infant <var>1, 4</var> belongs to Kindergarten <var>1</var>, Infant <var>2, 5</var> belongs to Kindergarten <var>2</var>, and Infant <var>3, 6</var> belongs to Kindergarten <var>3</var>.</p>\n<p>After the <var>1</var>-st transfer that makes Infant <var>4</var> belong to Kindergarten <var>3</var>, Infant <var>1</var> belongs to Kindergarten <var>1</var>, Infant <var>2, 5</var> belong to Kindergarten <var>2</var>, and Infant <var>3, 4, 6</var> belong to Kindergarten <var>3</var>. The highest ratings of an infant in Kindergarten <var>1, 2, 3</var> are <var>8, 6, 9</var>, respectively. The lowest among them is <var>6</var>, so the <var>1</var>-st line in the output should contain <var>6</var>.</p>\n<p>After the <var>2</var>-nd transfer that makes Infant <var>2</var> belong to Kindergarten <var>1</var>, Infant <var>1, 2</var> belong to Kindergarten <var>1</var>, Infant <var>5</var> belongs to Kindergarten <var>2</var>, and Infant <var>3, 4, 6</var> belong to Kindergarten <var>3</var>. The highest ratings of an infant in Kindergarten <var>1, 2, 3</var> are <var>8, 2, 9</var>, respectively. The lowest among them is <var>2</var>, so the <var>2</var>-nd line in the output should contain <var>2</var>.</p>\n<p>After the <var>3</var>-rd transfer that makes Infant <var>1</var> belong to Kindergarten <var>2</var>, Infant <var>2</var> belongs to Kindergarten <var>1</var>, Infant <var>1, 5</var> belong to Kindergarten <var>2</var>, and Infant <var>3, 4, 6</var> belong to Kindergarten <var>3</var>. The highest ratings of an infant in Kindergarten <var>1, 2, 3</var> are <var>6, 8, 9</var>, respectively. The lowest among them is <var>6</var>, so the <var>3</var>-rd line in the output should contain <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2\n4208 1234\n3056 5678\n1 2020\n2 2020\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3056\n4208\n</pre></section>\n</div>\n</span>", "p02644": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke, a water strider, lives in a rectangular pond that can be seen as a grid with <var>H</var> east-west rows and <var>W</var> north-south columns. Let <var>(i,j)</var> be the square at the <var>i</var>-th row from the north and <var>j</var>-th column from the west.</p>\n<p>Some of the squares have a lotus leaf on it and cannot be entered.\nThe square <var>(i,j)</var> has a lotus leaf on it if <var>c_{ij}</var> is <code>@</code>, and it does not if <var>c_{ij}</var> is <code>.</code>.</p>\n<p>In one stroke, Snuke can move between <var>1</var> and <var>K</var> squares (inclusive) toward one of the four directions: north, east, south, and west.\nThe move may not pass through a square with a lotus leaf. Moving to such a square or out of the pond is also forbidden.</p>\n<p>Find the minimum number of strokes Snuke takes to travel from the square <var>(x_1,y_1)</var> to <var>(x_2,y_2)</var>.\nIf the travel from <var>(x_1,y_1)</var> to <var>(x_2,y_2)</var> is impossible, point out that fact.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W,K \\leq 10^6</var></li>\n<li><var>H \\times W \\leq 10^6</var></li>\n<li><var>1 \\leq x_1,x_2 \\leq H</var></li>\n<li><var>1 \\leq y_1,y_2 \\leq W</var></li>\n<li><var>x_1 \\neq x_2</var> or <var>y_1 \\neq y_2</var>.</li>\n<li><var>c_{i,j}</var> is <code>.</code> or <code>@</code>.</li>\n<li><var>c_{x_1,y_1} =</var> <code>.</code></li>\n<li><var>c_{x_2,y_2} =</var> <code>.</code></li>\n<li>All numbers in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var> <var>K</var>\n<var>x_1</var> <var>y_1</var> <var>x_2</var> <var>y_2</var>\n<var>c_{1,1}c_{1,2}</var> <var>..</var> <var>c_{1,W}</var>\n<var>c_{2,1}c_{2,2}</var> <var>..</var> <var>c_{2,W}</var>\n<var>:</var>\n<var>c_{H,1}c_{H,2}</var> <var>..</var> <var>c_{H,W}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of strokes Snuke takes to travel from the square <var>(x_1,y_1)</var> to <var>(x_2,y_2)</var>, or print <code>-1</code> if the travel is impossible.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 5 2\n3 2 3 4\n.....\n.@..@\n..@..\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>Initially, Snuke is at the square <var>(3,2)</var>.\nHe can reach the square <var>(3, 4)</var> by making five strokes as follows:</p>\n<ul>\n<li>\n<p>From <var>(3, 2)</var>, go west one square to <var>(3, 1)</var>.</p>\n</li>\n<li>\n<p>From <var>(3, 1)</var>, go north two squares to <var>(1, 1)</var>.</p>\n</li>\n<li>\n<p>From <var>(1, 1)</var>, go east two squares to <var>(1, 3)</var>.</p>\n</li>\n<li>\n<p>From <var>(1, 3)</var>, go east one square to <var>(1, 4)</var>.</p>\n</li>\n<li>\n<p>From <var>(1, 4)</var>, go south two squares to <var>(3, 4)</var>.</p>\n</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 6 4\n1 1 1 6\n......\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 3 1\n2 1 2 3\n.@.\n.@.\n.@.\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p02646": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Two children are playing tag on a number line. (In the game of tag, the child called \"it\" tries to catch the other child.) The child who is \"it\" is now at coordinate <var>A</var>, and he can travel the distance of <var>V</var> per second.\nThe other child is now at coordinate <var>B</var>, and she can travel the distance of <var>W</var> per second.</p>\n<p>He can catch her when his coordinate is the same as hers.\nDetermine whether he can catch her within <var>T</var> seconds (including exactly <var>T</var> seconds later).\nWe assume that both children move optimally.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>-10^9 \\leq A,B \\leq 10^9</var></li>\n<li><var>1 \\leq V,W \\leq 10^9</var></li>\n<li><var>1 \\leq  T \\leq 10^9</var></li>\n<li><var>A \\neq B</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>V</var>\n<var>B</var> <var>W</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If \"it\" can catch the other child, print <code>YES</code>; otherwise, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2\n3 1\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 2\n3 2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 2\n3 3\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p02647": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> bulbs arranged on a number line, numbered <var>1</var> to <var>N</var> from left to right.\nBulb <var>i</var> is at coordinate <var>i</var>.</p>\n<p>Each bulb has a non-negative integer parameter called intensity.\nWhen there is a bulb of intensity <var>d</var> at coordinate <var>x</var>, the bulb illuminates the segment from coordinate <var>x-d-0.5</var> to <var>x+d+0.5</var>.\nInitially, the intensity of Bulb <var>i</var> is <var>A_i</var>. We will now do the following operation <var>K</var> times in a row:</p>\n<ul>\n<li>For each integer <var>i</var> between <var>1</var> and <var>N</var> (inclusive), let <var>B_i</var> be the number of bulbs illuminating coordinate <var>i</var>. Then, change the intensity of each bulb <var>i</var> to <var>B_i</var>.</li>\n</ul>\n<p>Find the intensity of each bulb after the <var>K</var> operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq K \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq A_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the intensity <var>A{'}_i</var> of each bulb <var>i</var> after the <var>K</var> operations to Standard Output in the following format:</p>\n<pre><var>A{'}_1</var> <var>A{'}_2</var> <var>\\ldots</var> <var>A{'}_N</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 1\n1 0 0 1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 2 2 1 2 \n</pre>\n<p>Initially, only Bulb <var>1</var> illuminates coordinate <var>1</var>, so the intensity of Bulb <var>1</var> becomes <var>1</var> after the operation.\nSimilarly, the bulbs initially illuminating coordinate <var>2</var> are Bulb <var>1</var> and <var>2</var>, so the intensity of Bulb <var>2</var> becomes <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 2\n1 0 0 1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3 3 4 4 3 \n</pre></section>\n</div>\n</span>", "p02645": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>When you asked some guy in your class his name, he called himself <var>S</var>, where <var>S</var> is a string of length between <var>3</var> and <var>20</var> (inclusive) consisting of lowercase English letters.\nYou have decided to choose some three consecutive characters from <var>S</var> and make it his nickname. Print a string that is a valid nickname for him.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq |S| \\leq 20</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print your answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>takahashi\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>tak\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>naohiro\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>nao\n</pre></section>\n</div>\n</span>", "p02649": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are <var>N</var> pairwise distinct non-negative integers <var>A_1,A_2,\\ldots,A_N</var>.\nFind the number of ways to choose a set of between <var>1</var> and <var>K</var> numbers (inclusive) from the given numbers so that the following two conditions are satisfied:</p>\n<ul>\n<li>The bitwise AND of the chosen numbers is <var>S</var>.</li>\n<li>The bitwise OR of the chosen numbers is <var>T</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n<li><var>0 \\leq A_i &lt; 2^{18}</var></li>\n<li><var>0 \\leq S &lt; 2^{18}</var></li>\n<li><var>0 \\leq T &lt; 2^{18}</var></li>\n<li><var>A_i \\neq A_j</var> (<var>1 \\leq i &lt; j \\leq N</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var> <var>S</var> <var>T</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3 0 3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The conditions are satisfied when we choose <var>\\{1,2\\}</var> or <var>\\{1,2,3\\}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 3 1 7\n3 4 9 1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 4 0 15\n3 4 9 1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02651": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are two persons, numbered <var>0</var> and <var>1</var>, and a variable <var>x</var> whose initial value is <var>0</var>.\nThe two persons now play a game.\nThe game is played in <var>N</var> rounds. The following should be done in the <var>i</var>-th round (<var>1 \\leq i \\leq N</var>):</p>\n<ul>\n<li>Person <var>S_i</var> does one of the following:<ul>\n<li>Replace <var>x</var> with <var>x \\oplus A_i</var>, where <var>\\oplus</var> represents bitwise XOR.</li>\n<li>Do nothing.</li>\n</ul>\n</li>\n</ul>\n<p>Person <var>0</var> aims to have <var>x=0</var> at the end of the game, while Person <var>1</var> aims to have <var>x \\neq 0</var> at the end of the game.</p>\n<p>Determine whether <var>x</var> becomes <var>0</var> at the end of the game when the two persons play optimally.</p>\n<p>Solve <var>T</var> test cases for each input file.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq T \\leq 100</var></li>\n<li><var>1 \\leq N \\leq 200</var></li>\n<li><var>1 \\leq A_i \\leq 10^{18}</var></li>\n<li><var>S</var> is a string of length <var>N</var> consisting of <code>0</code> and <code>1</code>.</li>\n<li>All numbers in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format.\nThe first line is as follows:</p>\n<pre><var>T</var>\n</pre>\n<p>Then, <var>T</var> test cases follow.\nEach test case is given in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each test case, print a line containing <code>0</code> if <var>x</var> becomes <var>0</var> at the end of the game, and <code>1</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2\n1 2\n10\n2\n1 1\n10\n6\n2 3 4 5 6 7\n111000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n0\n0\n</pre>\n<p>In the first test case, if Person <var>1</var> replaces <var>x</var> with <var>0 \\oplus 1=1</var>, we surely have <var>x \\neq 0</var> at the end of the game, regardless of the choice of Person <var>0</var>.</p>\n<p>In the second test case, regardless of the choice of Person <var>1</var>, Person <var>0</var> can make <var>x=0</var> with a suitable choice.</p></section>\n</div>\n</span>", "p02652": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var>, where each character is <code>0</code>, <code>1</code>, or <code>?</code>.</p>\n<p>Consider making a string <var>S'</var> by replacing each occurrence of <code>?</code> with <code>0</code> or <code>1</code> (we can choose the character for each <code>?</code> independently).\nLet us define the unbalancedness of <var>S'</var> as follows:</p>\n<ul>\n<li>(The unbalancedness of <var>S'</var>) <var>= \\max \\{</var> The absolute difference between the number of occurrences of <code>0</code> and <code>1</code> between the <var>l</var>-th and <var>r</var>-th character of <var>S</var> (inclusive) <var>:\\ 1 \\leq l \\leq r \\leq |S|\\}</var></li>\n</ul>\n<p>Find the minimum possible unbalancedness of <var>S'</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10^6</var></li>\n<li>Each character of <var>S</var> is <code>0</code>, <code>1</code>, or <code>?</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible unbalancedness of <var>S'</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>0??\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>We can make <var>S'=</var> <code>010</code> and achieve the minimum possible unbalancedness of <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0??0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>??00????0??0????0?0??00??1???11?1?1???1?11?111???1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre></section>\n</div>\n</span>", "p02650": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In a two-dimensional plane, we have a rectangle <var>R</var> whose vertices are <var>(0,0)</var>, <var>(W,0)</var>, <var>(0,H)</var>, and <var>(W,H)</var>, where <var>W</var> and <var>H</var> are positive integers.\nHere, find the number of triangles <var>\\Delta</var> in the plane that satisfy all of the following conditions:</p>\n<ul>\n<li>Each vertex of <var>\\Delta</var> is a grid point, that is, has integer <var>x</var>- and <var>y</var>-coordinates.</li>\n<li><var>\\Delta</var> and <var>R</var> shares no vertex.</li>\n<li>Each vertex of <var>\\Delta</var> lies on the perimeter of <var>R</var>, and all the vertices belong to different sides of <var>R</var>.</li>\n<li><var>\\Delta</var> contains at most <var>K</var> grid points strictly within itself (excluding its perimeter and vertices).</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq W \\leq 10^5</var></li>\n<li><var>1 \\leq H \\leq 10^5</var></li>\n<li><var>0 \\leq K \\leq 10^5</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>W</var> <var>H</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>For example, the triangle with the vertices <var>(1,0)</var>, <var>(0,2)</var>, and <var>(2,2)</var> contains just one grid point within itself and thus satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>132\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 100 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>461316\n</pre></section>\n</div>\n</span>", "p02653": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a string <var>x</var> of length <var>N</var>.\nInitially, every character in <var>x</var> is <code>0</code>.</p>\n<p>Snuke can do the following two operations any number of times in any order:</p>\n<ul>\n<li>Choose <var>A</var> consecutive characters in <var>x</var> and replace each of them with <code>0</code>.</li>\n<li>Choose <var>B</var> consecutive characters in <var>x</var> and replace each of them with <code>1</code>.</li>\n</ul>\n<p>Find the number of different strings that <var>x</var> can be after Snuke finishes doing operations.\nThis count can be enormous, so compute it modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 5000</var></li>\n<li><var>1 \\leq A,B \\leq N</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of different strings that <var>x</var> can be after Snuke finishes doing operations, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11\n</pre>\n<p>For example, <var>x</var> can be <code>0011</code> or <code>1111</code> in the end, but cannot be <code>0110</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 7 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>533\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1000 100 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>828178524\n</pre></section>\n</div>\n</span>", "p02648": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a rooted binary tree with <var>N</var> vertices, where the vertices are numbered <var>1</var> to <var>N</var>.\nVertex <var>1</var> is the root, and the parent of Vertex <var>i</var> (<var>i \\geq 2</var>) is Vertex <var>\\left[ \\frac{i}{2} \\right]</var>.</p>\n<p>Each vertex has one item in it. The item in Vertex <var>i</var> has a value of <var>V_i</var> and a weight of <var>W_i</var>.\nNow, process the following query <var>Q</var> times:</p>\n<ul>\n<li>Given are a vertex <var>v</var> of the tree and a positive integer <var>L</var>.\n  Let us choose some (possibly none) of the items in <var>v</var> and the ancestors of <var>v</var> so that their total weight is at most <var>L</var>.\n  Find the maximum possible total value of the chosen items.</li>\n</ul>\n<p>Here, Vertex <var>u</var> is said to be an ancestor of Vertex <var>v</var> when <var>u</var> is an indirect parent of <var>v</var>, that is, there exists a sequence of vertices <var>w_1,w_2,\\ldots,w_k</var> (<var>k\\geq 2</var>) where <var>w_1=v</var>, <var>w_k=u</var>, and <var>w_{i+1}</var> is the parent of <var>w_i</var> for each <var>i</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N &lt; 2^{18}</var></li>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>1 \\leq V_i \\leq 10^5</var></li>\n<li><var>1 \\leq W_i \\leq 10^5</var></li>\n<li>For the values <var>v</var> and <var>L</var> given in each query, <var>1 \\leq v \\leq N</var> and <var>1 \\leq L \\leq 10^5</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Let <var>v_i</var> and <var>L_i</var> be the values <var>v</var> and <var>L</var> given in the <var>i</var>-th query.\nThen, Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>V_1</var> <var>W_1</var>\n<var>:</var>\n<var>V_N</var> <var>W_N</var>\n<var>Q</var>\n<var>v_1</var> <var>L_1</var>\n<var>:</var>\n<var>v_Q</var> <var>L_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each integer <var>i</var> from <var>1</var> through <var>Q</var>,\nthe <var>i</var>-th line should contain the response to the <var>i</var>-th query.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2\n2 3\n3 4\n3\n1 1\n2 5\n3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n3\n3\n</pre>\n<p>In the first query, we are given only one choice: the item with <var>(V, W)=(1,2)</var>. Since <var>L = 1</var>, we cannot actually choose it, so our response should be <var>0</var>.</p>\n<p>In the second query, we are given two choices: the items with <var>(V, W)=(1,2)</var> and <var>(V, W)=(2,3)</var>. Since <var>L = 5</var>, we can choose both of them, so our response should be <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>15\n123 119\n129 120\n132 112\n126 109\n118 103\n115 109\n102 100\n130 120\n105 105\n132 115\n104 102\n107 107\n127 116\n121 104\n121 115\n8\n8 234\n9 244\n10 226\n11 227\n12 240\n13 237\n14 206\n15 227\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>256\n255\n250\n247\n255\n259\n223\n253\n</pre></section>\n</div>\n</span>", "p02655": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> boxes numbered <var>1</var> to <var>N</var>, and <var>M</var> balls numbered <var>1</var> to <var>M</var>.\nCurrently, Ball <var>i</var> is in Box <var>A_i</var>.</p>\n<p>You can do the following operation:</p>\n<ul>\n<li>Choose a box containing two or more balls, pick up one of the balls from that box, and put it into another box.</li>\n</ul>\n<p>Since the balls are very easy to break, you cannot move Ball <var>i</var> more than <var>C_i</var> times in total.\nWithin this limit, you can do the operation any number of times.</p>\n<p>Your objective is to have Ball <var>i</var> in Box <var>B_i</var> for every <var>i</var> (<var>1 \\leq i \\leq M</var>).\nDetermine whether this objective is achievable.\nIf it is, also find the minimum number of operations required to achieve it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq A_i,B_i \\leq N</var></li>\n<li><var>1 \\leq C_i \\leq 10^5</var></li>\n<li>In the situation where the objective is achieved, every box contains one or more balls.\nThat is, for every <var>i</var> (<var>1 \\leq i \\leq N</var>), there exists <var>j</var> such that <var>B_j=i</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var>\n<var>A_2</var> <var>B_2</var> <var>C_2</var>\n<var>\\vdots</var>\n<var>A_M</var> <var>B_M</var> <var>C_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the objective is unachievable, print <var>-1</var>; if it is achievable, print the minimum number of operations required to achieve it.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 2 1\n2 1 1\n1 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>We can achieve the objective in three operations, as follows:</p>\n<ul>\n<li>Pick up Ball <var>1</var> from Box <var>1</var> and put it into Box <var>2</var>.</li>\n<li>Pick up Ball <var>2</var> from Box <var>2</var> and put it into Box <var>1</var>.</li>\n<li>Pick up Ball <var>3</var> from Box <var>1</var> and put it into Box <var>3</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2\n1 2 1\n2 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 5\n1 2 1\n2 1 1\n1 3 2\n4 5 1\n5 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1 1\n1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02654": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> lamps numbered <var>1</var> to <var>N</var>, and <var>N</var> buttons numbered <var>1</var> to <var>N</var>.\nInitially, Lamp <var>1, 2, \\cdots, A</var> are on, and the other lamps are off.</p>\n<p>Snuke and Ringo will play the following game.</p>\n<ul>\n<li>\n<p>First, Ringo generates a permutation <var>(p_1,p_2,\\cdots,p_N)</var> of  <var>(1,2,\\cdots,N)</var>.\nThe permutation is chosen from all <var>N!</var> possible permutations with equal probability, without being informed to Snuke.</p>\n</li>\n<li>\n<p>Then, Snuke does the following operation any number of times he likes:</p>\n<ul>\n<li>Choose a lamp that is on at the moment. (The operation cannot be done if there is no such lamp.)\nLet Lamp <var>i</var> be the chosen lamp.\nPress Button <var>i</var>, which switches the state of Lamp <var>p_i</var>. That is, Lamp <var>p_i</var> will be turned off if it is on, and vice versa.</li>\n</ul>\n</li>\n</ul>\n<p>At every moment, Snuke knows which lamps are on.\nSnuke wins if all the lamps are on, and he will surrender when it turns out that he cannot win.\nWhat is the probability of winning when Snuke plays optimally?</p>\n<p>Let <var>w</var> be the probability of winning. Then, <var>w \\times N!</var> will be an integer.\nCompute <var>w \\times N!</var> modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^7</var></li>\n<li><var>1 \\leq A \\leq \\min(N-1,5000)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>w \\times N!</var> modulo <var>(10^9+7)</var>, where <var>w</var> is the probability of Snuke's winning.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>First, Snuke will press Button <var>1</var>.\nIf Lamp <var>1</var> turns off, he loses.\nOtherwise, he will press the button that he can now press.\nIf the remaining lamp turns on, he wins; if Lamp <var>1</var> turns off, he loses.\nThe probability of winning in this game is <var>1/3</var>, so we should print <var>(1/3)\\times 3!=2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>16776\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>9999999 4999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>90395416\n</pre></section>\n</div>\n</span>", "p02657": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Compute <var>A \\times B</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A \\leq 100</var></li>\n<li><var>1 \\leq B \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value <var>A \\times B</var> as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>We have <var>2 \\times 5 = 10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10000\n</pre></section>\n</div>\n</span>", "p02656": "<span class=\"lang-en\">\n<p>Score : <var>1800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has <var>X+Y</var> balls.\n<var>X</var> of them have an integer <var>A</var> written on them, and the other <var>Y</var> of them have an integer <var>B</var> written on them.</p>\n<p>Snuke will divide these balls into some number of groups.\nHere, every ball should be contained in exactly one group, and every group should contain one or more balls.</p>\n<p>A group is said to be <strong>good</strong> when the sum of the integers written on the balls in that group is a multiple of an integer <var>C</var>.\nFind the maximum possible number of good groups.</p>\n<p>Solve <var>T</var> test cases for each input file.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq T \\leq 2 \\times 10^4</var></li>\n<li><var>1 \\leq A,X,B,Y,C \\leq 10^9</var></li>\n<li><var>A \\neq B</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format.\nThe first line is as follows:</p>\n<pre><var>T</var>\n</pre>\n<p>Then, <var>T</var> test cases follow.\nEach test case is given in the following format:</p>\n<pre><var>A</var> <var>X</var> <var>B</var> <var>Y</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each test case, print a line containing the maximum possible number of good groups.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 3 4 4 5\n2 1 1 5 3\n3 1 4 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n2\n0\n</pre>\n<p>In the first test case, we can have two good groups by making the following groups: <var>\\{3,3,4\\}</var> and <var>\\{3,4,4,4\\}</var>.</p>\n<p>In the second test case, we can have two good groups by making the following groups: <var>\\{2,1\\}, \\{1,1,1\\},</var> and <var>\\{1\\}</var>.</p></section>\n</div>\n</span>", "p02659": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Compute <var>A \\times B</var>, truncate its fractional part, and print the result as an integer.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq A \\leq 10^{15}</var></li>\n<li><var>0 \\leq B &lt; 10</var></li>\n<li><var>A</var> is an integer.</li>\n<li><var>B</var> is a number with two digits after the decimal point.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>198 1.10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>217\n</pre>\n<p>We have <var>198 \\times 1.10 = 217.8</var>. After truncating the fractional part, we have the answer: <var>217</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 0.01\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1000000000000000 9.99\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>9990000000000000\n</pre></section>\n</div>\n</span>", "p02661": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> integers <var>X_1, X_2, \\cdots, X_N</var>, and we know that <var>A_i \\leq X_i \\leq B_i</var>.\nFind the number of different values that the median of <var>X_1, X_2, \\cdots, X_N</var> can take.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>The median of <var>X_1, X_2, \\cdots, X_N</var> is defined as follows. Let <var>x_1, x_2, \\cdots, x_N</var> be the result of sorting <var>X_1, X_2, \\cdots, X_N</var> in ascending order.</p>\n<ul>\n<li>If <var>N</var> is odd, the median is <var>x_{(N+1)/2}</var>;</li>\n<li>if <var>N</var> is even, the median is <var>(x_{N/2} + x_{N/2+1}) / 2</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq B_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<ul>\n<li>\n<p>If <var>X_1 = 1</var> and <var>X_2 = 2</var>, the median is <var>\\frac{3}{2}</var>;</p>\n</li>\n<li>\n<p>if <var>X_1 = 1</var> and <var>X_2 = 3</var>, the median is <var>2</var>;</p>\n</li>\n<li>\n<p>if <var>X_1 = 2</var> and <var>X_2 = 2</var>, the median is <var>2</var>;</p>\n</li>\n<li>\n<p>if <var>X_1 = 2</var> and <var>X_2 = 3</var>, the median is <var>\\frac{5}{2}</var>.</p>\n</li>\n</ul>\n<p>Thus, the median can take three values: <var>\\frac{3}{2}</var>, <var>2</var>, and <var>\\frac{5}{2}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n100 100\n10 10000\n1 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9991\n</pre></section>\n</div>\n</span>", "p02658": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given <var>N</var> integers <var>A_1, ..., A_N</var>, compute <var>A_1 \\times ... \\times A_N</var>.</p>\n<p>However, if the result exceeds <var>10^{18}</var>, print <code>-1</code> instead.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq A_i \\leq 10^{18}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value <var>A_1 \\times ... \\times A_N</var> as an integer, or <code>-1</code> if the value exceeds <var>10^{18}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1000000000000000000\n</pre>\n<p>We have <var>1000000000 \\times 1000000000 = 1000000000000000000</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n101 9901 999999000001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>We have <var>101 \\times 9901 \\times 999999000001 = 1000000000000000001</var>, which exceeds <var>10^{18}</var>, so we should print <code>-1</code> instead.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31\n4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02662": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are a sequence of <var>N</var> positive integers <var>A_1</var>, <var>A_2</var>, <var>\\ldots</var>, <var>A_N</var> and another positive integer <var>S</var>.<br/>\nFor a non-empty subset <var>T</var> of the set <var>\\{1, 2, \\ldots , N \\}</var>, let us define <var>f(T)</var> as follows:<br/></p>\n<ul>\n<li><var>f(T)</var> is the number of different non-empty subsets <var>\\{x_1, x_2, \\ldots , x_k \\}</var> of <var>T</var> such that <var>A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S</var>.</li>\n</ul>\n<p>Find the sum of <var>f(T)</var> over all <var>2^N-1</var> subsets <var>T</var> of <var>\\{1, 2, \\ldots , N \\}</var>. Since the sum can be enormous, print it modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 3000</var></li>\n<li><var>1 \\leq S \\leq 3000</var></li>\n<li><var>1 \\leq A_i \\leq 3000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>S</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of <var>f(T)</var> modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4\n2 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>For each <var>T</var>, the value of <var>f(T)</var> is shown below. The sum of these values is <var>6</var>.</p>\n<ul>\n<li><var>f(\\{1\\}) = 0</var></li>\n<li><var>f(\\{2\\}) = 0</var></li>\n<li><var>f(\\{3\\}) = 1</var> (One subset <var>\\{3\\}</var> satisfies the condition.)</li>\n<li><var>f(\\{1, 2\\}) = 1</var> (<var>\\{1, 2\\}</var>)</li>\n<li><var>f(\\{2, 3\\}) = 1</var> (<var>\\{3\\}</var>)</li>\n<li><var>f(\\{1, 3\\}) = 1</var> (<var>\\{3\\}</var>)</li>\n<li><var>f(\\{1, 2, 3\\}) = 2</var> (<var>\\{1, 2\\}, \\{3\\}</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 8\n9 9 9 9 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 10\n3 1 4 1 5 9 2 6 5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3296\n</pre></section>\n</div>\n</span>", "p02660": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Given is a positive integer <var>N</var>. Consider repeatedly applying the operation below on <var>N</var>:</p>\n<ul>\n<li>First, choose a positive integer <var>z</var> satisfying all of the conditions below:<ul>\n<li><var>z</var> can be represented as <var>z=p^e</var>, where <var>p</var> is a prime number and <var>e</var> is a positive integer;</li>\n<li><var>z</var> divides <var>N</var>;</li>\n<li><var>z</var> is different from all integers chosen in previous operations.</li>\n</ul>\n</li>\n<li>Then, replace <var>N</var> with <var>N/z</var>.</li>\n</ul>\n<p>Find the maximum number of times the operation can be applied.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^{12}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the maximum number of times the operation can be applied.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>24\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>We can apply the operation three times by, for example, making the following choices:</p>\n<ul>\n<li>Choose <var>z=2 (=2^1)</var>. (Now we have <var>N=12</var>.)</li>\n<li>Choose <var>z=3 (=3^1)</var>. (Now we have <var>N=4</var>.)</li>\n<li>Choose <var>z=4 (=2^2)</var>. (Now we have <var>N=1</var>.)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>We cannot apply the operation at all.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>64\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre>\n<p>We can apply the operation three times by, for example, making the following choices:</p>\n<ul>\n<li>Choose <var>z=2 (=2^1)</var>. (Now we have <var>N=32</var>.)</li>\n<li>Choose <var>z=4 (=2^2)</var>. (Now we have <var>N=8</var>.)</li>\n<li>Choose <var>z=8 (=2^3)</var>. (Now we have <var>N=1</var>.)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1000000007\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>1\n</pre>\n<p>We can apply the operation once by, for example, making the following choice:</p>\n<ul>\n<li><var>z=1000000007 (=1000000007^1)</var>. (Now we have <var>N=1</var>.)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>997764507000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>7\n</pre></section>\n</div>\n</span>", "p02664": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For a string <var>S</var> consisting of the uppercase English letters <code>P</code> and <code>D</code>, let the <em>doctoral and postdoctoral quotient</em> of <var>S</var> be the total number of occurrences of <code>D</code> and <code>PD</code> in <var>S</var> as contiguous substrings. For example, if <var>S =</var> <code>PPDDP</code>, it contains two occurrences of <code>D</code> and one occurrence of <code>PD</code> as contiguous substrings, so the doctoral and postdoctoral quotient of <var>S</var> is <var>3</var>.</p>\n<p>We have a string <var>T</var> consisting of <code>P</code>, <code>D</code>, and <code>?</code>.</p>\n<p>Among the strings that can be obtained by replacing each <code>?</code> in <var>T</var> with <code>P</code> or <code>D</code>, find one with the maximum possible doctoral and postdoctoral quotient.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |T| \\leq 2 \\times 10^5</var></li>\n<li><var>T</var> consists of <code>P</code>, <code>D</code>, and <code>?</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print one string with the maximum possible doctoral and postdoctoral quotient among the strings that can be obtained by replacing each <code>?</code> in <var>T</var> with <code>P</code> or <code>D</code>.\nIf there are multiple such strings, you may print any of them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>PD?D??P\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>PDPDPDP\n</pre>\n<p>This string contains three occurrences of <code>D</code> and three occurrences of <code>PD</code> as contiguous substrings, so its doctoral and postdoctoral quotient is <var>6</var>, which is the maximum doctoral and postdoctoral quotient of a string obtained by replacing each <code>?</code> in <var>T</var> with <code>P</code> or <code>D</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>P?P?\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>PDPD\n</pre></section>\n</div>\n</span>", "p02666": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> towns numbered <var>1, 2, \\cdots, N</var>.</p>\n<p>Some roads are planned to be built so that each of them connects two distinct towns bidirectionally. Currently, there are no roads connecting towns.</p>\n<p>In the planning of construction, each town chooses one town different from itself and requests the following: roads are built so that the chosen town is reachable from itself using one or more roads.</p>\n<p>These requests from the towns are represented by an array <var>P_1, P_2, \\cdots, P_N</var>. If <var>P_i = -1</var>, it means that Town <var>i</var> has not chosen the request; if <var>1 \\leq P_i \\leq N</var>, it means that Town <var>i</var> has chosen Town <var>P_i</var>.</p>\n<p>Let <var>K</var> be the number of towns <var>i</var> such that <var>P_i = -1</var>. There are <var>(N-1)^K</var> ways in which the towns can make the requests. For each way to make requests, find the minimum number of roads needed to meet all the requests, and print the sum of those <var>(N-1)^K</var> numbers, modulo (<var>10^9+7</var>).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 5000</var></li>\n<li><var>P_i = -1</var> or <var>1 \\leq P_i \\leq N</var>.</li>\n<li><var>P_i \\neq i</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_1</var> <var>P_2</var> <var>\\cdots</var> <var>P_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each way to make requests, find the minimum number of roads needed to meet all the requests, and print the sum of those <var>(N-1)^K</var> numbers, modulo (<var>10^9+7</var>).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 1 -1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>There are three ways to make requests, as follows:</p>\n<ul>\n<li>Choose <var>P_1 = 2, P_2 = 1, P_3 = 1, P_4 = 3</var>. In this case, at least three roads - for example, <var>(1,2),(1,3),(3,4)</var> - are needed to meet the requests.</li>\n<li>Choose <var>P_1 = 2, P_2 = 1, P_3 = 2, P_4 = 3</var>. In this case, at least three roads - for example, <var>(1,2),(1,3),(3,4)</var> - are needed to meet the requests.</li>\n<li>Choose <var>P_1 = 2, P_2 = 1, P_3 = 4, P_4 = 3</var>. In this case, at least two roads - for example, <var>(1,2),(3,4)</var> - are needed to meet the requests.</li>\n</ul>\n<p>Note that it is not mandatory to connect Town <var>i</var> and Town <var>P_i</var> directly.</p>\n<p>The sum of the above numbers is <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>There may be just one fixed way to make requests.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n2 6 9 -1 6 9 -1 -1 -1 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>527841\n</pre></section>\n</div>\n</span>", "p02663": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In this problem, we use the <var>24</var>-hour clock.</p>\n<p>Takahashi gets up exactly at the time <var>H_1</var> : <var>M_1</var> and goes to bed exactly at the time <var>H_2</var> : <var>M_2</var>. (See Sample Inputs below for clarity.)\nHe has decided to study for <var>K</var> consecutive minutes while he is up.\nWhat is the length of the period in which he can start studying?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\le H_1, H_2 \\le 23</var></li>\n<li><var>0 \\le M_1, M_2 \\le 59</var></li>\n<li>The time <var>H_1</var> : <var>M_1</var> comes before the time <var>H_2</var> : <var>M_2</var>.</li>\n<li><var>K \\ge 1</var></li>\n<li>Takahashi is up for at least <var>K</var> minutes.</li>\n<li>All values in input are integers (without leading zeros).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H_1</var> <var>M_1</var> <var>H_2</var> <var>M_2</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the length of the period in which he can start studying, as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 0 15 0 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>270\n</pre>\n<p>Takahashi gets up at exactly ten in the morning and goes to bed at exactly three in the afternoon.\nIt takes <var>30</var> minutes to do the study, so he can start it in the period between ten o'clock and half-past two. The length of this period is <var>270</var> minutes, so we should print <var>270</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 0 12 0 120\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Takahashi gets up at exactly ten in the morning and goes to bed at exactly noon. It takes <var>120</var> minutes to do the study, so he has to start it at exactly ten o'clock. Thus, we should print <var>0</var>.</p></section>\n</div>\n</span>", "p02667": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has an empty string <var>S</var> and a variable <var>x</var> whose initial value is <var>0</var>.</p>\n<p>Also, we have a string <var>T</var> consisting of <code>0</code> and <code>1</code>.</p>\n<p>Now, Takahashi will do the operation with the following two steps <var>|T|</var> times.</p>\n<ul>\n<li>Insert a <code>0</code> or a <code>1</code> at any position of <var>S</var> of his choice.</li>\n<li>Then, increment <var>x</var> by the sum of the digits in the odd positions (first, third, fifth, ...) of <var>S</var>. For example, if <var>S</var> is <code>01101</code>, the digits in the odd positions are <code>0</code>, <code>1</code>, <code>1</code> from left to right, so <var>x</var> is incremented by <var>2</var>.</li>\n</ul>\n<p>Print the maximum possible final value of <var>x</var> in a sequence of operations such that <var>S</var> equals <var>T</var> in the end.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |T| \\leq 2 \\times 10^5</var></li>\n<li><var>T</var> consists of <code>0</code> and <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible final value of <var>x</var> in a sequence of operations such that <var>S</var> equals <var>T</var> in the end.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>Below is one sequence of operations that maximizes the final value of <var>x</var> to <var>5</var>.</p>\n<ul>\n<li>Insert a <code>1</code> at the beginning of <var>S</var>. <var>S</var> becomes <code>1</code>, and <var>x</var> is incremented by <var>1</var>.</li>\n<li>Insert a <code>0</code> to the immediate right of the first character of <var>S</var>. <var>S</var> becomes <code>10</code>, and <var>x</var> is incremented by <var>1</var>.</li>\n<li>Insert a <code>1</code> to the immediate right of the second character of <var>S</var>. <var>S</var> becomes <code>101</code>, and <var>x</var> is incremented by <var>2</var>.</li>\n<li>Insert a <code>1</code> at the beginning of <var>S</var>. <var>S</var> becomes <code>1101</code>, and <var>x</var> is incremented by <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0111101101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>26\n</pre></section>\n</div>\n</span>", "p02669": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You start with the number <var>0</var> and you want to reach the number <var>N</var>.</p>\n<p>You can change the number, paying a certain amount of coins, with the following operations:</p>\n<ul>\n<li>Multiply the number by <var>2</var>, paying <var>A</var> coins.</li>\n<li>Multiply the number by <var>3</var>, paying <var>B</var> coins.</li>\n<li>Multiply the number by <var>5</var>, paying <var>C</var> coins.</li>\n<li>Increase or decrease the number by <var>1</var>, paying <var>D</var> coins.</li>\n</ul>\n<p>You can perform these operations in arbitrary order and an arbitrary number of times.</p>\n<p>What is the minimum number of coins you need to reach <var>N</var>?</p>\n<p><strong>You have to solve <var>T</var> testcases.</strong></p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\le T \\le 10</var></li>\n<li><var>1 \\le N \\le 10^{18}</var></li>\n<li><var>1 \\le A, B, C, D \\le 10^9</var></li>\n<li>All numbers <var>N, A, B, C, D</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input. The first line of the input is</p>\n<pre><var>T</var>\n</pre>\n<p>Then, <var>T</var> lines follow describing the <var>T</var> testcases.\nEach of the <var>T</var> lines has the format</p>\n<pre><var>N</var> <var>A</var> <var>B</var> <var>C</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each testcase, print the answer on Standard Output followed by a newline.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n11 1 2 4 8\n11 1 2 2 8\n32 10 8 5 4\n29384293847243 454353412 332423423 934923490 1\n900000000000000000 332423423 454353412 934923490 987654321\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>20\n19\n26\n3821859835\n23441258666\n</pre>\n<p>For the first testcase, a sequence of moves that achieves the minimum cost of <var>20</var> is:</p>\n<ul>\n<li>Initially <var>x = 0</var>.</li>\n<li>Pay <var>8</var> to increase by <var>1</var> (<var>x = 1</var>).</li>\n<li>Pay <var>1</var> to multiply by <var>2</var> (<var>x = 2</var>).</li>\n<li>Pay <var>1</var> to multiply by <var>2</var> (<var>x = 4</var>).</li>\n<li>Pay <var>2</var> to multiply by <var>3</var> (<var>x = 12</var>).</li>\n<li>Pay <var>8</var> to decrease by <var>1</var> (<var>x = 11</var>).</li>\n</ul>\n<p>For the second testcase, a sequence of moves that achieves the minimum cost of <var>19</var> is:</p>\n<ul>\n<li>Initially <var>x = 0</var>.</li>\n<li>Pay <var>8</var> to increase by <var>1</var> (<var>x = 1</var>).</li>\n<li>Pay <var>1</var> to multiply by <var>2</var> (<var>x = 2</var>).</li>\n<li>Pay <var>2</var> to multiply by <var>5</var> (<var>x = 10</var>).</li>\n<li>Pay <var>8</var> to increase by <var>1</var> (<var>x = 11</var>).</li>\n</ul></section>\n</div>\n</span>", "p02668": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi and Snuke came up with a game that uses a number sequence, as follows:</p>\n<ul>\n<li>\n<p>Prepare a sequence of length <var>M</var> consisting of integers between <var>0</var> and <var>2^N-1</var> (inclusive): <var>a = a_1, a_2, \\ldots, a_M</var>.</p>\n</li>\n<li>\n<p>Snuke first does the operation below as many times as he likes:</p>\n<ul>\n<li>Choose a positive integer <var>d</var>, and for each <var>i</var> <var>(1 \\leq i \\leq M)</var>, in binary, set the <var>d</var>-th least significant bit of <var>a_i</var> to <var>0</var>. (Here the least significant bit is considered the <var>1</var>-st least significant bit.)</li>\n</ul>\n</li>\n<li>\n<p>After Snuke finishes doing operations, Takahashi tries to sort <var>a</var> in ascending order by doing the operation below some number of times. Here <var>a</var> is said to be in ascending order when <var>a_i \\leq a_{i + 1}</var> for all <var>i</var> <var>(1 \\leq i \\leq M - 1)</var>.</p>\n<ul>\n<li>Choose two adjacent elements of <var>a</var>: <var>a_i</var> and <var>a_{i + 1}</var>. If, in binary, these numbers differ in exactly one bit, swap <var>a_i</var> and <var>a_{i + 1}</var>.</li>\n</ul>\n</li>\n</ul>\n<p>There are <var>2^{NM}</var> different sequences of length <var>M</var> consisting of integers between <var>0</var> and <var>2^N-1</var> that can be used in the game.</p>\n<p>How many among them have the following property: if used in the game, there is always a way for Takahashi to sort the sequence in ascending order regardless of Snuke's operations? Find the count modulo <var>(10^9 + 7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 5000</var></li>\n<li><var>2 \\leq M \\leq 5000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number, modulo <var>(10^9 + 7)</var>, of sequences with the property: if used in the game, there is always a way for Takahashi to sort the sequence in ascending order regardless of Snuke's operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>352\n</pre>\n<p>Consider the case <var>a = 1, 3, 1, 3, 1</var> for example.</p>\n<ul>\n<li>When the least significant bit of each element of <var>a</var> is set to <var>0</var>, <var>a = 0, 2, 0, 2, 0</var>;</li>\n<li>When the second least significant bit of each element of <var>a</var> is set to <var>0</var>, <var>a = 1, 1, 1, 1, 1</var>;</li>\n<li>When the least two significant bits of each element of <var>a</var> are set to <var>0</var>, <var>a = 0, 0, 0, 0, 0</var>.</li>\n</ul>\n<p>In all of the cases above and the case when Snuke does no operation to change <var>a</var>, we can sort the sequence by repeatedly swapping adjacent elements that differ in exactly one bit.\nThus, this sequence has the property: if used in the game, there is always a way for Takahashi to sort the sequence in ascending order regardless of Snuke's operations.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2020 530\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>823277409\n</pre></section>\n</div>\n</span>", "p02670": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Tonight, in your favourite cinema they are giving the movie Joker and all seats are occupied. In the cinema there are <var>N</var> rows with <var>N</var> seats each, forming an <var>N\\times N</var> square. We denote with <var>1, 2,\\dots, N</var> the viewers in the first row (from left to right); with <var>N+1, \\dots, 2N</var> the viewers in the second row (from left to right); and so on until the last row, whose viewers are denoted by <var>N^2-N+1,\\dots, N^2</var>.</p>\n<p>At the end of the movie, the viewers go out of the cinema in a certain order: the <var>i</var>-th viewer leaving her seat is the one denoted by the number <var>P_i</var>. The viewer <var>P_{i+1}</var> waits until viewer <var>P_i</var> has left the cinema before leaving her seat.\nTo exit from the cinema, a viewer must move from seat to seat until she exits the square of seats (any side of the square is a valid exit). A viewer can move from a seat to one of its <var>4</var> adjacent seats (same row or same column).\nWhile leaving the cinema, it might be that a certain viewer <var>x</var> goes through a seat <strong>currently</strong> occupied by viewer <var>y</var>; in that case viewer <var>y</var> will hate viewer <var>x</var> forever. Each viewer chooses the way that minimizes the number of viewers that will hate her forever.</p>\n<p>Compute the number of pairs of viewers <var>(x, y)</var> such that <var>y</var> will hate <var>x</var> forever.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\le N \\le 500</var></li>\n<li>The sequence <var>P_1, P_2, \\dots, P_{N^2}</var> is a permutation of <var>\\{1, 2, \\dots, N^2\\}</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the format</p>\n<pre><var>N</var>\n<var>P_1</var> <var>P_2</var> <var>\\cdots</var> <var>P_{N^2}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>ans</var> is the number of pairs of viewers described in the statement, you should print on Standard Output</p>\n<pre><var>ans</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 3 7 9 5 4 8 6 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Before the end of the movie, the viewers are arranged in the cinema as follows:</p>\n<pre>1 2 3\n4 5 6\n7 8 9\n</pre>\n<p>The first four viewers leaving the cinema (<var>1</var>, <var>3</var>, <var>7</var>, <var>9</var>) can leave the cinema without going through any seat, so they will not be hated by anybody.</p>\n<p>Then, viewer <var>5</var> must go through one of the seats where viewers <var>2</var>, <var>4</var>, <var>6</var>, <var>8</var> are currently seated while leaving the cinema; hence he will be hated by at least one of those viewers.</p>\n<p>Finally the remaining viewers can leave the cinema (in the order <var>4</var>, <var>8</var>, <var>6</var>, <var>2</var>) without going through any occupied seat (actually, they can leave the cinema without going through any seat at all).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n6 7 1 4 13 16 10 9 5 11 12 14 15 2 3 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n11 21 35 22 7 36 27 34 8 20 15 13 16 1 24 3 2 17 26 9 18 32 31 23 19 14 4 25 10 29 28 33 12 6 5 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>11\n</pre></section>\n</div>\n</span>", "p02671": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>3^N</var> people dancing in circle.\nWe denote with <var>0,1,\\dots, 3^{N}-1</var> the positions in the circle, starting from an arbitrary position and going around clockwise. Initially each position in the circle is occupied by one person.</p>\n<p>The people are going to dance on two kinds of songs: salsa and rumba.</p>\n<ul>\n<li>When a salsa is played, the person in position <var>i</var> goes to position <var>j</var>, where <var>j</var> is the number obtained replacing all digits <var>1</var> with <var>2</var> and all digits <var>2</var> with <var>1</var> when reading <var>i</var> in base <var>3</var> (e.g., the person in position <var>46</var> goes to position <var>65</var>).</li>\n<li>When a rumba is played, the person in position <var>i</var> moves to position <var>i+1</var> (with the identification <var>3^N = 0</var>).</li>\n</ul>\n<p>You are given a string <var>T=T_1T_2\\cdots T_{|T|}</var> such that <var>T_i=</var><code>S</code> if the <var>i</var>-th song is a salsa and <var>T_i=</var><code>R</code> if it is a rumba.\nAfter all the songs have been played, the person that initially was in position <var>i</var> is in position <var>P_i</var>.\nCompute the array <var>P_0,P_1,\\dots, P_{3^N-1}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\le N \\le 12</var></li>\n<li><var>1 \\le |T| \\le 200,000</var></li>\n<li><var>T</var> contains only the characters <code>S</code> and <code>R</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>You should print on Standard Output:</p>\n<pre><var>P_0</var> <var>P_1</var> <var>\\cdots</var> <var>P_{3^N-1}</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\nSRS\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 0 1 \n</pre>\n<p>Before any song is played, the positions are: <var>0</var>, <var>1</var>, <var>2</var>.</p>\n<p>When we say \"person <var>i</var>\", we mean \"the person that was initially in position <var>i</var>\".</p>\n<ol>\n<li>After the first salsa, the positions are: <var>0</var>, <var>2</var>, <var>1</var>.</li>\n<li>After the rumba, the positions are: <var>1</var>, <var>0</var>, <var>2</var> (so, person <var>0</var> is in position <var>1</var>, person <var>1</var> is in position <var>0</var> and person <var>2</var> is in position <var>2</var>).</li>\n<li>After the second salsa, the positions are <var>2</var>, <var>0</var>, <var>1</var> (so, person <var>0</var> is in position <var>2</var>, person <var>1</var> is in position <var>0</var> and person <var>2</var> is in position <var>1</var>).</li>\n</ol>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\nRRSRSSSSR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3 8 1 0 5 7 6 2 4 \n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\nSRSRRSRRRSRRRR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>23 9 22 8 3 7 20 24 19 5 18 4 17 12 16 2 6 1 14 0 13 26 21 25 11 15 10 \n</pre></section>\n</div>\n</span>", "p02674": "<span class=\"lang-en\">\n<p>Score : <var>2400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> people (with different names) and <var>K</var> clubs. For each club you know the list of members (so you have <var>K</var> unordered lists). Each person can be a member of many clubs (and also <var>0</var> clubs) and two different clubs might have exactly the same members.\nThe value of the number <var>K</var> is the minimum possible such that the following property can be true for at least one configuration of clubs.\nIf every person changes her name (maintaining the property that all names are different) and you know the new <var>K</var> lists of members of the clubs (but you don't know which list corresponds to which club), you are sure that you would be able to match the old names with the new ones.</p>\n<p>Count the number of such configurations of clubs (or say that there are more than <var>1000</var>).\nTwo configurations of clubs that can be obtained one from the other if the <var>N</var> people change their names are considered equal.</p>\n<p><strong>Formal statement</strong>:\nA club is a (possibly empty) subset of <var>\\{1,\\dots, N\\}</var> (the subset identifies the members, assuming that the people are indexed by the numbers <var>1, 2,\\dots, N</var>).\nA configuration of clubs is an unordered collection of <var>K</var> clubs (not necessarily distinct).\nGiven a permutation <var>\\sigma(1), \\dots, \\sigma(N)</var> of <var>\\{1,\\dots, N\\}</var> and a configuration of clubs <var>L=\\{C_1, C_2, \\dots, C_K\\}</var>, we denote with <var>\\sigma(L)</var> the configuration of clubs <var>\\{\\sigma(C_1), \\sigma(C_2), \\dots, \\sigma(C_K)\\}</var> (if <var>C</var> is a club,  <var>\\sigma(C)=\\{\\sigma(x):\\, x\\in C\\}</var>).\nA configuration of clubs <var>L</var> is name-preserving if for any pair of distinct permutations <var>\\sigma\\not=\\tau</var>, it holds <var>\\sigma(L)\\not=\\tau(L)</var>.</p>\n<p>You have to count the number of name-preserving configurations of clubs with the minimum possible number of clubs (so <var>K</var> is minimum). Two configurations <var>L_1, L_2</var> such that <var>L_2=\\sigma(L_1)</var> (for some permutation <var>\\sigma</var>) are considered equal.\nIf there are more than <var>1000</var> such configurations, print <var>-1</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\le N \\le 2\\cdot10^{18}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the format</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>ans</var> is the number of configurations with the properties described in the statement, you should print on Standard Output</p>\n<pre><var>ans</var>\n</pre>\n<p>If there are more than <var>1000</var> such configurations, print <var>-1</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The value of <var>K</var> is <var>1</var> and the unique name-preserving configuration of clubs is <var>\\{\\{1\\}\\}</var> (the configuration <var>\\{\\{2\\}\\}</var> is considered the same).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>The value of <var>K</var> is <var>2</var> and the unique (up to permutation) name-preserving configuration of clubs is <var>\\{\\{1\\}, \\{1, 2\\}\\}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7\n</pre>\n<p>The value of <var>K</var> is <var>3</var> and the name-preserving configurations of clubs with <var>3</var> clubs are:</p>\n<ul>\n<li><var>\\{\\{1\\}, \\{2\\}, \\{1, 3\\}\\}</var></li>\n<li><var>\\{\\{1\\}, \\{1, 2\\}, \\{2, 3\\}\\}</var></li>\n<li><var>\\{\\{1, 2\\}, \\{1, 2\\}, \\{1, 3\\}\\}</var></li>\n<li><var>\\{\\{1\\}, \\{1, 2\\}, \\{1, 2, 3\\}\\}</var></li>\n<li><var>\\{\\{1\\}, \\{2, 3\\}, \\{1, 2, 4\\}\\}</var></li>\n<li><var>\\{\\{1, 2\\}, \\{1, 3\\}, \\{1, 2, 4\\}</var></li>\n<li><var>\\{\\{1, 2\\}, \\{1, 2, 3\\}, \\{2, 3, 4\\}\\}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>26\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>123456789123456789\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p02673": "<span class=\"lang-en\">\n<p>Score : <var>1300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are playing a game and your goal is to maximize your expected gain.\nAt the beginning of the game, a pawn is put, uniformly at random, at a position <var>p\\in\\{1,2,\\dots, N\\}</var>. The <var>N</var> positions are arranged on a circle (so that <var>1</var> is between <var>N</var> and <var>2</var>).</p>\n<p>The game consists of turns. At each turn you can either end the game, and get <var>A_p</var> dollars (where <var>p</var> is the current position of the pawn), or pay <var>B_p</var> dollar to keep playing.\nIf you decide to keep playing, the pawn is randomly moved to one of the two adjacent positions <var>p-1</var>, <var>p+1</var> (with the identifications <var>0 = N</var> and <var>N+1=1</var>).</p>\n<p>What is the expected gain of an optimal strategy?</p>\n<p><strong>Note</strong>: The \"expected gain of an optimal strategy\" shall be defined as the supremum of the expected gain among all strategies such that the game ends in a <em>finite</em> number of turns.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\le N \\le 200,000</var></li>\n<li><var>0 \\le A_p \\le 10^{12}</var> for any <var>p = 1,\\ldots, N</var></li>\n<li><var>0 \\le B_p \\le 100</var> for any <var>p = 1, \\ldots, N</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_N</var>\n<var>B_1</var> <var>B_2</var> <var>\\cdots</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print a single real number, the expected gain of an optimal strategy. \nYour answer will be considered correct if its relative or absolute error does not exceed <var>10^{-10}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n4 2 6 3 5\n1 1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4.700000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n100 0 100 0\n0 100 0 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>50.000000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>14\n4839 5400 6231 5800 6001 5200 6350 7133 7986 8012 7537 7013 6477 5912\n34 54 61 32 52 61 21 43 65 12 45 21 1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7047.142857142857\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10\n470606482521 533212137322 116718867454 746976621474 457112271419 815899162072 641324977314 88281100571 9231169966 455007126951\n26 83 30 59 100 88 84 91 54 61\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>815899161079.400024414062\n</pre></section>\n</div>\n</span>", "p02678": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>There is a cave.</p>\n<p>The cave has <var>N</var> rooms and <var>M</var> passages. The rooms are numbered <var>1</var> to <var>N</var>, and the passages are numbered <var>1</var> to <var>M</var>. Passage <var>i</var> connects Room <var>A_i</var> and Room <var>B_i</var> bidirectionally. One can travel between any two rooms by traversing passages. Room <var>1</var> is a special room with an entrance from the outside.</p>\n<p>It is dark in the cave, so we have decided to place a signpost in each room except Room <var>1</var>. The signpost in each room will point to one of the rooms directly connected to that room with a passage.</p>\n<p>Since it is dangerous in the cave, our objective is to satisfy the condition below for each room except Room <var>1</var>.</p>\n<ul>\n<li>If you start in that room and repeatedly move to the room indicated by the signpost in the room you are in, you will reach Room <var>1</var> after traversing the minimum number of passages possible.</li>\n</ul>\n<p>Determine whether there is a way to place signposts satisfying our objective, and print one such way if it exists.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i, B_i \\leq N\\ (1 \\leq i \\leq M)</var></li>\n<li><var>A_i \\neq B_i\\ (1 \\leq i \\leq M)</var></li>\n<li>One can travel between any two rooms by traversing passages.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_M</var> <var>B_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If there is no way to place signposts satisfying the objective, print <code>No</code>.</p>\n<p>Otherwise, print <var>N</var> lines. The first line should contain <code>Yes</code>, and the <var>i</var>-th line <var>(2 \\leq i \\leq N)</var> should contain the integer representing the room indicated by the signpost in Room <var>i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 4\n1 2\n2 3\n3 4\n4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n1\n2\n2\n</pre>\n<p>If we place the signposts as described in the sample output, the following happens:</p>\n<ul>\n<li>Starting in Room <var>2</var>, you will reach Room <var>1</var> after traversing one passage: <var>(2) \\to 1</var>. This is the minimum number of passages possible.</li>\n<li>Starting in Room <var>3</var>, you will reach Room <var>1</var> after traversing two passages: <var>(3) \\to 2 \\to 1</var>. This is the minimum number of passages possible.</li>\n<li>Starting in Room <var>4</var>, you will reach Room <var>1</var> after traversing two passages: <var>(4) \\to 2 \\to 1</var>. This is the minimum number of passages possible.</li>\n</ul>\n<p>Thus, the objective is satisfied.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 9\n3 4\n6 1\n2 4\n5 3\n4 6\n1 5\n6 2\n4 5\n5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n6\n5\n5\n1\n1\n</pre>\n<p>If there are multiple solutions, any of them will be accepted.</p></section>\n</div>\n</span>", "p02676": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have a string <var>S</var> consisting of lowercase English letters.</p>\n<p>If the length of <var>S</var> is at most <var>K</var>, print <var>S</var> without change.</p>\n<p>If the length of <var>S</var> exceeds <var>K</var>, extract the first <var>K</var> characters in <var>S</var>, append <code>...</code> to the end of them, and print the result.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>K</var> is an integer between <var>1</var> and <var>100</var> (inclusive).</li>\n<li><var>S</var> is a string consisting of lowercase English letters.</li>\n<li>The length of <var>S</var> is between <var>1</var> and <var>100</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print a string as stated in Problem Statement.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\nnikoandsolstice\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>nikoand...\n</pre>\n<p><code>nikoandsolstice</code> has a length of <var>15</var>, which exceeds <var>K=7</var>.</p>\n<p>We should extract the first <var>7</var> characters in this string, append <code>...</code> to the end of them, and print the result <code>nikoand...</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>40\nferelibenterhominesidquodvoluntcredunt\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>ferelibenterhominesidquodvoluntcredunt\n</pre>\n<p>The famous quote from Gaius Julius Caesar.</p></section>\n</div>\n</span>", "p02679": "<span class=\"lang-en\">\n<p>Score: <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have caught <var>N</var> sardines. The <em>deliciousness</em> and <em>fragrantness</em> of the <var>i</var>-th sardine is <var>A_i</var> and <var>B_i</var>, respectively.</p>\n<p>We will choose one or more of these sardines and put them into a cooler. However, two sardines on bad terms cannot be chosen at the same time.</p>\n<p>The <var>i</var>-th and <var>j</var>-th sardines <var>(i \\neq j)</var> are on bad terms if and only if <var>A_i \\cdot A_j + B_i \\cdot B_j = 0</var>.</p>\n<p>In how many ways can we choose the set of sardines to put into the cooler? Since the count can be enormous, print it modulo <var>1000000007</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>-10^{18} \\leq A_i, B_i \\leq 10^{18}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the count modulo <var>1000000007</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2\n-1 1\n2 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>There are five ways to choose the set of sardines, as follows:</p>\n<ul>\n<li>The <var>1</var>-st</li>\n<li>The <var>1</var>-st and <var>2</var>-nd</li>\n<li>The <var>2</var>-nd</li>\n<li>The <var>2</var>-nd and <var>3</var>-rd</li>\n<li>The <var>3</var>-rd</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n3 2\n3 2\n-1 1\n2 -1\n-3 -9\n-8 12\n7 7\n8 1\n8 2\n8 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>479\n</pre></section>\n</div>\n</span>", "p02681": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi wants to be a member of some web service.</p>\n<p>He tried to register himself with the ID <var>S</var>, which turned out to be already used by another user.</p>\n<p>Thus, he decides to register using a string obtained by appending one character at the end of <var>S</var> as his ID.</p>\n<p>He is now trying to register with the ID <var>T</var>. Determine whether this string satisfies the property above.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> and <var>T</var> are strings consisting of lowercase English letters.</li>\n<li><var>1 \\leq |S| \\leq 10</var></li>\n<li><var>|T| = |S| + 1</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>T</var> satisfies the property in Problem Statement, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>chokudai\nchokudaiz\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><code>chokudaiz</code> can be obtained by appending <code>z</code> at the end of <code>chokudai</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>snuke\nsnekee\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p><code>snekee</code> cannot be obtained by appending one character at the end of <code>snuke</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>a\naa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02683": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem</h3><p>Takahashi, who is a novice in competitive programming, wants to learn <var>M</var> algorithms.\nInitially, his <em>understanding level</em> of each of the <var>M</var> algorithms is <var>0</var>.</p>\n<p>Takahashi is visiting a bookstore, where he finds <var>N</var> books on algorithms.\nThe <var>i</var>-th book (<var>1\\leq i\\leq N</var>) is sold for <var>C_i</var> yen (the currency of Japan). If he buys and reads it, his understanding level of the <var>j</var>-th algorithm will increase by <var>A_{i,j}</var> for each <var>j</var> (<var>1\\leq j\\leq M</var>).\nThere is no other way to increase the understanding levels of the algorithms.</p>\n<p>Takahashi's objective is to make his understanding levels of all the <var>M</var> algorithms <var>X</var> or higher. Determine whether this objective is achievable. If it is achievable, find the minimum amount of money needed to achieve it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1\\leq N, M\\leq 12</var></li>\n<li><var>1\\leq X\\leq 10^5</var></li>\n<li><var>1\\leq C_i \\leq 10^5</var></li>\n<li><var>0\\leq A_{i, j} \\leq 10^5</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>X</var>\n<var>C_1</var> <var>A_{1,1}</var> <var>A_{1,2}</var> <var>\\cdots</var> <var>A_{1,M}</var>\n<var>C_2</var> <var>A_{2,1}</var> <var>A_{2,2}</var> <var>\\cdots</var> <var>A_{2,M}</var>\n<var>\\vdots</var>\n<var>C_N</var> <var>A_{N,1}</var> <var>A_{N,2}</var> <var>\\cdots</var> <var>A_{N,M}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the objective is not achievable, print <code>-1</code>; otherwise, print the minimum amount of money needed to achieve it.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3 10\n60 2 2 4\n70 8 7 9\n50 2 3 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>120\n</pre>\n<p>Buying the second and third books makes his understanding levels of all the algorithms <var>10</var> or higher, at the minimum cost possible.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3 10\n100 3 1 4\n100 1 5 9\n100 2 6 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>Buying all the books is still not enough to make his understanding levels of all the algorithms <var>10</var> or higher.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 5 22\n100 3 7 5 3 1\n164 4 5 2 7 8\n334 7 2 7 2 9\n234 4 7 2 8 2\n541 5 4 3 3 6\n235 4 8 6 9 7\n394 3 6 1 6 2\n872 8 4 3 7 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1067\n</pre></section>\n</div>\n</span>", "p02682": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>A</var> cards, each of which has an integer <var>1</var> written on it. Similarly, we also have <var>B</var> cards with <var>0</var>s and <var>C</var> cards with <var>-1</var>s.</p>\n<p>We will pick up <var>K</var> among these cards. What is the maximum possible sum of the numbers written on the cards chosen?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>0 \\leq A, B, C</var></li>\n<li><var>1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the numbers written on the cards chosen.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 1 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Consider picking up two cards with <var>1</var>s and one card with a <var>0</var>.\nIn this case, the sum of the numbers written on the cards is <var>2</var>, which is the maximum possible value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2000000000 0 0 2000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2000000000\n</pre></section>\n</div>\n</span>", "p02685": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> blocks arranged in a row. Let us paint these blocks.</p>\n<p>We will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.</p>\n<p>Find the number of ways to paint the blocks under the following conditions:</p>\n<ul>\n<li>For each block, use one of the <var>M</var> colors, Color <var>1</var> through Color <var>M</var>, to paint it. It is not mandatory to use all the colors.</li>\n<li>There may be at most <var>K</var> pairs of adjacent blocks that are painted in the same color.</li>\n</ul>\n<p>Since the count may be enormous, print it modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N, M \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq K \\leq N - 1</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>The following ways to paint the blocks satisfy the conditions: <code>112</code>, <code>121</code>, <code>122</code>, <code>211</code>, <code>212</code>, and <code>221</code>. Here, digits represent the colors of the blocks.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100 100 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>73074801\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>60522 114575 7559\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>479519525\n</pre></section>\n</div>\n</span>", "p02684": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>The Kingdom of Takahashi has <var>N</var> towns, numbered <var>1</var> through <var>N</var>.</p>\n<p>There is one teleporter in each town. The teleporter in Town <var>i</var> <var>(1 \\leq i \\leq N)</var> sends you to Town <var>A_i</var>.</p>\n<p>Takahashi, the king, loves the positive integer <var>K</var>. The selfish king wonders what town he will be in if he starts at Town <var>1</var> and uses a teleporter exactly <var>K</var> times from there.</p>\n<p>Help the king by writing a program that answers this question.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq N</var></li>\n<li><var>1 \\leq K \\leq 10^{18}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>\\dots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the integer representing the town the king will be in if he starts at Town <var>1</var> and uses a teleporter exactly <var>K</var> times from there.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n3 2 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>If we start at Town <var>1</var> and use the teleporter <var>5</var> times, our travel will be as follows: <var>1 \\to 3 \\to 4 \\to 1 \\to 3 \\to 4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 727202214173249351\n6 5 2 5 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre></section>\n</div>\n</span>", "p02686": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A <strong>bracket sequence</strong> is a string that is one of the following:</p>\n<ol>\n<li>An empty string;</li>\n<li>The concatenation of <code>(</code>, <var>A</var>, and <code>)</code> in this order, for some bracket sequence <var>A</var> ;</li>\n<li>The concatenation of <var>A</var> and <var>B</var> in this order, for some non-empty bracket sequences <var>A</var> and <var>B</var> /</li>\n</ol>\n<p>Given are <var>N</var> strings <var>S_i</var>. Can a bracket sequence be formed by concatenating all the <var>N</var> strings in some order?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^6</var></li>\n<li>The total length of the strings <var>S_i</var> is at most <var>10^6</var>.</li>\n<li><var>S_i</var> is a non-empty string consisting of <code>(</code> and <code>)</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_1</var>\n<var>:</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If a bracket sequence can be formed by concatenating all the <var>N</var> strings in some order, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n)\n(()\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Concatenating <code>(()</code> and <code>)</code> in this order forms a bracket sequence.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n)(\n()\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n((()))\n((((((\n))))))\n()()()\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3\n(((\n)\n)\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02688": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> <em>Snukes</em> called Snuke <var>1</var>, Snuke <var>2</var>, ..., Snuke <var>N</var> live in a town.</p>\n<p>There are <var>K</var> kinds of snacks sold in this town, called Snack <var>1</var>, Snack <var>2</var>, ..., Snack <var>K</var>. The following <var>d_i</var> Snukes have Snack <var>i</var>: Snuke <var>A_{i, 1}, A_{i, 2}, \\cdots, A_{i, {d_i}}</var>.</p>\n<p>Takahashi will walk around this town and make mischief on the Snukes who have no snacks. How many Snukes will fall victim to Takahashi's mischief?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq K \\leq 100</var></li>\n<li><var>1 \\leq d_i \\leq N</var></li>\n<li><var>1 \\leq A_{i, 1} &lt; \\cdots &lt; A_{i, d_i} \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>d_1</var>\n<var>A_{1, 1} \\cdots A_{1, d_1}</var>\n<var>\\vdots</var>\n<var>d_K</var>\n<var>A_{K, 1} \\cdots A_{K, d_K}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n2\n1 3\n1\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<ul>\n<li>Snuke <var>1</var> has Snack <var>1</var>.</li>\n<li>Snuke <var>2</var> has no snacks.</li>\n<li>Snuke <var>3</var> has Snack <var>1</var> and <var>2</var>.</li>\n</ul>\n<p>Thus, there will be one victim: Snuke <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n1\n3\n1\n3\n1\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre></section>\n</div>\n</span>", "p02689": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> observatories in AtCoder Hill, called Obs. <var>1</var>, Obs. <var>2</var>, <var>...</var>, Obs. <var>N</var>. The elevation of Obs. <var>i</var> is <var>H_i</var>.\nThere are also <var>M</var> roads, each connecting two different observatories. Road <var>j</var> connects Obs. <var>A_j</var> and Obs. <var>B_j</var>.</p>\n<p>Obs. <var>i</var> is said to be good when its elevation is higher than those of all observatories that can be reached from Obs. <var>i</var> using just one road.\nNote that Obs. <var>i</var> is also good when no observatory can be reached from Obs. <var>i</var> using just one road.</p>\n<p>How many good observatories are there?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq H_i \\leq 10^9</var></li>\n<li><var>1 \\leq A_i,B_i \\leq N</var></li>\n<li><var>A_i \\neq B_i</var></li>\n<li>Multiple roads may connect the same pair of observatories.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>H_1</var> <var>H_2</var> <var>...</var> <var>H_N</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>:</var>\n<var>A_M</var> <var>B_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of good observatories.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n1 2 3 4\n1 3\n2 3\n2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<ul>\n<li>\n<p>From Obs. <var>1</var>, you can reach Obs. <var>3</var> using just one road. The elevation of Obs. <var>1</var> is not higher than that of Obs. <var>3</var>, so Obs. <var>1</var> is not good.</p>\n</li>\n<li>\n<p>From Obs. <var>2</var>, you can reach Obs. <var>3</var> and <var>4</var> using just one road. The elevation of Obs. <var>2</var> is not higher than that of Obs. <var>3</var>, so Obs. <var>2</var> is not good.</p>\n</li>\n<li>\n<p>From Obs. <var>3</var>, you can reach Obs. <var>1</var> and <var>2</var> using just one road. The elevation of Obs. <var>3</var> is higher than those of Obs. <var>1</var> and <var>2</var>, so Obs. <var>3</var> is good.</p>\n</li>\n<li>\n<p>From Obs. <var>4</var>, you can reach Obs. <var>2</var> using just one road. The elevation of Obs. <var>4</var> is higher than that of Obs. <var>2</var>, so Obs. <var>4</var> is good.</p>\n</li>\n</ul>\n<p>Thus, the good observatories are Obs. <var>3</var> and <var>4</var>, so there are two good observatories.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n4 6\n4 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02687": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>AtCoder Inc. holds a contest every Saturday.</p>\n<p>There are two types of contests called ABC and ARC, and just one of them is held at a time.</p>\n<p>The company holds these two types of contests alternately: an ARC follows an ABC and vice versa.</p>\n<p>Given a string <var>S</var> representing the type of the contest held last week, print the string representing the type of the contest held this week.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is <code>ABC</code> or <code>ARC</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the string representing the type of the contest held this week.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>ABC\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>ARC\n</pre>\n<p>They held an ABC last week, so they will hold an ARC this week.</p></section>\n</div>\n</span>", "p02692": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a game that involves three variables, denoted <var>A</var>, <var>B</var>, and <var>C</var>.</p>\n<p>As the game progresses, there will be <var>N</var> events where you are asked to make a choice.\nEach of these choices is represented by a string <var>s_i</var>. If <var>s_i</var> is <code>AB</code>, you must add <var>1</var> to <var>A</var> or <var>B</var> then subtract <var>1</var> from the other; if <var>s_i</var> is <code>AC</code>, you must add <var>1</var> to <var>A</var> or <var>C</var> then subtract <var>1</var> from the other; if <var>s_i</var> is <code>BC</code>, you must add <var>1</var> to <var>B</var> or <var>C</var> then subtract <var>1</var> from the other.</p>\n<p>After each choice, none of <var>A</var>, <var>B</var>, and <var>C</var> should be negative.</p>\n<p>Determine whether it is possible to make <var>N</var> choices under this condition. If it is possible, also give one such way to make the choices.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq A,B,C \\leq 10^9</var></li>\n<li><var>N, A, B, C</var> are integers.</li>\n<li><var>s_i</var> is <code>AB</code>, <code>AC</code>, or <code>BC</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var> <var>C</var>\n<var>s_1</var>\n<var>s_2</var>\n<var>:</var>\n<var>s_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to make <var>N</var> choices under the condition, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n<p>Also, in the former case, show one such way to make the choices in the subsequent <var>N</var> lines. The <var>(i+1)</var>-th line should contain the name of the variable (<code>A</code>, <code>B</code>, or <code>C</code>) to which you add <var>1</var> in the <var>i</var>-th choice.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 1 3 0\nAB\nAC\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\nA\nC\n</pre>\n<p>You can successfully make two choices, as follows:</p>\n<ul>\n<li>In the first choice, add <var>1</var> to <var>A</var> and subtract <var>1</var> from <var>B</var>. <var>A</var> becomes <var>2</var>, and <var>B</var> becomes <var>2</var>.</li>\n<li>In the second choice, add <var>1</var> to <var>C</var> and subtract <var>1</var> from <var>A</var>. <var>C</var> becomes <var>1</var>, and <var>A</var> becomes <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 1 0 0\nAB\nBC\nAB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 0 9 0\nAC\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8 6 9 1\nAC\nBC\nAB\nBC\nAC\nBC\nAB\nAB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Yes\nC\nB\nB\nC\nC\nB\nA\nA\n</pre></section>\n</div>\n</span>", "p02693": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi the Jumbo will practice golf.</p>\n<p>His objective is to get a carry distance that is a multiple of <var>K</var>, while he can only make a carry distance of between <var>A</var> and <var>B</var> (inclusive).</p>\n<p>If he can achieve the objective, print <code>OK</code>; if he cannot, print <code>NG</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A \\leq B \\leq 1000</var></li>\n<li><var>1 \\leq K \\leq 1000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n<var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If he can achieve the objective, print <code>OK</code>; if he cannot, print <code>NG</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n500 600\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>OK\n</pre>\n<p>Among the multiples of <var>7</var>, for example, <var>567</var> lies between <var>500</var> and <var>600</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n5 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NG\n</pre>\n<p>No multiple of <var>4</var> lies between <var>5</var> and <var>7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n11 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>OK\n</pre></section>\n</div>\n</span>", "p02690": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Give a pair of integers <var>(A, B)</var> such that <var>A^5-B^5 = X</var>.\nIt is guaranteed that there exists such a pair for the given integer <var>X</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X \\leq 10^9</var></li>\n<li><var>X</var> is an integer.</li>\n<li>There exists a pair of integers <var>(A, B)</var> satisfying the condition in Problem Statement.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>A</var> and <var>B</var>, with space in between.\nIf there are multiple pairs of integers <var>(A, B)</var> satisfying the condition, you may print any of them.</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>33\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 -1\n</pre>\n<p>For <var>A=2</var> and <var>B=-1</var>, <var>A^5-B^5 = 33</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 -1\n</pre></section>\n</div>\n</span>", "p02691": "<span class=\"lang-en\">\n<p>Score: <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>You are the top spy of AtCoder Kingdom. To prevent the stolen secret from being handed to AlDebaran Kingdom, you have sneaked into the party where the transaction happens.</p>\n<p>There are <var>N</var> attendees in the party, and they are given attendee numbers from <var>1</var> through <var>N</var>. The height of Attendee <var>i</var> is <var>A_i</var>.</p>\n<p>According to an examination beforehand, you know that a pair of attendees satisfying the condition below will make the transaction.</p>\n<ul>\n<li>The absolute difference of their attendee numbers is equal to the sum of their heights.</li>\n</ul>\n<p>There are <var>\\frac{N(N-1)}{2}</var> ways to choose two from the <var>N</var> attendees and make a pair. Among them, how many satisfy the condition above?</p>\n<p>P.S.: We cannot let you know the secret.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9\\ (1 \\leq i \\leq N)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\dots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of pairs satisfying the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n2 3 3 1 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<ul>\n<li><var>A_1 + A_4 = 3</var>, so the pair of Attendee <var>1</var> and <var>4</var> satisfy the condition.</li>\n<li><var>A_2 + A_6 = 4</var>, so the pair of Attendee <var>2</var> and <var>6</var> satisfy the condition.</li>\n<li><var>A_4 + A_6 = 2</var>, so the pair of Attendee <var>4</var> and <var>6</var> satisfy the condition.</li>\n</ul>\n<p>No other pair satisfies the condition, so you should print <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n5 2 4 2 8 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>No pair satisfies the condition, so you should print <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>32\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>22\n</pre></section>\n</div>\n</span>", "p02694": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi has a deposit of <var>100</var> yen (the currency of Japan) in AtCoder Bank.</p>\n<p>The bank pays an annual interest rate of <var>1</var> % compounded annually. (A fraction of less than one yen is discarded.)</p>\n<p>Assuming that nothing other than the interest affects Takahashi's balance, in how many years does the balance reach <var>X</var> yen or above for the first time?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var> 101 \\le X \\le 10^{18} </var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of years it takes for Takahashi's balance to reach <var>X</var> yen or above for the first time.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>103\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<ul>\n<li>The balance after one year is <var>101</var> yen.</li>\n<li>The balance after two years is <var>102</var> yen.</li>\n<li>The balance after three years is <var>103</var> yen.</li>\n</ul>\n<p>Thus, it takes three years for the balance to reach <var>103</var> yen or above.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000000000000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3760\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1333333333\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1706\n</pre></section>\n</div>\n</span>", "p02699": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>S</var> sheep and <var>W</var> wolves.</p>\n<p>If the number of wolves is greater than or equal to that of sheep, the wolves will attack the sheep.</p>\n<p>If the wolves will attack the sheep, print <code>unsafe</code>; otherwise, print <code>safe</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq S \\leq 100</var></li>\n<li><var>1 \\leq W \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var> <var>W</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the wolves will attack the sheep, print <code>unsafe</code>; otherwise, print <code>safe</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>unsafe\n</pre>\n<p>There are four sheep and five wolves. The number of wolves is not less than that of sheep, so they will attack them.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>safe\n</pre>\n<p>Many a sheep drive away two wolves.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>unsafe\n</pre></section>\n</div>\n</span>", "p02697": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are going to hold a competition of one-to-one game called AtCoder Janken. <em>(Janken is the Japanese name for Rock-paper-scissors.)</em>\n<var>N</var> players will participate in this competition, and they are given distinct integers from <var>1</var> through <var>N</var>.\nThe arena has <var>M</var> playing fields for two players. You need to assign each playing field two distinct integers between <var>1</var> and <var>N</var> (inclusive).\nYou cannot assign the same integer to multiple playing fields.\nThe competition consists of <var>N</var> rounds, each of which proceeds as follows:</p>\n<ul>\n<li>For each player, if there is a playing field that is assigned the player's integer, the player goes to that field and fight the other player who comes there.</li>\n<li>Then, each player adds <var>1</var> to its integer. If it becomes <var>N+1</var>, change it to <var>1</var>.</li>\n</ul>\n<p>You want to ensure that no player fights the same opponent more than once during the <var>N</var> rounds.\nPrint an assignment of integers to the playing fields satisfying this condition.\nIt can be proved that such an assignment always exists under the constraints given.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq M</var></li>\n<li><var>M \\times 2 +1 \\leq N \\leq 200000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>M</var> lines in the format below.\nThe <var>i</var>-th line should contain the two integers <var>a_i</var> and <var>b_i</var> assigned to the <var>i</var>-th playing field.</p>\n<pre><var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>:</var>\n<var>a_M</var> <var>b_M</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 3\n</pre>\n<p>Let us call the four players A, B, C, and D, and assume that they are initially given the integers <var>1</var>, <var>2</var>, <var>3</var>, and <var>4</var>, respectively.</p>\n<ul>\n<li>\n<p>The <var>1</var>-st round is fought by B and C, who has the integers <var>2</var> and <var>3</var>, respectively. After this round, A, B, C, and D have the integers <var>2</var>, <var>3</var>, <var>4</var>, and <var>1</var>, respectively.</p>\n</li>\n<li>\n<p>The <var>2</var>-nd round is fought by A and B, who has the integers <var>2</var> and <var>3</var>, respectively. After this round, A, B, C, and D have the integers <var>3</var>, <var>4</var>, <var>1</var>, and <var>2</var>, respectively.</p>\n</li>\n<li>\n<p>The <var>3</var>-rd round is fought by D and A, who has the integers <var>2</var> and <var>3</var>, respectively. After this round, A, B, C, and D have the integers <var>4</var>, <var>1</var>, <var>2</var>, and <var>3</var>, respectively.</p>\n</li>\n<li>\n<p>The <var>4</var>-th round is fought by C and D, who has the integers <var>2</var> and <var>3</var>, respectively. After this round, A, B, C, and D have the integers <var>1</var>, <var>2</var>, <var>3</var>, and <var>4</var>, respectively.</p>\n</li>\n</ul>\n<p>No player fights the same opponent more than once during the four rounds, so this solution will be accepted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 6\n2 5\n3 4\n</pre></section>\n</div>\n</span>", "p02700": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi and Aoki will have a battle using their monsters.</p>\n<p>The health and strength of Takahashi's monster are <var>A</var> and <var>B</var>, respectively, and those of Aoki's monster are <var>C</var> and <var>D</var>, respectively.</p>\n<p>The two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's, ...\nHere, an attack decreases the opponent's health by the value equal to the attacker's strength.\nThe monsters keep attacking until the health of one monster becomes <var>0</var> or below. The person with the monster whose health becomes <var>0</var> or below loses, and the other person wins.</p>\n<p>If Takahashi will win, print <code>Yes</code>; if he will lose, print <code>No</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A,B,C,D \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Takahashi will win, print <code>Yes</code>; if he will lose, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 9 10 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>No\n</pre>\n<p>First, Takahashi's monster attacks Aoki's monster, whose health is now <var>10-9=1</var>.</p>\n<p>Next, Aoki's monster attacks Takahashi's monster, whose health is now <var>10-10=0</var>.</p>\n<p>Takahashi's monster is the first to have <var>0</var> or less health, so Takahashi loses.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>46 4 40 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02701": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You drew lottery <var>N</var> times. In the <var>i</var>-th draw, you got an item of the kind represented by a string <var>S_i</var>.</p>\n<p>How many kinds of items did you get?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>S_i</var> consists of lowercase English letters and has a length between <var>1</var> and <var>10</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_1</var>\n<var>:</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of kinds of items you got.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\napple\norange\napple\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>You got two kinds of items: <code>apple</code> and <code>orange</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\ngrape\ngrape\ngrape\ngrape\ngrape\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\naaaa\na\naaa\naa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre></section>\n</div>\n</span>", "p02698": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a tree with <var>N</var> vertices, whose <var>i</var>-th edge connects Vertex <var>u_i</var> and Vertex <var>v_i</var>.\nVertex <var>i</var> has an integer <var>a_i</var> written on it.\nFor every integer <var>k</var> from <var>1</var> through <var>N</var>, solve the following problem:</p>\n<ul>\n<li>We will make a sequence by lining up the integers written on the vertices along the shortest path from Vertex <var>1</var> to Vertex <var>k</var>, in the order they appear. Find the length of the longest increasing subsequence of this sequence.</li>\n</ul>\n<p>Here, the longest increasing subsequence of a sequence <var>A</var> of length <var>L</var> is the subsequence <var>A_{i_1} , A_{i_2} , ... , A_{i_M}</var> with the greatest possible value of <var>M</var> such that <var>1 \\leq i_1 &lt; i_2 &lt; ... &lt; i_M \\leq L</var> and <var>A_{i_1} &lt; A_{i_2} &lt; ... &lt; A_{i_M}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq a_i \\leq 10^9</var></li>\n<li><var>1 \\leq u_i , v_i \\leq N</var></li>\n<li><var>u_i \\neq v_i</var></li>\n<li>The given graph is a tree.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n<var>u_1</var> <var>v_1</var>\n<var>u_2</var> <var>v_2</var>\n<var>:</var>\n<var>u_{N-1}</var> <var>v_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines. The <var>k</var>-th line, print the length of the longest increasing subsequence of the sequence obtained from the shortest path from Vertex <var>1</var> to Vertex <var>k</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10\n1 2 5 3 4 6 7 3 2 4\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n1 8\n8 9\n9 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n2\n3\n3\n4\n4\n5\n2\n2\n3\n</pre>\n<p>For example, the sequence <var>A</var> obtained from the shortest path from Vertex <var>1</var> to Vertex <var>5</var> is <var>1,2,5,3,4</var>. Its longest increasing subsequence is <var>A_1, A_2, A_4, A_5</var>, with the length of <var>4</var>.</p></section>\n</div>\n</span>", "p02706": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has <var>N</var> days of summer vacation.</p>\n<p>His teacher gave him <var>M</var> summer assignments. It will take <var>A_i</var> days for him to do the <var>i</var>-th assignment.</p>\n<p>He cannot do multiple assignments on the same day, or hang out on a day he does an assignment.</p>\n<p>What is the maximum number of days Takahashi can hang out during the vacation if he finishes all the assignments during this vacation?</p>\n<p>If Takahashi cannot finish all the assignments during the vacation, print <code>-1</code> instead.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^6</var></li>\n<li><var>1 \\leq M \\leq 10^4</var></li>\n<li><var>1 \\leq A_i \\leq 10^4</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>...</var> <var>A_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of days Takahashi can hang out during the vacation, or <code>-1</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>41 2\n5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>30\n</pre>\n<p>For example, he can do the first assignment on the first <var>5</var> days, hang out on the next <var>30</var> days, and do the second assignment on the last <var>6</var> days of the vacation. In this way, he can safely spend <var>30</var> days hanging out.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 2\n5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>He cannot finish his assignments.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11 2\n5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>He can finish his assignments, but he will have no time to hang out.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>314 15\n9 26 5 35 8 9 79 3 23 8 46 2 6 43 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>9\n</pre></section>\n</div>\n</span>", "p02707": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A company has <var>N</var> members, who are assigned ID numbers <var>1, ..., N</var>.</p>\n<p>Every member, except the member numbered <var>1</var>, has exactly one immediate boss with a smaller ID number.</p>\n<p>When a person <var>X</var> is the immediate boss of a person <var>Y</var>, the person <var>Y</var> is said to be an immediate subordinate of the person <var>X</var>.</p>\n<p>You are given the information that the immediate boss of the member numbered <var>i</var> is the member numbered <var>A_i</var>. For each member, find how many immediate subordinates it has.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i &lt; i</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each of the members numbered <var>1, 2, ..., N</var>, print the number of immediate subordinates it has, in its own line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 1 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n2\n0\n0\n0\n</pre>\n<p>The member numbered <var>1</var> has two immediate subordinates: the members numbered <var>2</var> and <var>3</var>.</p>\n<p>The member numbered <var>2</var> has two immediate subordinates: the members numbered <var>4</var> and <var>5</var>.</p>\n<p>The members numbered <var>3</var>, <var>4</var>, and <var>5</var> do not have immediate subordinates.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n1 1 1 1 1 1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n1 2 3 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n1\n1\n1\n1\n1\n0\n</pre></section>\n</div>\n</span>", "p02708": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N+1</var> integers: <var>10^{100}</var>, <var>10^{100}+1</var>, ..., <var>10^{100}+N</var>.</p>\n<p>We will choose <var>K</var> or more of these integers. Find the number of possible values of the sum of the chosen numbers, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq K \\leq N+1</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible values of the sum, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>The sum can take <var>10</var> values, as follows:</p>\n<ul>\n<li><var>(10^{100})+(10^{100}+1)=2\\times 10^{100}+1</var></li>\n<li><var>(10^{100})+(10^{100}+2)=2\\times 10^{100}+2</var></li>\n<li><var>(10^{100})+(10^{100}+3)=(10^{100}+1)+(10^{100}+2)=2\\times 10^{100}+3</var></li>\n<li><var>(10^{100}+1)+(10^{100}+3)=2\\times 10^{100}+4</var></li>\n<li><var>(10^{100}+2)+(10^{100}+3)=2\\times 10^{100}+5</var></li>\n<li><var>(10^{100})+(10^{100}+1)+(10^{100}+2)=3\\times 10^{100}+3</var></li>\n<li><var>(10^{100})+(10^{100}+1)+(10^{100}+3)=3\\times 10^{100}+4</var></li>\n<li><var>(10^{100})+(10^{100}+2)+(10^{100}+3)=3\\times 10^{100}+5</var></li>\n<li><var>(10^{100}+1)+(10^{100}+2)+(10^{100}+3)=3\\times 10^{100}+6</var></li>\n<li><var>(10^{100})+(10^{100}+1)+(10^{100}+2)+(10^{100}+3)=4\\times 10^{100}+6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>200000 200001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>We must choose all of the integers, so the sum can take just <var>1</var> value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>141421 35623\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>220280457\n</pre></section>\n</div>\n</span>", "p02709": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> children standing in a line from left to right. The activeness of the <var>i</var>-th child from the left is <var>A_i</var>.</p>\n<p>You can rearrange these children just one time in any order you like.</p>\n<p>When a child who originally occupies the <var>x</var>-th position from the left in the line moves to the <var>y</var>-th position from the left, that child earns <var>A_x \\times |x-y|</var> happiness points.</p>\n<p>Find the maximum total happiness points the children can earn.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2000</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum total happiness points the children can earn.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 3 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>20\n</pre>\n<p>If we move the <var>1</var>-st child from the left to the <var>3</var>-rd position from the left, the <var>2</var>-nd child to the <var>4</var>-th position, the <var>3</var>-rd child to the <var>1</var>-st position, and the <var>4</var>-th child to the <var>2</var>-nd position, the children earns <var>1 \\times |1-3|+3 \\times |2-4|+4 \\times |3-1|+2 \\times |4-2|=20</var> happiness points in total.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n5 5 6 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>58\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n8 6 9 1 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>85\n</pre></section>\n</div>\n</span>", "p02705": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Print the circumference of a circle of radius <var>R</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq R \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>R</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the circumference of the circle.\nYour output is considered correct if and only if its absolute or relative error from our answer is at most <var>10^{-2}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6.28318530717958623200\n</pre>\n<p>Since we accept an absolute or relative error of at most <var>10^{-2}</var>, <var>6.28</var> is also an acceptable output, but <var>6</var> is not.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>73\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>458.67252742410977361942\n</pre></section>\n</div>\n</span>", "p02710": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have a tree with <var>N</var> vertices numbered <var>1</var> to <var>N</var>. The <var>i</var>-th edge in this tree connects Vertex <var>a_i</var> and <var>b_i</var>.\nAdditionally, each vertex is painted in a color, and the color of Vertex <var>i</var> is <var>c_i</var>. Here, the color of each vertex is represented by an integer between <var>1</var> and <var>N</var> (inclusive). The same integer corresponds to the same color; different integers correspond to different colors.</p>\n<p>For each <var>k=1, 2, ..., N</var>, solve the following problem:</p>\n<ul>\n<li>Find the number of simple paths that visit a vertex painted in the color <var>k</var> one or more times.</li>\n</ul>\n<p><strong>Note:</strong> The simple paths from Vertex <var>u</var> to <var>v</var> and from <var>v</var> to <var>u</var> are not distinguished.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq c_i \\leq N</var></li>\n<li><var>1 \\leq a_i,b_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>c_1</var> <var>c_2</var> <var>...</var> <var>c_N</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answers for <var>k = 1, 2, ..., N</var> in order, each in its own line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 1\n1 2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n4\n0\n</pre>\n<p>Let <var>P_{i,j}</var> denote the simple path connecting Vertex <var>i</var> and <var>j</var>.</p>\n<p>There are <var>5</var> simple paths that visit a vertex painted in the color <var>1</var> one or more times:<br/>\n<var>P_{1,1}\\,,\\,</var>\n<var>P_{1,2}\\,,\\,</var>\n<var>P_{1,3}\\,,\\,</var>\n<var>P_{2,3}\\,,\\,</var>\n<var>P_{3,3}</var> </p>\n<p>There are <var>4</var> simple paths that visit a vertex painted in the color <var>2</var> one or more times:<br/>\n<var>P_{1,2}\\,,\\,</var>\n<var>P_{1,3}\\,,\\,</var>\n<var>P_{2,2}\\,,\\,</var>\n<var>P_{2,3}</var> </p>\n<p>There are no simple paths that visit a vertex painted in the color <var>3</var> one or more times.  </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1 2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n8\n10\n5\n5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>8\n2 7 2 5 4 1 7 5\n3 1\n1 2\n2 7\n4 5\n5 6\n6 8\n7 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>18\n15\n0\n14\n23\n0\n23\n0\n</pre></section>\n</div>\n</span>", "p02711": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a three-digit integer <var>N</var>. Does <var>N</var> contain the digit <var>7</var>?</p>\n<p>If so, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>100 \\leq N \\leq 999</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>N</var> contains the digit <var>7</var>, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>117\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><var>117</var> contains <var>7</var> as its last digit.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>123\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p><var>123</var> does not contain the digit <var>7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>777\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02714": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a string <var>S</var> of length <var>N</var> consisting of <code>R</code>, <code>G</code>, and <code>B</code>.</p>\n<p>Find the number of triples <var>(i,~j,~k)~(1 \\leq i &lt; j &lt; k \\leq N)</var> that satisfy both of the following conditions:</p>\n<ul>\n<li><var>S_i \\neq S_j</var>, <var>S_i \\neq S_k</var>, and <var>S_j \\neq S_k</var>.</li>\n<li><var>j - i \\neq k - j</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 4000</var></li>\n<li><var>S</var> is a string of length <var>N</var> consisting of <code>R</code>, <code>G</code>, and <code>B</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of triplets in question.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\nRRGB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Only the triplet <var>(1,~3,~4)</var> satisfies both conditions. The triplet <var>(2,~3,~4)</var> satisfies the first condition but not the second, so it does not count.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>39\nRBRBGRBGGBBRRGBBRRRBGGBRBGBRBGBRBBBGBBB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1800\n</pre></section>\n</div>\n</span>", "p02713": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find <var>\\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}</var>.</p>\n<p>Here <var>\\gcd(a,b,c)</var> denotes the greatest common divisor of <var>a</var>, <var>b</var>, and <var>c</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 200</var></li>\n<li><var>K</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value of <var>\\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p><var>\\gcd(1,1,1)+\\gcd(1,1,2)+\\gcd(1,2,1)+\\gcd(1,2,2)</var>\n<var>+\\gcd(2,1,1)+\\gcd(2,1,2)+\\gcd(2,2,1)+\\gcd(2,2,2)</var>\n<var>=1+1+1+1+1+1+1+2=9</var></p>\n<p>Thus, the answer is <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10813692\n</pre></section>\n</div>\n</span>", "p02715": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Consider sequences <var>\\{A_1,...,A_N\\}</var> of length <var>N</var> consisting of integers between <var>1</var> and <var>K</var> (inclusive).</p>\n<p>There are <var>K^N</var> such sequences. Find the sum of <var>\\gcd(A_1, ..., A_N)</var> over all of them.</p>\n<p>Since this sum can be enormous, print the value modulo <var>(10^9+7)</var>.</p>\n<p>Here <var>\\gcd(A_1, ..., A_N)</var> denotes the greatest common divisor of <var>A_1, ..., A_N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq K \\leq 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of <var>\\gcd(A_1, ..., A_N)</var> over all <var>K^N</var> sequences, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p><var>\\gcd(1,1,1)+\\gcd(1,1,2)+\\gcd(1,2,1)+\\gcd(1,2,2)</var>\n<var>+\\gcd(2,1,1)+\\gcd(2,1,2)+\\gcd(2,2,1)+\\gcd(2,2,2)</var>\n<var>=1+1+1+1+1+1+1+2=9</var></p>\n<p>Thus, the answer is <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10813692\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100000 100000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>742202979\n</pre>\n<p>Be sure to print the sum modulo <var>(10^9+7)</var>.</p></section>\n</div>\n</span>", "p02716": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer sequence <var>A_1, ..., A_N</var> of length <var>N</var>.</p>\n<p>We will choose exactly <var>\\left\\lfloor \\frac{N}{2} \\right\\rfloor</var> elements from this sequence so that no two adjacent elements are chosen.</p>\n<p>Find the maximum possible sum of the chosen elements.</p>\n<p>Here <var>\\lfloor x \\rfloor</var> denotes the greatest integer not greater than <var>x</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>|A_i|\\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the chosen elements.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 2 3 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>Choosing <var>2</var>, <var>4</var>, and <var>6</var> makes the sum <var>12</var>, which is the maximum possible value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n-1000 -100 -10 0 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Choosing <var>-10</var> and <var>10</var> makes the sum <var>0</var>, which is the maximum possible value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5000000000\n</pre>\n<p>Watch out for overflow.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>27\n18 -28 18 28 -45 90 -45 23 -53 60 28 -74 -71 35 -26 -62 49 -77 57 24 -70 -93 69 -99 59 57 -49\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>295\n</pre></section>\n</div>\n</span>", "p02712": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let us define the <strong>FizzBuzz sequence</strong> <var>a_1,a_2,...</var> as follows:</p>\n<ul>\n<li>If both <var>3</var> and <var>5</var> divides <var>i</var>, <var>a_i=\\mbox{FizzBuzz}</var>.</li>\n<li>If the above does not hold but <var>3</var> divides <var>i</var>, <var>a_i=\\mbox{Fizz}</var>.</li>\n<li>If none of the above holds but <var>5</var> divides <var>i</var>, <var>a_i=\\mbox{Buzz}</var>.</li>\n<li>If none of the above holds, <var>a_i=i</var>.</li>\n</ul>\n<p>Find the sum of all numbers among the first <var>N</var> terms of the FizzBuzz sequence.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of all numbers among the first <var>N</var> terms of the FizzBuzz sequence.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>60\n</pre>\n<p>The first <var>15</var> terms of the FizzBuzz sequence are:</p>\n<p><var>1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}</var></p>\n<p>Among them, numbers are <var>1,2,4,7,8,11,13,14</var>, and the sum of them is <var>60</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>266666333332\n</pre>\n<p>Watch out for overflow.</p></section>\n</div>\n</span>", "p02718": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have held a popularity poll for <var>N</var> items on sale. Item <var>i</var> received <var>A_i</var> votes.</p>\n<p>From these <var>N</var> items, we will select <var>M</var> as popular items. However, we cannot select an item with less than <var>\\dfrac{1}{4M}</var> of the total number of votes.</p>\n<p>If <var>M</var> popular items can be selected, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq M \\leq N \\leq 100</var></li>\n<li><var>1 \\leq A_i \\leq 1000</var></li>\n<li><var>A_i</var> are distinct.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>M</var> popular items can be selected, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 1\n5 4 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>There were <var>12</var> votes in total. The most popular item received <var>5</var> votes, and we can select it.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n380 19 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>There were <var>400</var> votes in total. The second and third most popular items received less than <var>\\dfrac{1}{4\\times 2}</var> of the total number of votes, so we cannot select them. Thus, we cannot select two popular items.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>12 3\n4 56 78 901 2 345 67 890 123 45 6 789\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02717": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have three boxes <var>A</var>, <var>B</var>, and <var>C</var>, each of which contains an integer.<br/>\nCurrently, the boxes <var>A</var>, <var>B</var>, and <var>C</var> contain the integers <var>X</var>, <var>Y</var>, and <var>Z</var>, respectively.<br/>\nWe will now do the operations below in order. Find the content of each box afterward.  </p>\n<ul>\n<li>Swap the contents of the boxes <var>A</var> and <var>B</var></li>\n<li>Swap the contents of the boxes <var>A</var> and <var>C</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq X,Y,Z \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var> <var>Z</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the integers contained in the boxes <var>A</var>, <var>B</var>, and <var>C</var>, in this order, with space in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3 1 2\n</pre>\n<p>After the contents of the boxes <var>A</var> and <var>B</var> are swapped, <var>A</var>, <var>B</var>, and <var>C</var> contain <var>2</var>, <var>1</var>, and <var>3</var>, respectively.<br/>\nThen, after the contents of <var>A</var> and <var>C</var> are swapped, <var>A</var>, <var>B</var>, and <var>C</var> contain <var>3</var>, <var>1</var>, and <var>2</var>, respectively.  </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100 100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100 100 100\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>41 59 31\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>31 41 59\n</pre></section>\n</div>\n</span>", "p02720": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>A positive integer <var>X</var> is said to be a lunlun number if and only if the following condition is satisfied:</p>\n<ul>\n<li>In the base ten representation of <var>X</var> (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most <var>1</var>.</li>\n</ul>\n<p>For example, <var>1234</var>, <var>1</var>, and <var>334</var> are lunlun numbers, while none of <var>31415</var>, <var>119</var>, or <var>13579</var> is.</p>\n<p>You are given a positive integer <var>K</var>. Find the <var>K</var>-th smallest lunlun number.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq K \\leq 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>23\n</pre>\n<p>We will list the <var>15</var> smallest lunlun numbers in ascending order:<br/>\n<var>1</var>,\n<var>2</var>,\n<var>3</var>,\n<var>4</var>,\n<var>5</var>,\n<var>6</var>,\n<var>7</var>,\n<var>8</var>,\n<var>9</var>,\n<var>10</var>,\n<var>11</var>,\n<var>12</var>,\n<var>21</var>,\n<var>22</var>,\n<var>23</var>.<br/>\nThus, the answer is <var>23</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>21\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>100000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>3234566667\n</pre>\n<p>Note that the answer may not fit into the <var>32</var>-bit signed integer type.</p></section>\n</div>\n</span>", "p02722": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a positive integer <var>N</var>.</p>\n<p>We will choose an integer <var>K</var> between <var>2</var> and <var>N</var> (inclusive), then we will repeat the operation below until <var>N</var> becomes less than <var>K</var>.</p>\n<ul>\n<li>Operation: if <var>K</var> divides <var>N</var>, replace <var>N</var> with <var>N/K</var>; otherwise, replace <var>N</var> with <var>N-K</var>.</li>\n</ul>\n<p>In how many choices of <var>K</var> will <var>N</var> become <var>1</var> in the end?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^{12}</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of choices of <var>K</var> in which <var>N</var> becomes <var>1</var> in the end.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>There are three choices of <var>K</var> in which <var>N</var> becomes <var>1</var> in the end: <var>2</var>, <var>5</var>, and <var>6</var>.</p>\n<p>In each of these choices, <var>N</var> will change as follows:</p>\n<ul>\n<li>When <var>K=2</var>: <var>6 \\to 3 \\to 1</var></li>\n<li>When <var>K=5</var>: <var>6 \\to 1</var></li>\n<li>When <var>K=6</var>: <var>6 \\to 1</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3141\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>13\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159265358\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>9\n</pre></section>\n</div>\n</span>", "p02724": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi loves gold coins. He gains <var>1000</var> <em>happiness points</em> for each <var>500</var>-yen coin he has and gains <var>5</var> happiness points for each <var>5</var>-yen coin he has. (Yen is the currency of Japan.)</p>\n<p>Takahashi has <var>X</var> yen. If he exchanges his money so that he will gain the most happiness points, how many happiness points will he earn?</p>\n<p>(We assume that there are six kinds of coins available: <var>500</var>-yen, <var>100</var>-yen, <var>50</var>-yen, <var>10</var>-yen, <var>5</var>-yen, and <var>1</var>-yen coins.)</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq X \\leq 10^9</var></li>\n<li><var>X</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of happiness points that can be earned.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1024\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2020\n</pre>\n<p>By exchanging his money so that he gets two <var>500</var>-yen coins and four <var>5</var>-yen coins, he gains <var>2020</var> happiness points, which is the maximum number of happiness points that can be earned.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>He is penniless - or yenless.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2000000000\n</pre>\n<p>He is a billionaire - in yen.</p></section>\n</div>\n</span>", "p02725": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a circular pond with a perimeter of <var>K</var> meters, and <var>N</var> houses around them.</p>\n<p>The <var>i</var>-th house is built at a distance of <var>A_i</var> meters from the northmost point of the pond, measured clockwise around the pond.</p>\n<p>When traveling between these houses, you can only go around the pond.</p>\n<p>Find the minimum distance that needs to be traveled when you start at one of the houses and visit all the <var>N</var> houses.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq K \\leq 10^6</var></li>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq A_1 &lt; ... &lt; A_N &lt; K</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var> <var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum distance that needs to be traveled when you start at one of the houses and visit all the <var>N</var> houses.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>20 3\n5 10 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>If you start at the <var>1</var>-st house and go to the <var>2</var>-nd and <var>3</var>-rd houses in this order, the total distance traveled will be <var>10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>20 3\n0 5 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n<p>If you start at the <var>2</var>-nd house and go to the <var>1</var>-st and <var>3</var>-rd houses in this order, the total distance traveled will be <var>10</var>.</p></section>\n</div>\n</span>", "p02721": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has decided to work on <var>K</var> days of his choice from the <var>N</var> days starting with tomorrow.</p>\n<p>You are given an integer <var>C</var> and a string <var>S</var>. Takahashi will choose his workdays as follows:</p>\n<ul>\n<li>After working for a day, he will refrain from working on the subsequent <var>C</var> days.</li>\n<li>If the <var>i</var>-th character of <var>S</var> is <code>x</code>, he will not work on Day <var>i</var>, where Day <var>1</var> is tomorrow, Day <var>2</var> is the day after tomorrow, and so on.</li>\n</ul>\n<p>Find all days on which Takahashi is bound to work.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n<li><var>0 \\leq C \\leq N</var></li>\n<li>The length of <var>S</var> is <var>N</var>.</li>\n<li>Each character of <var>S</var> is <code>o</code> or <code>x</code>.</li>\n<li>Takahashi can choose his workdays so that the conditions in Problem Statement are satisfied.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var> <var>C</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print all days on which Takahashi is bound to work in ascending order, one per line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>11 3 2\nooxxxoxxxoo\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>Takahashi is going to work on <var>3</var> days out of the <var>11</var> days. After working for a day, he will refrain from working on the subsequent <var>2</var> days.</p>\n<p>There are four possible choices for his workdays: Day <var>1,6,10</var>, Day <var>1,6,11</var>, Day <var>2,6,10</var>, and Day <var>2,6,11</var>.</p>\n<p>Thus, he is bound to work on Day <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 2 3\nooxoo\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n5\n</pre>\n<p>There is only one possible choice for his workdays: Day <var>1,5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 1 0\nooooo\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre></pre>\n<p>There may be no days on which he is bound to work.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>16 4 3\nooxxoxoxxxoxoxxo\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>11\n16\n</pre></section>\n</div>\n</span>", "p02723": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A string of length <var>6</var> consisting of lowercase English letters is said to be coffee-like if and only if its <var>3</var>-rd and <var>4</var>-th characters are equal and its <var>5</var>-th and <var>6</var>-th characters are also equal.<br/>\nGiven a string <var>S</var>, determine whether it is coffee-like.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is a string of length <var>6</var> consisting of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> is coffee-like, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>sippuu\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>In <code>sippuu</code>, the <var>3</var>-rd and <var>4</var>-th characters are equal, and the <var>5</var>-th and <var>6</var>-th characters are also equal.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>iphone\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>coffee\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02729": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have <var>N+M</var> balls, each of which has an integer written on it.<br/>\nIt is known that:  </p>\n<ul>\n<li>The numbers written on <var>N</var> of the balls are even.</li>\n<li>The numbers written on <var>M</var> of the balls are odd.</li>\n</ul>\n<p>Find the number of ways to choose two of the <var>N+M</var> balls (disregarding order) so that the sum of the numbers written on them is even.<br/>\nIt can be shown that this count does not depend on the actual values written on the balls.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>0 \\leq N,M \\leq 100</var></li>\n<li><var>2 \\leq N+M</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>For example, let us assume that the numbers written on the three balls are <var>1,2,4</var>.</p>\n<ul>\n<li>If we choose the two balls with <var>1</var> and <var>2</var>, the sum is odd;</li>\n<li>If we choose the two balls with <var>1</var> and <var>4</var>, the sum is odd;</li>\n<li>If we choose the two balls with <var>2</var> and <var>4</var>, the sum is even.</li>\n</ul>\n<p>Thus, the answer is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>13 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>81\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>0 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02727": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are going to eat <var>X</var> red apples and <var>Y</var> green apples.<br/>\nYou have <var>A</var> red apples of deliciousness <var>p_1,p_2, \\dots, p_A</var>, <var>B</var> green apples of deliciousness <var>q_1,q_2, \\dots, q_B</var>, and <var>C</var> colorless apples of deliciousness <var>r_1,r_2, \\dots, r_C</var>.<br/>\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.<br/>\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.<br/>\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X \\leq A \\leq 10^5</var></li>\n<li><var>1 \\leq Y \\leq B \\leq 10^5</var></li>\n<li><var>1 \\leq C \\leq 10^5</var></li>\n<li><var>1 \\leq p_i \\leq 10^9</var></li>\n<li><var>1 \\leq q_i \\leq 10^9</var></li>\n<li><var>1 \\leq r_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var> <var>A</var> <var>B</var> <var>C</var>\n<var>p_1</var> <var>p_2</var> <var>...</var> <var>p_A</var>\n<var>q_1</var> <var>q_2</var> <var>...</var> <var>q_B</var>\n<var>r_1</var> <var>r_2</var> <var>...</var> <var>r_C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the deliciousness of the eaten apples.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2 2 2 1\n2 4\n5 1\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>The maximum possible sum of the deliciousness of the eaten apples can be achieved as follows:</p>\n<ul>\n<li>Eat the <var>2</var>-nd red apple.</li>\n<li>Eat the <var>1</var>-st green apple.</li>\n<li>Paint the <var>1</var>-st colorless apple green and eat it.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2 2 2 2\n8 6\n9 1\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>25\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 2 4 4 4\n11 12 13 14\n21 22 23 24\n1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>74\n</pre></section>\n</div>\n</span>", "p02730": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A string <var>S</var> of an odd length is said to be a <em>strong palindrome</em> if and only if all of the following conditions are satisfied:</p>\n<ul>\n<li><var>S</var> is a palindrome.</li>\n<li>Let <var>N</var> be the length of <var>S</var>. The string formed by the <var>1</var>-st through <var>((N-1)/2)</var>-th characters of <var>S</var> is a palindrome.</li>\n<li>The string consisting of the <var>(N+3)/2</var>-st through <var>N</var>-th characters of <var>S</var> is a palindrome.</li>\n</ul>\n<p>Determine whether <var>S</var> is a strong palindrome.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> consists of lowercase English letters.</li>\n<li>The length of <var>S</var> is an odd number between <var>3</var> and <var>99</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> is a strong palindrome, print <code>Yes</code>;\notherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>akasaka\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<ul>\n<li><var>S</var> is <code>akasaka</code>.</li>\n<li>The string formed by the <var>1</var>-st through the <var>3</var>-rd characters is <code>aka</code>.</li>\n<li>The string formed by the <var>5</var>-th through the <var>7</var>-th characters is <code>aka</code>.\nAll of these are palindromes, so <var>S</var> is a strong palindrome.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>level\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>atcoder\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02734": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are a sequence of <var>N</var> integers <var>A_1</var>, <var>A_2</var>, <var>\\ldots</var>, <var>A_N</var> and a positive integer <var>S</var>.<br/>\nFor a pair of integers <var>(L, R)</var> such that <var>1\\leq L \\leq R \\leq N</var>, let us define <var>f(L, R)</var> as follows:<br/></p>\n<ul>\n<li><var>f(L, R)</var> is the number of sequences of integers <var>(x_1, x_2, \\ldots , x_k)</var> such that <var>L \\leq x_1 &lt; x_2 &lt; \\cdots &lt; x_k \\leq R</var> and <var>A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S</var>.</li>\n</ul>\n<p>Find the sum of <var>f(L, R)</var> over all pairs of integers <var>(L, R)</var> such that <var>1\\leq L \\leq R\\leq N</var>. Since this sum can be enormous, print it modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 3000</var></li>\n<li><var>1 \\leq S \\leq 3000</var></li>\n<li><var>1 \\leq A_i \\leq 3000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>S</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of <var>f(L, R)</var>, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4\n2 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>The value of <var>f(L, R)</var> for each pair is as follows, for a total of <var>5</var>.</p>\n<ul>\n<li><var>f(1,1) = 0</var></li>\n<li><var>f(1,2) = 1</var> (for the sequence <var>(1, 2)</var>)</li>\n<li><var>f(1,3) = 2</var> (for <var>(1, 2)</var> and <var>(3)</var>)</li>\n<li><var>f(2,2) = 0</var></li>\n<li><var>f(2,3) = 1</var> (for <var>(3)</var>)</li>\n<li><var>f(3,3) = 1</var> (for <var>(3)</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 8\n9 9 9 9 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 10\n3 1 4 1 5 9 2 6 5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>152\n</pre></section>\n</div>\n</span>", "p02735": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Consider a grid with <var>H</var> rows and <var>W</var> columns of squares. Let <var>(r, c)</var> denote the square at the <var>r</var>-th row from the top and the <var>c</var>-th column from the left.\nEach square is painted black or white.</p>\n<p>The grid is said to be <em>good</em> if and only if the following condition is satisfied:</p>\n<ul>\n<li>From <var>(1, 1)</var>, we can reach <var>(H, W)</var> by moving one square <strong>right or down</strong> repeatedly, while always being on a white square.</li>\n</ul>\n<p>Note that <var>(1, 1)</var> and <var>(H, W)</var> must be white if the grid is good.</p>\n<p>Your task is to make the grid good by repeating the operation below. Find the minimum number of operations needed to complete the task. It can be proved that you can always complete the task in a finite number of operations.</p>\n<ul>\n<li>Choose four integers <var>r_0, c_0, r_1, c_1(1 \\leq r_0 \\leq r_1 \\leq H, 1 \\leq c_0 \\leq c_1 \\leq W)</var>. For each pair <var>r, c</var> (<var>r_0 \\leq r \\leq r_1, c_0 \\leq c \\leq c_1</var>), invert the color of <var>(r, c)</var> - that is, from white to black and vice versa.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq H, W \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>s_{11} s_{12} \\cdots s_{1W}</var>\n<var>s_{21} s_{22} \\cdots s_{2W}</var>\n <var>\\vdots</var>\n<var>s_{H1} s_{H2} \\cdots s_{HW}</var>\n</pre>\n<p>Here <var>s_{rc}</var> represents the color of <var>(r, c)</var> - <code>#</code> stands for black, and <code>.</code> stands for white.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations needed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n.##\n.#.\n##.\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Do the operation with <var>(r_0, c_0, r_1, c_1) = (2, 2, 2, 2)</var> to change just the color of <var>(2, 2)</var>, and we are done.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2\n#.\n.#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 4\n..##\n#...\n###.\n###.\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>No operation may be needed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5 5\n.#.#.\n#.#.#\n.#.#.\n#.#.#\n.#.#.\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>4\n</pre></section>\n</div>\n</span>", "p02736": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a sequence of <var>N</var> digits <var>a_1a_2\\ldots a_N</var>, where each element is <var>1</var>, <var>2</var>, or <var>3</var>.\nLet <var>x_{i,j}</var> defined as follows:</p>\n<ul>\n<li><var>x_{1,j} := a_j</var> <var>\\quad</var> (<var>1 \\leq j \\leq N</var>)</li>\n<li><var>x_{i,j} := | x_{i-1,j} - x_{i-1,j+1} |</var> <var>\\quad</var> (<var>2 \\leq i \\leq N</var> and <var>1 \\leq j \\leq N+1-i</var>)</li>\n</ul>\n<p>Find <var>x_{N,1}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^6</var></li>\n<li><var>a_i = 1,2,3</var> <var>(1 \\leq i \\leq N)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var><var>a_2</var><var>\\ldots</var><var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>x_{N,1}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1231\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p><var>x_{1,1},x_{1,2},x_{1,3},x_{1,4}</var> are respectively <var>1,2,3,1</var>.</p>\n<p><var>x_{2,1},x_{2,2},x_{2,3}</var> are respectively <var>|1-2| = 1,|2-3| = 1,|3-1| = 2</var>.</p>\n<p><var>x_{3,1},x_{3,2}</var> are respectively <var>|1-1| = 0,|1-2| = 1</var>.</p>\n<p>Finally, <var>x_{4,1} = |0-1| = 1</var>, so the answer is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n2311312312\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02732": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have <var>N</var> balls. The <var>i</var>-th ball has an integer <var>A_i</var> written on it.<br/>\nFor each <var>k=1, 2, ..., N</var>, solve the following problem and print the answer.  </p>\n<ul>\n<li>Find the number of ways to choose two distinct balls (disregarding order) from the <var>N-1</var> balls other than the <var>k</var>-th ball so that the integers written on them are equal.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>3 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq N</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>For each <var>k=1,2,...,N</var>, print a line containing the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 1 2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n2\n3\n2\n3\n</pre>\n<p>Consider the case <var>k=1</var> for example. The numbers written on the remaining balls are <var>1,2,1,2</var>.<br/>\nFrom these balls, there are two ways to choose two distinct balls so that the integers written on them are equal.<br/>\nThus, the answer for <var>k=1</var> is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n0\n0\n0\n</pre>\n<p>No two balls have equal numbers written on them.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n3 3 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n6\n6\n6\n6\n</pre>\n<p>Any two balls have equal numbers written on them.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8\n1 2 1 4 2 1 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n7\n5\n7\n7\n5\n7\n5\n</pre></section>\n</div>\n</span>", "p02738": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a positive integer <var>N</var>.\nFind the number of permutations <var>(P_1,P_2,\\cdots,P_{3N})</var> of <var>(1,2,\\cdots,3N)</var> that can be generated through the procedure below.\nThis number can be enormous, so print it modulo a prime number <var>M</var>.</p>\n<ul>\n<li>Make <var>N</var> sequences <var>A_1,A_2,\\cdots,A_N</var> of length <var>3</var> each, using each of the integers <var>1</var> through <var>3N</var> exactly once.</li>\n<li>Let <var>P</var> be an empty sequence, and do the following operation <var>3N</var> times.<ul>\n<li>Among the elements that are at the beginning of one of the sequences <var>A_i</var> that is non-empty, let the smallest be <var>x</var>.</li>\n<li>Remove <var>x</var> from the sequence, and add <var>x</var> at the end of <var>P</var>.</li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2000</var></li>\n<li><var>10^8 \\leq M \\leq 10^9+7</var></li>\n<li><var>M</var> is a prime number.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of permutations modulo <var>M</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>All permutations of length <var>3</var> count.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>261\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314 1000000007\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>182908545\n</pre></section>\n</div>\n</span>", "p02740": "<span class=\"lang-en\">\n<p>Score : <var>2100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> jewelry shops numbered <var>1</var> to <var>N</var>.</p>\n<p>Shop <var>i</var> (<var>1 \\leq i \\leq N</var>) sells <var>K_i</var> kinds of jewels.\nThe <var>j</var>-th of these jewels (<var>1 \\leq j \\leq K_i</var>) has a size and price of <var>S_{i,j}</var> and <var>P_{i,j}</var>, respectively, and the shop has <var>C_{i,j}</var> jewels of this kind in stock.</p>\n<p>A jewelry box is said to be <em>good</em> if it satisfies all of the following conditions:</p>\n<ul>\n<li>For each of the jewelry shops, the box contains one jewel purchased there.</li>\n<li>All of the following <var>M</var> restrictions are met.<ul>\n<li>Restriction <var>i</var> (<var>1 \\leq i \\leq M</var>): <var>(</var>The size of the jewel purchased at Shop <var>V_i</var><var>)\\leq (</var>The size of the jewel purchased at Shop <var>U_i</var><var>)+W_i</var></li>\n</ul>\n</li>\n</ul>\n<p>Answer <var>Q</var> questions.\nIn the <var>i</var>-th question, given an integer <var>A_i</var>, find the minimum total price of jewels that need to be purchased to make <var>A_i</var> good jewelry boxes. If it is impossible to make <var>A_i</var> good jewelry boxes, report that fact.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 30</var></li>\n<li><var>1 \\leq K_i \\leq 30</var></li>\n<li><var>1 \\leq S_{i,j} \\leq 10^9</var></li>\n<li><var>1 \\leq P_{i,j} \\leq 30</var></li>\n<li><var>1 \\leq C_{i,j} \\leq 10^{12}</var></li>\n<li><var>0 \\leq M \\leq 50</var></li>\n<li><var>1 \\leq U_i,V_i \\leq N</var></li>\n<li><var>U_i \\neq V_i</var></li>\n<li><var>0 \\leq W_i \\leq 10^9</var></li>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 3 \\times 10^{13}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\nDescription of Shop <var>1</var>\nDescription of Shop <var>2</var>\n<var>\\vdots</var>\nDescription of Shop <var>N</var>\n<var>M</var>\n<var>U_1</var> <var>V_1</var> <var>W_1</var>\n<var>U_2</var> <var>V_2</var> <var>W_2</var>\n<var>\\vdots</var>\n<var>U_M</var> <var>V_M</var> <var>W_M</var>\n<var>Q</var>\n<var>A_1</var>\n<var>A_2</var>\n<var>\\vdots</var>\n<var>A_Q</var>\n</pre>\n<p>The description of Shop <var>i</var> (<var>1 \\leq i \\leq N</var>) is in the following format:</p>\n<pre><var>K_i</var>\n<var>S_{i,1}</var> <var>P_{i,1}</var> <var>C_{i,1}</var>\n<var>S_{i,2}</var> <var>P_{i,2}</var> <var>C_{i,2}</var>\n<var>\\vdots</var>\n<var>S_{i,K_i}</var> <var>P_{i,K_i}</var> <var>C_{i,K_i}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines.\nThe <var>i</var>-th line should contain the minimum total price of jewels that need to be purchased to make <var>A_i</var> good jewelry boxes, or <var>-1</var> if it is impossible to make them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2\n1 10 1\n3 1 1\n3\n1 10 1\n2 1 1\n3 10 1\n2\n1 1 1\n3 10 1\n2\n1 2 0\n2 3 0\n3\n1\n2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n42\n-1\n</pre>\n<p>Let <var>(i,j)</var> represent the <var>j</var>-th jewel sold at Shop <var>i</var>.\nThe answer to each query is as follows:</p>\n<ul>\n<li><var>A_1=1</var>: Making a box with <var>(1,2),(2,2),(3,1)</var> costs <var>1+1+1=3</var>, which is optimal.</li>\n<li><var>A_2=2</var>: Making a box with <var>(1,1),(2,1),(3,1)</var> and another with <var>(1,2),(2,3),(3,2)</var> costs <var>(10+10+1)+(1+10+10)=42</var>, which is optimal.</li>\n<li><var>A_3=3</var>: We cannot make three good boxes.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n5\n86849520 30 272477201869\n968023357 28 539131386006\n478355090 8 194500792721\n298572419 6 894877901270\n203794105 25 594579473837\n5\n730211794 22 225797976416\n842538552 9 420531931830\n871332982 26 81253086754\n553846923 29 89734736118\n731788040 13 241088716205\n5\n903534485 22 140045153776\n187101906 8 145639722124\n513502442 9 227445343895\n499446330 6 719254728400\n564106748 20 333423097859\n5\n332809289 8 640911722470\n969492694 21 937931959818\n207959501 11 217019915462\n726936503 12 382527525674\n887971218 17 552919286358\n5\n444983655 13 487875689585\n855863581 6 625608576077\n885012925 10 105520979776\n980933856 1 711474069172\n653022356 19 977887412815\n10\n1 2 231274893\n2 3 829836076\n3 4 745221482\n4 5 935448462\n5 1 819308546\n3 5 815839350\n5 3 513188748\n3 1 968283437\n2 3 202352515\n4 3 292999238\n10\n510266667947\n252899314976\n510266667948\n374155726828\n628866122125\n628866122123\n1\n628866122124\n510266667949\n30000000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>26533866733244\n13150764378752\n26533866733296\n19456097795056\n-1\n33175436167096\n52\n33175436167152\n26533866733352\n-1\n</pre></section>\n</div>\n</span>", "p02743": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Does <var>\\sqrt{a} + \\sqrt{b} &lt; \\sqrt{c}</var> hold?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq a, b, c \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a \\ b \\ c</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>\\sqrt{a} + \\sqrt{b} &lt; \\sqrt{c}</var>, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>No\n</pre>\n<p><var>\\sqrt{2} + \\sqrt{3} &lt; \\sqrt{9}</var> does not hold.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n<p><var>\\sqrt{2} + \\sqrt{3} &lt; \\sqrt{10}</var> holds.</p></section>\n</div>\n</span>", "p02744": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In this problem, we only consider strings consisting of lowercase English letters.</p>\n<p>Strings <var>s</var> and <var>t</var> are said to be <strong>isomorphic</strong> when the following conditions are satisfied:</p>\n<ul>\n<li><var>|s| = |t|</var> holds.</li>\n<li>For every pair <var>i, j</var>, one of the following holds:<ul>\n<li><var>s_i = s_j</var> and <var>t_i = t_j</var>.</li>\n<li><var>s_i \\neq s_j</var> and <var>t_i \\neq t_j</var>.</li>\n</ul>\n</li>\n</ul>\n<p>For example, <code>abcac</code> and <code>zyxzx</code> are isomorphic, while <code>abcac</code> and <code>ppppp</code> are not.</p>\n<p>A string <var>s</var> is said to be in <strong>normal form</strong> when the following condition is satisfied:</p>\n<ul>\n<li>For every string <var>t</var> that is isomorphic to <var>s</var>, <var>s \\leq t</var> holds. Here <var>\\leq</var> denotes lexicographic comparison.</li>\n</ul>\n<p>For example, <code>abcac</code> is in normal form, but <code>zyxzx</code> is not since it is isomorphic to <code>abcac</code>, which is lexicographically smaller than <code>zyxzx</code>.</p>\n<p>You are given an integer <var>N</var>.\nPrint all strings of length <var>N</var> that are in normal form, in lexicographically ascending order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Assume that there are <var>K</var> strings of length <var>N</var> that are in normal form: <var>w_1, \\ldots, w_K</var> in lexicographical order.\nOutput should be in the following format:</p>\n<pre><var>w_1</var>\n<var>:</var>\n<var>w_K</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>a\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>aa\nab\n</pre></section>\n</div>\n</span>", "p02745": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a string <var>s</var>.\nFrom this string, Anuke, Bnuke, and Cnuke obtained strings <var>a</var>, <var>b</var>, and <var>c</var>, respectively, as follows:</p>\n<ul>\n<li>Choose a non-empty (contiguous) substring of <var>s</var> (possibly <var>s</var> itself). Then, replace some characters (possibly all or none) in it with <code>?</code>s.</li>\n</ul>\n<p>For example, if <var>s</var> is <code>mississippi</code>, we can choose the substring <code>ssissip</code> and replace its <var>1</var>-st and <var>3</var>-rd characters with <code>?</code> to obtain <code>?s?ssip</code>.</p>\n<p>You are given the strings <var>a</var>, <var>b</var>, and <var>c</var>.\nFind the minimum possible length of <var>s</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |a|, |b|, |c| \\leq 2000</var></li>\n<li><var>a</var>, <var>b</var>, and <var>c</var> consists of lowercase English letters and <code>?</code>s.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var>\n<var>b</var>\n<var>c</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible length of <var>s</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>a?c\nder\ncod\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>For example, <var>s</var> could be <code>atcoder</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>atcoder\natcoder\n???????\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n<p><var>a</var>, <var>b</var>, and <var>c</var> may not be distinct.</p></section>\n</div>\n</span>", "p02747": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>A Hitachi string is a concatenation of one or more copies of the string <code>hi</code>.</p>\n<p>For example, <code>hi</code> and <code>hihi</code> are Hitachi strings, while <code>ha</code> and <code>hii</code> are not.</p>\n<p>Given a string <var>S</var>, determine whether <var>S</var> is a Hitachi string.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>The length of <var>S</var> is between <var>1</var> and <var>10</var> (inclusive).</li>\n<li><var>S</var> is a string consisting of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If <var>S</var> is a Hitachi string, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>hihi\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><code>hihi</code> is the concatenation of two copies of <code>hi</code>, so it is a Hitachi string.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>hi\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>ha\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02741": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Print the <var>K</var>-th element of the following sequence of length <var>32</var>:</p>\n<pre>1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 32</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the <var>K</var>-th element.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The <var>6</var>-th element is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>27\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>The <var>27</var>-th element is <var>5</var>.</p></section>\n</div>\n</span>", "p02748": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>You are visiting a large electronics store to buy a refrigerator and a microwave.</p>\n<p>The store sells <var>A</var> kinds of refrigerators and <var>B</var> kinds of microwaves. The <var>i</var>-th refrigerator ( <var>1 \\le i \\le A</var> ) is sold at <var>a_i</var> yen (the currency of Japan), and the <var>j</var>-th microwave ( <var>1 \\le j \\le B</var> ) is sold at <var>b_j</var> yen.</p>\n<p>You have <var>M</var> discount tickets. With the <var>i</var>-th ticket ( <var>1 \\le i \\le M</var> ), you can get a discount of <var>c_i</var> yen from the total price when buying the <var>x_i</var>-th refrigerator and the <var>y_i</var>-th microwave together. Only one ticket can be used at a time.</p>\n<p>You are planning to buy one refrigerator and one microwave. Find the minimum amount of money required.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var> 1 \\le A \\le 10^5 </var></li>\n<li><var> 1 \\le B \\le 10^5 </var></li>\n<li><var> 1 \\le M \\le 10^5 </var></li>\n<li><var> 1 \\le a_i , b_i , c_i \\le 10^5 </var></li>\n<li><var> 1 \\le x_i \\le A </var></li>\n<li><var> 1 \\le y_i \\le B </var></li>\n<li><var> c_i \\le a_{x_i} + b_{y_i} </var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>M</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_A</var>\n<var>b_1</var> <var>b_2</var> <var>...</var> <var>b_B</var>\n<var>x_1</var> <var>y_1</var> <var>c_1</var>\n<var>\\vdots</var>\n<var>x_M</var> <var>y_M</var> <var>c_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 1\n3 3\n3 3 3\n1 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>With the ticket, you can get the <var>1</var>-st refrigerator and the <var>2</var>-nd microwave for <var>3+3-1=5</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1 2\n10\n10\n1 1 5\n1 1 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n<p>Note that you cannot use more than one ticket at a time.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 2 1\n3 5\n3 5\n2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n</pre>\n<p>You can get the <var>1</var>-st refrigerator and the <var>1</var>-st microwave for <var>6</var> yen, which is the minimum amount to pay in this case.\nNote that using a ticket is optional.</p></section>\n</div>\n</span>", "p02750": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> stores called Store <var>1</var>, Store <var>2</var>, <var>\\cdots</var>, Store <var>N</var>. Takahashi, who is at his house at time <var>0</var>, is planning to visit some of these stores.</p>\n<p>It takes Takahashi one unit of time to travel from his house to one of the stores, or between any two stores.</p>\n<p>If Takahashi reaches Store <var>i</var> at time <var>t</var>, he can do shopping there after standing in a queue for <var>a_i \\times t + b_i</var> units of time. (We assume that it takes no time other than waiting.)</p>\n<p>All the stores close at time <var>T + 0.5</var>. If Takahashi is standing in a queue for some store then, he cannot do shopping there.</p>\n<p>Takahashi does not do shopping more than once in the same store.</p>\n<p>Find the maximum number of times he can do shopping before time <var>T + 0.5</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq a_i \\leq 10^9</var></li>\n<li><var>0 \\leq b_i \\leq 10^9</var></li>\n<li><var>0 \\leq T \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>T</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>\\vdots</var>\n<var>a_N</var> <var>b_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 7\n2 0\n3 2\n0 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Here is one possible way to visit stores:</p>\n<ul>\n<li>From time <var>0</var> to time <var>1</var>: in <var>1</var> unit of time, he travels from his house to Store <var>1</var>.</li>\n<li>From time <var>1</var> to time <var>3</var>: for <var>2</var> units of time, he stands in a queue for Store <var>1</var> to do shopping.</li>\n<li>From time <var>3</var> to time <var>4</var>: in <var>1</var> unit of time, he travels from Store <var>1</var> to Store <var>3</var>.</li>\n<li>From time <var>4</var> to time <var>7</var>: for <var>3</var> units of time, he stands in a queue for Store <var>3</var> to do shopping.</li>\n</ul>\n<p>In this way, he can do shopping twice before time <var>7.5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 3\n0 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 21600\n2 14\n3 22\n1 3\n1 10\n1 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7 57\n0 25\n3 10\n2 4\n5 15\n3 22\n2 14\n1 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02751": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have a grid with <var>(2^N - 1)</var> rows and <var>(2^M-1)</var> columns.\nYou are asked to write <var>0</var> or <var>1</var> in each of these squares.\nLet <var>a_{i,j}</var> be the number written in the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left.</p>\n<p>For a quadruple of integers <var>(i_1, i_2, j_1, j_2)</var> such that <var>1\\leq i_1 \\leq i_2\\leq 2^N-1, 1\\leq j_1 \\leq j_2\\leq 2^M-1</var>, let\n<var>S(i_1, i_2, j_1, j_2) = \\displaystyle \\sum_{r=i_1}^{i_2}\\sum_{c=j_1}^{j_2}a_{r,c}</var>.\nThen, let the <em>oddness</em> of the grid be the number of quadruples <var>(i_1, i_2, j_1, j_2)</var> such that <var>S(i_1, i_2, j_1, j_2)</var> is odd.</p>\n<p>Find a way to fill in the grid that maximizes its oddness.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> and <var>M</var> are integers between <var>1</var> and <var>10</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print numbers to write in the grid so that its oddness is maximized, in the following format:</p>\n<pre><var>a_{1,1}a_{1,2}\\cdots a_{1,2^M-1}</var>\n<var>a_{2,1}a_{2,2}\\cdots a_{2,2^M-1}</var>\n<var>\\vdots</var>\n<var>a_{2^N-1,1}a_{2^N-1,2}\\cdots a_{2^N-1,2^M-1}</var>\n</pre>\n<p>If there are multiple solutions, you can print any of them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>111\n</pre>\n<p>For this grid, <var>S(1, 1, 1, 1)</var>, <var>S(1, 1, 2, 2)</var>, <var>S(1, 1, 3, 3)</var>, and <var>S(1, 1, 1, 3)</var> are odd, so it has the oddness of <var>4</var>.</p>\n<p>We cannot make the oddness <var>5</var> or higher, so this is one of the ways that maximize the oddness.</p></section>\n</div>\n</span>", "p02752": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have a tree <var>G</var> with <var>N</var> vertices numbered <var>1</var> to <var>N</var>.\nThe <var>i</var>-th edge of <var>G</var> connects Vertex <var>a_i</var> and Vertex <var>b_i</var>.</p>\n<p>Consider adding zero or more edges in <var>G</var>, and let <var>H</var> be the graph resulted.</p>\n<p>Find the number of graphs <var>H</var> that satisfy the following conditions, modulo <var>998244353</var>.</p>\n<ul>\n<li><var>H</var> does not contain self-loops or multiple edges.</li>\n<li>The diameters of <var>G</var> and <var>H</var> are equal.</li>\n<li>For every pair of vertices in <var>H</var> that is not directly connected by an edge, the addition of an edge directly connecting them would reduce the diameter of the graph.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var> 3 \\le N \\le 2 \\times 10^5 </var></li>\n<li><var> 1 \\le a_i, b_i \\le N </var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>\\vdots</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 6\n2 1\n5 2\n3 4\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>For example, adding the edges <var>(1, 5), (3, 5)</var> in <var>G</var> satisfies the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>The only graph <var>H</var> that satisfies the conditions is <var>G</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9\n1 2\n2 3\n4 2\n1 7\n6 1\n2 5\n5 9\n6 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>27\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>19\n2 4\n15 8\n1 16\n1 3\n12 19\n1 18\n7 11\n11 15\n12 9\n1 6\n7 14\n18 2\n13 12\n13 5\n16 13\n7 1\n11 10\n7 17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>78732\n</pre></section>\n</div>\n</span>", "p02753": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In AtCoder City, there are three stations numbered <var>1</var>, <var>2</var>, and <var>3</var>.</p>\n<p>Each of these stations is operated by one of the two railway companies, A and B. A string <var>S</var> of length <var>3</var> represents which company operates each station. If <var>S_i</var> is <code>A</code>, Company A operates Station <var>i</var>; if <var>S_i</var> is <code>B</code>, Company B operates Station <var>i</var>.</p>\n<p>To improve the transportation condition, for each pair of a station operated by Company A and one operated by Company B, there will be a bus service connecting them.</p>\n<p>Determine if there is a pair of stations that will be connected by a bus service.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>Each character of <var>S</var> is <code>A</code> or <code>B</code>.</li>\n<li><var>|S| = 3</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is a pair of stations that will be connected by a bus service, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>ABA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Company A operates Station <var>1</var> and <var>3</var>, while Company B operates Station <var>2</var>.</p>\n<p>There will be a bus service between Station <var>1</var> and <var>2</var>, and between Station <var>2</var> and <var>3</var>, so print <code>Yes</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>BBA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n<p>Company B operates Station <var>1</var> and <var>2</var>, while Company A operates Station <var>3</var>.</p>\n<p>There will be a bus service between Station <var>1</var> and <var>3</var>, and between Station <var>2</var> and <var>3</var>, so print <code>Yes</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>BBB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n<p>Company B operates all the stations. Thus, there will be no bus service, so print <code>No</code>.</p></section>\n</div>\n</span>", "p02754": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has many red balls and blue balls. Now, he will place them in a row.</p>\n<p>Initially, there is no ball placed.</p>\n<p>Takahashi, who is very patient, will do the following operation <var>10^{100}</var> times:</p>\n<ul>\n<li>Place <var>A</var> blue balls at the end of the row of balls already placed. Then, place <var>B</var> red balls at the end of the row.</li>\n</ul>\n<p>How many blue balls will be there among the first <var>N</var> balls in the row of balls made this way?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^{18}</var></li>\n<li><var>A, B \\geq 0</var></li>\n<li><var>0 &lt; A + B \\leq 10^{18}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of blue balls that will be there among the first <var>N</var> balls in the row of balls.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Let <code>b</code> denote a blue ball, and <code>r</code> denote a red ball. The first eight balls in the row will be <code>bbbrrrrb</code>, among which there are four blue balls.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 0 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>He placed only red balls from the beginning.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre>\n<p>Among <code>bbrrrr</code>, there are two blue balls.</p></section>\n</div>\n</span>", "p02755": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the price of a product before tax such that, when the consumption tax rate is <var>8</var> percent and <var>10</var> percent, the amount of consumption tax levied on it is <var>A</var> yen and <var>B</var> yen, respectively. (Yen is the currency of Japan.)</p>\n<p>Here, the price before tax must be a positive integer, and the amount of consumption tax is rounded down to the nearest integer.</p>\n<p>If multiple prices satisfy the condition, print the lowest such price; if no price satisfies the condition, print <code>-1</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A \\leq B \\leq 100</var></li>\n<li><var>A</var> and <var>B</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is a price that satisfies the condition, print an integer representing the lowest such price; otherwise, print <code>-1</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>25\n</pre>\n<p>If the price of a product before tax is <var>25</var> yen, the amount of consumption tax levied on it is:</p>\n<ul>\n<li>When the consumption tax rate is <var>8</var> percent: <var>\\lfloor 25 \\times 0.08 \\rfloor = \\lfloor 2 \\rfloor = 2</var> yen.</li>\n<li>When the consumption tax rate is <var>10</var> percent: <var>\\lfloor 25 \\times 0.1 \\rfloor = \\lfloor 2.5 \\rfloor = 2</var> yen.</li>\n</ul>\n<p>Thus, the price of <var>25</var> yen satisfies the condition. There are other possible prices, such as <var>26</var> yen, but print the minimum such price, <var>25</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100\n</pre>\n<p>If the price of a product before tax is <var>100</var> yen, the amount of consumption tax levied on it is:</p>\n<ul>\n<li>When the consumption tax rate is <var>8</var> percent: <var>\\lfloor 100 \\times 0.08 \\rfloor = 8</var> yen.</li>\n<li>When the consumption tax rate is <var>10</var> percent: <var>\\lfloor 100 \\times 0.1 \\rfloor = 10</var> yen.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>19 99\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n<p>There is no price before tax satisfying this condition, so print <code>-1</code>.</p></section>\n</div>\n</span>", "p02756": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has a string <var>S</var> consisting of lowercase English letters.</p>\n<p>Starting with this string, he will produce a new one in the procedure given as follows.</p>\n<p>The procedure consists of <var>Q</var> operations. In Operation <var>i</var> <var>(1 \\leq i \\leq Q)</var>, an integer <var>T_i</var> is provided, which means the following:</p>\n<ul>\n<li>\n<p>If <var>T_i = 1</var>: reverse the string <var>S</var>.</p>\n</li>\n<li>\n<p>If <var>T_i = 2</var>: An integer <var>F_i</var> and a lowercase English letter <var>C_i</var> are additionally provided.</p>\n<ul>\n<li>If <var>F_i = 1</var> : Add <var>C_i</var> to the beginning of the string <var>S</var>.</li>\n<li>If <var>F_i = 2</var> : Add <var>C_i</var> to the end of the string <var>S</var>.</li>\n</ul>\n</li>\n</ul>\n<p>Help Takahashi by finding the final string that results from the procedure.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10^5</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n<li><var>1 \\leq Q \\leq 2 \\times 10^5</var></li>\n<li><var>T_i = 1</var> or <var>2</var>.</li>\n<li><var>F_i = 1</var> or <var>2</var>, if provided.</li>\n<li><var>C_i</var> is a lowercase English letter, if provided.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>Q</var>\n<var>Query_1</var>\n<var>:</var>\n<var>Query_Q</var>\n</pre>\n<p>In the <var>3</var>-rd through the <var>(Q+2)</var>-th lines, <var>Query_i</var> is one of the following:</p>\n<pre><var>1</var>\n</pre>\n<p>which means <var>T_i = 1</var>, and:</p>\n<pre><var>2</var> <var>F_i</var> <var>C_i</var>\n</pre>\n<p>which means <var>T_i = 2</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the resulting string.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>a\n4\n2 1 p\n1\n2 2 c\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>cpa\n</pre>\n<p>There will be <var>Q = 4</var> operations. Initially, <var>S</var> is <code>a</code>.</p>\n<ul>\n<li>\n<p>Operation <var>1</var>: Add <code>p</code> at the beginning of <var>S</var>. <var>S</var> becomes <code>pa</code>.</p>\n</li>\n<li>\n<p>Operation <var>2</var>: Reverse <var>S</var>. <var>S</var> becomes <code>ap</code>.</p>\n</li>\n<li>\n<p>Operation <var>3</var>: Add <code>c</code> at the end of <var>S</var>. <var>S</var> becomes <code>apc</code>.</p>\n</li>\n<li>\n<p>Operation <var>4</var>: Reverse <var>S</var>. <var>S</var> becomes <code>cpa</code>.</p>\n</li>\n</ul>\n<p>Thus, the resulting string is <code>cpa</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>a\n6\n2 2 a\n2 1 b\n1\n2 2 c\n1\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>aabc\n</pre>\n<p>There will be <var>Q = 6</var> operations. Initially, <var>S</var> is <code>a</code>.</p>\n<ul>\n<li>\n<p>Operation <var>1</var>: <var>S</var> becomes <code>aa</code>.</p>\n</li>\n<li>\n<p>Operation <var>2</var>: <var>S</var> becomes <code>baa</code>.</p>\n</li>\n<li>\n<p>Operation <var>3</var>: <var>S</var> becomes <code>aab</code>.</p>\n</li>\n<li>\n<p>Operation <var>4</var>: <var>S</var> becomes <code>aabc</code>.</p>\n</li>\n<li>\n<p>Operation <var>5</var>: <var>S</var> becomes <code>cbaa</code>.</p>\n</li>\n<li>\n<p>Operation <var>6</var>: <var>S</var> becomes <code>aabc</code>.</p>\n</li>\n</ul>\n<p>Thus, the resulting string is <code>aabc</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>y\n1\n2 1 x\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>xy\n</pre></section>\n</div>\n</span>", "p02749": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have a tree with <var>N</var> vertices. The vertices are numbered <var>1</var> to <var>N</var>, and the <var>i</var>-th edge connects Vertex <var>a_i</var> and Vertex <var>b_i</var>.</p>\n<p>Takahashi loves the number <var>3</var>. He is seeking a permutation <var>p_1, p_2, \\ldots , p_N</var> of integers from <var>1</var> to <var>N</var> satisfying the following condition:</p>\n<ul>\n<li>For every pair of vertices <var>(i, j)</var>, if the distance between Vertex <var>i</var> and Vertex <var>j</var> is <var>3</var>, the sum or product of <var>p_i</var> and <var>p_j</var> is a multiple of <var>3</var>.</li>\n</ul>\n<p>Here the distance between Vertex <var>i</var> and Vertex <var>j</var> is the number of edges contained in the shortest path from Vertex <var>i</var> to Vertex <var>j</var>.</p>\n<p>Help Takahashi by finding a permutation that satisfies the condition.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>2\\leq N\\leq 2\\times 10^5</var></li>\n<li><var>1\\leq a_i, b_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>\\vdots</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If no permutation satisfies the condition, print <code>-1</code>.</p>\n<p>Otherwise, print a permutation satisfying the condition, with space in between.\nIf there are multiple solutions, you can print any of them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 2\n1 3\n3 4\n3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 2 5 4 3 \n</pre>\n<p>The distance between two vertices is <var>3</var> for the two pairs <var>(2, 4)</var> and <var>(2, 5)</var>.</p>\n<ul>\n<li><var>p_2 + p_4 = 6</var></li>\n<li><var>p_2\\times p_5 = 6</var></li>\n</ul>\n<p>Thus, this permutation satisfies the condition.</p></section>\n</div>\n</span>", "p02757": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has a string <var>S</var> of length <var>N</var> consisting of digits from <code>0</code> through <code>9</code>.</p>\n<p>He loves the prime number <var>P</var>. He wants to know how many non-empty (contiguous) substrings of <var>S</var> - there are <var>N \\times (N + 1) / 2</var> of them - are divisible by <var>P</var> when regarded as integers written in base ten.</p>\n<p>Here substrings starting with a <code>0</code> also count, and substrings originated from different positions in <var>S</var> are distinguished, even if they are equal as strings or integers.</p>\n<p>Compute this count to help Takahashi.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>S</var> consists of digits.</li>\n<li><var>|S| = N</var></li>\n<li><var>2 \\leq P \\leq 10000</var></li>\n<li><var>P</var> is a prime number.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>P</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of non-empty (contiguous) substrings of <var>S</var> that are divisible by <var>P</var> when regarded as an integer written in base ten.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n3543\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>Here <var>S</var> = <code>3543</code>. There are ten non-empty (contiguous) substrings of <var>S</var>:</p>\n<ul>\n<li>\n<p><code>3</code>: divisible by <var>3</var>.</p>\n</li>\n<li>\n<p><code>35</code>: not divisible by <var>3</var>.</p>\n</li>\n<li>\n<p><code>354</code>: divisible by <var>3</var>.</p>\n</li>\n<li>\n<p><code>3543</code>: divisible by <var>3</var>.</p>\n</li>\n<li>\n<p><code>5</code>: not divisible by <var>3</var>.</p>\n</li>\n<li>\n<p><code>54</code>: divisible by <var>3</var>.</p>\n</li>\n<li>\n<p><code>543</code>: divisible by <var>3</var>.</p>\n</li>\n<li>\n<p><code>4</code>: not divisible by <var>3</var>.</p>\n</li>\n<li>\n<p><code>43</code>: not divisible by <var>3</var>.</p>\n</li>\n<li>\n<p><code>3</code>: divisible by <var>3</var>.</p>\n</li>\n</ul>\n<p>Six of these are divisible by <var>3</var>, so print <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 2\n2020\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n<p>Here <var>S</var> = <code>2020</code>. There are ten non-empty (contiguous) substrings of <var>S</var>, all of which are divisible by <var>2</var>, so print <var>10</var>.</p>\n<p>Note that substrings beginning with a <code>0</code> also count.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20 11\n33883322005544116655\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>68\n</pre></section>\n</div>\n</span>", "p02758": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> robots numbered <var>1</var> to <var>N</var> placed on a number line. Robot <var>i</var> is placed at coordinate <var>X_i</var>. When activated, it will travel the distance of <var>D_i</var> in the positive direction, and then it will be removed from the number line. All the robots move at the same speed, and their sizes are ignorable.</p>\n<p>Takahashi, who is a mischievous boy, can do the following operation any number of times (possibly zero) as long as there is a robot remaining on the number line.</p>\n<ul>\n<li>Choose a robot and activate it. This operation cannot be done when there is a robot moving.</li>\n</ul>\n<p>While Robot <var>i</var> is moving, if it touches another robot <var>j</var> that is remaining in the range <var>[X_i, X_i + D_i)</var> on the number line, Robot <var>j</var> also gets activated and starts moving. This process is repeated recursively.</p>\n<p>How many possible sets of robots remaining on the number line are there after Takahashi does the operation some number of times? Compute this count modulo <var>998244353</var>, since it can be enormous.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>-10^9 \\leq X_i \\leq 10^9</var></li>\n<li><var>1 \\leq D_i \\leq 10^9</var></li>\n<li><var>X_i \\neq X_j (i \\neq j)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>D_1</var>\n<var>:</var>\n<var>X_N</var> <var>D_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible sets of robots remaining on the number line, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 5\n3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>There are three possible sets of robots remaining on the number line: <var>\\{1, 2\\}</var>, <var>\\{1\\}</var>, and <var>\\{\\}</var>.</p>\n<p>These can be achieved as follows:</p>\n<ul>\n<li>\n<p>If Takahashi activates nothing, the robots <var>\\{1, 2\\}</var> will remain.</p>\n</li>\n<li>\n<p>If Takahashi activates Robot <var>1</var>, it will activate Robot <var>2</var> while moving, after which there will be no robots on the number line. This state can also be reached by activating Robot <var>2</var> and then Robot <var>1</var>.</p>\n</li>\n<li>\n<p>If Takahashi activates Robot <var>2</var> and finishes doing the operation, the robot <var>\\{1\\}</var> will remain.</p>\n</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n6 5\n-1 10\n3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>There are five possible sets of robots remaining on the number line: <var>\\{1, 2, 3\\}</var>, <var>\\{1, 2\\}</var>, <var>\\{2\\}</var>, <var>\\{2, 3\\}</var>, and <var>\\{\\}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n7 10\n-10 3\n4 3\n-4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>16\n</pre>\n<p>None of the robots influences others.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>20\n-8 1\n26 4\n0 5\n9 1\n19 4\n22 20\n28 27\n11 8\n-3 20\n-25 17\n10 4\n-18 27\n24 28\n-11 19\n2 27\n-2 18\n-1 12\n-24 29\n31 29\n29 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>110\n</pre>\n<p>Remember to print the count modulo <var>998244353</var>.</p></section>\n</div>\n</span>", "p02760": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a bingo card with a <var>3\\times3</var> grid. The square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left contains the number <var>A_{i, j}</var>.</p>\n<p>The MC will choose <var>N</var> numbers, <var>b_1, b_2, \\cdots, b_N</var>. If our bingo sheet contains some of those numbers, we will mark them on our sheet.</p>\n<p>Determine whether we will have a bingo when the <var>N</var> numbers are chosen, that is, the sheet will contain three marked numbers in a row, column, or diagonal.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A_{i, j} \\leq 100</var></li>\n<li><var>A_{i_1, j_1} \\neq A_{i_2, j_2} ((i_1, j_1) \\neq (i_2, j_2))</var></li>\n<li><var>1 \\leq N \\leq 10</var></li>\n<li><var>1 \\leq b_i \\leq 100</var></li>\n<li><var>b_i \\neq b_j (i \\neq j)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A_{1, 1}</var> <var>A_{1, 2}</var> <var>A_{1, 3}</var>\n<var>A_{2, 1}</var> <var>A_{2, 2}</var> <var>A_{2, 3}</var>\n<var>A_{3, 1}</var> <var>A_{3, 2}</var> <var>A_{3, 3}</var>\n<var>N</var>\n<var>b_1</var>\n<var>\\vdots</var>\n<var>b_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If we will have a bingo, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>We will mark <var>A_{1, 1}, A_{2, 1}, A_{2, 2}, A_{3, 3}</var>, and complete the diagonal from the top-left to the bottom-right.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>41 7 46\n26 89 2\n78 92 8\n5\n6\n45\n16\n57\n17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>We will mark nothing.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>60 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n<p>We will mark all the squares.</p></section>\n</div>\n</span>", "p02761": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>If there is an integer not less than <var>0</var> satisfying the following conditions, print the smallest such integer; otherwise, print <code>-1</code>.</p>\n<ul>\n<li>The integer has exactly <var>N</var> digits in base ten. (We assume <var>0</var> to be a <var>1</var>-digit integer. For other integers, leading zeros are not allowed.)</li>\n<li>The <var>s_i</var>-th digit from the left is <var>c_i</var>. <var>\\left(i = 1, 2, \\cdots, M\\right)</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 3</var></li>\n<li><var>0 \\leq M \\leq 5</var></li>\n<li><var>1 \\leq s_i \\leq N</var></li>\n<li><var>0 \\leq c_i \\leq 9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>s_1</var> <var>c_1</var>\n<var>\\vdots</var>\n<var>s_M</var> <var>c_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 7\n3 2\n1 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>702\n</pre>\n<p><var>702</var> satisfies the conditions - its <var>1</var>-st and <var>3</var>-rd digits are <code>7</code> and <code>2</code>, respectively - while no non-negative integer less than <var>702</var> satisfies them.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n2 1\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 1\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p02763": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>N</var> consisting of lowercase English letters.</p>\n<p>Process <var>Q</var> queries of the following two types:</p>\n<ul>\n<li>Type <var>1</var>: change the <var>i_q</var>-th character of <var>S</var> to <var>c_q</var>. (Do nothing if the <var>i_q</var>-th character is already <var>c_q</var>.)</li>\n<li>Type <var>2</var>: answer the number of different characters occurring in the substring of <var>S</var> between the <var>l_q</var>-th and <var>r_q</var>-th characters (inclusive).</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var>, <var>Q</var>, <var>i_q</var>, <var>l_q</var>, and <var>r_q</var> are integers.</li>\n<li><var>S</var> is a string consisting of lowercase English letters.</li>\n<li><var>c_q</var> is a lowercase English letter.</li>\n<li><var>1 \\leq N \\leq 500000</var></li>\n<li><var>1 \\leq Q \\leq 20000</var></li>\n<li><var>|S| = N</var></li>\n<li><var>1 \\leq i_q \\leq N</var></li>\n<li><var>1 \\leq l_q \\leq r_q \\leq N</var></li>\n<li>There is at least one query of type <var>2</var> in each testcase.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n<var>Q</var>\n<var>Query_1</var>\n<var>\\vdots</var>\n<var>Query_Q</var>\n</pre>\n<p>Here, <var>Query_i</var> in the <var>4</var>-th through <var>(Q+3)</var>-th lines is one of the following:</p>\n<pre><var>1</var> <var>i_q</var> <var>c_q</var>\n</pre>\n<pre><var>2</var> <var>l_q</var> <var>r_q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each query of type <var>2</var>, print a line containing the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\nabcdbbd\n6\n2 3 6\n1 5 z\n2 1 1\n1 4 a\n1 7 d\n2 1 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n1\n5\n</pre>\n<p>In the first query, <code>cdbb</code> contains three kinds of letters: <code>b</code> , <code>c</code> , and <code>d</code>, so we print <var>3</var>.</p>\n<p>In the second query, <var>S</var> is modified to <code>abcdzbd</code>.</p>\n<p>In the third query, <code>a</code> contains one kind of letter: <code>a</code>, so we print <var>1</var>.</p>\n<p>In the fourth query, <var>S</var> is modified to <code>abcazbd</code>.</p>\n<p>In the fifth query, <var>S</var> does not change and is still <code>abcazbd</code>.</p>\n<p>In the sixth query, <code>abcazbd</code> contains five kinds of letters: <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, and <code>z</code>, so we print <var>5</var>.</p></section>\n</div>\n</span>", "p02764": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi wants to grill <var>N</var> pieces of meat on a grilling net, which can be seen as a two-dimensional plane. The coordinates of the <var>i</var>-th piece of meat are <var>\\left(x_i, y_i\\right)</var>, and its <em>hardness</em> is <var>c_i</var>.</p>\n<p>Takahashi can use one heat source to grill the meat. If he puts the heat source at coordinates <var>\\left(X, Y\\right)</var>, where <var>X</var> and <var>Y</var> are real numbers, the <var>i</var>-th piece of meat will be ready to eat in <var>c_i \\times \\sqrt{\\left(X - x_i\\right)^2 + \\left(Y-y_i\\right)^2}</var> seconds.</p>\n<p>Takahashi wants to eat <var>K</var> pieces of meat. Find the time required to have <var>K</var> or more pieces of meat ready if he put the heat source to minimize this time.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 60</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n<li><var>-1000 \\leq x_i , y_i \\leq 1000</var></li>\n<li><var>\\left(x_i, y_i\\right) \\neq \\left(x_j, y_j\\right) \\left(i \\neq j \\right)</var></li>\n<li><var>1 \\leq c_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>x_1</var> <var>y_1</var> <var>c_1</var>\n<var>\\vdots</var>\n<var>x_N</var> <var>y_N</var> <var>c_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n<p>It will be considered correct if its absolute or relative error from our answer is at most <var>10^{-6}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n-1 0 3\n0 0 3\n1 0 2\n1 1 40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2.4\n</pre>\n<p>If we put the heat source at <var>\\left(-0.2, 0\\right)</var>, the <var>1</var>-st, <var>2</var>-nd, and <var>3</var>-rd pieces of meat will be ready to eat within <var>2.4</var> seconds. This is the optimal place to put the heat source.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 5\n-879 981 26\n890 -406 81\n512 859 97\n362 -955 25\n128 553 17\n-885 763 2\n449 310 57\n-656 -204 11\n-270 76 40\n184 170 16\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7411.2252\n</pre></section>\n</div>\n</span>", "p02765": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is a member of a programming competition site, <em>ButCoder</em>.</p>\n<p>Each member of ButCoder is assigned two values: <strong>Inner Rating</strong> and <strong>Displayed Rating</strong>.</p>\n<p>The Displayed Rating of a member is equal to their Inner Rating if the member has participated in <var>10</var> or more contests. Otherwise, the Displayed Rating will be their Inner Rating minus <var>100 \\times (10 - K)</var> when the member has participated in <var>K</var> contests.</p>\n<p>Takahashi has participated in <var>N</var> contests, and his Displayed Rating is <var>R</var>. Find his Inner Rating.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq R \\leq 4111</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>R</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print his Inner Rating.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2919\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3719\n</pre>\n<p>Takahashi has participated in <var>2</var> contests, which is less than <var>10</var>, so his Displayed Rating is his Inner Rating minus <var>100 \\times (10 - 2) = 800</var>.</p>\n<p>Thus, Takahashi's Inner Rating is <var>2919 + 800 = 3719</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>22 3051\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3051\n</pre></section>\n</div>\n</span>", "p02759": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi wants to print a document with <var>N</var> pages double-sided, where two pages of data can be printed on one sheet of paper.</p>\n<p>At least how many sheets of paper does he need?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var> is an integer.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>By printing the <var>1</var>-st, <var>2</var>-nd pages on the <var>1</var>-st sheet, <var>3</var>-rd and <var>4</var>-th pages on the <var>2</var>-nd sheet, and <var>5</var>-th page on the <var>3</var>-rd sheet, we can print all the data on <var>3</var> sheets of paper.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>50\n</pre></section>\n</div>\n</span>", "p02767": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> people living on a number line.</p>\n<p>The <var>i</var>-th person lives at coordinate <var>X_i</var>.</p>\n<p>You are going to hold a meeting that all <var>N</var> people have to attend.</p>\n<p>The meeting can be held at any <strong>integer coordinate</strong>. If you choose to hold the meeting at coordinate <var>P</var>, the <var>i</var>-th person will spend <var>(X_i - P)^2</var> points of stamina to attend the meeting.</p>\n<p>Find the minimum total points of stamina the <var>N</var> people have to spend.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq X_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>X_2</var> <var>...</var> <var>X_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total stamina the <var>N</var> people have to spend.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>Assume the meeting is held at coordinate <var>2</var>. In this case, the first person will spend <var>(1 - 2)^2</var> points of stamina, and the second person will spend <var>(4 - 2)^2 = 4</var> points of stamina, for a total of <var>5</var> points of stamina. This is the minimum total stamina that the <var>2</var> people have to spend.</p>\n<p>Note that you can hold the meeting only at an integer coordinate.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7\n14 14 2 13 56 2 37\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2354\n</pre></section>\n</div>\n</span>", "p02769": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a building with <var>n</var> rooms, numbered <var>1</var> to <var>n</var>.</p>\n<p>We can move from any room to any other room in the building.</p>\n<p>Let us call the following event a <strong>move</strong>: a person in some room <var>i</var> goes to another room <var>j~ (i \\neq j)</var>.</p>\n<p>Initially, there was one person in each room in the building.</p>\n<p>After that, we know that there were exactly <var>k</var> moves happened up to now.</p>\n<p>We are interested in the number of people in each of the <var>n</var> rooms now. How many combinations of numbers of people in the <var>n</var> rooms are possible?</p>\n<p>Find the count modulo <var>(10^9 + 7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>3 \\leq n \\leq 2 \\times 10^5</var></li>\n<li><var>2 \\leq k \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var> <var>k</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible combinations of numbers of people in the <var>n</var> rooms now, modulo <var>(10^9 + 7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>Let <var>c_1</var>, <var>c_2</var>, and <var>c_3</var> be the number of people in Room <var>1</var>, <var>2</var>, and <var>3</var> now, respectively. There are <var>10</var> possible combination of <var>(c_1, c_2, c_3)</var>:</p>\n<ul>\n<li><var>(0, 0, 3)</var></li>\n<li><var>(0, 1, 2)</var></li>\n<li><var>(0, 2, 1)</var></li>\n<li><var>(0, 3, 0)</var></li>\n<li><var>(1, 0, 2)</var></li>\n<li><var>(1, 1, 1)</var></li>\n<li><var>(1, 2, 0)</var></li>\n<li><var>(2, 0, 1)</var></li>\n<li><var>(2, 1, 0)</var></li>\n<li><var>(3, 0, 0)</var></li>\n</ul>\n<p>For example, <var>(c_1, c_2, c_3)</var> will be <var>(0, 1, 2)</var> if the person in Room <var>1</var> goes to Room <var>2</var> and then one of the persons in Room <var>2</var> goes to Room <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>200000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>607923868\n</pre>\n<p>Print the count modulo <var>(10^9 + 7)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>22583772\n</pre></section>\n</div>\n</span>", "p02770": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a sequence of <var>k</var> numbers: <var>d_0,d_1,...,d_{k - 1}</var>.</p>\n<p>Process the following <var>q</var> queries in order:</p>\n<ul>\n<li>The <var>i</var>-th query contains three integers <var>n_i</var>, <var>x_i</var>, and <var>m_i</var>.\nLet <var>a_0,a_1,...,a_{n_i - 1}</var> be the following sequence of <var>n_i</var> numbers: \\begin{eqnarray} a_j =  \\begin{cases}    x_i &amp; ( j = 0 ) \\\\    a_{j - 1} + d_{(j - 1)~\\textrm{mod}~k} &amp; ( 0 &lt; j \\leq n_i - 1 )  \\end{cases}\\end{eqnarray}\nPrint the number of <var>j~(0 \\leq j &lt; n_i - 1)</var> such that <var>(a_j~\\textrm{mod}~m_i) &lt; (a_{j + 1}~\\textrm{mod}~m_i)</var>.</li>\n</ul>\n<p>Here <var>(y~\\textrm{mod}~z)</var> denotes the remainder of <var>y</var> divided by <var>z</var>, for two integers <var>y</var> and <var>z~(z &gt; 0)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq k, q \\leq 5000</var></li>\n<li><var>0 \\leq d_i \\leq 10^9</var></li>\n<li><var>2 \\leq n_i \\leq 10^9</var></li>\n<li><var>0 \\leq x_i \\leq 10^9</var></li>\n<li><var>2 \\leq m_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>k</var> <var>q</var>\n<var>d_0</var> <var>d_1</var> <var>...</var> <var>d_{k - 1}</var>\n<var>n_1</var> <var>x_1</var> <var>m_1</var>\n<var>n_2</var> <var>x_2</var> <var>m_2</var>\n<var>:</var>\n<var>n_q</var> <var>x_q</var> <var>m_q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>q</var> lines.</p>\n<p>The <var>i</var>-th line should contain the response to the <var>i</var>-th query.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1\n3 1 4\n5 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>For the first query, the sequence {<var>a_j</var>} will be <var>3,6,7,11,14</var>.</p>\n<ul>\n<li><var>(a_0~\\textrm{mod}~2) &gt; (a_1~\\textrm{mod}~2)</var></li>\n<li><var>(a_1~\\textrm{mod}~2) &lt; (a_2~\\textrm{mod}~2)</var></li>\n<li><var>(a_2~\\textrm{mod}~2) = (a_3~\\textrm{mod}~2)</var></li>\n<li><var>(a_3~\\textrm{mod}~2) &gt; (a_4~\\textrm{mod}~2)</var></li>\n</ul>\n<p>Thus, the response to this query should be <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 3\n27 18 28 18 28 46 1000000000\n1000000000 1 7\n1000000000 2 10\n1000000000 3 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>224489796\n214285714\n559523809\n</pre></section>\n</div>\n</span>", "p02771": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>A triple of numbers is said to be <em>poor</em> when two of those numbers are equal but the other number is different from those two numbers.</p>\n<p>You will be given three integers <var>A</var>, <var>B</var>, and <var>C</var>. If this triple is poor, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>A</var>, <var>B</var>, and <var>C</var> are all integers between <var>1</var> and <var>9</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If the given triple is poor, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 7 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><var>A</var> and <var>C</var> are equal, but <var>B</var> is different from those two numbers, so this triple is poor.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p><var>A</var>, <var>B</var>, and <var>C</var> are all equal, so this triple is not poor.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 9 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02768": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Akari has <var>n</var> kinds of flowers, one of each kind.</p>\n<p>She is going to choose one or more of these flowers to make a bouquet.</p>\n<p>However, she hates two numbers <var>a</var> and <var>b</var>, so the number of flowers in the bouquet cannot be <var>a</var> or <var>b</var>.</p>\n<p>How many different bouquets are there that Akari can make?</p>\n<p>Find the count modulo <var>(10^9 + 7)</var>.</p>\n<p>Here, two bouquets are considered different when there is a flower that is used in one of the bouquets but not in the other bouquet.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq n \\leq 10^9</var></li>\n<li><var>1 \\leq a &lt; b \\leq \\textrm{min}(n, 2 \\times 10^5)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var> <var>a</var> <var>b</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of bouquets that Akari can make, modulo <var>(10^9 + 7)</var>. (If there are no such bouquets, print <code>0</code>.)</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>In this case, Akari can choose <var>2</var> or <var>4</var> flowers to make the bouquet.</p>\n<p>There are <var>6</var> ways to choose <var>2</var> out of the <var>4</var> flowers, and <var>1</var> way to choose <var>4</var>, so there are a total of <var>7</var> different bouquets that Akari can make.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000000000 141421 173205\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>34076506\n</pre>\n<p>Print the count modulo <var>(10^9 + 7)</var>.</p></section>\n</div>\n</span>", "p02773": "<span class=\"lang-en\">\n<p>Score: <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have <var>N</var> voting papers. The <var>i</var>-th vote <var>(1 \\leq i \\leq N)</var> has the string <var>S_i</var> written on it.</p>\n<p>Print all strings that are written on the most number of votes, in lexicographical order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>S_i</var> <var>(1 \\leq i \\leq N)</var> are strings consisting of lowercase English letters.</li>\n<li>The length of <var>S_i</var> <var>(1 \\leq i \\leq N)</var> is between <var>1</var> and <var>10</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_1</var>\n<var>:</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print all strings in question in lexicographical order.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>beet\nvet\n</pre>\n<p><code>beet</code> and <code>vet</code> are written on two sheets each, while <code>beat</code>, <code>bed</code>, and <code>bet</code> are written on one vote each. Thus, we should print the strings <code>beet</code> and <code>vet</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>buffalo\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\nbass\nbass\nkick\nkick\nbass\nkick\nkick\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>kick\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4\nushi\ntapu\nnichia\nkun\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>kun\nnichia\ntapu\nushi\n</pre></section>\n</div>\n</span>", "p02774": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have <var>N</var> integers <var>A_1, A_2, ..., A_N</var>.</p>\n<p>There are <var>\\frac{N(N-1)}{2}</var> ways to choose two of them and form a pair. If we compute the product of each of those pairs and sort the results in ascending order, what will be the <var>K</var>-th number in that list?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq K \\leq \\frac{N(N-1)}{2}</var></li>\n<li><var>-10^9 \\leq A_i \\leq 10^9\\ (1 \\leq i \\leq N)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>\\dots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n3 3 -4 -2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>-6\n</pre>\n<p>There are six ways to form a pair. The products of those pairs are <var>9</var>, <var>-12</var>, <var>-6</var>, <var>-12</var>, <var>-6</var>, <var>8</var>.</p>\n<p>Sorting those numbers in ascending order, we have <var>-12</var>, <var>-12</var>, <var>-6</var>, <var>-6</var>, <var>8</var>, <var>9</var>. The third number in this list is <var>-6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 40\n5 4 3 2 -1 0 0 0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>30 413\n-170202098 -268409015 537203564 983211703 21608710 -443999067 -937727165 -97596546 -372334013 398994917 -972141167 798607104 -949068442 -959948616 37909651 0 886627544 -20098238 0 -948955241 0 -214720580 277222296 -18897162 834475626 0 -425610555 110117526 663621752 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>448283280358331064\n</pre></section>\n</div>\n</span>", "p02777": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have <var>A</var> balls with the string <var>S</var> written on each of them and <var>B</var> balls with the string <var>T</var> written on each of them.<br/>\nFrom these balls, Takahashi chooses one with the string <var>U</var> written on it and throws it away.<br/>\nFind the number of balls with the string <var>S</var> and balls with the string <var>T</var> that we have now.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>S</var>, <var>T</var>, and <var>U</var> are strings consisting of lowercase English letters.</li>\n<li>The lengths of <var>S</var> and <var>T</var> are each between <var>1</var> and <var>10</var> (inclusive).</li>\n<li><var>S \\not= T</var></li>\n<li><var>S=U</var> or <var>T=U</var>.</li>\n<li><var>1 \\leq A,B \\leq 10</var></li>\n<li><var>A</var> and <var>B</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var> <var>T</var>\n<var>A</var> <var>B</var>\n<var>U</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer, with space in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>red blue\n3 4\nred\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 4\n</pre>\n<p>Takahashi chose a ball with <code>red</code> written on it and threw it away.\nNow we have two balls with the string <var>S</var> and four balls with the string <var>T</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>red blue\n5 5\nblue\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5 4\n</pre>\n<p>Takahashi chose a ball with <code>blue</code> written on it and threw it away.\nNow we have five balls with the string <var>S</var> and four balls with the string <var>T</var>.</p></section>\n</div>\n</span>", "p02776": "<span class=\"lang-en\">\n<p>Score: <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>After being invaded by the Kingdom of AlDebaran, bombs are planted throughout our country, AtCoder Kingdom.</p>\n<p>Fortunately, our military team called ABC has managed to obtain a device that is a part of the system controlling the bombs.</p>\n<p>There are <var>N</var> bombs, numbered <var>1</var> to <var>N</var>, planted in our country. Bomb <var>i</var> is planted at the coordinate <var>A_i</var>. It is currently activated if <var>B_i=1</var>, and deactivated if <var>B_i=0</var>.</p>\n<p>The device has <var>M</var> cords numbered <var>1</var> to <var>M</var>. If we cut Cord <var>j</var>, the states of all the bombs planted between the coordinates <var>L_j</var> and <var>R_j</var> (inclusive) will be switched - from activated to deactivated, and vice versa.</p>\n<p>Determine whether it is possible to deactivate all the bombs at the same time. If the answer is yes, output a set of cords that should be cut.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9\\ (1 \\leq i \\leq N)</var></li>\n<li><var>A_i</var> are pairwise distinct.</li>\n<li><var>B_i</var> is <var>0</var> or <var>1</var>. <var>(1 \\leq i \\leq N)</var></li>\n<li><var>1 \\leq M \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq L_j \\leq R_j \\leq 10^9\\ (1 \\leq j \\leq M)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n<var>L_1</var> <var>R_1</var>\n<var>:</var>\n<var>L_M</var> <var>R_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If it is impossible to deactivate all the bombs at the same time, print <code>-1</code>. If it is possible to do so, print a set of cords that should be cut, as follows:</p>\n<pre><var>k</var>\n<var>c_1</var> <var>c_2</var> <var>\\dots</var> <var>c_k</var>\n</pre>\n<p>Here, <var>k</var> is the number of cords (possibly <var>0</var>), and <var>c_1, c_2, \\dots, c_k</var> represent the cords that should be cut. <var>1 \\leq c_1 &lt; c_2 &lt; \\dots &lt; c_k \\leq M</var> must hold.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4\n5 1\n10 1\n8 0\n1 10\n4 5\n6 7\n8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n1 4\n</pre>\n<p>There are two activated bombs at the coordinates <var>5, 10</var>, and one deactivated bomb at the coordinate <var>8</var>.</p>\n<p>Cutting Cord <var>1</var> switches the states of all the bombs planted between the coordinates <var>1</var> and <var>10</var>, that is, all of the three bombs.</p>\n<p>Cutting Cord <var>4</var> switches the states of all the bombs planted between the coordinates <var>8</var> and <var>9</var>, that is, Bomb <var>3</var>.</p>\n<p>Thus, we can deactivate all the bombs by cutting Cord <var>1</var> and Cord <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 2\n2 0\n3 1\n5 1\n7 0\n1 4\n4 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>Cutting any set of cords will not deactivate all the bombs at the same time.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 2\n5 0\n10 0\n8 0\n6 9\n66 99\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n\n</pre>\n<p>All the bombs are already deactivated, so we do not need to cut any cord.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>12 20\n536130100 1\n150049660 1\n79245447 1\n132551741 0\n89484841 1\n328129089 0\n623467741 0\n248785745 0\n421631475 0\n498966877 0\n43768791 1\n112237273 0\n21499042 142460201\n58176487 384985131\n88563042 144788076\n120198276 497115965\n134867387 563350571\n211946499 458996604\n233934566 297258009\n335674184 555985828\n414601661 520203502\n101135608 501051309\n90972258 300372385\n255474956 630621190\n436210625 517850028\n145652401 192476406\n377607297 520655694\n244404406 304034433\n112237273 359737255\n392593015 463983307\n150586788 504362212\n54772353 83124235\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n1 7 8 9 11\n</pre>\n<p>If there are multiple sets of cords that deactivate all the bombs when cut, any of them can be printed.</p></section>\n</div>\n</span>", "p02778": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Given is a string <var>S</var>. Replace every character in <var>S</var> with <code>x</code> and print the result.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>S</var> is a string consisting of lowercase English letters.</li>\n<li>The length of <var>S</var> is between <var>1</var> and <var>100</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Replace every character in <var>S</var> with <code>x</code> and print the result.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>sardine\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>xxxxxxx\n</pre>\n<p>Replacing every character in <var>S</var> with <code>x</code> results in <code>xxxxxxx</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>xxxx\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>xxxx\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>gone\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>xxxx\n</pre></section>\n</div>\n</span>", "p02775": "<span class=\"lang-en\">\n<p>Score: <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>In the Kingdom of AtCoder, only banknotes are used as currency. There are <var>10^{100}+1</var> kinds of banknotes, with the values of <var>1, 10, 10^2, 10^3, \\dots, 10^{(10^{100})}</var>. You have come shopping at a mall and are now buying a takoyaki machine with a value of <var>N</var>. <em>(Takoyaki is the name of a Japanese snack.)</em></p>\n<p>To make the payment, you will choose some amount of money which is at least <var>N</var> and give it to the clerk. Then, the clerk gives you back the change, which is the amount of money you give minus <var>N</var>.</p>\n<p>What will be the minimum possible number of total banknotes used by you and the clerk, when both choose the combination of banknotes to minimize this count?</p>\n<p>Assume that you have sufficient numbers of banknotes, and so does the clerk.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> is an integer between <var>1</var> and <var>10^{1,000,000}</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the minimum possible number of total banknotes used by you and the clerk.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>36\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>If you give four banknotes of value <var>10</var> each, and the clerk gives you back four banknotes of value <var>1</var> each, a total of eight banknotes are used.</p>\n<p>The payment cannot be made with less than eight banknotes in total, so the answer is <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>91\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>If you give two banknotes of value <var>100, 1</var>, and the clerk gives you back one banknote of value <var>10</var>, a total of three banknotes are used.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159265358979323846264338327950288419716939937551058209749445923078164062862089986280348253421170\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>243\n</pre></section>\n</div>\n</span>", "p02781": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the number of integers between <var>1</var> and <var>N</var> (inclusive) that contains exactly <var>K</var> non-zero digits when written in base ten.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N &lt; 10^{100}</var></li>\n<li><var>1 \\leq K \\leq 3</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the count.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>100\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>19\n</pre>\n<p>The following <var>19</var> integers satisfy the condition:</p>\n<ul>\n<li><var>1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>25\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>14\n</pre>\n<p>The following <var>14</var> integers satisfy the condition:</p>\n<ul>\n<li><var>11,12,13,14,15,16,17,18,19,21,22,23,24,25</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>937\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>117879300\n</pre></section>\n</div>\n</span>", "p02783": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Serval is fighting with a monster.</p>\n<p>The <em>health</em> of the monster is <var>H</var>.</p>\n<p>In one attack, Serval can decrease the monster's health by <var>A</var>.\nThere is no other way to decrease the monster's health.</p>\n<p>Serval wins when the monster's health becomes <var>0</var> or below.</p>\n<p>Find the number of attacks Serval needs to make before winning.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H \\leq 10^4</var></li>\n<li><var>1 \\leq A \\leq 10^4</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>A</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of attacks Serval needs to make before winning.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<ul>\n<li>After one attack, the monster's health will be <var>6</var>.</li>\n<li>After two attacks, the monster's health will be <var>2</var>.</li>\n<li>After three attacks, the monster's health will be <var>-2</var>.</li>\n</ul>\n<p>Thus, Serval needs to make three attacks to win.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 10000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10000 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>10000\n</pre></section>\n</div>\n</span>", "p02784": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Raccoon is fighting with a monster.</p>\n<p>The <em>health</em> of the monster is <var>H</var>.</p>\n<p>Raccoon can use <var>N</var> kinds of special moves. Using the <var>i</var>-th move decreases the monster's health by <var>A_i</var>.\nThere is no other way to decrease the monster's health.</p>\n<p>Raccoon wins when the monster's health becomes <var>0</var> or below.</p>\n<p>If Raccoon can win without using the same move twice or more, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H \\leq 10^9</var></li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^4</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Raccoon can win without using the same move twice or more, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 3\n4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>The monster's health will become <var>0</var> or below after, for example, using the second and third moves.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>20 3\n4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>210 5\n31 41 59 26 53\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>211 5\n31 41 59 26 53\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02786": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Caracal is fighting with a monster.</p>\n<p>The <em>health</em> of the monster is <var>H</var>.</p>\n<p>Caracal can attack by choosing one monster. When a monster is attacked, depending on that monster's health, the following happens:</p>\n<ul>\n<li>If the monster's health is <var>1</var>, it drops to <var>0</var>.</li>\n<li>If the monster's health, <var>X</var>, is greater than <var>1</var>, that monster disappears. Then, two new monsters appear, each with the health of <var>\\lfloor X/2 \\rfloor</var>.</li>\n</ul>\n<p>(<var>\\lfloor r \\rfloor</var> denotes the greatest integer not exceeding <var>r</var>.)</p>\n<p>Caracal wins when the healths of all existing monsters become <var>0</var> or below.</p>\n<p>Find the minimum number of attacks Caracal needs to make before winning.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H \\leq 10^{12}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the minimum number of attacks Caracal needs to make before winning.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>When Caracal attacks the initial monster, it disappears, and two monsters appear, each with the health of <var>1</var>.</p>\n<p>Then, Caracal can attack each of these new monsters once and win with a total of three attacks.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1000000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1099511627775\n</pre></section>\n</div>\n</span>", "p02785": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Fennec is fighting with <var>N</var> monsters.</p>\n<p>The <em>health</em> of the <var>i</var>-th monster is <var>H_i</var>.</p>\n<p>Fennec can do the following two actions:</p>\n<ul>\n<li>Attack: Fennec chooses one monster. That monster's health will decrease by <var>1</var>.</li>\n<li>Special Move: Fennec chooses one monster. That monster's health will become <var>0</var>.</li>\n</ul>\n<p>There is no way other than Attack and Special Move to decrease the monsters' health.</p>\n<p>Fennec wins when all the monsters' healths become <var>0</var> or below.</p>\n<p>Find the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most <var>K</var> times.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq K \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq H_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>H_1</var> <var>...</var> <var>H_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1\n4 1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>By using Special Move on the third monster, and doing Attack four times on the first monster and once on the second monster, Fennec can win with five Attacks.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 9\n7 9 3 2 3 8 4 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>She can use Special Move on all the monsters.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 0\n1000000000 1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3000000000\n</pre>\n<p>Watch out for overflow.</p></section>\n</div>\n</span>", "p02788": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Silver Fox is fighting with <var>N</var> monsters.</p>\n<p>The monsters are standing in a row, and we can assume them to be standing on a number line. The <var>i</var>-th monster, standing at the coordinate <var>X_i</var>, has the <em>health</em> of <var>H_i</var>.</p>\n<p>Silver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate <var>x</var> decreases the healths of all monsters between the coordinates <var>x-D</var> and <var>x+D</var> (inclusive) by <var>A</var>.\nThere is no way other than bombs to decrease the monster's health.</p>\n<p>Silver Fox wins when all the monsters' healths become <var>0</var> or below.</p>\n<p>Find the minimum number of bombs needed to win.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq D \\leq 10^9</var></li>\n<li><var>1 \\leq A \\leq 10^9</var></li>\n<li><var>0 \\leq X_i \\leq 10^9</var></li>\n<li><var>1 \\leq H_i \\leq 10^9</var></li>\n<li><var>X_i</var> are distinct.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>D</var> <var>A</var>\n<var>X_1</var> <var>H_1</var>\n<var>:</var>\n<var>X_N</var> <var>H_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of bombs needed to win.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3 2\n1 2\n5 4\n9 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>First, let us use a bomb at the coordinate <var>4</var> to decrease the first and second monsters' health by <var>2</var>.</p>\n<p>Then, use a bomb at the coordinate <var>6</var> to decrease the second and third monsters' health by <var>2</var>.</p>\n<p>Now, all the monsters' healths are <var>0</var>.\nWe cannot make all the monsters' health drop to <var>0</var> or below with just one bomb.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9 4 1\n1 5\n2 4\n3 3\n4 2\n5 1\n6 2\n7 3\n8 4\n9 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>We should use five bombs at the coordinate <var>5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 0 1\n300000000 1000000000\n100000000 1000000000\n200000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3000000000\n</pre>\n<p>Watch out for overflow.</p></section>\n</div>\n</span>", "p02787": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Ibis is fighting with a monster.</p>\n<p>The <em>health</em> of the monster is <var>H</var>.</p>\n<p>Ibis can cast <var>N</var> kinds of spells. Casting the <var>i</var>-th spell decreases the monster's health by <var>A_i</var>, at the cost of <var>B_i</var> Magic Points.</p>\n<p>The same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.</p>\n<p>Ibis wins when the health of the monster becomes <var>0</var> or below.</p>\n<p>Find the minimum total Magic Points that have to be consumed before winning.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H \\leq 10^4</var></li>\n<li><var>1 \\leq N \\leq 10^3</var></li>\n<li><var>1 \\leq A_i \\leq 10^4</var></li>\n<li><var>1 \\leq B_i \\leq 10^4</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total Magic Points that have to be consumed before winning.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>9 3\n8 3\n4 2\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>First, let us cast the first spell to decrease the monster's health by <var>8</var>, at the cost of <var>3</var> Magic Points. The monster's health is now <var>1</var>.</p>\n<p>Then, cast the third spell to decrease the monster's health by <var>2</var>, at the cost of <var>1</var> Magic Point. The monster's health is now <var>-1</var>.</p>\n<p>In this way, we can win at the total cost of <var>4</var> Magic Points.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100 6\n1 1\n2 3\n3 9\n4 27\n5 81\n6 243\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100\n</pre>\n<p>It is optimal to cast the first spell <var>100</var> times.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9999 10\n540 7550\n691 9680\n700 9790\n510 7150\n415 5818\n551 7712\n587 8227\n619 8671\n588 8228\n176 2461\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>139815\n</pre></section>\n</div>\n</span>", "p02791": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Given is a permutation <var>P_1, \\ldots, P_N</var> of <var>1, \\ldots, N</var>.\nFind the number of integers <var>i</var> <var>(1 \\leq i \\leq N)</var> that satisfy the following condition:  </p>\n<ul>\n<li>For any integer <var>j</var> <var>(1 \\leq j \\leq i)</var>, <var>P_i \\leq P_j</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>P_1, \\ldots, P_N</var> is a permutation of <var>1, \\ldots, N</var>.  </li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_1</var> <var>...</var> <var>P_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of integers <var>i</var> that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n4 2 5 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><var>i=1</var>, <var>2</var>, and <var>4</var> satisfy the condition, but <var>i=3</var> does not - for example, <var>P_i &gt; P_j</var> holds for <var>j = 1</var>.<br/>\nSimilarly, <var>i=5</var> does not satisfy the condition, either. Thus, there are three integers that satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n4 3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n<p>All integers <var>i</var> <var>(1 \\leq i \\leq N)</var> satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n1 2 3 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n<p>Only <var>i=1</var> satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8\n5 7 4 2 6 8 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>1\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>1\n</pre></section>\n</div>\n</span>", "p02790": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are <var>1</var>-digit positive integers <var>a</var> and <var>b</var>. Consider these two strings: the concatenation of <var>b</var> copies of the digit <var>a</var>, and the concatenation of <var>a</var> copies of the digit <var>b</var>. Which of these is lexicographically smaller?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq a \\leq 9</var></li>\n<li><var>1 \\leq b \\leq 9</var></li>\n<li><var>a</var> and <var>b</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the lexicographically smaller of the two strings. (If the two strings are equal, print one of them.)</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3333\n</pre>\n<p>We have two strings <code>444</code> and <code>3333</code>. Between them, <code>3333</code> is the lexicographically smaller.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7777777\n</pre></section>\n</div>\n</span>", "p02789": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.<br/>\nThe problem has <var>N</var> test cases, all of which must be passed to get an AC verdict.<br/>\nTakahashi's submission has passed <var>M</var> cases out of the <var>N</var> test cases.<br/>\nDetermine whether Takahashi's submission gets an AC.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq M \\leq N</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If Takahashi's submission gets an AC, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>All three test cases have been passed, so his submission gets an AC.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>Only two out of the three test cases have been passed, so his submission does not get an AC.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02792": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Given is a positive integer <var>N</var>.<br/>\nFind the number of pairs <var>(A, B)</var> of positive integers not greater than <var>N</var> that satisfy the following condition:</p>\n<ul>\n<li>When <var>A</var> and <var>B</var> are written in base ten without leading zeros, the last digit of <var>A</var> is equal to the first digit of <var>B</var>, and the first digit of <var>A</var> is equal to the last digit of <var>B</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>25\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>17\n</pre>\n<p>The following <var>17</var> pairs satisfy the condition: <var>(1,1)</var>, <var>(1,11)</var>, <var>(2,2)</var>, <var>(2,22)</var>, <var>(3,3)</var>, <var>(4,4)</var>, <var>(5,5)</var>, <var>(6,6)</var>, <var>(7,7)</var>, <var>(8,8)</var>, <var>(9,9)</var>, <var>(11,1)</var>, <var>(11,11)</var>, <var>(12,21)</var>, <var>(21,12)</var>, <var>(22,2)</var>, and <var>(22,22)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>108\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>2020\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>40812\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>200000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>400000008\n</pre></section>\n</div>\n</span>", "p02793": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are <var>N</var> positive integers <var>A_1,...,A_N</var>.</p>\n<p>Consider positive integers <var>B_1, ..., B_N</var> that satisfy the following condition.</p>\n<p>Condition: For any <var>i, j</var> such that <var>1 \\leq i &lt; j \\leq N</var>, <var>A_i B_i = A_j B_j</var> holds.</p>\n<p>Find the minimum possible value of <var>B_1 + ... + B_N</var> for such <var>B_1,...,B_N</var>.</p>\n<p>Since the answer can be enormous, print the sum modulo (<var>10^9 +7</var>).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^4</var></li>\n<li><var>1 \\leq A_i \\leq 10^6</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible value of <var>B_1 + ... + B_N</var> for <var>B_1,...,B_N</var> that satisfy the condition, modulo (<var>10^9 +7</var>).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>13\n</pre>\n<p>Let <var>B_1=6</var>, <var>B_2=4</var>, and <var>B_3=3</var>, and the condition will be satisfied.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n12 12 12 12 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>We can let all <var>B_i</var> be <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n1000000 999999 999998\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>996989508\n</pre>\n<p>Print the sum modulo <var>(10^9+7)</var>.</p></section>\n</div>\n</span>", "p02795": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a grid with <var>H</var> rows and <var>W</var> columns, where all the squares are initially white.</p>\n<p>You will perform some number of painting operations on the grid.\nIn one operation, you can do one of the following two actions:</p>\n<ul>\n<li>Choose one row, then paint all the squares in that row black.</li>\n<li>Choose one column, then paint all the squares in that column black.</li>\n</ul>\n<p>At least how many operations do you need in order to have <var>N</var> or more black squares in the grid?\nIt is guaranteed that, under the conditions in Constraints, having <var>N</var> or more black squares is always possible by performing some number of operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H \\leq 100</var></li>\n<li><var>1 \\leq W \\leq 100</var></li>\n<li><var>1 \\leq N \\leq H \\times W</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var>\n<var>W</var>\n<var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations needed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n7\n10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>You can have <var>14</var> black squares in the grid by performing the \"row\" operation twice, on different rows.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>14\n12\n112\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n100\n200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre></section>\n</div>\n</span>", "p02797": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are three integers <var>N</var>, <var>K</var>, and <var>S</var>.</p>\n<p>Find a sequence <var>A_1, A_2, ..., A_N</var> of <var>N</var> integers between <var>1</var> and <var>10^9</var> (inclusive) that satisfies the condition below.\nWe can prove that, under the conditions in Constraints, such a sequence always exists.</p>\n<ul>\n<li>There are exactly <var>K</var> pairs <var>(l, r)</var> of integers such that <var>1 \\leq l \\leq r \\leq N</var> and <var>A_l + A_{l + 1} + \\cdots + A_r = S</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq K \\leq N</var></li>\n<li><var>1 \\leq S \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var> <var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print a sequence satisfying the condition, in the following format:</p>\n<pre><var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 2 3 4\n</pre>\n<p>Two pairs <var>(l, r) = (1, 2)</var> and <var>(3, 3)</var> satisfy the condition in the statement.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 3 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>50 50 50 30 70\n</pre></section>\n</div>\n</span>", "p02796": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In a factory, there are <var>N</var> robots placed on a number line.\nRobot <var>i</var> is placed at coordinate <var>X_i</var> and can extend its arms of length <var>L_i</var> in both directions, positive and negative.</p>\n<p>We want to remove zero or more robots so that the movable ranges of arms of no two remaining robots intersect.\nHere, for each <var>i</var> (<var>1 \\leq i \\leq N</var>), the movable range of arms of Robot <var>i</var> is the part of the number line between the coordinates <var>X_i - L_i</var> and <var>X_i + L_i</var>, excluding the endpoints.</p>\n<p>Find the maximum number of robots that we can keep.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100,000</var></li>\n<li><var>0 \\leq X_i \\leq 10^9</var> (<var>1 \\leq i \\leq N</var>)</li>\n<li><var>1 \\leq L_i \\leq 10^9</var> (<var>1 \\leq i \\leq N</var>)</li>\n<li>If <var>i \\neq j</var>, <var>X_i \\neq X_j</var>.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>L_1</var>\n<var>X_2</var> <var>L_2</var>\n<var>\\vdots</var>\n<var>X_N</var> <var>L_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of robots that we can keep.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 4\n4 3\n9 3\n100 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>By removing Robot <var>2</var>, we can keep the other three robots.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n8 20\n1 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n10 1\n2 1\n4 1\n6 1\n8 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p02798": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> cards numbered <var>1, 2, ..., N</var>.\nCard <var>i</var> (<var>1 \\leq i \\leq N</var>) has an integer <var>A_i</var> written in red ink on one side and an integer <var>B_i</var> written in blue ink on the other side.\nInitially, these cards are arranged from left to right in the order from Card <var>1</var> to Card <var>N</var>, with the red numbers facing up.</p>\n<p>Determine whether it is possible to have a non-decreasing sequence facing up from left to right (that is, for each <var>i</var> (<var>1 \\leq i \\leq N - 1</var>), the integer facing up on the <var>(i+1)</var>-th card from the left is not less than the integer facing up on the <var>i</var>-th card from the left) by repeating the operation below. If the answer is yes, find the minimum number of operations required to achieve it.</p>\n<ul>\n<li>Choose an integer <var>i</var> (<var>1 \\leq i \\leq N - 1</var>).\nSwap the <var>i</var>-th and <var>(i+1)</var>-th cards from the left, then flip these two cards.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 18</var></li>\n<li><var>1 \\leq A_i, B_i \\leq 50</var> (<var>1 \\leq i \\leq N</var>)</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n<var>B_1</var> <var>B_2</var> <var>...</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is impossible to have a non-decreasing sequence, print <code>-1</code>.\nIf it is possible, print the minimum number of operations required to achieve it.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 4 3\n3 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>By doing the operation once with <var>i = 1</var>, we have a sequence <var>[2, 3, 3]</var> facing up, which is non-decreasing.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n2 1\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>After any number of operations, we have the sequence <var>[2, 1]</var> facing up, which is not non-decreasing.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n1 2 3 4\n5 6 7 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>No operation may be required.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5\n28 15 22 43 31\n20 22 43 33 32\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>5\n4 46 6 38 43\n33 15 18 27 37\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02799": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a connected undirected graph with <var>N</var> vertices and <var>M</var> edges.\nEdge <var>i</var> in this graph (<var>1 \\leq i \\leq M</var>) connects Vertex <var>U_i</var> and Vertex <var>V_i</var> bidirectionally.\nWe are additionally given <var>N</var> integers <var>D_1, D_2, ..., D_N</var>.</p>\n<p>Determine whether the conditions below can be satisfied by assigning a color - white or black - to each vertex and an integer weight between <var>1</var> and <var>10^9</var> (inclusive) to each edge in this graph.\nIf the answer is yes, find one such assignment of colors and integers, too.</p>\n<ul>\n<li>There is at least one vertex assigned white and at least one vertex assigned black.</li>\n<li>For each vertex <var>v</var> (<var>1 \\leq v \\leq N</var>), the following holds.<ul>\n<li>The minimum cost to travel from Vertex <var>v</var> to a vertex whose color assigned is different from that of Vertex <var>v</var> by traversing the edges is equal to <var>D_v</var>.</li>\n</ul>\n</li>\n</ul>\n<p>Here, the cost of traversing the edges is the sum of the weights of the edges traversed.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100,000</var></li>\n<li><var>1 \\leq M \\leq 200,000</var></li>\n<li><var>1 \\leq D_i \\leq 10^9</var></li>\n<li><var>1 \\leq U_i, V_i \\leq N</var></li>\n<li>The given graph is connected and has no self-loops or multiple edges.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>D_1</var> <var>D_2</var> <var>...</var> <var>D_N</var>\n<var>U_1</var> <var>V_1</var>\n<var>U_2</var> <var>V_2</var>\n<var>\\vdots</var>\n<var>U_M</var> <var>V_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is no assignment satisfying the conditions, print a single line containing <code>-1</code>.</p>\n<p>If such an assignment exists, print one such assignment in the following format:</p>\n<pre><var>S</var>\n<var>C_1</var>\n<var>C_2</var>\n<var>\\vdots</var>\n<var>C_M</var>\n</pre>\n<p>Here,</p>\n<ul>\n<li>the first line should contain the string <var>S</var> of length <var>N</var>. Its <var>i</var>-th character (<var>1 \\leq i \\leq N</var>) should be <code>W</code> if Vertex <var>i</var> is assigned white and <code>B</code> if it is assigned black.</li>\n<li>The <var>(i + 1)</var>-th line (<var>1 \\leq i \\leq M</var>) should contain the integer weight <var>C_i</var> assigned to Edge <var>i</var>.</li>\n</ul>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 5\n3 4 3 5 7\n1 2\n1 3\n3 2\n4 2\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>BWWBB\n4\n3\n1\n5\n2\n</pre>\n<p>Assume that we assign the colors and integers as the sample output, and let us consider Vertex <var>5</var>, for example. To travel from Vertex <var>5</var>, which is assigned black, to a vertex that is assigned white with the minimum cost, we should make these moves: Vertex <var>5</var> <var>\\to</var> Vertex <var>4</var> <var>\\to</var> Vertex <var>2</var>. The total cost of these moves is <var>7</var>, which satisfies the condition. We can also verify that the condition is satisfied for other vertices.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 7\n1 2 3 4 5\n1 2\n1 3\n1 4\n2 3\n2 5\n3 5\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 6\n1 1 1 1\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>BBBW\n1\n1\n1\n2\n1\n1\n</pre></section>\n</div>\n</span>", "p02800": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have an <var>H \\times W</var> grid, where each square is painted white or black in the initial state.\nGiven are strings <var>A_1, A_2, ..., A_H</var> representing the colors of the squares in the initial state.\nFor each pair <var>(i, j)</var> (<var>1 \\leq i \\leq H</var>, <var>1 \\leq j \\leq W</var>), if the <var>j</var>-th character of <var>A_i</var> is <code>.</code>, the square at the <var>i</var>-th row and <var>j</var>-th column is painted white; if that character is <code>#</code>, that square is painted black.</p>\n<p>Among the <var>2^{HW}</var> ways for each square in the grid to be painted white or black, how many can be obtained from the initial state by performing the operations below any number of times (possibly zero) in any order? Find this count modulo <var>998,244,353</var>.</p>\n<ul>\n<li>Choose one row, then paint all the squares in that row white.</li>\n<li>Choose one row, then paint all the squares in that row black.</li>\n<li>Choose one column, then paint all the squares in that column white.</li>\n<li>Choose one column, then paint all the squares in that column black.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H, W \\leq 10</var></li>\n<li><var>|A_i| = W</var> (<var>1 \\leq i \\leq H</var>)</li>\n<li>All strings <var>A_i</var> consist of <code>.</code> and <code>#</code>.</li>\n<li><var>H</var> and <var>W</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>A_1</var>\n<var>A_2</var>\n<var>\\vdots</var>\n<var>A_H</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n#.\n.#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>15\n</pre>\n<p>For example, if we paint the second row black, the grid becomes:</p>\n<pre>#.\n##\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n...\n...\n...\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>230\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 4\n#...\n...#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>150\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>6 7\n.......\n.......\n.#.....\n..#....\n.#.#...\n.......\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>203949910\n</pre></section>\n</div>\n</span>", "p02802": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi participated in a contest on AtCoder.</p>\n<p>The contest had <var>N</var> problems.</p>\n<p>Takahashi made <var>M</var> submissions during the contest.</p>\n<p>The <var>i</var>-th submission was made for the <var>p_i</var>-th problem and received the verdict <var>S_i</var> (<code>AC</code> or <code>WA</code>).</p>\n<p>The number of Takahashi's correct answers is the number of problems on which he received an <code>AC</code> once or more.</p>\n<p>The number of Takahashi's penalties is the sum of the following count for the problems on which he received an <code>AC</code> once or more: the number of <code>WA</code>s received before receiving an <code>AC</code> for the first time on that problem.</p>\n<p>Find the numbers of Takahashi's correct answers and penalties.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var>, <var>M</var>, and <var>p_i</var> are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq p_i \\leq N</var></li>\n<li><var>S_i</var> is <code>AC</code> or <code>WA</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>p_1</var> <var>S_1</var>\n<var>:</var>\n<var>p_M</var> <var>S_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of Takahashi's correct answers and the number of Takahashi's penalties.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 2\n</pre>\n<p>In his second submission, he received an <code>AC</code> on the first problem for the first time. Before this, he received one <code>WA</code> on this problem.</p>\n<p>In his fourth submission, he received an <code>AC</code> on the second problem for the first time. Before this, he received one <code>WA</code> on this problem.</p>\n<p>Thus, he has two correct answers and two penalties.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100000 3\n7777 AC\n7777 AC\n7777 AC\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 0\n</pre>\n<p>Note that it is pointless to get an <code>AC</code> more than once on the same problem.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0 0\n</pre></section>\n</div>\n</span>", "p02801": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a lowercase English letter <var>C</var> that is not <code>z</code>. Print the letter that follows <var>C</var> in alphabetical order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>C</var> is a lowercase English letter that is not <code>z</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the letter that follows <var>C</var> in alphabetical order.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>a\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>b\n</pre>\n<p><code>a</code> is followed by <code>b</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>y\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>z\n</pre>\n<p><code>y</code> is followed by <code>z</code>.</p></section>\n</div>\n</span>", "p02803": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has a maze, which is a grid of <var>H \\times W</var> squares with <var>H</var> horizontal rows and <var>W</var> vertical columns.</p>\n<p>The square at the <var>i</var>-th row from the top and the <var>j</var>-th column is a \"wall\" square if <var>S_{ij}</var> is <code>#</code>, and a \"road\" square if <var>S_{ij}</var> is <code>.</code>.</p>\n<p>From a road square, you can move to a horizontally or vertically adjacent road square.</p>\n<p>You cannot move out of the maze, move to a wall square, or move diagonally.</p>\n<p>Takahashi will choose a starting square and a goal square, which can be any road squares, and give the maze to Aoki.</p>\n<p>Aoki will then travel from the starting square to the goal square, in the minimum number of moves required.</p>\n<p>In this situation, find the maximum possible number of moves Aoki has to make.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 20</var></li>\n<li><var>S_{ij}</var> is <code>.</code> or <code>#</code>.</li>\n<li><var>S</var> contains at least two occurrences of <code>.</code>.</li>\n<li>Any road square can be reached from any road square in zero or more moves.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>S_{11}</var><var>...</var><var>S_{1W}</var>\n<var>:</var>\n<var>S_{H1}</var><var>...</var><var>S_{HW}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of moves Aoki has to make.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n...\n...\n...\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>If Takahashi chooses the top-left square as the starting square and the bottom-right square as the goal square, Aoki has to make four moves.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 5\n...#.\n.#.#.\n.#...\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n<p>If Takahashi chooses the bottom-left square as the starting square and the top-right square as the goal square, Aoki has to make ten moves.</p></section>\n</div>\n</span>", "p02804": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For a finite set of integers <var>X</var>, let <var>f(X)=\\max X - \\min X</var>.</p>\n<p>Given are <var>N</var> integers <var>A_1,...,A_N</var>.</p>\n<p>We will choose <var>K</var> of them and let <var>S</var> be the set of the integers chosen. If we distinguish elements with different indices even when their values are the same, there are <var>{}_N C_K</var> ways to make this choice. Find the sum of <var>f(S)</var> over all those ways.</p>\n<p>Since the answer can be enormous, print it <var>\\bmod (10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n<li><var>|A_i| \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer <var>\\bmod (10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2\n1 1 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11\n</pre>\n<p>There are six ways to choose <var>S</var>: <var>\\{1,1\\},\\{1,3\\},\\{1,4\\},\\{1,3\\},\\{1,4\\}, \\{3,4\\}</var> (we distinguish the two <var>1</var>s). The value of <var>f(S)</var> for these choices are <var>0,2,3,2,3,1</var>, respectively, for the total of <var>11</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 3\n10 10 10 -10 -10 -10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>360\n</pre>\n<p>There are <var>20</var> ways to choose <var>S</var>. In <var>18</var> of them, <var>f(S)=20</var>, and in <var>2</var> of them, <var>f(S)=0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 1\n1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 6\n1000000000 1000000000 1000000000 1000000000 1000000000 0 0 0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>999998537\n</pre>\n<p>Print the sum <var>\\bmod (10^9+7)</var>.</p></section>\n</div>\n</span>", "p02805": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are <var>N</var> points <var>(x_i, y_i)</var> in a two-dimensional plane.</p>\n<p>Find the minimum radius of a circle such that all the points are inside or on it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 50</var></li>\n<li><var>0 \\leq x_i \\leq 1000</var></li>\n<li><var>0 \\leq y_i \\leq 1000</var></li>\n<li>The given <var>N</var> points are all different.</li>\n<li>The values in input are all integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>:</var>\n<var>x_N</var> <var>y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum radius of a circle such that all the <var>N</var> points are inside or on it.</p>\n<p>Your output will be considered correct if the absolute or relative error from our answer is at most <var>10^{-6}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n0 0\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0.500000000000000000\n</pre>\n<p>Both points are contained in the circle centered at <var>(0.5,0)</var> with a radius of <var>0.5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n0 0\n0 1\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0.707106781186497524\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n10 9\n5 9\n2 0\n0 0\n2 7\n3 3\n2 5\n10 0\n3 7\n1 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6.726812023536805158\n</pre>\n<p>If the absolute or relative error from our answer is at most <var>10^{-6}</var>, the output will be considered correct.</p></section>\n</div>\n</span>", "p02806": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Niwango created a playlist of <var>N</var> songs.\nThe title and the duration of the <var>i</var>-th song are <var>s_i</var> and <var>t_i</var> seconds, respectively.\nIt is guaranteed that <var>s_1,\\ldots,s_N</var> are all distinct.</p>\n<p>Niwango was doing some work while playing this playlist. (That is, all the songs were played once, in the order they appear in the playlist, without any pause in between.)\nHowever, he fell asleep during his work, and he woke up after all the songs were played.\nAccording to his record, it turned out that he fell asleep at the very end of the song titled <var>X</var>.</p>\n<p>Find the duration of time when some song was played while Niwango was asleep.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>s_i</var> and <var>X</var> are strings of length between <var>1</var> and <var>100</var> (inclusive) consisting of lowercase English letters.</li>\n<li><var>s_1,\\ldots,s_N</var> are distinct.</li>\n<li>There exists an integer <var>i</var> such that <var>s_i = X</var>.</li>\n<li><var>1 \\leq t_i \\leq 1000</var></li>\n<li><var>t_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s_1</var> <var>t_1</var>\n<var>\\vdots</var>\n<var>s_{N}</var> <var>t_N</var>\n<var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\ndwango 2\nsixth 5\nprelims 25\ndwango\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>30\n</pre>\n<ul>\n<li>While Niwango was asleep, two songs were played: <code>sixth</code> and <code>prelims</code>.</li>\n<li>The answer is the total duration of these songs, <var>30</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\nabcde 1000\nabcde\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<ul>\n<li>No songs were played while Niwango was asleep.</li>\n<li>In such a case, the total duration of songs is <var>0</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15\nypnxn 279\nkgjgwx 464\nqquhuwq 327\nrxing 549\npmuduhznoaqu 832\ndagktgdarveusju 595\nwunfagppcoi 200\ndhavrncwfw 720\njpcmigg 658\nwrczqxycivdqn 639\nmcmkkbnjfeod 992\nhtqvkgkbhtytsz 130\ntwflegsjz 467\ndswxxrxuzzfhkp 989\nszfwtzfpnscgue 958\npmuduhznoaqu\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6348\n</pre></section>\n</div>\n</span>", "p02807": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>There are <var>N</var> slimes standing on a number line.\nThe <var>i</var>-th slime from the left is at position <var>x_i</var>.</p>\n<p>It is guaruanteed that <var>1 \\leq x_1 &lt; x_2 &lt; \\ldots &lt; x_N \\leq 10^{9}</var>.</p>\n<p>Niwango will perform <var>N-1</var> operations. The <var>i</var>-th operation consists of the following procedures:</p>\n<ul>\n<li>Choose an integer <var>k</var> between <var>1</var> and <var>N-i</var> (inclusive) with equal probability.</li>\n<li>Move the <var>k</var>-th slime from the left, to the position of the neighboring slime to the right.</li>\n<li>Fuse the two slimes at the same position into one slime.</li>\n</ul>\n<p>Find the total distance traveled by the slimes multiplied by <var>(N-1)!</var> (we can show that this value is an integer), modulo <var>(10^{9}+7)</var>. If a slime is born by a fuse and that slime moves, we count it as just one slime.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>2 \\leq N \\leq 10^{5}</var></li>\n<li><var>1 \\leq x_1 &lt; x_2 &lt; \\ldots &lt; x_N \\leq 10^{9}</var></li>\n<li><var>x_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Subtasks</h3>\n<ul>\n<li><var>400</var> points will be awarded for passing the test cases satisfying <var>N \\leq 2000</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>x_2</var> <var>\\ldots</var> <var>x_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<ul>\n<li>With probability <var>\\frac{1}{2}</var>, the leftmost slime is chosen in the first operation, in which case the total distance traveled is <var>2</var>.</li>\n<li>With probability <var>\\frac{1}{2}</var>, the middle slime is chosen in the first operation, in which case the total distance traveled is <var>3</var>.</li>\n<li>The answer is the expected total distance traveled, <var>2.5</var>, multiplied by <var>2!</var>, which is <var>5</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>12\n161735902 211047202 430302156 450968417 628894325 707723857 731963982 822804784 880895728 923078537 971407775 982631932\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>750927044\n</pre>\n<ul>\n<li>Find the expected value multiplied by <var>(N-1)!</var>, modulo <var>(10^9+7)</var>.</li>\n</ul></section>\n</div>\n</span>", "p02809": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Niwango has <var>N</var> cards, numbered <var>1,2,\\ldots,N</var>.\nHe will now arrange these cards in a row.</p>\n<p>Niwango wants to know if there is a way to arrange the cards while satisfying all the <var>N</var> conditions below.\nTo help him, determine whether such a way exists. If the answer is yes, also find the lexicographically smallest such arrangement.</p>\n<ul>\n<li>To the immediate right of Card <var>1</var> (if any) is NOT Card <var>a_1</var>.</li>\n<li>To the immediate right of Card <var>2</var> (if any) is NOT Card <var>a_2</var>.</li>\n<li><var>\\vdots</var></li>\n<li>To the immediate right of Card <var>N</var> (if any) is NOT Card <var>a_N</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>2 \\leq N \\leq 10^{5}</var></li>\n<li><var>1 \\leq a_i \\leq N</var></li>\n<li><var>a_i \\neq i</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>\\ldots</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If no arrangements satisfy the conditions, print <code>-1</code>. If such arrangements exist, print the lexicographically smallest such arrangement, in the following format:</p>\n<pre><var>b_1</var> <var>b_2</var> <var>\\ldots</var> <var>b_N</var>\n</pre>\n<p>Here, <var>b_i</var> represents the <var>i</var>-th card from the left.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 3 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 3 2 4\n</pre>\n<ul>\n<li>The arrangement <var>(1,2,3,4)</var> is lexicographically smaller than <var>(1,3,2,4)</var>, but is invalid, since it violates the condition \"to the immediate right of Card <var>1</var> is not Card <var>2</var>.\"</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<ul>\n<li>If no arrangements satisfy the conditions, print <code>-1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>13\n2 3 4 5 6 7 8 9 10 11 12 13 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1 3 2 4 6 5 7 9 8 10 12 11 13\n</pre></section>\n</div>\n</span>", "p02808": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>There are <var>N</var> children, numbered <var>1,2,\\ldots,N</var>.\nIn the next <var>K</var> days, we will give them some cookies.\nIn the <var>i</var>-th day, we will choose <var>a_i</var> children among the <var>N</var> with equal probability, and give one cookie to each child chosen. (We make these <var>K</var> choices independently.)</p>\n<p>Let us define the <em>happiness</em> of the children as <var>c_1 \\times c_2 \\times \\ldots \\times c_N</var>, where <var>c_i</var> is the number of cookies received by Child <var>i</var> in the <var>K</var> days.\nFind the expected happiness multiplied by <var>\\binom{N}{a_1} \\times \\binom{N}{a_2} \\times \\ldots \\times \\binom{N}{a_K}</var> (we can show that this value is an integer), modulo <var>(10^{9}+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3>\n<p><var>\\binom{n}{k}</var> denotes the number of possible choices of <var>k</var> objects out of given distinct <var>n</var> objects, disregarding order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>1 \\leq K \\leq 20</var></li>\n<li><var>1 \\leq a_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>a_1</var> <var>a_2</var> <var>\\ldots</var> <var>a_K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<ul>\n<li>On the first day, all the children <var>1</var>, <var>2</var>, and <var>3</var> receive one cookie.</li>\n<li>On the second day, two out of the three children <var>1</var>, <var>2</var>, and <var>3</var> receive one cookie.</li>\n<li>Their happiness is <var>4</var> in any case, so the expected happiness is <var>4</var>. Print this value multiplied by <var>\\binom{3}{3} \\times \\binom{3}{2}</var>, which is <var>12</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>856 16\n399 263 665 432 206 61 784 548 422 313 848 478 827 26 398 63\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>337587117\n</pre>\n<ul>\n<li>Find the expected value multiplied by <var>\\binom{N}{a_1} \\times \\binom{N}{a_2} \\times \\ldots \\times \\binom{N}{a_K}</var>, modulo <var>(10^9+7)</var>.</li>\n</ul></section>\n</div>\n</span>", "p02810": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Niwango bought a piece of land that can be represented as a half-open interval <var>[0, X)</var>.</p>\n<p>Niwango will lay out <var>N</var> vinyl sheets on this land. The sheets are numbered <var>1,2, \\ldots, N</var>, and they are distinguishable.\nFor Sheet <var>i</var>, he can choose an integer <var>j</var> such that <var>0 \\leq j \\leq X - L_i</var> and cover <var>[j, j + L_i)</var> with this sheet.</p>\n<p>Find the number of ways to cover the land with the sheets such that no point in <var>[0, X)</var> remains uncovered, modulo <var>(10^9+7)</var>.\nWe consider two ways to cover the land different if and only if there is an integer <var>i</var> <var>(1 \\leq i \\leq N)</var> such that the region covered by Sheet <var>i</var> is different.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq L_i \\leq X \\leq 500</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var>\n<var>L_1</var> <var>L_2</var> <var>\\ldots</var> <var>L_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<ul>\n<li>If we ignore whether the whole interval is covered, there are <var>18</var> ways to lay out the sheets.</li>\n<li>Among them, there are <var>4</var> ways that leave <var>[0, 1)</var> uncovered, and <var>4</var> ways that leave <var>[2, 3)</var> uncovered.</li>\n<li>Each of the other ways covers the whole interval <var>[0,3)</var>, so the answer is <var>10</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>18 477\n324 31 27 227 9 21 41 29 50 34 2 362 92 11 13 17 183 119\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>134796357\n</pre>\n<ul>\n<li>Find the number of ways modulo <var>(10^9+7)</var>.</li>\n</ul></section>\n</div>\n</span>", "p02811": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has <var>K</var> <var>500</var>-yen coins. (Yen is the currency of Japan.)\nIf these coins add up to <var>X</var> yen or more, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 100</var></li>\n<li><var>1 \\leq X \\leq 10^5</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var> <var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the coins add up to <var>X</var> yen or more, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 900\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Two <var>500</var>-yen coins add up to <var>1000</var> yen, which is not less than <var>X = 900</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 501\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>One <var>500</var>-yen coin is worth <var>500</var> yen, which is less than <var>X = 501</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 2000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n<p>Four <var>500</var>-yen coins add up to <var>2000</var> yen, which is not less than <var>X = 2000</var> yen.</p></section>\n</div>\n</span>", "p02812": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a string <var>S</var> of length <var>N</var> consisting of uppercase English letters.</p>\n<p>How many times does <code>ABC</code> occur in <var>S</var> as contiguous subsequences (see Sample Inputs and Outputs)?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 50</var></li>\n<li><var>S</var> consists of uppercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print number of occurrences of <code>ABC</code> in <var>S</var> as contiguous subsequences.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10\nZABCDBABCQ\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Two contiguous subsequences of <var>S</var> are equal to <code>ABC</code>: the <var>2</var>-nd through <var>4</var>-th characters, and the <var>7</var>-th through <var>9</var>-th characters.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>19\nTHREEONEFOURONEFIVE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>No contiguous subsequences of <var>S</var> are equal to <code>ABC</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>33\nABCCABCBABCCABACBCBBABCBCBCBCABCB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p02814": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are a sequence <var>A= {a_1,a_2,......a_N}</var> of <var>N</var> positive even numbers, and an integer <var>M</var>.</p>\n<p>Let a <em>semi-common multiple</em> of <var>A</var> be a positive integer <var>X</var> that satisfies the following condition for every <var>k</var> <var>(1 \\leq k \\leq N)</var>:</p>\n<ul>\n<li>There exists a non-negative integer <var>p</var> such that <var>X= a_k \\times (p+0.5)</var>.</li>\n</ul>\n<p>Find the number of semi-common multiples of <var>A</var> among the integers between <var>1</var> and <var>M</var> (inclusive).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^9</var></li>\n<li><var>2 \\leq a_i \\leq 10^9</var></li>\n<li><var>a_i</var> is an even number.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of semi-common multiples of <var>A</var> among the integers between <var>1</var> and <var>M</var> (inclusive).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 50\n6 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<ul>\n<li><var>15 = 6  \\times 2.5 </var></li>\n<li><var>15 = 10 \\times 1.5 </var></li>\n<li><var>45 = 6  \\times 7.5 </var></li>\n<li><var>45 = 10 \\times 4.5 </var></li>\n</ul>\n<p>Thus, <var>15</var> and <var>45</var> are semi-common multiples of <var>A</var>. There are no other semi-common multiples of <var>A</var> between <var>1</var> and <var>50</var>, so the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 100\n14 22 40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>The answer can be <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 1000000000\n6 6 2 6 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>166666667\n</pre></section>\n</div>\n</span>", "p02813": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have two permutations <var>P</var> and <var>Q</var> of size <var>N</var> (that is, <var>P</var> and <var>Q</var> are both rearrangements of <var>(1,~2,~...,~N)</var>).</p>\n<p>There are <var>N!</var> possible permutations of size <var>N</var>. Among them, let <var>P</var> and <var>Q</var> be the <var>a</var>-th and <var>b</var>-th lexicographically smallest permutations, respectively. Find <var>|a - b|</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>For two sequences <var>X</var> and <var>Y</var>, <var>X</var> is said to be lexicographically smaller than <var>Y</var> if and only if there exists an integer <var>k</var> such that <var>X_i = Y_i~(1 \\leq i &lt; k)</var> and <var>X_k &lt; Y_k</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 8</var></li>\n<li><var>P</var> and <var>Q</var> are permutations of size <var>N</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_1</var> <var>P_2</var> <var>...</var> <var>P_N</var>\n<var>Q_1</var> <var>Q_2</var> <var>...</var> <var>Q_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>|a - b|</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 3 2\n3 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>There are <var>6</var> permutations of size <var>3</var>: <var>(1,~2,~3)</var>, <var>(1,~3,~2)</var>, <var>(2,~1,~3)</var>, <var>(2,~3,~1)</var>, <var>(3,~1,~2)</var>, and <var>(3,~2,~1)</var>. Among them, <var>(1,~3,~2)</var> and <var>(3,~1,~2)</var> come <var>2</var>-nd and <var>5</var>-th in lexicographical order, so the answer is <var>|2 - 5| = 3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8\n7 3 5 4 2 1 6 8\n3 8 2 5 4 6 7 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>17517\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n1 2 3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02815": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For two sequences <var>S</var> and <var>T</var> of length <var>N</var> consisting of <var>0</var> and <var>1</var>, let us define <var>f(S, T)</var> as follows:</p>\n<ul>\n<li>\n<p>Consider repeating the following operation on <var>S</var> so that <var>S</var> will be equal to <var>T</var>. <var>f(S, T)</var> is the minimum possible total cost of those operations.</p>\n<ul>\n<li>Change <var>S_i</var> (from <var>0</var> to <var>1</var> or vice versa). The cost of this operation is <var>D \\times C_i</var>, where <var>D</var> is the number of integers <var>j</var> such that <var>S_j \\neq T_j (1 \\leq j \\leq N)</var> just before this change.</li>\n</ul>\n</li>\n</ul>\n<p>There are <var>2^N \\times (2^N - 1)</var> pairs <var>(S, T)</var> of different sequences of length <var>N</var> consisting of <var>0</var> and <var>1</var>. Compute the sum of <var>f(S, T)</var> over all of those pairs, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq C_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>C_1</var> <var>C_2</var> <var>\\cdots</var> <var>C_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of <var>f(S, T)</var>, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>999999993\n</pre>\n<p>There are two pairs <var>(S, T)</var> of different sequences of length <var>2</var> consisting of <var>0</var> and <var>1</var>, as follows:</p>\n<ul>\n<li><var>S = (0), T = (1):</var> by changing <var>S_1</var> to <var>1</var>, we can have <var>S = T</var> at the cost of <var>1000000000</var>, so <var>f(S, T) = 1000000000</var>.</li>\n<li><var>S = (1), T = (0):</var> by changing <var>S_1</var> to <var>0</var>, we can have <var>S = T</var> at the cost of <var>1000000000</var>, so <var>f(S, T) = 1000000000</var>.</li>\n</ul>\n<p>The sum of these is <var>2000000000</var>, and we should print it modulo <var>(10^9+7)</var>, that is, <var>999999993</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n5 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>124\n</pre>\n<p>There are <var>12</var> pairs <var>(S, T)</var> of different sequences of length <var>3</var> consisting of <var>0</var> and <var>1</var>, which include:</p>\n<ul>\n<li><var>S = (0, 1), T = (1, 0)</var></li>\n</ul>\n<p>In this case, if we first change <var>S_1</var> to <var>1</var> then change <var>S_2</var> to <var>0</var>, the total cost is <var>5 \\times 2 + 8 = 18</var>. We cannot have <var>S = T</var> at a smaller cost, so <var>f(S, T) = 18</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n52 67 72 25 79\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>269312\n</pre></section>\n</div>\n</span>", "p02816": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are two sequences <var>a=\\{a_0,\\ldots,a_{N-1}\\}</var> and <var>b=\\{b_0,\\ldots,b_{N-1}\\}</var> of <var>N</var> non-negative integers each.</p>\n<p>Snuke will choose an integer <var>k</var> such that <var>0 \\leq k &lt; N</var> and an integer <var>x</var> not less than <var>0</var>, to make a new sequence of length <var>N</var>, <var>a'=\\{a_0',\\ldots,a_{N-1}'\\}</var>, as follows:</p>\n<ul>\n<li><var>a_i'= a_{i+k \\mod N}\\ XOR \\ x</var></li>\n</ul>\n<p>Find all pairs <var>(k,x)</var> such that <var>a'</var> will be equal to <var>b</var>.</p>\n<details>\n<summary>What is <var>\\mbox{ XOR }</var>?</summary>\n<p>\nThe XOR of integers <var>A</var> and <var>B</var>, <var>A \\mbox{ XOR } B</var>, is defined as follows:\n<ul>\n<li>When <var>A \\mbox{ XOR } B</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if either <var>A</var> or <var>B</var>, but not both, has <var>1</var> in the <var>2^k</var>'s place, and <var>0</var> otherwise.</li>\n</ul>\nFor example, <var>3 \\mbox{ XOR } 5 = 6</var>. (In base two: <var>011 \\mbox{ XOR } 101 = 110</var>.)\n</p>\n</details>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq a_i,b_i &lt; 2^{30}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_0</var> <var>a_1</var> <var>...</var> <var>a_{N-1}</var>\n<var>b_0</var> <var>b_1</var> <var>...</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print all pairs <var>(k, x)</var> such that <var>a'</var> and <var>b</var> will be equal, using one line for each pair, in ascending order of <var>k</var> (ascending order of <var>x</var> for pairs with the same <var>k</var>).</p>\n<p>If there are no such pairs, the output should be empty.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n0 2 1\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 3\n</pre>\n<p>If <var>(k,x)=(1,3)</var>,</p>\n<ul>\n<li>\n<p><var>a_0'=(a_1\\ XOR \\ 3)=1</var></p>\n</li>\n<li>\n<p><var>a_1'=(a_2\\ XOR \\ 3)=2</var></p>\n</li>\n<li>\n<p><var>a_2'=(a_0\\ XOR \\ 3)=3</var></p>\n</li>\n</ul>\n<p>and we have <var>a' = b</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n0 0 0 0 0\n2 2 2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 2\n1 2\n2 2\n3 2\n4 2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n0 1 3 7 6 4\n1 5 4 6 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2 2\n5 5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>2\n1 2\n0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre></pre>\n<p>No pairs may satisfy the condition.</p></section>\n</div>\n</span>", "p02817": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are two strings <var>S</var> and <var>T</var> consisting of lowercase English letters. Concatenate <var>T</var> and <var>S</var> in this order, without space in between, and print the resulting string.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> and <var>T</var> are strings consisting of lowercase English letters.</li>\n<li>The lengths of <var>S</var> and <var>T</var> are between <var>1</var> and <var>100</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var> <var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the resulting string.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>oder atc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>atcoder\n</pre>\n<p>When <var>S = </var> <code>oder</code> and <var>T = </var> <code>atc</code>, concatenating <var>T</var> and <var>S</var> in this order results in <code>atcoder</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>humu humu\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>humuhumu\n</pre></section>\n</div>\n</span>", "p02818": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has <var>A</var> cookies, and Aoki has <var>B</var> cookies.\nTakahashi will do the following action <var>K</var> times:</p>\n<ul>\n<li>If Takahashi has one or more cookies, eat one of his cookies.</li>\n<li>Otherwise, if Aoki has one or more cookies, eat one of Aoki's cookies.</li>\n<li>If they both have no cookies, do nothing.</li>\n</ul>\n<p>In the end, how many cookies will Takahashi and Aoki have, respectively?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq A \\leq 10^{12}</var></li>\n<li><var>0 \\leq B \\leq 10^{12}</var></li>\n<li><var>0 \\leq K \\leq 10^{12}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the numbers of Takahashi's and Aoki's cookies after <var>K</var> actions.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0 2\n</pre>\n<p>Takahashi will do the following:</p>\n<ul>\n<li>He has two cookies, so he eats one of them.</li>\n<li>Now he has one cookie left, and he eats it.</li>\n<li>Now he has no cookies left, but Aoki has three, so Takahashi eats one of them.</li>\n</ul>\n<p>Thus, in the end, Takahashi will have <var>0</var> cookies, and Aoki will have <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>500000000000 500000000000 1000000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 0\n</pre>\n<p>Watch out for overflows.</p></section>\n</div>\n</span>", "p02819": "<span class=\"lang-en\">\n<p>Score: <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Find the minimum prime number greater than or equal to <var>X</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3>\n<p>A prime number is an integer greater than <var>1</var> that cannot be evenly divided by any positive integer except <var>1</var> and itself.</p>\n<p>For example, <var>2</var>, <var>3</var>, and <var>5</var> are prime numbers, while <var>4</var> and <var>6</var> are not.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var> 2 \\le X \\le 10^5 </var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the minimum prime number greater than or equal to <var>X</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>23\n</pre>\n<p>The minimum prime number greater than or equal to <var>20</var> is <var>23</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p><var>X</var> itself can be a prime number.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>99992\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100003\n</pre></section>\n</div>\n</span>", "p02820": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>At an arcade, Takahashi is playing a game called <em>RPS Battle</em>, which is played as follows:</p>\n<ul>\n<li>The player plays <var>N</var> rounds of Rock Paper Scissors against the machine. (See Notes for the description of Rock Paper Scissors. A draw also counts as a round.)</li>\n<li>Each time the player wins a round, depending on which hand he/she uses, he/she earns the following score (no points for a draw or a loss):<ul>\n<li><var>R</var> points for winning with Rock;</li>\n<li><var>S</var> points for winning with Scissors;</li>\n<li><var>P</var> points for winning with Paper.</li>\n</ul>\n</li>\n<li>However, in the <var>i</var>-th round, the player cannot use the hand he/she used in the <var>(i-K)</var>-th round. (In the first <var>K</var> rounds, the player can use any hand.)</li>\n</ul>\n<p>Before the start of the game, the machine decides the hand it will play in each round. With supernatural power, Takahashi managed to read all of those hands.</p>\n<p>The information Takahashi obtained is given as a string <var>T</var>. If the <var>i</var>-th character of <var>T</var> <var>(1 \\leq i \\leq N)</var> is <code>r</code>, the machine will play Rock in the <var>i</var>-th round. Similarly, <code>p</code> and <code>s</code> stand for Paper and Scissors, respectively.</p>\n<p>What is the maximum total score earned in the game by adequately choosing the hand to play in each round?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>In this problem, Rock Paper Scissors can be thought of as a two-player game, in which each player simultaneously forms Rock, Paper, or Scissors with a hand.</p>\n<ul>\n<li>If a player chooses Rock and the other chooses Scissors, the player choosing Rock wins;</li>\n<li>if a player chooses Scissors and the other chooses Paper, the player choosing Scissors wins;</li>\n<li>if a player chooses Paper and the other chooses Rock, the player choosing Paper wins;</li>\n<li>if both players play the same hand, it is a draw.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq K \\leq N-1</var></li>\n<li><var>1 \\leq R,S,P \\leq 10^4</var></li>\n<li><var>N,K,R,S,</var> and <var>P</var> are all integers.</li>\n<li><var>|T| = N</var></li>\n<li><var>T</var> consists of <code>r</code>, <code>p</code>, and <code>s</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>R</var> <var>S</var> <var>P</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum total score earned in the game.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2\n8 7 6\nrsrpr\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>27\n</pre>\n<p>The machine will play {Rock, Scissors, Rock, Paper, Rock}.</p>\n<p>We can, for example, play {Paper, Rock, Rock, Scissors, Paper} against it to earn <var>27</var> points.\nWe cannot earn more points, so the answer is <var>27</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 1\n100 10 1\nssssppr\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>211\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>30 5\n325 234 123\nrspsspspsrpspsppprpsprpssprpsr\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4996\n</pre></section>\n</div>\n</span>", "p02821": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has come to a party as a special guest.\nThere are <var>N</var> ordinary guests at the party. The <var>i</var>-th ordinary guest has a <em>power</em> of <var>A_i</var>.</p>\n<p>Takahashi has decided to perform <var>M</var> <em>handshakes</em> to increase the <em>happiness</em> of the party (let the current happiness be <var>0</var>).\nA handshake will be performed as follows:</p>\n<ul>\n<li>Takahashi chooses one (ordinary) guest <var>x</var> for his left hand and another guest <var>y</var> for his right hand (<var>x</var> and <var>y</var> can be the same).</li>\n<li>Then, he shakes the left hand of Guest <var>x</var> and the right hand of Guest <var>y</var> simultaneously to increase the happiness by <var>A_x+A_y</var>.</li>\n</ul>\n<p>However, Takahashi should not perform the same handshake more than once. Formally, the following condition must hold:</p>\n<ul>\n<li>Assume that, in the <var>k</var>-th handshake, Takahashi shakes the left hand of Guest <var>x_k</var> and the right hand of Guest <var>y_k</var>. Then, there is no pair <var>p, q</var> <var>(1 \\leq p &lt; q \\leq M)</var> such that <var>(x_p,y_p)=(x_q,y_q)</var>.</li>\n</ul>\n<p>What is the maximum possible happiness after <var>M</var> handshakes?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq N^2</var></li>\n<li><var>1 \\leq A_i \\leq 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible happiness after <var>M</var> handshakes.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n10 14 19 34 33\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>202\n</pre>\n<p>Let us say that Takahashi performs the following handshakes:</p>\n<ul>\n<li>In the first handshake, Takahashi shakes the left hand of Guest <var>4</var> and the right hand of Guest <var>4</var>.</li>\n<li>In the second handshake, Takahashi shakes the left hand of Guest <var>4</var> and the right hand of Guest <var>5</var>.</li>\n<li>In the third handshake, Takahashi shakes the left hand of Guest <var>5</var> and the right hand of Guest <var>4</var>.</li>\n</ul>\n<p>Then, we will have the happiness of <var>(34+34)+(34+33)+(33+34)=202</var>.</p>\n<p>We cannot achieve the happiness of <var>203</var> or greater, so the answer is <var>202</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9 14\n1 3 5 110 24 21 34 5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1837\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9 73\n67597 52981 5828 66249 75177 64141 40773 79105 16076\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8128170\n</pre></section>\n</div>\n</span>", "p02822": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a tree <var>T</var> with <var>N</var> vertices. The <var>i</var>-th edge connects Vertex <var>A_i</var> and <var>B_i</var> (<var>1 \\leq A_i,B_i \\leq N</var>).</p>\n<p>Now, each vertex is painted black with probability <var>1/2</var> and white with probability <var>1/2</var>, which is chosen independently from other vertices. Then, let <var>S</var> be the smallest subtree (connected subgraph) of <var>T</var> containing all the vertices painted black. (If no vertex is painted black, <var>S</var> is the empty graph.)</p>\n<p>Let the <em>holeyness</em> of <var>S</var> be the number of white vertices contained in <var>S</var>. Find the expected holeyness of <var>S</var>.</p>\n<p>Since the answer is a rational number, we ask you to print it <var>\\bmod 10^9+7</var>, as described in Notes.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>When you print a rational number, first write it as a fraction <var>\\frac{y}{x}</var>, where <var>x, y</var> are integers, and <var>x</var> is not divisible by <var>10^9 + 7</var>\n(under the constraints of the problem, such representation is always possible).</p>\n<p>Then, you need to print the only integer <var>z</var> between <var>0</var> and <var>10^9 + 6</var>, inclusive, that satisfies <var>xz \\equiv y \\pmod{10^9 + 7}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i,B_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_{N-1}</var> <var>B_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the expected holeyness of <var>S</var>, <var>\\bmod 10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>125000001\n</pre>\n<p>If the vertices <var>1, 2, 3</var> are painted black, white, black, respectively, the holeyness of <var>S</var> is <var>1</var>.</p>\n<p>Otherwise, the holeyness is <var>0</var>, so the expected holeyness is <var>1/8</var>.</p>\n<p>Since <var>8 \\times 125000001 \\equiv 1 \\pmod{10^9+7}</var>, we should print <var>125000001</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2\n2 3\n3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>375000003\n</pre>\n<p>The expected holeyness is <var>3/8</var>.</p>\n<p>Since <var>8 \\times 375000003 \\equiv 3 \\pmod{10^9+7}</var>, we should print <var>375000003</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n1 2\n1 3\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>250000002\n</pre>\n<p>The expected holeyness is <var>1/4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7\n4 7\n3 1\n2 6\n5 2\n7 1\n2 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>570312505\n</pre></section>\n</div>\n</span>", "p02823": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>2N</var> players are running a competitive table tennis training on <var>N</var> tables numbered from <var>1</var> to <var>N</var>.</p>\n<p>The training consists of <i>rounds</i>.\nIn each round, the players form <var>N</var> pairs, one pair per table.\nIn each pair, competitors play a match against each other.\nAs a result, one of them wins and the other one loses.</p>\n<p>The winner of the match on table <var>X</var> plays on table <var>X-1</var> in the next round,\nexcept for the winner of the match on table <var>1</var> who stays at table <var>1</var>.</p>\n<p>Similarly, the loser of the match on table <var>X</var> plays on table <var>X+1</var> in the next round,\nexcept for the loser of the match on table <var>N</var> who stays at table <var>N</var>.</p>\n<p>Two friends are playing their first round matches on distinct tables <var>A</var> and <var>B</var>.\nLet's assume that the friends are strong enough to win or lose any match at will.\nWhat is the smallest number of rounds after which the friends can get to play a match against each other?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^{18}</var></li>\n<li><var>1 \\leq A &lt; B \\leq N</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the smallest number of rounds after which the friends can get to play a match against each other.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>If the first friend loses their match and the second friend wins their match, they will both move to table <var>3</var> and play each other in the next round.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p>If both friends win two matches in a row, they will both move to table <var>1</var>.</p></section>\n</div>\n</span>", "p02824": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> problems are proposed for an upcoming contest. Problem <var>i</var> has an initial integer score of <var>A_i</var> points.</p>\n<p><var>M</var> judges are about to vote for problems they like. Each judge will choose exactly <var>V</var> problems, independently from the other judges,\nand increase the score of each chosen problem by <var>1</var>.</p>\n<p>After all <var>M</var> judges cast their vote, the problems will be sorted in non-increasing order of score, and the first <var>P</var> problems will be chosen for the problemset.\nProblems with the same score can be ordered arbitrarily, this order is decided by the chief judge.</p>\n<p>How many problems out of the given <var>N</var> have a chance to be chosen for the problemset?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\le N \\le 10^5</var></li>\n<li><var>1 \\le M \\le 10^9</var></li>\n<li><var>1 \\le V \\le N - 1</var></li>\n<li><var>1 \\le P \\le N - 1</var></li>\n<li><var>0 \\le A_i \\le 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>V</var> <var>P</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of problems that have a chance to be chosen for the problemset.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 1 2 2\n2 1 1 3 0 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>If the only judge votes for problems <var>2</var> and <var>5</var>, the scores will be <var>2</var> <var>2</var> <var>1</var> <var>3</var> <var>1</var> <var>2</var>.\nThe problemset will consist of problem <var>4</var> and one of problems <var>1</var>, <var>2</var>, or <var>6</var>.</p>\n<p>If the only judge votes for problems <var>3</var> and <var>4</var>, the scores will be <var>2</var> <var>1</var> <var>2</var> <var>4</var> <var>0</var> <var>2</var>.\nThe problemset will consist of problem <var>4</var> and one of problems <var>1</var>, <var>3</var>, or <var>6</var>.</p>\n<p>Thus, problems <var>1</var>, <var>2</var>, <var>3</var>, <var>4</var>, and <var>6</var> have a chance to be chosen for the problemset. On the contrary, there is no way for problem <var>5</var> to be chosen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 1 5 2\n2 1 1 3 0 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>Only problems <var>1</var>, <var>4</var>, and <var>6</var> have a chance to be chosen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 4 8 5\n7 2 3 6 1 6 5 4 6 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p02825": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let us consider a grid of squares with <var>N</var> rows and <var>N</var> columns. You want to put some domino pieces on this grid.\nEach domino piece covers two squares that have a common side. Each square can be covered by at most one piece.</p>\n<p>For each row of the grid, let's define its quality as the number of domino pieces that cover at least one square in this row.\nWe define the quality of each column similarly.</p>\n<p>Find a way to put at least one domino piece on the grid so that the quality of every row is equal to the quality of every column,\nor determine that such a placement doesn't exist.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\le N \\le 1000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the required domino placement doesn't exist, print a single integer <code>-1</code>.</p>\n<p>Otherwise, output your placement as <var>N</var> strings of <var>N</var> characters each.\nIf a square is not covered, the corresponding character must be <code>.</code> (a dot).\nOtherwise, it must contain a lowercase English letter.\nSquares covered by the same domino piece must contain the same letter.\nIf two squares have a common side but belong to different pieces, they must contain different letters.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>aabb..\nb..zz.\nba....\n.a..aa\n..a..b\n..a..b\n</pre>\n<p>The quality of every row and every column is 2.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p02826": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> problems have been chosen by the judges, now it's time to assign scores to them!</p>\n<p>Problem <var>i</var> must get an integer score <var>A_i</var> between <var>1</var> and <var>N</var>, inclusive.\nThe problems have already been sorted by difficulty: <var>A_1 \\le A_2 \\le \\ldots \\le A_N</var> must hold.\nDifferent problems can have the same score, though.</p>\n<p>Being an ICPC fan, you want contestants who solve more problems to be ranked higher.\nThat's why, for any <var>k</var> (<var>1 \\le k \\le N-1</var>), you want the sum of scores of any <var>k</var> problems to be strictly less than the sum of scores of any <var>k+1</var> problems.</p>\n<p>How many ways to assign scores do you have? Find this number modulo the given prime <var>M</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 5000</var></li>\n<li><var>9 \\times 10^8 &lt; M &lt; 10^9</var></li>\n<li><var>M</var> is a prime.</li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to assign scores to the problems, modulo <var>M</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The possible assignments are <var>(1, 1)</var>, <var>(1, 2)</var>, <var>(2, 2)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n<p>The possible assignments are <var>(1, 1, 1)</var>, <var>(1, 2, 2)</var>, <var>(1, 3, 3)</var>, <var>(2, 2, 2)</var>, <var>(2, 2, 3)</var>, <var>(2, 3, 3)</var>, <var>(3, 3, 3)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 966666661\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>66\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>96 925309799\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>83779\n</pre></section>\n</div>\n</span>", "p02828": "<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let us consider a grid of squares with <var>N</var> rows and <var>N</var> columns.\nArbok has cut out some part of the grid so that, for each <var>i = 1, 2, \\ldots, N</var>, the bottommost <var>h_i</var> squares are remaining in the <var>i</var>-th column from the left.\nNow, he wants to place rooks into some of the remaining squares.</p>\n<p>A rook is a chess piece that occupies one square and can move horizontally or vertically, through any number of unoccupied squares.\nA rook can not move through squares that have been cut out by Arbok.</p>\n<p>Let's say that a square is covered if it either contains a rook, or a rook can be moved to this square in one move.</p>\n<p>Find the number of ways to place rooks into some of the remaining squares so that every remaining square is covered, modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 400</var></li>\n<li><var>1 \\leq h_i \\leq N</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>h_1</var> <var>h_2</var> <var>...</var> <var>h_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to place rooks into some of the remaining squares so that every remaining square is covered, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11\n</pre>\n<p>Any placement with at least two rooks is fine. There are <var>11</var> such placements.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>17\n</pre>\n<p>The following <var>17</var> rook placements satisfy the conditions (<code>R</code> denotes a rook, <code>*</code> denotes an empty square):</p>\n<pre>R *     * R     * *     R R     R R     R R     \n**R     R**     R*R     R**     *R*     **R     \n\n\nR *     R *     * R     * R     * *     R R     \nR*R     *RR     RR*     R*R     RRR     RR*     \n\n\nR R     R R     R *     * R     R R     \nR*R     *RR     RRR     RRR     RRR     \n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n1 2 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>201\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10\n4 7 4 8 4 6 8 2 3 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>263244071\n</pre></section>\n</div>\n</span>", "p02829": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi is solving quizzes. He has easily solved all but the last one.</p>\n<p>The last quiz has three choices: <var>1</var>, <var>2</var>, and <var>3</var>.</p>\n<p>With his supernatural power, Takahashi has found out that the choices <var>A</var> and <var>B</var> are both wrong.</p>\n<p>Print the correct choice for this problem.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>Each of the numbers <var>A</var> and <var>B</var> is <var>1</var>, <var>2</var>, or <var>3</var>.</li>\n<li><var>A</var> and <var>B</var> are different.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var>\n<var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the correct choice.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>When we know <var>3</var> and <var>1</var> are both wrong, the correct choice is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02830": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are strings <var>s</var> and <var>t</var> of length <var>N</var> each, both consisting of lowercase English letters.</p>\n<p>Let us form a new string by alternating the characters of <var>S</var> and the characters of <var>T</var>, as follows: the first character of <var>S</var>, the first character of <var>T</var>, the second character of <var>S</var>, the second character of <var>T</var>, <var>...</var>, the <var>N</var>-th character of <var>S</var>, the <var>N</var>-th character of <var>T</var>. Print this new string.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>|S| = |T| = N</var></li>\n<li><var>S</var> and <var>T</var> are strings consisting of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var> <var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the string formed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\nip cc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>icpc\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8\nhmhmnknk uuuuuuuu\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>humuhumunukunuku\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\naaaaa aaaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>aaaaaaaaaa\n</pre></section>\n</div>\n</span>", "p02831": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi is organizing a party.</p>\n<p>At the party, each guest will receive one or more snack pieces.</p>\n<p>Takahashi predicts that the number of guests at this party will be <var>A</var> or <var>B</var>.</p>\n<p>Find the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.</p>\n<p>We assume that a piece cannot be divided and distributed to multiple guests.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq A, B \\leq 10^5</var></li>\n<li><var>A \\neq B</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the minimum number of pieces that can be evenly distributed to the guests in both of the cases with <var>A</var> guests and <var>B</var> guests.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>When we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>123 456\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>18696\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100000 99999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>9999900000\n</pre></section>\n</div>\n</span>", "p02832": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> bricks arranged in a row from left to right.</p>\n<p>The <var>i</var>-th brick from the left <var>(1 \\leq i \\leq N)</var> has an integer <var>a_i</var> written on it.</p>\n<p>Among them, you can break at most <var>N-1</var> bricks of your choice.</p>\n<p>Let us say there are <var>K</var> bricks remaining. Snuke will be satisfied if, for each integer <var>i</var> <var>(1 \\leq i \\leq K)</var>, the <var>i</var>-th of those brick from the left has the integer <var>i</var> written on it.</p>\n<p>Find the minimum number of bricks you need to break to satisfy Snuke's desire. If his desire is unsatisfiable, print <code>-1</code> instead.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 200000</var></li>\n<li><var>1 \\leq a_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of bricks that need to be broken to satisfy Snuke's desire, or print <code>-1</code> if his desire is unsatisfiable.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>If we break the leftmost brick, the remaining bricks have integers <var>1</var> and <var>2</var> written on them from left to right, in which case Snuke will be satisfied.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>In this case, there is no way to break some of the bricks to satisfy Snuke's desire.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n3 1 4 1 5 9 2 6 5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0\n</pre>\n<p>There may be no need to break the bricks at all.</p></section>\n</div>\n</span>", "p02834": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a tree with <var>N</var> vertices. The <var>i</var>-th edge connects Vertex <var>A_i</var> and <var>B_i</var> bidirectionally.</p>\n<p>Takahashi is standing at Vertex <var>u</var>, and Aoki is standing at Vertex <var>v</var>.</p>\n<p>Now, they will play a game of tag as follows:</p>\n<ul>\n<li>\n<p><var>1</var>. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Takahashi moves to a vertex of his choice that is adjacent to his current vertex.</p>\n</li>\n<li>\n<p><var>2</var>. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Aoki moves to a vertex of his choice that is adjacent to his current vertex.</p>\n</li>\n<li>\n<p><var>3</var>. Go back to step <var>1</var>.</p>\n</li>\n</ul>\n<p>Takahashi performs his moves so that the game ends as late as possible, while Aoki performs his moves so that the game ends as early as possible.</p>\n<p>Find the number of moves Aoki will perform before the end of the game if both Takahashi and Aoki know each other's position and strategy.</p>\n<p>It can be proved that the game is bound to end.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq u,v \\leq N</var></li>\n<li><var>u \\neq v</var></li>\n<li><var>1 \\leq A_i,B_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>u</var> <var>v</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_{N-1}</var> <var>B_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of moves Aoki will perform before the end of the game.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 4 1\n1 2\n2 3\n3 4\n3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If both players play optimally, the game will progress as follows:</p>\n<ul>\n<li>Takahashi moves to Vertex <var>3</var>.</li>\n<li>Aoki moves to Vertex <var>2</var>.</li>\n<li>Takahashi moves to Vertex <var>5</var>.</li>\n<li>Aoki moves to Vertex <var>3</var>.</li>\n<li>Takahashi moves to Vertex <var>3</var>.</li>\n</ul>\n<p>Here, Aoki performs two moves.</p>\n<p>Note that, in each move, it is prohibited to stay at the current vertex.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 4 5\n1 2\n1 3\n1 4\n1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 1 2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>9 6 1\n1 2\n2 3\n3 4\n4 5\n5 6\n4 7\n7 8\n8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n</pre></section>\n</div>\n</span>", "p02835": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are three integers <var>A_1</var>, <var>A_2</var>, and <var>A_3</var>.</p>\n<p>If <var>A_1+A_2+A_3</var> is greater than or equal to <var>22</var>, print <code>bust</code>; otherwise, print <code>win</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A_1</var> <var>A_2</var> <var>A_3</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>A_1+A_2+A_3</var> is greater than or equal to <var>22</var>, print <code>bust</code>; otherwise, print <code>win</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 7 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>win\n</pre>\n<p><var>5+7+9=21</var>, so print <code>win</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>13 7 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>bust\n</pre>\n<p><var>13+7+2=22</var>, so print <code>bust</code>.</p></section>\n</div>\n</span>", "p02836": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.</p>\n<p>Given is a string <var>S</var>. Find the minimum number of hugs needed to make <var>S</var> palindromic.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>S</var> is a string consisting of lowercase English letters.</li>\n<li>The length of <var>S</var> is between <var>1</var> and <var>100</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the minimum number of hugs needed to make <var>S</var> palindromic.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>redcoder\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>For example, we can change the fourth character to <code>o</code> and get a palindrome <code>redooder</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>vvvvvv\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>We might need no hugs at all.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>abcdabc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre></section>\n</div>\n</span>", "p02837": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> people numbered <var>1</var> to <var>N</var>. Each of them is either an <em>honest</em> person whose testimonies are always correct or an <em>unkind</em> person whose testimonies may be correct or not.</p>\n<p>Person <var>i</var> gives <var>A_i</var> testimonies. The <var>j</var>-th testimony by Person <var>i</var> is represented by two integers <var>x_{ij}</var> and <var>y_{ij}</var>. If <var>y_{ij} = 1</var>, the testimony says Person <var>x_{ij}</var> is honest; if <var>y_{ij} = 0</var>, it says Person <var>x_{ij}</var> is unkind.</p>\n<p>How many honest persons can be among those <var>N</var> people at most?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 15</var></li>\n<li><var>0 \\leq A_i \\leq N - 1</var></li>\n<li><var>1 \\leq x_{ij} \\leq N</var></li>\n<li><var>x_{ij} \\neq i</var></li>\n<li><var>x_{ij_1} \\neq x_{ij_2} (j_1 \\neq j_2)</var></li>\n<li><var>y_{ij} = 0, 1</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var>\n<var>x_{11}</var> <var>y_{11}</var>\n<var>x_{12}</var> <var>y_{12}</var>\n<var>:</var>\n<var>x_{1A_1}</var> <var>y_{1A_1}</var>\n<var>A_2</var>\n<var>x_{21}</var> <var>y_{21}</var>\n<var>x_{22}</var> <var>y_{22}</var>\n<var>:</var>\n<var>x_{2A_2}</var> <var>y_{2A_2}</var>\n<var>:</var>\n<var>A_N</var>\n<var>x_{N1}</var> <var>y_{N1}</var>\n<var>x_{N2}</var> <var>y_{N2}</var>\n<var>:</var>\n<var>x_{NA_N}</var> <var>y_{NA_N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of honest persons among the <var>N</var> people.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1\n2 1\n1\n1 1\n1\n2 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If Person <var>1</var> and Person <var>2</var> are honest and Person <var>3</var> is unkind, we have two honest persons without inconsistencies, which is the maximum possible number of honest persons.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n2\n2 1\n3 0\n2\n3 1\n1 0\n2\n1 1\n2 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Assuming that one or more of them are honest immediately leads to a contradiction.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1\n2 0\n1\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre></section>\n</div>\n</span>", "p02838": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> integers. The <var>i</var>-th integer is <var>A_i</var>.</p>\n<p>Find <var>\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j)</var>, modulo <var>(10^9+7)</var>.</p>\n<details>\n<summary>What is <var>\\mbox{ XOR }</var>?</summary>\n<p>\nThe XOR of integers <var>A</var> and <var>B</var>, <var>A \\mbox{ XOR } B</var>, is defined as follows:\n<ul>\n<li>When <var>A \\mbox{ XOR } B</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if either <var>A</var> or <var>B</var>, but not both, has <var>1</var> in the <var>2^k</var>'s place, and <var>0</var> otherwise.</li>\n</ul>\nFor example, <var>3 \\mbox{ XOR } 5 = 6</var>. (In base two: <var>011 \\mbox{ XOR } 101 = 110</var>.)\n</p>\n</details>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 3 \\times 10^5</var></li>\n<li><var>0 \\leq A_i &lt; 2^{60}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value <var>\\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j)</var>, modulo <var>(10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>We have <var>(1\\mbox{ XOR } 2)+(1\\mbox{ XOR } 3)+(2\\mbox{ XOR } 3)=3+2+1=6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n3 1 4 1 5 9 2 6 5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>237\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n3 14 159 2653 58979 323846 2643383 27950288 419716939 9375105820\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>103715602\n</pre>\n<p>Print the sum modulo <var>(10^9+7)</var>.</p></section>\n</div>\n</span>", "p02840": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have an integer sequence <var>A</var> of length <var>N</var>, where <var>A_1 = X, A_{i+1} = A_i + D (1 \\leq  i &lt; N )</var> holds.</p>\n<p>Takahashi will take some (possibly all or none) of the elements in this sequence, and Aoki will take all of the others.</p>\n<p>Let <var>S</var> and <var>T</var> be the sum of the numbers taken by Takahashi and Aoki, respectively. How many possible values of <var>S - T</var> are there?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>-10^8 \\leq X, D \\leq 10^8</var></li>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible values of <var>S - T</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p><var>A</var> is <var>(4, 6, 8)</var>.</p>\n<p>There are eight ways for (Takahashi, Aoki) to take the elements: <var>((), (4, 6, 8)), ((4), (6, 8)), ((6), (4, 8)), ((8), (4, 6))), ((4, 6), (8))), ((4, 8), (6))), ((6, 8), (4)))</var>, and <var>((4, 6, 8), ())</var>.</p>\n<p>The values of <var>S - T</var> in these ways are <var>-18, -10, -6, -2, 2, 6, 10</var>, and <var>18</var>, respectively, so there are eight possible values of <var>S - T</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3 -3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p><var>A</var> is <var>(3, 0)</var>. There are two possible values of <var>S - T</var>: <var>-3</var> and <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 14 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>49805\n</pre></section>\n</div>\n</span>", "p02841": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>In this problem, a date is written as Y-M-D. For example, <var>2019</var>-<var>11</var>-<var>30</var> means November <var>30</var>, <var>2019</var>.</p>\n<p>Integers <var>M_1, D_1, M_2</var>, and <var>D_2</var> will be given as input.<br/>\nIt is known that the date <var>2019</var>-<var>M_2</var>-<var>D_2</var> follows <var>2019</var>-<var>M_1</var>-<var>D_1</var>.<br/>\nDetermine whether the date <var>2019</var>-<var>M_1</var>-<var>D_1</var> is the last day of a month.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>Both <var>2019</var>-<var>M_1</var>-<var>D_1</var> and <var>2019</var>-<var>M_2</var>-<var>D_2</var> are valid dates in the Gregorian calendar.</li>\n<li>The date <var>2019</var>-<var>M_2</var>-<var>D_2</var> follows <var>2019</var>-<var>M_1</var>-<var>D_1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>M_1</var> <var>D_1</var>\n<var>M_2</var> <var>D_2</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If the date <var>2019</var>-<var>M_1</var>-<var>D_1</var> is the last day of a month, print <code>1</code>; otherwise, print <code>0</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>11 16\n11 17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n</pre>\n<p>November <var>16</var> is not the last day of a month.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>11 30\n12 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>November <var>30</var> is the last day of November.</p></section>\n</div>\n</span>", "p02842": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi bought a piece of apple pie at ABC Confiserie. According to his memory, he paid <var>N</var> yen (the currency of Japan) for it.</p>\n<p>The consumption tax rate for foods in this shop is <var>8</var> percent. That is, to buy an apple pie priced at <var>X</var> yen before tax, you have to pay <var>X \\times 1.08</var> yen (rounded down to the nearest integer).</p>\n<p>Takahashi forgot the price of his apple pie before tax, <var>X</var>, and wants to know it again. Write a program that takes <var>N</var> as input and finds <var>X</var>. We assume <var>X</var> is an integer.</p>\n<p>If there are multiple possible values for <var>X</var>, find any one of them. Also, Takahashi's memory of <var>N</var>, the amount he paid, may be incorrect. If no value could be <var>X</var>, report that fact.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 50000</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If there are values that could be <var>X</var>, the price of the apple pie before tax, print any one of them.<br/>\nIf there are multiple such values, printing any one of them will be accepted.<br/>\nIf no value could be <var>X</var>, print <code>:(</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>432\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>400\n</pre>\n<p>If the apple pie is priced at <var>400</var> yen before tax, you have to pay <var>400 \\times 1.08 = 432</var> yen to buy one.<br/>\nOtherwise, the amount you have to pay will not be <var>432</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1079\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>:(\n</pre>\n<p>There is no possible price before tax for which you have to pay <var>1079</var> yen with tax.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>927\n</pre>\n<p>If the apple pie is priced <var>927</var> yen before tax, by rounding down <var>927 \\times 1.08 = 1001.16</var>, you have to pay <var>1001</var> yen.</p></section>\n</div>\n</span>", "p02843": "<span class=\"lang-en\">\n<p>Score: <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>AtCoder Mart sells <var>1000000</var> of each of the six items below:</p>\n<ul>\n<li>Riceballs, priced at <var>100</var> yen (the currency of Japan) each</li>\n<li>Sandwiches, priced at <var>101</var> yen each</li>\n<li>Cookies, priced at <var>102</var> yen each</li>\n<li>Cakes, priced at <var>103</var> yen each</li>\n<li>Candies, priced at <var>104</var> yen each</li>\n<li>Computers, priced at <var>105</var> yen each</li>\n</ul>\n<p>Takahashi wants to buy some of them that cost exactly <var>X</var> yen in total.\nDetermine whether this is possible.<br/>\n(Ignore consumption tax.)</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq X \\leq 100000</var></li>\n<li><var>X</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If it is possible to buy some set of items that cost exactly <var>X</var> yen in total, print <code>1</code>; otherwise, print <code>0</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>615\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>For example, we can buy one of each kind of item, which will cost <var>100+101+102+103+104+105=615</var> yen in total.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>217\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>No set of items costs <var>217</var> yen in total.</p></section>\n</div>\n</span>", "p02844": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>AtCoder Inc. has decided to lock the door of its office with a <var>3</var>-digit PIN code.</p>\n<p>The company has an <var>N</var>-digit lucky number, <var>S</var>. Takahashi, the president, will erase <var>N-3</var> digits from <var>S</var> and concatenate the remaining <var>3</var> digits without changing the order to set the PIN code.</p>\n<p>How many different PIN codes can he set this way?</p>\n<p>Both the lucky number and the PIN code may begin with a <var>0</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>4 \\leq N \\leq 30000</var></li>\n<li><var>S</var> is a string of length <var>N</var> consisting of digits.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of different PIN codes Takahashi can set.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n0224\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>Takahashi has the following options:</p>\n<ul>\n<li>Erase the first digit of <var>S</var> and set <code>224</code>.</li>\n<li>Erase the second digit of <var>S</var> and set <code>024</code>.</li>\n<li>Erase the third digit of <var>S</var> and set <code>024</code>.</li>\n<li>Erase the fourth digit of <var>S</var> and set <code>022</code>.</li>\n</ul>\n<p>Thus, he can set three different PIN codes: <code>022</code>, <code>024</code>, and <code>224</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n123123\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>17\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>19\n3141592653589793238\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>329\n</pre></section>\n</div>\n</span>", "p02846": "<span class=\"lang-en\">\n<p>Score: <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi and Aoki are training for long-distance races in an infinitely long straight course running from west to east.</p>\n<p>They start simultaneously at the same point and moves as follows <strong>towards the east</strong>:</p>\n<ul>\n<li>Takahashi runs <var>A_1</var> meters per minute for the first <var>T_1</var> minutes,  then runs at <var>A_2</var> meters per minute for the subsequent <var>T_2</var> minutes, and alternates between these two modes forever.</li>\n<li>Aoki runs <var>B_1</var> meters per minute for the first <var>T_1</var> minutes,  then runs at <var>B_2</var> meters per minute for the subsequent <var>T_2</var> minutes, and alternates between these two modes forever.</li>\n</ul>\n<p>How many times will Takahashi and Aoki meet each other, that is, come to the same point? We do not count the start of the run. If they meet infinitely many times, report that fact.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq T_i \\leq 100000</var></li>\n<li><var>1 \\leq A_i \\leq 10^{10}</var></li>\n<li><var>1 \\leq B_i \\leq 10^{10}</var></li>\n<li><var>A_1 \\neq B_1</var></li>\n<li><var>A_2 \\neq B_2</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>T_1</var> <var>T_2</var>\n<var>A_1</var> <var>A_2</var>\n<var>B_1</var> <var>B_2</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of times Takahashi and Aoki will meet each other.<br/>\nIf they meet infinitely many times, print <code>infinity</code> instead.  </p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2\n10 10\n12 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>They will meet just once, <var>\\frac{4}{3}</var> minutes after they start, at <var>\\frac{40}{3}</var> meters from where they start.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100 1\n101 101\n102 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>infinity\n</pre>\n<p>They will meet <var>101, 202, 303, 404, 505, 606, ...</var> minutes after they start, that is, they will meet infinitely many times.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>12000 15700\n3390000000 3810000000\n5550000000 2130000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>113\n</pre>\n<p>The values in input may not fit into a <var>32</var>-bit integer type.</p></section>\n</div>\n</span>", "p02845": "<span class=\"lang-en\">\n<p>Score: <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p><var>N</var> people are standing in a queue, numbered <var>1, 2, 3, ..., N</var> from front to back. Each person wears a hat, which is red, blue, or green.</p>\n<p>The person numbered <var>i</var> says:</p>\n<ul>\n<li>\"In front of me, exactly <var>A_i</var> people are wearing hats with the same color as mine.\"</li>\n</ul>\n<p>Assuming that all these statements are correct, find the number of possible combinations of colors of the <var>N</var> people's hats.</p>\n<p>Since the count can be enormous, compute it modulo <var>1000000007</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 100000</var></li>\n<li><var>0 \\leq A_i \\leq N-1</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>A_3</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of possible combinations of colors of the <var>N</var> people's hats, modulo <var>1000000007</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n0 1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>We have three possible combinations, as follows:</p>\n<ul>\n<li>Red, Red, Red, Red, Red, Red</li>\n<li>Blue, Blue, Blue, Blue, Blue, Blue</li>\n<li>Green, Green, Green, Green, Green, Green</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>54\n0 0 1 0 1 2 1 2 3 2 3 3 4 4 5 4 6 5 7 8 5 6 6 7 7 8 8 9 9 10 10 11 9 12 10 13 14 11 11 12 12 13 13 14 14 15 15 15 16 16 16 17 17 17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>115295190\n</pre></section>\n</div>\n</span>", "p02847": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var> representing the day of the week today.</p>\n<p><var>S</var> is <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>, for Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively.</p>\n<p>After how many days is the next Sunday (tomorrow or later)?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of days before the next Sunday.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>SAT\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>It is Saturday today, and tomorrow will be Sunday.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>SUN\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n<p>It is Sunday today, and seven days later, it will be Sunday again.</p></section>\n</div>\n</span>", "p02848": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a string <var>S</var> consisting of uppercase English letters. Additionally, an integer <var>N</var> will be given.</p>\n<p>Shift each character of <var>S</var> by <var>N</var> in alphabetical order (see below), and print the resulting string.</p>\n<p>We assume that <code>A</code> follows <code>Z</code>. For example, shifting <code>A</code> by <var>2</var> results in <code>C</code> (<code>A</code> <var>\\to</var> <code>B</code> <var>\\to</var> <code>C</code>), and shifting <code>Y</code> by <var>3</var> results in <code>B</code> (<code>Y</code> <var>\\to</var> <code>Z</code> <var>\\to</var> <code>A</code> <var>\\to</var> <code>B</code>).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq N \\leq 26</var></li>\n<li><var>1 \\leq |S| \\leq 10^4</var></li>\n<li><var>S</var> consists of uppercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the string resulting from shifting each character of <var>S</var> by <var>N</var> in alphabetical order.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\nABCXYZ\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>CDEZAB\n</pre>\n<p>Note that <code>A</code> follows <code>Z</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0\nABCXYZ\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>ABCXYZ\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>13\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NOPQRSTUVWXYZABCDEFGHIJKLM\n</pre></section>\n</div>\n</span>", "p02849": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has come to an integer shop to buy an integer.</p>\n<p>The shop sells the integers from <var>1</var> through <var>10^9</var>. The integer <var>N</var> is sold for <var>A \\times N + B \\times d(N)</var> yen (the currency of Japan), where <var>d(N)</var> is the number of digits in the decimal notation of <var>N</var>.</p>\n<p>Find the largest integer that Takahashi can buy when he has <var>X</var> yen. If no integer can be bought, print <var>0</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A \\leq 10^9</var></li>\n<li><var>1 \\leq B \\leq 10^9</var></li>\n<li><var>1 \\leq X \\leq 10^{18}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the greatest integer that Takahashi can buy. If no integer can be bought, print <var>0</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 7 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>The integer <var>9</var> is sold for <var>10 \\times 9 + 7 \\times 1 = 97</var> yen, and this is the greatest integer that can be bought.\nSome of the other integers are sold for the following prices:</p>\n<ul>\n<li><var>10: 10 \\times 10 + 7 \\times 2 = 114</var> yen</li>\n<li><var>100: 10 \\times 100 + 7 \\times 3 = 1021</var> yen</li>\n<li><var>12345: 10 \\times 12345 + 7 \\times 5 = 123485</var> yen</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 1 100000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1000000000\n</pre>\n<p>He can buy the largest integer that is sold. Note that input may not fit into a <var>32</var>-bit integer type.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1000000000 1000000000 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1234 56789 314159265\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>254309\n</pre></section>\n</div>\n</span>", "p02850": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Given is a tree <var>G</var> with <var>N</var> vertices.\nThe vertices are numbered <var>1</var> through <var>N</var>, and the <var>i</var>-th edge connects Vertex <var>a_i</var> and Vertex <var>b_i</var>.</p>\n<p>Consider painting the edges in <var>G</var> with some number of colors.\nWe want to paint them so that, for each vertex, the colors of the edges incident to that vertex are all different.</p>\n<p>Among the colorings satisfying the condition above, construct one that uses the minimum number of colors.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var> 2 \\le N \\le 10^5</var></li>\n<li><var> 1 \\le a_i \\lt b_i \\le N</var></li>\n<li>All values in input are integers.</li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>\\vdots</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print <var>N</var> lines.</p>\n<p>The first line should contain <var>K</var>, the number of colors used.</p>\n<p>The <var>(i+1)</var>-th line <var>(1 \\le i \\le N-1)</var> should contain <var>c_i</var>, the integer representing the color of the <var>i</var>-th edge, where <var>1 \\le c_i \\le K</var> must hold.</p>\n<p>If there are multiple colorings with the minimum number of colors that satisfy the condition, printing any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n1\n2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8\n1 2\n2 3\n2 4\n2 5\n4 7\n5 6\n6 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n1\n2\n3\n4\n1\n1\n2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n1 2\n1 3\n1 4\n1 5\n1 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n1\n2\n3\n4\n5\n</pre></section>\n</div>\n</span>", "p02851": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are a sequence of <var>N</var> positive integers <var>A_1, A_2, \\ldots, A_N</var>, and a positive integer <var>K</var>.</p>\n<p>Find the number of non-empty contiguous subsequences in <var>A</var> such that the remainder when dividing the sum of its elements by <var>K</var> is equal to the number of its elements. We consider two subsequences different if they are taken from different positions, even if they are equal sequences.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of subsequences that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 4\n1 4 2 3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Four sequences satisfy the condition: <var>(1)</var>, <var>(4,2)</var>, <var>(1,4,2)</var>, and <var>(5)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 4\n4 2 4 2 4 2 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n<p><var>(4,2)</var> is counted four times, and <var>(2,4)</var> is counted three times.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 7\n14 15 92 65 35 89 79 32 38 46\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p02852": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is playing a board game called Sugoroku.</p>\n<p>On the board, there are <var>N + 1</var> squares numbered <var>0</var> to <var>N</var>. Takahashi starts at Square <var>0</var>, and he has to stop exactly at Square <var>N</var> to win the game.</p>\n<p>The game uses a roulette with the <var>M</var> numbers from <var>1</var> to <var>M</var>. In each turn, Takahashi spins the roulette. If the number <var>x</var> comes up when he is at Square <var>s</var>, he moves to Square <var>s+x</var>. If this makes him go beyond Square <var>N</var>, he loses the game.</p>\n<p>Additionally, some of the squares are Game Over Squares. He also loses the game if he stops at one of those squares. You are given a string <var>S</var> of length <var>N + 1</var>, representing which squares are Game Over Squares. For each <var>i</var> <var>(0 \\leq i \\leq N)</var>, Square <var>i</var> is a Game Over Square if <var>S[i] = 1</var> and not if <var>S[i] = 0</var>.</p>\n<p>Find the sequence of numbers coming up in the roulette in which Takahashi can win the game in the fewest number of turns possible. If there are multiple such sequences, find the lexicographically smallest such sequence. If Takahashi cannot win the game, print <var>-1</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>|S| = N + 1</var></li>\n<li><var>S</var> consists of <code>0</code> and <code>1</code>.</li>\n<li><var>S[0] =</var> <code>0</code></li>\n<li><var>S[N] =</var> <code>0</code></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Takahashi can win the game, print the lexicographically smallest sequence among the shortest sequences of numbers coming up in the roulette in which Takahashi can win the game, with spaces in between.</p>\n<p>If Takahashi cannot win the game, print <var>-1</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>9 3\n0001000100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 3 2 3\n</pre>\n<p>If the numbers <var>1</var>, <var>3</var>, <var>2</var>, <var>3</var> come up in this order, Takahashi can reach Square <var>9</var> via Square <var>1</var>, <var>4</var>, and <var>6</var>. He cannot reach Square <var>9</var> in three or fewer turns, and this is the lexicographically smallest sequence in which he reaches Square <var>9</var> in four turns.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 4\n011110\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>Takahashi cannot reach Square <var>5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 6\n0101010\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n</pre></section>\n</div>\n</span>", "p02853": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We held two competitions: Coding Contest and Robot Maneuver.</p>\n<p>In each competition, the contestants taking the <var>3</var>-rd, <var>2</var>-nd, and <var>1</var>-st places receive <var>100000</var>, <var>200000</var>, and <var>300000</var> yen (the currency of Japan), respectively. Furthermore, a contestant taking the first place in both competitions receives an additional <var>400000</var> yen.</p>\n<p>DISCO-Kun took the <var>X</var>-th place in Coding Contest and the <var>Y</var>-th place in Robot Maneuver.\nFind the total amount of money he earned.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq X \\leq 205</var></li>\n<li><var>1 \\leq Y \\leq 205</var></li>\n<li><var>X</var> and <var>Y</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the amount of money DISCO-Kun earned, as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1000000\n</pre>\n<p>In this case, he earned <var>300000</var> yen in Coding Contest and another <var>300000</var> yen in Robot Maneuver. Furthermore, as he won both competitions, he got an additional <var>400000</var> yen.\nIn total, he made <var>300000 + 300000 + 400000 = 1000000</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100000\n</pre>\n<p>In this case, he earned <var>100000</var> yen in Coding Contest.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>In this case, unfortunately, he was the highest-ranked contestant without prize money in both competitions.</p></section>\n</div>\n</span>", "p02854": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi, who works at DISCO, is standing before an iron bar.\nThe bar has <var>N-1</var> notches, which divide the bar into <var>N</var> sections. The <var>i</var>-th section from the left has a length of <var>A_i</var> millimeters.</p>\n<p>Takahashi wanted to choose a notch and cut the bar at that point into two parts with the same length.\nHowever, this may not be possible as is, so he will do the following operations some number of times <strong>before</strong> he does the cut:</p>\n<ul>\n<li>Choose one section and expand it, increasing its length by <var>1</var> millimeter. Doing this operation once costs <var>1</var> yen (the currency of Japan).</li>\n<li>Choose one section of length at least <var>2</var> millimeters and shrink it, decreasing its length by <var>1</var> millimeter. Doing this operation once costs <var>1</var> yen.</li>\n</ul>\n<p>Find the minimum amount of money needed before cutting the bar into two parts with the same length.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>2 \\leq N \\leq 200000</var></li>\n<li><var>1 \\leq A_i \\leq 2020202020</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>A_3</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print an integer representing the minimum amount of money needed before cutting the bar into two parts with the same length.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The initial lengths of the sections are <var>[2, 4, 3]</var> (in millimeters). Takahashi can cut the bar equally after doing the following operations for <var>3</var> yen:</p>\n<ul>\n<li>Shrink the second section from the left. The lengths of the sections are now <var>[2, 3, 3]</var>.</li>\n<li>Shrink the first section from the left. The lengths of the sections are now <var>[1, 3, 3]</var>.</li>\n<li>Shrink the second section from the left. The lengths of the sections are now <var>[1, 2, 3]</var>, and we can cut the bar at the second notch from the left into two parts of length <var>3</var> each.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>12\n100 104 102 105 103 103 101 105 104 102 104 101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02856": "<span class=\"lang-en\">\n<p>Score: <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p><var>N</var> programmers are going to participate in the preliminary stage of DDCC 20XX. Due to the size of the venue, however, at most <var>9</var> contestants can participate in the finals.</p>\n<p>The preliminary stage consists of several rounds, which will take place as follows:</p>\n<ul>\n<li>All the <var>N</var> contestants will participate in the first round.</li>\n<li>When <var>X</var> contestants participate in some round, the number of contestants advancing to the next round will be decided as follows:<ul>\n<li>The organizer will choose two consecutive digits in the decimal notation of <var>X</var>, and replace them with the sum of these digits. The number resulted will be the number of contestants advancing to the next round.<br/>\nFor example, when <var>X = 2378</var>, the number of contestants advancing to the next round will be <var>578</var> (if <var>2</var> and <var>3</var> are chosen), <var>2108</var> (if <var>3</var> and <var>7</var> are chosen), or <var>2315</var> (if <var>7</var> and <var>8</var> are chosen).<br/>\nWhen <var>X = 100</var>, the number of contestants advancing to the next round will be <var>10</var>, no matter which two digits are chosen.</li>\n</ul>\n</li>\n<li>The preliminary stage ends when <var>9</var> or fewer contestants remain.</li>\n</ul>\n<p>Ringo, the chief organizer, wants to hold as many rounds as possible.\nFind the maximum possible number of rounds in the preliminary stage.</p>\n<p>Since the number of contestants, <var>N</var>, can be enormous, it is given to you as two integer sequences <var>d_1, \\ldots, d_M</var> and <var>c_1, \\ldots, c_M</var>, which means the following: the decimal notation of <var>N</var> consists of <var>c_1 + c_2 + \\ldots + c_M</var> digits, whose first <var>c_1</var> digits are all <var>d_1</var>, the following <var>c_2</var> digits are all <var>d_2</var>, <var>\\ldots</var>, and the last <var>c_M</var> digits are all <var>d_M</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq M \\leq 200000</var></li>\n<li><var>0 \\leq d_i \\leq 9</var></li>\n<li><var>d_1 \\neq 0</var></li>\n<li><var>d_i \\neq d_{i+1}</var></li>\n<li><var>c_i \\geq 1</var></li>\n<li><var>2 \\leq c_1 + \\ldots + c_M \\leq 10^{15}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>M</var>\n<var>d_1</var> <var>c_1</var>\n<var>d_2</var> <var>c_2</var>\n<var>:</var>\n<var>d_M</var> <var>c_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the maximum possible number of rounds in the preliminary stage.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n2 2\n9 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>In this case, <var>N = 229</var> contestants will participate in the first round. One possible progression of the preliminary stage is as follows:</p>\n<ul>\n<li><var>229</var> contestants participate in Round <var>1</var>, <var>49</var> contestants participate in Round <var>2</var>, <var>13</var> contestants participate in Round <var>3</var>, and <var>4</var> contestants advance to the finals.</li>\n</ul>\n<p>Here, three rounds take place in the preliminary stage, which is the maximum possible number.  </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1\n0 8\n7 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9\n</pre>\n<p>In this case, <var>1000000007</var> will participate in the first round.  </p></section>\n</div>\n</span>", "p02857": "<span class=\"lang-en\">\n<p>Score: <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p><font color=\"red\"><strong>This is an interactive task.</strong></font></p>\n<p>We have <var>2N</var> balls arranged in a row, numbered <var>1, 2, 3, ..., 2N</var> from left to right, where <var>N</var> is an odd number. Among them, there are <var>N</var> red balls and <var>N</var> blue balls.</p>\n<p>While blindfolded, you are challenged to guess the color of every ball correctly, by asking at most <var>210</var> questions of the following form:</p>\n<ul>\n<li>You choose any <var>N</var> of the <var>2N</var> balls and ask whether there are more red balls than blue balls or not among those <var>N</var> balls.</li>\n</ul>\n<p>Now, let us begin.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 99</var></li>\n<li><var>N</var> is an odd number.</li>\n</ul>\n<hr/>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Input and Output</h3>\n<p>First, receive the number of balls of each color, <var>N</var>, from Standard Input:</p>\n<pre><var>N</var>\n</pre>\n<p>Then, ask questions until you find out the color of every ball.\nA question should be printed to Standard Output in the following format:</p>\n<pre>? <var>A_1</var> <var>A_2</var> <var>A_3</var> <var>...</var> <var>A_N</var>\n</pre>\n<p>This means that you are asking about the <var>N</var> balls <var>A_1, A_2, A_3, ..., A_N</var>, where <var>1 \\leq A_i \\leq 2N</var> and <var>A_i \\neq A_j (i \\neq j)</var> must hold.</p>\n<p>The response <var>T</var> to this question will be given from Standard Input in the following format:</p>\n<pre><var>T</var>\n</pre>\n<p>Here <var>T</var> is one of the following strings:</p>\n<ul>\n<li><code>Red</code>: Among the <var>N</var> balls chosen, there are more red balls than blue balls.</li>\n<li><code>Blue</code>: Among the <var>N</var> balls chosen, there are more blue balls than red balls.</li>\n<li><code>-1</code>: You printed an invalid question (including the case you asked more than <var>210</var> questions), or something else that was invalid.</li>\n</ul>\n<p>If the judge returns <code>-1</code>, your submission is already judged as incorrect. The program should immediately quit in this case.</p>\n<p>When you find out the color of every ball, print your guess to Standard Output in the following format:</p>\n<pre>! <var>c_1</var><var>c_2</var><var>c_3</var><var>...</var><var>c_{2N}</var>\n</pre>\n<p>Here <var>c_i</var> should be the character representing the color of Ball <var>i</var>; use <code>R</code> for red and <code>B</code> for blue.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notice</h3>\n<ul>\n<li><font color=\"red\"><strong>Flush Standard Output each time you print something.</strong></font> Failure to do so may result in <code>TLE</code>.</li>\n<li>Immediately terminate your program after printing your guess (or receiving the <code>-1</code> response). Otherwise, the verdict will be indeterminate.</li>\n<li>If your program prints something invalid, the verdict will be indeterminate.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input and Output</h3>\n<table class=\"table-striped table-bordered table-condensed\">\n<tr align=\"center\">\n<th align=\"center\">Input</th>\n<th align=\"center\">Output</th>\n</tr>\n<tr align=\"center\">\n<td><code>3</code></td>\n<td></td>\n</tr>\n<tr align=\"center\">\n<td></td>\n<td><code>? 1 2 3</code></td>\n</tr>\n<tr align=\"center\">\n<td><code>Red</code></td>\n<td></td>\n</tr>\n<tr align=\"center\">\n<td></td>\n<td><code>? 2 4 6</code></td>\n</tr>\n<tr align=\"center\">\n<td><code>Blue</code></td>\n<td></td>\n</tr>\n<tr align=\"center\">\n<td></td>\n<td><code>! RRBBRB</code></td>\n</tr>\n</table>\n<p>In this sample, <var>N = 3</var>, and the colors of Ball <var>1, 2, 3, 4, 5, 6</var> are red, red, blue, blue, red, blue, respectively.</p>\n<ul>\n<li>In the first question, there are two red balls and one blue ball among the balls <var>1, 2, 3</var>, so the judge returns <code>Red</code>.</li>\n<li>In the second question, there are one red ball and two blue balls among the balls <var>2, 4, 6</var>, so the judge returns <code>Blue</code>.</li>\n</ul></section>\n</div>\n</span>", "p02859": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer <var>r</var>.</p>\n<p>How many times is the area of a circle of radius <var>r</var> larger than the area of a circle of radius <var>1</var>?</p>\n<p>It can be proved that the answer is always an integer under the constraints given.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq r \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>r</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the area of a circle of radius <var>r</var>, divided by the area of a circle of radius <var>1</var>, as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>The area of a circle of radius <var>2</var> is <var>4</var> times larger than the area of a circle of radius <var>1</var>.</p>\n<p>Note that output must be an integer - for example, <code>4.0</code> will not be accepted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10000\n</pre></section>\n</div>\n</span>", "p02858": "<span class=\"lang-en\">\n<p>Score: <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>In <var>2937</var>, DISCO creates a new universe called DISCOSMOS to celebrate its <var>1000</var>-th anniversary.</p>\n<p>DISCOSMOS can be described as an <var>H \\times W</var> grid. Let <var>(i, j)</var> <var>(1 \\leq i \\leq H, 1 \\leq j \\leq W)</var> denote the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left.</p>\n<p>At time <var>0</var>, one robot will be placed onto each square. Each robot is one of the following three types:</p>\n<ul>\n<li>Type-H: Does not move at all.</li>\n<li>Type-R: If a robot of this type is in <var>(i, j)</var> at time <var>t</var>, it will be in <var>(i, j+1)</var> at time <var>t+1</var>. If it is in <var>(i, W)</var> at time <var>t</var>, however, it will be instead in <var>(i, 1)</var> at time <var>t+1</var>. (The robots do not collide with each other.)</li>\n<li>Type-D: If a robot of this type is in <var>(i, j)</var> at time <var>t</var>, it will be in <var>(i+1, j)</var> at time <var>t+1</var>. If it is in <var>(H, j)</var> at time <var>t</var>, however, it will be instead in <var>(1, j)</var> at time <var>t+1</var>.</li>\n</ul>\n<p>There are <var>3^{H \\times W}</var> possible ways to place these robots. In how many of them will every square be occupied by one robot at times <var>0, T, 2T, 3T, 4T</var>, and all subsequent multiples of <var>T</var>?</p>\n<p>Since the count can be enormous, compute it modulo <var>(10^9 + 7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq H \\leq 10^9</var></li>\n<li><var>1 \\leq W \\leq 10^9</var></li>\n<li><var>1 \\leq T \\leq 10^9</var></li>\n<li><var>H, W, T</var> are all integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var> <var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of ways to place the robots that satisfy the condition, modulo <var>(10^9 + 7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>Shown below are some of the ways to place the robots that satisfy the condition, where <code>.</code>, <code>&gt;</code>, and <code>v</code> stand for Type-H, Type-R, and Type-D, respectively:</p>\n<pre>&gt;&gt;  ..  vv\n..  ..  vv\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>869 120 1001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>672919729\n</pre></section>\n</div>\n</span>", "p02860": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are a positive integer <var>N</var> and a string <var>S</var> of length <var>N</var> consisting of lowercase English letters.</p>\n<p>Determine whether the string is a concatenation of two copies of some string.\nThat is, determine whether there is a string <var>T</var> such that <var>S = T + T</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n<li><var>|S| = N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> is a concatenation of two copies of some string, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\nabcabc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Let <var>T = </var> <code>abc</code>, and <var>S = T + T</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\nabcadc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\nz\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02862": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a knight - the chess piece - at the origin <var>(0, 0)</var> of a two-dimensional grid.</p>\n<p>When the knight is at the square <var>(i, j)</var>, it can be moved to either <var>(i+1,j+2)</var> or <var>(i+2, j+1)</var>.</p>\n<p>In how many ways can the knight reach the square <var>(X, Y)</var>?</p>\n<p>Find the number of ways modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X \\leq 10^6</var></li>\n<li><var>1 \\leq Y \\leq 10^6</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways for the knight to reach <var>(X, Y)</var> from <var>(0, 0)</var>, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>There are two ways: <var>(0,0) \\to (1,2) \\to (3,3)</var> and <var>(0,0) \\to (2,1) \\to (3,3)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>The knight cannot reach <var>(2,2)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>999999 999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>151840682\n</pre>\n<p>Print the number of ways modulo <var>10^9 + 7</var>.</p></section>\n</div>\n</span>", "p02863": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is at an all-you-can-eat restaurant.</p>\n<p>The restaurant offers <var>N</var> kinds of dishes. It takes <var>A_i</var> minutes to eat the <var>i</var>-th dish, whose deliciousness is <var>B_i</var>.</p>\n<p>The restaurant has the following rules:</p>\n<ul>\n<li>You can only order one dish at a time. The dish ordered will be immediately served and ready to eat.</li>\n<li>You cannot order the same kind of dish more than once.</li>\n<li>Until you finish eating the dish already served, you cannot order a new dish.</li>\n<li>After <var>T-0.5</var> minutes from the first order, you can no longer place a new order, but you can continue eating the dish already served.</li>\n</ul>\n<p>Let Takahashi's happiness be the sum of the deliciousness of the dishes he eats in this restaurant.</p>\n<p>What is the maximum possible happiness achieved by making optimal choices?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 3000</var></li>\n<li><var>1 \\leq T \\leq 3000</var></li>\n<li><var>1 \\leq A_i \\leq 3000</var></li>\n<li><var>1 \\leq B_i \\leq 3000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>T</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible happiness Takahashi can achieve.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 60\n10 10\n100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>110\n</pre>\n<p>By ordering the first and second dishes in this order, Takahashi's happiness will be <var>110</var>.</p>\n<p>Note that, if we manage to order a dish in time, we can spend any amount of time to eat it.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 60\n10 10\n10 20\n10 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>60\n</pre>\n<p>Takahashi can eat all the dishes within <var>60</var> minutes.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 60\n30 10\n30 20\n30 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>50\n</pre>\n<p>By ordering the second and third dishes in this order, Takahashi's happiness will be <var>50</var>.</p>\n<p>We cannot order three dishes, in whatever order we place them.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 100\n15 23\n20 18\n13 17\n24 12\n18 29\n19 27\n23 21\n18 20\n27 15\n22 25\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>145\n</pre></section>\n</div>\n</span>", "p02864": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will create an artwork by painting black some squares in a white square grid with <var>10^9</var> rows and <var>N</var> columns.<br/>\nThe current plan is as follows: for the <var>i</var>-th column from the left, we will paint the <var>H_i</var> bottommost squares and will not paint the other squares in that column.<br/>\nBefore starting to work, you can choose at most <var>K</var> columns (possibly zero) and change the values of <var>H_i</var> for these columns to any integers of your choice between <var>0</var> and <var>10^9</var> (inclusive).<br/>\nDifferent values can be chosen for different columns.<br/></p>\n<p>Then, you will create the modified artwork by repeating the following operation:<br/></p>\n<ul>\n<li>Choose one or more consecutive squares in one row and paint them black. (Squares already painted black can be painted again, but squares not to be painted according to the modified plan should not be painted.)</li>\n</ul>\n<p>Find the minimum number of times you need to perform this operation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 300</var></li>\n<li><var>0 \\leq K \\leq N</var></li>\n<li><var>0 \\leq H_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>H_1</var> <var>H_2</var> <var>...</var> <var>H_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 1\n2 3 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>For example, by changing the value of <var>H_3</var> to <var>2</var>, you can create the modified artwork by the following three operations:</p>\n<ul>\n<li>Paint black the <var>1</var>-st through <var>4</var>-th squares from the left in the <var>1</var>-st row from the bottom.</li>\n<li>Paint black the <var>1</var>-st through <var>3</var>-rd squares from the left in the <var>2</var>-nd row from the bottom.</li>\n<li>Paint black the <var>2</var>-nd square from the left in the <var>3</var>-rd row from the bottom.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 2\n8 6 9 1 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 0\n1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4999999996\n</pre></section>\n</div>\n</span>", "p02865": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>How many ways are there to choose two distinct positive integers totaling <var>N</var>, disregarding the order?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^6</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>There is only one way to choose two distinct integers totaling <var>4</var>: to choose <var>1</var> and <var>3</var>. (Choosing <var>3</var> and <var>1</var> is not considered different from this.)</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>499999\n</pre></section>\n</div>\n</span>", "p02866": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer sequence <var>D_1,...,D_N</var> of <var>N</var> elements. Find the number, modulo <var>998244353</var>, of trees with <var>N</var> vertices numbered <var>1</var> to <var>N</var> that satisfy the following condition:</p>\n<ul>\n<li>For every integer <var>i</var> from <var>1</var> to <var>N</var>, the distance between Vertex <var>1</var> and Vertex <var>i</var> is <var>D_i</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><ul>\n<li>A tree of <var>N</var> vertices is a connected undirected graph with <var>N</var> vertices and <var>N-1</var> edges, and the distance between two vertices are the number of edges in the shortest path between them.</li>\n<li>Two trees are considered different if and only if there are two vertices <var>x</var> and <var>y</var> such that there is an edge between <var>x</var> and <var>y</var> in one of those trees and not in the other.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq D_i \\leq N-1</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>D_1</var> <var>D_2</var> <var>...</var> <var>D_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n0 1 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, a tree with edges <var>(1,2)</var>, <var>(1,3)</var>, and <var>(2,4)</var> satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n0 3 2 1 2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>24\n</pre></section>\n</div>\n</span>", "p02867": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are two integer sequences of <var>N</var> elements each: <var>A_1,...,A_N</var> and <var>B_1,...,B_N</var>.\nDetermine if it is possible to do the following operation at most <var>N-2</var> times (possibly zero) so that, for every integer <var>i</var> from <var>1</var> to <var>N</var>, <var>A_i \\leq B_i</var> holds:</p>\n<ul>\n<li>Choose two distinct integers <var>x</var> and <var>y</var> between <var>1</var> and <var>N</var> (inclusive), and swap the values of <var>A_x</var> and <var>A_y</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i,B_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n<var>B_1</var> <var>B_2</var> <var>...</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the objective is achievable, print <code>Yes</code>; if it is not, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 3 2\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>We should swap the values of <var>A_2</var> and <var>A_3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 2 3\n2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n3 1 2 6 3 4\n2 2 8 3 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02868": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> points numbered <var>1</var> to <var>N</var> arranged in a line in this order.</p>\n<p>Takahashi decides to make an undirected graph, using these points as the vertices.\nIn the beginning, the graph has no edge. Takahashi will do <var>M</var> operations to add edges in this graph.\nThe <var>i</var>-th operation is as follows:</p>\n<ul>\n<li>The operation uses integers <var>L_i</var> and <var>R_i</var> between <var>1</var> and <var>N</var> (inclusive), and a positive integer <var>C_i</var>. For every pair of integers <var>(s, t)</var> such that <var>L_i \\leq s &lt; t \\leq R_i</var>, add an edge of length <var>C_i</var> between Vertex <var>s</var> and Vertex <var>t</var>.</li>\n</ul>\n<p>The integers <var>L_1, ..., L_M</var>, <var>R_1, ..., R_M</var>, <var>C_1, ..., C_M</var> are all given as input.</p>\n<p>Takahashi wants to solve the shortest path problem in the final graph obtained. Find the length of the shortest path from Vertex <var>1</var> to Vertex <var>N</var> in the final graph.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq L_i &lt; R_i \\leq N</var></li>\n<li><var>1 \\leq C_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>L_1</var> <var>R_1</var> <var>C_1</var>\n<var>:</var>\n<var>L_M</var> <var>R_M</var> <var>C_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the length of the shortest path from Vertex <var>1</var> to Vertex <var>N</var> in the final graph.\nIf there is no shortest path, print <code>-1</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n1 3 2\n2 4 3\n1 4 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>We have an edge of length <var>2</var> between Vertex <var>1</var> and Vertex <var>2</var>, and an edge of length <var>3</var> between Vertex <var>2</var> and Vertex <var>4</var>, so there is a path of length <var>5</var> between Vertex <var>1</var> and Vertex <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 2\n1 2 1\n3 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 7\n1 5 18\n3 4 8\n1 3 5\n4 7 10\n5 9 8\n6 10 5\n8 10 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>28\n</pre></section>\n</div>\n</span>", "p02869": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are positive integers <var>N</var> and <var>K</var>.</p>\n<p>Determine if the <var>3N</var> integers <var>K, K+1, ..., K+3N-1</var> can be partitioned into <var>N</var> triples <var>(a_1,b_1,c_1), ..., (a_N,b_N,c_N)</var> so that the condition below is satisfied. Any of the integers <var>K, K+1, ..., K+3N-1</var> must appear in exactly one of those triples.</p>\n<ul>\n<li>For every integer <var>i</var> from <var>1</var> to <var>N</var>, <var>a_i + b_i \\leq c_i</var> holds.</li>\n</ul>\n<p>If the answer is yes, construct one such partition.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is impossible to partition the integers satisfying the condition, print <code>-1</code>. If it is possible, print <var>N</var> triples in the following format:</p>\n<pre><var>a_1</var> <var>b_1</var> <var>c_1</var>\n<var>:</var>\n<var>a_N</var> <var>b_N</var> <var>c_N</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 2 3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p02873": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var> of length <var>N-1</var>.\nEach character in <var>S</var> is <code>&lt;</code> or <code>&gt;</code>.</p>\n<p>A sequence of <var>N</var> non-negative integers, <var>a_1,a_2,\\cdots,a_N</var>, is said to be <em>good</em> when the following condition is satisfied for all <var>i</var> (<var>1 \\leq i \\leq N-1</var>):</p>\n<ul>\n<li>If <var>S_i=</var> <code>&lt;</code>: <var>a_i&lt;a_{i+1}</var></li>\n<li>If <var>S_i=</var> <code>&gt;</code>: <var>a_i&gt;a_{i+1}</var></li>\n</ul>\n<p>Find the minimum possible sum of the elements of a good sequence of <var>N</var> non-negative integers.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 5 \\times 10^5</var></li>\n<li><var>S</var> is a string of length <var>N-1</var> consisting of <code>&lt;</code> and <code>&gt;</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the minimum possible sum of the elements of a good sequence of <var>N</var> non-negative integers.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>&lt;&gt;&gt;\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><var>a=(0,2,1,0)</var> is a good sequence whose sum is <var>3</var>.\nThere is no good sequence whose sum is less than <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>&lt;&gt;&gt;&gt;&lt;&lt;&gt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&lt;\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>28\n</pre></section>\n</div>\n</span>", "p02874": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>10^9</var> contestants, numbered <var>1</var> to <var>10^9</var>, will compete in a competition.\nThere will be two contests in this competition.</p>\n<p>The organizer prepared <var>N</var> problems, numbered <var>1</var> to <var>N</var>, to use in these contests.\nWhen Problem <var>i</var> is presented in a contest, it will be solved by all contestants from Contestant <var>L_i</var> to Contestant <var>R_i</var> (inclusive), and will not be solved by any other contestants.</p>\n<p>The organizer will use these <var>N</var> problems in the two contests.\nEach problem must be used in exactly one of the contests, and each contest must have at least one problem.</p>\n<p>The <em>joyfulness</em> of each contest is the number of contestants who will solve all the problems in the contest.\nFind the maximum possible total joyfulness of the two contests.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq L_i \\leq R_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>L_1</var> <var>R_1</var>\n<var>L_2</var> <var>R_2</var>\n<var>\\vdots</var>\n<var>L_N</var> <var>R_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible total joyfulness of the two contests.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n4 7\n1 4\n5 8\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>The optimal choice is:</p>\n<ul>\n<li>Use Problem <var>1</var> and <var>3</var> in the first contest. Contestant <var>5</var>, <var>6</var>, and <var>7</var> will solve both of them, so the joyfulness of this contest is <var>3</var>.</li>\n<li>Use Problem <var>2</var> and <var>4</var> in the second contest. Contestant <var>2</var>, <var>3</var>, and <var>4</var> will solve both of them, so the joyfulness of this contest is <var>3</var>.</li>\n<li>The total joyfulness of these two contests is <var>6</var>. We cannot make the total joyfulness greater than <var>6</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 20\n2 19\n3 18\n4 17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>34\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n457835016 996058008\n456475528 529149798\n455108441 512701454\n455817105 523506955\n457368248 814532746\n455073228 459494089\n456651538 774276744\n457667152 974637457\n457293701 800549465\n456580262 636471526\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>540049931\n</pre></section>\n</div>\n</span>", "p02876": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> balance beams numbered <var>1</var> to <var>N</var>.\nThe length of each beam is <var>1</var> meters.\nSnuke walks on Beam <var>i</var> at a speed of <var>1/A_i</var> meters per second, and Ringo walks on Beam <var>i</var> at a speed of <var>1/B_i</var> meters per second.</p>\n<p>Snuke and Ringo will play the following game:</p>\n<ul>\n<li>First, Snuke connects the <var>N</var> beams in any order of his choice and makes a long beam of length <var>N</var> meters.</li>\n<li>Then, Snuke starts at the left end of the long beam. At the same time, Ringo starts at a point chosen uniformly at random on the long beam. Both of them walk to the right end of the long beam.</li>\n<li>Snuke wins if and only if he catches up to Ringo before Ringo reaches the right end of the long beam. That is, Snuke wins if there is a moment when Snuke and Ringo stand at the same position, and Ringo wins otherwise.</li>\n</ul>\n<p>Find the probability that Snuke wins when Snuke arranges the <var>N</var> beams so that the probability of his winning is maximized.</p>\n<p>This probability is a rational number, so we ask you to represent it as an irreducible fraction <var>P/Q</var> (to represent <var>0</var>, use <var>P=0, Q=1</var>).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i,B_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>\\vdots</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the numerator and denominator of the irreducible fraction that represents the maximum probability of Snuke's winning.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n3 2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 4\n</pre>\n<p>When the beams are connected in the order <var>2,1</var> from left to right, the probability of Snuke's winning is <var>1/4</var>, which is the maximum possible value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 5\n4 7\n2 1\n8 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n4 1\n5 2\n6 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0 1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10\n866111664 178537096\n705445072 318106937\n472381277 579910117\n353498483 865935868\n383133839 231371336\n378371075 681212831\n304570952 16537461\n955719384 267238505\n844917655 218662351\n550309930 62731178\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>697461712 2899550585\n</pre></section>\n</div>\n</span>", "p02877": "<span class=\"lang-en\">\n<p>Score : <var>1400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a sequence of <var>N</var> integers <var>x_1,x_2,\\cdots,x_N</var>.\nInitially, all the elements are <var>0</var>.</p>\n<p>He can do the following two kinds of operations any number of times in any order:</p>\n<ul>\n<li>Operation <var>1</var>: choose an integer <var>k</var> (<var>1 \\leq k \\leq N</var>) and a <strong>non-decreasing</strong> sequence of <var>k</var> non-negative integers <var>c_1,c_2,\\cdots,c_k</var>.\nThen, for each <var>i</var> (<var>1 \\leq i \\leq k</var>), replace <var>x_i</var> with <var>x_i+c_i</var>.</li>\n<li>Operation <var>2</var>: choose an integer <var>k</var> (<var>1 \\leq k \\leq N</var>) and a <strong>non-increasing</strong> sequence of <var>k</var> non-negative integers <var>c_1,c_2,\\cdots,c_k</var>.\nThen, for each <var>i</var> (<var>1 \\leq i \\leq k</var>), replace <var>x_{N-k+i}</var> with <var>x_{N-k+i}+c_i</var>.</li>\n</ul>\n<p>His objective is to have <var>x_i=A_i</var> for all <var>i</var>.\nFind the minimum number of operations required to achieve it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required to achieve Snuke's objective.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 2 1 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>One way to achieve the objective in three operations is shown below.\nThe objective cannot be achieved in less than three operations.</p>\n<ul>\n<li>Do Operation <var>1</var> and choose <var>k=2,c=(1,2)</var>. Now we have <var>x=(1,2,0,0,0)</var>.</li>\n<li>Do Operation <var>1</var> and choose <var>k=3,c=(0,0,1)</var>. Now we have <var>x=(1,2,1,0,0)</var>.</li>\n<li>Do Operation <var>2</var> and choose <var>k=2,c=(2,1)</var>. Now we have <var>x=(1,2,1,2,1)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n2 1 2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15\n541962451 761940280 182215520 378290929 211514670 802103642 28942109 641621418 380343684 526398645 81993818 14709769 139483158 444795625 40343083\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7\n</pre></section>\n</div>\n</span>", "p02879": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Having learned the multiplication table, Takahashi can multiply two integers between <var>1</var> and <var>9</var> (inclusive) together. He cannot do any other calculation.</p>\n<p>Given are two integers <var>A</var> and <var>B</var>.</p>\n<p>If Takahashi can calculate <var>A \\times B</var>, print the result; if he cannot, print <code>-1</code> instead.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A \\leq 20</var></li>\n<li><var>1 \\leq B \\leq 20</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Takahashi can calculate <var>A \\times B</var>, print the result; if he cannot, print <code>-1</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p><var>2 \\times 5 = 10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p><var>5\\times 10 = 50</var>, but Takahashi cannot do this calculation, so print <code>-1</code> instead.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>81\n</pre></section>\n</div>\n</span>", "p02880": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Having learned the multiplication table, Takahashi can multiply two integers between <var>1</var> and <var>9</var> (inclusive) together.</p>\n<p>Given an integer <var>N</var>, determine whether <var>N</var> can be represented as the product of two integers between <var>1</var> and <var>9</var>. If it can, print <code>Yes</code>; if it cannot, print <code>No</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>N</var> can be represented as the product of two integers between <var>1</var> and <var>9</var> (inclusive), print <code>Yes</code>; if it cannot, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><var>10</var> can be represented as, for example, <var>2 \\times 5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p><var>50</var> cannot be represented as the product of two integers between <var>1</var> and <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>81\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02881": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is standing on a multiplication table with infinitely many rows and columns.</p>\n<p>The square <var>(i,j)</var> contains the integer <var>i \\times j</var>. Initially, Takahashi is standing at <var>(1,1)</var>.</p>\n<p>In one move, he can move from <var>(i,j)</var> to either <var>(i+1,j)</var> or <var>(i,j+1)</var>.</p>\n<p>Given an integer <var>N</var>, find the minimum number of moves needed to reach a square that contains <var>N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^{12}</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of moves needed to reach a square that contains the integer <var>N</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p><var>(2,5)</var> can be reached in five moves. We cannot reach a square that contains <var>10</var> in less than five moves.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>13\n</pre>\n<p><var>(5, 10)</var> can be reached in <var>13</var> moves.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10000000019\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>10000000018\n</pre>\n<p>Both input and output may be enormous.</p></section>\n</div>\n</span>", "p02882": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has a water bottle with the shape of a rectangular prism whose base is a square of side <var>a~\\mathrm{cm}</var> and whose height is <var>b~\\mathrm{cm}</var>. (The thickness of the bottle can be ignored.)</p>\n<p>We will pour <var>x~\\mathrm{cm}^3</var> of water into the bottle, and gradually tilt the bottle around one of the sides of the base.</p>\n<p>When will the water be spilled? More formally, find the maximum angle in which we can tilt the bottle without spilling any water.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq a \\leq 100</var></li>\n<li><var>1 \\leq b \\leq 100</var></li>\n<li><var>1 \\leq x \\leq a^2b</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var> <var>x</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum angle in which we can tilt the bottle without spilling any water, in degrees.\nYour output will be judged as correct when the absolute or relative error from the judge's output is at most <var>10^{-6}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>45.0000000000\n</pre>\n<p>This bottle has a cubic shape, and it is half-full. The water gets spilled when we tilt the bottle more than <var>45</var> degrees.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>12 21 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>89.7834636934\n</pre>\n<p>This bottle is almost empty. When the water gets spilled, the bottle is nearly horizontal.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 1 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4.2363947991\n</pre>\n<p>This bottle is almost full. When the water gets spilled, the bottle is still nearly vertical.</p></section>\n</div>\n</span>", "p02883": "<span class=\"lang-en\">\n<p>Score: <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi will take part in an eating contest. Teams of <var>N</var> members will compete in this contest, and Takahashi's team consists of <var>N</var> players numbered <var>1</var> through <var>N</var> from youngest to oldest. The <em>consumption coefficient</em> of Member <var>i</var> is <var>A_i</var>.</p>\n<p>In the contest, <var>N</var> foods numbered <var>1</var> through <var>N</var> will be presented, and the <em>difficulty</em> of Food <var>i</var> is <var>F_i</var>. The details of the contest are as follows:</p>\n<ul>\n<li>A team should assign one member to each food, and should not assign the same member to multiple foods.</li>\n<li>It will take <var>x \\times y</var> seconds for a member to finish the food, where <var>x</var> is the consumption coefficient of the member and <var>y</var> is the difficulty of the dish.</li>\n<li>The score of a team is the longest time it takes for an individual member to finish the food.</li>\n</ul>\n<p>Before the contest, Takahashi's team decided to do some training. In one set of training, a member can reduce his/her consumption coefficient by <var>1</var>, as long as it does not go below <var>0</var>. However, for financial reasons, the <var>N</var> members can do at most <var>K</var> sets of training in total.</p>\n<p>What is the minimum possible score of the team, achieved by choosing the amounts of members' training and allocating the dishes optimally?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq K \\leq 10^{18}</var></li>\n<li><var>1 \\leq A_i \\leq 10^6\\ (1 \\leq i \\leq N)</var></li>\n<li><var>1 \\leq F_i \\leq 10^6\\ (1 \\leq i \\leq N)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n<var>F_1</var> <var>F_2</var> <var>...</var> <var>F_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the minimum possible score of the team.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 5\n4 2 1\n2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>They can achieve the score of <var>2</var>, as follows:</p>\n<ul>\n<li>Member <var>1</var> does <var>4</var> sets of training and eats Food <var>2</var> in <var>(4-4) \\times 3 = 0</var> seconds.</li>\n<li>Member <var>2</var> does <var>1</var> set of training and eats Food <var>3</var> in <var>(2-1) \\times 1 = 1</var> second.</li>\n<li>Member <var>3</var> does <var>0</var> sets of training and eats Food <var>1</var> in <var>(1-0) \\times 2 = 2</var> seconds.</li>\n</ul>\n<p>They cannot achieve a score of less than <var>2</var>, so the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 8\n4 2 1\n2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>They can choose not to do exactly <var>K</var> sets of training.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11 14\n3 1 4 1 5 9 2 6 5 3 5\n8 9 7 9 3 2 3 8 4 6 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>12\n</pre></section>\n</div>\n</span>", "p02885": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>The window of Takahashi's room has a width of <var>A</var>. There are two curtains hung over the window, each of which has a horizontal length of <var>B</var>. (Vertically, the curtains are long enough to cover the whole window.)</p>\n<p>We will close the window so as to minimize the total horizontal length of the uncovered part of the window.\nFind the total horizontal length of the uncovered parts of the window then.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A \\leq 100</var></li>\n<li><var>1 \\leq B \\leq 100</var></li>\n<li><var>A</var> and <var>B</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the total horizontal length of the uncovered parts of the window.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>12 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>We have a window with a horizontal length of <var>12</var>, and two curtains, each of length <var>4</var>, that cover both ends of the window, for example. The uncovered part has a horizontal length of <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>20 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>If the window is completely covered, print <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>Each curtain may be longer than the window.</p></section>\n</div>\n</span>", "p02886": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>It's now the season of TAKOYAKI FESTIVAL!</p>\n<p>This year, <var>N</var> takoyaki (a ball-shaped food with a piece of octopus inside) will be served. The <em>deliciousness</em> of the <var>i</var>-th takoyaki is <var>d_i</var>.</p>\n<p>As is commonly known, when you eat two takoyaki of deliciousness <var>x</var> and <var>y</var> together, you restore <var>x \\times y</var> health points.</p>\n<p>There are <var>\\frac{N \\times (N - 1)}{2}</var> ways to choose two from the <var>N</var> takoyaki served in the festival. For each of these choices, find the health points restored from eating the two takoyaki, then compute the sum of these <var>\\frac{N \\times (N - 1)}{2}</var> values.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 50</var></li>\n<li><var>0 \\leq d_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>d_1</var> <var>d_2</var> <var>...</var> <var>d_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the health points restored from eating two takoyaki over all possible choices of two takoyaki from the <var>N</var> takoyaki served.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11\n</pre>\n<p>There are three possible choices:</p>\n<ul>\n<li>Eat the first and second takoyaki. You will restore <var>3</var> health points.</li>\n<li>Eat the second and third takoyaki. You will restore <var>2</var> health points.</li>\n<li>Eat the first and third takoyaki. You will restore <var>6</var> health points.</li>\n</ul>\n<p>The sum of these values is <var>11</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7\n5 0 7 8 3 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>312\n</pre></section>\n</div>\n</span>", "p02887": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> slimes lining up from left to right. The colors of these slimes will be given as a string <var>S</var> of length <var>N</var> consisting of lowercase English letters. The <var>i</var>-th slime from the left has the color that corresponds to the <var>i</var>-th character of <var>S</var>.</p>\n<p>Adjacent slimes with the same color will fuse into one larger slime without changing the color. If there were a slime adjacent to this group of slimes before fusion, that slime is now adjacent to the new larger slime.</p>\n<p>Ultimately, how many slimes will be there?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>|S| = N</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the final number of slimes.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10\naabbbbaaca\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>Ultimately, these slimes will fuse into <code>abaca</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\naaaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>All the slimes will fuse into one.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20\nxxzaffeeeeddfkkkkllq\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>10\n</pre></section>\n</div>\n</span>", "p02888": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has <var>N</var> sticks that are distinguishable from each other. The length of the <var>i</var>-th stick is <var>L_i</var>.</p>\n<p>He is going to form a triangle using three of these sticks. Let <var>a</var>, <var>b</var>, and <var>c</var> be the lengths of the three sticks used. Here, all of the following conditions must be satisfied:</p>\n<ul>\n<li><var>a &lt; b + c</var></li>\n<li><var>b &lt; c + a</var></li>\n<li><var>c &lt; a + b</var></li>\n</ul>\n<p>How many different triangles can be formed? Two triangles are considered different when there is a stick used in only one of them.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>3 \\leq N \\leq 2 \\times 10^3</var></li>\n<li><var>1 \\leq L_i \\leq 10^3</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>L_1</var> <var>L_2</var> <var>...</var> <var>L_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><p>Print the number of different triangles that can be formed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n3 4 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Only one triangle can be formed: the triangle formed by the first, second, and third sticks.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1000 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>No triangles can be formed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n218 786 704 233 645 728 389\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>23\n</pre></section>\n</div>\n</span>", "p02889": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> towns numbered <var>1</var> to <var>N</var> and <var>M</var> roads. The <var>i</var>-th road connects Town <var>A_i</var> and Town <var>B_i</var> bidirectionally and has a length of <var>C_i</var>.</p>\n<p>Takahashi will travel between these towns by car, passing through these roads. The fuel tank of his car can contain at most <var>L</var> liters of fuel, and one liter of fuel is consumed for each unit distance traveled. When visiting a town while traveling, he can full the tank (or choose not to do so). Travel that results in the tank becoming empty halfway on the road cannot be done.</p>\n<p>Process the following <var>Q</var> queries:</p>\n<ul>\n<li>The tank is now full. Find the minimum number of times he needs to full his tank while traveling from Town <var>s_i</var> to Town <var>t_i</var>. If Town <var>t_i</var> is unreachable, print <var>-1</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 300</var></li>\n<li><var>0 \\leq M \\leq \\frac{N(N-1)}{2}</var></li>\n<li><var>1 \\leq L \\leq 10^9</var></li>\n<li><var>1 \\leq A_i, B_i \\leq N</var></li>\n<li><var>A_i \\neq B_i</var></li>\n<li><var>\\left(A_i, B_i\\right) \\neq \\left(A_j, B_j\\right)</var> (if <var>i \\neq j</var>)</li>\n<li><var>\\left(A_i, B_i\\right) \\neq \\left(B_j, A_j\\right)</var> (if <var>i \\neq j</var>)</li>\n<li><var>1 \\leq C_i \\leq 10^9</var></li>\n<li><var>1 \\leq Q \\leq N\\left(N-1\\right)</var></li>\n<li><var>1 \\leq s_i, t_i \\leq N</var></li>\n<li><var>s_i \\neq t_i</var></li>\n<li><var>\\left(s_i, t_i\\right) \\neq \\left(s_j, t_j\\right)</var> (if <var>i \\neq j</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>L</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var>\n<var>:</var>\n<var>A_M</var> <var>B_M</var> <var>C_M</var>\n<var>Q</var>\n<var>s_1</var> <var>t_1</var>\n<var>:</var>\n<var>s_Q</var> <var>t_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines.</p>\n<p>The <var>i</var>-th line should contain the minimum number of times the tank needs to be fulled while traveling from Town <var>s_i</var> to Town <var>t_i</var>. If Town <var>t_i</var> is unreachable, the line should contain <var>-1</var> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2 5\n1 2 3\n2 3 3\n2\n3 2\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n1\n</pre>\n<p>To travel from Town <var>3</var> to Town <var>2</var>, we can use the second road to reach Town <var>2</var> without fueling the tank on the way.</p>\n<p>To travel from Town <var>1</var> to Town <var>3</var>, we can first use the first road to get to Town <var>2</var>, full the tank, and use the second road to reach Town <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 0 1\n1\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>There may be no road at all.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 4 4\n1 2 2\n2 3 2\n3 4 3\n4 5 2\n20\n2 1\n3 1\n4 1\n5 1\n1 2\n3 2\n4 2\n5 2\n1 3\n2 3\n4 3\n5 3\n1 4\n2 4\n3 4\n5 4\n1 5\n2 5\n3 5\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n0\n1\n2\n0\n0\n1\n2\n0\n0\n0\n1\n1\n1\n0\n0\n2\n2\n1\n0\n</pre></section>\n</div>\n</span>", "p02890": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi has <var>N</var> cards. The <var>i</var>-th of these cards has an integer <var>A_i</var> written on it.</p>\n<p>Takahashi will choose an integer <var>K</var>, and then repeat the following operation some number of times:</p>\n<ul>\n<li>Choose exactly <var>K</var> cards such that the integers written on them are all different, and eat those cards. (The eaten cards disappear.)</li>\n</ul>\n<p>For each <var>K = 1,2, \\ldots, N</var>, find the maximum number of times Takahashi can do the operation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var> 1 \\le N \\le 3 \\times 10^5 </var></li>\n<li><var> 1 \\le A_i \\le N </var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print <var>N</var> integers.\nThe <var>t</var>-th <var>(1 \\le t \\le N)</var> of them should be the answer for the case <var>K=t</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n1\n0\n</pre>\n<p>For <var>K = 1</var>, we can do the operation as follows:</p>\n<ul>\n<li>Choose the first card to eat.</li>\n<li>Choose the second card to eat.</li>\n<li>Choose the third card to eat.</li>\n</ul>\n<p>For <var>K = 2</var>, we can do the operation as follows:</p>\n<ul>\n<li>Choose the first and second cards to eat.</li>\n</ul>\n<p>For <var>K = 3</var>, we cannot do the operation at all. Note that we cannot choose the first and third cards at the same time.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n2\n1\n1\n1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n1 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n1\n0\n0\n</pre></section>\n</div>\n</span>", "p02891": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var>. Let <var>T</var> be the concatenation of <var>K</var> copies of <var>S</var>.\nWe can repeatedly perform the following operation: choose a character in <var>T</var> and replace it with a different character.\nFind the minimum number of operations required to satisfy the following condition: any two adjacent characters in <var>T</var> are different.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 100</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>K</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>issii\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p><var>T</var> is <code>issiiissii</code>.  For example, we can rewrite it into <code>ispiqisyhi</code>, and now any two adjacent characters are different.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>qq\n81\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>81\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>cooooooooonteeeeeeeeeest\n999993333\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8999939997\n</pre></section>\n</div>\n</span>", "p02892": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a connected undirected graph with <var>N</var> vertices and <var>M</var> edges. The vertices are numbered <var>1</var> to <var>N</var>, and the edges are described by a grid of characters <var>S</var>.\nIf <var>S_{i,j}</var> is <code>1</code>, there is an edge connecting Vertex <var>i</var> and <var>j</var>; otherwise, there is no such edge.</p>\n<p>Determine whether it is possible to divide the vertices into non-empty sets <var>V_1, \\dots, V_k</var> such that the following condition is satisfied. If the answer is yes, find the maximum possible number of sets, <var>k</var>, in such a division.</p>\n<ul>\n<li>Every edge connects two vertices belonging to two \"adjacent\" sets. More formally, for every edge <var>(i,j)</var>, there exists <var>1\\leq t\\leq k-1</var> such that <var>i\\in V_t,j\\in V_{t+1}</var> or <var>i\\in V_{t+1},j\\in V_t</var> holds.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200</var></li>\n<li><var>S_{i,j}</var> is <code>0</code> or <code>1</code>.</li>\n<li><var>S_{i,i}</var> is <code>0</code>.</li>\n<li><var>S_{i,j}=S_{j,i}</var></li>\n<li>The given graph is connected.</li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_{1,1}...S_{1,N}</var>\n<var>:</var>\n<var>S_{N,1}...S_{N,N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is impossible to divide the vertices into sets so that the condition is satisfied, print <var>-1</var>.\nOtherwise, print the maximum possible number of sets, <var>k</var>, in a division that satisfies the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n01\n10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>We can put Vertex <var>1</var> in <var>V_1</var> and Vertex <var>2</var> in <var>V_2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n011\n101\n110\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n010110\n101001\n010100\n101000\n100000\n010000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre></section>\n</div>\n</span>", "p02893": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are integers <var>N</var> and <var>X</var>. For each integer <var>k</var> between <var>0</var> and <var>X</var> (inclusive), find the answer to the following question, then compute the sum of all those answers, modulo <var>998244353</var>.</p>\n<ul>\n<li>Let us repeat the following operation on the integer <var>k</var>. Operation: if the integer is currently odd, subtract <var>1</var> from it and divide it by <var>2</var>; otherwise, divide it by <var>2</var> and add <var>2^{N-1}</var> to it. How many operations need to be performed until <var>k</var> returns to its original value? (The answer is considered to be <var>0</var> if <var>k</var> never returns to its original value.)</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>0 \\leq X &lt; 2^N</var></li>\n<li><var>X</var> is given in binary and has exactly <var>N</var> digits. (In case <var>X</var> has less than <var>N</var> digits, it is given with leading zeroes.)</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the answers to the questions for the integers between <var>0</var> and <var>X</var> (inclusive), modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>40\n</pre>\n<p>For example, for <var>k=3</var>, the operation changes <var>k</var> as follows: <var>1,0,4,6,7,3</var>. Therefore the answer for <var>k=3</var> is <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n110101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>616\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>30\n001110011011011101010111011100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>549320998\n</pre></section>\n</div>\n</span>", "p02894": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are <var>N</var> points on the circumference of a circle centered at <var>(0,0)</var> in an <var>xy</var>-plane.\nThe coordinates of the <var>i</var>-th point are <var>(\\cos(\\frac{2\\pi T_i}{L}),\\sin(\\frac{2\\pi T_i}{L}))</var>.</p>\n<p>Three distinct points will be chosen uniformly at random from these <var>N</var> points.\nFind the expected <var>x</var>- and <var>y</var>-coordinates of the center of the circle inscribed in the triangle formed by the chosen points.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 3000</var></li>\n<li><var>N \\leq L \\leq 10^9</var></li>\n<li><var>0 \\leq T_i \\leq L-1</var></li>\n<li><var>T_i&lt;T_{i+1}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>L</var>\n<var>T_1</var>\n<var>:</var>\n<var>T_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the expected <var>x</var>- and <var>y</var>-coordinates of the center of the circle inscribed in the triangle formed by the chosen points.\nYour output will be considered correct when the absolute or relative error is at most <var>10^{-9}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4\n0\n1\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0.414213562373095 -0.000000000000000\n</pre>\n<p>The three points have the coordinates <var>(1,0)</var>, <var>(0,1)</var>, and <var>(0,-1)</var>. The center of the circle inscribed in the triangle formed by these points is <var>(\\sqrt{2}-1,0)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 8\n1\n3\n5\n6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-0.229401949926902 -0.153281482438188\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 100\n2\n11\n35\n42\n54\n69\n89\n91\n93\n99\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0.352886583546338 -0.109065017701873\n</pre></section>\n</div>\n</span>", "p02896": "<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For each of the <var>K^{NM}</var> ways to write an integer between <var>1</var> and <var>K</var> (inclusive) in every square in a square grid with <var>N</var> rows and <var>M</var> columns, find the value defined below, then compute the sum of all those <var>K^{NM}</var> values, modulo <var>D</var>.</p>\n<ul>\n<li>For each of the <var>NM</var> squares, find the minimum among the <var>N+M-1</var> integers written in the square's row or the square's column. The value defined for the grid is the product of all these <var>NM</var> values.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M,K \\leq 100</var></li>\n<li><var>10^8 \\leq D \\leq 10^9</var></li>\n<li><var>N,M,K,</var> and <var>D</var> are integers.</li>\n<li><var>D</var> is prime.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>K</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the <var>K^{NM}</var> values, modulo <var>D</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 2 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>35\n</pre>\n<p>We have <var>1</var> way to write integers such that the product of the <var>NM</var> values is <var>16</var>, <var>4</var> ways such that the product is <var>2</var>, and <var>11</var> ways such that the product is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3 4 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>127090\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31 41 59 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>827794103\n</pre></section>\n</div>\n</span>", "p02897": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer <var>N</var>.</p>\n<p>Takahashi chooses an integer <var>a</var> from the positive integers not greater than <var>N</var> with equal probability.</p>\n<p>Find the probability that <var>a</var> is odd.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the probability that <var>a</var> is odd.\nYour output will be considered correct when its absolute or relative error from the judge's output is at most <var>10^{-6}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0.5000000000\n</pre>\n<p>There are four positive integers not greater than <var>4</var>: <var>1</var>, <var>2</var>, <var>3</var>, and <var>4</var>. Among them, we have two odd numbers: <var>1</var> and <var>3</var>. Thus, the answer is <var>\\frac{2}{4} = 0.5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0.6000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1.0000000000\n</pre></section>\n</div>\n</span>", "p02898": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p><var>N</var> friends of Takahashi has come to a theme park.</p>\n<p>To ride the most popular roller coaster in the park, you must be at least <var>K</var> centimeters tall.</p>\n<p>The <var>i</var>-th friend is <var>h_i</var> centimeters tall.</p>\n<p>How many of the Takahashi's friends can ride the roller coaster?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var> 1 \\le N \\le 10^5 </var></li>\n<li><var> 1 \\le K \\le 500 </var></li>\n<li><var> 1 \\le h_i \\le 500</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>h_1</var> <var>h_2</var> <var>\\ldots</var> <var>h_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of people among the Takahashi's friends who can ride the roller coaster.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 150\n150 140 100 200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Two of them can ride the roller coaster: the first and fourth friends.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 500\n499\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 1\n100 200 300 400 500\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p02899": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi is a teacher responsible for a class of <var>N</var> students.</p>\n<p>The students are given distinct student numbers from <var>1</var> to <var>N</var>.</p>\n<p>Today, all the students entered the classroom at different times.</p>\n<p>According to Takahashi's record, there were <var>A_i</var> students in the classroom when student number <var>i</var> entered the classroom (including student number <var>i</var>).</p>\n<p>From these records, reconstruct the order in which the students entered the classroom.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var> 1 \\le N \\le 10^5 </var></li>\n<li><var> 1 \\le A_i \\le N </var></li>\n<li><var> A_i \\neq A_j </var> <var>(i \\neq j)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the student numbers of the students in the order the students entered the classroom.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3 1 2\n</pre>\n<p>First, student number <var>3</var> entered the classroom.</p>\n<p>Then, student number <var>1</var> entered the classroom.</p>\n<p>Finally, student number <var>2</var> entered the classroom.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 2 3 4 5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\n8 2 7 3 4 5 6 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8 2 4 5 6 7 3 1\n</pre></section>\n</div>\n</span>", "p02900": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are positive integers <var>A</var> and <var>B</var>.</p>\n<p>Let us choose some number of positive common divisors of <var>A</var> and <var>B</var>.</p>\n<p>Here, any two of the chosen divisors must be coprime.</p>\n<p>At most, how many divisors can we choose?</p>\n<details><summary>Definition of common divisor</summary><div>\n<p>An integer <var>d</var> is said to be a common divisor of integers <var>x</var> and <var>y</var> when <var>d</var> divides both <var>x</var> and <var>y</var>.</p>\n</div></details>\n<details><summary>Definition of being coprime</summary><div>\n<p>Integers <var>x</var> and <var>y</var> are said to be coprime when <var>x</var> and <var>y</var> have no positive common divisors other than <var>1</var>.</p>\n</div></details>\n<details><summary>Definition of dividing</summary><div>\n<p>An integer <var>x</var> is said to divide another integer <var>y</var> when there exists an integer <var>\\alpha</var> such that <var>y = \\alpha x</var>.</p>\n</div></details>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A, B \\leq 10^{12}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of divisors that can be chosen to satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>12 18\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><var>12</var> and <var>18</var> have the following positive common divisors: <var>1</var>, <var>2</var>, <var>3</var>, and <var>6</var>.</p>\n<p><var>1</var> and <var>2</var> are coprime, <var>2</var> and <var>3</var> are coprime, and <var>3</var> and <var>1</var> are coprime, so we can choose <var>1</var>, <var>2</var>, and <var>3</var>, which achieve the maximum result.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>420 660\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 2019\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n<p><var>1</var> and <var>2019</var> have no positive common divisors other than <var>1</var>.</p></section>\n</div>\n</span>", "p02901": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> locked treasure boxes, numbered <var>1</var> to <var>N</var>.</p>\n<p>A shop sells <var>M</var> keys. The <var>i</var>-th key is sold for <var>a_i</var> yen (the currency of Japan), and it can unlock <var>b_i</var> of the boxes: Box <var>c_{i1}</var>, <var>c_{i2}</var>, <var>...</var>, <var>c_{i{b_i}}</var>. Each key purchased can be used any number of times.</p>\n<p>Find the minimum cost required to unlock all the treasure boxes. If it is impossible to unlock all of them, print <var>-1</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 12</var></li>\n<li><var>1 \\leq M \\leq 10^3</var></li>\n<li><var>1 \\leq a_i \\leq 10^5</var></li>\n<li><var>1 \\leq b_i \\leq N</var></li>\n<li><var>1 \\leq c_{i1} &lt; c_{i2} &lt; ... &lt; c_{i{b_i}} \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>b_1</var>\n<var>c_{11}</var> <var>c_{12}</var> <var>...</var> <var>c_{1{b_1}}</var>\n<var>:</var>\n<var>a_M</var> <var>b_M</var>\n<var>c_{M1}</var> <var>c_{M2}</var> <var>...</var> <var>c_{M{b_M}}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum cost required to unlock all the treasure boxes.\nIf it is impossible to unlock all of them, print <var>-1</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n10 1\n1\n15 1\n2\n30 2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>25\n</pre>\n<p>We can unlock all the boxes by purchasing the first and second keys, at the cost of <var>25</var> yen, which is the minimum cost required.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>12 1\n100000 1\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>We cannot unlock all the boxes.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 6\n67786 3\n1 3 4\n3497 1\n2\n44908 3\n2 3 4\n2156 3\n2 3 4\n26230 1\n2\n86918 1\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>69942\n</pre></section>\n</div>\n</span>", "p02902": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a directed graph <var>G</var> with <var>N</var> vertices and <var>M</var> edges.<br/>\nThe vertices are numbered <var>1</var> to <var>N</var>, and the <var>i</var>-th edge is directed from Vertex <var>A_i</var> to Vertex <var>B_i</var>.<br/>\nIt is guaranteed that the graph contains no self-loops or multiple edges.</p>\n<p>Determine whether there exists an induced subgraph (see Notes) of <var>G</var> such that the in-degree and out-degree of every vertex are both <var>1</var>. If the answer is yes, show one such subgraph.<br/>\nHere the null graph is not considered as a subgraph.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>For a directed graph <var>G = (V, E)</var>, we call a directed graph <var>G' = (V', E')</var> satisfying the following conditions an induced subgraph of <var>G</var>:</p>\n<ul>\n<li><var>V'</var> is a (non-empty) subset of <var>V</var>.</li>\n<li><var>E'</var> is the set of all the edges in <var>E</var> that have both endpoints in <var>V'</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>0 \\leq M \\leq 2000</var></li>\n<li><var>1 \\leq A_i,B_i \\leq N</var></li>\n<li><var>A_i \\neq B_i</var></li>\n<li>All pairs <var>(A_i, B_i)</var> are distinct.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>:</var>\n<var>A_M</var> <var>B_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is no induced subgraph of <var>G</var> that satisfies the condition, print <code>-1</code>.\nOtherwise, print an induced subgraph of <var>G</var> that satisfies the condition, in the following format:</p>\n<pre><var>K</var>\n<var>v_1</var>\n<var>v_2</var>\n:\n<var>v_K</var>\n</pre>\n<p>This represents the induced subgraph of <var>G</var> with <var>K</var> vertices whose vertex set is <var>\\{v_1, v_2, \\ldots, v_K\\}</var>. (The order of <var>v_1, v_2, \\ldots, v_K</var> does not matter.)\nIf there are multiple subgraphs of <var>G</var> that satisfy the condition, printing any of them is accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n1 2\n2 3\n2 4\n4 1\n4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n1\n2\n4\n</pre>\n<p>The induced subgraph of <var>G</var> whose vertex set is <var>\\{1, 2, 4\\}</var> has the edge set <var>\\{(1, 2), (2, 4), (4, 1)\\}</var>. The in-degree and out-degree of every vertex in this graph are both <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 5\n1 2\n2 3\n2 4\n1 4\n4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>There is no induced subgraph of <var>G</var> that satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n5 1\n5 2\n6 1\n6 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n2\n3\n4\n5\n</pre></section>\n</div>\n</span>", "p02904": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a permutation <var>(P_0,P_1,\\cdots,P_{N-1})</var> of <var>(0,1,\\cdots,N-1)</var>.</p>\n<p>Now, he will perform the following operation <strong>exactly once</strong>:</p>\n<ul>\n<li>Choose <var>K</var> consecutive elements in <var>P</var> and sort them in ascending order.</li>\n</ul>\n<p>Find the number of permutations that can be produced as <var>P</var> after the operation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200000</var></li>\n<li><var>2 \\leq K \\leq N</var></li>\n<li><var>0 \\leq P_i \\leq N-1</var></li>\n<li><var>P_0,P_1,\\cdots,P_{N-1}</var> are all different.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>P_0</var> <var>P_1</var> <var>\\cdots</var> <var>P_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of permutations that can be produced as <var>P</var> after the operation.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n0 2 1 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Two permutations can be produced as <var>P</var> after the operation: <var>(0,1,2,4,3)</var> and <var>(0,2,1,3,4)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4\n0 1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 4\n2 0 1 3 7 5 4 6 8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n</pre></section>\n</div>\n</span>", "p02905": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have an integer sequence of length <var>N</var>: <var>A_0,A_1,\\cdots,A_{N-1}</var>.</p>\n<p>Find the following sum (<var>\\mathrm{lcm}(a, b)</var> denotes the least common multiple of <var>a</var> and <var>b</var>):</p>\n<ul>\n<li><var>\\sum_{i=0}^{N-2} \\sum_{j=i+1}^{N-1} \\mathrm{lcm}(A_i,A_j)</var></li>\n</ul>\n<p>Since the answer may be enormous, compute it modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 200000</var></li>\n<li><var>1 \\leq A_i \\leq 1000000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_0\\ A_1\\ \\cdots\\ A_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 4 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>22\n</pre>\n<p><var>\\mathrm{lcm}(2,4)+\\mathrm{lcm}(2,6)+\\mathrm{lcm}(4,6)=4+6+12=22</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8\n1 2 3 4 6 8 12 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>313\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n356822 296174 484500 710640 518322 888250 259161 609120 592348 713644\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>353891724\n</pre></section>\n</div>\n</span>", "p02906": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke's mother gave Snuke an undirected graph consisting of <var>N</var> vertices numbered <var>0</var> to <var>N-1</var> and <var>M</var> edges.\nThis graph was connected and contained no parallel edges or self-loops.</p>\n<p>One day, Snuke broke this graph.\nFortunately, he remembered <var>Q</var> clues about the graph.\nThe <var>i</var>-th clue (<var>0 \\leq i \\leq Q-1</var>) is represented as integers <var>A_i,B_i,C_i</var> and means the following:</p>\n<ul>\n<li>If <var>C_i=0</var>: there was exactly one simple path (a path that never visits the same vertex twice) from Vertex <var>A_i</var> to <var>B_i</var>.</li>\n<li>If <var>C_i=1</var>: there were two or more simple paths from Vertex <var>A_i</var> to <var>B_i</var>.</li>\n</ul>\n<p>Snuke is not sure if his memory is correct, and worried whether there is a graph that matches these <var>Q</var> clues.\nDetermine if there exists a graph that matches Snuke's memory.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>N-1 \\leq M \\leq N \\times (N-1)/2</var></li>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>0 \\leq A_i,B_i \\leq N-1</var></li>\n<li><var>A_i \\neq B_i</var></li>\n<li><var>0 \\leq C_i \\leq 1</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>Q</var>\n<var>A_0</var> <var>B_0</var> <var>C_0</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var>\n<var>\\vdots</var>\n<var>A_{Q-1}</var> <var>B_{Q-1}</var> <var>C_{Q-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there exists a graph that matches Snuke's memory, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 5 3\n0 1 0\n1 2 1\n2 3 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>For example, consider a graph with edges <var>(0,1),(1,2),(1,4),(2,3),(2,4)</var>. This graph matches the clues.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4 3\n0 1 0\n1 2 1\n2 3 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 9 9\n7 6 0\n4 5 1\n9 7 0\n2 9 0\n2 3 0\n4 1 0\n8 0 0\n9 1 0\n3 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02907": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke found a random number generator.\nIt generates an integer between <var>0</var> and <var>N-1</var> (inclusive).\nAn integer sequence <var>A_0, A_1, \\cdots, A_{N-1}</var>  represents the probability that each of these integers is generated. The integer <var>i</var> (<var>0 \\leq i \\leq N-1</var>) is generated with probability <var>A_i / S</var>, where <var>S = \\sum_{i=0}^{N-1} A_i</var>. The process of generating an integer is done independently each time the generator is executed.</p>\n<p>Now, Snuke will repeatedly generate an integer with this generator until the following condition is satisfied:</p>\n<ul>\n<li>For every <var>i</var> (<var>0 \\leq i \\leq N-1</var>), the integer <var>i</var> has been generated at least <var>B_i</var> times so far.</li>\n</ul>\n<p>Find the expected number of times Snuke will generate an integer, and print it modulo <var>998244353</var>.\nMore formally, represent the expected number of generations as an irreducible fraction <var>P/Q</var>. Then, there exists a unique integer <var>R</var> such that <var>R \\times Q \\equiv P \\pmod{998244353},\\ 0 \\leq R &lt; 998244353</var>, so print this <var>R</var>.</p>\n<p>From the constraints of this problem, we can prove that the expected number of generations is a finite rational number, and its integer representation modulo <var>998244353</var> can be defined.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 400</var></li>\n<li><var>1 \\leq A_i</var></li>\n<li><var>\\sum_{i=0}^{N-1} A_i \\leq 400</var></li>\n<li><var>1 \\leq B_i</var></li>\n<li><var>\\sum_{i=0}^{N-1} B_i \\leq 400</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_0</var> <var>B_0</var>\n<var>A_1</var> <var>B_1</var>\n<var>\\vdots</var>\n<var>A_{N-1}</var> <var>B_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the expected number of times Snuke will generate an integer, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 1\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The expected number of times Snuke will generate an integer is <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 3\n2 2\n3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>971485877\n</pre>\n<p>The expected number of times Snuke will generate an integer is <var>132929/7200</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15\n29 3\n78 69\n19 15\n82 14\n9 120\n14 51\n3 7\n6 14\n28 4\n13 12\n1 5\n32 30\n49 24\n35 23\n2 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>371626143\n</pre></section>\n</div>\n</span>", "p02908": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has permutations <var>(P_0,P_1,\\cdots,P_{N-1})</var> and <var>(Q_0,Q_1,\\cdots,Q_{N-1})</var> of <var>(0,1,\\cdots,N-1)</var>.</p>\n<p>Now, he will make new permutations <var>A</var> and <var>B</var> of <var>(0,1,\\cdots,N-1)</var>, under the following conditions:</p>\n<ul>\n<li>For each <var>i</var> (<var>0 \\leq i \\leq N-1</var>), <var>A_i</var> should be <var>i</var> or <var>P_i</var>.</li>\n<li>For each <var>i</var> (<var>0 \\leq i \\leq N-1</var>), <var>B_i</var> should be <var>i</var> or <var>Q_i</var>.</li>\n</ul>\n<p>Let us define the distance of permutations <var>A</var> and <var>B</var> as the number of indices <var>i</var> such that <var>A_i \\neq B_i</var>.\nFind the maximum possible distance of <var>A</var> and <var>B</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100000</var></li>\n<li><var>0 \\leq P_i \\leq N-1</var></li>\n<li><var>P_0,P_1,\\cdots,P_{N-1}</var> are all different.</li>\n<li><var>0 \\leq Q_i \\leq N-1</var></li>\n<li><var>Q_0,Q_1,\\cdots,Q_{N-1}</var> are all different.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_0</var> <var>P_1</var> <var>\\cdots</var> <var>P_{N-1}</var>\n<var>Q_0</var> <var>Q_1</var> <var>\\cdots</var> <var>Q_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible distance of <var>A</var> and <var>B</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 1 3 0\n0 2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>For example, if we make <var>A=(0,1,2,3)</var> and <var>B=(0,2,3,1)</var>, the distance will be <var>3</var>, which is the maximum result possible.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n0 4 5 3 7 8 2 1 9 6\n3 8 5 6 4 0 2 1 7 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>32\n22 31 30 29 7 17 16 3 14 9 19 11 2 5 10 1 25 18 15 24 20 0 12 21 27 4 26 28 8 6 23 13\n22 3 2 7 17 9 16 4 14 8 19 26 28 5 10 1 25 18 15 13 11 0 12 23 21 20 29 24 27 6 30 31\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>28\n</pre></section>\n</div>\n</span>", "p02909": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>The weather in Takahashi's town changes day by day, in the following cycle: Sunny, Cloudy, Rainy, Sunny, Cloudy, Rainy, ...</p>\n<p>Given is a string <var>S</var> representing the weather in the town today. Predict the weather tomorrow.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>S</var> is <code>Sunny</code>, <code>Cloudy</code>, or <code>Rainy</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print a string representing the expected weather tomorrow, in the same format in which input is given.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>Sunny\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Cloudy\n</pre>\n<p>In Takahashi's town, a sunny day is followed by a cloudy day.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>Rainy\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Sunny\n</pre></section>\n</div>\n</span>", "p02910": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi will do a tap dance. The dance is described by a string <var>S</var> where each character is <code>L</code>, <code>R</code>, <code>U</code>, or <code>D</code>. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.</p>\n<p><var>S</var> is said to be <em>easily playable</em> if and only if it satisfies both of the following conditions:</p>\n<ul>\n<li>Every character in an odd position (<var>1</var>-st, <var>3</var>-rd, <var>5</var>-th, <var>\\ldots</var>) is <code>R</code>, <code>U</code>, or <code>D</code>.</li>\n<li>Every character in an even position (<var>2</var>-nd, <var>4</var>-th, <var>6</var>-th, <var>\\ldots</var>) is <code>L</code>, <code>U</code>, or <code>D</code>.</li>\n</ul>\n<p>Your task is to print <code>Yes</code> if <var>S</var> is easily playable, and <code>No</code> otherwise.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>S</var> is a string of length between <var>1</var> and <var>100</var> (inclusive).</li>\n<li>Each character of <var>S</var> is <code>L</code>, <code>R</code>, <code>U</code>, or <code>D</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print <code>Yes</code> if <var>S</var> is easily playable, and <code>No</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>RUDLUDR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Every character in an odd position (<var>1</var>-st, <var>3</var>-rd, <var>5</var>-th, <var>7</var>-th) is <code>R</code>, <code>U</code>, or <code>D</code>.</p>\n<p>Every character in an even position (<var>2</var>-nd, <var>4</var>-th, <var>6</var>-th) is <code>L</code>, <code>U</code>, or <code>D</code>.</p>\n<p>Thus, <var>S</var> is easily playable.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>DULL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>The <var>3</var>-rd character is not <code>R</code>, <code>U</code>, nor <code>D</code>, so <var>S</var> is not easily playable.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>UUUUUUUUUUUUUUU\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>ULURU\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>RDULULDURURLRDULRLR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02911": "<span class=\"lang-en\">\n<p>Score: <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi has decided to hold fastest-finger-fast quiz games. Kizahashi, who is in charge of making the scoreboard, is struggling to write the program that manages the players' scores in a game, which proceeds as follows.</p>\n<p>A game is played by <var>N</var> players, numbered <var>1</var> to <var>N</var>. At the beginning of a game, each player has <var>K</var> points.</p>\n<p>When a player correctly answers a question, each of the other <var>N-1</var> players receives minus one (<var>-1</var>) point. There is no other factor that affects the players' scores.</p>\n<p>At the end of a game, the players with <var>0</var> points or lower are eliminated, and the remaining players survive.</p>\n<p>In the last game, the players gave a total of <var>Q</var> correct answers, the <var>i</var>-th of which was given by Player <var>A_i</var>.\nFor Kizahashi, write a program that determines whether each of the <var>N</var> players survived this game.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq N\\ (1 \\leq i \\leq Q)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var> <var>Q</var>\n<var>A_1</var>\n<var>A_2</var>\n<var>.</var>\n<var>.</var>\n<var>.</var>\n<var>A_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print <var>N</var> lines. The <var>i</var>-th line should contain <code>Yes</code> if Player <var>i</var> survived the game, and <code>No</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 3 4\n3\n1\n3\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>No\nNo\nYes\nNo\nNo\nNo\n</pre>\n<p>In the beginning, the players' scores are <var>(3, 3, 3, 3, 3, 3)</var>.</p>\n<ul>\n<li>Player <var>3</var> correctly answers a question. The players' scores are now <var>(2, 2, 3, 2, 2, 2)</var>.</li>\n<li>Player <var>1</var> correctly answers a question. The players' scores are now <var>(2, 1, 2, 1, 1, 1)</var>.</li>\n<li>Player <var>3</var> correctly answers a question. The players' scores are now <var>(1, 0, 2, 0, 0, 0)</var>.</li>\n<li>Player <var>2</var> correctly answers a question. The players' scores are now <var>(0, 0, 1, -1, -1, -1)</var>.</li>\n</ul>\n<p>Players <var>1, 2, 4, 5</var> and <var>6</var>, who have <var>0</var> points or lower, are eliminated, and Player <var>3</var> survives this game.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 5 4\n3\n1\n3\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\nYes\nYes\nYes\nYes\nYes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 13 15\n3\n1\n4\n1\n5\n9\n2\n6\n5\n3\n5\n8\n9\n7\n9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\nNo\nNo\nNo\nYes\nNo\nNo\nNo\nYes\nNo\n</pre></section>\n</div>\n</span>", "p02912": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is going to buy <var>N</var> items one by one.</p>\n<p>The price of the <var>i</var>-th item he buys is <var>A_i</var> yen (the currency of Japan).</p>\n<p>He has <var>M</var> discount tickets, and he can use any number of them when buying an item.</p>\n<p>If <var>Y</var> tickets are used when buying an item priced <var>X</var> yen, he can get the item for <var>\\frac{X}{2^Y}</var> (rounded down to the nearest integer) yen.</p>\n<p>What is the minimum amount of money required to buy all the items?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N, M \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum amount of money required to buy all the items.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n2 13 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>We can buy all the items for <var>9</var> yen, as follows:</p>\n<ul>\n<li>Buy the <var>1</var>-st item for <var>2</var> yen without tickets.</li>\n<li>Buy the <var>2</var>-nd item for <var>3</var> yen with <var>2</var> tickets.</li>\n<li>Buy the <var>3</var>-rd item for <var>4</var> yen with <var>1</var> ticket.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4\n1 9 3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 100000\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>We can buy the item priced <var>1000000000</var> yen for <var>0</var> yen with <var>100000</var> tickets.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>9500000000\n</pre></section>\n</div>\n</span>", "p02913": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var> of length <var>N</var>.</p>\n<p>Find the maximum length of a non-empty string that occurs twice or more in <var>S</var> as contiguous substrings without overlapping.</p>\n<p>More formally, find the maximum positive integer <var>len</var> such that there exist integers <var>l_1</var> and <var>l_2</var> ( <var>1 \\leq l_1, l_2 \\leq N - len + 1</var> ) that satisfy the following:</p>\n<ul>\n<li>\n<p><var>l_1 + len \\leq l_2</var></p>\n</li>\n<li>\n<p><var>S[l_1+i] = S[l_2+i] (i = 0, 1, ..., len - 1)</var></p>\n</li>\n</ul>\n<p>If there is no such integer <var>len</var>, print <var>0</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 5 \\times 10^3</var></li>\n<li><var>|S| = N</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum length of a non-empty string that occurs twice or more in <var>S</var> as contiguous substrings without overlapping. If there is no such non-empty string, print <var>0</var> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\nababa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The strings satisfying the conditions are: <code>a</code>, <code>b</code>, <code>ab</code>, and <code>ba</code>. The maximum length among them is <var>2</var>, which is the answer.\nNote that <code>aba</code> occurs twice in <var>S</var> as contiguous substrings, but there is no pair of integers <var>l_1</var> and <var>l_2</var> mentioned in the statement such that <var>l_1 + len \\leq l_2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\nxy\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>No non-empty string satisfies the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>13\nstrangeorange\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p02914": "<span class=\"lang-en\">\n<p>Score: <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have <var>N</var> non-negative integers: <var>A_1, A_2, ..., A_N</var>.</p>\n<p>Consider painting at least one and at most <var>N-1</var> integers among them in red, and painting the rest in blue.</p>\n<p>Let the <em>beauty</em> of the painting be the <var>\\mbox{XOR}</var> of the integers painted in red, plus the <var>\\mbox{XOR}</var> of the integers painted in blue.</p>\n<p>Find the maximum possible beauty of the painting.</p>\n<details>\n<summary style=\"display: list-item; outline: none;\">What is <var>\\mbox{XOR}</var>?</summary>\n<p>\nThe bitwise <var>\\mbox{XOR}</var> <var>x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n</var> of <var>n</var> non-negative integers <var>x_1, x_2, \\ldots, x_n</var> is defined as follows:\n<ul>\n<li> When <var>x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if the number of integers among <var>x_1, x_2, \\ldots, x_n</var> whose binary representations have <var>1</var> in the <var>2^k</var>'s place is odd, and <var>0</var> if that count is even. </li>\n</ul>\nFor example, <var>3 \\oplus 5 = 6</var>.\n</p>\n</details>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq A_i &lt; 2^{60}\\ (1 \\leq i \\leq N)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the maximum possible beauty of the painting.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 6 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>If we paint <var>3</var>, <var>6</var>, <var>5</var> in blue, red, blue, respectively, the beauty will be <var>(6) + (3 \\oplus 5) = 12</var>.</p>\n<p>There is no way to paint the integers resulting in greater beauty than <var>12</var>, so the answer is <var>12</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n23 36 66 65\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>188\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20\n1008288677408720767 539403903321871999 1044301017184589821 215886900497862655 504277496111605629 972104334925272829 792625803473366909 972333547668684797 467386965442856573 755861732751878143 1151846447448561405 467257771752201853 683930041385277311 432010719984459389 319104378117934975 611451291444233983 647509226592964607 251832107792119421 827811265410084479 864032478037725181\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2012721721873704572\n</pre>\n<p><var>A_i</var> and the answer may not fit into a <var>32</var>-bit integer type.</p></section>\n</div>\n</span>", "p02915": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is going to set a <var>3</var>-character password.</p>\n<p>How many possible passwords are there if each of its characters must be a digit between <var>1</var> and <var>N</var> (inclusive)?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 9</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible passwords.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>There are eight possible passwords: <code>111</code>, <code>112</code>, <code>121</code>, <code>122</code>, <code>211</code>, <code>212</code>, <code>221</code>, and <code>222</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>There is only one possible password if you can only use one kind of character.</p></section>\n</div>\n</span>", "p02916": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi went to an all-you-can-eat buffet with <var>N</var> kinds of dishes and ate all of them (Dish <var>1</var>, Dish <var>2</var>, <var>\\ldots</var>, Dish <var>N</var>) once.</p>\n<p>The <var>i</var>-th dish <var>(1 \\leq i \\leq N)</var> he ate was Dish <var>A_i</var>.</p>\n<p>When he eats Dish <var>i</var> <var>(1 \\leq i \\leq N)</var>, he gains <var>B_i</var> satisfaction points.</p>\n<p>Additionally, when he eats Dish <var>i+1</var> just after eating Dish <var>i</var> <var>(1 \\leq i \\leq N - 1)</var>, he gains <var>C_i</var> more satisfaction points.</p>\n<p>Find the sum of the satisfaction points he gained.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 20</var></li>\n<li><var>1 \\leq A_i \\leq N</var></li>\n<li><var>A_1, A_2, ..., A_N</var> are all different.</li>\n<li><var>1 \\leq B_i \\leq 50</var></li>\n<li><var>1 \\leq C_i \\leq 50</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n<var>B_1</var> <var>B_2</var> <var>...</var> <var>B_N</var>\n<var>C_1</var> <var>C_2</var> <var>...</var> <var>C_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the satisfaction points Takahashi gained, as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 1 2\n2 5 4\n3 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>14\n</pre>\n<p>Takahashi gained <var>14</var> satisfaction points in total, as follows:</p>\n<ul>\n<li>First, he ate Dish <var>3</var> and gained <var>4</var> satisfaction points.</li>\n<li>Next, he ate Dish <var>1</var> and gained <var>2</var> satisfaction points.</li>\n<li>Lastly, he ate Dish <var>2</var> and gained <var>5 + 3 = 8</var> satisfaction points.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n2 3 4 1\n13 5 8 24\n45 9 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>74\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1 2\n50 50\n50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>150\n</pre></section>\n</div>\n</span>", "p02917": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an integer sequence <var>A</var> of length <var>N</var> whose values are unknown.</p>\n<p>Given is an integer sequence <var>B</var> of length <var>N-1</var> which is known to satisfy the following:</p>\n<p><var> B_i \\geq \\max(A_i, A_{i+1}) </var></p>\n<p>Find the maximum possible sum of the elements of <var>A</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq B_i \\leq 10^5</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>B_1</var> <var>B_2</var> <var>...</var> <var>B_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the elements of <var>A</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p><var>A</var> can be, for example, ( <var>2</var> , <var>1</var> , <var>5</var> ), ( <var>-1</var> , <var>-2</var> , <var>-3</var> ), or ( <var>2</var> , <var>2</var> , <var>5</var> ). Among those candidates, <var>A</var> = ( <var>2</var> , <var>2</var> , <var>5</var> ) has the maximum possible sum.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n0 153 10 10 23\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>53\n</pre></section>\n</div>\n</span>", "p02918": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> people standing in a queue from west to east.</p>\n<p>Given is a string <var>S</var> of length <var>N</var> representing the directions of the people.\nThe <var>i</var>-th person from the west is facing west if the <var>i</var>-th character of <var>S</var> is <code>L</code>, and east if that character of <var>S</var> is <code>R</code>.</p>\n<p>A person is happy if the person in front of him/her is facing the same direction.\nIf no person is standing in front of a person, however, he/she is not happy.</p>\n<p>You can perform the following operation any number of times between <var>0</var> and <var>K</var> (inclusive):</p>\n<p>Operation: Choose integers <var>l</var> and <var>r</var> such that <var>1 \\leq l \\leq r \\leq N</var>, and rotate by <var>180</var> degrees the part of the queue: the <var>l</var>-th, <var>(l+1)</var>-th, <var>...</var>, <var>r</var>-th persons. That is, for each <var>i = 0, 1, ..., r-l</var>, the <var>(l + i)</var>-th person from the west will stand the <var>(r - i)</var>-th from the west after the operation, facing east if he/she is facing west now, and vice versa.</p>\n<p>What is the maximum possible number of happy people you can have?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var> is an integer satisfying <var>1 \\leq N \\leq 10^5</var>.</li>\n<li><var>K</var> is an integer satisfying <var>1 \\leq K \\leq 10^5</var>.</li>\n<li><var>|S| = N</var></li>\n<li>Each character of <var>S</var> is <code>L</code> or <code>R</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of happy people after at most <var>K</var> operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 1\nLRLRRL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>If we choose <var>(l, r) = (2, 5)</var>, we have <code>LLLRLL</code>, where the <var>2</var>-nd, <var>3</var>-rd, and <var>6</var>-th persons from the west are happy.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>13 3\nLRRLRLRRLRLLR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 1\nLLLLLRRRRR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>9\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>9 2\nRRRLRLRLL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>7\n</pre></section>\n</div>\n</span>", "p02919": "<span class=\"lang-en\">\n<p>Score: <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Given is a permutation <var>P</var> of <var>\\{1, 2, \\ldots, N\\}</var>.</p>\n<p>For a pair <var>(L, R) (1 \\le L \\lt R \\le N)</var>, let <var>X_{L, R}</var> be the second largest value among <var>P_L, P_{L+1}, \\ldots, P_R</var>.</p>\n<p>Find <var>\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} X_{L,R}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var> 2 \\le N \\le 10^5 </var></li>\n<li><var> 1 \\le P_i \\le N </var></li>\n<li><var> P_i \\neq P_j </var> <var>(i \\neq j)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_1</var> <var>P_2</var> <var>\\ldots</var> <var>P_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print <var>\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} X_{L,R}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p><var>X_{1, 2} = 2, X_{1, 3} = 2</var>, and <var>X_{2, 3} = 1</var>, so the sum is <var>2 + 2 + 1 = 5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>30\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\n8 2 7 3 4 5 6 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>136\n</pre></section>\n</div>\n</span>", "p02920": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have one slime.</p>\n<p>You can set the <em>health</em> of this slime to any integer value of your choice.</p>\n<p>A slime reproduces every second by spawning another slime that has strictly less health. You can freely choose the health of each new slime. The first reproduction of our slime will happen in one second.</p>\n<p>Determine if it is possible to set the healths of our first slime and the subsequent slimes spawn so that the multiset of the healths of the <var>2^N</var> slimes that will exist in <var>N</var> seconds equals a multiset <var>S</var>.</p>\n<p>Here <var>S</var> is a multiset containing <var>2^N</var> (possibly duplicated) integers: <var>S_1,~S_2,~...,~S_{2^N}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 18</var></li>\n<li><var>1 \\leq S_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_1</var> <var>S_2</var> <var>...</var> <var>S_{2^N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to set the healths of the first slime and the subsequent slimes spawn so that the multiset of the healths of the <var>2^N</var> slimes that will exist in <var>N</var> seconds equals <var>S</var>, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n4 2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>We will show one way to make the multiset of the healths of the slimes that will exist in <var>2</var> seconds equal to <var>S</var>.</p>\n<p>First, set the health of the first slime to <var>4</var>.</p>\n<p>By letting the first slime spawn a slime whose health is <var>3</var>, the healths of the slimes that exist in <var>1</var> second can be <var>4,~3</var>.</p>\n<p>Then, by letting the first slime spawn a slime whose health is <var>2</var>, and letting the second slime spawn a slime whose health is <var>1</var>, the healths of the slimes that exist in <var>2</var> seconds can be <var>4,~3,~2,~1</var>, which is equal to <var>S</var> as multisets.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n1 2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n<p><var>S</var> may contain multiple instances of the same integer.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5\n4 3 5 3 1 2 7 8 7 4 6 3 7 2 3 6 2 7 3 2 6 7 3 4 6 7 3 4 2 5 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02921": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You will be given a string <var>S</var> of length <var>3</var> representing the weather forecast for three days in the past.</p>\n<p>The <var>i</var>-th character <var>(1 \\leq i \\leq 3)</var> of <var>S</var> represents the forecast for the <var>i</var>-th day. <code>S</code>, <code>C</code>, and <code>R</code> stand for sunny, cloudy, and rainy, respectively.</p>\n<p>You will also be given a string <var>T</var> of length <var>3</var> representing the actual weather on those three days.</p>\n<p>The <var>i</var>-th character <var>(1 \\leq i \\leq 3)</var> of <var>S</var> represents the actual weather on the <var>i</var>-th day. <code>S</code>, <code>C</code>, and <code>R</code> stand for sunny, cloudy, and rainy, respectively.</p>\n<p>Print the number of days for which the forecast was correct.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> and <var>T</var> are strings of length <var>3</var> each.</li>\n<li><var>S</var> and <var>T</var> consist of <code>S</code>, <code>C</code>, and <code>R</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of days for which the forecast was correct.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>CSS\nCSR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<ul>\n<li>For the first day, it was forecast to be cloudy, and it was indeed cloudy.</li>\n<li>For the second day, it was forecast to be sunny, and it was indeed sunny.</li>\n<li>For the third day, it was forecast to be sunny, but it was rainy.</li>\n</ul>\n<p>Thus, the forecast was correct for two days in this case.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>SSR\nSSR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>RRR\nSSS\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02922": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi's house has only one socket.</p>\n<p>Takahashi wants to extend it with some number of power strips, each with <var>A</var> sockets, into <var>B</var> or more empty sockets.</p>\n<p>One power strip with <var>A</var> sockets can extend one empty socket into <var>A</var> empty sockets.</p>\n<p>Find the minimum number of power strips required.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq A \\leq 20</var></li>\n<li><var>1 \\leq B \\leq 20</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of power strips required.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><var>3</var> power strips, each with <var>4</var> sockets, extend the socket into <var>10</var> empty sockets.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p><var>2</var> power strips, each with <var>8</var> sockets, extend the socket into <var>15</var> empty sockets.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre></section>\n</div>\n</span>", "p02923": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> squares arranged in a row from left to right.</p>\n<p>The height of the <var>i</var>-th square from the left is <var>H_i</var>.</p>\n<p>You will land on a square of your choice, then repeat moving to the adjacent square <strong>on the right</strong> as long as the height of the next square is not greater than that of the current square.</p>\n<p>Find the maximum number of times you can move.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq H_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>H_1</var> <var>H_2</var> <var>...</var> <var>H_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of times you can move.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n10 4 8 7 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>By landing on the third square from the left, you can move to the right twice.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7\n4 4 5 6 6 5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>By landing on the fourth square from the left, you can move to the right three times.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02924": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For an integer <var>N</var>, we will choose a permutation <var>\\{P_1, P_2, ..., P_N\\}</var> of <var>\\{1, 2, ..., N\\}</var>.</p>\n<p>Then, for each <var>i=1,2,...,N</var>, let <var>M_i</var> be the remainder when <var>i</var> is divided by <var>P_i</var>.</p>\n<p>Find the maximum possible value of <var>M_1 + M_2 + \\cdots + M_N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var> is an integer satisfying <var>1 \\leq N \\leq 10^9</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible value of <var>M_1 + M_2 + \\cdots + M_N</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>When the permutation <var>\\{P_1, P_2\\} = \\{2, 1\\}</var> is chosen, <var>M_1 + M_2 = 1 + 0 = 1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>78\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02925": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> players will participate in a tennis tournament. We will call them Player <var>1</var>, Player <var>2</var>, <var>\\ldots</var>, Player <var>N</var>.</p>\n<p>The tournament is round-robin format, and there will be <var>N(N-1)/2</var> matches in total.\nIs it possible to schedule these matches so that all of the following conditions are satisfied? If the answer is yes, also find the minimum number of days required.</p>\n<ul>\n<li>Each player plays at most one matches in a day.</li>\n<li>Each player <var>i</var> <var>(1 \\leq i \\leq N)</var> plays one match against Player <var>A_{i, 1}, A_{i, 2}, \\ldots, A_{i, N-1}</var> in this order.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 1000</var></li>\n<li><var>1 \\leq A_{i, j} \\leq N</var></li>\n<li><var>A_{i, j} \\neq i</var></li>\n<li><var>A_{i, 1}, A_{i, 2}, \\ldots, A_{i, N-1}</var> are all different.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_{1, 1}</var> <var>A_{1, 2}</var> <var>\\ldots</var> <var>A_{1, N-1}</var>\n<var>A_{2, 1}</var> <var>A_{2, 2}</var> <var>\\ldots</var> <var>A_{2, N-1}</var>\n<var>:</var>\n<var>A_{N, 1}</var> <var>A_{N, 2}</var> <var>\\ldots</var> <var>A_{N, N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to schedule all the matches so that all of the conditions are satisfied, print the minimum number of days required; if it is impossible, print <code>-1</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 3\n1 3\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>All the conditions can be satisfied if the matches are scheduled for three days as follows:</p>\n<ul>\n<li>Day <var>1</var>: Player <var>1</var> vs Player <var>2</var></li>\n<li>Day <var>2</var>: Player <var>1</var> vs Player <var>3</var></li>\n<li>Day <var>3</var>: Player <var>2</var> vs Player <var>3</var></li>\n</ul>\n<p>This is the minimum number of days required.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n2 3 4\n1 3 4\n4 1 2\n3 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n<p>All the conditions can be satisfied if the matches are scheduled for four days as follows:</p>\n<ul>\n<li>Day <var>1</var>: Player <var>1</var> vs Player <var>2</var>, Player <var>3</var> vs Player <var>4</var></li>\n<li>Day <var>2</var>: Player <var>1</var> vs Player <var>3</var></li>\n<li>Day <var>3</var>: Player <var>1</var> vs Player <var>4</var>, Player <var>2</var> vs Player <var>3</var></li>\n<li>Day <var>4</var>: Player <var>2</var> vs Player <var>4</var></li>\n</ul>\n<p>This is the minimum number of days required.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n2 3\n3 1\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n<p>Any scheduling of the matches violates some condition.</p></section>\n</div>\n</span>", "p02926": "<span class=\"lang-en\">\n<p>Score: <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>E869120 is initially standing at the origin <var>(0, 0)</var> in a two-dimensional plane.</p>\n<p>He has <var>N</var> engines, which can be used as follows:</p>\n<ul>\n<li>When E869120 uses the <var>i</var>-th engine, his <var>X</var>- and <var>Y</var>-coordinate change by <var>x_i</var> and <var>y_i</var>, respectively. In other words, if E869120 uses the <var>i</var>-th engine from coordinates <var>(X, Y)</var>, he will move to the coordinates <var>(X + x_i, Y + y_i)</var>.</li>\n<li>E869120 can use these engines in any order, but each engine can be used at most once. He may also choose not to use some of the engines.</li>\n</ul>\n<p>He wants to go as far as possible from the origin.\nLet <var>(X, Y)</var> be his final coordinates. Find the maximum possible value of <var>\\sqrt{X^2 + Y^2}</var>, the distance from the origin.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>-1 \\ 000 \\ 000 \\leq x_i \\leq 1 \\ 000 \\ 000</var></li>\n<li><var>-1 \\ 000 \\ 000 \\leq y_i \\leq 1 \\ 000 \\ 000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>x_2</var> <var>y_2</var>\n <var>:</var> <var>:</var>\n<var>x_N</var> <var>y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the maximum possible final distance from the origin, as a real value.\nYour output is considered correct when the relative or absolute error from the true answer is at most <var>10^{-10}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n0 10\n5 -5\n-5 -5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10.000000000000000000000000000000000000000000000000\n</pre>\n<p>The final distance from the origin can be <var>10</var> if we use the engines in one of the following three ways:</p>\n<ul>\n<li>Use Engine <var>1</var> to move to <var>(0, 10)</var>.</li>\n<li>Use Engine <var>2</var> to move to <var>(5, -5)</var>, and then use Engine <var>3</var> to move to <var>(0, -10)</var>.</li>\n<li>Use Engine <var>3</var> to move to <var>(-5, -5)</var>, and then use Engine <var>2</var> to move to <var>(0, -10)</var>.</li>\n</ul>\n<p>The distance cannot be greater than <var>10</var>, so the maximum possible distance is <var>10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 1\n1 0\n0 1\n-1 0\n0 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2.828427124746190097603377448419396157139343750753\n</pre>\n<p>The maximum possible final distance is <var>2 \\sqrt{2} = 2.82842...</var>.\nOne of the ways to achieve it is:</p>\n<ul>\n<li>Use Engine <var>1</var> to move to <var>(1, 1)</var>, and then use Engine <var>2</var> to move to <var>(2, 1)</var>, and finally use Engine <var>3</var> to move to <var>(2, 2)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n1 1\n2 2\n3 3\n4 4\n5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>21.213203435596425732025330863145471178545078130654\n</pre>\n<p>If we use all the engines in the order <var>1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 5</var>, we will end up at <var>(15, 15)</var>, with the distance <var>15 \\sqrt{2} = 21.2132...</var> from the origin.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3\n0 0\n0 1\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>1.414213562373095048801688724209698078569671875376\n</pre>\n<p>There can be useless engines with <var>(x_i, y_i) = (0, 0)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>1\n90447 91000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>128303.000000000000000000000000000000000000000000000000\n</pre>\n<p>Note that there can be only one engine.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>2\n96000 -72000\n-72000 54000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>120000.000000000000000000000000000000000000000000000000\n</pre>\n<p>There can be only two engines, too.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 7</h3><pre>10\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 7</h3><pre>148.660687473185055226120082139313966514489855137208\n</pre></section>\n</div>\n</span>", "p02927": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Today is August <var>24</var>, one of the five Product Days in a year.</p>\n<p>A date <var>m</var>-<var>d</var> (<var>m</var> is the month, <var>d</var> is the date) is called a Product Day when <var>d</var> is a two-digit number, and all of the following conditions are satisfied (here <var>d_{10}</var> is the tens digit of the day and <var>d_1</var> is the ones digit of the day):</p>\n<ul>\n<li><var>d_1 \\geq 2</var></li>\n<li><var>d_{10} \\geq 2</var></li>\n<li><var>d_1 \\times d_{10} = m</var></li>\n</ul>\n<p>Takahashi wants more Product Days, and he made a new calendar called Takahashi Calendar where a year consists of <var>M</var> month from Month <var>1</var> to Month <var>M</var>, and each month consists of <var>D</var> days from Day <var>1</var> to Day <var>D</var>.</p>\n<p>In Takahashi Calendar, how many Product Days does a year have?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq M \\leq 100</var></li>\n<li><var>1 \\leq D \\leq 99</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>M</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of Product Days in a year in Takahashi Calender.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>15 40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>There are <var>10</var> Product Days in a year, as follows (<var>m</var>-<var>d</var> denotes Month <var>m</var>, Day <var>d</var>):</p>\n<ul>\n<li><var>4</var>-<var>22</var></li>\n<li><var>6</var>-<var>23</var></li>\n<li><var>6</var>-<var>32</var></li>\n<li><var>8</var>-<var>24</var></li>\n<li><var>9</var>-<var>33</var></li>\n<li><var>10</var>-<var>25</var></li>\n<li><var>12</var>-<var>26</var></li>\n<li><var>12</var>-<var>34</var></li>\n<li><var>14</var>-<var>27</var></li>\n<li><var>15</var>-<var>35</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>12 31\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02928": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a sequence of <var>N</var> integers <var>A~=~A_0,~A_1,~...,~A_{N - 1}</var>.</p>\n<p>Let <var>B</var> be a sequence of <var>K \\times N</var> integers obtained by concatenating <var>K</var> copies of <var>A</var>. For example, if <var>A~=~1,~3,~2</var> and <var>K~=~2</var>, <var>B~=~1,~3,~2,~1,~3,~2</var>.</p>\n<p>Find the inversion number of <var>B</var>, modulo <var>10^9 + 7</var>.</p>\n<p>Here the inversion number of <var>B</var> is defined as the number of ordered pairs of integers <var>(i,~j)~(0 \\leq i &lt; j \\leq K \\times N - 1)</var> such that  <var>B_i &gt; B_j</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 2000</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>1 \\leq A_i \\leq 2000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_0</var> <var>A_1</var> <var>...</var> <var>A_{N - 1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the inversion number of <var>B</var>, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>In this case, <var>B~=~2,~1,~2,~1</var>. We have:</p>\n<ul>\n<li><var>B_0 &gt; B_1</var></li>\n<li><var>B_0 &gt; B_3</var></li>\n<li><var>B_2 &gt; B_3</var></li>\n</ul>\n<p>Thus, the inversion number of <var>B</var> is <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 5\n1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p><var>A</var> may contain multiple occurrences of the same number.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 998244353\n10 9 8 7 5 6 3 4 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>185297239\n</pre>\n<p>Be sure to print the output modulo <var>10^9 + 7</var>.</p></section>\n</div>\n</span>", "p02929": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>2N</var> squares arranged from left to right. You are given a string of length <var>2N</var> representing the color of each of the squares.</p>\n<p>The color of the <var>i</var>-th square from the left is black if the <var>i</var>-th character of <var>S</var> is <code>B</code>, and white if that character is <code>W</code>.</p>\n<p>You will perform the following operation exactly <var>N</var> times: choose two distinct squares, then invert the colors of these squares and the squares between them. Here, to invert the color of a square is to make it white if it is black, and vice versa.  </p>\n<p>Throughout this process, you cannot choose the same square twice or more. That is, each square has to be chosen exactly once.</p>\n<p>Find the number of ways to make all the squares white at the end of the process, modulo <var>10^9+7</var>.</p>\n<p>Two ways to make the squares white are considered different if and only if there exists <var>i</var> <var>(1 \\leq i \\leq N)</var> such that the pair of the squares chosen in the <var>i</var>-th operation is different.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>|S| = 2N</var></li>\n<li>Each character of <var>S</var> is <code>B</code> or <code>W</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to make all the squares white at the end of the process, modulo <var>10^9+7</var>. If there are no such ways, print <var>0</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\nBWWB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>There are four ways to make all the squares white, as follows:</p>\n<ul>\n<li>Choose Squares <var>1, 3</var> in the first operation, and choose Squares <var>2, 4</var> in the second operation.</li>\n<li>Choose Squares <var>2, 4</var> in the first operation, and choose Squares <var>1, 3</var> in the second operation.</li>\n<li>Choose Squares <var>1, 4</var> in the first operation, and choose Squares <var>2, 3</var> in the second operation.</li>\n<li>Choose Squares <var>2, 3</var> in the first operation, and choose Squares <var>1, 4</var> in the second operation.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\nBWBBWWWB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>288\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\nWWWWWWWWWW\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02931": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> cards placed on a grid with <var>H</var> rows and <var>W</var> columns of squares.</p>\n<p>The <var>i</var>-th card has an integer <var>A_i</var> written on it, and it is placed on the square at the <var>R_i</var>-th row from the top and the <var>C_i</var>-th column from the left.</p>\n<p>Multiple cards may be placed on the same square.</p>\n<p>You will first pick up at most one card from each row.</p>\n<p>Then, you will pick up at most one card from each column.</p>\n<p>Find the maximum possible sum of the integers written on the picked cards.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq H, W \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^5</var></li>\n<li><var>1 \\leq R_i \\leq H</var></li>\n<li><var>1 \\leq C_i \\leq W</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>H</var> <var>W</var>\n<var>R_1</var> <var>C_1</var> <var>A_1</var>\n<var>R_2</var> <var>C_2</var> <var>A_2</var>\n<var>\\vdots</var>\n<var>R_N</var> <var>C_N</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the integers written on the picked cards.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 2 2\n2 2 2\n1 1 8\n1 1 5\n1 2 9\n1 2 7\n2 1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>28\n</pre>\n<p>The sum of the integers written on the picked cards will be <var>28</var>, the maximum value possible, if you pick up cards as follows:</p>\n<ul>\n<li>Pick up the fourth card from the first row.</li>\n<li>Pick up the sixth card from the second row.</li>\n<li>Pick up the second card from the first column.</li>\n<li>Pick up the fifth card from the second column.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>13 5 6\n1 3 35902\n4 6 19698\n4 6 73389\n3 6 3031\n3 1 4771\n1 4 4784\n2 1 36357\n2 1 24830\n5 6 50219\n4 6 22645\n1 2 30739\n1 4 68417\n1 5 78537\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>430590\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 100000 100000\n1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre></section>\n</div>\n</span>", "p02932": "<span class=\"lang-en\">\n<p>Score: <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Find the number of sequences of <var>N</var> non-negative integers <var>A_1, A_2, ..., A_N</var> that satisfy the following conditions:</p>\n<ul>\n<li><var>L \\leq A_1 + A_2 + ... + A_N \\leq R</var></li>\n<li>When the <var>N</var> elements are sorted in non-increasing order, the <var>M</var>-th and <var>(M+1)</var>-th elements are equal.</li>\n</ul>\n<p>Since the answer can be enormous, print it modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq M &lt; N \\leq 3 \\times 10^5</var></li>\n<li><var>1 \\leq L \\leq R \\leq 3 \\times 10^5</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>L</var> <var>R</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of sequences of <var>N</var> non-negative integers, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2 3 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>105\n</pre>\n<p>The sequences of non-negative integers that satisfy the conditions are:</p>\n<p><var>\\begin{eqnarray} &amp;(1, 1, 1, 0), (1, 1, 1, 1), (2, 1, 1, 0), (2, 1, 1, 1), (2, 2, 2, 0), (2, 2, 2, 1), \\\\ &amp;(3, 0, 0, 0), (3, 1, 1, 0), (3, 1, 1, 1), (3, 2, 2, 0), (4, 0, 0, 0), (4, 1, 1, 0), \\\\ &amp;(4, 1, 1, 1), (5, 0, 0, 0), (5, 1, 1, 0), (6, 0, 0, 0), (7, 0, 0, 0)\\end{eqnarray}</var></p>\n<p>and their permutations, for a total of <var>105</var> sequences.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 1 4 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>The three sequences that satisfy the conditions are <var>(2, 2)</var>, <var>(3, 3)</var>, and <var>(4, 4)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>141592 6535 89793 238462\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>933832916\n</pre></section>\n</div>\n</span>", "p02933": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You will be given an integer <var>a</var> and a string <var>s</var> consisting of lowercase English letters as input.</p>\n<p>Write a program that prints <var>s</var> if <var>a</var> is not less than <var>3200</var> and prints <code>red</code> if <var>a</var> is less than <var>3200</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2800 \\leq a &lt; 5000</var></li>\n<li><var>s</var> is a string of length between <var>1</var> and <var>10</var> (inclusive).</li>\n<li>Each character of <var>s</var> is a lowercase English letter.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var>\n<var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>a</var> is not less than <var>3200</var>, print <var>s</var>; if <var>a</var> is less than <var>3200</var>, print <code>red</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3200\npink\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>pink\n</pre>\n<p><var>a = 3200</var> is not less than <var>3200</var>, so we print <var>s =</var> <code>pink</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3199\npink\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>red\n</pre>\n<p><var>a = 3199</var> is less than <var>3200</var>, so we print <code>red</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4049\nred\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>red\n</pre>\n<p><var>a = 4049</var> is not less than <var>3200</var>, so we print <var>s =</var> <code>red</code>.</p></section>\n</div>\n</span>", "p02934": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a sequence of <var>N</var> integers <var>A_1, \\ldots, A_N</var>.</p>\n<p>Find the (multiplicative) inverse of the sum of the inverses of these numbers, <var>\\frac{1}{\\frac{1}{A_1} + \\ldots + \\frac{1}{A_N}}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq A_i \\leq 1000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\ldots</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print a decimal number (or an integer) representing the value of <var>\\frac{1}{\\frac{1}{A_1} + \\ldots + \\frac{1}{A_N}}</var>.</p>\n<p>Your output will be judged correct when its absolute or relative error from the judge's output is at most <var>10^{-5}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n10 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7.5\n</pre>\n<p><var>\\frac{1}{\\frac{1}{10} + \\frac{1}{30}} = \\frac{1}{\\frac{4}{30}} = \\frac{30}{4} = 7.5</var>.</p>\n<p>Printing <code>7.50001</code>, <code>7.49999</code>, and so on will also be accepted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n200 200 200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>66.66666666666667\n</pre>\n<p><var>\\frac{1}{\\frac{1}{200} + \\frac{1}{200} + \\frac{1}{200}} = \\frac{1}{\\frac{3}{200}} = \\frac{200}{3} = 66.6666...</var>.</p>\n<p>Printing <code>6.66666e+1</code> and so on will also be accepted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1000\n</pre>\n<p><var>\\frac{1}{\\frac{1}{1000}} = 1000</var>.</p>\n<p>Printing <code>+1000.0</code> and so on will also be accepted.</p></section>\n</div>\n</span>", "p02935": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have a pot and <var>N</var> ingredients. Each ingredient has a real number parameter called <em>value</em>, and the value of the <var>i</var>-th ingredient <var>(1 \\leq i \\leq N)</var> is <var>v_i</var>.</p>\n<p>When you put two ingredients in the pot, they will vanish and result in the formation of a new ingredient. The value of the new ingredient will be <var>(x + y) / 2</var> where <var>x</var> and <var>y</var> are the values of the ingredients consumed, and you can put this ingredient again in the pot.</p>\n<p>After you compose ingredients in this way <var>N-1</var> times, you will end up with one ingredient. Find the maximum possible value of this ingredient.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq v_i \\leq 1000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>v_1</var> <var>v_2</var> <var>\\ldots</var> <var>v_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print a decimal number (or an integer) representing the maximum possible value of the last ingredient remaining.</p>\n<p>Your output will be judged correct when its absolute or relative error from the judge's output is at most <var>10^{-5}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3.5\n</pre>\n<p>If you start with two ingredients, the only choice is to put both of them in the pot. The value of the ingredient resulting from the ingredients of values <var>3</var> and <var>4</var> is <var>(3 + 4) / 2 = 3.5</var>.</p>\n<p>Printing <code>3.50001</code>, <code>3.49999</code>, and so on will also be accepted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n500 300 200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>375\n</pre>\n<p>You start with three ingredients this time, and you can choose what to use in the first composition. There are three possible choices:</p>\n<ul>\n<li>Use the ingredients of values <var>500</var> and <var>300</var> to produce an ingredient of value <var>(500 + 300) / 2 = 400</var>. The next composition will use this ingredient and the ingredient of value <var>200</var>, resulting in an ingredient of value <var>(400 + 200) / 2 = 300</var>.</li>\n<li>Use the ingredients of values <var>500</var> and <var>200</var> to produce an ingredient of value <var>(500 + 200) / 2 = 350</var>. The next composition will use this ingredient and the ingredient of value <var>300</var>, resulting in an ingredient of value <var>(350 + 300) / 2 = 325</var>.</li>\n<li>Use the ingredients of values <var>300</var> and <var>200</var> to produce an ingredient of value <var>(300 + 200) / 2 = 250</var>. The next composition will use this ingredient and the ingredient of value <var>500</var>, resulting in an ingredient of value <var>(250 + 500) / 2 = 375</var>.</li>\n</ul>\n<p>Thus, the maximum possible value of the last ingredient remaining is <var>375</var>.</p>\n<p>Printing <code>375.0</code> and so on will also be accepted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n138 138 138 138 138\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>138\n</pre></section>\n</div>\n</span>", "p02937": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are two strings <var>s</var> and <var>t</var> consisting of lowercase English letters. Determine if there exists an integer <var>i</var> satisfying the following condition, and find the minimum such <var>i</var> if it exists.</p>\n<ul>\n<li>Let <var>s'</var> be the concatenation of <var>10^{100}</var> copies of <var>s</var>. <var>t</var> is a subsequence of the string <var>{s'}_1{s'}_2\\ldots{s'}_i</var> (the first <var>i</var> characters in <var>s'</var>).</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><ul>\n<li>A subsequence of a string <var>a</var> is a string obtained by deleting zero or more characters from <var>a</var> and concatenating the remaining characters without changing the relative order. For example, the subsequences of <code>contest</code> include <code>net</code>, <code>c</code>, and <code>contest</code>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |s| \\leq 10^5</var></li>\n<li><var>1 \\leq |t| \\leq 10^5</var></li>\n<li><var>s</var> and <var>t</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n<var>t</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there exists an integer <var>i</var> satisfying the following condition, print the minimum such <var>i</var>; otherwise, print <code>-1</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>contest\nson\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p><var>t =</var> <code>son</code> is a subsequence of the string <code>contestcon</code> (the first <var>10</var> characters in <var>s' =</var> <code>contestcontestcontest...</code>), so <var>i = 10</var> satisfies the condition.</p>\n<p>On the other hand, <var>t</var> is not a subsequence of the string <code>contestco</code> (the first <var>9</var> characters in <var>s'</var>), so <var>i = 9</var> does not satisfy the condition.</p>\n<p>Similarly, any integer less than <var>9</var> does not satisfy the condition, either. Thus, the minimum integer <var>i</var> satisfying the condition is <var>10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>contest\nprogramming\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p><var>t =</var> <code>programming</code> is not a substring of <var>s' =</var> <code>contestcontestcontest...</code>. Thus, there is no integer <var>i</var> satisfying the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>contest\nsentence\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>33\n</pre>\n<p>Note that the answer may not fit into a <var>32</var>-bit integer type, though we cannot put such a case here.</p></section>\n</div>\n</span>", "p02938": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are integers <var>L</var> and <var>R</var>. Find the number, modulo <var>10^9 + 7</var>, of pairs of integers <var>(x, y)</var> <var>(L \\leq x \\leq y \\leq R)</var> such that the remainder when <var>y</var> is divided by <var>x</var> is equal to <var>y \\mbox{ XOR } x</var>.</p>\n<details>\n<summary>What is <var>\\mbox{ XOR }</var>?</summary>\n<p>\nThe XOR of integers <var>A</var> and <var>B</var>, <var>A \\mbox{ XOR } B</var>, is defined as follows:\n<ul>\n<li>When <var>A \\mbox{ XOR } B</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if either <var>A</var> or <var>B</var>, but not both, has <var>1</var> in the <var>2^k</var>'s place, and <var>0</var> otherwise.</li>\n</ul>\nFor example, <var>3 \\mbox{ XOR } 5 = 6</var>. (In base two: <var>011 \\mbox{ XOR } 101 = 110</var>.)\n</p>\n</details>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq L \\leq R \\leq 10^{18}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>L</var> <var>R</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of pairs of integers <var>(x, y)</var> <var>(L \\leq x \\leq y \\leq R)</var> satisfying the condition, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>Three pairs satisfy the condition: <var>(2, 2)</var>, <var>(2, 3)</var>, and <var>(3, 3)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>604\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1000000000000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>68038601\n</pre>\n<p>Be sure to compute the number modulo <var>10^9 + 7</var>.</p></section>\n</div>\n</span>", "p02939": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var> consisting of lowercase English letters. Find the maximum positive integer <var>K</var> that satisfies the following condition:</p>\n<ul>\n<li>There exists a partition of <var>S</var> into <var>K</var> non-empty strings <var>S=S_1S_2...S_K</var> such that <var>S_i \\neq S_{i+1}</var> (<var>1 \\leq i \\leq K-1</var>).</li>\n</ul>\n<p>Here <var>S_1S_2...S_K</var> represents the concatenation of <var>S_1,S_2,...,S_K</var> in this order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 2 \\times 10^5</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum positive integer <var>K</var> that satisfies the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>aabbaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>We can, for example, divide <var>S</var> into four strings <code>aa</code>, <code>b</code>, <code>ba</code>, and <code>a</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>aaaccacabaababc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>12\n</pre></section>\n</div>\n</span>", "p02940": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>3N</var> colored balls with IDs from <var>1</var> to <var>3N</var>.\nA string <var>S</var> of length <var>3N</var> represents the colors of the balls. The color of Ball <var>i</var> is red if <var>S_i</var> is <code>R</code>, green if <var>S_i</var> is <code>G</code>, and blue if <var>S_i</var> is <code>B</code>. There are <var>N</var> red balls, <var>N</var> green balls, and <var>N</var> blue balls.</p>\n<p>Takahashi will distribute these <var>3N</var> balls to <var>N</var> people so that each person gets one red ball, one blue ball, and one green ball.\nThe people want balls with IDs close to each other, so he will additionally satisfy the following condition:</p>\n<ul>\n<li>Let <var>a_j &lt; b_j &lt; c_j</var> be the IDs of the balls received by the <var>j</var>-th person in ascending order.</li>\n<li>Then, <var>\\sum_j (c_j-a_j)</var> should be as small as possible.</li>\n</ul>\n<p>Find the number of ways in which Takahashi can distribute the balls. Since the answer can be enormous, compute it modulo <var>998244353</var>.\nWe consider two ways to distribute the balls different if and only if there is a person who receives different sets of balls.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>|S|=3N</var></li>\n<li><var>S</var> consists of <code>R</code>, <code>G</code>, and <code>B</code>, and each of these characters occurs <var>N</var> times in <var>S</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways in which Takahashi can distribute the balls, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\nRRRGGGBBB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>216\n</pre>\n<p>The minimum value of <var>\\sum_j (c_j-a_j)</var> is <var>18</var> when the balls are, for example, distributed as follows:</p>\n<ul>\n<li>The first person gets Ball <var>1</var>, <var>5</var>, and <var>9</var>.</li>\n<li>The second person gets Ball <var>2</var>, <var>4</var>, and <var>8</var>.</li>\n<li>The third person gets Ball <var>3</var>, <var>6</var>, and <var>7</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\nBBRGRRGRGGRBBGB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>960\n</pre></section>\n</div>\n</span>", "p02941": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> positive integers arranged in a circle.</p>\n<p>Now, the <var>i</var>-th number is <var>A_i</var>. Takahashi wants the <var>i</var>-th number to be <var>B_i</var>. For this objective, he will repeatedly perform the following operation:</p>\n<ul>\n<li>Choose an integer <var>i</var> such that <var>1 \\leq i \\leq N</var>.</li>\n<li>Let <var>a, b, c</var> be the <var>(i-1)</var>-th, <var>i</var>-th, and <var>(i+1)</var>-th numbers, respectively. Replace the <var>i</var>-th number with <var>a+b+c</var>.</li>\n</ul>\n<p>Here the <var>0</var>-th number is the <var>N</var>-th number, and the <var>(N+1)</var>-th number is the <var>1</var>-st number.</p>\n<p>Determine if Takahashi can achieve his objective.\nIf the answer is yes, find the minimum number of operations required.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i, B_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n<var>B_1</var> <var>B_2</var> <var>...</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required, or <code>-1</code> if the objective cannot be achieved.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 1 1\n13 5 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Takahashi can achieve his objective by, for example, performing the following operations:</p>\n<ul>\n<li>Replace the second number with <var>3</var>.</li>\n<li>Replace the second number with <var>5</var>.</li>\n<li>Replace the third number with <var>7</var>.</li>\n<li>Replace the first number with <var>13</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2 3 4\n2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n5 6 5 2 1\n9817 1108 6890 4343 8704\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>25\n</pre></section>\n</div>\n</span>", "p02942": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a grid with <var>N</var> rows and <var>M</var> columns of squares.\nEach integer from <var>1</var> to <var>NM</var> is written in this grid once.\nThe number written in the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left is <var>A_{ij}</var>.</p>\n<p>You need to rearrange these numbers as follows:</p>\n<ol>\n<li>First, for each of the <var>N</var> rows, rearrange the numbers written in it as you like.</li>\n<li>Second, for each of the <var>M</var> columns, rearrange the numbers written in it as you like.</li>\n<li>Finally, for each of the <var>N</var> rows, rearrange the numbers written in it as you like.</li>\n</ol>\n<p>After rearranging the numbers, you want the number written in the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left to be <var>M\\times (i-1)+j</var>.\nConstruct one such way to rearrange the numbers. The constraints guarantee that it is always possible to achieve the objective.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 100</var></li>\n<li><var>1 \\leq A_{ij} \\leq NM</var></li>\n<li><var>A_{ij}</var> are distinct.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_{11}</var> <var>A_{12}</var> <var>...</var> <var>A_{1M}</var>\n<var>:</var>\n<var>A_{N1}</var> <var>A_{N2}</var> <var>...</var> <var>A_{NM}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print one way to rearrange the numbers in the following format:</p>\n<pre><var>B_{11}</var> <var>B_{12}</var> <var>...</var> <var>B_{1M}</var>\n<var>:</var>\n<var>B_{N1}</var> <var>B_{N2}</var> <var>...</var> <var>B_{NM}</var>\n<var>C_{11}</var> <var>C_{12}</var> <var>...</var> <var>C_{1M}</var>\n<var>:</var>\n<var>C_{N1}</var> <var>C_{N2}</var> <var>...</var> <var>C_{NM}</var>\n</pre>\n<p>Here <var>B_{ij}</var> is the number written in the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left after Step <var>1</var>, and <var>C_{ij}</var> is the number written in that square after Step <var>2</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n2 6\n4 3\n1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 6 \n4 3 \n5 1 \n2 1 \n4 3 \n5 6 \n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4\n1 4 7 10\n2 5 8 11\n3 6 9 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 4 7 10 \n5 8 11 2 \n9 12 3 6 \n1 4 3 2 \n5 8 7 6 \n9 12 11 10 \n</pre></section>\n</div>\n</span>", "p02943": "<span class=\"lang-en\">\n<p>Score : <var>1300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has a string <var>S</var> of length <var>N</var> consisting of lowercase English letters.\nOn this string, he will perform the following operation <var>K</var> times:</p>\n<ul>\n<li>Let <var>T</var> be the string obtained by reversing <var>S</var>, and <var>U</var> be the string obtained by concatenating <var>S</var> and <var>T</var> in this order.</li>\n<li>Let <var>S'</var> be some contiguous substring of <var>U</var> with length <var>N</var>, and replace <var>S</var> with <var>S'</var>.</li>\n</ul>\n<p>Among the strings that can be the string <var>S</var> after the <var>K</var> operations, find the lexicographically smallest possible one.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 5000</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>|S|=N</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the lexicographically smallest possible string that can be the string <var>S</var> after the <var>K</var> operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 1\nbacba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>aabca\n</pre>\n<p>When <var>S=</var><code>bacba</code>, <var>T=</var><code>abcab</code>, <var>U=</var><code>bacbaabcab</code>, and the optimal choice of <var>S'</var> is <var>S'=</var><code>aabca</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 2\nbbaabbbaab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>aaaabbaabb\n</pre></section>\n</div>\n</span>", "p02944": "<span class=\"lang-en\">\n<p>Score : <var>1800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For a sequence <var>S</var> of positive integers and positive integers <var>k</var> and <var>l</var>, <var>S</var> is said to belong to <em>level</em> <var>(k,l)</var> when one of the following conditions is satisfied:</p>\n<ul>\n<li>The length of <var>S</var> is <var>1</var>, and its only element is <var>k</var>.</li>\n<li>There exist sequences <var>T_1,T_2,...,T_m</var> (<var>m \\geq l</var>) belonging to level <var>(k-1,l)</var> such that the concatenation of <var>T_1,T_2,...,T_m</var> in this order coincides with <var>S</var>.</li>\n</ul>\n<p>Note that the second condition has no effect when <var>k=1</var>, that is, a sequence belongs to level <var>(1,l)</var> only if the first condition is satisfied.</p>\n<p>Given are a sequence of positive integers <var>A_1,A_2,...,A_N</var> and a positive integer <var>L</var>.\nFind the number of subsequences <var>A_i,A_{i+1},...,A_j</var> (<var>1 \\leq i  \\leq j \\leq N</var>) that satisfy the following condition:</p>\n<ul>\n<li>There exists a positive integer <var>K</var> such that the sequence <var>A_i,A_{i+1},...,A_j</var> belongs to level <var>(K,L)</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>2 \\leq L \\leq N</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>L</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of subsequences <var>A_i,A_{i+1},...,A_j</var> (<var>1 \\leq i  \\leq j \\leq N</var>) that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>9 3\n2 1 1 1 1 1 1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>22\n</pre>\n<p>For example, both of the sequences <var>(1,1,1)</var> and <var>(2)</var> belong to level <var>(2,3)</var>, so the sequence <var>(2,1,1,1,1,1,1)</var> belong to level <var>(3,3)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9 2\n2 1 1 1 1 1 1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>41\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15 3\n4 3 2 1 1 1 2 3 2 2 1 1 1 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>31\n</pre></section>\n</div>\n</span>", "p02946": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>2000001</var> stones placed on a number line. The coordinates of these stones are <var>-1000000, -999999, -999998, \\ldots, 999999, 1000000</var>.</p>\n<p>Among them, some <var>K</var> consecutive stones are painted black, and the others are painted white.</p>\n<p>Additionally, we know that the stone at coordinate <var>X</var> is painted black.</p>\n<p>Print all coordinates that potentially contain a stone painted black, in ascending order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 100</var></li>\n<li><var>0 \\leq X \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var> <var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print all coordinates that potentially contain a stone painted black, in ascending order, with spaces in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5 6 7 8 9\n</pre>\n<p>We know that there are three stones painted black, and the stone at coordinate <var>7</var> is painted black. There are three possible cases:</p>\n<ul>\n<li>The three stones painted black are placed at coordinates <var>5</var>, <var>6</var>, and <var>7</var>.</li>\n<li>The three stones painted black are placed at coordinates <var>6</var>, <var>7</var>, and <var>8</var>.</li>\n<li>The three stones painted black are placed at coordinates <var>7</var>, <var>8</var>, and <var>9</var>.</li>\n</ul>\n<p>Thus, five coordinates potentially contain a stone painted black: <var>5</var>, <var>6</var>, <var>7</var>, <var>8</var>, and <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-3 -2 -1 0 1 2 3\n</pre>\n<p>Negative coordinates can also contain a stone painted black.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100\n</pre></section>\n</div>\n</span>", "p02947": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will call a string obtained by arranging the characters contained in a string <var>a</var> in some order, an <em>anagram</em> of <var>a</var>.</p>\n<p>For example, <code>greenbin</code> is an anagram of <code>beginner</code>. As seen here, when the same character occurs multiple times, that character must be used that number of times.</p>\n<p>Given are <var>N</var> strings <var>s_1, s_2, \\ldots, s_N</var>. Each of these strings has a length of <var>10</var> and consists of lowercase English characters. Additionally, all of these strings are distinct. Find the number of pairs of integers <var>i, j</var> <var>(1 \\leq i &lt; j \\leq N)</var> such that <var>s_i</var> is an anagram of <var>s_j</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>s_i</var> is a string of length <var>10</var>.</li>\n<li>Each character in <var>s_i</var> is a lowercase English letter.</li>\n<li><var>s_1, s_2, \\ldots, s_N</var> are all distinct.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s_1</var>\n<var>s_2</var>\n<var>:</var>\n<var>s_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of pairs of integers <var>i, j</var> <var>(1 \\leq i &lt; j \\leq N)</var> such that <var>s_i</var> is an anagram of <var>s_j</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\nacornistnt\npeanutbomb\nconstraint\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p><var>s_1 =</var> <code>acornistnt</code> is an anagram of <var>s_3 =</var> <code>constraint</code>. There are no other pairs <var>i, j</var> such that <var>s_i</var> is an anagram of <var>s_j</var>, so the answer is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\noneplustwo\nninemodsix\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>If there is no pair <var>i, j</var> such that <var>s_i</var> is an anagram of <var>s_j</var>, print <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\nabaaaaaaaa\noneplustwo\naaaaaaaaba\ntwoplusone\naaaabaaaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre>\n<p>Note that the answer may not fit into a <var>32</var>-bit integer type, though we cannot put such a case here.</p></section>\n</div>\n</span>", "p02948": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> one-off jobs available. If you take the <var>i</var>-th job and complete it, you will earn the reward of <var>B_i</var> after <var>A_i</var> days from the day you do it.</p>\n<p>You can take and complete at most one of these jobs in a day.</p>\n<p>However, you cannot retake a job that you have already done.</p>\n<p>Find the maximum total reward that you can earn no later than <var>M</var> days from today.</p>\n<p>You can already start working today.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^5</var></li>\n<li><var>1 \\leq B_i \\leq 10^4</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>\\vdots</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum total reward that you can earn no later than <var>M</var> days from today.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4\n4 3\n4 1\n2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>You can earn the total reward of <var>5</var> by taking the jobs as follows:</p>\n<ul>\n<li>Take and complete the first job today. You will earn the reward of <var>3</var> after four days from today.</li>\n<li>Take and complete the third job tomorrow. You will earn the reward of <var>2</var> after two days from tomorrow, that is, after three days from today.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 3\n1 2\n1 3\n1 4\n2 1\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02950": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are a prime number <var>p</var> and a sequence of <var>p</var> integers <var>a_0, \\ldots, a_{p-1}</var> consisting of zeros and ones.</p>\n<p>Find a polynomial of degree at most <var>p-1</var>, <var>f(x) = b_{p-1} x^{p-1} + b_{p-2} x^{p-2} + \\ldots + b_0</var>, satisfying the following conditions:</p>\n<ul>\n<li>For each <var>i</var> <var>(0 \\leq i \\leq p-1)</var>, <var>b_i</var> is an integer such that <var>0 \\leq b_i \\leq p-1</var>.</li>\n<li>For each <var>i</var> <var>(0 \\leq i \\leq p-1)</var>, <var>f(i) \\equiv a_i \\pmod p</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq p \\leq 2999</var></li>\n<li><var>p</var> is a prime number.</li>\n<li><var>0 \\leq a_i \\leq 1</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>p</var>\n<var>a_0</var> <var>a_1</var> <var>\\ldots</var> <var>a_{p-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>b_0, b_1, \\ldots, b_{p-1}</var> of a polynomial <var>f(x)</var> satisfying the conditions, in this order, with spaces in between.</p>\n<p>It can be proved that a solution always exists. If multiple solutions exist, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 1\n</pre>\n<p><var>f(x) = x + 1</var> satisfies the conditions, as follows:</p>\n<ul>\n<li><var>f(0) = 0 + 1 = 1 \\equiv 1 \\pmod 2</var></li>\n<li><var>f(1) = 1 + 1 = 2 \\equiv 0 \\pmod 2</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 0 0\n</pre>\n<p><var>f(x) = 0</var> is also valid.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n0 1 0 1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0 2 0 1 3\n</pre></section>\n</div>\n</span>", "p02951": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have two bottles for holding water.</p>\n<p>Bottle <var>1</var> can hold up to <var>A</var> milliliters of water, and now it contains <var>B</var> milliliters of water.</p>\n<p>Bottle <var>2</var> contains <var>C</var> milliliters of water.</p>\n<p>We will transfer water from Bottle <var>2</var> to Bottle <var>1</var> as much as possible.</p>\n<p>How much amount of water will remain in Bottle <var>2</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq B \\leq A \\leq 20</var></li>\n<li><var>1 \\leq C \\leq 20</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the integer representing the amount of water, in milliliters, that will remain in Bottle <var>2</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>We will transfer two milliliters of water from Bottle <var>2</var> to Bottle <var>1</var>, and one milliliter of water will remain in Bottle <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 3 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>12 3 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p02952": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer <var>N</var>. Find the number of positive integers less than or equal to <var>N</var> that have an odd number of digits (in base ten without leading zeros).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of positive integers less than or equal to <var>N</var> that have an odd number of digits.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>Among the positive integers less than or equal to <var>11</var>, nine integers have an odd number of digits: <var>1, 2, \\ldots, 9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>136\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>46\n</pre>\n<p>In addition to <var>1, 2, \\ldots, 9</var>, another <var>37</var> integers also have an odd number of digits: <var>100, 101, \\ldots, 136</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>90909\n</pre></section>\n</div>\n</span>", "p02945": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have two integers: <var>A</var> and <var>B</var>.</p>\n<p>Print the largest number among <var>A + B</var>, <var>A - B</var>, and <var>A \\times B</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>-100 \\leq A,\\ B \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the largest number among <var>A + B</var>, <var>A - B</var>, and <var>A \\times B</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>-13 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>-10\n</pre>\n<p>The largest number among <var>A + B = -10</var>, <var>A - B = -16</var>, and <var>A \\times B = -39</var> is <var>-10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 -33\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>34\n</pre>\n<p>The largest number among <var>A + B = -32</var>, <var>A - B = 34</var>, and <var>A \\times B = -33</var> is <var>34</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>13 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>39\n</pre>\n<p>The largest number among <var>A + B = 16</var>, <var>A - B = 10</var>, and <var>A \\times B = 39</var> is <var>39</var>.</p></section>\n</div>\n</span>", "p02954": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var> consisting of <code>L</code> and <code>R</code>.</p>\n<p>Let <var>N</var> be the length of <var>S</var>. There are <var>N</var> squares arranged from left to right, and the <var>i</var>-th character of <var>S</var> from the left is written on the <var>i</var>-th square from the left.</p>\n<p>The character written on the leftmost square is always <code>R</code>, and the character written on the rightmost square is always <code>L</code>.</p>\n<p>Initially, one child is standing on each square.</p>\n<p>Each child will perform the move below <var>10^{100}</var> times:</p>\n<ul>\n<li>Move one square in the direction specified by the character written in the square on which the child is standing. <code>L</code> denotes left, and <code>R</code> denotes right.</li>\n</ul>\n<p>Find the number of children standing on each square after the children performed the moves.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is a string of length between <var>2</var> and <var>10^5</var> (inclusive).</li>\n<li>Each character of <var>S</var> is <code>L</code> or <code>R</code>.</li>\n<li>The first and last characters of <var>S</var> are <code>R</code> and <code>L</code>, respectively.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of children standing on each square after the children performed the moves, in order from left to right.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>RRLRL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0 1 2 1 1\n</pre>\n<ul>\n<li>After each child performed one move, the number of children standing on each square is <var>0, 2, 1, 1, 1</var> from left to right.</li>\n<li>After each child performed two moves, the number of children standing on each square is <var>0, 1, 2, 1, 1</var> from left to right.</li>\n<li>After each child performed <var>10^{100}</var> moves, the number of children standing on each square is <var>0, 1, 2, 1, 1</var> from left to right.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>RRLLLLRLRRLL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 3 3 0 0 0 1 1 0 2 2 0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>RRRLLRLLRRRLLLLL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0 0 3 2 0 2 1 0 0 0 4 4 0 0 0 0\n</pre></section>\n</div>\n</span>", "p02955": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a sequence of <var>N</var> integers: <var>A_1, A_2, \\cdots, A_N</var>.</p>\n<p>You can perform the following operation between <var>0</var> and <var>K</var> times (inclusive):</p>\n<ul>\n<li>Choose two integers <var>i</var> and <var>j</var> such that <var>i \\neq j</var>, each between <var>1</var> and <var>N</var> (inclusive). Add <var>1</var> to <var>A_i</var> and <var>-1</var> to <var>A_j</var>, possibly producing a negative element.</li>\n</ul>\n<p>Compute the maximum possible positive integer that divides every element of <var>A</var> after the operations. Here a positive integer <var>x</var> divides an integer <var>y</var> if and only if there exists an integer <var>z</var> such that <var>y = xz</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 500</var></li>\n<li><var>1 \\leq A_i \\leq 10^6</var></li>\n<li><var>0 \\leq K \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>\\cdots</var> <var>A_{N-1}</var> <var>A_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible positive integer that divides every element of <var>A</var> after the operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n8 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p><var>7</var> will divide every element of <var>A</var> if, for example, we perform the following operation:</p>\n<ul>\n<li>Choose <var>i = 2, j = 1</var>. <var>A</var> becomes <var>(7, 21)</var>.</li>\n</ul>\n<p>We cannot reach the situation where <var>8</var> or greater integer divides every element of <var>A</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 10\n3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre>\n<p>Consider performing the following five operations:</p>\n<ul>\n<li>Choose <var>i = 2, j = 1</var>. <var>A</var> becomes <var>(2, 6)</var>.</li>\n<li>Choose <var>i = 2, j = 1</var>. <var>A</var> becomes <var>(1, 7)</var>.</li>\n<li>Choose <var>i = 2, j = 1</var>. <var>A</var> becomes <var>(0, 8)</var>.</li>\n<li>Choose <var>i = 2, j = 1</var>. <var>A</var> becomes <var>(-1, 9)</var>.</li>\n<li>Choose <var>i = 1, j = 2</var>. <var>A</var> becomes <var>(0, 8)</var>.</li>\n</ul>\n<p>Then, <var>0 = 8 \\times 0</var> and <var>8 = 8 \\times 1</var>, so <var>8</var> divides every element of <var>A</var>. We cannot reach the situation where <var>9</var> or greater integer divides every element of <var>A</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 5\n10 1 2 22\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8 7\n1 7 5 6 8 2 6 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n</pre></section>\n</div>\n</span>", "p02956": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a set <var>S</var> of <var>N</var> points in a two-dimensional plane. The coordinates of the <var>i</var>-th point are <var>(x_i, y_i)</var>. The <var>N</var> points have distinct <var>x</var>-coordinates and distinct <var>y</var>-coordinates.</p>\n<p>For a non-empty subset <var>T</var> of <var>S</var>, let <var>f(T)</var> be the number of points contained in the smallest rectangle, whose sides are parallel to the coordinate axes, that contains all the points in <var>T</var>. More formally, we define <var>f(T)</var> as follows:</p>\n<ul>\n<li><var>f(T) := </var> (the number of integers <var>i</var> <var>(1 \\leq i \\leq N)</var> such that <var>a \\leq x_i \\leq b</var> and <var>c \\leq y_i \\leq d</var>, where <var>a</var>, <var>b</var>, <var>c</var>, and <var>d</var> are the minimum <var>x</var>-coordinate, the maximum <var>x</var>-coordinate, the minimum <var>y</var>-coordinate, and the maximum <var>y</var>-coordinate of the points in <var>T</var>)</li>\n</ul>\n<p>Find the sum of <var>f(T)</var> over all non-empty subset <var>T</var> of <var>S</var>. Since it can be enormous, print the sum modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>-10^9 \\leq x_i, y_i \\leq 10^9</var></li>\n<li><var>x_i \\neq x_j (i \\neq j)</var></li>\n<li><var>y_i \\neq y_j (i \\neq j)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>:</var>\n<var>x_N</var> <var>y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of <var>f(T)</var> over all non-empty subset <var>T</var> of <var>S</var>, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n-1 3\n2 1\n3 -2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>13\n</pre>\n<p>Let the first, second, and third points be <var>P_1</var>, <var>P_2</var>, and <var>P_3</var>, respectively. <var>S = \\{P_1, P_2, P_3\\}</var> has seven non-empty subsets, and <var>f</var> has the following values for each of them:</p>\n<ul>\n<li><var>f(\\{P_1\\}) = 1</var></li>\n<li><var>f(\\{P_2\\}) = 1</var></li>\n<li><var>f(\\{P_3\\}) = 1</var></li>\n<li><var>f(\\{P_1, P_2\\}) = 2</var></li>\n<li><var>f(\\{P_2, P_3\\}) = 2</var></li>\n<li><var>f(\\{P_3, P_1\\}) = 3</var></li>\n<li><var>f(\\{P_1, P_2, P_3\\}) = 3</var></li>\n</ul>\n<p>The sum of these is <var>13</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 4\n2 1\n3 3\n4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>34\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n19 -11\n-3 -12\n5 3\n3 -15\n8 -14\n-9 -20\n10 -9\n0 2\n-7 17\n6 -6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7222\n</pre>\n<p>Be sure to print the sum modulo <var>998244353</var>.</p></section>\n</div>\n</span>", "p02953": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> squares arranged in a row from left to right. The height of the <var>i</var>-th square from the left is <var>H_i</var>.</p>\n<p>For each square, you will perform either of the following operations once:</p>\n<ul>\n<li>Decrease the height of the square by <var>1</var>.</li>\n<li>Do nothing.</li>\n</ul>\n<p>Determine if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq H_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>H_1</var> <var>H_2</var> <var>...</var> <var>H_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 2 1 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>You can achieve the objective by decreasing the height of only the second square from the left by <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02957": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have two distinct integers <var>A</var> and <var>B</var>.</p>\n<p>Print the integer <var>K</var> such that <var>|A - K| = |B - K|</var>.</p>\n<p>If such an integer does not exist, print <code>IMPOSSIBLE</code> instead.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>0 \\leq A,\\ B \\leq 10^9</var></li>\n<li><var>A</var> and <var>B</var> are distinct.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the integer <var>K</var> satisfying the condition.</p>\n<p>If such an integer does not exist, print <code>IMPOSSIBLE</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 16\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p><var>|2 - 9| = 7</var> and <var>|16 - 9| = 7</var>, so <var>9</var> satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>IMPOSSIBLE\n</pre>\n<p>No integer satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>998244353 99824435\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>549034394\n</pre></section>\n</div>\n</span>", "p02958": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a sequence <var>p</var> = {<var>p_1,\\ p_2,\\ ...,\\ p_N</var>} which is a permutation of {<var>1,\\ 2,\\ ...,\\ N</var>}.</p>\n<p>You can perform the following operation at most once: choose integers <var>i</var> and <var>j</var> <var>(1 \\leq i &lt; j \\leq N)</var>, and swap <var>p_i</var> and <var>p_j</var>. Note that you can also choose not to perform it.</p>\n<p>Print <code>YES</code> if you can sort <var>p</var> in ascending order in this way, and <code>NO</code> otherwise.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 50</var></li>\n<li><var>p</var> is a permutation of {<var>1,\\ 2,\\ ...,\\ N</var>}.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>p_1</var> <var>p_2</var> <var>...</var> <var>p_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>YES</code> if you can sort <var>p</var> in ascending order in the way stated in the problem statement, and <code>NO</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n5 2 3 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>You can sort <var>p</var> in ascending order by swapping <var>p_1</var> and <var>p_5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n2 4 3 5 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n<p>In this case, swapping any two elements does not sort <var>p</var> in ascending order.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n1 2 3 4 5 6 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>YES\n</pre>\n<p><var>p</var> is already sorted in ascending order, so no operation is needed.</p></section>\n</div>\n</span>", "p02959": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N+1</var> towns. The <var>i</var>-th town is being attacked by <var>A_i</var> monsters.</p>\n<p>We have <var>N</var> heroes. The <var>i</var>-th hero can defeat monsters attacking the <var>i</var>-th or <var>(i+1)</var>-th town, for a total of at most <var>B_i</var> monsters.</p>\n<p>What is the maximum total number of monsters the heroes can cooperate to defeat?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>1 \\leq B_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_{N+1}</var>\n<var>B_1</var> <var>B_2</var> <var>...</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum total number of monsters the heroes can defeat.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n3 5 2\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>If the heroes choose the monsters to defeat as follows, they can defeat nine monsters in total, which is the maximum result.</p>\n<ul>\n<li>The first hero defeats two monsters attacking the first town and two monsters attacking the second town.</li>\n<li>The second hero defeats three monsters attacking the second town and two monsters attacking the third town.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n5 6 3 8\n5 100 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>22\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n100 1 1\n1 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02960": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var>. Each character in <var>S</var> is either a digit (<code>0</code>, ..., <code>9</code>) or <code>?</code>.</p>\n<p>Among the integers obtained by replacing each occurrence of <code>?</code> with a digit, how many have a remainder of <var>5</var> when divided by <var>13</var>? An integer may begin with <var>0</var>.</p>\n<p>Since the answer can be enormous, print the count modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>S</var> is a string consisting of digits (<code>0</code>, ..., <code>9</code>) and <code>?</code>.</li>\n<li><var>1 \\leq |S| \\leq 10^5</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of integers satisfying the condition, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>??2??5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>768\n</pre>\n<p>For example, <var>482305, 002865,</var> and <var>972665</var> satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>?44\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>Only <var>044</var> satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7?4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>We may not be able to produce an integer satisfying the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>153716888\n</pre></section>\n</div>\n</span>", "p02961": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Jumbo Takahashi will play golf on an infinite two-dimensional grid.</p>\n<p>The ball is initially at the origin <var>(0, 0)</var>, and the goal is a grid point (a point with integer coordinates) <var>(X, Y)</var>. In one stroke, Jumbo Takahashi can perform the following operation:</p>\n<ul>\n<li>Choose a grid point whose Manhattan distance from the current position of the ball is <var>K</var>, and send the ball to that point.</li>\n</ul>\n<p>The game is finished when the ball reaches the goal, and the score will be the number of strokes so far. Jumbo Takahashi wants to finish the game with the lowest score possible.</p>\n<p>Determine if the game can be finished. If the answer is yes, find one way to bring the ball to the goal with the lowest score possible.</p>\n<p><details><summary>What is Manhattan distance?</summary><div></div></details></p>\n<p>The Manhattan distance between two points <var>(x_1, y_1)</var> and <var>(x_2, y_2)</var> is defined as <var>|x_1-x_2|+|y_1-y_2|</var>.</p>\n<p></p></section></div></span>", "p02962": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given are two strings <var>s</var> and <var>t</var> consisting of lowercase English letters. Determine if the number of non-negative integers <var>i</var> satisfying the following condition is finite, and find the maximum value of such <var>i</var> if the number is finite.</p>\n<ul>\n<li>There exists a non-negative integer <var>j</var> such that the concatenation of <var>i</var> copies of <var>t</var> is a substring of the concatenation of <var>j</var> copies of <var>s</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><ul>\n<li>\n<p>A string <var>a</var> is a substring of another string <var>b</var> if and only if there exists an integer <var>x</var> <var>(0 \\leq x \\leq |b| - |a|)</var> such that, for any <var>y</var> <var>(1 \\leq y \\leq |a|)</var>, <var>a_y = b_{x+y}</var> holds.</p>\n</li>\n<li>\n<p>We assume that the concatenation of zero copies of any string is the empty string. From the definition above, the empty string is a substring of any string. Thus, for any two strings <var>s</var> and <var>t</var>, <var>i = 0</var> satisfies the condition in the problem statement.</p>\n</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |s| \\leq 5 \\times 10^5</var></li>\n<li><var>1 \\leq |t| \\leq 5 \\times 10^5</var></li>\n<li><var>s</var> and <var>t</var> consist of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n<var>t</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the number of non-negative integers <var>i</var> satisfying the following condition is finite, print the maximum value of such <var>i</var>; if the number is infinite, print <code>-1</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abcabab\nab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The concatenation of three copies of <var>t</var>, <code>ababab</code>, is a substring of the concatenation of two copies of <var>s</var>, <code>abcabababcabab</code>, so <var>i = 3</var> satisfies the condition.</p>\n<p>On the other hand, the concatenation of four copies of <var>t</var>, <code>abababab</code>, is not a substring of the concatenation of any number of copies of <var>s</var>, so <var>i = 4</var> does not satisfy the condition.</p>\n<p>Similarly, any integer greater than <var>4</var> does not satisfy the condition, either. Thus, the number of non-negative integers <var>i</var> satisfying the condition is finite, and the maximum value of such <var>i</var> is <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>aa\naaaaaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>For any non-negative integer <var>i</var>, the concatenation of <var>i</var> copies of <var>t</var> is a substring of the concatenation of <var>4i</var> copies of <var>s</var>. Thus, there are infinitely many non-negative integers <var>i</var> that satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>aba\nbaaab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>As stated in Notes, <var>i = 0</var> always satisfies the condition.</p></section>\n</div>\n</span>", "p02963": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer <var>S</var>.\nFind a combination of six integers <var>X_1,Y_1,X_2,Y_2,X_3,</var> and <var>Y_3</var> that satisfies all of the following conditions:</p>\n<ul>\n<li><var>0 \\leq X_1,Y_1,X_2,Y_2,X_3,Y_3 \\leq 10^9</var></li>\n<li>The area of the triangle in a two-dimensional plane whose vertices are <var>(X_1,Y_1),(X_2,Y_2),</var> and <var>(X_3,Y_3)</var> is <var>S/2</var>.</li>\n</ul>\n<p>We can prove that there always exist six integers that satisfy the conditions under the constraints of this problem.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq S \\leq 10^{18}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print six integers <var>X_1,Y_1,X_2,Y_2,X_3,</var> and <var>Y_3</var> that satisfy the conditions, in this order, with spaces in between.\nIf multiple solutions exist, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 0 2 2 0 1\n</pre>\n<p>The area of the triangle in a two-dimensional plane whose vertices are <var>(1,0),(2,2),</var> and <var>(0,1)</var> is <var>3/2</var>.\nPrinting <code>3 0 3 1 0 1</code> or <code>1 0 0 1 2 2</code> will also be accepted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 0 10 0 0 10\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>311114770564041497\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>314159265 358979323 846264338 327950288 419716939 937510582\n</pre></section>\n</div>\n</span>", "p02965": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a sequence of <var>N</var> integers: <var>x=(x_0,x_1,\\cdots,x_{N-1})</var>.\nInitially, <var>x_i=0</var> for each <var>i</var> (<var>0 \\leq i \\leq N-1</var>).</p>\n<p>Snuke will perform the following operation <strong>exactly</strong> <var>M</var> times:</p>\n<ul>\n<li>Choose two distinct indices <var>i, j</var> (<var>0 \\leq i,j \\leq N-1,\\ i \\neq j</var>).\nThen, replace <var>x_i</var> with <var>x_i+2</var> and <var>x_j</var> with <var>x_j+1</var>.</li>\n</ul>\n<p>Find the number of different sequences that can result after <var>M</var> operations.\nSince it can be enormous, compute the count modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^6</var></li>\n<li><var>1 \\leq M \\leq 5 \\times 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of different sequences that can result after <var>M</var> operations, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>After two operations, there are three possible outcomes:</p>\n<ul>\n<li><var>x=(2,4)</var></li>\n<li><var>x=(3,3)</var></li>\n<li><var>x=(4,2)</var></li>\n</ul>\n<p>For example, <var>x=(3,3)</var> can result after the following sequence of operations:</p>\n<ul>\n<li>First, choose <var>i=0,j=1</var>, changing <var>x</var> from <var>(0,0)</var> to <var>(2,1)</var>.</li>\n<li>Second, choose <var>i=1,j=0</var>, changing <var>x</var> from <var>(2,1)</var> to <var>(3,3)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>19\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>211428932\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>100000 50000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>3463133\n</pre></section>\n</div>\n</span>", "p02967": "<span class=\"lang-en\">\n<p>Score : <var>1500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is a string <var>S</var> consisting of <code>A</code>,<code>B</code>, and <code>C</code>.</p>\n<p>Consider the (not necessarily contiguous) subsequences <var>x</var> of <var>S</var> that satisfy all of the following conditions:</p>\n<ul>\n<li><code>A</code>, <code>B</code>, and <code>C</code> all occur the same number of times in <var>x</var>.</li>\n<li>No two adjacent characters in <var>x</var> are the same.</li>\n</ul>\n<p>Among these subsequences, find one of the longest. Here a subsequence of <var>S</var> is a string obtained by deleting zero or more characters from <var>S</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10^6</var></li>\n<li><var>S</var> consists of <code>A</code>,<code>B</code>, and <code>C</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print one longest subsequence that satisfies the conditions.\nIf multiple solutions exist, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>ABBCBCAB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>ACBCAB\n</pre>\n<p>Consider the subsequence <code>ACBCAB</code> of <var>S</var>. It satisfies the conditions and is one of the longest with these properties, along with <code>ABCBCA</code>.\nOn the other hand, the subsequences <code>ABCBCAB</code> and <code>ABBCCA</code> do not satisfy the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>ABABABABACACACAC\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>BABCAC\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>ABCABACBCBABABACBCBCBCBCBCAB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>ACABACABABACBCBCBCBCA\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>AAA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>\n</pre>\n<p>It is possible that only the empty string satisfies the condition.</p></section>\n</div>\n</span>", "p02968": "<span class=\"lang-en\">\n<p>Score : <var>1800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given is an integer <var>N</var>.\nHow many permutations <var>(P_0,P_1,\\cdots,P_{2N-1})</var> of <var>(0,1,\\cdots,2N-1)</var> satisfy the following condition?</p>\n<ul>\n<li>For each <var>i</var> <var>(0 \\leq i \\leq 2N-1)</var>, <var>N^2 \\leq i^2+P_i^2 \\leq (2N)^2</var> holds.</li>\n</ul>\n<p>Since the number can be enormous, compute it modulo <var>M</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 250</var></li>\n<li><var>2 \\leq M \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of permutations that satisfy the condition, modulo <var>M</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Four permutations satisfy the condition:</p>\n<ul>\n<li><var>(2,3,0,1)</var></li>\n<li><var>(2,3,1,0)</var></li>\n<li><var>(3,2,0,1)</var></li>\n<li><var>(3,2,1,0)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>53999264\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>200 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>112633322\n</pre></section>\n</div>\n</span>", "p02969": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>It is known that the area of a regular dodecagon inscribed in a circle of radius <var>a</var> is <var>3a^2</var>.</p>\n<p>Given an integer <var>r</var>, find the area of a regular dodecagon inscribed in a circle of radius <var>r</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq r \\leq 100</var></li>\n<li><var>r</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>r</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the area of the regular dodecagon.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>48\n</pre>\n<p>The area of the regular dodecagon is <var>3 \\times 4^2 = 48</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>675\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>80\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>19200\n</pre></section>\n</div>\n</span>", "p02970": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> apple trees in a row. People say that one of them will bear golden apples.</p>\n<p>We want to deploy some number of inspectors so that each of these trees will be inspected.</p>\n<p>Each inspector will be deployed under one of the trees. For convenience, we will assign numbers from <var>1</var> through <var>N</var> to the trees. An inspector deployed under the <var>i</var>-th tree <var>(1 \\leq i \\leq N)</var> will inspect the trees with numbers between <var>i-D</var> and <var>i+D</var> (inclusive).</p>\n<p>Find the minimum number of inspectors that we need to deploy to achieve the objective.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 20</var></li>\n<li><var>1 \\leq D \\leq 20</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of inspectors that we need to deploy to achieve the objective.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>We can achieve the objective by, for example, placing an inspector under Tree <var>3</var> and Tree <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>14 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p02971": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a sequence of length <var>N</var>: <var>A_1, A_2, ..., A_N</var>.\nFor each integer <var>i</var> between <var>1</var> and <var>N</var> (inclusive), answer the following question:</p>\n<ul>\n<li>Find the maximum value among the <var>N-1</var> elements other than <var>A_i</var> in the sequence.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200000</var></li>\n<li><var>1 \\leq A_i \\leq 200000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var>\n<var>:</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines. The <var>i</var>-th line (<var>1 \\leq i \\leq N</var>) should contain the maximum value among the <var>N-1</var> elements other than <var>A_i</var> in the sequence.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1\n4\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n3\n4\n</pre>\n<ul>\n<li>The maximum value among the two elements other than <var>A_1</var>, that is, <var>A_2 = 4</var> and <var>A_3 = 3</var>, is <var>4</var>.</li>\n<li>The maximum value among the two elements other than <var>A_2</var>, that is, <var>A_1 = 1</var> and <var>A_3 = 3</var>, is <var>3</var>.</li>\n<li>The maximum value among the two elements other than <var>A_3</var>, that is, <var>A_1 = 1</var> and <var>A_2 = 4</var>, is <var>4</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n5\n5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n5\n</pre></section>\n</div>\n</span>", "p02972": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> empty boxes arranged in a row from left to right.\nThe integer <var>i</var> is written on the <var>i</var>-th box from the left <var>(1 \\leq i \\leq N)</var>.</p>\n<p>For each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.</p>\n<p>We say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:</p>\n<ul>\n<li>For every integer <var>i</var> between <var>1</var> and <var>N</var> (inclusive), the total number of balls contained in the boxes with multiples of <var>i</var> written on them is congruent to <var>a_i</var> modulo <var>2</var>.</li>\n</ul>\n<p>Does there exist a good set of choices? If the answer is yes, find one good set of choices.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>a_i</var> is <var>0</var> or <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If a good set of choices does not exist, print <code>-1</code>.</p>\n<p>If a good set of choices exists, print one such set of choices in the following format:</p>\n<pre><var>M</var>\n<var>b_1</var> <var>b_2</var> <var>...</var> <var>b_M</var>\n</pre>\n<p>where <var>M</var> denotes the number of boxes that will contain a ball, and <var>b_1,\\ b_2,\\ ...,\\ b_M</var> are the integers written on these boxes, in any order.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n1\n</pre>\n<p>Consider putting a ball only in the box with <var>1</var> written on it.</p>\n<ul>\n<li>There are three boxes with multiples of <var>1</var> written on them: the boxes with <var>1</var>, <var>2</var>, and <var>3</var>. The total number of balls contained in these boxes is <var>1</var>.</li>\n<li>There is only one box with a multiple of <var>2</var> written on it: the box with <var>2</var>. The total number of balls contained in these boxes is <var>0</var>.</li>\n<li>There is only one box with a multiple of <var>3</var> written on it: the box with <var>3</var>. The total number of balls contained in these boxes is <var>0</var>.</li>\n</ul>\n<p>Thus, the condition is satisfied, so this set of choices is good.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n0 0 0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Putting nothing in the boxes can be a good set of choices.</p></section>\n</div>\n</span>", "p02973": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a sequence with <var>N</var> integers: <var>A = \\{ A_1, A_2, \\cdots, A_N \\}</var>.\nFor each of these <var>N</var> integers, we will choose a color and paint the integer with that color. Here the following condition must be satisfied:</p>\n<ul>\n<li>If <var>A_i</var> and <var>A_j</var> <var>(i &lt; j)</var> are painted with the same color, <var>A_i &lt; A_j</var>.</li>\n</ul>\n<p>Find the minimum number of colors required to satisfy the condition.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var>\n<var>:</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of colors required to satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n2\n1\n4\n5\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>We can satisfy the condition with two colors by, for example, painting <var>2</var> and <var>3</var> red and painting <var>1</var>, <var>4</var>, and <var>5</var> blue.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n0\n0\n0\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n<p>We have to paint all the integers with distinct colors.</p></section>\n</div>\n</span>", "p02974": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let us define the <em>oddness</em> of a permutation <var>p</var> = {<var>p_1,\\ p_2,\\ ...,\\ p_n</var>} of {<var>1,\\ 2,\\ ...,\\ n</var>} as <var>\\sum_{i = 1}^n |i - p_i|</var>.</p>\n<p>Find the number of permutations of {<var>1,\\ 2,\\ ...,\\ n</var>} of oddness <var>k</var>, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq n \\leq 50</var></li>\n<li><var>0 \\leq k \\leq n^2</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var> <var>k</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of permutations of {<var>1,\\ 2,\\ ...,\\ n</var>} of oddness <var>k</var>, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>There are six permutations of {<var>1,\\ 2,\\ 3</var>}. Among them, two have oddness of <var>2</var>:  {<var>2,\\ 1,\\ 3</var>} and {<var>1,\\ 3,\\ 2</var>}.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>39 14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>74764168\n</pre></section>\n</div>\n</span>", "p02975": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has <var>N</var> hats. The <var>i</var>-th hat has an integer <var>a_i</var> written on it.</p>\n<p>There are <var>N</var> camels standing in a circle.\nSnuke will put one of his hats on each of these camels.</p>\n<p>If there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n<ul>\n<li>The bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.</li>\n</ul>\n<details>\n<summary style=\"display: list-item; outline: none;\">What is XOR?</summary>\n\nThe bitwise XOR <var>x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n</var> of <var>n</var> non-negative integers <var>x_1, x_2, \\ldots, x_n</var> is defined as follows:\n\n- When <var>x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if the number of integers among <var>x_1, x_2, \\ldots, x_n</var> whose binary representations have <var>1</var> in the <var>2^k</var>'s place is odd, and <var>0</var> if that count is even.\n\nFor example, <var>3 \\oplus 5 = 6</var>.\n\n</details>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>3 \\leq N \\leq 10^{5}</var></li>\n<li><var>0 \\leq a_i \\leq 10^{9}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>\\ldots</var> <var>a_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<ul>\n<li>If we put the hats with <var>1</var>, <var>2</var>, and <var>3</var> in this order, clockwise, the condition will be satisfied for every camel, so the answer is <code>Yes</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2 4 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<ul>\n<li>There is no such way to distribute the hats; the answer is <code>No</code>.</li>\n</ul></section>\n</div>\n</span>", "p02978": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a stack of <var>N</var> cards, each of which has a non-negative integer written on it. The integer written on the <var>i</var>-th card from the top is <var>A_i</var>.</p>\n<p>Snuke will repeat the following operation until two cards remain:</p>\n<ul>\n<li>Choose three consecutive cards from the stack.</li>\n<li>Eat the middle card of the three.</li>\n<li>For each of the other two cards, replace the integer written on it by the sum of that integer and the integer written on the card eaten.</li>\n<li>Return the two cards to the original position in the stack, without swapping them.</li>\n</ul>\n<p>Find the minimum possible sum of the integers written on the last two cards remaining.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 18</var></li>\n<li><var>0 \\leq A_i \\leq 10^9 (1\\leq i\\leq N)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible sum of the integers written on the last two cards remaining.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n3 1 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>16\n</pre>\n<p>We can minimize the sum of the integers written on the last two cards remaining by doing as follows:</p>\n<ul>\n<li>Initially, the integers written on the cards are <var>3</var>, <var>1</var>, <var>4</var>, and <var>2</var> from top to bottom.</li>\n<li>Choose the first, second, and third card from the top. Eat the second card with <var>1</var> written on it, add <var>1</var> to each of the other two cards, and return them to the original position in the stack. The integers written on the cards are now <var>4</var>, <var>5</var>, and <var>2</var> from top to bottom.</li>\n<li>Choose the first, second, and third card from the top. Eat the second card with <var>5</var> written on it, add <var>5</var> to each of the other two cards, and return them to the original position in the stack. The integers written on the cards are now <var>9</var> and <var>7</var> from top to bottom.</li>\n<li>The sum of the integers written on the last two cards remaining is <var>16</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n5 2 4 1 6 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>51\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n3 1 4 1 5 9 2 6 5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>115\n</pre></section>\n</div>\n</span>", "p02979": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a blackboard on which all integers from <var>-10^{18}</var> through <var>10^{18}</var> are written, each of them appearing once. Takahashi will repeat the following sequence of operations any number of times he likes, possibly zero:</p>\n<ul>\n<li>Choose an integer between <var>1</var> and <var>N</var> (inclusive) that is written on the blackboard. Let <var>x</var> be the chosen integer, and erase <var>x</var>.</li>\n<li>If <var>x-2</var> is not written on the blackboard, write <var>x-2</var> on the blackboard.</li>\n<li>If <var>x+K</var> is not written on the blackboard, write <var>x+K</var> on the blackboard.</li>\n</ul>\n<p>Find the number of possible sets of integers written on the blackboard after some number of operations, modulo <var>M</var>.\nWe consider two sets different when there exists an integer contained in only one of the sets.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K\\leq N \\leq 150</var></li>\n<li><var>10^8\\leq M\\leq 10^9</var></li>\n<li><var>N</var>, <var>K</var>, and <var>M</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible sets of integers written on the blackboard after some number of operations, modulo <var>M</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>Every set containing all integers less than <var>1</var>, all integers greater than <var>3</var>, and at least one of the three integers <var>1</var>, <var>2</var>, and <var>3</var> satisfies the condition. There are seven such sets.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 3 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>61\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9 4 702443618\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>312\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>17 7 208992811\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>128832\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>123 45 678901234\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>256109226\n</pre></section>\n</div>\n</span>", "p02980": "<span class=\"lang-en\">\n<p>Score : <var>1800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a square grid with <var>N</var> rows and <var>M</var> columns. Takahashi will write an integer in each of the squares, as follows:</p>\n<ul>\n<li>First, write <var>0</var> in every square.</li>\n<li>For each <var>i=1,2,...,N</var>, choose an integer <var>k_i</var> <var>(0\\leq k_i\\leq M)</var>, and add <var>1</var> to each of the leftmost <var>k_i</var> squares in the <var>i</var>-th row.</li>\n<li>For each <var>j=1,2,...,M</var>, choose an integer <var>l_j</var> <var>(0\\leq l_j\\leq N)</var>, and add <var>1</var> to each of the topmost <var>l_j</var> squares in the <var>j</var>-th column.</li>\n</ul>\n<p>Now we have a grid where each square contains <var>0</var>, <var>1</var>, or <var>2</var>. Find the number of different grids that can be made this way, modulo <var>998244353</var>.\nWe consider two grids different when there exists a square with different integers.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 5\\times 10^5</var></li>\n<li><var>N</var> and <var>M</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of different grids that can be made, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>Let <var>(a,b)</var> denote the grid where the square to the left contains <var>a</var> and the square to the right contains <var>b</var>. Eight grids can be made: <var>(0,0),(0,1),(1,0),(1,1),(1,2),(2,0),(2,1),</var> and <var>(2,2)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>234\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>995651918\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>314159 265358\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>70273732\n</pre></section>\n</div>\n</span>", "p02981": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> of us are going on a trip, by train or taxi.</p>\n<p>The train will cost each of us <var>A</var> yen (the currency of Japan).</p>\n<p>The taxi will cost us a total of <var>B</var> yen.</p>\n<p>How much is our minimum total travel expense?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 20</var></li>\n<li><var>1 \\leq A \\leq 50</var></li>\n<li><var>1 \\leq B \\leq 50</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the minimum total travel expense.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>The train will cost us <var>4 \\times 2 = 8</var> yen, and the taxi will cost us <var>9</var> yen, so the minimum total travel expense is <var>8</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 2 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 2 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p02982": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> points in a <var>D</var>-dimensional space.</p>\n<p>The coordinates of the <var>i</var>-th point are <var>(X_{i1}, X_{i2}, ..., X_{iD})</var>.</p>\n<p>The distance between two points with coordinates <var>(y_1, y_2, ..., y_D)</var> and <var>(z_1, z_2, ..., z_D)</var> is <var>\\sqrt{(y_1 - z_1)^2 + (y_2 - z_2)^2 + ... + (y_D - z_D)^2}</var>.</p>\n<p>How many pairs <var>(i, j)</var> <var>(i &lt; j)</var> are there such that the distance between the <var>i</var>-th point and the <var>j</var>-th point is an integer?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10</var></li>\n<li><var>1 \\leq D \\leq 10</var></li>\n<li><var>-20 \\leq X_{ij} \\leq 20</var></li>\n<li>No two given points have the same coordinates. That is, if <var>i \\neq j</var>, there exists <var>k</var> such that <var>X_{ik} \\neq X_{jk}</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>D</var>\n<var>X_{11}</var> <var>X_{12}</var> <var>...</var> <var>X_{1D}</var>\n<var>X_{21}</var> <var>X_{22}</var> <var>...</var> <var>X_{2D}</var>\n<var>\\vdots</var>\n<var>X_{N1}</var> <var>X_{N2}</var> <var>...</var> <var>X_{ND}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of pairs <var>(i, j)</var> <var>(i &lt; j)</var> such that the distance between the <var>i</var>-th point and the <var>j</var>-th point is an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n1 2\n5 5\n-2 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The number of pairs with an integer distance is one, as follows:</p>\n<ul>\n<li>The distance between the first point and the second point is <var>\\sqrt{|1-5|^2 + |2-5|^2} = 5</var>, which is an integer.</li>\n<li>The distance between the second point and the third point is <var>\\sqrt{|5-(-2)|^2 + |5-8|^2} = \\sqrt{58}</var>, which is not an integer.</li>\n<li>The distance between the third point and the first point is <var>\\sqrt{|-2-1|^2+|8-2|^2} = 3\\sqrt{5}</var>, which is not an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4\n-3 7 8 2\n-12 1 10 2\n-2 8 9 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 1\n1\n2\n3\n4\n5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>10\n</pre></section>\n</div>\n</span>", "p02983": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given two non-negative integers <var>L</var> and <var>R</var>.\nWe will choose two integers <var>i</var> and <var>j</var> such that <var>L \\leq i &lt; j \\leq R</var>.\nFind the minimum possible value of <var>(i \\times j) \\mbox{ mod } 2019</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>0 \\leq L &lt; R \\leq 2 \\times 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>L</var> <var>R</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible value of <var>(i \\times j) \\mbox{ mod } 2019</var> when <var>i</var> and <var>j</var> are chosen under the given condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2020 2040\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>When <var>(i, j) = (2020, 2021)</var>, <var>(i \\times j) \\mbox{ mod } 2019  = 2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>20\n</pre>\n<p>We have only one choice: <var>(i, j) = (4, 5)</var>.</p></section>\n</div>\n</span>", "p02984": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> mountains in a circle, called Mountain <var>1</var>, Mountain <var>2</var>, <var>...</var>, Mountain <var>N</var> in clockwise order. <var>N</var> is an <em>odd</em> number.</p>\n<p>Between these mountains, there are <var>N</var> dams, called Dam <var>1</var>, Dam <var>2</var>, <var>...</var>, Dam <var>N</var>. Dam <var>i</var> (<var>1 \\leq i \\leq N</var>) is located between Mountain <var>i</var> and <var>i+1</var> (Mountain <var>N+1</var> is Mountain <var>1</var>).</p>\n<p>When Mountain <var>i</var> (<var>1 \\leq i \\leq N</var>) receives <var>2x</var> liters of rain, Dam <var>i-1</var> and Dam <var>i</var> each accumulates <var>x</var> liters of water (Dam <var>0</var> is Dam <var>N</var>).</p>\n<p>One day, each of the mountains received a non-negative <strong>even</strong> number of liters of rain.</p>\n<p>As a result, Dam <var>i</var> (<var>1 \\leq i \\leq N</var>) accumulated a total of <var>A_i</var> liters of water.</p>\n<p>Find the amount of rain each of the mountains received. We can prove that the solution is unique under the constraints of this problem.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>3 \\leq N \\leq 10^5-1</var></li>\n<li><var>N</var> is an odd number.</li>\n<li><var>0 \\leq A_i \\leq 10^9</var></li>\n<li>The situation represented by input can occur when each of the mountains receives a non-negative even number of liters of rain.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> integers representing the number of liters of rain Mountain <var>1</var>, Mountain <var>2</var>, <var>...</var>, Mountain <var>N</var> received, in this order.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4 0 4\n</pre>\n<p>If we assume Mountain <var>1</var>, <var>2</var>, and <var>3</var> received <var>4</var>, <var>0</var>, and <var>4</var> liters of rain, respectively, it is consistent with this input, as follows:</p>\n<ul>\n<li>Dam <var>1</var> should have accumulated <var>\\frac{4}{2} + \\frac{0}{2} = 2</var> liters of water.</li>\n<li>Dam <var>2</var> should have accumulated <var>\\frac{0}{2} + \\frac{4}{2} = 2</var> liters of water.</li>\n<li>Dam <var>3</var> should have accumulated <var>\\frac{4}{2} + \\frac{4}{2} = 4</var> liters of water.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n3 8 7 5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2 4 12 2 8\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n1000000000 1000000000 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0 2000000000 0\n</pre></section>\n</div>\n</span>", "p02987": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a <var>4</var>-character string <var>S</var> consisting of uppercase English letters.\nDetermine if <var>S</var> consists of exactly two kinds of characters which both appear twice in <var>S</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The length of <var>S</var> is <var>4</var>.</li>\n<li><var>S</var> consists of uppercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> consists of exactly two kinds of characters which both appear twice in <var>S</var>, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>ASSA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><var>S</var> consists of <code>A</code> and <code>S</code> which both appear twice in <var>S</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>STOP\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>FFEE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>FREE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre></section>\n</div>\n</span>", "p02988": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a permutation <var>p</var> = {<var>p_1,\\ p_2,\\ ...,\\ p_n</var>} of {<var>1,\\ 2,\\ ...,\\ n</var>}.</p>\n<p>Print the number of elements <var>p_i</var> (<var>1 &lt; i &lt; n</var>) that satisfy the following condition:</p>\n<ul>\n<li><var>p_i</var> is the second smallest number among the three numbers <var>p_{i - 1}</var>, <var>p_i</var>, and <var>p_{i + 1}</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>3 \\leq n \\leq 20</var></li>\n<li><var>p</var> is a permutation of {<var>1,\\ 2,\\ ...,\\ n</var>}.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>p_1</var> <var>p_2</var> <var>...</var> <var>p_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of elements <var>p_i</var> (<var>1 &lt; i &lt; n</var>) that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 3 5 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p><var>p_2 = 3</var> is the second smallest number among <var>p_1 = 1</var>, <var>p_2 = 3</var>, and <var>p_3 = 5</var>. Also, <var>p_4 = 4</var> is the second smallest number among <var>p_3 = 5</var>, <var>p_4 = 4</var>, and <var>p_5 = 2</var>. These two elements satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9\n9 6 3 2 5 8 7 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre></section>\n</div>\n</span>", "p02989": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi made <var>N</var> problems for competitive programming.\nThe problems are numbered <var>1</var> to <var>N</var>, and the difficulty of Problem <var>i</var> is represented as an integer <var>d_i</var> (the higher, the harder).</p>\n<p>He is dividing the problems into two categories by choosing an integer <var>K</var>, as follows:</p>\n<ul>\n<li>A problem with difficulty <var>K</var> or higher will be <em>for ARCs</em>.</li>\n<li>A problem with difficulty lower than <var>K</var> will be <em>for ABCs</em>.</li>\n</ul>\n<p>How many choices of the integer <var>K</var> make the number of problems for ARCs and the number of problems for ABCs the same?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>N</var> is an even number.</li>\n<li><var>1 \\leq d_i \\leq 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>d_1</var> <var>d_2</var> <var>...</var> <var>d_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of choices of the integer <var>K</var> that make the number of problems for ARCs and the number of problems for ABCs the same.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n9 1 4 4 6 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If we choose <var>K=5</var> or <var>6</var>, Problem <var>1</var>, <var>5</var>, and <var>6</var> will be for ARCs, Problem <var>2</var>, <var>3</var>, and <var>4</var> will be for ABCs, and the objective is achieved.\nThus, the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8\n9 1 14 5 5 4 4 14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>There may be no choice of the integer <var>K</var> that make the number of problems for ARCs and the number of problems for ABCs the same.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>14\n99592 10342 29105 78532 83018 11639 92015 77204 30914 21912 34519 80835 100000 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>42685\n</pre></section>\n</div>\n</span>", "p02990": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>K</var> blue balls and <var>N-K</var> red balls. The balls of the same color cannot be distinguished. Snuke and Takahashi are playing with these balls.</p>\n<p>First, Snuke will arrange the <var>N</var> balls in a row from left to right.</p>\n<p>Then, Takahashi will collect only the <var>K</var> blue balls. In one move, he can collect any number of consecutive blue balls. He will collect all the blue balls in the fewest moves possible.</p>\n<p>How many ways are there for Snuke to arrange the <var>N</var> balls in a row so that Takahashi will need exactly <var>i</var> moves to collect all the blue balls? Compute this number modulo <var>10^9+7</var> for each <var>i</var> such that <var>1 \\leq i \\leq K</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N \\leq 2000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>K</var> lines. The <var>i</var>-th line (<var>1 \\leq i \\leq K</var>) should contain the number of ways to arrange the <var>N</var> balls so that Takahashi will need exactly <var>i</var> moves to collect all the blue balls, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n6\n1\n</pre>\n<p>There are three ways to arrange the balls so that Takahashi will need exactly one move: (B, B, B, R, R), (R, B, B, B, R), and (R, R, B, B, B). (R and B stands for red and blue, respectively).</p>\n<p>There are six ways to arrange the balls so that Takahashi will need exactly two moves: (B, B, R, B, R), (B, B, R, R, B), (R, B, B, R, B), (R, B, R, B, B), (B, R, B, B, R), and (B, R, R, B, B).</p>\n<p>There is one way to arrange the balls so that Takahashi will need exactly three moves: (B, R, B, R, B).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2000 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1998\n3990006\n327341989\n</pre>\n<p>Be sure to print the numbers of arrangements modulo <var>10^9+7</var>.</p></section>\n</div>\n</span>", "p02991": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Ken loves <em>ken-ken-pa</em> (Japanese version of hopscotch). Today, he will play it on a directed graph <var>G</var>.\n<var>G</var> consists of <var>N</var> vertices numbered <var>1</var> to <var>N</var>, and <var>M</var> edges. The <var>i</var>-th edge points from Vertex <var>u_i</var> to Vertex <var>v_i</var>.</p>\n<p>First, Ken stands on Vertex <var>S</var>. He wants to reach Vertex <var>T</var> by repeating ken-ken-pa. In one ken-ken-pa, he does the following exactly three times: follow an edge pointing from the vertex on which he is standing.</p>\n<p>Determine if he can reach Vertex <var>T</var> by repeating ken-ken-pa. If the answer is yes, find the minimum number of ken-ken-pa needed to reach Vertex <var>T</var>. Note that visiting Vertex <var>T</var> in the middle of a ken-ken-pa does not count as reaching Vertex <var>T</var> by repeating ken-ken-pa.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq M \\leq \\min(10^5, N (N-1))</var></li>\n<li><var>1 \\leq u_i, v_i \\leq N(1 \\leq i \\leq M)</var></li>\n<li><var>u_i \\neq v_i (1 \\leq i \\leq M)</var></li>\n<li>If <var>i \\neq j</var>, <var>(u_i, v_i) \\neq (u_j, v_j)</var>.</li>\n<li><var>1 \\leq S, T \\leq N</var></li>\n<li><var>S \\neq T</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>u_1</var> <var>v_1</var>\n<var>:</var>\n<var>u_M</var> <var>v_M</var>\n<var>S</var> <var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Ken cannot reach Vertex <var>T</var> from Vertex <var>S</var> by repeating ken-ken-pa, print <var>-1</var>.\nIf he can, print the minimum number of ken-ken-pa needed to reach vertex <var>T</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 4\n1 2\n2 3\n3 4\n4 1\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Ken can reach Vertex <var>3</var> from Vertex <var>1</var> in two ken-ken-pa, as follows: <var>1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4</var> in the first ken-ken-pa, then <var>4 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3</var> in the second ken-ken-pa. This is the minimum number of ken-ken-pa needed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n1 2\n2 3\n3 1\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>Any number of ken-ken-pa will bring Ken back to Vertex <var>1</var>, so he cannot reach Vertex <var>2</var>, though he can pass through it in the middle of a ken-ken-pa.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 0\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n<p>Vertex <var>S</var> and Vertex <var>T</var> may be disconnected.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>6 8\n1 2\n2 3\n3 4\n4 5\n5 1\n1 4\n1 5\n4 6\n1 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>2\n</pre></section>\n</div>\n</span>", "p02992": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the number of sequences of length <var>K</var> consisting of positive integers such that the product of any two adjacent elements is at most <var>N</var>, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq N\\leq 10^9</var></li>\n<li><s>1</s> <var>2\\leq K\\leq 100</var> (fixed at 21:33 JST)</li>\n<li><var>N</var> and <var>K</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of sequences, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p><var>(1,1)</var>, <var>(1,2)</var>, <var>(1,3)</var>, <var>(2,1)</var>, and <var>(3,1)</var> satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>147\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159265 35\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>457397712\n</pre></section>\n</div>\n</span>", "p02993": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>The door of Snuke's laboratory is locked with a security code.</p>\n<p>The security code is a <var>4</var>-digit number. We say the security code is <em>hard to enter</em> when it contains two consecutive digits that are the same.</p>\n<p>You are given the current security code <var>S</var>. If <var>S</var> is hard to enter, print <code>Bad</code>; otherwise, print <code>Good</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>S</var> is a <var>4</var>-character string consisting of digits.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If <var>S</var> is hard to enter, print <code>Bad</code>; otherwise, print <code>Good</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3776\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Bad\n</pre>\n<p>The second and third digits are the same, so <var>3776</var> is hard to enter.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8080\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Good\n</pre>\n<p>There are no two consecutive digits that are the same, so <var>8080</var> is not hard to enter.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1333\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Bad\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>0024\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Bad\n</pre></section>\n</div>\n</span>", "p02994": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have <var>N</var> apples, called Apple <var>1</var>, Apple <var>2</var>, Apple <var>3</var>, ..., Apple <var>N</var>. The <em>flavor</em> of Apple <var>i</var> is <var>L+i-1</var>, which can be negative.</p>\n<p>You can make an apple pie using one or more of the apples. The flavor of the apple pie will be the sum of the flavors of the apples used.</p>\n<p>You planned to make an apple pie using all of the apples, but being hungry tempts you to eat one of them, which can no longer be used to make the apple pie.</p>\n<p>You want to make an apple pie that is as similar as possible to the one that you planned to make. Thus, you will choose the apple to eat so that the flavor of the apple pie made of the remaining <var>N-1</var> apples will have the smallest possible absolute difference from the flavor of the apple pie made of all the <var>N</var> apples.</p>\n<p>Find the flavor of the apple pie made of the remaining <var>N-1</var> apples when you choose the apple to eat as above.</p>\n<p>We can prove that this value is uniquely determined.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200</var></li>\n<li><var>-100 \\leq L \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>L</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the flavor of the apple pie made of the remaining <var>N-1</var> apples when you optimally choose the apple to eat.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>18\n</pre>\n<p>The flavors of Apple <var>1</var>, <var>2</var>, <var>3</var>, <var>4</var>, and <var>5</var> are <var>2</var>, <var>3</var>, <var>4</var>, <var>5</var>, and <var>6</var>, respectively. The optimal choice is to eat Apple <var>1</var>, so the answer is <var>3+4+5+6=18</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>The flavors of Apple <var>1</var>, <var>2</var>, and <var>3</var> are <var>-1</var>, <var>0</var>, and <var>1</var>, respectively. The optimal choice is to eat Apple <var>2</var>, so the answer is <var>(-1)+1=0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>30 -50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1044\n</pre></section>\n</div>\n</span>", "p02995": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given four integers <var>A</var>, <var>B</var>, <var>C</var>, and <var>D</var>. Find the number of integers between <var>A</var> and <var>B</var> (inclusive) that can be evenly divided by neither <var>C</var> nor <var>D</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq A\\leq B\\leq 10^{18}</var></li>\n<li><var>1\\leq C,D\\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of integers between <var>A</var> and <var>B</var> (inclusive) that can be evenly divided by neither <var>C</var> nor <var>D</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 9 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p><var>5</var> and <var>7</var> satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 40 6 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>23\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159265358979323 846264338327950288 419716939 937510582\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>532105071133627368\n</pre></section>\n</div>\n</span>", "p02996": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Kizahashi, who was appointed as the administrator of ABC at National Problem Workshop in the Kingdom of AtCoder, got too excited and took on too many jobs.</p>\n<p>Let the current time be time <var>0</var>. Kizahashi has <var>N</var> jobs numbered <var>1</var> to <var>N</var>.</p>\n<p>It takes <var>A_i</var> units of time for Kizahashi to complete Job <var>i</var>. The deadline for Job <var>i</var> is time <var>B_i</var>, and he must complete the job before or at this time.</p>\n<p>Kizahashi cannot work on two or more jobs simultaneously, but when he completes a job, he can start working on another immediately.</p>\n<p>Can Kizahashi complete all the jobs in time? If he can, print <code>Yes</code>; if he cannot, print <code>No</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i, B_i \\leq 10^9 (1 \\leq i \\leq N)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>.</var>\n<var>.</var>\n<var>.</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If Kizahashi can complete all the jobs in time, print <code>Yes</code>; if he cannot, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n2 4\n1 9\n1 8\n4 9\n3 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>He can complete all the jobs in time by, for example, doing them in the following order:</p>\n<ul>\n<li>Do Job <var>2</var> from time <var>0</var> to <var>1</var>.</li>\n<li>Do Job <var>1</var> from time <var>1</var> to <var>3</var>.</li>\n<li>Do Job <var>4</var> from time <var>3</var> to <var>7</var>.</li>\n<li>Do Job <var>3</var> from time <var>7</var> to <var>8</var>.</li>\n<li>Do Job <var>5</var> from time <var>8</var> to <var>11</var>.</li>\n</ul>\n<p>Note that it is fine to complete Job <var>3</var> exactly at the deadline, time <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n334 1000\n334 1000\n334 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>He cannot complete all the jobs in time, no matter what order he does them in.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>30\n384 8895\n1725 9791\n170 1024\n4 11105\n2 6\n578 1815\n702 3352\n143 5141\n1420 6980\n24 1602\n849 999\n76 7586\n85 5570\n444 4991\n719 11090\n470 10708\n1137 4547\n455 9003\n110 9901\n15 8578\n368 3692\n104 1286\n3 4\n366 12143\n7 6649\n610 2374\n152 7324\n4 7042\n292 11386\n334 5720\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p02997": "<span class=\"lang-en\">\n<p>Score: <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Does there exist an undirected graph with <var>N</var> vertices satisfying the following conditions?</p>\n<ul>\n<li>The graph is simple and connected.</li>\n<li>The vertices are numbered <var>1, 2, ..., N</var>.</li>\n<li>Let <var>M</var> be the number of edges in the graph. The edges are numbered <var>1, 2, ..., M</var>, the length of each edge is <var>1</var>, and Edge <var>i</var> connects Vertex <var>u_i</var> and Vertex <var>v_i</var>.</li>\n<li>There are exactly <var>K</var> pairs of vertices <var>(i,\\ j)\\ (i &lt; j)</var> such that the shortest distance between them is <var>2</var>.</li>\n</ul>\n<p>If there exists such a graph, construct an example.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq K \\leq \\frac{N(N - 1)}{2}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there does not exist an undirected graph with <var>N</var> vertices satisfying the conditions, print <code>-1</code>.</p>\n<p>If there exists such a graph, print an example in the following format (refer to Problem Statement for what the symbols stand for):</p>\n<pre><var>M</var>\n<var>u_1</var> <var>v_1</var>\n<var>:</var>\n<var>u_M</var> <var>v_M</var>\n</pre>\n<p>If there exist multiple graphs satisfying the conditions, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n4 3\n1 2\n3 1\n4 5\n2 3\n</pre>\n<p>This graph has three pairs of vertices such that the shortest distance between them is <var>2</var>: <var>(1,\\ 4)</var>, <var>(2,\\ 4)</var>, and <var>(3,\\ 5)</var>. Thus, the condition is satisfied.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>There is no graph satisfying the conditions.</p></section>\n</div>\n</span>", "p02999": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>X</var> and <var>A</var> are integers between <var>0</var> and <var>9</var> (inclusive).</p>\n<p>If <var>X</var> is less than <var>A</var>, print <var>0</var>; if <var>X</var> is not less than <var>A</var>, print <var>10</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq X, A \\leq 9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>A</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>X</var> is less than <var>A</var>, print <var>0</var>; if <var>X</var> is not less than <var>A</var>, print <var>10</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n</pre>\n<p><var>3</var> is less than <var>5</var>, so we should print <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n<p><var>7</var> is not less than <var>5</var>, so we should print <var>10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>10\n</pre>\n<p><var>6</var> is not less than <var>6</var>, so we should print <var>10</var>.</p></section>\n</div>\n</span>", "p02998": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> dots in a two-dimensional plane. The coordinates of the <var>i</var>-th dot are <var>(x_i, y_i)</var>.</p>\n<p>We will repeat the following operation as long as possible:</p>\n<ul>\n<li>Choose four integers <var>a</var>, <var>b</var>, <var>c</var>, <var>d</var> <var>(a \\neq c, b \\neq d)</var> such that there are dots at exactly three of the positions <var>(a, b)</var>, <var>(a, d)</var>, <var>(c, b)</var> and <var>(c, d)</var>, and add a dot at the remaining position.</li>\n</ul>\n<p>We can prove that we can only do this operation a finite number of times. Find the maximum number of times we can do the operation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq x_i, y_i \\leq 10^5</var></li>\n<li>If <var>i \\neq j</var>, <var>x_i \\neq x_j</var> or <var>y_i \\neq y_j</var>.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>:</var>\n<var>x_N</var> <var>y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of times we can do the operation.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 1\n5 1\n5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>By choosing <var>a = 1</var>, <var>b = 1</var>, <var>c = 5</var>, <var>d = 5</var>, we can add a dot at <var>(1, 5)</var>. We cannot do the operation any more, so the maximum number of operations is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n10 10\n20 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>There are only two dots, so we cannot do the operation at all.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9\n1 1\n2 1\n3 1\n4 1\n5 1\n1 2\n1 3\n1 4\n1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>16\n</pre>\n<p>We can do the operation for all choices of the form <var>a = 1</var>, <var>b = 1</var>, <var>c = i</var>, <var>d = j</var> <var>(2 \\leq i,j \\leq 5)</var>, and no more. Thus, the maximum number of operations is <var>16</var>.</p></section>\n</div>\n</span>", "p03000": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A ball will bounce along a number line, making <var>N + 1</var> bounces. It will make the first bounce at coordinate <var>D_1 = 0</var>, and the <var>i</var>-th bounce <var>(2 \\leq i \\leq N+1)</var> at coordinate <var>D_i = D_{i-1} + L_{i-1}</var>.</p>\n<p>How many times will the ball make a bounce where the coordinate is at most <var>X</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq L_i \\leq 100</var></li>\n<li><var>1 \\leq X \\leq 10000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var>\n<var>L_1</var> <var>L_2</var> <var>...</var> <var>L_{N-1}</var> <var>L_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of times the ball will make a bounce where the coordinate is at most <var>X</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 6\n3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The ball will make a bounce at the coordinates <var>0</var>, <var>3</var>, <var>7</var> and <var>12</var>, among which two are less than or equal to <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 9\n3 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n<p>The ball will make a bounce at the coordinates <var>0</var>, <var>3</var>, <var>6</var>, <var>9</var> and <var>12</var>, among which four are less than or equal to <var>9</var>.</p></section>\n</div>\n</span>", "p03001": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a rectangle in a coordinate plane. The coordinates of the four vertices are <var>(0,0)</var>, <var>(W,0)</var>, <var>(W,H)</var>, and <var>(0,H)</var>.\nYou are given a point <var>(x,y)</var> which is within the rectangle or on its border. We will draw a straight line passing through <var>(x,y)</var> to cut the rectangle into two parts. Find the maximum possible area of the part whose area is not larger than that of the other. Additionally, determine if there are multiple ways to cut the rectangle and achieve that maximum.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq W,H \\leq 10^9</var></li>\n<li><var>0\\leq x\\leq W</var></li>\n<li><var>0\\leq y\\leq H</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>W</var> <var>H</var> <var>x</var> <var>y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible area of the part whose area is not larger than that of the other, followed by <code>1</code> if there are multiple ways to cut the rectangle and achieve that maximum, and <code>0</code> otherwise.</p>\n<p>The area printed will be judged correct when its absolute or relative error is at most <var>10^{-9}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3.000000 0\n</pre>\n<p>The line <var>x=1</var> gives the optimal cut, and no other line does.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2.000000 1\n</pre></section>\n</div>\n</span>", "p03003": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given two integer sequences <var>S</var> and <var>T</var> of length <var>N</var> and <var>M</var>, respectively, both consisting of integers between <var>1</var> and <var>10^5</var> (inclusive).</p>\n<p>In how many pairs of a subsequence of <var>S</var> and a subsequence of <var>T</var> do the two subsequences are the same in content?</p>\n<p>Here the subsequence of <var>A</var> is a sequence obtained by removing zero or more elements from <var>A</var> and concatenating the remaining elements without changing the order.</p>\n<p>For both <var>S</var> and <var>T</var>, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.</p>\n<p>Since the answer can be tremendous, print the number modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, M \\leq 2 \\times 10^3</var></li>\n<li>The length of <var>S</var> is <var>N</var>.</li>\n<li>The length of <var>T</var> is <var>M</var>.     </li>\n<li><var>1 \\leq S_i, T_i \\leq 10^5</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>S_1</var> <var>S_2</var> <var>...</var> <var>S_{N-1}</var> <var>S_{N}</var>\n<var>T_1</var> <var>T_2</var> <var>...</var> <var>T_{M-1}</var> <var>T_{M}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of pairs of a subsequence of <var>S</var> and a subsequence of <var>T</var> such that the subsequences are the same in content, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n1 3\n3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><var>S</var> has four subsequences: <var>(), (1), (3), (1, 3)</var>.</p>\n<p><var>T</var> has four subsequences: <var>(), (3), (1), (3, 1)</var>.</p>\n<p>There are <var>1 \\times 1</var> pair of subsequences in which the subsequences are both <var>()</var>, <var>1 \\times 1</var> pair of subsequences in which the subsequences are both <var>(1)</var>, and <var>1 \\times 1</var> pair of subsequences in which the subsequences are both <var>(3)</var>, for a total of three pairs.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2\n1 1\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n<p><var>S</var> has four subsequences: <var>(), (1), (1), (1, 1)</var>.</p>\n<p><var>T</var> has four subsequences: <var>(), (1), (1), (1, 1)</var>.</p>\n<p>There are <var>1 \\times 1</var> pair of subsequences in which the subsequences are both <var>()</var>, <var>2 \\times 2</var> pairs of subsequences in which the subsequences are both <var>(1)</var>, and <var>1 \\times 1</var> pair of subsequences in which the subsequences are both <var>(1,1)</var>, for a total of six pairs.\nNote again that we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 4\n3 4 5 6\n3 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>16\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 9\n9 6 5 7 5 9 8 5 6 7\n8 6 8 5 5 7 9 9 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>191\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>846527861\n</pre>\n<p>Be sure to print the number modulo <var>10^9+7</var>.</p></section>\n</div>\n</span>", "p03005": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is distributing <var>N</var> balls to <var>K</var> persons.</p>\n<p>If each person has to receive at least one ball, what is the maximum possible difference in the number of balls received between the person with the most balls and the person with the fewest balls?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible difference in the number of balls received.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The only way to distribute three balls to two persons so that each of them receives at least one ball is to give one ball to one person and give two balls to the other person.</p>\n<p>Thus, the maximum possible difference in the number of balls received is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>We have no choice but to give three balls to the only person, in which case the difference in the number of balls received is <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre>\n<p>For example, if we give <var>1, 4, 1, 1, 1</var> balls to the five persons, the number of balls received between the person with the most balls and the person with the fewest balls would be <var>3</var>, which is the maximum result.</p></section>\n</div>\n</span>", "p03006": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> balls in a two-dimensional plane. The <var>i</var>-th ball is at coordinates <var>(x_i, y_i)</var>.</p>\n<p>We will collect all of these balls, by choosing two integers <var>p</var> and <var>q</var> such that <var>p \\neq 0</var> or <var>q \\neq 0</var> and then repeating the following operation:</p>\n<ul>\n<li>Choose a ball remaining in the plane and collect it. Let <var>(a, b)</var> be the coordinates of this ball. If we collected a ball at coordinates <var>(a - p, b - q)</var> in the previous operation, the cost of this operation is <var>0</var>. Otherwise, including when this is the first time to do this operation, the cost of this operation is <var>1</var>.</li>\n</ul>\n<p>Find the minimum total cost required to collect all the balls when we optimally choose <var>p</var> and <var>q</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>|x_i|, |y_i| \\leq 10^9</var></li>\n<li>If <var>i \\neq j</var>, <var>x_i \\neq x_j</var> or <var>y_i \\neq y_j</var>.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>:</var>\n<var>x_N</var> <var>y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total cost required to collect all the balls.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 1\n2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>If we choose <var>p = 1, q = 1</var>, we can collect all the balls at a cost of <var>1</var> by collecting them in the order <var>(1, 1)</var>, <var>(2, 2)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 4\n4 6\n7 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>If we choose <var>p = -3, q = -2</var>, we can collect all the balls at a cost of <var>1</var> by collecting them in the order <var>(7, 8)</var>, <var>(4, 6)</var>, <var>(1, 4)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n1 1\n1 2\n2 1\n2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre></section>\n</div>\n</span>", "p03007": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> integers, <var>A_1, A_2, ..., A_N</var>, written on a blackboard.</p>\n<p>We will repeat the following operation <var>N-1</var> times so that we have only one integer on the blackboard.</p>\n<ul>\n<li>Choose two integers <var>x</var> and <var>y</var> on the blackboard and erase these two integers. Then, write a new integer <var>x-y</var>.</li>\n</ul>\n<p>Find the maximum possible value of the final integer on the blackboard and a sequence of operations that maximizes the final integer.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>-10^4 \\leq A_i \\leq 10^4</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible value <var>M</var> of the final integer on the blackboard, and a sequence of operations <var>x_i, y_i</var> that maximizes the final integer, in the format below.</p>\n<p>Here <var>x_i</var> and <var>y_i</var> represent the integers <var>x</var> and <var>y</var> chosen in the <var>i</var>-th operation, respectively.</p>\n<p>If there are multiple sequences of operations that maximize the final integer, any of them will be accepted.</p>\n<pre><var>M</var>\n<var>x_1</var> <var>y_1</var>\n<var>:</var>\n<var>x_{N-1}</var> <var>y_{N-1}</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 -1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n-1 1\n2 -2\n</pre>\n<p>If we choose <var>x = -1</var> and <var>y = 1</var> in the first operation, the set of integers written on the blackboard becomes <var>(-2, 2)</var>.</p>\n<p>Then, if we choose <var>x = 2</var> and <var>y = -2</var> in the second operation, the set of integers written on the blackboard becomes <var>(4)</var>.</p>\n<p>In this case, we have <var>4</var> as the final integer. We cannot end with a greater integer, so the answer is <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n1 1\n1 0\n</pre></section>\n</div>\n</span>", "p03008": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>The squirrel Chokudai has <var>N</var> acorns.\nOne day, he decides to do some trades in multiple precious metal exchanges to make more acorns.</p>\n<p>His plan is as follows:</p>\n<ol>\n<li>Get out of the nest with <var>N</var> acorns in his hands.</li>\n<li>Go to Exchange <var>A</var> and do some trades.</li>\n<li>Go to Exchange <var>B</var> and do some trades.</li>\n<li>Go to Exchange <var>A</var> and do some trades.</li>\n<li>Go back to the nest.</li>\n</ol>\n<p>In Exchange <var>X</var> <var>(X = A, B)</var>, he can perform the following operations any integer number of times (possibly zero) in any order:</p>\n<ul>\n<li>Lose <var>g_{X}</var> acorns and gain <var>1</var> gram of gold.</li>\n<li>Gain <var>g_{X}</var> acorns and lose <var>1</var> gram of gold.</li>\n<li>Lose <var>s_{X}</var> acorns and gain <var>1</var> gram of silver.</li>\n<li>Gain <var>s_{X}</var> acorns and lose <var>1</var> gram of silver.</li>\n<li>Lose <var>b_{X}</var> acorns and gain <var>1</var> gram of bronze.</li>\n<li>Gain <var>b_{X}</var> acorns and lose <var>1</var> gram of bronze.</li>\n</ul>\n<p>Naturally, he cannot perform an operation that would leave him with a negative amount of acorns, gold, silver, or bronze.</p>\n<p>What is the maximum number of acorns that he can bring to the nest?\nNote that gold, silver, or bronze brought to the nest would be worthless because he is just a squirrel.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 5000</var></li>\n<li><var>1 \\leq g_{X} \\leq 5000</var></li>\n<li><var>1 \\leq s_{X} \\leq 5000</var></li>\n<li><var>1 \\leq b_{X} \\leq 5000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>g_A</var> <var>s_A</var> <var>b_A</var>\n<var>g_B</var> <var>s_B</var> <var>b_B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of acorns that Chokudai can bring to the nest.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>23\n1 1 1\n2 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>46\n</pre>\n<p>He can bring <var>46</var> acorns to the nest, as follows:</p>\n<ul>\n<li>In Exchange <var>A</var>, trade <var>23</var> acorns for <var>23</var> grams of gold. {acorns, gold, silver, bronze}={ <var>0,23,0,0</var> }</li>\n<li>In Exchange <var>B</var>, trade <var>23</var> grams of gold for <var>46</var> acorns. {acorns, gold, silver, bronze}={ <var>46,0,0,0</var> }</li>\n<li>In Exchange <var>A</var>, trade nothing. {acorns, gold, silver, bronze}={ <var>46,0,0,0</var> }</li>\n</ul>\n<p>He cannot have <var>47</var> or more acorns, so the answer is <var>46</var>.</p></section>\n</div>\n</span>", "p03004": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> points in a two-dimensional plane. The initial coordinates of the <var>i</var>-th point are <var>(x_i, y_i)</var>. Now, each point starts moving at a speed of 1 per second, in a direction parallel to the <var>x</var>- or <var>y</var>- axis. You are given a character <var>d_i</var> that represents the specific direction in which the <var>i</var>-th point moves, as follows:</p>\n<ul>\n<li>If <var>d_i =</var> <code>R</code>, the <var>i</var>-th point moves in the positive <var>x</var> direction;</li>\n<li>If <var>d_i =</var> <code>L</code>, the <var>i</var>-th point moves in the negative <var>x</var> direction;</li>\n<li>If <var>d_i =</var> <code>U</code>, the <var>i</var>-th point moves in the positive <var>y</var> direction;</li>\n<li>If <var>d_i =</var> <code>D</code>, the <var>i</var>-th point moves in the negative <var>y</var> direction.</li>\n</ul>\n<p>You can stop all the points at some moment of your choice after they start moving (including the moment they start moving).\nThen, let <var>x_{max}</var> and <var>x_{min}</var> be the maximum and minimum among the <var>x</var>-coordinates of the <var>N</var> points, respectively. Similarly, let <var>y_{max}</var> and <var>y_{min}</var> be the maximum and minimum among the <var>y</var>-coordinates of the <var>N</var> points, respectively.</p>\n<p>Find the minimum possible value of <var>(x_{max} - x_{min}) \\times (y_{max} - y_{min})</var> and print it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>-10^8 \\leq x_i,\\ y_i \\leq 10^8</var></li>\n<li><var>x_i</var> and <var>y_i</var> are integers.</li>\n<li><var>d_i</var> is <code>R</code>, <code>L</code>, <code>U</code>, or <code>D</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var> <var>d_1</var>\n<var>x_2</var> <var>y_2</var> <var>d_2</var>\n<var>.</var>\n<var>.</var>\n<var>.</var>\n<var>x_N</var> <var>y_N</var> <var>d_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible value of <var>(x_{max} - x_{min}) \\times (y_{max} - y_{min})</var>.</p>\n<p>The output will be considered correct when its absolute or relative error from the judge's output is at most <var>10^{-9}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n0 3 D\n3 0 L\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n</pre>\n<p>After three seconds, the two points will meet at the origin. The value in question will be <var>0</var> at that moment.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n-7 -10 U\n7 -6 U\n-8 7 D\n-3 3 D\n0 -6 R\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>97.5\n</pre>\n<p>The answer may not be an integer.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20\n6 -10 R\n-4 -9 U\n9 6 D\n-3 -2 R\n0 7 D\n4 5 D\n10 -10 U\n-1 -8 U\n10 -6 D\n8 -5 U\n6 4 D\n0 3 D\n7 9 R\n9 -4 R\n3 10 D\n1 9 U\n1 -6 U\n9 -8 R\n6 7 D\n7 -3 D\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>273\n</pre></section>\n</div>\n</span>", "p03009": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> squares arranged in a row, numbered <var>1</var> to <var>N</var> from left to right. Takahashi will stack building blocks on these squares, on which there are no blocks yet.</p>\n<p>He wants to stack blocks on the squares evenly, so he will repeat the following operation until there are <var>H</var> blocks on every square:</p>\n<ul>\n<li>Let <var>M</var> and <var>m</var> be the maximum and minimum numbers of blocks currently stacked on a square, respectively. Choose a square on which <var>m</var> blocks are stacked (if there are multiple such squares, choose any one of them), and add a positive number of blocks on that square so that there will be at least <var>M</var> and at most <var>M + D</var> blocks on that square.</li>\n</ul>\n<p>Tell him how many ways there are to have <var>H</var> blocks on every square by repeating this operation. Since there can be extremely many ways, print the number modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^6</var></li>\n<li><var>1 \\leq D \\leq H \\leq 10^6</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>H</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to have <var>H</var> blocks on every square, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>The possible transitions of (the number of blocks on Square <var>1</var>, the number of blocks on Square <var>2</var>) are as follows:</p>\n<ul>\n<li>\n<p><var>(0, 0)</var> -&gt; <var>(0, 1)</var> -&gt; <var>(1, 1)</var> -&gt; <var>(1, 2)</var> -&gt; <var>(2, 2)</var></p>\n</li>\n<li>\n<p><var>(0, 0)</var> -&gt; <var>(0, 1)</var> -&gt; <var>(1, 1)</var> -&gt; <var>(2, 1)</var> -&gt; <var>(2, 2)</var></p>\n</li>\n<li>\n<p><var>(0, 0)</var> -&gt; <var>(0, 1)</var> -&gt; <var>(2, 1)</var> -&gt; <var>(2, 2)</var></p>\n</li>\n<li>\n<p><var>(0, 0)</var> -&gt; <var>(1, 0)</var> -&gt; <var>(1, 1)</var> -&gt; <var>(1, 2)</var> -&gt; <var>(2, 2)</var></p>\n</li>\n<li>\n<p><var>(0, 0)</var> -&gt; <var>(1, 0)</var> -&gt; <var>(1, 1)</var> -&gt; <var>(2, 1)</var> -&gt; <var>(2, 2)</var></p>\n</li>\n<li>\n<p><var>(0, 0)</var> -&gt; <var>(1, 0)</var> -&gt; <var>(1, 2)</var> -&gt; <var>(2, 2)</var></p>\n</li>\n</ul>\n<p>Thus, there are six ways to have two blocks on every square.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 30 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>94182806\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31415 9265 3589\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>312069529\n</pre>\n<p>Be sure to print the number modulo <var>10^9+7</var>.</p></section>\n</div>\n</span>", "p03011": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are three airports A, B and C, and flights between each pair of airports in both directions.</p>\n<p>A one-way flight between airports A and B takes <var>P</var> hours, a one-way flight between airports B and C takes <var>Q</var> hours, and a one-way flight between airports C and A takes <var>R</var> hours.</p>\n<p>Consider a route where we start at one of the airports, fly to another airport and then fly to the other airport.</p>\n<p>What is the minimum possible sum of the flight times?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq P,Q,R \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>P</var> <var>Q</var> <var>R</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible sum of the flight times.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<ul>\n<li>The sum of the flight times in the route A <var>\\rightarrow</var> B <var>\\rightarrow</var> C: <var>1 + 3 = 4</var> hours</li>\n<li>The sum of the flight times in the route A <var>\\rightarrow</var> C <var>\\rightarrow</var> C: <var>4 + 3 = 7</var> hours</li>\n<li>The sum of the flight times in the route B <var>\\rightarrow</var> A <var>\\rightarrow</var> C: <var>1 + 4 = 5</var> hours</li>\n<li>The sum of the flight times in the route B <var>\\rightarrow</var> C <var>\\rightarrow</var> A: <var>3 + 4 = 7</var> hours</li>\n<li>The sum of the flight times in the route C <var>\\rightarrow</var> A <var>\\rightarrow</var> B: <var>4 + 1 = 5</var> hours</li>\n<li>The sum of the flight times in the route C <var>\\rightarrow</var> B <var>\\rightarrow</var> A: <var>3 + 1 = 4</var> hours</li>\n</ul>\n<p>The minimum of these is <var>4</var> hours.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03013": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a staircase with <var>N</var> steps. Takahashi is now standing at the foot of the stairs, that is, on the <var>0</var>-th step.\nHe can climb up one or two steps at a time.</p>\n<p>However, the treads of the <var>a_1</var>-th, <var>a_2</var>-th, <var>a_3</var>-th, <var>\\ldots</var>, <var>a_M</var>-th steps are broken, so it is dangerous to set foot on those steps.</p>\n<p>How many are there to climb up to the top step, that is, the <var>N</var>-th step, without setting foot on the broken steps?\nFind the count modulo <var>1\\ 000\\ 000\\ 007</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq M \\leq N-1</var></li>\n<li><var>1 \\leq a_1 &lt; a_2 &lt; </var> <var>...</var> <var> &lt; a_M \\leq N-1</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var>\n<var>a_2</var>\n<var> .</var>\n<var> .</var>\n<var> .</var>\n<var>a_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to climb up the stairs under the condition, modulo <var>1\\ 000\\ 000\\ 007</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 1\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>There are four ways to climb up the stairs, as follows:</p>\n<ul>\n<li><var>0 \\to 1 \\to 2 \\to 4 \\to 5 \\to 6</var></li>\n<li><var>0 \\to 1 \\to 2 \\to 4 \\to 6</var></li>\n<li><var>0 \\to 2 \\to 4 \\to 5 \\to 6</var></li>\n<li><var>0 \\to 2 \\to 4 \\to 6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 2\n4\n5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>There may be no way to climb up the stairs without setting foot on the broken steps.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 5\n1\n23\n45\n67\n89\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>608200469\n</pre>\n<p>Be sure to print the count modulo <var>1\\ 000\\ 000\\ 007</var>.</p></section>\n</div>\n</span>", "p03014": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a grid with <var>H</var> horizontal rows and <var>W</var> vertical columns, and there are obstacles on some of the squares.</p>\n<p>Snuke is going to choose one of the squares not occupied by an obstacle and place a lamp on it.\nThe lamp placed on the square will emit straight beams of light in four cardinal directions: up, down, left, and right.\nIn each direction, the beam will continue traveling until it hits a square occupied by an obstacle or it hits the border of the grid. It will light all the squares on the way, including the square on which the lamp is placed, but not the square occupied by an obstacle.</p>\n<p>Snuke wants to maximize the number of squares lighted by the lamp.</p>\n<p>You are given <var>H</var> strings <var>S_i</var> (<var>1 \\leq i \\leq H</var>), each of length <var>W</var>. If the <var>j</var>-th character (<var>1 \\leq j \\leq W</var>) of <var>S_i</var> is <code>#</code>, there is an obstacle on the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left; if that character is <code>.</code>, there is no obstacle on that square.</p>\n<p>Find the maximum possible number of squares lighted by the lamp.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H \\leq 2,000</var></li>\n<li><var>1 \\leq W \\leq 2,000</var></li>\n<li><var>S_i</var> is a string of length <var>W</var> consisting of <code>#</code> and <code>.</code>.</li>\n<li><code>.</code> occurs at least once in one of the strings <var>S_i</var> (<var>1 \\leq i \\leq H</var>).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>S_1</var>\n<var>:</var>\n<var>S_H</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of squares lighted by the lamp.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 6\n#..#..\n.....#\n....#.\n#.#...\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>If Snuke places the lamp on the square at the second row from the top and the second column from the left, it will light the following squares: the first through fifth squares from the left in the second row, and the first through fourth squares from the top in the second column, for a total of eight squares.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 8\n..#...#.\n....#...\n##......\n..###..#\n...#..#.\n##....#.\n#...#...\n###.#..#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>13\n</pre></section>\n</div>\n</span>", "p03015": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a positive integer <var>L</var> in base two.\nHow many pairs of non-negative integers <var>(a, b)</var> satisfy the following conditions?</p>\n<ul>\n<li><var>a + b \\leq L</var></li>\n<li><var>a + b = a \\mbox{ XOR } b</var></li>\n</ul>\n<p>Since there can be extremely many such pairs, print the count modulo <var>10^9 + 7</var>.</p>\n<p><details> <summary style=\"display: list-item; outline: none;\">What is XOR?</summary></details></p>\n<p>The XOR of integers <var>A</var> and <var>B</var>, <var>A \\mbox{ XOR } B</var>, is defined as follows:</p>\n<ul>\n<li>When <var>A \\mbox{ XOR } B</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if either <var>A</var> or <var>B</var>, but not both, has <var>1</var> in the <var>2^k</var>'s place, and <var>0</var> otherwise.</li>\n</ul>\n<p>For example, <var>3 \\mbox{ XOR } 5 = 6</var>. (In base two: <var>011 \\mbox{ XOR } 101 = 110</var>.)</p>\n<p></p></section></div></span>", "p03016": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><!-- You are given <var>Q</var> tuples of integers <var>(L_i, A_i, B_i, M_i)</var>. For each tuple, answer the following question. -->\n<p>There is an arithmetic progression with <var>L</var> terms: <var>s_0, s_1, s_2, ... , s_{L-1}</var>.</p>\n<p>The initial term is <var>A</var>, and the common difference is <var>B</var>. That is, <var>s_i = A + B \\times i</var> holds.</p>\n<p>Consider the integer obtained by concatenating the terms written in base ten without leading zeros. For example, the sequence <var>3, 7, 11, 15, 19</var> would be concatenated into <var>37111519</var>. What is the remainder when that integer is divided by <var>M</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq L, A, B &lt; 10^{18}</var></li>\n<li><var>2 \\leq M \\leq 10^9</var></li>\n<li>All terms in the arithmetic progression are less than <var>10^{18}</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>L</var> <var>A</var> <var>B</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the remainder when the integer obtained by concatenating the terms is divided by <var>M</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3 4 10007\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5563\n</pre>\n<p>Our arithmetic progression is <var>3, 7, 11, 15, 19</var>, so the answer is <var>37111519</var> mod <var>10007</var>, that is, <var>5563</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 8 1 1000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>891011\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>107 10000000000007 1000000000000007 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>39122908\n</pre></section>\n</div>\n</span>", "p03017": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> squares arranged in a row, numbered <var>1, 2, ..., N</var> from left to right.\nYou are given a string <var>S</var> of length <var>N</var> consisting of <code>.</code> and <code>#</code>. If the <var>i</var>-th character of <var>S</var> is <code>#</code>, Square <var>i</var> contains a rock; if the <var>i</var>-th character of <var>S</var> is <code>.</code>, Square <var>i</var> is empty.</p>\n<p>In the beginning, Snuke stands on Square <var>A</var>, and Fnuke stands on Square <var>B</var>.</p>\n<p>You can repeat the following operation any number of times:</p>\n<ul>\n<li>Choose Snuke or Fnuke, and make him jump one or two squares to the right. The destination must be one of the squares, and it must not contain a rock or the other person.</li>\n</ul>\n<p>You want to repeat this operation so that Snuke will stand on Square <var>C</var> and Fnuke will stand on Square <var>D</var>.</p>\n<p>Determine whether this is possible.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>4 \\leq N \\leq 200\\ 000</var></li>\n<li><var>S</var> is a string of length <var>N</var> consisting of <code>.</code> and <code>#</code>.</li>\n<li><var>1 \\leq A, B, C, D \\leq N</var></li>\n<li>Square <var>A</var>, <var>B</var>, <var>C</var> and <var>D</var> do not contain a rock.</li>\n<li><var>A</var>, <var>B</var>, <var>C</var> and <var>D</var> are all different.</li>\n<li><var>A &lt; B</var></li>\n<li><var>A &lt; C</var></li>\n<li><var>B &lt; D</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var> <var>C</var> <var>D</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Yes</code> if the objective is achievable, and <code>No</code> if it is not.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7 1 3 6 7\n.#..#..\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>The objective is achievable by, for example, moving the two persons as follows. (<code>A</code> and <code>B</code> represent Snuke and Fnuke, respectively.)</p>\n<pre>A#B.#..\n\nA#.B#..\n\n.#AB#..\n\n.#A.#B.\n\n.#.A#B.\n\n.#.A#.B\n\n.#..#AB\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 1 3 7 6\n.#..#..\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15 1 3 15 13\n...#.#...#.#...\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p03019": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi and Aoki will take <var>N</var> exams numbered <var>1</var> to <var>N</var>.\nThey have decided to compete in these exams.\nThe winner will be determined as follows:</p>\n<ul>\n<li>\n<p>For each exam <var>i</var>, Takahashi decides its <em>importance</em> <var>c_i</var>, which must be an integer between <var>l_i</var> and <var>u_i</var> (inclusive).</p>\n</li>\n<li>\n<p>Let <var>A</var> be <var>\\sum_{i=1}^{N} c_i \\times</var> (Takahashi's score on Exam <var>i</var>), and <var>B</var> be <var>\\sum_{i=1}^{N} c_i \\times</var> (Aoki's score on Exam <var>i</var>). Takahashi wins if <var>A \\geq B</var>, and Aoki wins if <var>A &lt; B</var>.</p>\n</li>\n</ul>\n<p>Takahashi knows that Aoki will score <var>b_i</var> on Exam <var>i</var>, with his supernatural power.</p>\n<p>Takahashi himself, on the other hand, will score <var>0</var> on all the exams without studying more. For each hour of study, he can increase his score on some exam by <var>1</var>. (He can only study for an integer number of hours.)\nHowever, <strong>he cannot score more than <var>X</var> on an exam</strong>, since the perfect score for all the exams is <var>X</var>.</p>\n<p>Print the minimum number of study hours required for Takahashi to win.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq X \\leq 10^5</var></li>\n<li><var>0 \\leq b_i \\leq X</var> <var>(1 \\leq i \\leq N)</var></li>\n<li><var>1 \\leq l_i \\leq u_i \\leq 10^5</var> <var>(1 \\leq i \\leq N)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var>\n<var>b_1</var> <var>l_1</var> <var>u_1</var>\n<var>b_2</var> <var>l_2</var> <var>u_2</var>\n<var>:</var>\n<var>b_N</var> <var>l_N</var> <var>u_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of study hours required for Takahashi to win.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 100\n85 2 3\n60 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>115\n</pre>\n<p>One optimal strategy is as follows:</p>\n<ul>\n<li>\n<p>Choose <var>c_1 = 3, c_2 = 1</var>.</p>\n</li>\n<li>\n<p>Study to score <var>100</var> on Exam <var>1</var> and <var>15</var> on Exam <var>2</var>.</p>\n</li>\n</ul>\n<p>Then, <var>A = 3 \\times 100 + 1 \\times 15 = 315</var>, <var>B = 3 \\times 85 + 1 \\times 60 = 315</var> and Takahashi will win.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 100\n85 2 3\n60 10 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>77\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 100000\n31415 2718 2818\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>31415\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 1000\n451 4593 6263\n324 310 6991\n378 1431 7068\n71 1757 9218\n204 3676 4328\n840 6221 9080\n684 1545 8511\n709 5467 8674\n862 6504 9835\n283 4965 9980\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>2540\n</pre></section>\n</div>\n</span>", "p03020": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke is playing with red and blue balls, placing them on a two-dimensional plane.</p>\n<p>First, he performed <var>N</var> operations to place red balls. In the <var>i</var>-th of these operations, he placed <var>RC_i</var> red balls at coordinates <var>(RX_i,RY_i)</var>.\nThen, he performed another <var>N</var> operations to place blue balls. In the <var>i</var>-th of these operations, he placed <var>BC_i</var> blue balls at coordinates <var>(BX_i,BY_i)</var>.\nThe total number of red balls placed and the total number of blue balls placed are equal, that is, <var>\\sum_{i=1}^{N} RC_i = \\sum_{i=1}^{N} BC_i</var>. Let this value be <var>S</var>.</p>\n<p>Snuke will now form <var>S</var> pairs of red and blue balls so that every ball belongs to exactly one pair.\nLet us define the <em>score</em> of a pair of a red ball at coordinates <var>(rx, ry)</var> and a blue ball at coordinates <var>(bx, by)</var> as <var>|rx-bx| + |ry-by|</var>.</p>\n<p>Snuke wants to maximize the sum of the scores of the pairs.\nHelp him by finding the maximum possible sum of the scores of the pairs.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>0 \\leq RX_i,RY_i,BX_i,BY_i \\leq 10^9</var></li>\n<li><var>1 \\leq RC_i,BC_i \\leq 10</var></li>\n<li><var>\\sum_{i=1}^{N} RC_i = \\sum_{i=1}^{N} BC_i</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>RX_1</var> <var>RY_1</var> <var>RC_1</var>\n<var>RX_2</var> <var>RY_2</var> <var>RC_2</var>\n<var>\\vdots</var>\n<var>RX_N</var> <var>RY_N</var> <var>RC_N</var>\n<var>BX_1</var> <var>BY_1</var> <var>BC_1</var>\n<var>BX_2</var> <var>BY_2</var> <var>BC_2</var>\n<var>\\vdots</var>\n<var>BX_N</var> <var>BY_N</var> <var>BC_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the scores of the pairs.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n0 0 1\n3 2 1\n2 2 1\n5 0 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>If we pair the red ball at coordinates <var>(0,0)</var> and the blue ball at coordinates <var>(2,2)</var>, the score of this pair is <var>|0-2| + |0-2|=4</var>.\nThen, if we pair the red ball at coordinates <var>(3,2)</var> and the blue ball at coordinates <var>(5,0)</var>, the score of this pair is <var>|3-5| + |2-0|=4</var>.\nMaking these two pairs results in the total score of <var>8</var>, which is the maximum result.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n0 0 1\n2 2 1\n0 0 2\n1 1 1\n1 1 1\n3 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>16\n</pre>\n<p>Snuke may have performed multiple operations at the same coordinates.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n582463373 690528069 8\n621230322 318051944 4\n356524296 974059503 6\n372751381 111542460 9\n392867214 581476334 6\n606955458 513028121 5\n882201596 791660614 9\n250465517 91918758 3\n618624774 406956634 6\n426294747 736401096 5\n974896051 888765942 5\n726682138 336960821 3\n715144179 82444709 6\n599055841 501257806 6\n390484433 962747856 4\n912334580 219343832 8\n570458984 648862300 6\n638017635 572157978 10\n435958984 585073520 7\n445612658 234265014 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>45152033546\n</pre></section>\n</div>\n</span>", "p03021": "<span class=\"lang-en\">\n<p>Score : <var>1500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a tree with <var>N</var> vertices numbered <var>1, 2, ..., N</var>. The <var>i</var>-th edge connects Vertex <var>a_i</var> and Vertex <var>b_i</var>.\nYou are also given a string <var>S</var> of length <var>N</var> consisting of <code>0</code> and <code>1</code>. The <var>i</var>-th character of <var>S</var> represents the number of pieces placed on Vertex <var>i</var>.</p>\n<p>Snuke will perform the following operation some number of times:</p>\n<ul>\n<li>Choose two pieces the distance between which is at least <var>2</var>, and bring these pieces closer to each other by <var>1</var>. More formally, choose two vertices <var>u</var> and <var>v</var>, each with one or more pieces, and consider the shortest path between them. Here the path must contain at least two edges. Then, move one piece from <var>u</var> to its adjacent vertex on the path, and move one piece from <var>v</var> to its adjacent vertex on the path.</li>\n</ul>\n<p>By repeating this operation, Snuke wants to have all the pieces on the same vertex. Is this possible?\nIf the answer is yes, also find the minimum number of operations required to achieve it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2000</var></li>\n<li><var>|S| = N</var></li>\n<li><var>S</var> consists of <code>0</code> and <code>1</code>, and contains at least one <code>1</code>.</li>\n<li><var>1 \\leq a_i, b_i \\leq N(a_i \\neq b_i)</var></li>\n<li>The edges <var>(a_1, b_1), (a_2, b_2), ..., (a_{N - 1}, b_{N - 1})</var> forms a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>:</var>\n<var>a_{N - 1}</var> <var>b_{N - 1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is impossible to have all the pieces on the same vertex, print <code>-1</code>. If it is possible, print the minimum number of operations required.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n0010101\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>We can gather all the pieces in three operations as follows:</p>\n<ul>\n<li>Choose the pieces on Vertex <var>3</var> and <var>5</var>.</li>\n<li>Choose the pieces on Vertex <var>2</var> and <var>7</var>.</li>\n<li>Choose the pieces on Vertex <var>4</var> and <var>6</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7\n0010110\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n01\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03023": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given an integer <var>N</var> not less than <var>3</var>, find the sum of the interior angles of a regular polygon with <var>N</var> sides.</p>\n<p>Print the answer in degrees, but do not print units.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer representing the sum of the interior angles of a regular polygon with <var>N</var> sides.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>180\n</pre>\n<p>The sum of the interior angles of a regular triangle is <var>180</var> degrees.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>17640\n</pre></section>\n</div>\n</span>", "p03022": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke found a random number generator.\nIt generates an integer between <var>0</var> and <var>2^N-1</var> (inclusive).\nAn integer sequence <var>A_0, A_1, \\cdots, A_{2^N-1}</var>  represents the probability that each of these integers is generated. The integer <var>i</var> (<var>0 \\leq i \\leq 2^N-1</var>) is generated with probability <var>A_i / S</var>, where <var>S = \\sum_{i=0}^{2^N-1} A_i</var>. The process of generating an integer is done independently each time the generator is executed.</p>\n<p>Snuke has an integer <var>X</var>, which is now <var>0</var>.\nHe can perform the following operation any number of times:</p>\n<ul>\n<li>Generate an integer <var>v</var> with the generator and replace <var>X</var> with <var>X \\oplus v</var>, where <var>\\oplus</var> denotes the bitwise XOR.</li>\n</ul>\n<p>For each integer <var>i</var> (<var>0 \\leq i \\leq 2^N-1</var>), find the expected number of operations until <var>X</var> becomes <var>i</var>, and print it modulo <var>998244353</var>.\nMore formally, represent the expected number of operations as an irreducible fraction <var>P/Q</var>. Then, there exists a unique integer <var>R</var> such that <var>R \\times Q \\equiv P \\mod 998244353,\\ 0 \\leq R &lt; 998244353</var>, so print this <var>R</var>.</p>\n<p>We can prove that, for every <var>i</var>, the expected number of operations until <var>X</var> becomes <var>i</var> is a finite rational number, and its integer representation modulo <var>998244353</var> can be defined.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 18</var></li>\n<li><var>1 \\leq A_i \\leq 1000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_0</var> <var>A_1</var> <var>\\cdots</var> <var>A_{2^N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>2^N</var> lines.\nThe <var>(i+1)</var>-th line (<var>0 \\leq i \\leq 2^N-1</var>) should contain the expected number of operations until <var>X</var> becomes <var>i</var>, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n4\n4\n4\n</pre>\n<p><var>X=0</var> after zero operations, so the expected number of operations until <var>X</var> becomes <var>0</var> is <var>0</var>.</p>\n<p>Also, from any state, the value of <var>X</var> after one operation is <var>0</var>, <var>1</var>, <var>2</var> or <var>3</var> with equal probability.\nThus, the expected numbers of operations until <var>X</var> becomes <var>1</var>, <var>2</var> and <var>3</var> are all <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n1 2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n499122180\n4\n499122180\n</pre>\n<p>The expected numbers of operations until <var>X</var> becomes <var>0</var>, <var>1</var>, <var>2</var> and <var>3</var> are <var>0</var>, <var>7/2</var>, <var>4</var> and <var>7/2</var>, respectively.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n337 780 799 10 796 875 331 223 941 67 148 483 390 565 116 355\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n468683018\n635850749\n96019779\n657074071\n24757563\n745107950\n665159588\n551278361\n143136064\n557841197\n185790407\n988018173\n247117461\n129098626\n789682908\n</pre></section>\n</div>\n</span>", "p03024": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is competing in a sumo tournament.\nThe tournament lasts for <var>15</var> days, during which he performs in one match per day.\nIf he wins <var>8</var> or more matches, he can also participate in the next tournament.</p>\n<p>The matches for the first <var>k</var> days have finished.\nYou are given the results of Takahashi's matches as a string <var>S</var> consisting of <code>o</code> and <code>x</code>.\nIf the <var>i</var>-th character in <var>S</var> is <code>o</code>, it means that Takahashi won the match on the <var>i</var>-th day; if that character is <code>x</code>, it means that Takahashi lost the match on the <var>i</var>-th day.</p>\n<p>Print <code>YES</code> if there is a possibility that Takahashi can participate in the next tournament, and print <code>NO</code> if there is no such possibility.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq k \\leq 15</var></li>\n<li><var>S</var> is a string of length <var>k</var> consisting of <code>o</code> and <code>x</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>YES</code> if there is a possibility that Takahashi can participate in the next tournament, and print <code>NO</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>oxoxoxoxoxoxox\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>Takahashi has <var>7</var> wins and <var>7</var> losses before the last match. If he wins that match, he will have <var>8</var> wins.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>xxxxxxxx\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p03025": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi and Aoki will play a game. They will repeatedly play it until one of them have <var>N</var> wins in total.</p>\n<p>When they play the game once, Takahashi wins with probability <var>A</var> %, Aoki wins with probability <var>B</var> %, and the game ends in a draw (that is, nobody wins) with probability <var>C</var> %.\nFind the expected number of games that will be played, and print it as follows.</p>\n<p>We can represent the expected value as <var>P/Q</var> with coprime integers <var>P</var> and <var>Q</var>.\nPrint the integer <var>R</var> between <var>0</var> and <var>10^9+6</var> (inclusive) such that <var>R \\times Q \\equiv P\\pmod {10^9+7}</var>.\n(Such an integer <var>R</var> always uniquely exists under the constraints of this problem.)</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100000</var></li>\n<li><var>0 \\leq A,B,C \\leq 100</var></li>\n<li><var>1 \\leq A+B</var></li>\n<li><var>A+B+C=100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the expected number of games that will be played, in the manner specified in the statement.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 25 25 50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Since <var>N=1</var>, they will repeat the game until one of them wins.\nThe expected number of games played is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 50 50 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>312500008\n</pre>\n<p><var>C</var> may be <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 100 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n<p><var>B</var> may also be <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>100000 31 41 28\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>104136146\n</pre></section>\n</div>\n</span>", "p03026": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a tree with <var>N</var> vertices <var>1,2,\\ldots,N</var>, and positive integers <var>c_1,c_2,\\ldots,c_N</var>.\nThe <var>i</var>-th edge in the tree <var>(1 \\leq i \\leq N-1)</var> connects Vertex <var>a_i</var> and Vertex <var>b_i</var>.</p>\n<p>We will write a positive integer on each vertex in <var>T</var> and calculate our <em>score</em> as follows:</p>\n<ul>\n<li>On each edge, write the smaller of the integers written on the two endpoints.</li>\n<li>Let our score be the sum of the integers written on all the edges.</li>\n</ul>\n<p>Find the maximum possible score when we write each of <var>c_1,c_2,\\ldots,c_N</var> on one vertex in <var>T</var>, and show one way to achieve it. If an integer occurs multiple times in <var>c_1,c_2,\\ldots,c_N</var>, we must use it that number of times.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10000</var></li>\n<li><var>1 \\leq a_i,b_i \\leq N</var></li>\n<li><var>1 \\leq c_i \\leq 10^5</var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n<var>c_1</var> <var>\\ldots</var> <var>c_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Use the following format:</p>\n<pre><var>M</var>\n<var>d_1</var> <var>\\ldots</var> <var>d_N</var>\n</pre>\n<p>where <var>M</var> is the maximum possible score, and <var>d_i</var> is the integer to write on Vertex <var>i</var>.\n<var>d_1,d_2,\\ldots,d_N</var> must be a permutation of <var>c_1,c_2,\\ldots,c_N</var>.\nIf there are multiple ways to achieve the maximum score, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 2\n2 3\n3 4\n4 5\n1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n1 2 3 4 5\n</pre>\n<p>If we write <var>1,2,3,4,5</var> on Vertex <var>1,2,3,4,5</var>, respectively, the integers written on the four edges will be <var>1,2,3,4</var>, for the score of <var>10</var>. This is the maximum possible score.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 2\n1 3\n1 4\n1 5\n3141 59 26 53 59\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>197\n59 26 3141 59 53\n</pre>\n<p><var>c_1,c_2,\\ldots,c_N</var> may not be pairwise distinct.</p></section>\n</div>\n</span>", "p03027": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Consider the following arithmetic progression with <var>n</var> terms:</p>\n<ul>\n<li><var>x, x + d, x + 2d, \\ldots, x + (n-1)d</var></li>\n</ul>\n<p>What is the product of all terms in this sequence?\nCompute the answer modulo <var>1\\ 000\\ 003</var>.</p>\n<p>You are given <var>Q</var> queries of this form.\nIn the <var>i</var>-th query, compute the answer in case <var>x = x_i, d = d_i, n = n_i</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>0 \\leq x_i, d_i \\leq 1\\ 000\\ 002</var></li>\n<li><var>1 \\leq n_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>Q</var>\n<var>x_1</var> <var>d_1</var> <var>n_1</var>\n<var>:</var>\n<var>x_Q</var> <var>d_Q</var> <var>n_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines.</p>\n<p>In the <var>i</var>-th line, print the answer for the <var>i</var>-th query.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n7 2 4\n12345 67890 2019\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9009\n916936\n</pre>\n<p>For the first query, the answer is <var>7 \\times 9 \\times 11 \\times 13 = 9009</var>.\nDon't forget to compute the answer modulo <var>1\\ 000\\ 003</var>.</p></section>\n</div>\n</span>", "p03028": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will host a rock-paper-scissors tournament with <var>N</var> people. The participants are called Person <var>1</var>, Person <var>2</var>, <var>\\ldots</var>, Person <var>N</var>.\nFor any two participants, the result of the match between them is determined in advance.\nThis information is represented by positive integers <var>A_{i,j}</var> ( <var>1 \\leq j &lt; i \\leq N</var> ) as follows:</p>\n<ul>\n<li>If <var>A_{i,j} = 0</var>, Person <var>j</var> defeats Person <var>i</var>.</li>\n<li>If <var>A_{i,j} = 1</var>, Person <var>i</var> defeats Person <var>j</var>.</li>\n</ul>\n<p>The tournament proceeds as follows:</p>\n<ul>\n<li>We will arrange the <var>N</var> participants in a row, in the order Person <var>1</var>, Person <var>2</var>, <var>\\ldots</var>, Person <var>N</var> from left to right.</li>\n<li>We will randomly choose two consecutive persons in the row. They will play a match against each other, and we will remove the loser from the row.\nWe will repeat this process <var>N-1</var> times, and the last person remaining will be declared the champion.</li>\n</ul>\n<p>Find the number of persons with the possibility of becoming the champion.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2000</var></li>\n<li><var>A_{i,j}</var> is <var>0</var> or <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_{2,1}</var>\n<var>A_{3,1}</var><var>A_{3,2}</var>\n<var>:</var>\n<var>A_{N,1}</var><var>\\ldots</var><var>A_{N,N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of persons with the possibility of becoming the champion.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n0\n10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Person <var>1</var> defeats Person <var>2</var>, Person <var>2</var> defeats Person <var>3</var> and Person <var>3</var> defeats Person <var>1</var>.\nIf Person <var>1</var> and Person <var>2</var> play the first match, Person <var>3</var> will become the champion.\nIf Person <var>2</var> and Person <var>3</var> play the first match, Person <var>1</var> will become the champion.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n0\n11\n111\n1111\n11001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03029": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>A</var> apples and <var>P</var> pieces of apple.</p>\n<p>We can cut an apple into three pieces of apple, and make one apple pie by simmering two pieces of apple in a pan.</p>\n<p>Find the maximum number of apple pies we can make with what we have now.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>0 \\leq A, P \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>P</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of apple pies we can make with what we have.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>We can first make one apple pie by simmering two of the three pieces of apple. Then, we can make two more by simmering the remaining piece and three more pieces obtained by cutting the whole apple.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>We cannot make an apple pie in this case, unfortunately.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>32 21\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>58\n</pre></section>\n</div>\n</span>", "p03031": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> switches with \"on\" and \"off\" state, and <var>M</var> bulbs. The switches are numbered <var>1</var> to <var>N</var>, and the bulbs are numbered <var>1</var> to <var>M</var>.</p>\n<p>Bulb <var>i</var> is connected to <var>k_i</var> switches: Switch <var>s_{i1}</var>, <var>s_{i2}</var>, <var>...</var>, and <var>s_{ik_i}</var>. It is lighted when the number of switches that are \"on\" among these switches is congruent to <var>p_i</var> modulo <var>2</var>.</p>\n<p>How many combinations of \"on\" and \"off\" states of the switches light all the bulbs?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, M \\leq 10</var></li>\n<li><var>1 \\leq k_i \\leq N</var></li>\n<li><var>1 \\leq s_{ij} \\leq N</var></li>\n<li><var>s_{ia} \\neq s_{ib} (a \\neq b)</var></li>\n<li><var>p_i</var> is <var>0</var> or <var>1</var>.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>k_1</var> <var>s_{11}</var> <var>s_{12}</var> <var>...</var> <var>s_{1k_1}</var>\n<var>:</var>\n<var>k_M</var> <var>s_{M1}</var> <var>s_{M2}</var> <var>...</var> <var>s_{Mk_M}</var>\n<var>p_1</var> <var>p_2</var> <var>...</var> <var>p_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n2 1 2\n1 2\n0 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<ul>\n<li>Bulb <var>1</var> is lighted when there is an even number of switches that are \"on\" among the following: Switch <var>1</var> and <var>2</var>.</li>\n<li>Bulb <var>2</var> is lighted when there is an odd number of switches that are \"on\" among the following: Switch <var>2</var>.</li>\n</ul>\n<p>There are four possible combinations of states of (Switch <var>1</var>, Switch <var>2</var>): (on, on), (on, off), (off, on) and (off, off). Among them, only (on, on) lights all the bulbs, so we should print <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3\n2 1 2\n1 1\n1 2\n0 0 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<ul>\n<li>Bulb <var>1</var> is lighted when there is an even number of switches that are \"on\" among the following: Switch <var>1</var> and <var>2</var>.</li>\n<li>Bulb <var>2</var> is lighted when there is an even number of switches that are \"on\" among the following: Switch <var>1</var>.</li>\n<li>Bulb <var>3</var> is lighted when there is an odd number of switches that are \"on\" among the following: Switch <var>2</var>.</li>\n</ul>\n<p>Switch <var>1</var> has to be \"off\" to light Bulb <var>2</var> and Switch <var>2</var> has to be \"on\" to light Bulb <var>3</var>, but then Bulb <var>1</var> will not be lighted. Thus, there are no combinations of states of the switches that light all the bulbs, so we should print <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 2\n3 1 2 5\n2 2 3\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03032": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Your friend gave you a dequeue <var>D</var> as a birthday present.</p>\n<p><var>D</var> is a horizontal cylinder that contains a row of <var>N</var> jewels.</p>\n<p>The <em>values</em> of the jewels are <var>V_1, V_2, ..., V_N</var> from left to right. There may be jewels with negative values.</p>\n<p>In the beginning, you have no jewel in your hands.</p>\n<p>You can perform at most <var>K</var> operations on <var>D</var>, chosen from the following, at most <var>K</var> times (possibly zero):</p>\n<ul>\n<li>\n<p>Operation A: Take out the leftmost jewel contained in <var>D</var> and have it in your hand. You cannot do this operation when <var>D</var> is empty.</p>\n</li>\n<li>\n<p>Operation B: Take out the rightmost jewel contained in <var>D</var> and have it in your hand. You cannot do this operation when <var>D</var> is empty.</p>\n</li>\n<li>\n<p>Operation C: Choose a jewel in your hands and insert it to the left end of <var>D</var>. You cannot do this operation when you have no jewel in your hand.</p>\n</li>\n<li>\n<p>Operation D: Choose a jewel in your hands and insert it to the right end of <var>D</var>. You cannot do this operation when you have no jewel in your hand.</p>\n</li>\n</ul>\n<p>Find the maximum possible sum of the values of jewels in your hands after the operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq K \\leq 100</var></li>\n<li><var>-10^7 \\leq V_i \\leq 10^7</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>V_1</var> <var>V_2</var> <var>...</var> <var>V_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the values of jewels in your hands after the operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6 4\n-10 8 2 1 2 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>14\n</pre>\n<p>After the following sequence of operations, you have two jewels of values <var>8</var> and <var>6</var> in your hands for a total of <var>14</var>, which is the maximum result.</p>\n<ul>\n<li>Do operation A. You take out the jewel of value <var>-10</var> from the left end of <var>D</var>.</li>\n<li>Do operation B. You take out the jewel of value <var>6</var> from the right end of <var>D</var>.</li>\n<li>Do operation A. You take out the jewel of value <var>8</var> from the left end of <var>D</var>.</li>\n<li>Do operation D. You insert the jewel of value <var>-10</var> to the right end of <var>D</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 4\n-6 -100 50 -2 -5 -3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>44\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 3\n-6 -100 50 -2 -5 -3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>It is optimal to do no operation.</p></section>\n</div>\n</span>", "p03033": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an infinitely long street that runs west to east, which we consider as a number line.</p>\n<p>There are <var>N</var> roadworks scheduled on this street.\nThe <var>i</var>-th roadwork blocks the point at coordinate <var>X_i</var> from time <var>S_i - 0.5</var> to time <var>T_i - 0.5</var>.</p>\n<p><var>Q</var> people are standing at coordinate <var>0</var>. The <var>i</var>-th person will start the coordinate <var>0</var> at time <var>D_i</var>, continue to walk with speed <var>1</var> in the positive direction and stop walking when reaching a blocked point.</p>\n<p>Find the distance each of the <var>Q</var> people will walk.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N, Q \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq S_i &lt; T_i \\leq 10^9</var></li>\n<li><var>1 \\leq X_i \\leq 10^9</var></li>\n<li><var>0 \\leq D_1 &lt; D_2 &lt; ... &lt; D_Q \\leq 10^9</var></li>\n<li>If <var>i \\neq j</var> and <var>X_i = X_j</var>, the intervals <var>[S_i, T_i)</var> and <var>[S_j, T_j)</var> do not overlap.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>S_1</var> <var>T_1</var> <var>X_1</var>\n<var>:</var>\n<var>S_N</var> <var>T_N</var> <var>X_N</var>\n<var>D_1</var>\n<var>:</var>\n<var>D_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines. The <var>i</var>-th line should contain the distance the <var>i</var>-th person will walk or <var>-1</var> if that person walks forever.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 6\n1 3 2\n7 13 10\n18 20 13\n3 4 2\n0\n1\n2\n3\n5\n8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n2\n10\n-1\n13\n-1\n</pre>\n<p>The first person starts coordinate <var>0</var> at time <var>0</var> and stops walking at coordinate <var>2</var> when reaching a point blocked by the first roadwork at time <var>2</var>.</p>\n<p>The second person starts coordinate <var>0</var> at time <var>1</var> and reaches coordinate <var>2</var> at time <var>3</var>. The first roadwork has ended, but the fourth roadwork has begun, so this person also stops walking at coordinate <var>2</var>.</p>\n<p>The fourth and sixth persons encounter no roadworks while walking, so they walk forever. The output for these cases is <var>-1</var>.</p></section>\n</div>\n</span>", "p03034": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an infinitely large pond, which we consider as a number line.\nIn this pond, there are <var>N</var> lotuses floating at coordinates <var>0</var>, <var>1</var>, <var>2</var>, ..., <var>N-2</var> and <var>N-1</var>.\nOn the lotus at coordinate <var>i</var>, an integer <var>s_i</var> is written.</p>\n<p>You are standing on the lotus at coordinate <var>0</var>. You will play a game that proceeds as follows:</p>\n<ul>\n<li><var>1</var>. Choose positive integers <var>A</var> and <var>B</var>. Your score is initially <var>0</var>.</li>\n<li><var>2</var>. Let <var>x</var> be your current coordinate, and <var>y = x+A</var>. The lotus at coordinate <var>x</var> disappears, and you move to coordinate <var>y</var>.<ul>\n<li>If <var>y = N-1</var>, the game ends.</li>\n<li>If <var>y \\neq N-1</var> and there is a lotus floating at coordinate <var>y</var>, your score increases by <var>s_y</var>.</li>\n<li>If <var>y \\neq N-1</var> and there is no lotus floating at coordinate <var>y</var>, you drown. Your score decreases by <var>10^{100}</var> points, and the game ends.</li>\n</ul>\n</li>\n<li><var>3</var>. Let <var>x</var> be your current coordinate, and <var>y = x-B</var>. The lotus at coordinate <var>x</var> disappears, and you move to coordinate <var>y</var>.<ul>\n<li>If <var>y = N-1</var>, the game ends.</li>\n<li>If <var>y \\neq N-1</var> and there is a lotus floating at coordinate <var>y</var>, your score increases by <var>s_y</var>.</li>\n<li>If <var>y \\neq N-1</var> and there is no lotus floating at coordinate <var>y</var>, you drown. Your score decreases by <var>10^{100}</var> points, and the game ends.</li>\n</ul>\n</li>\n<li><var>4</var>. Go back to step <var>2</var>.</li>\n</ul>\n<p>You want to end the game with as high a score as possible.\nWhat is the score obtained by the optimal choice of <var>A</var> and <var>B</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 10^5</var></li>\n<li><var>-10^9 \\leq s_i \\leq 10^9</var></li>\n<li><var>s_0=s_{N-1}=0</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s_0</var> <var>s_1</var> <var>......</var> <var>s_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the score obtained by the optimal choice of <var>A</var> and <var>B</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n0 2 5 1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>If you choose <var>A = 3</var> and <var>B = 2</var>, the game proceeds as follows:</p>\n<ul>\n<li>Move to coordinate <var>0 + 3 = 3</var>. Your score increases by <var>s_3 = 1</var>.</li>\n<li>Move to coordinate <var>3 - 2 = 1</var>. Your score increases by <var>s_1 = 2</var>.</li>\n<li>Move to coordinate <var>1 + 3 = 4</var>. The game ends with a score of <var>3</var>.</li>\n</ul>\n<p>There is no way to end the game with a score of <var>4</var> or higher, so the answer is <var>3</var>. Note that you cannot land the lotus at coordinate <var>2</var> without drowning later.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n0 10 -7 -4 -13 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>The optimal strategy here is to land the final lotus immediately by choosing <var>A = 5</var> (the value of <var>B</var> does not matter).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11\n0 -4 0 -99 31 14 -15 -39 43 18 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>59\n</pre></section>\n</div>\n</span>", "p03037": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> ID cards, and there are <var>M</var> gates.</p>\n<p>We can pass the <var>i</var>-th gate if we have one of the following ID cards: the <var>L_i</var>-th, <var>(L_i+1)</var>-th, ..., and <var>R_i</var>-th ID cards.</p>\n<p>How many of the ID cards allow us to pass all the gates alone?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq L_i \\leq R_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>L_1</var> <var>R_1</var>\n<var>L_2</var> <var>R_2</var>\n<var>\\vdots</var>\n<var>L_M</var> <var>R_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ID cards that allow us to pass all the gates alone.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2\n1 3\n2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Two ID cards allow us to pass all the gates alone, as follows:</p>\n<ul>\n<li>The first ID card does not allow us to pass the second gate.</li>\n<li>The second ID card allows us to pass all the gates.</li>\n<li>The third ID card allows us to pass all the gates.</li>\n<li>The fourth ID card does not allow us to pass the first gate.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 3\n3 6\n5 7\n6 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100000 1\n1 100000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100000\n</pre></section>\n</div>\n</span>", "p03038": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have <var>N</var> cards. On the <var>i</var>-th card, an integer <var>A_i</var> is written.</p>\n<p>For each <var>j = 1, 2, ..., M</var> in this order, you will perform the following operation once:</p>\n<p>Operation: Choose at most <var>B_j</var> cards (possibly zero). Replace the integer written on each chosen card with <var>C_j</var>.</p>\n<p>Find the maximum possible sum of the integers written on the <var>N</var> cards after the <var>M</var> operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq A_i, C_i \\leq 10^9</var></li>\n<li><var>1 \\leq B_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n<var>B_1</var> <var>C_1</var>\n<var>B_2</var> <var>C_2</var>\n<var>\\vdots</var>\n<var>B_M</var> <var>C_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the integers written on the <var>N</var> cards after the <var>M</var> operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n5 1 4\n2 3\n1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>14\n</pre>\n<p>By replacing the integer on the second card with <var>5</var>, the sum of the integers written on the three cards becomes <var>5 + 5 + 4 = 14</var>, which is the maximum result.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 3\n1 8 5 7 100 4 52 33 13 5\n3 10\n4 30\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>338\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 2\n100 100 100\n3 99\n3 99\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>300\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>11 3\n1 1 1 1 1 1 1 1 1 1 1\n3 1000000000\n4 1000000000\n3 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>10000000001\n</pre>\n<p>The output may not fit into a <var>32</var>-bit integer type.</p></section>\n</div>\n</span>", "p03040": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a function <var>f(x)</var>, which is initially a constant function <var>f(x) = 0</var>.</p>\n<p>We will ask you to process <var>Q</var> queries in order. There are two kinds of queries, update queries and evaluation queries, as follows:</p>\n<ul>\n<li>An update query <code>1 a b</code>: Given two integers <var>a</var> and <var>b</var>, let <var>g(x) = f(x) + |x - a| + b</var> and replace <var>f(x)</var> with <var>g(x)</var>.</li>\n<li>An evaluation query <code>2</code>: Print <var>x</var> that minimizes <var>f(x)</var>, and the minimum value of <var>f(x)</var>. If there are multiple such values of <var>x</var>, choose the minimum such value.</li>\n</ul>\n<p>We can show that the values to be output in an evaluation query are always integers, so we ask you to print those values as integers without decimal points.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq Q \\leq 2 \\times 10^5</var></li>\n<li><var>-10^9 \\leq a, b \\leq 10^9</var></li>\n<li>The first query is an update query.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>Q</var>\n<var>Query_1</var>\n<var>:</var>\n<var>Query_Q</var>\n</pre>\n<p>See Sample Input 1 for an example.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each evaluation query, print a line containing the response, in the order in which the queries are given.</p>\n<p>The response to each evaluation query should be the minimum value of <var>x</var> that minimizes <var>f(x)</var>, and the minimum value of <var>f(x)</var>, in this order, with space in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 4 2\n2\n1 1 -8\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4 2\n1 -3\n</pre>\n<p>In the first evaluation query, <var>f(x) = |x - 4| + 2</var>, which attains the minimum value of <var>2</var> at <var>x = 4</var>.</p>\n<p>In the second evaluation query, <var>f(x) = |x - 1| + |x - 4| - 6</var>, which attains the minimum value of <var>-3</var> when <var>1 \\leq x \\leq 4</var>. Among the multiple values of <var>x</var> that minimize <var>f(x)</var>, we ask you to print the minimum, that is, <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 -1000000000 1000000000\n1 -1000000000 1000000000\n1 -1000000000 1000000000\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1000000000 3000000000\n</pre></section>\n</div>\n</span>", "p03039": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a grid of squares with <var>N</var> rows and <var>M</var> columns. Let <var>(i, j)</var> denote the square at the <var>i</var>-th row from the top and <var>j</var>-th column from the left. We will choose <var>K</var> of the squares and put a piece on each of them.</p>\n<p>If we place the <var>K</var> pieces on squares <var>(x_1, y_1)</var>, <var>(x_2, y_2)</var>, ..., and <var>(x_K, y_K)</var>, the <em>cost</em> of this arrangement is computed as:</p>\n<p><var>\\sum_{i=1}^{K-1} \\sum_{j=i+1}^K (|x_i - x_j| + |y_i - y_j|)</var></p>\n<p>Find the sum of the costs of all possible arrangements of the pieces. Since this value can be tremendous, print it modulo <var>10^9+7</var>.</p>\n<p>We consider two arrangements of the pieces different if and only if there is a square that contains a piece in one of the arrangements but not in the other.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\times M \\leq 2 \\times 10^5</var></li>\n<li><var>2 \\leq K \\leq N \\times M</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the costs of all possible arrangements of the pieces, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>There are six possible arrangements of the pieces, as follows:</p>\n<ul>\n<li><var>((1,1),(1,2))</var>, with the cost <var>|1-1|+|1-2| = 1</var></li>\n<li><var>((1,1),(2,1))</var>, with the cost <var>|1-2|+|1-1| = 1</var></li>\n<li><var>((1,1),(2,2))</var>, with the cost <var>|1-2|+|1-2| = 2</var></li>\n<li><var>((1,2),(2,1))</var>, with the cost <var>|1-2|+|2-1| = 2</var></li>\n<li><var>((1,2),(2,2))</var>, with the cost <var>|1-2|+|2-2| = 1</var></li>\n<li><var>((2,1),(2,2))</var>, with the cost <var>|2-2|+|1-2| = 1</var></li>\n</ul>\n<p>The sum of these costs is <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 5 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>87210\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 100 5000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>817260251\n</pre>\n<p>Be sure to print the sum modulo <var>10^9+7</var>.</p></section>\n</div>\n</span>", "p03042": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have a digit sequence <var>S</var> of length <var>4</var>. You are wondering which of the following formats <var>S</var> is in:</p>\n<ul>\n<li>YYMM format: the last two digits of the year and the two-digit representation of the month (example: <code>01</code> for January), concatenated in this order</li>\n<li>MMYY format: the two-digit representation of the month and the last two digits of the year, concatenated in this order</li>\n</ul>\n<p>If <var>S</var> is valid in only YYMM format, print <code>YYMM</code>; if <var>S</var> is valid in only MMYY format, print <code>MMYY</code>; if <var>S</var> is valid in both formats, print <code>AMBIGUOUS</code>; if <var>S</var> is valid in neither format, print <code>NA</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is a digit sequence of length <var>4</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the specified string: <code>YYMM</code>, <code>MMYY</code>, <code>AMBIGUOUS</code> or <code>NA</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1905\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YYMM\n</pre>\n<p>May <var>XX19</var> is a valid date, but <var>19</var> is not valid as a month. Thus, this string is only valid in YYMM format.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0112\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>AMBIGUOUS\n</pre>\n<p>Both December <var>XX01</var> and January <var>XX12</var> are valid dates. Thus, this string is valid in both formats.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1700\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NA\n</pre>\n<p>Neither <var>0</var> nor <var>17</var> is valid as a month. Thus, this string is valid in neither format.</p></section>\n</div>\n</span>", "p03044": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a tree with <var>N</var> vertices numbered <var>1</var> to <var>N</var>.\nThe <var>i</var>-th edge in the tree connects Vertex <var>u_i</var> and Vertex <var>v_i</var>, and its length is <var>w_i</var>.\nYour objective is to paint each vertex in the tree white or black (it is fine to paint all vertices the same color) so that the following condition is satisfied:</p>\n<ul>\n<li>For any two vertices painted in the same color, the distance between them is an even number.</li>\n</ul>\n<p>Find a coloring of the vertices that satisfies the condition and print it. It can be proved that at least one such coloring exists under the constraints of this problem.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq u_i &lt; v_i \\leq N</var></li>\n<li><var>1 \\leq w_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>u_1</var> <var>v_1</var> <var>w_1</var>\n<var>u_2</var> <var>v_2</var> <var>w_2</var>\n<var>.</var>\n<var>.</var>\n<var>.</var>\n<var>u_{N - 1}</var> <var>v_{N - 1}</var> <var>w_{N - 1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print a coloring of the vertices that satisfies the condition, in <var>N</var> lines.\nThe <var>i</var>-th line should contain <code>0</code> if Vertex <var>i</var> is painted white and <code>1</code> if it is painted black.</p>\n<p>If there are multiple colorings that satisfy the condition, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 2\n2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n0\n1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n2 5 2\n2 3 10\n1 3 8\n3 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n0\n1\n0\n1\n</pre></section>\n</div>\n</span>", "p03045": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> cards placed face down in a row. On each card, an integer <var>1</var> or <var>2</var> is written.</p>\n<p>Let <var>A_i</var> be the integer written on the <var>i</var>-th card.</p>\n<p>Your objective is to guess <var>A_1, A_2, ..., A_N</var> correctly.</p>\n<p>You know the following facts:</p>\n<ul>\n<li>For each <var>i = 1, 2, ..., M</var>, the value <var>A_{X_i} + A_{Y_i} + Z_i</var> is an even number.</li>\n</ul>\n<p>You are a magician and can use the following magic any number of times:</p>\n<p><strong>Magic</strong>: Choose one card and know the integer <var>A_i</var> written on it. The cost of using this magic is <var>1</var>.</p>\n<p>What is the minimum cost required to determine all of <var>A_1, A_2, ..., A_N</var>?</p>\n<p>It is guaranteed that there is no contradiction in given input.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq X_i &lt; Y_i \\leq N</var></li>\n<li><var>1 \\leq Z_i \\leq 100</var></li>\n<li>The pairs <var>(X_i, Y_i)</var> are distinct.</li>\n<li>There is no contradiction in input. (That is, there exist integers <var>A_1, A_2, ..., A_N</var> that satisfy the conditions.)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>X_1</var> <var>Y_1</var> <var>Z_1</var>\n<var>X_2</var> <var>Y_2</var> <var>Z_2</var>\n<var>\\vdots</var>\n<var>X_M</var> <var>Y_M</var> <var>Z_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total cost required to determine all of <var>A_1, A_2, ..., A_N</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1\n1 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>You can determine all of <var>A_1, A_2, A_3</var> by using the magic for the first and third cards.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 5\n1 2 1\n2 3 2\n1 3 3\n4 5 4\n5 6 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100000 1\n1 100000 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>99999\n</pre></section>\n</div>\n</span>", "p03046": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Construct a sequence <var>a</var> = {<var>a_1,\\ a_2,\\ ...,\\ a_{2^{M + 1}}</var>} of length <var>2^{M + 1}</var> that satisfies the following conditions, if such a sequence exists.</p>\n<ul>\n<li>Each integer between <var>0</var> and <var>2^M - 1</var> (inclusive) occurs twice in <var>a</var>.</li>\n<li>For any <var>i</var> and <var>j</var> <var>(i &lt; j)</var> such that <var>a_i = a_j</var>, the formula <var>a_i \\ xor \\ a_{i + 1} \\ xor \\ ... \\ xor \\ a_j = K</var> holds.</li>\n</ul>\n<p><details>\n<summary style=\"display: list-item; outline: none;\">What is xor (bitwise exclusive or)?</summary></details></p>\n<p>The xor of integers <var>c_1, c_2, ..., c_n</var> is defined as follows:</p>\n<ul>\n<li>When <var>c_1 \\ xor \\ c_2 \\ xor \\ ... \\ xor \\ c_n</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if the number of integers among <var>c_1, c_2, ...c_m</var> whose binary representations have <var>1</var> in the <var>2^k</var>'s place is odd, and <var>0</var> if that count is even.</li>\n</ul>\n<p>For example, <var>3 \\ xor \\ 5 = 6</var>. (If we write it in base two: <code>011</code> <var>xor</var> <code>101</code> <var>=</var> <code>110</code>.)</p>\n<p></p></section></div></span>", "p03047": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has <var>N</var> integers: <var>1,2,\\ldots,N</var>.\nHe will choose <var>K</var> of them and give those to Takahashi.</p>\n<p>How many ways are there to choose <var>K</var> consecutive integers?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq K \\leq N \\leq 50</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>There are two ways to choose two consecutive integers: <var>(1,2)</var> and <var>(2,3)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>13 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>11\n</pre></section>\n</div>\n</span>", "p03048": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has come to a store that sells boxes containing balls. The store sells the following three kinds of boxes:</p>\n<ul>\n<li>Red boxes, each containing <var>R</var> red balls</li>\n<li>Green boxes, each containing <var>G</var> green balls</li>\n<li>Blue boxes, each containing <var>B</var> blue balls</li>\n</ul>\n<p>Snuke wants to get a total of exactly <var>N</var> balls by buying <var>r</var> red boxes, <var>g</var> green boxes and <var>b</var> blue boxes.\nHow many triples of non-negative integers <var>(r,g,b)</var> achieve this?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq R,G,B,N \\leq 3000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>R</var> <var>G</var> <var>B</var> <var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Four triples achieve the objective, as follows:</p>\n<ul>\n<li><var>(4,0,0)</var></li>\n<li><var>(2,1,0)</var></li>\n<li><var>(1,0,1)</var></li>\n<li><var>(0,2,0)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>13 1 4 3000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>87058\n</pre></section>\n</div>\n</span>", "p03049": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has <var>N</var> strings. The <var>i</var>-th string is <var>s_i</var>.</p>\n<p>Let us concatenate these strings into one string after arranging them in some order.\nFind the maximum possible number of occurrences of <code>AB</code> in the resulting string.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^{4}</var></li>\n<li><var>2 \\leq |s_i| \\leq 10</var></li>\n<li><var>s_i</var> consists of uppercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s_1</var>\n<var>\\vdots</var>\n<var>s_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\nABCA\nXBAZ\nBAD\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, if we concatenate <code>ABCA</code>, <code>BAD</code> and <code>XBAZ</code> in this order, the resulting string <code>ABCABADXBAZ</code> has two occurrences of <code>AB</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9\nBEWPVCRWH\nZZNQYIJX\nBAVREA\nPA\nHJMYITEOX\nBCJHMRMNK\nBP\nQVFABZ\nPRGKSPUNA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\nRABYBBE\nJOZ\nBMHQUVA\nBPA\nISU\nMCMABAOBHZ\nSZMEHMA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03050": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke received a positive integer <var>N</var> from Takahashi.\nA positive integer <var>m</var> is called a <em>favorite number</em> when the following condition is satisfied:</p>\n<ul>\n<li>The quotient and remainder of <var>N</var> divided by <var>m</var> are equal, that is, <var>\\lfloor \\frac{N}{m} \\rfloor = N \\bmod m</var> holds.</li>\n</ul>\n<p>Find all favorite numbers and print the sum of those.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^{12}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>There are two favorite numbers: <var>3</var> and <var>7</var>. Print the sum of these, <var>10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2499686339916\n</pre>\n<p>Watch out for overflow.</p></section>\n</div>\n</span>", "p03051": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>The <em>beauty</em> of a sequence <var>a</var> of length <var>n</var> is defined as <var>a_1 \\oplus \\cdots \\oplus a_n</var>, where <var>\\oplus</var> denotes the bitwise exclusive or (XOR).</p>\n<p>You are given a sequence <var>A</var> of length <var>N</var>.\nSnuke will insert zero or more partitions in <var>A</var> to divide it into some number of non-empty contiguous subsequences.</p>\n<p>There are <var>2^{N-1}</var> possible ways to insert partitions.\nHow many of them divide <var>A</var> into sequences whose beauties are all equal? Find this count modulo <var>10^{9}+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 5 \\times 10^5</var></li>\n<li><var>0 \\leq A_i &lt; 2^{20}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>\\ldots</var> <var>A_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>Four ways of dividing <var>A</var> shown below satisfy the condition. The condition is not satisfied only if <var>A</var> is divided into <var>(1),(2),(3)</var>.</p>\n<ul>\n<li><var>(1,2,3)</var></li>\n<li><var>(1),(2,3)</var></li>\n<li><var>(1,2),(3)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>32\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>147483634\n</pre>\n<p>Find the count modulo <var>10^{9}+7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>24\n1 2 5 3 3 6 1 1 8 8 0 3 3 4 6 6 4 0 7 2 5 4 6 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>292\n</pre></section>\n</div>\n</span>", "p03052": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a simple connected undirected graph <var>G</var> consisting of <var>N</var> vertices and <var>M</var> edges.\nThe vertices are numbered <var>1</var> to <var>N</var>, and the edges are numbered <var>1</var> to <var>M</var>.</p>\n<p>Edge <var>i</var> connects Vertex <var>a_i</var> and <var>b_i</var> bidirectionally.\nIt is guaranteed that the subgraph consisting of Vertex <var>1,2,\\ldots,N</var> and Edge <var>1,2,\\ldots,N-1</var> is a spanning tree of <var>G</var>.</p>\n<p>An allocation of weights to the edges is called a <em>good allocation</em> when the tree consisting of Vertex <var>1,2,\\ldots,N</var> and Edge <var>1,2,\\ldots,N-1</var> is a minimum spanning tree of <var>G</var>.</p>\n<p>There are <var>M!</var> ways to allocate the edges distinct integer weights between <var>1</var> and <var>M</var>.\nFor each good allocation among those, find the total weight of the edges in the minimum spanning tree, and print the sum of those total weights modulo <var>10^{9}+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 20</var></li>\n<li><var>N-1 \\leq M \\leq N(N-1)/2</var></li>\n<li><var>1 \\leq a_i, b_i \\leq N</var></li>\n<li><var>G</var> does not have self-loops or multiple edges.</li>\n<li>The subgraph consisting of Vertex <var>1,2,\\ldots,N</var> and Edge <var>1,2,\\ldots,N-1</var> is a spanning tree of <var>G</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>b_1</var>\n<var>\\vdots</var>\n<var>a_M</var> <var>b_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 2\n2 3\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>An allocation is good only if Edge <var>3</var> has the weight <var>3</var>. For these good allocations, the total weight of the edges in the minimum spanning tree is <var>3</var>, and there are two good allocations, so the answer is <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4\n1 2\n3 2\n3 4\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>50\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15 28\n10 7\n5 9\n2 13\n2 14\n6 1\n5 12\n2 10\n3 9\n10 15\n11 12\n12 6\n2 12\n12 8\n4 10\n15 3\n13 14\n1 15\n15 12\n4 14\n1 7\n5 11\n7 13\n9 10\n2 7\n1 9\n5 6\n12 14\n5 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>657573092\n</pre>\n<p>Print the sum of those total weights modulo <var>10^{9}+7</var>.</p></section>\n</div>\n</span>", "p03053": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a grid of squares with <var>H</var> horizontal rows and <var>W</var> vertical columns, where each square is painted white or black.\n<var>HW</var> characters from <var>A_{11}</var> to <var>A_{HW}</var> represent the colors of the squares.\n<var>A_{ij}</var> is <code>#</code> if the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left is black, and <var>A_{ij}</var> is <code>.</code> if that square is white.</p>\n<p>We will repeatedly perform the following operation until all the squares are black:</p>\n<ul>\n<li>Every white square that shares a side with a black square, becomes black.</li>\n</ul>\n<p>Find the number of operations that will be performed.\nThe initial grid has at least one black square.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 1000</var></li>\n<li><var>A_{ij}</var> is <code>#</code> or <code>.</code>.</li>\n<li>The given grid has at least one black square.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>A_{11}</var><var>A_{12}</var><var>...</var><var>A_{1W}</var>\n<var>:</var>\n<var>A_{H1}</var><var>A_{H2}</var><var>...</var><var>A_{HW}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of operations that will be performed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n...\n.#.\n...\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>After one operation, all but the corners of the grid will be black. After one more operation, all the squares will be black.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 6\n..#..#\n......\n#..#..\n......\n.#....\n....#.\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03054": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a rectangular grid of squares with <var>H</var> horizontal rows and <var>W</var> vertical columns. Let <var>(i,j)</var> denote the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left.\nOn this grid, there is a piece, which is initially placed at square <var>(s_r,s_c)</var>.</p>\n<p>Takahashi and Aoki will play a game, where each player has a string of length <var>N</var>.\nTakahashi's string is <var>S</var>, and Aoki's string is <var>T</var>. <var>S</var> and <var>T</var> both consist of four kinds of letters: <code>L</code>, <code>R</code>, <code>U</code> and <code>D</code>.</p>\n<p>The game consists of <var>N</var> steps. The <var>i</var>-th step proceeds as follows:</p>\n<ul>\n<li>First, Takahashi performs a move. He either moves the piece in the direction of <var>S_i</var>, or does not move the piece.</li>\n<li>Second, Aoki performs a move. He either moves the piece in the direction of <var>T_i</var>, or does not move the piece.</li>\n</ul>\n<p>Here, to move the piece in the direction of <code>L</code>, <code>R</code>, <code>U</code> and <code>D</code>, is to move the piece from square <var>(r,c)</var> to square <var>(r,c-1)</var>, <var>(r,c+1)</var>, <var>(r-1,c)</var> and <var>(r+1,c)</var>, respectively. If the destination square does not exist, the piece is removed from the grid, and the game ends, even if less than <var>N</var> steps are done.</p>\n<p>Takahashi wants to remove the piece from the grid in one of the <var>N</var> steps.\nAoki, on the other hand, wants to finish the <var>N</var> steps with the piece remaining on the grid.\nDetermine if the piece will remain on the grid at the end of the game when both players play optimally.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq H,W \\leq 2 \\times 10^5</var></li>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq s_r \\leq H</var></li>\n<li><var>1 \\leq s_c \\leq W</var></li>\n<li><var>|S|=|T|=N</var></li>\n<li><var>S</var> and <var>T</var> consists of the four kinds of letters <code>L</code>, <code>R</code>, <code>U</code> and <code>D</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var> <var>N</var>\n<var>s_r</var> <var>s_c</var>\n<var>S</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the piece will remain on the grid at the end of the game, print <code>YES</code>; otherwise, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 3\n2 2\nRRL\nLUD\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>Here is one possible progress of the game:</p>\n<ul>\n<li>Takahashi moves the piece right. The piece is now at <var>(2,3)</var>.</li>\n<li>Aoki moves the piece left. The piece is now at <var>(2,2)</var>.</li>\n<li>Takahashi does not move the piece. The piece remains at <var>(2,2)</var>.</li>\n<li>Aoki moves the piece up. The piece is now at <var>(1,2)</var>.</li>\n<li>Takahashi moves the piece left. The piece is now at <var>(1,1)</var>.</li>\n<li>Aoki does not move the piece. The piece remains at <var>(1,1)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3 5\n2 2\nUDRRR\nLLDUD\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 6 11\n2 1\nRLDRRUDDLRL\nURRDRLLDLRD\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p03055": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi and Aoki will play a game on a tree.\nThe tree has <var>N</var> vertices numbered <var>1</var> to <var>N</var>, and the <var>i</var>-th of the <var>N-1</var> edges connects Vertex <var>a_i</var> and Vertex <var>b_i</var>.</p>\n<p>At the beginning of the game, each vertex contains a coin.\nStarting from Takahashi, he and Aoki will alternately perform the following operation:</p>\n<ul>\n<li>Choose a vertex <var>v</var> that contains one or more coins, and remove all the coins from <var>v</var>.</li>\n<li>Then, move each coin remaining on the tree to the vertex that is nearest to <var>v</var> among the adjacent vertices of the coin's current vertex.</li>\n</ul>\n<p>The player who becomes unable to play, loses the game.\nThat is, the player who takes his turn when there is no coin remaining on the tree, loses the game.\nDetermine the winner of the game when both players play optimally.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq a_i, b_i \\leq N</var></li>\n<li><var>a_i \\neq b_i</var></li>\n<li>The graph given as input is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>First</code> if Takahashi will win, and print <code>Second</code> if Aoki will win.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>First\n</pre>\n<p>Here is one possible progress of the game:</p>\n<ul>\n<li>Takahashi removes the coin from Vertex <var>1</var>. Now, Vertex <var>1</var> and Vertex <var>2</var> contain one coin each.</li>\n<li>Aoki removes the coin from Vertex <var>2</var>. Now, Vertex <var>2</var> contains one coin.</li>\n<li>Takahashi removes the coin from Vertex <var>2</var>. Now, there is no coin remaining on the tree.</li>\n<li>Aoki takes his turn when there is no coin on the tree and loses.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n1 2\n2 3\n2 4\n4 6\n5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Second\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n1 7\n7 4\n3 4\n7 5\n6 3\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>First\n</pre></section>\n</div>\n</span>", "p03056": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><strong>Note the unusual memory limit.</strong></p>\n<p>For a rectangular grid where each square is painted white or black, we define its <strong>complexity</strong> as follows:</p>\n<ul>\n<li>If all the squares are black or all the squares are white, the complexity is <var>0</var>.</li>\n<li>Otherwise, divide the grid into two subgrids by a line parallel to one of the sides of the grid, and let <var>c_1</var> and <var>c_2</var> be the complexities of the subgrids. There can be multiple ways to perform the division, and let <var>m</var> be the minimum value of <var>\\max(c_1, c_2)</var> in those divisions. The complexity of the grid is <var>m+1</var>.</li>\n</ul>\n<p>You are given a grid with <var>H</var> horizontal rows and <var>W</var> vertical columns where each square is painted white or black.\n<var>HW</var> characters from <var>A_{11}</var> to <var>A_{HW}</var> represent the colors of the squares.\n<var>A_{ij}</var> is <code>#</code> if the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left is black, and <var>A_{ij}</var> is <code>.</code> if that square is white.</p>\n<p>Find the complexity of the given grid.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 185</var></li>\n<li><var>A_{ij}</var> is <code>#</code> or <code>.</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>A_{11}</var><var>A_{12}</var><var>...</var><var>A_{1W}</var>\n<var>:</var>\n<var>A_{H1}</var><var>A_{H2}</var><var>...</var><var>A_{HW}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the complexity of the given grid.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n...\n.##\n.##\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Let us divide the grid by the boundary line between the first and second columns.\nThe subgrid consisting of the first column has the complexity of <var>0</var>, and the subgrid consisting of the second and third columns has the complexity of <var>1</var>, so the whole grid has the complexity of at most <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 7\n.####.#\n#....#.\n#....#.\n#....#.\n.####.#\n#....##\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03057": "<span class=\"lang-en\">\n<p>Score : <var>1500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Consider a circle whose perimeter is divided by <var>N</var> points into <var>N</var> arcs of equal length, and each of the arcs is painted red or blue. Such a circle is said to <em>generate a string <var>S</var> from every point</em> when the following condition is satisfied:</p>\n<ul>\n<li>We will arbitrarily choose one of the <var>N</var> points on the perimeter and place a piece on it.</li>\n<li>Then, we will perform the following move <var>M</var> times: move the piece clockwise or counter-clockwise to an adjacent point.</li>\n<li>Here, whatever point we choose initially, it is always possible to move the piece so that the color of the <var>i</var>-th arc the piece goes along is <var>S_i</var>, by properly deciding the directions of the moves.</li>\n</ul>\n<p>Assume that, if <var>S_i</var> is <code>R</code>, it represents red; if <var>S_i</var> is <code>B</code>, it represents blue.\nNote that the directions of the moves can be decided separately for each choice of the initial point.</p>\n<p>You are given a string <var>S</var> of length <var>M</var> consisting of <code>R</code> and <code>B</code>.\nOut of the <var>2^N</var> ways to paint each of the arcs red or blue in a circle whose perimeter is divided into <var>N</var> arcs of equal length, find the number of ways resulting in a circle that generates <var>S</var> from every point, modulo <var>10^9+7</var>.</p>\n<p>Note that the rotations of the same coloring are also distinguished.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq M \\leq 2 \\times 10^5</var></li>\n<li><var>|S|=M</var></li>\n<li><var>S_i</var> is <code>R</code> or <code>B</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to paint each of the arcs that satisfy the condition, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 7\nRBRRBRR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The condition is satisfied only if the arcs are alternately painted red and blue, so the answer here is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\nBBB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>12 10\nRRRRBRRRRB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>78\n</pre></section>\n</div>\n</span>", "p03058": "<span class=\"lang-en\">\n<p>Score : <var>2200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a tree <var>T</var> with <var>N</var> vertices and an undirected graph <var>G</var> with <var>N</var> vertices and <var>M</var> edges.\nThe vertices of each graph are numbered <var>1</var> to <var>N</var>.\nThe <var>i</var>-th of the <var>N-1</var> edges in <var>T</var> connects Vertex <var>a_i</var> and Vertex <var>b_i</var>, and the <var>j</var>-th of the <var>M</var> edges in <var>G</var> connects Vertex <var>c_j</var> and Vertex <var>d_j</var>.</p>\n<p>Consider adding edges to <var>G</var> by repeatedly performing the following operation:</p>\n<ul>\n<li>Choose three integers <var>a</var>, <var>b</var> and <var>c</var> such that <var>G</var> has an edge connecting Vertex <var>a</var> and <var>b</var> and an edge connecting Vertex <var>b</var> and <var>c</var> but not an edge connecting Vertex <var>a</var> and <var>c</var>. If there is a simple path in <var>T</var> that contains all three of Vertex <var>a, b</var> and <var>c</var> in some order, add an edge in <var>G</var> connecting Vertex <var>a</var> and <var>c</var>.</li>\n</ul>\n<p>Print the number of edges in <var>G</var> when no more edge can be added.\nIt can be shown that this number does not depend on the choices made in the operation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2000</var></li>\n<li><var>1 \\leq M \\leq 2000</var></li>\n<li><var>1 \\leq a_i, b_i \\leq N</var></li>\n<li><var>a_i \\neq b_i</var></li>\n<li><var>1 \\leq c_j, d_j \\leq N</var></li>\n<li><var>c_j \\neq d_j</var></li>\n<li><var>G</var> does not contain multiple edges.</li>\n<li><var>T</var> is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n<var>c_1</var> <var>d_1</var>\n<var>:</var>\n<var>c_M</var> <var>d_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the final number of edges in <var>G</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n1 2\n1 3\n3 4\n1 5\n5 4\n2 5\n1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>We can have at most six edges in <var>G</var> by adding edges as follows:</p>\n<ul>\n<li>Let <var>(a,b,c)=(1,5,4)</var> and add an edge connecting Vertex <var>1</var> and <var>4</var>.</li>\n<li>Let <var>(a,b,c)=(1,5,2)</var> and add an edge connecting Vertex <var>1</var> and <var>2</var>.</li>\n<li>Let <var>(a,b,c)=(2,1,4)</var> and add an edge connecting Vertex <var>2</var> and <var>4</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 5\n1 5\n1 4\n1 7\n1 2\n2 6\n6 3\n2 5\n1 3\n1 6\n4 6\n4 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>11\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>13 11\n6 13\n1 2\n5 1\n8 4\n9 7\n12 2\n10 11\n1 9\n13 7\n13 11\n8 10\n3 8\n4 13\n8 12\n4 7\n2 3\n5 11\n1 4\n2 11\n8 10\n3 5\n6 9\n4 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>27\n</pre></section>\n</div>\n</span>", "p03059": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A biscuit making machine produces <var>B</var> biscuits at the following moments: <var>A</var> seconds, <var>2A</var> seconds, <var>3A</var> seconds and each subsequent multiple of <var>A</var> seconds after activation.</p>\n<p>Find the total number of biscuits produced within <var>T + 0.5</var> seconds after activation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A, B, T \\leq 20</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the total number of biscuits produced within <var>T + 0.5</var> seconds after activation.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 5 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<ul>\n<li>Five biscuits will be produced three seconds after activation.</li>\n<li>Another five biscuits will be produced six seconds after activation.</li>\n<li>Thus, a total of ten biscuits will be produced within <var>7.5</var> seconds after activation.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20 20 19\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03060": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> gems. The value of the <var>i</var>-th gem is <var>V_i</var>.</p>\n<p>You will choose some of these gems, possibly all or none, and get them.</p>\n<p>However, you need to pay a cost of <var>C_i</var> to get the <var>i</var>-th gem.</p>\n<p>Let <var>X</var> be the sum of the values of the gems obtained, and <var>Y</var> be the sum of the costs paid.</p>\n<p>Find the maximum possible value of <var>X-Y</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 20</var></li>\n<li><var>1 \\leq C_i, V_i \\leq 50</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>V_1</var> <var>V_2</var> <var>...</var> <var>V_N</var>\n<var>C_1</var> <var>C_2</var> <var>...</var> <var>C_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible value of <var>X-Y</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n10 2 5\n6 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>If we choose the first and third gems, <var>X = 10 + 5 = 15</var> and <var>Y = 6 + 4 = 10</var>.\nWe have <var>X-Y = 5</var> here, which is the maximum possible value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n13 21 6 19\n11 30 6 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n1\n50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03061": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> integers, <var>A_1, A_2, ..., A_N</var>, written on the blackboard.</p>\n<p>You will choose one of them and replace it with an integer of your choice between <var>1</var> and <var>10^9</var> (inclusive), possibly the same as the integer originally written.</p>\n<p>Find the maximum possible greatest common divisor of the <var>N</var> integers on the blackboard after your move.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible greatest common divisor of the <var>N</var> integers on the blackboard after your move.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n7 6 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If we replace <var>7</var> with <var>4</var>, the greatest common divisor of the three integers on the blackboard will be <var>2</var>, which is the maximum possible value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n12 15 18\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1000000000\n</pre>\n<p>We can replace an integer with itself.</p></section>\n</div>\n</span>", "p03062": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> integers, <var>A_1, A_2, ..., A_N</var>, arranged in a row in this order.</p>\n<p>You can perform the following operation on this integer sequence any number of times:</p>\n<p><strong>Operation</strong>: Choose an integer <var>i</var> satisfying <var>1 \\leq i \\leq N-1</var>. Multiply both <var>A_i</var> and <var>A_{i+1}</var> by <var>-1</var>.</p>\n<p>Let <var>B_1, B_2, ..., B_N</var> be the integer sequence after your operations.</p>\n<p>Find the maximum possible value of <var>B_1 + B_2 + ... + B_N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>-10^9 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible value of <var>B_1 + B_2 + ... + B_N</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n-10 5 -4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>19\n</pre>\n<p>If we perform the operation as follows:</p>\n<ul>\n<li>Choose <var>1</var> as <var>i</var>, which changes the sequence to <var>10, -5, -4</var>.</li>\n<li>Choose <var>2</var> as <var>i</var>, which changes the sequence to <var>10, 5, 4</var>.</li>\n</ul>\n<p>we have <var>B_1 = 10, B_2 = 5, B_3 = 4</var>. The sum here, <var>B_1 + B_2 + B_3 = 10 + 5 + 4 = 19</var>, is the maximum possible result.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n10 -4 -8 -11 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>30\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11\n-1000000000 1000000000 -1000000000 1000000000 -1000000000 0 1000000000 -1000000000 1000000000 -1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>10000000000\n</pre>\n<p>The output may not fit into a <var>32</var>-bit integer type.</p></section>\n</div>\n</span>", "p03063": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> stones arranged in a row. Every stone is painted white or black.\nA string <var>S</var> represents the color of the stones. The <var>i</var>-th stone from the left is white if the <var>i</var>-th character of <var>S</var> is <code>.</code>, and the stone is black if the character is <code>#</code>.</p>\n<p>Takahashi wants to change the colors of some stones to black or white so that there will be no white stone immediately to the right of a black stone.\nFind the minimum number of stones that needs to be recolored.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>S</var> is a string of length <var>N</var> consisting of <code>.</code> and <code>#</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of stones that needs to be recolored.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n#.#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>It is enough to change the color of the first stone to white.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n#.##.\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9\n.........\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03064": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N</var> integers. The <var>i</var>-th integer is <var>a_i</var>.\nFind the number, modulo <var>998244353</var>, of ways to paint each of the integers red, green or blue so that the following condition is satisfied:</p>\n<ul>\n<li>Let <var>R</var>, <var>G</var> and <var>B</var> be the sums of the integers painted red, green and blue, respectively. There exists a triangle with positive area whose sides have lengths <var>R</var>, <var>G</var> and <var>B</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 300</var></li>\n<li><var>1 \\leq a_i \\leq 300(1\\leq i\\leq N)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var>\n<var>:</var>\n<var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number, modulo <var>998244353</var>, of ways to paint each of the integers red, green or blue so that the condition is satisfied.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1\n1\n1\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>18\n</pre>\n<p>We can only paint the integers so that the lengths of the sides of the triangle will be <var>1</var>, <var>2</var> and <var>2</var>, and there are <var>18</var> such ways.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n1\n3\n2\n3\n5\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>150\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20\n3\n1\n4\n1\n5\n9\n2\n6\n5\n3\n5\n8\n9\n7\n9\n3\n2\n3\n8\n4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>563038556\n</pre></section>\n</div>\n</span>", "p03065": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a polynomial of degree <var>N</var> with integer coefficients: <var>f(x)=a_Nx^N+a_{N-1}x^{N-1}+...+a_0</var>. Find all prime numbers <var>p</var> that divide <var>f(x)</var> for every integer <var>x</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq N \\leq 10^4</var></li>\n<li><var>|a_i| \\leq 10^9(0\\leq i\\leq N)</var></li>\n<li><var>a_N \\neq 0</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_N</var>\n<var>:</var>\n<var>a_0</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print all prime numbers <var>p</var> that divide <var>f(x)</var> for every integer <var>x</var>, in ascending order.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n7\n-7\n14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n7\n</pre>\n<p><var>2</var> and <var>7</var> divide, for example, <var>f(1)=14</var> and <var>f(2)=28</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1\n4\n1\n5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre></pre>\n<p>There may be no integers that satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>0\n998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>998244353\n</pre></section>\n</div>\n</span>", "p03066": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the number, modulo <var>998244353</var>, of sequences of length <var>N</var> consisting of <var>0</var>, <var>1</var> and <var>2</var> such that none of their contiguous subsequences totals to <var>X</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 3000</var></li>\n<li><var>1 \\leq X \\leq 2N</var></li>\n<li><var>N</var> and <var>X</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number, modulo <var>998244353</var>, of sequences that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>14\n</pre>\n<p><var>14</var> sequences satisfy the condition: <var>(0,0,0),(0,0,1),(0,0,2),(0,1,0),(0,1,1),(0,2,0),(0,2,2),(1,0,0),(1,0,1),(1,1,0),(2,0,0),(2,0,2),(2,2,0)</var> and <var>(2,2,2)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1179\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1024\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>9 13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>18402\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>314 159\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>459765451\n</pre></section>\n</div>\n</span>", "p03067": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are three houses on a number line: House <var>1</var>, <var>2</var> and <var>3</var>, with coordinates <var>A</var>, <var>B</var> and <var>C</var>, respectively.\nPrint <code>Yes</code> if we pass the coordinate of House <var>3</var> on the straight way from House <var>1</var> to House <var>2</var> without making a detour, and print <code>No</code> otherwise.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0\\leq A,B,C\\leq 100</var></li>\n<li><var>A</var>, <var>B</var> and <var>C</var> are distinct integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Yes</code> if we pass the coordinate of House <var>3</var> on the straight way from House <var>1</var> to House <var>2</var> without making a detour, and print <code>No</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 8 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>We pass the coordinate <var>5</var> on the straight way from the house at coordinate <var>3</var> to the house at coordinate <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>31 41 59\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03068": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>N</var> consisting of lowercase English letters, and an integer <var>K</var>.\nPrint the string obtained by replacing every character in <var>S</var> that differs from the <var>K</var>-th character of <var>S</var>, with <code>*</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N\\leq 10</var></li>\n<li><var>S</var> is a string of length <var>N</var> consisting of lowercase English letters.</li>\n<li><var>N</var> and <var>K</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n<var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the string obtained by replacing every character in <var>S</var> that differs from the <var>K</var>-th character of <var>S</var>, with <code>*</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\nerror\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>*rr*r\n</pre>\n<p>The second character of <var>S</var> is <code>r</code>. When we replace every character in <code>error</code> that differs from <code>r</code> with <code>*</code>, we get the string <code>*rr*r</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\neleven\n5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>e*e*e*\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9\neducation\n7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>******i**\n</pre></section>\n</div>\n</span>", "p03069": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> stones arranged in a row. Every stone is painted white or black.\nA string <var>S</var> represents the color of the stones. The <var>i</var>-th stone from the left is white if the <var>i</var>-th character of <var>S</var> is <code>.</code>, and the stone is black if the character is <code>#</code>.</p>\n<p>Takahashi wants to change the colors of some stones to black or white so that there will be no white stone immediately to the right of a black stone.\nFind the minimum number of stones that needs to be recolored.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>S</var> is a string of length <var>N</var> consisting of <code>.</code> and <code>#</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of stones that needs to be recolored.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n#.#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>It is enough to change the color of the first stone to white.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n#.##.\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9\n.........\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03070": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N</var> integers. The <var>i</var>-th integer is <var>a_i</var>.\nFind the number, modulo <var>998244353</var>, of ways to paint each of the integers red, green or blue so that the following condition is satisfied:</p>\n<ul>\n<li>Let <var>R</var>, <var>G</var> and <var>B</var> be the sums of the integers painted red, green and blue, respectively. There exists a triangle with positive area whose sides have lengths <var>R</var>, <var>G</var> and <var>B</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 300</var></li>\n<li><var>1 \\leq a_i \\leq 300(1\\leq i\\leq N)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var>\n<var>:</var>\n<var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number, modulo <var>998244353</var>, of ways to paint each of the integers red, green or blue so that the condition is satisfied.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1\n1\n1\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>18\n</pre>\n<p>We can only paint the integers so that the lengths of the sides of the triangle will be <var>1</var>, <var>2</var> and <var>2</var>, and there are <var>18</var> such ways.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n1\n3\n2\n3\n5\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>150\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20\n3\n1\n4\n1\n5\n9\n2\n6\n5\n3\n5\n8\n9\n7\n9\n3\n2\n3\n8\n4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>563038556\n</pre></section>\n</div>\n</span>", "p03071": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are two buttons, one of size <var>A</var> and one of size <var>B</var>.</p>\n<p>When you press a button of size <var>X</var>, you get <var>X</var> coins and the size of that button decreases by <var>1</var>.</p>\n<p>You will press a button twice. Here, you can press the same button twice, or press both buttons once.</p>\n<p>At most how many coins can you get?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>3 \\leq A, B \\leq 20</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of coins you can get.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>You can get <var>5 + 4 = 9</var> coins by pressing the button of size <var>5</var> twice, and this is the maximum result.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>12\n</pre></section>\n</div>\n</span>", "p03072": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> mountains ranging from east to west, and an ocean to the west.</p>\n<p>At the top of each mountain, there is an inn. You have decided to choose where to stay from these inns.</p>\n<p>The height of the <var>i</var>-th mountain from the west is <var>H_i</var>.</p>\n<p>You can certainly see the ocean from the inn at the top of the westmost mountain.</p>\n<p>For the inn at the top of the <var>i</var>-th mountain from the west <var>(i = 2, 3, ..., N)</var>, you can see the ocean if and only if <var>H_1 \\leq H_i</var>, <var>H_2 \\leq H_i</var>, <var>...</var>, and <var>H_{i-1} \\leq H_i</var>.</p>\n<p>From how many of these <var>N</var> inns can you see the ocean?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 20</var></li>\n<li><var>1 \\leq H_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>H_1</var> <var>H_2</var> <var>...</var> <var>H_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of inns from which you can see the ocean.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n6 5 6 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>You can see the ocean from the first, third and fourth inns from the west.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n4 5 3 5 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n9 5 6 8 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre></section>\n</div>\n</span>", "p03073": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> tiles are arranged in a row from left to right. The initial color of each tile is represented by a string <var>S</var> of length <var>N</var>.</p>\n<p>The <var>i</var>-th tile from the left is painted black if the <var>i</var>-th character of <var>S</var> is <code>0</code>, and painted white if that character is <code>1</code>.</p>\n<p>You want to repaint some of the tiles black or white, so that any two adjacent tiles have different colors.</p>\n<p>At least how many tiles need to be repainted to satisfy the condition?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10^5</var></li>\n<li><var>S_i</var> is <code>0</code> or <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of tiles that need to be repainted to satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The condition can be satisfied by repainting the middle tile white.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10010010\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03074": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> people are arranged in a row from left to right.</p>\n<p>You are given a string <var>S</var> of length <var>N</var> consisting of <code>0</code> and <code>1</code>, and a positive integer <var>K</var>.</p>\n<p>The <var>i</var>-th person from the left is standing on feet if the <var>i</var>-th character of <var>S</var> is <code>0</code>, and standing on hands if that character is <code>1</code>.</p>\n<p>You will give the following direction at most <var>K</var> times (possibly zero):</p>\n<p><strong>Direction</strong>: Choose integers <var>l</var> and <var>r</var> satisfying <var>1 \\leq l \\leq r \\leq N</var>, and flip the <var>l</var>-th, <var>(l+1)</var>-th, <var>...</var>, and <var>r</var>-th persons. That is, for each <var>i = l, l+1, ..., r</var>, the <var>i</var>-th person from the left now stands on hands if he/she was standing on feet, and stands on feet if he/she was standing on hands.</p>\n<p>Find the maximum possible number of <strong>consecutive</strong> people standing on hands after at most <var>K</var> directions.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var> is an integer satisfying <var>1 \\leq N \\leq 10^5</var>.</li>\n<li><var>K</var> is an integer satisfying <var>1 \\leq K \\leq 10^5</var>.</li>\n<li>The length of the string <var>S</var> is <var>N</var>.</li>\n<li>Each character of the string <var>S</var> is <code>0</code> or <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of consecutive people standing on hands after at most <var>K</var> directions.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 1\n00010\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>We can have four consecutive people standing on hands, which is the maximum result, by giving the following direction:</p>\n<ul>\n<li>Give the direction with <var>l = 1, r = 3</var>, which flips the first, second and third persons from the left.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>14 2\n11101010110011\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n<p>No directions are necessary.</p></section>\n</div>\n</span>", "p03076": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>The restaurant AtCoder serves the following five dishes:</p>\n<ul>\n<li>ABC Don (rice bowl): takes <var>A</var> minutes to serve.</li>\n<li>ARC Curry: takes <var>B</var> minutes to serve.</li>\n<li>AGC Pasta: takes <var>C</var> minutes to serve.</li>\n<li>APC Ramen: takes <var>D</var> minutes to serve.</li>\n<li>ATC Hanbagu (hamburger patty): takes <var>E</var> minutes to serve.</li>\n</ul>\n<p>Here, the time to serve a dish is the time between when an order is placed and when the dish is delivered.</p>\n<p>This restaurant has the following rules on orders:</p>\n<ul>\n<li>An order can only be placed at a time that is a multiple of <var>10</var> (time <var>0</var>, <var>10</var>, <var>20</var>, <var>...</var>).</li>\n<li>Only one dish can be ordered at a time.</li>\n<li>No new order can be placed when an order is already placed and the dish is still not delivered, but a new order can be placed at the exact time when the dish is delivered.</li>\n</ul>\n<p>E869120 arrives at this restaurant at time <var>0</var>. He will order all five dishes. Find the earliest possible time for the last dish to be delivered.<br/>\nHere, he can order the dishes in any order he likes, and he can place an order already at time <var>0</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>A, B, C, D</var> and <var>E</var> are integers between <var>1</var> and <var>123</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var>\n<var>B</var>\n<var>C</var>\n<var>D</var>\n<var>E</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the earliest possible time for the last dish to be delivered, as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>29\n20\n7\n35\n120\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>215\n</pre>\n<p>If we decide to order the dishes in the order ABC Don, ARC Curry, AGC Pasta, ATC Hanbagu, APC Ramen, the earliest possible time for each order is as follows:</p>\n<ul>\n<li>Order ABC Don at time <var>0</var>, which will be delivered at time <var>29</var>.</li>\n<li>Order ARC Curry at time <var>30</var>, which will be delivered at time <var>50</var>.</li>\n<li>Order AGC Pasta at time <var>50</var>, which will be delivered at time <var>57</var>.</li>\n<li>Order ATC Hanbagu at time <var>60</var>, which will be delivered at time <var>180</var>.</li>\n<li>Order APC Ramen at time <var>180</var>, which will be delivered at time <var>215</var>.</li>\n</ul>\n<p>There is no way to order the dishes in which the last dish will be delivered earlier than this.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>101\n86\n119\n108\n57\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>481\n</pre>\n<p>If we decide to order the dishes in the order AGC Pasta, ARC Curry, ATC Hanbagu, APC Ramen, ABC Don, the earliest possible time for each order is as follows:</p>\n<ul>\n<li>Order AGC Pasta at time <var>0</var>, which will be delivered at time <var>119</var>.</li>\n<li>Order ARC Curry at time <var>120</var>, which will be delivered at time <var>206</var>.</li>\n<li>Order ATC Hanbagu at time <var>210</var>, which will be delivered at time <var>267</var>.</li>\n<li>Order APC Ramen at time <var>270</var>, which will be delivered at time <var>378</var>.</li>\n<li>Order ABC Don at time <var>380</var>, which will be delivered at time <var>481</var>.</li>\n</ul>\n<p>There is no way to order the dishes in which the last dish will be delivered earlier than this.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>123\n123\n123\n123\n123\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>643\n</pre>\n<p>This is the largest valid case.</p></section>\n</div>\n</span>", "p03078": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>The Patisserie AtCoder sells cakes with number-shaped candles.\nThere are <var>X</var>, <var>Y</var> and <var>Z</var> kinds of cakes with <var>1</var>-shaped, <var>2</var>-shaped and <var>3</var>-shaped candles, respectively.\nEach cake has an integer value called <em>deliciousness</em>, as follows:</p>\n<ul>\n<li>The deliciousness of the cakes with <var>1</var>-shaped candles are <var>A_1, A_2, ..., A_X</var>.</li>\n<li>The deliciousness of the cakes with <var>2</var>-shaped candles are <var>B_1, B_2, ..., B_Y</var>.</li>\n<li>The deliciousness of the cakes with <var>3</var>-shaped candles are <var>C_1, C_2, ..., C_Z</var>.</li>\n</ul>\n<p>Takahashi decides to buy three cakes, one for each of the three shapes of the candles, to celebrate ABC 123.<br/>\nThere are <var>X \\times Y \\times Z</var> such ways to choose three cakes.<br/>\nWe will arrange these <var>X \\times Y \\times Z</var> ways in descending order of the sum of the deliciousness of the cakes.<br/>\nPrint the sums of the deliciousness of the cakes for the first, second, <var>...</var>, <var>K</var>-th ways in this list.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq X \\leq 1 \\ 000</var></li>\n<li><var>1 \\leq Y \\leq 1 \\ 000</var></li>\n<li><var>1 \\leq Z \\leq 1 \\ 000</var></li>\n<li><var>1 \\leq K \\leq \\min(3 \\ 000, X \\times Y \\times Z)</var></li>\n<li><var>1 \\leq A_i \\leq 10 \\ 000 \\ 000 \\ 000</var></li>\n<li><var>1 \\leq B_i \\leq 10 \\ 000 \\ 000 \\ 000</var></li>\n<li><var>1 \\leq C_i \\leq 10 \\ 000 \\ 000 \\ 000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var> <var>Z</var> <var>K</var>\n<var>A_1 \\ A_2 \\ A_3 \\ ... \\ A_X</var>\n<var>B_1 \\ B_2 \\ B_3 \\ ... \\ B_Y</var>\n<var>C_1 \\ C_2 \\ C_3 \\ ... \\ C_Z</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print <var>K</var> lines. The <var>i</var>-th line should contain the <var>i</var>-th value stated in the problem statement.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 2 8\n4 6\n1 5\n3 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>19\n17\n15\n14\n13\n12\n10\n8\n</pre>\n<p>There are <var>2 \\times 2 \\times 2 = 8</var> ways to choose three cakes, as shown below in descending order of the sum of the deliciousness of the cakes:</p>\n<ul>\n<li><var>(A_2, B_2, C_2)</var>: <var>6 + 5 + 8 = 19</var></li>\n<li><var>(A_1, B_2, C_2)</var>: <var>4 + 5 + 8 = 17</var></li>\n<li><var>(A_2, B_1, C_2)</var>: <var>6 + 1 + 8 = 15</var></li>\n<li><var>(A_2, B_2, C_1)</var>: <var>6 + 5 + 3 = 14</var></li>\n<li><var>(A_1, B_1, C_2)</var>: <var>4 + 1 + 8 = 13</var></li>\n<li><var>(A_1, B_2, C_1)</var>: <var>4 + 5 + 3 = 12</var></li>\n<li><var>(A_2, B_1, C_1)</var>: <var>6 + 1 + 3 = 10</var></li>\n<li><var>(A_1, B_1, C_1)</var>: <var>4 + 1 + 3 = 8</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3 3 5\n1 10 100\n2 20 200\n1 10 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>400\n310\n310\n301\n301\n</pre>\n<p>There may be multiple combinations of cakes with the same sum of the deliciousness. For example, in this test case, the sum of <var>A_1, B_3, C_3</var> and the sum of <var>A_3, B_3, C_1</var> are both <var>301</var>.\nHowever, they are different ways of choosing cakes, so <var>301</var> occurs twice in the output.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 10 10 20\n7467038376 5724769290 292794712 2843504496 3381970101 8402252870 249131806 6310293640 6690322794 6082257488\n1873977926 2576529623 1144842195 1379118507 6003234687 4925540914 3902539811 3326692703 484657758 2877436338\n4975681328 8974383988 2882263257 7690203955 514305523 6679823484 4263279310 585966808 3752282379 620585736\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>23379871545\n22444657051\n22302177772\n22095691512\n21667941469\n21366963278\n21287912315\n21279176669\n21160477018\n21085311041\n21059876163\n21017997739\n20703329561\n20702387965\n20590247696\n20383761436\n20343962175\n20254073196\n20210218542\n20150096547\n</pre>\n<p>Note that the input or output may not fit into a <var>32</var>-bit integer type.</p></section>\n</div>\n</span>", "p03079": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>You are given three integers <var>A, B</var> and <var>C</var>.</p>\n<p>Determine if there exists an equilateral triangle whose sides have lengths <var>A, B</var> and <var>C</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A,B,C \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there exists an equilateral triangle whose sides have lengths <var>A, B</var> and <var>C</var>, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<ul>\n<li>There exists an equilateral triangle whose sides have lengths <var>2, 2</var> and <var>2</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<ul>\n<li>There is no equilateral triangle whose sides have lengths <var>3, 4</var> and <var>5</var>.</li>\n</ul></section>\n</div>\n</span>", "p03080": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>There are <var>N</var> people numbered <var>1</var> to <var>N</var>. Each person wears a red hat or a blue hat.</p>\n<p>You are given a string <var>s</var> representing the colors of the people. Person <var>i</var> wears a red hat if <var>s_i</var> is <code>R</code>, and a blue hat if <var>s_i</var> is <code>B</code>.</p>\n<p>Determine if there are more people wearing a red hat than people wearing a blue hat.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>|s| = N</var></li>\n<li><var>s_i</var> is <code>R</code> or <code>B</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there are more people wearing a red hat than there are people wearing a blue hat, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\nRRBR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<ul>\n<li>There are three people wearing a red hat, and one person wearing a blue hat.</li>\n<li>Since there are more people wearing a red hat than people wearing a blue hat, the answer is <code>Yes</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\nBRBR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<ul>\n<li>There are two people wearing a red hat, and two people wearing a blue hat.</li>\n<li>Since there are as many people wearing a red hat as people wearing a blue hat, the answer is <code>No</code>.</li>\n</ul></section>\n</div>\n</span>", "p03081": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>There are <var>N</var> squares numbered <var>1</var> to <var>N</var> from left to right.\nEach square has a character written on it, and Square <var>i</var> has a letter <var>s_i</var>. Besides, there is initially one golem on each square.</p>\n<p>Snuke cast <var>Q</var> spells to move the golems.</p>\n<p>The <var>i</var>-th spell consisted of two characters <var>t_i</var> and <var>d_i</var>, where <var>d_i</var> is <code>L</code> or <code>R</code>.\nWhen Snuke cast this spell, for each square with the character <var>t_i</var>, all golems on that square moved to the square adjacent to the left if <var>d_i</var> is <code>L</code>, and moved to the square adjacent to the right if <var>d_i</var> is <code>R</code>.</p>\n<p>However, when a golem tried to move left from Square <var>1</var> or move right from Square <var>N</var>, it disappeared.</p>\n<p>Find the number of golems remaining after Snuke cast the <var>Q</var> spells.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,Q \\leq 2 \\times 10^{5}</var></li>\n<li><var>|s| = N</var></li>\n<li><var>s_i</var> and <var>t_i</var> are uppercase English letters.</li>\n<li><var>d_i</var> is <code>L</code> or <code>R</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>s</var>\n<var>t_1</var> <var>d_1</var>\n<var>\\vdots</var>\n<var>t_{Q}</var> <var>d_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4\nABC\nA L\nB L\nB R\nA R\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<ul>\n<li>Initially, there is one golem on each square.</li>\n<li>In the first spell, the golem on Square <var>1</var> tries to move left and disappears.</li>\n<li>In the second spell, the golem on Square <var>2</var> moves left.</li>\n<li>In the third spell, no golem moves.</li>\n<li>In the fourth spell, the golem on Square <var>1</var> moves right.</li>\n<li>After the four spells are cast, there is one golem on Square <var>2</var> and one golem on Square <var>3</var>, for a total of two golems remaining.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 3\nAABCBDBA\nA L\nB R\nA R\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<ul>\n<li>After the three spells are cast, there is one golem on Square <var>2</var>, two golems on Square <var>4</var> and two golems on Square <var>6</var>, for a total of five golems remaining.</li>\n<li>Note that a single spell may move multiple golems.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 15\nSNCZWRCEWB\nB R\nR R\nE R\nW R\nZ L\nS R\nQ L\nW L\nB R\nC L\nA L\nN L\nE R\nZ L\nS L\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03082": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Snuke has a blackboard and a set <var>S</var> consisting of <var>N</var> integers.\nThe <var>i</var>-th element in <var>S</var> is <var>S_i</var>.</p>\n<p>He wrote an integer <var>X</var> on the blackboard, then performed the following operation <var>N</var> times:</p>\n<ul>\n<li>Choose one element from <var>S</var> and remove it.</li>\n<li>Let <var>x</var> be the number written on the blackboard now, and <var>y</var> be the integer removed from <var>S</var>. Replace the number on the blackboard with <var>x \\bmod {y}</var>.</li>\n</ul>\n<p>There are <var>N!</var> possible orders in which the elements are removed from <var>S</var>.\nFor each of them, find the number that would be written on the blackboard after the <var>N</var> operations, and compute the sum of all those <var>N!</var> numbers modulo <var>10^{9}+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 200</var></li>\n<li><var>1 \\leq S_i, X \\leq 10^{5}</var></li>\n<li><var>S_i</var> are pairwise distinct.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var>\n<var>S_1</var> <var>S_2</var> <var>\\ldots</var> <var>S_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 19\n3 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<ul>\n<li>There are two possible orders in which we remove the numbers from <var>S</var>.</li>\n<li>If we remove <var>3</var> and <var>7</var> in this order, the number on the blackboard changes as follows: <var>19 \\rightarrow 1 \\rightarrow 1</var>.</li>\n<li>If we remove <var>7</var> and <var>3</var> in this order, the number on the blackboard changes as follows: <var>19 \\rightarrow 5 \\rightarrow 2</var>.</li>\n<li>The output should be the sum of these: <var>3</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 82\n22 11 6 5 13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>288\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 100000\n50000 50001 50002 50003 50004 50005 50006 50007 50008 50009\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>279669259\n</pre>\n<ul>\n<li>Be sure to compute the sum modulo <var>10^{9}+7</var>.</li>\n</ul></section>\n</div>\n</span>", "p03083": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Today, Snuke will eat <var>B</var> pieces of black chocolate and <var>W</var> pieces of white chocolate for an afternoon snack.</p>\n<p>He will repeat the following procedure until there is no piece left:</p>\n<ul>\n<li>Choose black or white with equal probability, and eat a piece of that color if it exists.</li>\n</ul>\n<p>For each integer <var>i</var> from <var>1</var> to <var>B+W</var> (inclusive), find the probability that the color of the <var>i</var>-th piece to be eaten is black.\nIt can be shown that these probabilities are rational, and we ask you to print them modulo <var>10^9 + 7</var>, as described in Notes.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>When you print a rational number, first write it as a fraction <var>\\frac{y}{x}</var>, where <var>x, y</var> are integers and <var>x</var> is not divisible by <var>10^9 + 7</var>\n(under the constraints of the problem, such representation is always possible).\nThen, you need to print the only integer <var>z</var> between <var>0</var> and <var>10^9 + 6</var>, inclusive, that satisfies <var>xz \\equiv y \\pmod{10^9 + 7}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq B,W \\leq 10^{5}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>B</var> <var>W</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answers in <var>B+W</var> lines. In the <var>i</var>-th line, print the probability that the color of the <var>i</var>-th piece to be eaten is black, modulo <var>10^{9}+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>500000004\n750000006\n750000006\n</pre>\n<ul>\n<li>There are three possible orders in which Snuke eats the pieces:<ul>\n<li>white, black, black</li>\n<li>black, white, black</li>\n<li>black, black, white</li>\n</ul>\n</li>\n<li>with probabilities <var>\\frac{1}{2}, \\frac{1}{4}, \\frac{1}{4}</var>, respectively. Thus, the probabilities of eating a black piece first, second and third are <var>\\frac{1}{2},\\frac{3}{4}</var> and <var>\\frac{3}{4}</var>, respectively.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>500000004\n500000004\n625000005\n187500002\n187500002\n</pre>\n<ul>\n<li>They are <var>\\frac{1}{2},\\frac{1}{2},\\frac{5}{8},\\frac{11}{16}</var> and <var>\\frac{11}{16}</var>, respectively.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>500000004\n500000004\n500000004\n500000004\n500000004\n500000004\n929687507\n218750002\n224609377\n303710940\n633300786\n694091802\n172485353\n411682132\n411682132\n</pre></section>\n</div>\n</span>", "p03085": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>On the Planet AtCoder, there are four types of bases: <code>A</code>, <code>C</code>, <code>G</code> and <code>T</code>. <code>A</code> bonds with <code>T</code>, and <code>C</code> bonds with <code>G</code>.</p>\n<p>You are given a letter <var>b</var> as input, which is <code>A</code>, <code>C</code>, <code>G</code> or <code>T</code>. Write a program that prints the letter representing the base that bonds with the base <var>b</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>b</var> is one of the letters <code>A</code>, <code>C</code>, <code>G</code> and <code>T</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>b</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the letter representing the base that bonds with the base <var>b</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>A\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>T\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>G\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>C\n</pre></section>\n</div>\n</span>", "p03086": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> consisting of uppercase English letters. Find the length of the longest <em>ACGT string</em> that is a substring (see Notes) of <var>S</var>.</p>\n<p>Here, a ACGT string is a string that contains no characters other than <code>A</code>, <code>C</code>, <code>G</code> and <code>T</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>A substring of a string <var>T</var> is a string obtained by removing zero or more characters from the beginning and the end of <var>T</var>.</p>\n<p>For example, the substrings of <code>ATCODER</code> include <code>TCO</code>, <code>AT</code>, <code>CODER</code>, <code>ATCODER</code> and <code></code> (the empty string), but not <code>AC</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is a string of length between <var>1</var> and <var>10</var> (inclusive).</li>\n<li>Each character in <var>S</var> is an uppercase English letter.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the length of the longest <em>ACGT string</em> that is a substring of <var>S</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>ATCODER\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>Among the ACGT strings that are substrings of <code>ATCODER</code>, the longest one is <code>ATC</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>HATAGAYA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>Among the ACGT strings that are substrings of <code>HATAGAYA</code>, the longest one is <code>ATAGA</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>SHINJUKU\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>Among the ACGT strings that are substrings of <code>SHINJUKU</code>, the longest one is <code></code> (the empty string).</p></section>\n</div>\n</span>", "p03087": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>N</var> consisting of <code>A</code>, <code>C</code>, <code>G</code> and <code>T</code>. Answer the following <var>Q</var> queries:</p>\n<ul>\n<li>Query <var>i</var> (<var>1 \\leq i \\leq Q</var>): You will be given integers <var>l_i</var> and <var>r_i</var> (<var>1 \\leq l_i &lt; r_i \\leq N</var>). Consider the substring of <var>S</var> starting at index <var>l_i</var> and ending at index <var>r_i</var> (both inclusive). In this string, how many times does <code>AC</code> occurs as a substring?</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>A substring of a string <var>T</var> is a string obtained by removing zero or more characters from the beginning and the end of <var>T</var>.</p>\n<p>For example, the substrings of <code>ATCODER</code> include <code>TCO</code>, <code>AT</code>, <code>CODER</code>, <code>ATCODER</code> and <code></code> (the empty string), but not <code>AC</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>S</var> is a string of length <var>N</var>.</li>\n<li>Each character in <var>S</var> is <code>A</code>, <code>C</code>, <code>G</code> or <code>T</code>.</li>\n<li><var>1 \\leq l_i &lt; r_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>S</var>\n<var>l_1</var> <var>r_1</var>\n<var>:</var>\n<var>l_Q</var> <var>r_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines. The <var>i</var>-th line should contain the answer to the <var>i</var>-th query.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8 3\nACACTACG\n3 7\n2 3\n1 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n0\n3\n</pre>\n<ul>\n<li>Query <var>1</var>: the substring of <var>S</var> starting at index <var>3</var> and ending at index <var>7</var> is <code>ACTAC</code>. In this string, <code>AC</code> occurs twice as a substring.</li>\n<li>Query <var>2</var>: the substring of <var>S</var> starting at index <var>2</var> and ending at index <var>3</var> is <code>CA</code>. In this string, <code>AC</code> occurs zero times as a substring.</li>\n<li>Query <var>3</var>: the substring of <var>S</var> starting at index <var>1</var> and ending at index <var>8</var> is <code>ACACTACG</code>. In this string, <code>AC</code> occurs three times as a substring.</li>\n</ul></section>\n</div>\n</span>", "p03088": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>. Find the number of strings of length <var>N</var> that satisfy the following conditions, modulo <var>10^9+7</var>:</p>\n<ul>\n<li>The string does not contain characters other than <code>A</code>, <code>C</code>, <code>G</code> and <code>T</code>.</li>\n<li>The string does not contain <code>AGC</code> as a substring.</li>\n<li>The condition above cannot be violated by swapping two adjacent characters once.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>A substring of a string <var>T</var> is a string obtained by removing zero or more characters from the beginning and the end of <var>T</var>.</p>\n<p>For example, the substrings of <code>ATCODER</code> include <code>TCO</code>, <code>AT</code>, <code>CODER</code>, <code>ATCODER</code> and <code></code> (the empty string), but not <code>AC</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of strings of length <var>N</var> that satisfy the following conditions, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>61\n</pre>\n<p>There are <var>4^3 = 64</var> strings of length <var>3</var> that do not contain characters other than <code>A</code>, <code>C</code>, <code>G</code> and <code>T</code>. Among them, only <code>AGC</code>, <code>ACG</code> and <code>GAC</code> violate the condition, so the answer is <var>64 - 3 = 61</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>230\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>388130742\n</pre>\n<p>Be sure to print the number of strings modulo <var>10^9+7</var>.</p></section>\n</div>\n</span>", "p03089": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has an empty sequence <var>a</var>.</p>\n<p>He will perform <var>N</var> operations on this sequence.</p>\n<p>In the <var>i</var>-th operation, he chooses an integer <var>j</var> satisfying <var>1 \\leq j \\leq i</var>, and insert <var>j</var> at position <var>j</var> in <var>a</var> (the beginning is position <var>1</var>).</p>\n<p>You are given a sequence <var>b</var> of length <var>N</var>. Determine if it is possible that <var>a</var> is equal to <var>b</var> after <var>N</var> operations. If it is, show one possible sequence of operations that achieves it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq b_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>b_1</var> <var>\\dots</var> <var>b_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is no sequence of <var>N</var> operations after which <var>a</var> would be equal to <var>b</var>, print <code>-1</code>.\nIf there is, print <var>N</var> lines. In the <var>i</var>-th line, the integer chosen in the <var>i</var>-th operation should be printed. If there are multiple solutions, any of them is accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n1\n2\n</pre>\n<p>In this sequence of operations, the sequence <var>a</var> changes as follows:</p>\n<ul>\n<li>After the first operation: <var>(1)</var></li>\n<li>After the second operation: <var>(1,1)</var></li>\n<li>After the third operation: <var>(1,2,1)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p><var>2</var> cannot be inserted at the beginning of the sequence, so this is impossible.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9\n1 1 1 2 2 1 2 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n2\n2\n3\n1\n2\n2\n1\n1\n</pre></section>\n</div>\n</span>", "p03090": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>.\nBuild an undirected graph with <var>N</var> vertices with indices <var>1</var> to <var>N</var> that satisfies the following two conditions:</p>\n<ul>\n<li>The graph is simple and connected.</li>\n<li>There exists an integer <var>S</var> such that, for every vertex, the sum of the indices of the vertices adjacent to that vertex is <var>S</var>.</li>\n</ul>\n<p>It can be proved that at least one such graph exists under the constraints of this problem.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>3 \\leq N \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>In the first line, print the number of edges, <var>M</var>, in the graph you made. In the <var>i</var>-th of the following <var>M</var> lines, print two integers <var>a_i</var> and <var>b_i</var>, representing the endpoints of the <var>i</var>-th edge.</p>\n<p>The output will be judged correct if the graph satisfies the conditions.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n1 3\n2 3\n</pre>\n<ul>\n<li>For every vertex, the sum of the indices of the vertices adjacent to that vertex is <var>3</var>.</li>\n</ul></section>\n</div>\n</span>", "p03092": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a permutation <var>p = (p_1, \\ldots, p_N)</var> of <var>\\{ 1, \\ldots, N \\}</var>.\nYou can perform the following two kinds of operations repeatedly in any order:</p>\n<ul>\n<li>Pay a cost <var>A</var>. Choose integers <var>l</var> and <var>r</var> (<var>1 \\leq l &lt; r \\leq N</var>), and shift <var>(p_l, \\ldots, p_r)</var> to the left by one. That is, replace <var>p_l, p_{l + 1}, \\ldots, p_{r - 1}, p_r</var> with <var>p_{l + 1}, p_{l + 2}, \\ldots, p_r, p_l</var>, respectively.</li>\n<li>Pay a cost <var>B</var>. Choose integers <var>l</var> and <var>r</var> (<var>1 \\leq l &lt; r \\leq N</var>), and shift <var>(p_l, \\ldots, p_r)</var> to the right by one.  That is, replace <var>p_l, p_{l + 1}, \\ldots, p_{r - 1}, p_r</var> with <var>p_r, p_l, \\ldots, p_{r - 2}, p_{r - 1}</var>, respectively.</li>\n</ul>\n<p>Find the minimum total cost required to sort <var>p</var> in ascending order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 5000</var></li>\n<li><var>1 \\leq A, B \\leq 10^9</var></li>\n<li><var>(p_1 \\ldots, p_N)</var> is a permutation of <var>\\{ 1, \\ldots, N \\}</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n<var>p_1</var> <var>\\cdots</var> <var>p_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total cost required to sort <var>p</var> in ascending order.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 20 30\n3 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>20\n</pre>\n<p>Shifting <var>(p_1, p_2, p_3)</var> to the left by one results in <var>p = (1, 2, 3)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 20 30\n4 2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>50\n</pre>\n<p>One possible sequence of operations is as follows:</p>\n<ul>\n<li>Shift <var>(p_1, p_2, p_3, p_4)</var> to the left by one. Now we have <var>p = (2, 3, 1, 4)</var>.</li>\n<li>Shift <var>(p_1, p_2, p_3)</var> to the right by one. Now we have <var>p = (1, 2, 3, 4)</var>.</li>\n</ul>\n<p>Here, the total cost is <var>20 + 30 = 50</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 10 10\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4 1000000000 1000000000\n4 3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>3000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>9 40 50\n5 3 4 7 6 1 2 9 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>220\n</pre></section>\n</div>\n</span>", "p03093": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>M</var> be a positive integer.</p>\n<p>You are given <var>2 N</var> integers <var>a_1, a_2, \\ldots, a_{2 N}</var>, where <var>0 \\leq a_i &lt; M</var> for each <var>i</var>.</p>\n<p>Consider dividing the <var>2 N</var> integers into <var>N</var> pairs.\nHere, each integer must belong to exactly one pair.</p>\n<p>We define the <em>ugliness</em> of a pair <var>(x, y)</var> as <var>(x + y) \\mod M</var>.\nLet <var>Z</var> be the largest ugliness of the <var>N</var> pairs. Find the minimum possible value of <var>Z</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^9</var></li>\n<li><var>0 \\leq a_i &lt; M</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>a_2</var> <var>\\cdots</var> <var>a_{2N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible value of <var>Z</var>, where <var>Z</var> is the largest ugliness of the <var>N</var> pairs.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 10\n0 2 3 4 5 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>One solution is to form pairs <var>(0, 5), (2, 3)</var> and <var>(4, 9)</var>, with ugliness <var>5, 5</var> and <var>3</var>, respectively.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 10\n1 9 1 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Pairs <var>(1, 9)</var> and <var>(1, 9)</var> should be formed, with ugliness both <var>0</var>.</p></section>\n</div>\n</span>", "p03094": "<span class=\"lang-en\">\n<p>Score : <var>1800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a round pizza. Snuke wants to eat one third of it, or something as close as possible to that.</p>\n<p>He decides to cut this pizza as follows.</p>\n<p>First, he divides the pizza into <var>N</var> pieces by making <var>N</var> cuts with a knife. The knife can make a cut along the segment connecting the center of the pizza and some point on the circumference of the pizza. However, he is very poor at handling knives, so the cuts are made at uniformly random angles, independent from each other.</p>\n<p>Then, he chooses one or more <strong>consecutive</strong> pieces so that the total is as close as possible to one third of the pizza, and eat them. (Let the total be x of the pizza. He chooses consecutive pieces so that <var>|x - 1/3|</var> is minimized.)</p>\n<p>Find the expected value of <var>|x - 1/3|</var>. It can be shown that this value is rational, and we ask you to print it modulo <var>10^9 + 7</var>, as described in Notes.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>When you print a rational number, first write it as a fraction <var>\\frac{y}{x}</var>, where <var>x, y</var> are integers and <var>x</var> is not divisible by <var>10^9 + 7</var>\n(under the constraints of the problem, such representation is always possible).\nThen, you need to print the only integer <var>z</var> between <var>0</var> and <var>10^9 + 6</var>, inclusive, that satisfies <var>xz \\equiv y \\pmod{10^9 + 7}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the expected value of <var>|x - 1/3|</var> modulo <var>10^9 + 7</var>, as described in Notes.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>138888890\n</pre>\n<p>The expected value is <var>\\frac{5}{36}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>179012347\n</pre>\n<p>The expected value is <var>\\frac{11}{162}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>954859137\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>44679646\n</pre></section>\n</div>\n</span>", "p03095": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>N</var>.\nAmong its subsequences, count the ones such that all characters are different, modulo <var>10^9+7</var>. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.</p>\n<p>Here, a subsequence of a string is a concatenation of <strong>one or more</strong> characters from the string without changing the order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100000</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n<li><var>|S|=N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the subsequences such that all characters are different, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\nabcd\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>15\n</pre>\n<p>Since all characters in <var>S</var> itself are different, all its subsequences satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\nbaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>The answer is five: <code>b</code>, two occurrences of <code>a</code>, two occurrences of <code>ba</code>. Note that we do not count <code>baa</code>, since it contains two <code>a</code>s.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\nabcab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>17\n</pre></section>\n</div>\n</span>", "p03096": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> stones arranged in a row. The <var>i</var>-th stone from the left is painted in the color <var>C_i</var>.</p>\n<p>Snuke will perform the following operation zero or more times:</p>\n<ul>\n<li>Choose two stones painted in the same color. Repaint all the stones between them, with the color of the chosen stones.</li>\n</ul>\n<p>Find the number of possible final sequences of colors of the stones, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq C_i \\leq 2\\times 10^5(1\\leq i\\leq N)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>C_1</var>\n<var>:</var>\n<var>C_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible final sequences of colors of the stones, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1\n2\n1\n2\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>We can make three sequences of colors of stones, as follows:</p>\n<ul>\n<li><var>(1,2,1,2,2)</var>, by doing nothing.</li>\n<li><var>(1,1,1,2,2)</var>, by choosing the first and third stones to perform the operation.</li>\n<li><var>(1,2,2,2,2)</var>, by choosing the second and fourth stones to perform the operation.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n4\n2\n5\n4\n2\n4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n1\n3\n1\n2\n3\n3\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03097": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given integers <var>N,\\ A</var> and <var>B</var>.\nDetermine if there exists a permutation <var>(P_0,\\ P_1,\\ ...\\ P_{2^N-1})</var> of <var>(0,\\ 1,\\ ...\\ 2^N-1)</var> that satisfies all of the following conditions, and create one such permutation if it exists.</p>\n<ul>\n<li><var>P_0=A</var></li>\n<li><var>P_{2^N-1}=B</var></li>\n<li>For all <var>0 \\leq i &lt; 2^N-1</var>, the binary representations of <var>P_i</var> and <var>P_{i+1}</var> differ by exactly one bit.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 17</var></li>\n<li><var>0 \\leq A \\leq 2^N-1</var></li>\n<li><var>0 \\leq B \\leq 2^N-1</var></li>\n<li><var>A \\neq B</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is no permutation that satisfies the conditions, print <code>NO</code>.</p>\n<p>If there is such a permutation, print <code>YES</code> in the first line.\nThen, print <var>(P_0,\\ P_1,\\ ...\\ P_{2^N-1})</var> in the second line, with spaces in between.\nIf there are multiple solutions, any of them is accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n1 0 2 3\n</pre>\n<p>The binary representation of <var>P=(1,0,2,3)</var> is <var>(01,00,10,11)</var>, where any two adjacent elements differ by exactly one bit.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p03098": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For two permutations <var>p</var> and <var>q</var> of the integers from <var>1</var> through <var>N</var>, let <var>f(p,q)</var> be the permutation that satisfies the following:</p>\n<ul>\n<li>The <var>p_i</var>-th element (<var>1 \\leq i \\leq N</var>) in <var>f(p,q)</var> is <var>q_i</var>.\nHere, <var>p_i</var> and <var>q_i</var> respectively denote the <var>i</var>-th element in <var>p</var> and <var>q</var>.</li>\n</ul>\n<p>You are given two permutations <var>p</var> and <var>q</var> of the integers from <var>1</var> through <var>N</var>.\nWe will now define a sequence {<var>a_n</var>} of permutations of the integers from <var>1</var> through <var>N</var>, as follows:</p>\n<ul>\n<li><var>a_1=p</var>, <var>a_2=q</var></li>\n<li><var>a_{n+2}=f(a_n,a_{n+1})</var> ( <var>n \\geq 1</var> )</li>\n</ul>\n<p>Given a positive integer <var>K</var>, find <var>a_K</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>p</var> and <var>q</var> are permutations of the integers from <var>1</var> through <var>N</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>p_1</var> <var>...</var> <var>p_N</var>\n<var>q_1</var> <var>...</var> <var>q_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> integers, with spaces in between.\nThe <var>i</var>-th integer (<var>1 \\leq i \\leq N</var>) should be the <var>i</var>-th element in <var>a_K</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 2 3\n3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3 2 1\n</pre>\n<p>Since <var>a_3=f(p,q)</var>, we just need to find <var>f(p,q)</var>.\nWe have <var>p_i=i</var> here, so <var>f(p,q)=q</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 5\n4 5 1 2 3\n3 2 1 5 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4 3 2 1 5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 1000000000\n7 10 6 5 4 2 9 1 3 8\n4 1 9 2 3 7 8 10 6 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7 9 4 8 2 5 1 6 10 3\n</pre></section>\n</div>\n</span>", "p03100": "<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a connected graph with <var>N</var> vertices and <var>M</var> edges. The vertices are numbered <var>1</var> to <var>N</var>. The <var>i</var>-th edge is an undirected edge of length <var>C_i</var> connecting Vertex <var>A_i</var> and Vertex <var>B_i</var>.</p>\n<p>Additionally, an odd number <var>MOD</var> is given.</p>\n<p>You will be given <var>Q</var> queries, which should be processed. The queries take the following form:</p>\n<ul>\n<li>Given in the <var>i</var>-th query are <var>S_i</var>, <var>T_i</var> and <var>R_i</var>. Print <code>YES</code> if there exists a path from Vertex <var>S_i</var> to Vertex <var>T_i</var> whose length is <var>R_i</var> modulo <var>MOD</var>, and print <code>NO</code> otherwise. A path may traverse the same edge multiple times, or go back using the edge it just used.</li>\n</ul>\n<p>Here, in this problem, the length of a path is <font color=\"red\"><strong>NOT</strong></font> the sum of the lengths of its edges themselves, but the length of the first edge used in the path gets multiplied by <var>1</var>, the second edge gets multiplied by <var>2</var>, the third edge gets multiplied by <var>4</var>, and so on. (More formally, let <var>L_1,...,L_k</var> be the lengths of the edges used, in this order. The length of that path is the sum of <var>L_i \\times 2^{i-1}</var>.)</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M,Q \\leq 50000</var></li>\n<li><var>3 \\leq MOD \\leq 10^{6}</var></li>\n<li><var>MOD</var> is odd.</li>\n<li><var>1 \\leq A_i,B_i\\leq N</var></li>\n<li><var>0 \\leq C_i \\leq MOD-1</var></li>\n<li><var>1 \\leq S_i,T_i \\leq N</var></li>\n<li><var>0 \\leq R_i \\leq MOD-1</var></li>\n<li>The given graph is connected. (It may contain self-loops or multiple edges.)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>Q</var> <var>MOD</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var>\n<var>\\vdots</var>\n<var>A_M</var> <var>B_M</var> <var>C_M</var>\n<var>S_1</var> <var>T_1</var> <var>R_1</var>\n<var>\\vdots</var>\n<var>S_Q</var> <var>T_Q</var> <var>R_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answers to the <var>i</var>-th query in the <var>i</var>-th line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2 2 2019\n1 2 1\n2 3 2\n1 3 5\n1 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\nNO\n</pre>\n<p>The answer to each query is as follows:</p>\n<ul>\n<li>The first query: If we take the path <var>1,2,3</var>, its length is <var>1 \\times 2^0 + 2 \\times 2^1 = 5</var>, so there exists a path whose length is <var>5</var> modulo <var>2019</var>. The answer is <code>YES</code>.</li>\n<li>The second query: No matter what path we take from Vertex <var>1</var> to Vertex <var>3</var>, its length will never be <var>4</var> modulo <var>2019</var>. The answer is <code>NO</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 6 3 2019\n1 2 4\n2 3 4\n3 4 4\n4 5 4\n5 6 4\n6 1 4\n2 6 1110\n3 1 1111\n4 5 1112\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>YES\nNO\nNO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 2 3 25\n1 1 1\n1 1 2\n1 1 13\n1 1 6\n1 1 14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>YES\nYES\nYES\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 15 10 15\n1 2 1\n2 3 6\n3 4 6\n2 5 1\n5 6 1\n4 7 6\n1 8 11\n2 9 6\n5 10 11\n9 10 11\n3 6 1\n2 5 1\n2 7 11\n9 10 11\n5 6 11\n1 3 5\n9 8 3\n7 7 7\n7 10 13\n4 1 10\n9 3 12\n10 10 14\n9 2 1\n6 6 5\n8 8 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>YES\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nYES\nNO\n</pre></section>\n</div>\n</span>", "p03101": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>H</var> rows and <var>W</var> columns of white square cells.</p>\n<p>You will choose <var>h</var> of the rows and <var>w</var> of the columns, and paint all of the cells contained in those rows or columns.</p>\n<p>How many white cells will remain?</p>\n<p>It can be proved that this count does not depend on what rows and columns are chosen.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq H, W \\leq 20</var></li>\n<li><var>1 \\leq h \\leq H</var></li>\n<li><var>1 \\leq w \\leq W</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>h</var> <var>w</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of white cells that will remain.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>There are <var>3</var> rows and <var>2</var> columns of cells. When two rows and one column are chosen and painted in black, there is always one white cell that remains.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 5\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 4\n2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03102": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> pieces of source code. The characteristics of the <var>i</var>-th code is represented by <var>M</var> integers <var>A_{i1}, A_{i2}, ..., A_{iM}</var>.</p>\n<p>Additionally, you are given integers <var>B_1, B_2, ..., B_M</var> and <var>C</var>.</p>\n<p>The <var>i</var>-th code correctly solves this problem if and only if <var>A_{i1} B_1 + A_{i2} B_2 + ... + A_{iM} B_M + C &gt; 0</var>.</p>\n<p>Among the <var>N</var> codes, find the number of codes that correctly solve this problem.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N, M \\leq 20</var></li>\n<li><var>-100 \\leq A_{ij} \\leq 100</var></li>\n<li><var>-100 \\leq B_i \\leq 100</var></li>\n<li><var>-100 \\leq C \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>C</var>\n<var>B_1</var> <var>B_2</var> <var>...</var> <var>B_M</var>\n<var>A_{11}</var> <var>A_{12}</var> <var>...</var> <var>A_{1M}</var>\n<var>A_{21}</var> <var>A_{22}</var> <var>...</var> <var>A_{2M}</var>\n<var>\\vdots</var>\n<var>A_{N1}</var> <var>A_{N2}</var> <var>...</var> <var>A_{NM}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of codes among the given <var>N</var> codes that correctly solve this problem.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 -10\n1 2 3\n3 2 1\n1 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Only the second code correctly solves this problem, as follows:</p>\n<ul>\n<li>Since <var>3 \\times 1 + 2 \\times 2 + 1 \\times 3 + (-10) = 0 \\leq 0</var>, the first code does not solve this problem.</li>\n<li><var>1 \\times 1 + 2 \\times 2 + 2 \\times 3 + (-10) = 1 &gt; 0</var>, the second code solves this problem.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 2 -4\n-2 5\n100 41\n100 40\n-3 0\n-6 -2\n18 -13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 3 0\n100 -100 0\n0 100 100\n100 100 100\n-100 100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>All of them are <em>Wrong Answer</em>. Except yours.</p></section>\n</div>\n</span>", "p03103": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Hearing that energy drinks increase rating in those sites, Takahashi decides to buy up <var>M</var> cans of energy drinks.</p>\n<p>There are <var>N</var> stores that sell energy drinks. In the <var>i</var>-th store, he can buy at most <var>B_i</var> cans of energy drinks for <var>A_i</var> yen (the currency of Japan) each.</p>\n<p>What is the minimum amount of money with which he can buy <var>M</var> cans of energy drinks?</p>\n<p>It is guaranteed that, in the given inputs, a sufficient amount of money can always buy <var>M</var> cans of energy drinks.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N, M \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>1 \\leq B_i \\leq 10^5</var></li>\n<li><var>B_1 + ... + B_N \\geq M</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>\\vdots</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum amount of money with which Takahashi can buy <var>M</var> cans of energy drinks.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 5\n4 9\n2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>With <var>12</var> yen, we can buy one drink at the first store and four drinks at the second store, for the total of five drinks. However, we cannot buy <var>5</var> drinks with <var>11</var> yen or less.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 30\n6 18\n2 5\n3 10\n7 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>130\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 100000\n1000000000 100000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100000000000000\n</pre>\n<p>The output may not fit into a <var>32</var>-bit integer type.</p></section>\n</div>\n</span>", "p03104": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>f(A, B)</var> be the exclusive OR of <var>A, A+1, ..., B</var>. Find <var>f(A, B)</var>.</p>\n<p><details>\n<summary style=\"display: list-item; outline: none;\">What is exclusive OR?</summary></details></p>\n<p>The bitwise exclusive OR of integers <var>c_1, c_2, ..., c_n</var> (let us call it <var>y</var>) is defined as follows:</p>\n<ul>\n<li>When <var>y</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if, the number of integers among <var>c_1, c_2, ...c_m</var> whose binary representations have <var>1</var> in the <var>2^k</var>'s place, is odd, and <var>0</var> if that count is even.</li>\n</ul>\n<p>For example, the exclusive OR of <var>3</var> and <var>5</var> is <var>6</var>. (When written in base two: the exclusive OR of <code>011</code> and <code>101</code> is <code>110</code>.)</p>\n<p></p></section></div></span>", "p03105": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi likes the sound when he buys a drink from a vending machine.</p>\n<p>That sound can be heard by spending <var>A</var> yen (the currency of Japan) each time.</p>\n<p>Takahashi has <var>B</var> yen. He will hear the sound as many times as he can with that money, but at most <var>C</var> times, as he would be satisfied at that time.</p>\n<p>How many times will he hear the sound?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A, B, C \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of times Takahashi will hear his favorite sound.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 11 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Since he has not less than <var>8</var> yen, he will hear the sound four times and be satisfied.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 9 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>He may not be able to be satisfied.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 1 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03106": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given positive integers <var>A</var> and <var>B</var>.</p>\n<p>Find the <var>K</var>-th largest positive integer that divides both <var>A</var> and <var>B</var>.</p>\n<p>The input guarantees that there exists such a number.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A, B \\leq 100</var></li>\n<li>The <var>K</var>-th largest positive integer that divides both <var>A</var> and <var>B</var> exists.</li>\n<li><var>K \\geq 1</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the <var>K</var>-th largest positive integer that divides both <var>A</var> and <var>B</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8 12 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Three positive integers divides both <var>8</var> and <var>12</var>: <var>1, 2</var> and <var>4</var>.\nAmong them, the second largest is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100 50 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre></section>\n</div>\n</span>", "p03107": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> cubes stacked vertically on a desk.</p>\n<p>You are given a string <var>S</var> of length <var>N</var>. The color of the <var>i</var>-th cube from the bottom is red if the <var>i</var>-th character in <var>S</var> is <code>0</code>, and blue if that character is <code>1</code>.</p>\n<p>You can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.</p>\n<p>At most how many cubes can be removed?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>|S| = N</var></li>\n<li>Each character in <var>S</var> is <code>0</code> or <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of cubes that can be removed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>0011\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>All four cubes can be removed, by performing the operation as follows:</p>\n<ul>\n<li>Remove the second and third cubes from the bottom. Then, the fourth cube drops onto the first cube.</li>\n<li>Remove the first and second cubes from the bottom.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>11011010001011\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>12\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03108": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> islands and <var>M</var> bridges.</p>\n<p>The <var>i</var>-th bridge connects the <var>A_i</var>-th and <var>B_i</var>-th islands bidirectionally.</p>\n<p>Initially, we can travel between any two islands using some of these bridges.</p>\n<p>However, the results of a survey show that these bridges will all collapse because of aging, in the order from the first bridge to the <var>M</var>-th bridge.</p>\n<p>Let the <strong>inconvenience</strong> be the number of pairs of islands <var>(a, b)</var> (<var>a &lt; b</var>) such that we are no longer able to travel between the <var>a</var>-th and <var>b</var>-th islands using some of the bridges remaining.</p>\n<p>For each <var>i</var> <var>(1 \\leq i \\leq M)</var>, find the inconvenience just after the <var>i</var>-th bridge collapses.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq A_i &lt; B_i \\leq N</var></li>\n<li>All pairs <var>(A_i, B_i)</var> are distinct.</li>\n<li>The inconvenience is initially <var>0</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>\\vdots</var>\n<var>A_M</var> <var>B_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>In the order <var>i = 1, 2, ..., M</var>, print the inconvenience just after the <var>i</var>-th bridge collapses.\nNote that the answer may not fit into a <var>32</var>-bit integer type.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n1 2\n3 4\n1 3\n2 3\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n0\n4\n5\n6\n</pre>\n<p>For example, when the first to third bridges have collapsed, the inconvenience is <var>4</var> since we can no longer travel between the pairs <var>(1, 2), (1, 3), (2, 4)</var> and <var>(3, 4)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 5\n2 3\n1 2\n5 6\n3 4\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n9\n12\n14\n15\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 1\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre></section>\n</div>\n</span>", "p03109": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> as input. This represents a valid date in the year <var>2019</var> in the <code>yyyy/mm/dd</code> format. (For example, April <var>30</var>, <var>2019</var> is represented as <code>2019/04/30</code>.)</p>\n<p>Write a program that prints <code>Heisei</code> if the date represented by <var>S</var> is not later than April <var>30</var>, <var>2019</var>, and prints <code>TBD</code> otherwise.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is a string that represents a valid date in the year <var>2019</var> in the <code>yyyy/mm/dd</code> format.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Heisei</code> if the date represented by <var>S</var> is not later than April <var>30</var>, <var>2019</var>, and print <code>TBD</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2019/04/30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Heisei\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2019/11/01\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>TBD\n</pre></section>\n</div>\n</span>", "p03110": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi received <em>otoshidama</em> (New Year's money gifts) from <var>N</var> of his relatives.</p>\n<p>You are given <var>N</var> values <var>x_1, x_2, ..., x_N</var> and <var>N</var> strings <var>u_1, u_2, ..., u_N</var> as input. Each string <var>u_i</var> is either <code>JPY</code> or <code>BTC</code>, and <var>x_i</var> and <var>u_i</var> represent the content of the otoshidama from the <var>i</var>-th relative.</p>\n<p>For example, if <var>x_1 =</var> <code>10000</code> and <var>u_1 =</var> <code>JPY</code>, the otoshidama from the first relative is <var>10000</var> Japanese yen; if <var>x_2 =</var> <code>0.10000000</code> and <var>u_2 =</var> <code>BTC</code>, the otoshidama from the second relative is <var>0.1</var> bitcoins.</p>\n<p>If we convert the bitcoins into yen at the rate of <var>380000.0</var> JPY per <var>1.0</var> BTC, how much are the gifts worth in total?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10</var></li>\n<li><var>u_i =</var> <code>JPY</code> or <code>BTC</code>.</li>\n<li>If <var>u_i =</var> <code>JPY</code>, <var>x_i</var> is an integer such that <var>1 \\leq x_i \\leq 10^8</var>.</li>\n<li>If <var>u_i =</var> <code>BTC</code>, <var>x_i</var> is a decimal with <var>8</var> decimal digits, such that <var>0.00000001 \\leq x_i \\leq 100.00000000</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>u_1</var>\n<var>x_2</var> <var>u_2</var>\n<var>:</var>\n<var>x_N</var> <var>u_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the gifts are worth <var>Y</var> yen in total, print the value <var>Y</var> (not necessarily an integer).</p>\n<p>Output will be judged correct when the absolute or relative error from the judge's output is at most <var>10^{-5}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n10000 JPY\n0.10000000 BTC\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>48000.0\n</pre>\n<p>The otoshidama from the first relative is <var>10000</var> yen. The otoshidama from the second relative is <var>0.1</var> bitcoins, which is worth <var>38000.0</var> yen if converted at the rate of <var>380000.0</var> JPY per <var>1.0</var> BTC. The sum of these is <var>48000.0</var> yen.</p>\n<p>Outputs such as <code>48000</code> and <code>48000.1</code> will also be judged correct.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n100000000 JPY\n100.00000000 BTC\n0.00000001 BTC\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>138000000.0038\n</pre>\n<p>In this case, outputs such as <code>138001000</code> and <code>1.38e8</code> will also be judged correct.</p></section>\n</div>\n</span>", "p03111": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have <var>N</var> bamboos. The lengths (in centimeters) of these are <var>l_1, l_2, ..., l_N</var>, respectively.</p>\n<p>Your objective is to use some of these bamboos (possibly all) to obtain three bamboos of length <var>A, B, C</var>. For that, you can use the following three kinds of magics any number:</p>\n<ul>\n<li>Extension Magic: Consumes <var>1</var> <em>MP</em> (magic point). Choose one bamboo and increase its length by <var>1</var>.</li>\n<li>Shortening Magic: Consumes <var>1</var> MP. Choose one bamboo of length at least <var>2</var> and decrease its length by <var>1</var>.</li>\n<li>Composition Magic: Consumes <var>10</var> MP. Choose two bamboos and combine them into one bamboo. The length of this new bamboo is equal to the sum of the lengths of the two bamboos combined. (Afterwards, further magics can be used on this bamboo.)</li>\n</ul>\n<p>At least how much MP is needed to achieve the objective?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 8</var></li>\n<li><var>1 \\leq C &lt; B &lt; A \\leq 1000</var></li>\n<li><var>1 \\leq l_i \\leq 1000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var> <var>C</var>\n<var>l_1</var>\n<var>l_2</var>\n<var>:</var>\n<var>l_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum amount of MP needed to achieve the objective.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 100 90 80\n98\n40\n30\n21\n80\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>23\n</pre>\n<p>We are obtaining three bamboos of lengths <var>100, 90, 80</var> from five bamboos <var>98, 40, 30, 21, 80</var>. We already have a bamboo of length <var>80</var>, and we can obtain bamboos of lengths <var>100, 90</var> by using the magics as follows at the total cost of <var>23</var> MP, which is optimal.</p>\n<ol>\n<li>Use Extension Magic twice on the bamboo of length <var>98</var> to obtain a bamboo of length <var>100</var>. (MP consumed: <var>2</var>)</li>\n<li>Use Composition Magic on the bamboos of lengths <var>40, 30</var> to obtain a bamboo of length <var>70</var>. (MP consumed: <var>10</var>)</li>\n<li>Use Shortening Magic once on the bamboo of length <var>21</var> to obtain a bamboo of length <var>20</var>. (MP consumed: <var>1</var>)</li>\n<li>Use Composition Magic on the bamboo of length <var>70</var> obtained in step 2 and the bamboo of length <var>20</var> obtained in step 3 to obtain a bamboo of length <var>90</var>. (MP consumed: <var>10</var>)</li>\n</ol>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 100 90 80\n100\n100\n90\n90\n90\n80\n80\n80\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>If we already have all bamboos of the desired lengths, the amount of MP needed is <var>0</var>. As seen here, we do not necessarily need to use all the bamboos.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 1000 800 100\n300\n333\n400\n444\n500\n555\n600\n666\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>243\n</pre></section>\n</div>\n</span>", "p03112": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Along a road running in an east-west direction, there are <var>A</var> shrines and <var>B</var> temples.\nThe <var>i</var>-th shrine from the west is located at a distance of <var>s_i</var> meters from the west end of the road, and the <var>i</var>-th temple from the west is located at a distance of <var>t_i</var> meters from the west end of the road.</p>\n<p>Answer the following <var>Q</var> queries:</p>\n<ul>\n<li>Query <var>i</var> (<var>1 \\leq i \\leq Q</var>): If we start from a point at a distance of <var>x_i</var> meters from the west end of the road and freely travel along the road, what is the minimum distance that needs to be traveled in order to visit one shrine and one temple? (It is allowed to pass by more shrines and temples than required.)</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A, B \\leq 10^5</var></li>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>1 \\leq s_1 &lt; s_2 &lt; ... &lt; s_A \\leq 10^{10}</var></li>\n<li><var>1 \\leq t_1 &lt; t_2 &lt; ... &lt; t_B \\leq 10^{10}</var></li>\n<li><var>1 \\leq x_i \\leq 10^{10}</var></li>\n<li><var>s_1, ..., s_A, t_1, ..., t_B, x_1, ..., x_Q</var> are all different.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>Q</var>\n<var>s_1</var>\n<var>:</var>\n<var>s_A</var>\n<var>t_1</var>\n<var>:</var>\n<var>t_B</var>\n<var>x_1</var>\n<var>:</var>\n<var>x_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines. The <var>i</var>-th line should contain the answer to the <var>i</var>-th query.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 4\n100\n600\n400\n900\n1000\n150\n2000\n899\n799\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>350\n1400\n301\n399\n</pre>\n<p>There are two shrines and three temples. The shrines are located at distances of <var>100, 600</var> meters from the west end of the road, and the temples are located at distances of <var>400, 900, 1000</var> meters from the west end of the road.</p>\n<ul>\n<li>Query <var>1</var>: If we start from a point at a distance of <var>150</var> meters from the west end of the road, the optimal move is first to walk <var>50</var> meters west to visit a shrine, then to walk <var>300</var> meters east to visit a temple.</li>\n<li>Query <var>2</var>: If we start from a point at a distance of <var>2000</var> meters from the west end of the road, the optimal move is first to walk <var>1000</var> meters west to visit a temple, then to walk <var>400</var> meters west to visit a shrine. We will pass by another temple on the way, but it is fine.</li>\n<li>Query <var>3</var>: If we start from a point at a distance of <var>899</var> meters from the west end of the road, the optimal move is first to walk <var>1</var> meter east to visit a temple, then to walk <var>300</var> meters west to visit a shrine.</li>\n<li>Query <var>4</var>: If we start from a point at a distance of <var>799</var> meters from the west end of the road, the optimal move is first to walk <var>199</var> meters west to visit a shrine, then to walk <var>200</var> meters west to visit a temple.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1 3\n1\n10000000000\n2\n9999999999\n5000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10000000000\n10000000000\n14999999998\n</pre>\n<p>The road is quite long, and we may need to travel a distance that does not fit into a <var>32</var>-bit integer.</p></section>\n</div>\n</span>", "p03113": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke participated in a magic show.</p>\n<p>A magician prepared <var>N</var> identical-looking boxes.\nHe put a treasure in one of the boxes, closed the boxes, shuffled them, and numbered them <var>1</var> through <var>N</var>.</p>\n<p>Since the boxes are shuffled, now Snuke has no idea which box contains the treasure.\nSnuke wins the game if he opens a box containing the treasure.\nYou may think that if Snuke opens all boxes at once, he can always win the game.\nHowever, there are some tricks:</p>\n<ul>\n<li>Snuke must open the boxes one by one. After he opens a box and checks the content of the box, he must close the box before opening the next box.</li>\n<li>He is only allowed to open Box <var>i</var> at most <var>a_i</var> times.</li>\n<li>The magician may secretly move the treasure from a closed box to another closed box, using some magic trick.\nFor simplicity, assume that the magician never moves the treasure while Snuke is opening some box.\nHowever, he can move it at any other time (before Snuke opens the first box, or between he closes some box and opens the next box).</li>\n<li>The magician can perform the magic trick at most <var>K</var> times.</li>\n</ul>\n<p>Can Snuke always win the game, regardless of the initial position of the treasure and the movements of the magician?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq K \\leq 50</var></li>\n<li><var>1 \\leq a_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>a_1</var> <var>a_2</var> <var>\\cdots</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the answer is no, print a single <code>-1</code>.</p>\n<p>Otherwise, print one possible move of Snuke in the following format:</p>\n<pre><var>Q</var>\n<var>x_1</var> <var>x_2</var> <var>\\cdots</var> <var>x_Q</var>\n</pre>\n<p>It means that he opens boxes <var>x_1, x_2, \\cdots, x_Q</var> in this order.</p>\n<p>In case there are multiple possible solutions, you can output any.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 1\n5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n1 1 2 1 2 2 1\n</pre>\n<p>If Snuke opens the boxes <var>7</var> times in the order <var>1 \\rightarrow 1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 2 \\rightarrow 2 \\rightarrow 1</var>, he can always find the treasure regardless of its initial position and the movements of the magician.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 50\n5 10 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p03114": "<span class=\"lang-en\">\n<p>Score : <var>1400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Count the number of strings <var>S</var> that satisfy the following constraints, modulo <var>10^9 + 7</var>.</p>\n<ul>\n<li>The length of <var>S</var> is exactly <var>N</var>.</li>\n<li><var>S</var> consists of digits (<code>0</code>...<code>9</code>).</li>\n<li>You are given <var>Q</var> intervals.\nFor each <var>i (1 \\leq i \\leq Q)</var>, the integer represented by <var>S[l_i \\ldots r_i]</var> (the substring of <var>S</var> between the <var>l_i</var>-th (<var>1</var>-based) character and the <var>r_i</var>-th character, inclusive) must be a multiple of <var>9</var>.</li>\n</ul>\n<p>Here, the string <var>S</var> and its substrings may have leading zeroes.\nFor example, <code>002019</code> represents the integer <var>2019</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^9</var></li>\n<li><var>1 \\leq Q \\leq 15</var></li>\n<li><var>1 \\leq l_i \\leq r_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>Q</var>\n<var>l_1</var> <var>r_1</var>\n<var>:</var>\n<var>l_Q</var> <var>r_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of strings that satisfy the conditions, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2\n1 2\n2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>136\n</pre>\n<p>For example, <var>S = </var><code>9072</code> satisfies the conditions because both <var>S[1 \\ldots 2] = </var><code>90</code> and <var>S[2 \\ldots 4] = </var><code>072</code> represent multiples of <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n3\n2 5\n3 5\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2720\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20\n10\n2 15\n5 6\n1 12\n7 9\n2 17\n5 15\n2 4\n16 17\n2 12\n8 17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>862268030\n</pre></section>\n</div>\n</span>", "p03118": "<span class=\"lang-en\">\n<p>Score : <var>2718</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a very long bench.\nThe bench is divided into <var>M</var> sections, where <var>M</var> is a very large integer.</p>\n<p>Initially, the bench is vacant.\nThen, <var>M</var> people come to the bench one by one, and perform the following action:</p>\n<ul>\n<li>We call a section <em>comfortable</em> if the section is currently unoccupied and is not adjacent to any occupied sections.\nIf there is no comfortable section, the person leaves the bench.\nOtherwise, the person chooses one of comfortable sections uniformly at random, and sits there.\n(The choices are independent from each other).</li>\n</ul>\n<p>After all <var>M</var> people perform actions, Snuke chooses an interval of <var>N</var> consecutive sections uniformly at random (from <var>M-N+1</var> possible intervals), and takes a photo.\nHis photo can be described by a string of length <var>N</var> consisting of <code>X</code> and <code>-</code>: the <var>i</var>-th character of the string is <code>X</code> if the <var>i</var>-th section from the left in the interval is occupied, and <code>-</code> otherwise.\nNote that the photo is directed.\nFor example, <code>-X--X</code> and <code>X--X-</code> are different photos.</p>\n<p>What is the probability that the photo matches a given string <var>s</var>?\nThis probability depends on <var>M</var>.\nYou need to compute the limit of this probability when <var>M</var> goes infinity.</p>\n<p>Here, we can prove that the limit can be uniquely written in the following format using three <strong>rational</strong> numbers <var>p, q, r</var> and <var>e = 2.718 \\ldots</var> (the base of natural logarithm):</p>\n<p><var>p + \\frac{q}{e} + \\frac{r}{e^2}</var></p>\n<p>Your task is to compute these three rational numbers, and print them modulo <var>10^9 + 7</var>, as described in Notes section.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>When you print a rational number, first write it as a fraction <var>\\frac{y}{x}</var>, where <var>x, y</var> are integers and <var>x</var> is not divisible by <var>10^9 + 7</var>\n(under the constraints of the problem, such representation is always possible).\nThen, you need to print the only integer <var>z</var> between <var>0</var> and <var>10^9 + 6</var>, inclusive, that satisfies <var>xz \\equiv y \\pmod{10^9 + 7}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>|s| = N</var></li>\n<li><var>s</var> consists of <code>X</code> and <code>-</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print three rational numbers <var>p, q, r</var>, separated by spaces.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\nX\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>500000004 0 500000003\n</pre>\n<p>The probability that a randomly chosen section is occupied converge to <var>\\frac{1}{2} - \\frac{1}{2e^2}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n---\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 0 0\n</pre>\n<p>After the actions, no three consecutive unoccupied sections can be left.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\nX--X-\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0 0 1\n</pre>\n<p>The limit is <var>\\frac{1}{e^2}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5\nX-X-X\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>500000004 0 833333337\n</pre>\n<p>The limit is <var>\\frac{1}{2} - \\frac{13}{6e^2}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>20\n-X--X--X-X--X--X-X-X\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>0 0 183703705\n</pre>\n<p>The limit is <var>\\frac{7}{675e^2}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>100\nX-X-X-X-X-X-X-X-X-X--X-X-X-X-X-X-X-X-X-X-X-X-X-X-X--X--X-X-X-X--X--X-X-X--X-X-X--X-X--X--X-X--X-X-X-\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>0 0 435664291\n</pre></section>\n</div>\n</span>", "p03119": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke participated in a magic show.</p>\n<p>A magician prepared <var>N</var> identical-looking boxes.\nHe put a treasure in one of the boxes, closed the boxes, shuffled them, and numbered them <var>1</var> through <var>N</var>.</p>\n<p>Since the boxes are shuffled, now Snuke has no idea which box contains the treasure.\nSnuke wins the game if he opens a box containing the treasure.\nYou may think that if Snuke opens all boxes at once, he can always win the game.\nHowever, there are some tricks:</p>\n<ul>\n<li>Snuke must open the boxes one by one. After he opens a box and checks the content of the box, he must close the box before opening the next box.</li>\n<li>He is only allowed to open Box <var>i</var> at most <var>a_i</var> times.</li>\n<li>The magician may secretly move the treasure from a closed box to another closed box, using some magic trick.\nFor simplicity, assume that the magician never moves the treasure while Snuke is opening some box.\nHowever, he can move it at any other time (before Snuke opens the first box, or between he closes some box and opens the next box).</li>\n<li>The magician can perform the magic trick at most <var>K</var> times.</li>\n</ul>\n<p>Can Snuke always win the game, regardless of the initial position of the treasure and the movements of the magician?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq K \\leq 50</var></li>\n<li><var>1 \\leq a_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>a_1</var> <var>a_2</var> <var>\\cdots</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the answer is no, print a single <code>-1</code>.</p>\n<p>Otherwise, print one possible move of Snuke in the following format:</p>\n<pre><var>Q</var>\n<var>x_1</var> <var>x_2</var> <var>\\cdots</var> <var>x_Q</var>\n</pre>\n<p>It means that he opens boxes <var>x_1, x_2, \\cdots, x_Q</var> in this order.</p>\n<p>In case there are multiple possible solutions, you can output any.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 1\n5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n1 1 2 1 2 2 1\n</pre>\n<p>If Snuke opens the boxes <var>7</var> times in the order <var>1 \\rightarrow 1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 2 \\rightarrow 2 \\rightarrow 1</var>, he can always find the treasure regardless of its initial position and the movements of the magician.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 50\n5 10 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p03120": "<span class=\"lang-en\">\n<p>Score : <var>1400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Count the number of strings <var>S</var> that satisfy the following constraints, modulo <var>10^9 + 7</var>.</p>\n<ul>\n<li>The length of <var>S</var> is exactly <var>N</var>.</li>\n<li><var>S</var> consists of digits (<code>0</code>...<code>9</code>).</li>\n<li>You are given <var>Q</var> intervals.\nFor each <var>i (1 \\leq i \\leq Q)</var>, the integer represented by <var>S[l_i \\ldots r_i]</var> (the substring of <var>S</var> between the <var>l_i</var>-th (<var>1</var>-based) character and the <var>r_i</var>-th character, inclusive) must be a multiple of <var>9</var>.</li>\n</ul>\n<p>Here, the string <var>S</var> and its substrings may have leading zeroes.\nFor example, <code>002019</code> represents the integer <var>2019</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^9</var></li>\n<li><var>1 \\leq Q \\leq 15</var></li>\n<li><var>1 \\leq l_i \\leq r_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>Q</var>\n<var>l_1</var> <var>r_1</var>\n<var>:</var>\n<var>l_Q</var> <var>r_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of strings that satisfy the conditions, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2\n1 2\n2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>136\n</pre>\n<p>For example, <var>S = </var><code>9072</code> satisfies the conditions because both <var>S[1 \\ldots 2] = </var><code>90</code> and <var>S[2 \\ldots 4] = </var><code>072</code> represent multiples of <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n3\n2 5\n3 5\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2720\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20\n10\n2 15\n5 6\n1 12\n7 9\n2 17\n5 15\n2 4\n16 17\n2 12\n8 17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>862268030\n</pre></section>\n</div>\n</span>", "p03124": "<span class=\"lang-en\">\n<p>Score : <var>2718</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a very long bench.\nThe bench is divided into <var>M</var> sections, where <var>M</var> is a very large integer.</p>\n<p>Initially, the bench is vacant.\nThen, <var>M</var> people come to the bench one by one, and perform the following action:</p>\n<ul>\n<li>We call a section <em>comfortable</em> if the section is currently unoccupied and is not adjacent to any occupied sections.\nIf there is no comfortable section, the person leaves the bench.\nOtherwise, the person chooses one of comfortable sections uniformly at random, and sits there.\n(The choices are independent from each other).</li>\n</ul>\n<p>After all <var>M</var> people perform actions, Snuke chooses an interval of <var>N</var> consecutive sections uniformly at random (from <var>M-N+1</var> possible intervals), and takes a photo.\nHis photo can be described by a string of length <var>N</var> consisting of <code>X</code> and <code>-</code>: the <var>i</var>-th character of the string is <code>X</code> if the <var>i</var>-th section from the left in the interval is occupied, and <code>-</code> otherwise.\nNote that the photo is directed.\nFor example, <code>-X--X</code> and <code>X--X-</code> are different photos.</p>\n<p>What is the probability that the photo matches a given string <var>s</var>?\nThis probability depends on <var>M</var>.\nYou need to compute the limit of this probability when <var>M</var> goes infinity.</p>\n<p>Here, we can prove that the limit can be uniquely written in the following format using three <strong>rational</strong> numbers <var>p, q, r</var> and <var>e = 2.718 \\ldots</var> (the base of natural logarithm):</p>\n<p><var>p + \\frac{q}{e} + \\frac{r}{e^2}</var></p>\n<p>Your task is to compute these three rational numbers, and print them modulo <var>10^9 + 7</var>, as described in Notes section.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>When you print a rational number, first write it as a fraction <var>\\frac{y}{x}</var>, where <var>x, y</var> are integers and <var>x</var> is not divisible by <var>10^9 + 7</var>\n(under the constraints of the problem, such representation is always possible).\nThen, you need to print the only integer <var>z</var> between <var>0</var> and <var>10^9 + 6</var>, inclusive, that satisfies <var>xz \\equiv y \\pmod{10^9 + 7}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>|s| = N</var></li>\n<li><var>s</var> consists of <code>X</code> and <code>-</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print three rational numbers <var>p, q, r</var>, separated by spaces.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\nX\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>500000004 0 500000003\n</pre>\n<p>The probability that a randomly chosen section is occupied converge to <var>\\frac{1}{2} - \\frac{1}{2e^2}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n---\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 0 0\n</pre>\n<p>After the actions, no three consecutive unoccupied sections can be left.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\nX--X-\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0 0 1\n</pre>\n<p>The limit is <var>\\frac{1}{e^2}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5\nX-X-X\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>500000004 0 833333337\n</pre>\n<p>The limit is <var>\\frac{1}{2} - \\frac{13}{6e^2}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>20\n-X--X--X-X--X--X-X-X\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>0 0 183703705\n</pre>\n<p>The limit is <var>\\frac{7}{675e^2}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>100\nX-X-X-X-X-X-X-X-X-X--X-X-X-X-X-X-X-X-X-X-X-X-X-X-X--X--X-X-X-X--X--X-X-X--X-X-X--X-X--X--X-X--X-X-X-\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>0 0 435664291\n</pre></section>\n</div>\n</span>", "p03125": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given positive integers <var>A</var> and <var>B</var>.</p>\n<p>If <var>A</var> is a divisor of <var>B</var>, print <var>A + B</var>; otherwise, print <var>B - A</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A \\leq B \\leq 20</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>A</var> is a divisor of <var>B</var>, print <var>A + B</var>; otherwise, print <var>B - A</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>16\n</pre>\n<p>As <var>4</var> is a divisor of <var>12</var>, <var>4 + 12 = 16</var> should be printed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>12\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre>\n<p><var>1</var> is a divisor of <var>1</var>.</p></section>\n</div>\n</span>", "p03127": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> monsters, numbered <var>1, 2, ..., N</var>.</p>\n<p>Initially, the health of Monster <var>i</var> is <var>A_i</var>.</p>\n<p>Below, a monster with at least <var>1</var> health is called alive.</p>\n<p>Until there is only one alive monster, the following is repeated:</p>\n<ul>\n<li>A random alive monster attacks another random alive monster.</li>\n<li>As a result, the health of the monster attacked is reduced by the amount equal to the current health of the monster attacking.</li>\n</ul>\n<p>Find the minimum possible final health of the last monster alive.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible final health of the last monster alive.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 10 8 40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>When only the first monster keeps on attacking, the final health of the last monster will be <var>2</var>, which is minimum.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n5 13 8 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n1000000000 1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1000000000\n</pre></section>\n</div>\n</span>", "p03128": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the largest integer that can be formed with exactly <var>N</var> matchsticks, under the following conditions:</p>\n<ul>\n<li>Every digit in the integer must be one of the digits <var>A_1, A_2, ..., A_M (1 \\leq A_i \\leq 9)</var>.</li>\n<li>The number of matchsticks used to form digits <var>1, 2, 3, 4, 5, 6, 7, 8, 9</var> should be <var>2, 5, 5, 4, 5, 6, 3, 7, 6</var>, respectively.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^4</var></li>\n<li><var>1 \\leq M \\leq 9</var></li>\n<li><var>1 \\leq A_i \\leq 9</var></li>\n<li><var>A_i</var> are all different.</li>\n<li>There exists an integer that can be formed by exactly <var>N</var> matchsticks under the conditions.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the largest integer that can be formed with exactly <var>N</var> matchsticks under the conditions in the problem statement.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>20 4\n3 7 8 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>777773\n</pre>\n<p>The integer <var>777773</var> can be formed with <var>3 + 3 + 3 + 3 + 3 + 5 = 20</var> matchsticks, and this is the largest integer that can be formed by <var>20</var> matchsticks under the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>101 9\n9 8 7 6 5 4 3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>71111111111111111111111111111111111111111111111111\n</pre>\n<p>The output may not fit into a <var>64</var>-bit integer type.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15 3\n5 4 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>654\n</pre></section>\n</div>\n</span>", "p03129": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Determine if we can choose <var>K</var> different integers between <var>1</var> and <var>N</var> (inclusive) so that no two of them differ by <var>1</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq N,K\\leq 100</var></li>\n<li><var>N</var> and <var>K</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If we can choose <var>K</var> integers as above, print <code>YES</code>; otherwise, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>We can choose <var>1</var> and <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>YES\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 90\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p03130": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are four towns, numbered <var>1,2,3</var> and <var>4</var>.\nAlso, there are three roads. The <var>i</var>-th road connects different towns <var>a_i</var> and <var>b_i</var> bidirectionally.\nNo two roads connect the same pair of towns. Other than these roads, there is no way to travel between these towns, but any town can be reached from any other town using these roads.</p>\n<p>Determine if we can visit all the towns by traversing each of the roads exactly once.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq a_i,b_i \\leq 4(1\\leq i\\leq 3)</var></li>\n<li><var>a_i</var> and <var>b_i</var> are different. <var>(1\\leq i\\leq 3)</var></li>\n<li>No two roads connect the same pair of towns.</li>\n<li>Any town can be reached from any other town using the roads.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>a_3</var> <var>b_3</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If we can visit all the towns by traversing each of the roads exactly once, print <code>YES</code>; otherwise, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2\n1 3\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>We can visit all the towns in the order <var>1,3,2,4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n2 4\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 1\n3 2\n4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>YES\n</pre></section>\n</div>\n</span>", "p03131": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has one biscuit and zero Japanese yen (the currency) in his pocket.\nHe will perform the following operations exactly <var>K</var> times in total, in the order he likes:</p>\n<ul>\n<li>Hit his pocket, which magically increases the number of biscuits by one.</li>\n<li>Exchange <var>A</var> biscuits to <var>1</var> yen.</li>\n<li>Exchange <var>1</var> yen to <var>B</var> biscuits.</li>\n</ul>\n<p>Find the maximum possible number of biscuits in Snuke's pocket after <var>K</var> operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K,A,B \\leq 10^9</var></li>\n<li><var>K,A</var> and <var>B</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of biscuits in Snuke's pocket after <var>K</var> operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>The number of biscuits in Snuke's pocket after <var>K</var> operations is maximized as follows:</p>\n<ul>\n<li>Hit his pocket. Now he has <var>2</var> biscuits and <var>0</var> yen.</li>\n<li>Exchange <var>2</var> biscuits to <var>1</var> yen. his pocket. Now he has <var>0</var> biscuits and <var>1</var> yen.</li>\n<li>Hit his pocket. Now he has <var>1</var> biscuits and <var>1</var> yen.</li>\n<li>Exchange <var>1</var> yen to <var>6</var> biscuits. his pocket. Now he has <var>7</var> biscuits and <var>0</var> yen.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159265 35897932 384626433\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>48518828981938099\n</pre></section>\n</div>\n</span>", "p03132": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke stands on a number line. He has <var>L</var> ears, and he will walk along the line continuously under the following conditions:</p>\n<ul>\n<li>He never visits a point with coordinate less than <var>0</var>, or a point with coordinate greater than <var>L</var>.</li>\n<li>He starts walking at a point with integer coordinate, and also finishes walking at a point with integer coordinate.</li>\n<li>He only changes direction at a point with integer coordinate.</li>\n</ul>\n<p>Each time when Snuke passes a point with coordinate <var>i-0.5</var>, where <var>i</var> is an integer, he put a stone in his <var>i</var>-th ear.</p>\n<p>After Snuke finishes walking, Ringo will repeat the following operations in some order so that, for each <var>i</var>, Snuke's <var>i</var>-th ear contains <var>A_i</var> stones:</p>\n<ul>\n<li>Put a stone in one of Snuke's ears.</li>\n<li>Remove a stone from one of Snuke's ears.</li>\n</ul>\n<p>Find the minimum number of operations required when Ringo can freely decide how Snuke walks.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq L \\leq 2\\times 10^5</var></li>\n<li><var>0 \\leq A_i \\leq 10^9(1\\leq i\\leq L)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>L</var>\n<var>A_1</var>\n<var>:</var>\n<var>A_L</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required when Ringo can freely decide how Snuke walks.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1\n0\n2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Assume that Snuke walks as follows:</p>\n<ul>\n<li>He starts walking at coordinate <var>3</var> and finishes walking at coordinate <var>4</var>, visiting coordinates <var>3,4,3,2,3,4</var> in this order.</li>\n</ul>\n<p>Then, Snuke's four ears will contain <var>0,0,2,3</var> stones, respectively.\nRingo can satisfy the requirement by putting one stone in the first ear.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8\n2\n0\n0\n2\n1\n3\n4\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n314159265\n358979323\n846264338\n327950288\n419716939\n937510582\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre></section>\n</div>\n</span>", "p03133": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a square grid with <var>N</var> rows and <var>M</var> columns.\nEach square contains an integer: <var>0</var> or <var>1</var>. The square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left contains <var>a_{ij}</var>.</p>\n<p>Among the <var>2^{N+M}</var> possible pairs of a subset <var>A</var> of the rows and a subset <var>B</var> of the columns, find the number of the pairs that satisfy the following condition, modulo <var>998244353</var>:</p>\n<ul>\n<li>The sum of the <var>|A||B|</var> numbers contained in the intersection of the rows belonging to <var>A</var> and the columns belonging to <var>B</var>, is odd.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 300</var></li>\n<li><var>0 \\leq a_{i,j} \\leq 1(1\\leq i\\leq N,1\\leq j\\leq M)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_{11}</var> <var>...</var> <var>a_{1M}</var>\n<var>:</var>\n<var>a_{N1}</var> <var>...</var> <var>a_{NM}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the pairs of a subset of the rows and a subset of the columns that satisfy the condition, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n0 1\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>For example, if <var>A</var> consists of the first row and <var>B</var> consists of both columns, the sum of the numbers contained in the intersection is <var>0+1=1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3\n0 0 0\n0 1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03134": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> Snukes lining up in a row.\nYou are given a string <var>S</var> of length <var>N</var>. The <var>i</var>-th Snuke from the front has two red balls if the <var>i</var>-th character in <var>S</var> is <code>0</code>; one red ball and one blue ball if the <var>i</var>-th character in <var>S</var> is <code>1</code>; two blue balls if the <var>i</var>-th character in <var>S</var> is <code>2</code>.</p>\n<p>Takahashi has a sequence that is initially empty. Find the number of the possible sequences he may have after repeating the following procedure <var>2N</var> times, modulo <var>998244353</var>:</p>\n<ul>\n<li>Each Snuke who has one or more balls simultaneously chooses one of his balls and hand it to the Snuke in front of him, or hand it to Takahashi if he is the first Snuke in the row.</li>\n<li>Takahashi receives the ball and put it to the end of his sequence.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 2000</var></li>\n<li><var>S</var> consists of <code>0</code>,<code>1</code> and <code>2</code>.</li>\n</ul>\n<p>Note that the integer <var>N</var> is not directly given in input; it is given indirectly as the length of the string <var>S</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the possible sequences Takahashi may have after repeating the procedure <var>2N</var> times, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>02\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>There are three sequences that Takahashi may have: <code>rrbb</code>, <code>rbrb</code> and <code>rbbr</code>, where <code>r</code> and <code>b</code> stand for red and blue balls, respectively.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1210\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>55\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>12001021211100201020\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>543589959\n</pre></section>\n</div>\n</span>", "p03135": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In order to pass the entrance examination tomorrow, Taro has to study for <var>T</var> more hours.</p>\n<p>Fortunately, he can <em>leap</em> to World B where time passes <var>X</var> times as fast as it does in our world (World A).</p>\n<p>While <var>(X \\times t)</var> hours pass in World B, <var>t</var> hours pass in World A.</p>\n<p>How many hours will pass in World A while Taro studies for <var>T</var> hours in World B?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq T \\leq 100</var></li>\n<li><var>1 \\leq X \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>T</var> <var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of hours that will pass in World A.</p>\n<p>The output will be regarded as correct when its absolute or relative error from the judge's output is at most <var>10^{-3}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2.6666666667\n</pre>\n<p>While Taro studies for eight hours in World B where time passes three times as fast, <var>2.6666...</var> hours will pass in World A.</p>\n<p>Note that an absolute or relative error of at most <var>10^{-3}</var> is allowed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>99 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>99.0000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0.0100000000\n</pre></section>\n</div>\n</span>", "p03136": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Determine if an <var>N</var>-sided polygon (not necessarily convex) with sides of length <var>L_1, L_2, ..., L_N</var> can be drawn in a two-dimensional plane.</p>\n<p>You can use the following theorem:</p>\n<p><strong>Theorem</strong>: an <var>N</var>-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other <var>N-1</var> sides.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>3 \\leq N \\leq 10</var></li>\n<li><var>1 \\leq L_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>L_1</var> <var>L_2</var> <var>...</var> <var>L_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If an <var>N</var>-sided polygon satisfying the condition can be drawn, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n3 8 5 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Since <var>8 &lt; 9 = 3 + 5 + 1</var>, it follows from the theorem that such a polygon can be drawn on a plane.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n3 8 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>Since <var>8 \\geq 8 = 3 + 4 + 1</var>, it follows from the theorem that such a polygon cannot be drawn on a plane.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n1 8 10 5 8 12 34 100 11 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03137": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will play a one-player game using a number line and <var>N</var> pieces.</p>\n<p>First, we place each of these pieces at some integer coordinate.</p>\n<p>Here, multiple pieces can be placed at the same coordinate.</p>\n<p>Our objective is to visit all of the <var>M</var> coordinates <var>X_1, X_2, ..., X_M</var> with these pieces, by repeating the following move:</p>\n<p><strong>Move</strong>: Choose a piece and let <var>x</var> be its coordinate. Put that piece at coordinate <var>x+1</var> or <var>x-1</var>.</p>\n<p>Note that the coordinates where we initially place the pieces are already regarded as visited.</p>\n<p>Find the minimum number of moves required to achieve the objective.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>-10^5 \\leq X_i \\leq 10^5</var></li>\n<li><var>X_1, X_2, ..., X_M</var> are all different.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>X_1</var> <var>X_2</var> <var>...</var> <var>X_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the minimum number of moves required to achieve the objective.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 5\n10 12 1 2 14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>The objective can be achieved in five moves as follows, and this is the minimum number of moves required.</p>\n<ul>\n<li>Initially, put the two pieces at coordinates <var>1</var> and <var>10</var>.</li>\n<li>Move the piece at coordinate <var>1</var> to <var>2</var>.</li>\n<li>Move the piece at coordinate <var>10</var> to <var>11</var>.</li>\n<li>Move the piece at coordinate <var>11</var> to <var>12</var>.</li>\n<li>Move the piece at coordinate <var>12</var> to <var>13</var>.</li>\n<li>Move the piece at coordinate <var>13</var> to <var>14</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 7\n-10 -3 0 9 -100 2 17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>19\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 1\n-100000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03138": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N</var> non-negative integers <var>A_1, A_2, ..., A_N</var> and another non-negative integer <var>K</var>.</p>\n<p>For a integer <var>X</var> between <var>0</var> and <var>K</var> (inclusive), let <var>f(X) = (X</var> XOR <var>A_1)</var> <var>+</var> <var>(X</var> XOR <var>A_2)</var> <var>+</var> <var>...</var> <var>+</var> <var>(X</var> XOR <var>A_N)</var>.</p>\n<p>Here, for non-negative integers <var>a</var> and <var>b</var>, <var>a</var> XOR <var>b</var> denotes the bitwise exclusive OR of <var>a</var> and <var>b</var>.</p>\n<p>Find the maximum value of <var>f</var>.</p>\n<p><details>\n<summary style=\"display: list-item; outline: none;\">What is XOR?</summary></details></p>\n<p>The bitwise exclusive OR of <var>a</var> and <var>b</var>, <var>X</var>, is defined as follows:</p>\n<ul>\n<li>When <var>X</var> is written in base two, the digit in the <var>2^k</var>'s place (<var>k \\geq 0</var>) is <var>1</var> if, when written in base two, exactly one of <var>A</var> and <var>B</var> has <var>1</var> in the <var>2^k</var>'s place, and <var>0</var> otherwise.</li>\n</ul>\n<p>For example, <var>3</var> XOR <var>5 = 6</var>. (When written in base two: <var>011</var> XOR <var>101 = 110</var>.)</p>\n<p></p></section></div></span>", "p03139": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We conducted a survey on newspaper subscriptions.\nMore specifically, we asked each of the <var>N</var> respondents the following two questions:</p>\n<ul>\n<li>Question <var>1</var>: Are you subscribing to Newspaper X?</li>\n<li>Question <var>2</var>: Are you subscribing to Newspaper Y?</li>\n</ul>\n<p>As the result, <var>A</var> respondents answered \"yes\" to Question <var>1</var>, and <var>B</var> respondents answered \"yes\" to Question <var>2</var>.</p>\n<p>What are the maximum possible number and the minimum possible number of respondents subscribing to both newspapers X and Y?</p>\n<p>Write a program to answer this question.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq A \\leq N</var></li>\n<li><var>0 \\leq B \\leq N</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number and the minimum possible number of respondents subscribing to both newspapers, in this order, with a space in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3 0\n</pre>\n<p>In this sample, out of the <var>10</var> respondents, <var>3</var> answered they are subscribing to Newspaper X, and <var>5</var> answered they are subscribing to Newspaper Y.</p>\n<p>Here, the number of respondents subscribing to both newspapers is at most <var>3</var> and at least <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 7 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5 2\n</pre>\n<p>In this sample, out of the <var>10</var> respondents, <var>7</var> answered they are subscribing to Newspaper X, and <var>5</var> answered they are subscribing to Newspaper Y.</p>\n<p>Here, the number of respondents subscribing to both newspapers is at most <var>5</var> and at least <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100 100\n</pre></section>\n</div>\n</span>", "p03141": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> dishes of cuisine placed in front of Takahashi and Aoki.\nFor convenience, we call these dishes Dish <var>1</var>, Dish <var>2</var>, ..., Dish <var>N</var>.</p>\n<p>When Takahashi eats Dish <var>i</var>, he earns <var>A_i</var> points of <em>happiness</em>; when Aoki eats Dish <var>i</var>, she earns <var>B_i</var> points of happiness.</p>\n<p>Starting from Takahashi, they alternately choose one dish and eat it, until there is no more dish to eat.\nHere, both of them choose dishes so that the following value is maximized: \"the sum of the happiness he/she will earn in the end\" minus \"the sum of the happiness the other person will earn in the end\".</p>\n<p>Find the value: \"the sum of the happiness Takahashi earns in the end\" minus \"the sum of the happiness Aoki earns in the end\".</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>1 \\leq B_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value: \"the sum of the happiness Takahashi earns in the end\" minus \"the sum of the happiness Aoki earns in the end\".</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n10 10\n20 20\n30 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>20\n</pre>\n<p>In this sample, both of them earns <var>10</var> points of happiness by eating Dish <var>1</var>, <var>20</var> points by eating Dish <var>2</var>, and <var>30</var> points by eating Dish <var>3</var>.</p>\n<p>In this case, since Takahashi and Aoki have the same \"taste\", each time they will choose the dish with which they can earn the greatest happiness. Thus, first Takahashi will choose Dish <var>3</var>, then Aoki will choose Dish <var>2</var>, and finally Takahashi will choose Dish <var>1</var>, so the answer is <var>(30 + 10) - 20 = 20</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n20 10\n20 20\n20 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>20\n</pre>\n<p>In this sample, Takahashi earns <var>20</var> points of happiness by eating any one of the dishes <var>1, 2</var> and <var>3</var>, but Aoki earns <var>10</var> points of happiness by eating Dish <var>1</var>, <var>20</var> points by eating Dish <var>2</var>, and <var>30</var> points by eating Dish <var>3</var>.</p>\n<p>In this case, since only Aoki has likes and dislikes, each time they will choose the dish with which Aoki can earn the greatest happiness. Thus, first Takahashi will choose Dish <var>3</var>, then Aoki will choose Dish <var>2</var>, and finally Takahashi will choose Dish <var>1</var>, so the answer is <var>(20 + 20) - 20 = 20</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-2999999997\n</pre>\n<p>Note that the answer may not fit into a <var>32</var>-bit integer.</p></section>\n</div>\n</span>", "p03143": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a connected undirected graph with <var>N</var> vertices and <var>M</var> edges.\nThe vertices are numbered <var>1</var> to <var>N</var>, and the edges are numbered <var>1</var> to <var>M</var>.\nAlso, each of these vertices and edges has a specified weight.\nVertex <var>i</var> has a weight of <var>X_i</var>; Edge <var>i</var> has a weight of <var>Y_i</var> and connects Vertex <var>A_i</var> and <var>B_i</var>.</p>\n<p>We would like to remove zero or more edges so that the following condition is satisfied:</p>\n<ul>\n<li>For each edge that is not removed, the sum of the weights of the vertices in the connected component containing that edge, is greater than or equal to the weight of that edge.</li>\n</ul>\n<p>Find the minimum number of edges that need to be removed.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>N-1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq X_i \\leq 10^9</var></li>\n<li><var>1 \\leq A_i &lt; B_i \\leq N</var></li>\n<li><var>1 \\leq Y_i \\leq 10^9</var></li>\n<li><var>(A_i,B_i) \\neq (A_j,B_j)</var> (<var>i \\neq j</var>)</li>\n<li>The given graph is connected.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>X_1</var> <var>X_2</var> <var>...</var> <var>X_N</var>\n<var>A_1</var> <var>B_1</var> <var>Y_1</var>\n<var>A_2</var> <var>B_2</var> <var>Y_2</var>\n<var>:</var>\n<var>A_M</var> <var>B_M</var> <var>Y_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the minimum number of edges that need to be removed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 4\n2 3 5 7\n1 2 7\n1 3 9\n2 3 12\n3 4 18\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Assume that we removed Edge <var>3</var> and <var>4</var>.\nIn this case, the connected component containing Edge <var>1</var> contains Vertex <var>1, 2</var> and <var>3</var>, and the sum of the weights of these vertices is <var>2+3+5=10</var>.\nThe weight of Edge <var>1</var> is <var>7</var>, so the condition is satisfied for Edge <var>1</var>.\nSimilarly, it can be seen that the condition is also satisfied for Edge <var>2</var>.\nThus, a graph satisfying the condition can be obtained by removing two edges.</p>\n<p>The condition cannot be satisfied by removing one or less edges, so the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 10\n4 4 1 1 1 7\n3 5 19\n2 5 20\n4 5 8\n1 6 16\n2 3 9\n3 6 16\n3 4 1\n2 6 20\n2 4 19\n1 2 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 9\n81 16 73 7 2 61 86 38 90 28\n6 8 725\n3 10 12\n1 4 558\n4 9 615\n5 6 942\n8 9 918\n2 7 720\n4 7 292\n7 10 414\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03144": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> jewels, numbered <var>1</var> to <var>N</var>.\nThe color of these jewels are represented by integers between <var>1</var> and <var>K</var> (inclusive), and the color of Jewel <var>i</var> is <var>C_i</var>.\nAlso, these jewels have specified values, and the value of Jewel <var>i</var> is <var>V_i</var>.</p>\n<p>Snuke would like to choose some of these jewels to exhibit.\nHere, the set of the chosen jewels must satisfy the following condition:</p>\n<ul>\n<li>For each chosen jewel, there is at least one more jewel of the same color that is chosen.</li>\n</ul>\n<p>For each integer <var>x</var> such that <var>1 \\leq x \\leq N</var>, determine if it is possible to choose exactly <var>x</var> jewels, and if it is possible, find the maximum possible sum of the values of chosen jewels in that case.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq K \\leq \\lfloor N/2 \\rfloor</var></li>\n<li><var>1 \\leq C_i \\leq K</var></li>\n<li><var>1 \\leq V_i \\leq 10^9</var></li>\n<li>For each of the colors, there are at least two jewels of that color.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>C_1</var> <var>V_1</var>\n<var>C_2</var> <var>V_2</var>\n<var>:</var>\n<var>C_N</var> <var>V_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines.\nIn the <var>i</var>-th line, if it is possible to choose exactly <var>i</var> jewels, print the maximum possible sum of the values of chosen jewels in that case, and print <var>-1</var> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2\n1 1\n1 2\n1 3\n2 4\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>-1\n9\n6\n14\n15\n</pre>\n<p>We cannot choose exactly one jewel.</p>\n<p>When choosing exactly two jewels, the total value is maximized when Jewel <var>4</var> and <var>5</var> are chosen.</p>\n<p>When choosing exactly three jewels, the total value is maximized when Jewel <var>1, 2</var> and <var>3</var> are chosen.</p>\n<p>When choosing exactly four jewels, the total value is maximized when Jewel <var>2, 3, 4</var> and <var>5</var> are chosen.</p>\n<p>When choosing exactly five jewels, the total value is maximized when Jewel <var>1, 2, 3, 4</var> and <var>5</var> are chosen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 2\n1 1\n1 2\n2 3\n2 4\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n9\n12\n12\n15\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 4\n3 2\n2 3\n4 5\n1 7\n3 11\n4 13\n1 17\n2 19\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n24\n-1\n46\n-1\n64\n-1\n77\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>15 5\n3 87\n1 25\n1 27\n3 58\n2 85\n5 19\n5 39\n1 58\n3 12\n4 13\n5 54\n4 100\n2 33\n5 13\n2 55\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>-1\n145\n173\n285\n318\n398\n431\n491\n524\n576\n609\n634\n653\n666\n678\n</pre></section>\n</div>\n</span>", "p03146": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A sequence <var>a=\\{a_1,a_2,a_3,......\\}</var> is determined as follows:</p>\n<ul>\n<li>\n<p>The first term <var>s</var> is given as input.</p>\n</li>\n<li>\n<p>Let <var>f(n)</var> be the following function: <var>f(n) = n/2</var> if <var>n</var> is even, and <var>f(n) = 3n+1</var> if <var>n</var> is odd.</p>\n</li>\n<li>\n<p><var>a_i = s</var> when <var>i = 1</var>, and <var>a_i = f(a_{i-1})</var> when <var>i &gt; 1</var>.</p>\n</li>\n</ul>\n<p>Find the minimum integer <var>m</var> that satisfies the following condition:</p>\n<ul>\n<li>There exists an integer <var>n</var> such that <var>a_m = a_n (m &gt; n)</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq s \\leq 100</var></li>\n<li>All values in input are integers.</li>\n<li>It is guaranteed that all elements in <var>a</var> and the minimum <var>m</var> that satisfies the condition are at most <var>1000000</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum integer <var>m</var> that satisfies the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p><var>a=\\{8,4,2,1,4,2,1,4,2,1,......\\}</var>. As <var>a_5=a_2</var>, the answer is <var>5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>18\n</pre>\n<p><var>a=\\{7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1,4,2,1,......\\}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>54\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>114\n</pre></section>\n</div>\n</span>", "p03147": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In a flower bed, there are <var>N</var> flowers, numbered <var>1,2,......,N</var>. Initially, the heights of all flowers are <var>0</var>.\nYou are given a sequence <var>h=\\{h_1,h_2,h_3,......\\}</var> as input. You would like to change the height of Flower <var>k</var> to <var>h_k</var> for all <var>k</var> <var>(1 \\leq  k \\leq N)</var>, by repeating the following \"watering\" operation:</p>\n<ul>\n<li>Specify integers <var>l</var> and <var>r</var>. Increase the height of Flower <var>x</var> by <var>1</var> for all <var>x</var> such that <var>l \\leq x \\leq r</var>.</li>\n</ul>\n<p>Find the minimum number of watering operations required to satisfy the condition.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N  \\leq 100</var></li>\n<li><var>0 \\leq h_i \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>h_1</var> <var>h_2</var> <var>h_3</var> <var>......</var> <var>h_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of watering operations required to satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The minimum number of watering operations required is <var>2</var>.\nOne way to achieve it is:</p>\n<ul>\n<li>Perform the operation with <var>(l,r)=(1,3)</var>.</li>\n<li>Perform the operation with <var>(l,r)=(2,4)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n3 1 2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\n4 23 75 0 23 96 50 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>221\n</pre></section>\n</div>\n</span>", "p03149": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given four digits <var>N_1, N_2, N_3</var> and <var>N_4</var>. Determine if these can be arranged into the sequence of digits \"<var>1974</var>\".</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq N_1, N_2, N_3, N_4 \\leq 9</var></li>\n<li><var>N_1, N_2, N_3</var> and <var>N_4</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N_1</var> <var>N_2</var> <var>N_3</var> <var>N_4</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>N_1, N_2, N_3</var> and <var>N_4</var> can be arranged into the sequence of digits \"<var>1974</var>\", print <code>YES</code>; if they cannot, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 7 9 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>We can get <var>1974</var> by swapping <var>N_2</var> and <var>N_3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 9 7 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>YES\n</pre>\n<p>We already have <var>1974</var> before doing anything.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 2 9 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4 9 0 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p03148": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> pieces of sushi. Each piece has two parameters: \"kind of topping\" <var>t_i</var> and \"deliciousness\" <var>d_i</var>.\nYou are choosing <var>K</var> among these <var>N</var> pieces to eat.\nYour \"satisfaction\" here will be calculated as follows:</p>\n<ul>\n<li>The satisfaction is the sum of the \"base total deliciousness\" and the \"variety bonus\".</li>\n<li>The base total deliciousness is the sum of the deliciousness of the pieces you eat.</li>\n<li>The variety bonus is <var>x*x</var>, where <var>x</var> is the number of different kinds of toppings of the pieces you eat.</li>\n</ul>\n<p>You want to have as much satisfaction as possible.\nFind this maximum satisfaction.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N  \\leq 10^5</var></li>\n<li><var>1 \\leq t_i \\leq N</var></li>\n<li><var>1 \\leq d_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>t_1</var> <var>d_1</var>\n<var>t_2</var> <var>d_2</var>\n<var>.</var>\n<var>.</var>\n<var>.</var>\n<var>t_N</var> <var>d_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum satisfaction that you can obtain.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n1 9\n1 7\n2 6\n2 5\n3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>26\n</pre>\n<p>If you eat Sushi <var>1,2</var> and <var>3</var>:</p>\n<ul>\n<li>The base total deliciousness is <var>9+7+6=22</var>.</li>\n<li>The variety bonus is <var>2*2=4</var>.</li>\n</ul>\n<p>Thus, your satisfaction will be <var>26</var>, which is optimal.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 4\n1 1\n2 1\n3 1\n4 6\n4 5\n4 5\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>25\n</pre>\n<p>It is optimal to eat Sushi <var>1,2,3</var> and <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 5\n5 1000000000\n2 990000000\n3 980000000\n6 970000000\n6 960000000\n4 950000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4900000016\n</pre>\n<p>Note that the output may not fit into a <var>32</var>-bit integer type.</p></section>\n</div>\n</span>", "p03150": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A string is called a KEYENCE string when it can be changed to <code>keyence</code> by removing its contiguous substring (possibly empty) only once.</p>\n<p>Given a string <var>S</var> consisting of lowercase English letters, determine if <var>S</var> is a KEYENCE string.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The length of <var>S</var> is between <var>7</var> and <var>100</var> (inclusive).</li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> is a KEYENCE string, print <code>YES</code>; otherwise, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>keyofscience\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p><code>keyence</code> is an abbreviation of <code>key of science</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>mpyszsbznf\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>ashlfyha\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>keyence\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>YES\n</pre></section>\n</div>\n</span>", "p03151": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A university student, Takahashi, has to take <var>N</var> examinations and pass all of them.\nCurrently, his <em>readiness</em> for the <var>i</var>-th examination is <var>A_{i}</var>, and according to his investigation, it is known that he needs readiness of at least <var>B_{i}</var> in order to pass the <var>i</var>-th examination.</p>\n<p>Takahashi thinks that he may not be able to pass all the examinations, and he has decided to ask a magician, Aoki, to change the readiness for as few examinations as possible so that he can pass all of them, while not changing the total readiness.</p>\n<p>For Takahashi, find the minimum possible number of indices <var>i</var> such that <var>A_i</var> and <var>C_i</var> are different, for a sequence <var>C_1, C_2, ..., C_{N}</var> that satisfies the following conditions:</p>\n<ul>\n<li>The sum of the sequence <var>A_1, A_2, ..., A_{N}</var> and the sum of the sequence <var>C_1, C_2, ..., C_{N}</var> are equal.</li>\n<li>For every <var>i</var>, <var>B_i \\leq C_i</var> holds.</li>\n</ul>\n<p>If such a sequence <var>C_1, C_2, ..., C_{N}</var> cannot be constructed, print <var>-1</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>1 \\leq B_i \\leq 10^9</var></li>\n<li><var>A_i</var> and <var>B_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_{N}</var>\n<var>B_1</var> <var>B_2</var> <var>...</var> <var>B_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible number of indices <var>i</var> such that <var>A_i</var> and <var>C_i</var> are different, for a sequence <var>C_1, C_2, ..., C_{N}</var> that satisfies the conditions.\nIf such a sequence <var>C_1, C_2, ..., C_{N}</var> cannot be constructed, print <var>-1</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 3 5\n3 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><var>(A_1, A_2, A_3) = (2, 3, 5)</var> and <var>(B_1, B_2, B_3) = (3, 4, 1)</var>. If nothing is done, he cannot pass the first and second exams.\nThe minimum possible number of indices <var>i</var> such that <var>A_i</var> and <var>C_i</var> are different, <var>3</var>, is achieved when:</p>\n<ul>\n<li><var>(C_1, C_2, C_3) = (3, 5, 2)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n2 3 3\n2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>In this case, he has to do nothing in order to pass all the exams.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n17 7 1\n25 6 14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n<p>In this case, no matter what is done, he cannot pass all the exams.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>12\n757232153 372327760 440075441 195848680 354974235 458054863 463477172 740174259 615762794 632963102 529866931 64991604\n74164189 98239366 465611891 362739947 147060907 118867039 63189252 78303147 501410831 110823640 122948912 572905212\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03152": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Consider writing each of the integers from <var>1</var> to <var>N \\times M</var> in a grid with <var>N</var> rows and <var>M</var> columns, without duplicates.\nTakahashi thinks it is not fun enough, and he will write the numbers under the following conditions:</p>\n<ul>\n<li>The largest among the values in the <var>i</var>-th row <var>(1 \\leq i \\leq N)</var> is <var>A_i</var>.</li>\n<li>The largest among the values in the <var>j</var>-th column <var>(1 \\leq j \\leq M)</var> is <var>B_j</var>.</li>\n</ul>\n<p>For him, find the number of ways to write the numbers under these conditions, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>1 \\leq M \\leq 1000</var></li>\n<li><var>1 \\leq A_i \\leq N \\times M</var></li>\n<li><var>1 \\leq B_j \\leq N \\times M</var></li>\n<li><var>A_i</var> and <var>B_j</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_{N}</var>\n<var>B_1</var> <var>B_2</var> <var>...</var> <var>B_{M}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to write the numbers under the conditions, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n4 3\n3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p><var>(A_1, A_2) = (4, 3)</var> and <var>(B_1, B_2) = (3, 4)</var>. In this case, there are two ways to write the numbers, as follows:</p>\n<ul>\n<li><var>1</var> in <var>(1, 1)</var>, <var>4</var> in <var>(1, 2)</var>, <var>3</var> in <var>(2, 1)</var> and <var>2</var> in <var>(2, 2)</var>.</li>\n<li><var>2</var> in <var>(1, 1)</var>, <var>4</var> in <var>(1, 2)</var>, <var>3</var> in <var>(2, 1)</var> and <var>1</var> in <var>(2, 2)</var>.</li>\n</ul>\n<p>Here, <var>(i, j)</var> denotes the square at the <var>i</var>-th row and the <var>j</var>-th column.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n5 9 7\n3 6 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Since there is no way to write the numbers under the condition, <var>0</var> should be printed. </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 2\n4 4\n4 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>14 13\n158 167 181 147 178 151 179 182 176 169 180 129 175 168\n181 150 178 179 167 180 176 169 182 177 175 159 173\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>343772227\n</pre></section>\n</div>\n</span>", "p03153": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> cities in Republic of AtCoder. The size of the <var>i</var>-th city is <var>A_{i}</var>.\nTakahashi would like to build <var>N-1</var> bidirectional roads connecting two cities so that any city can be reached from any other city by using these roads.</p>\n<p>Assume that the cost of building a road connecting the <var>i</var>-th city and the <var>j</var>-th city is <var>|i-j| \\times D + A_{i} + A_{j}</var>.\nFor Takahashi, find the minimum possible total cost to achieve the objective.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq D \\leq 10^9</var></li>\n<li><var>1 \\leq A_{i} \\leq 10^9</var></li>\n<li><var>A_{i}</var> and <var>D</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>D</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible total cost.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1\n1 100 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>106\n</pre>\n<p>This cost can be achieved by, for example, building roads connecting City <var>1</var>, <var>2</var> and City <var>1</var>, <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 1000\n1 100 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2202\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 14\n25 171 7 1 17 162\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>497\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>12 5\n43 94 27 3 69 99 56 25 8 15 46 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>658\n</pre></section>\n</div>\n</span>", "p03154": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a rectangular sheet of paper with height <var>H+1</var> and width <var>W+1</var>. We introduce an <var>xy</var>-coordinate system so that the four corners of the sheet are <var>(0, 0)</var>, <var>(W + 1, 0)</var>, <var>(0, H + 1)</var> and <var>(W + 1, H + 1)</var>.</p>\n<p>This sheet can be cut along the lines <var>x = 1,2,...,W</var> and the lines <var>y = 1,2,...,H</var>. Consider a sequence of operations of length <var>K</var> where we choose <var>K</var> of these <var>H + W</var> lines and cut the sheet along those lines one by one in some order.</p>\n<p>Let the score of a cut be the number of pieces of paper that exist just after the cut. The score of a sequence of operations is the sum of the scores of all of the <var>K</var> cuts.</p>\n<p>Find the sum of the scores of all possible sequences of operations of length <var>K</var>. Since this value can be extremely large, print the number modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 10^7</var></li>\n<li><var>1 \\leq K \\leq H + W</var></li>\n<li><var>H, W</var> and <var>K</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the scores, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>34\n</pre>\n<p>Let <var>x_1</var>, <var>y_1</var> and <var>y_2</var> denote the cuts along the lines <var>x = 1</var>, <var>y = 1</var> and <var>y = 2</var>, respectively. The six possible sequences of operations and the score of each of them are as follows:</p>\n<ul>\n<li><var>y_1, y_2</var>: <var>2 + 3 = 5</var></li>\n<li><var>y_2, y_1</var>: <var>2 + 3 = 5</var></li>\n<li><var>y_1, x_1</var>: <var>2 + 4 = 6</var></li>\n<li><var>y_2, x_1</var>: <var>2 + 4 = 6</var></li>\n<li><var>x_1, y_1</var>: <var>2 + 4 = 6</var></li>\n<li><var>x_1, y_2</var>: <var>2 + 4 = 6</var></li>\n</ul>\n<p>The sum of these is <var>34</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>30 40 50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>616365902\n</pre>\n<p>Be sure to print the sum modulo <var>10^9 + 7</var>.</p></section>\n</div>\n</span>", "p03155": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>It has been decided that a programming contest sponsored by company A will be held, so we will post the notice on a bulletin board.</p>\n<p>The bulletin board is in the form of a grid with <var>N</var> rows and <var>N</var> columns, and the notice will occupy a rectangular region with <var>H</var> rows and <var>W</var> columns.</p>\n<p>How many ways are there to choose where to put the notice so that it completely covers exactly <var>HW</var> squares?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H, W \\leq N \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>H</var>\n<var>W</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>There are two ways to put the notice, as follows:</p>\n<pre>###   ...\n###   ###\n...   ###\n</pre>\n<p>Here, <code>#</code> represents a square covered by the notice, and <code>.</code> represents a square not covered.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100\n1\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n4\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03156": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have written <var>N</var> problems to hold programming contests.\nThe <var>i</var>-th problem will have a score of <var>P_i</var> points if used in a contest.</p>\n<p>With these problems, you would like to hold as many contests as possible under the following condition:</p>\n<ul>\n<li>A contest has three problems. The first problem has a score not greater than <var>A</var> points, the second has a score between <var>A + 1</var> and <var>B</var> points (inclusive), and the third has a score not less than <var>B + 1</var> points.</li>\n</ul>\n<p>The same problem should not be used in multiple contests.\nAt most how many contests can be held?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq P_i \\leq 20</var> (<var>1 \\leq i \\leq N</var>)</li>\n<li><var>1 \\leq A &lt; B &lt; 20</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A</var> <var>B</var>\n<var>P_1</var> <var>P_2</var> <var>...</var> <var>P_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n5 15\n1 10 16 2 7 20 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Two contests can be held by putting the first, second, third problems and the fourth, fifth, sixth problems together.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8\n3 8\n5 5 5 10 10 10 15 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>No contest can be held, because there is no problem with a score of <var>A = 3</var> or less.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n5 6\n5 6 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre></section>\n</div>\n</span>", "p03157": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a grid with <var>H</var> rows and <var>W</var> columns, where each square is painted black or white.</p>\n<p>You are given <var>H</var> strings <var>S_1, S_2, ..., S_H</var>, each of length <var>W</var>.\nIf the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left is painted black, the <var>j</var>-th character in the string <var>S_i</var> is <code>#</code>; if that square is painted white, the <var>j</var>-th character in the string <var>S_i</var> is <code>.</code>.</p>\n<p>Find the number of pairs of a black square <var>c_1</var> and a white square <var>c_2</var> that satisfy the following condition:</p>\n<ul>\n<li>There is a path from the square <var>c_1</var> to the square <var>c_2</var> where we repeatedly move to a vertically or horizontally adjacent square through an alternating sequence of black and white squares: black, white, black, white...</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H, W \\leq 400</var></li>\n<li><var>|S_i| = W</var> (<var>1 \\leq i \\leq H</var>)</li>\n<li>For each <var>i</var> (<var>1 \\leq i \\leq H</var>), the string <var>S_i</var> consists of characters <code>#</code> and <code>.</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>S_1</var>\n<var>S_2</var>\n<var>:</var>\n<var>S_H</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n.#.\n..#\n#..\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>Some of the pairs satisfying the condition are <var>((1, 2), (3, 3))</var> and <var>((3, 1), (3, 2))</var>, where <var>(i, j)</var> denotes the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 4\n....\n....\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 3\n###\n###\n...\n###\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n</pre></section>\n</div>\n</span>", "p03158": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> cards. The <var>i</var>-th card has an integer <var>A_i</var> written on it.\nFor any two cards, the integers on those cards are different.</p>\n<p>Using these cards, Takahashi and Aoki will play the following game:</p>\n<ul>\n<li>Aoki chooses an integer <var>x</var>.</li>\n<li>Starting from Takahashi, the two players alternately take a card. The card should be chosen in the following manner:<ul>\n<li>Takahashi should take the card with the largest integer among the remaining card.</li>\n<li>Aoki should take the card with the integer closest to <var>x</var> among the remaining card. If there are multiple such cards, he should take the card with the smallest integer among those cards.</li>\n</ul>\n</li>\n<li>The game ends when there is no card remaining.</li>\n</ul>\n<p>You are given <var>Q</var> candidates for the value of <var>x</var>: <var>X_1, X_2, ..., X_Q</var>.\nFor each <var>i</var> (<var>1 \\leq i \\leq Q</var>), find the sum of the integers written on the cards that Takahashi will take if Aoki chooses <var>x = X_i</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100</var> <var>000</var></li>\n<li><var>1 \\leq Q \\leq 100</var> <var>000</var></li>\n<li><var>1 \\leq A_1 &lt; A_2 &lt; ... &lt; A_N \\leq 10^9</var></li>\n<li><var>1 \\leq X_i \\leq 10^9</var> (<var>1 \\leq i \\leq Q</var>)</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n<var>X_1</var>\n<var>X_2</var>\n<var>:</var>\n<var>X_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines. The <var>i</var>-th line (<var>1 \\leq i \\leq Q</var>) should contain the answer for <var>x = X_i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 5\n3 5 7 11 13\n1\n4\n9\n10\n13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>31\n31\n27\n23\n23\n</pre>\n<p>For example, when <var>x = X_3(= 9)</var>, the game proceeds as follows:</p>\n<ul>\n<li>Takahashi takes the card with <var>13</var>.</li>\n<li>Aoki takes the card with <var>7</var>.</li>\n<li>Takahashi takes the card with <var>11</var>.</li>\n<li>Aoki takes the card with <var>5</var>.</li>\n<li>Takahashi takes the card with <var>3</var>.</li>\n</ul>\n<p>Thus, <var>13 + 11 + 3 = 27</var> should be printed on the third line.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n10 20 30 40\n2\n34\n34\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>70\n60\n60\n</pre></section>\n</div>\n</span>", "p03159": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>The server in company A has a structure where <var>N</var> devices numbered <var>1, 2, ..., N</var> are connected with <var>N - 1</var> cables.\nThe <var>i</var>-th cable connects Device <var>U_i</var> and Device <var>V_i</var>.\nAny two different devices are connected through some number of cables.</p>\n<p>Each device <var>v</var> (<var>1 \\leq v \\leq N</var>) has a non-zero integer <var>A_v</var>, which represents the following:</p>\n<ul>\n<li>If <var>A_v &lt; 0</var>, Device <var>v</var> is a computer that consumes an electric power of <var>-A_v</var>.</li>\n<li>If <var>A_v &gt; 0</var>, Device <var>v</var> is a battery that supplies an electric power of <var>A_v</var>.</li>\n</ul>\n<p>You have decided to disconnect some number of cables (possibly zero) to disable the server.\nWhen some cables are disconnected, the devices will be divided into some number of connected components.\nThe server will be disabled if all of these connected components satisfy one of the following conditions:</p>\n<ul>\n<li>There is no computer in the connected component. That is, <var>A_v</var> is positive for every device <var>v</var> that belongs to the connected component.</li>\n<li>There is not enough supply of electric power in the connected component. That is, the sum of <var>A_v</var> over all devices <var>v</var> that belong to the connected component is negative.</li>\n</ul>\n<p>At least how many cables do you need to disconnect in order to disable the server?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 5</var> <var>000</var></li>\n<li><var>1 \\leq |A_i| \\leq 10^9</var> (<var>1 \\leq i \\leq N</var>)</li>\n<li><var>1 \\leq U_i, V_i \\leq N</var> (<var>1 \\leq i \\leq N - 1</var>)</li>\n<li><var>U_i \\neq V_i</var> (<var>1 \\leq i \\leq N - 1</var>)</li>\n<li>Any two different devices are connected through some number of cables.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n<var>U_1</var> <var>V_1</var>\n<var>U_2</var> <var>V_2</var>\n<var>:</var>\n<var>U_{N - 1}</var> <var>V_{N - 1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n-2 7 5 6 -8 3 4\n1 2\n2 3\n2 4\n1 5\n5 6\n5 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>We should disconnect the cable connecting Device <var>1</var> and Device <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2 3 4\n1 2\n1 3\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n10 -1 10 -1 10 -1\n1 2\n2 3\n3 4\n4 5\n5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8\n-2 3 6 -2 -2 -5 3 2\n3 4\n7 6\n6 2\n8 2\n5 3\n1 8\n3 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>10\n3 4 9 6 1 5 -1 10 -10 -10\n7 4\n5 6\n8 1\n9 5\n7 1\n10 3\n2 8\n4 10\n9 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03162": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Taro's summer vacation starts tomorrow, and he has decided to make plans for it now.</p>\n<p>The vacation consists of <var>N</var> days.\nFor each <var>i</var> (<var>1 \\leq i \\leq N</var>), Taro will choose one of the following activities and do it on the <var>i</var>-th day:</p>\n<ul>\n<li>A: Swim in the sea. Gain <var>a_i</var> points of happiness.</li>\n<li>B: Catch bugs in the mountains. Gain <var>b_i</var> points of happiness.</li>\n<li>C: Do homework at home. Gain <var>c_i</var> points of happiness.</li>\n</ul>\n<p>As Taro gets bored easily, he cannot do the same activities for two or more consecutive days.</p>\n<p>Find the maximum possible total points of happiness that Taro gains.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq a_i, b_i, c_i \\leq 10^4</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var> <var>c_1</var>\n<var>a_2</var> <var>b_2</var> <var>c_2</var>\n<var>:</var>\n<var>a_N</var> <var>b_N</var> <var>c_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible total points of happiness that Taro gains.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n10 40 70\n20 50 80\n30 60 90\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>210\n</pre>\n<p>If Taro does activities in the order C, B, C, he will gain <var>70 + 50 + 90 = 210</var> points of happiness.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n100 10 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n6 7 8\n8 8 3\n2 5 2\n7 8 6\n4 6 8\n2 3 4\n7 5 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>46\n</pre>\n<p>Taro should do activities in the order C, A, B, A, C, B, A.</p></section>\n</div>\n</span>", "p03163": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> items, numbered <var>1, 2, \\ldots, N</var>.\nFor each <var>i</var> (<var>1 \\leq i \\leq N</var>), Item <var>i</var> has a weight of <var>w_i</var> and a value of <var>v_i</var>.</p>\n<p>Taro has decided to choose some of the <var>N</var> items and carry them home in a knapsack.\nThe capacity of the knapsack is <var>W</var>, which means that the sum of the weights of items taken must be at most <var>W</var>.</p>\n<p>Find the maximum possible sum of the values of items that Taro takes home.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq W \\leq 10^5</var></li>\n<li><var>1 \\leq w_i \\leq W</var></li>\n<li><var>1 \\leq v_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>W</var>\n<var>w_1</var> <var>v_1</var>\n<var>w_2</var> <var>v_2</var>\n<var>:</var>\n<var>w_N</var> <var>v_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the values of items that Taro takes home.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 8\n3 30\n4 50\n5 60\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>90\n</pre>\n<p>Items <var>1</var> and <var>3</var> should be taken.\nThen, the sum of the weights is <var>3 + 5 = 8</var>, and the sum of the values is <var>30 + 60 = 90</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 5\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5000000000\n</pre>\n<p>The answer may not fit into a 32-bit integer type.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 15\n6 5\n5 6\n6 4\n6 6\n3 5\n7 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>17\n</pre>\n<p>Items <var>2, 4</var> and <var>5</var> should be taken.\nThen, the sum of the weights is <var>5 + 6 + 3 = 14</var>, and the sum of the values is <var>6 + 6 + 5 = 17</var>.</p></section>\n</div>\n</span>", "p03164": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> items, numbered <var>1, 2, \\ldots, N</var>.\nFor each <var>i</var> (<var>1 \\leq i \\leq N</var>), Item <var>i</var> has a weight of <var>w_i</var> and a value of <var>v_i</var>.</p>\n<p>Taro has decided to choose some of the <var>N</var> items and carry them home in a knapsack.\nThe capacity of the knapsack is <var>W</var>, which means that the sum of the weights of items taken must be at most <var>W</var>.</p>\n<p>Find the maximum possible sum of the values of items that Taro takes home.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq W \\leq 10^9</var></li>\n<li><var>1 \\leq w_i \\leq W</var></li>\n<li><var>1 \\leq v_i \\leq 10^3</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>W</var>\n<var>w_1</var> <var>v_1</var>\n<var>w_2</var> <var>v_2</var>\n<var>:</var>\n<var>w_N</var> <var>v_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the values of items that Taro takes home.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 8\n3 30\n4 50\n5 60\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>90\n</pre>\n<p>Items <var>1</var> and <var>3</var> should be taken.\nThen, the sum of the weights is <var>3 + 5 = 8</var>, and the sum of the values is <var>30 + 60 = 90</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1000000000\n1000000000 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 15\n6 5\n5 6\n6 4\n6 6\n3 5\n7 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>17\n</pre>\n<p>Items <var>2, 4</var> and <var>5</var> should be taken.\nThen, the sum of the weights is <var>5 + 6 + 3 = 14</var>, and the sum of the values is <var>6 + 6 + 5 = 17</var>.</p></section>\n</div>\n</span>", "p03165": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given strings <var>s</var> and <var>t</var>.\nFind one longest string that is a subsequence of both <var>s</var> and <var>t</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>A <em>subsequence</em> of a string <var>x</var> is the string obtained by removing zero or more characters from <var>x</var> and concatenating the remaining characters without changing the order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>s</var> and <var>t</var> are strings consisting of lowercase English letters.</li>\n<li><var>1 \\leq |s|, |t| \\leq 3000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n<var>t</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print one longest string that is a subsequence of both <var>s</var> and <var>t</var>.\nIf there are multiple such strings, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>axyb\nabyxb\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>axb\n</pre>\n<p>The answer is <code>axb</code> or <code>ayb</code>; either will be accepted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>aa\nxayaz\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>aa\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>a\nz\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>\n</pre>\n<p>The answer is <code></code> (an empty string).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>abracadabra\navadakedavra\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>aaadara\n</pre></section>\n</div>\n</span>", "p03170": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a set <var>A = \\{ a_1, a_2, \\ldots, a_N \\}</var> consisting of <var>N</var> positive integers.\nTaro and Jiro will play the following game against each other.</p>\n<p>Initially, we have a pile consisting of <var>K</var> stones.\nThe two players perform the following operation alternately, starting from Taro:</p>\n<ul>\n<li>Choose an element <var>x</var> in <var>A</var>, and remove exactly <var>x</var> stones from the pile.</li>\n</ul>\n<p>A player loses when he becomes unable to play.\nAssuming that both players play optimally, determine the winner.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq K \\leq 10^5</var></li>\n<li><var>1 \\leq a_1 &lt; a_2 &lt; \\cdots &lt; a_N \\leq K</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>a_1</var> <var>a_2</var> <var>\\ldots</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Taro will win, print <code>First</code>; if Jiro will win, print <code>Second</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 4\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>First\n</pre>\n<p>If Taro removes three stones, Jiro cannot make a move.\nThus, Taro wins.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 5\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Second\n</pre>\n<p>Whatever Taro does in his operation, Jiro wins, as follows:</p>\n<ul>\n<li>If Taro removes two stones, Jiro can remove three stones to make Taro unable to make a move.</li>\n<li>If Taro removes three stones, Jiro can remove two stones to make Taro unable to make a move.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 7\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>First\n</pre>\n<p>Taro should remove two stones. Then, whatever Jiro does in his operation, Taro wins, as follows:</p>\n<ul>\n<li>If Jiro removes two stones, Taro can remove three stones to make Jiro unable to make a move.</li>\n<li>If Jiro removes three stones, Taro can remove two stones to make Jiro unable to make a move.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3 20\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Second\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>3 21\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>First\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>1 100000\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>Second\n</pre></section>\n</div>\n</span>", "p03169": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> dishes, numbered <var>1, 2, \\ldots, N</var>.\nInitially, for each <var>i</var> (<var>1 \\leq i \\leq N</var>), Dish <var>i</var> has <var>a_i</var> (<var>1 \\leq a_i \\leq 3</var>) pieces of sushi on it.</p>\n<p>Taro will perform the following operation repeatedly until all the pieces of sushi are eaten:</p>\n<ul>\n<li>Roll a die that shows the numbers <var>1, 2, \\ldots, N</var> with equal probabilities, and let <var>i</var> be the outcome. If there are some pieces of sushi on Dish <var>i</var>, eat one of them; if there is none, do nothing.</li>\n</ul>\n<p>Find the expected number of times the operation is performed before all the pieces of sushi are eaten.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 300</var></li>\n<li><var>1 \\leq a_i \\leq 3</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>\\ldots</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the expected number of times the operation is performed before all the pieces of sushi are eaten.\nThe output is considered correct when the relative difference is not greater than <var>10^{-9}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5.5\n</pre>\n<p>The expected number of operations before the first piece of sushi is eaten, is <var>1</var>.\nAfter that, the expected number of operations before the second sushi is eaten, is <var>1.5</var>.\nAfter that, the expected number of operations before the third sushi is eaten, is <var>3</var>.\nThus, the expected total number of operations is <var>1 + 1.5 + 3 = 5.5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>Outputs such as <code>3.00</code>, <code>3.000000003</code> and <code>2.999999997</code> will also be accepted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4.5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10\n1 3 2 3 3 2 3 2 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>54.48064457488221\n</pre></section>\n</div>\n</span>", "p03172": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> children, numbered <var>1, 2, \\ldots, N</var>.</p>\n<p>They have decided to share <var>K</var> candies among themselves.\nHere, for each <var>i</var> (<var>1 \\leq i \\leq N</var>), Child <var>i</var> must receive between <var>0</var> and <var>a_i</var> candies (inclusive).\nAlso, no candies should be left over.</p>\n<p>Find the number of ways for them to share candies, modulo <var>10^9 + 7</var>.\nHere, two ways are said to be different when there exists a child who receives a different number of candies.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq K \\leq 10^5</var></li>\n<li><var>0 \\leq a_i \\leq K</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>a_1</var> <var>a_2</var> <var>\\ldots</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways for the children to share candies, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>There are five ways for the children to share candies, as follows:</p>\n<ul>\n<li><var>(0, 1, 3)</var></li>\n<li><var>(0, 2, 2)</var></li>\n<li><var>(1, 0, 3)</var></li>\n<li><var>(1, 1, 2)</var></li>\n<li><var>(1, 2, 1)</var></li>\n</ul>\n<p>Here, in each sequence, the <var>i</var>-th element represents the number of candies that Child <var>i</var> receives.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 10\n9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>There may be no ways for the children to share candies.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 0\n0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n<p>There is one way for the children to share candies, as follows:</p>\n<ul>\n<li><var>(0, 0)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4 100000\n100000 100000 100000 100000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>665683269\n</pre>\n<p>Be sure to print the answer modulo <var>10^9 + 7</var>.</p></section>\n</div>\n</span>", "p03174": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> men and <var>N</var> women, both numbered <var>1, 2, \\ldots, N</var>.</p>\n<p>For each <var>i, j</var> (<var>1 \\leq i, j \\leq N</var>), the compatibility of Man <var>i</var> and Woman <var>j</var> is given as an integer <var>a_{i, j}</var>.\nIf <var>a_{i, j} = 1</var>, Man <var>i</var> and Woman <var>j</var> are compatible; if <var>a_{i, j} = 0</var>, they are not.</p>\n<p>Taro is trying to make <var>N</var> pairs, each consisting of a man and a woman who are compatible.\nHere, each man and each woman must belong to exactly one pair.</p>\n<p>Find the number of ways in which Taro can make <var>N</var> pairs, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 21</var></li>\n<li><var>a_{i, j}</var> is <var>0</var> or <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_{1, 1}</var> <var>\\ldots</var> <var>a_{1, N}</var>\n<var>:</var>\n<var>a_{N, 1}</var> <var>\\ldots</var> <var>a_{N, N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways in which Taro can make <var>N</var> pairs, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n0 1 1\n1 0 1\n1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>There are three ways to make pairs, as follows (<var>(i, j)</var> denotes a pair of Man <var>i</var> and Woman <var>j</var>):</p>\n<ul>\n<li><var>(1, 2), (2, 1), (3, 3)</var></li>\n<li><var>(1, 2), (2, 3), (3, 1)</var></li>\n<li><var>(1, 3), (2, 1), (3, 2)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n0 1 0 0\n0 0 0 1\n1 0 0 0\n0 0 1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>There is one way to make pairs, as follows:</p>\n<ul>\n<li><var>(1, 2), (2, 4), (3, 1), (4, 3)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>21\n0 0 0 0 0 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1\n1 1 1 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 1 0\n0 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1\n0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0\n1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0\n0 1 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 0 1\n0 1 0 0 0 1 0 1 0 0 0 1 1 1 0 0 1 1 0 1 0\n0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 1 1 1 1 1 1\n0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 0 1 0 1 1 1\n0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1\n0 1 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 0 1 1 0\n0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1\n0 1 1 0 0 1 1 1 1 0 0 0 1 0 1 1 0 1 0 1 1\n1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 0 1\n0 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1\n1 0 1 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 1 0\n0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1\n0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 0 1 1 0 1\n0 0 0 0 1 1 1 0 1 0 1 1 1 0 1 1 0 0 1 1 0\n1 1 0 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0\n1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 1 0 0 0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>102515160\n</pre>\n<p>Be sure to print the number modulo <var>10^9 + 7</var>.</p></section>\n</div>\n</span>", "p03178": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the number of integers between <var>1</var> and <var>K</var> (inclusive) satisfying the following condition, modulo <var>10^9 + 7</var>:</p>\n<ul>\n<li>The sum of the digits in base ten is a multiple of <var>D</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq K &lt; 10^{10000}</var></li>\n<li><var>1 \\leq D \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n<var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of integers satisfying the condition, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>30\n4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>Those six integers are: <var>4, 8, 13, 17, 22</var> and <var>26</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000000009\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p>Be sure to print the number modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>98765432109876543210\n58\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>635270834\n</pre></section>\n</div>\n</span>", "p03179": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>N</var> be a positive integer.\nYou are given a string <var>s</var> of length <var>N - 1</var>, consisting of <code>&lt;</code> and <code>&gt;</code>.</p>\n<p>Find the number of permutations <var>(p_1, p_2, \\ldots, p_N)</var> of <var>(1, 2, \\ldots, N)</var> that satisfy the following condition, modulo <var>10^9 + 7</var>:</p>\n<ul>\n<li>For each <var>i</var> (<var>1 \\leq i \\leq N - 1</var>), <var>p_i &lt; p_{i + 1}</var> if the <var>i</var>-th character in <var>s</var> is <code>&lt;</code>, and <var>p_i &gt; p_{i + 1}</var> if the <var>i</var>-th character in <var>s</var> is <code>&gt;</code>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var> is an integer.</li>\n<li><var>2 \\leq N \\leq 3000</var></li>\n<li><var>s</var> is a string of length <var>N - 1</var>.</li>\n<li><var>s</var> consists of <code>&lt;</code> and <code>&gt;</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of permutations that satisfy the condition, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n&lt;&gt;&lt;\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>There are five permutations that satisfy the condition, as follows:</p>\n<ul>\n<li><var>(1, 3, 2, 4)</var></li>\n<li><var>(1, 4, 2, 3)</var></li>\n<li><var>(2, 3, 1, 4)</var></li>\n<li><var>(2, 4, 1, 3)</var></li>\n<li><var>(3, 4, 1, 2)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n&lt;&lt;&lt;&lt;\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>There is one permutation that satisfies the condition, as follows:</p>\n<ul>\n<li><var>(1, 2, 3, 4, 5)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20\n&gt;&gt;&gt;&gt;&lt;&gt;&gt;&gt;&lt;&gt;&gt;&lt;&gt;&gt;&gt;&lt;&lt;&gt;&gt;\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>217136290\n</pre>\n<p>Be sure to print the number modulo <var>10^9 + 7</var>.</p></section>\n</div>\n</span>", "p03180": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> rabbits, numbered <var>1, 2, \\ldots, N</var>.</p>\n<p>For each <var>i, j</var> (<var>1 \\leq i, j \\leq N</var>), the compatibility of Rabbit <var>i</var> and <var>j</var> is described by an integer <var>a_{i, j}</var>.\nHere, <var>a_{i, i} = 0</var> for each <var>i</var> (<var>1 \\leq i \\leq N</var>), and <var>a_{i, j} = a_{j, i}</var> for each <var>i</var> and <var>j</var> (<var>1 \\leq i, j \\leq N</var>).</p>\n<p>Taro is dividing the <var>N</var> rabbits into some number of groups.\nHere, each rabbit must belong to exactly one group.\nAfter grouping, for each <var>i</var> and <var>j</var> (<var>1 \\leq i &lt; j \\leq N</var>), Taro earns <var>a_{i, j}</var> points if Rabbit <var>i</var> and <var>j</var> belong to the same group.</p>\n<p>Find Taro's maximum possible total score.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 16</var></li>\n<li><var>|a_{i, j}| \\leq 10^9</var></li>\n<li><var>a_{i, i} = 0</var></li>\n<li><var>a_{i, j} = a_{j, i}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_{1, 1}</var> <var>\\ldots</var> <var>a_{1, N}</var>\n<var>:</var>\n<var>a_{N, 1}</var> <var>\\ldots</var> <var>a_{N, N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print Taro's maximum possible total score.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n0 10 20\n10 0 -100\n20 -100 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>20\n</pre>\n<p>The rabbits should be divided as <var>\\{1, 3\\}, \\{2\\}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n0 -10\n-10 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>The rabbits should be divided as <var>\\{1\\}, \\{2\\}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n0 1000000000 1000000000 1000000000\n1000000000 0 1000000000 1000000000\n1000000000 1000000000 0 -1\n1000000000 1000000000 -1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4999999999\n</pre>\n<p>The rabbits should be divided as <var>\\{1, 2, 3, 4\\}</var>.\nNote that the answer may not fit into a 32-bit integer type.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>16\n0 5 -4 -5 -8 -4 7 2 -4 0 7 0 2 -3 7 7\n5 0 8 -9 3 5 2 -7 2 -7 0 -1 -4 1 -1 9\n-4 8 0 -9 8 9 3 1 4 9 6 6 -6 1 8 9\n-5 -9 -9 0 -7 6 4 -1 9 -3 -5 0 1 2 -4 1\n-8 3 8 -7 0 -5 -9 9 1 -9 -6 -3 -8 3 4 3\n-4 5 9 6 -5 0 -6 1 -2 2 0 -5 -2 3 1 2\n7 2 3 4 -9 -6 0 -2 -2 -9 -3 9 -2 9 2 -5\n2 -7 1 -1 9 1 -2 0 -6 0 -6 6 4 -1 -7 8\n-4 2 4 9 1 -2 -2 -6 0 8 -6 -2 -4 8 7 7\n0 -7 9 -3 -9 2 -9 0 8 0 0 1 -3 3 -6 -6\n7 0 6 -5 -6 0 -3 -6 -6 0 0 5 7 -1 -5 3\n0 -1 6 0 -3 -5 9 6 -2 1 5 0 -2 7 -8 0\n2 -4 -6 1 -8 -2 -2 4 -4 -3 7 -2 0 -9 7 1\n-3 1 1 2 3 3 9 -1 8 3 -1 7 -9 0 -6 -8\n7 -1 8 -4 4 1 2 -7 7 -6 -5 -8 7 -6 0 -9\n7 9 9 1 3 2 -5 8 7 -6 3 0 1 -8 -9 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>132\n</pre></section>\n</div>\n</span>", "p03187": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi Lake has a perimeter of <var>L</var>. On the circumference of the lake, there is a residence of the lake's owner, Takahashi.\nEach point on the circumference of the lake has a coordinate between <var>0</var> and <var>L</var> (including <var>0</var> but not <var>L</var>), which is the distance from the Takahashi's residence, measured counter-clockwise.</p>\n<p>There are <var>N</var> trees around the lake; the coordinate of the <var>i</var>-th tree is <var>X_i</var>. There is no tree at coordinate <var>0</var>, the location of Takahashi's residence.</p>\n<p>Starting at his residence, Takahashi will repeat the following action:</p>\n<ul>\n<li>If all trees are burnt, terminate the process.</li>\n<li>Specify a direction: clockwise or counter-clockwise.</li>\n<li>Walk around the lake in the specified direction, until the coordinate of a tree that is not yet burnt is reached for the first time.</li>\n<li>When the coordinate with the tree is reached, burn that tree, stay at the position and go back to the first step.</li>\n</ul>\n<p>Find the longest possible total distance Takahashi walks during the process.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><p>A partial score can be obtained in this problem:</p>\n<ul>\n<li><var>300</var> points will be awarded for passing the input satisfying <var>N \\leq 2000</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq L \\leq 10^9</var></li>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq X_1 &lt; ... &lt; X_N \\leq L-1</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>L</var> <var>N</var>\n<var>X_1</var>\n<var>:</var>\n<var>X_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the longest possible total distance Takahashi walks during the process.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 3\n2\n7\n9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>15\n</pre>\n<p>Takahashi walks the distance of <var>15</var> if the process goes as follows:</p>\n<ul>\n<li>Walk a distance of <var>2</var> counter-clockwise, burn the tree at the coordinate <var>2</var> and stay there.</li>\n<li>Walk a distance of <var>5</var> counter-clockwise, burn the tree at the coordinate <var>7</var> and stay there.</li>\n<li>Walk a distance of <var>8</var> clockwise, burn the tree at the coordinate <var>9</var> and stay there.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 6\n1\n2\n3\n6\n7\n9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>27\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159265 7\n21662711\n77271666\n89022761\n156626166\n160332356\n166902656\n298992265\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1204124749\n</pre></section>\n</div>\n</span>", "p03186": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has <var>A</var> untasty cookies containing antidotes, <var>B</var> tasty cookies containing antidotes and <var>C</var> tasty cookies containing poison.</p>\n<p>Eating a cookie containing poison results in a stomachache, and eating a cookie containing poison while having a stomachache results in a death.\nAs he wants to live, he cannot eat one in such a situation.\nEating a cookie containing antidotes while having a stomachache cures it, and there is no other way to cure stomachaches.</p>\n<p>Find the maximum number of tasty cookies that Takahashi can eat.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq A,B,C \\leq 10^9</var></li>\n<li><var>A,B</var> and <var>C</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of tasty cookies that Takahashi can eat.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>We can eat all tasty cookies, in the following order:</p>\n<ul>\n<li>A tasty cookie containing poison</li>\n<li>An untasty cookie containing antidotes</li>\n<li>A tasty cookie containing poison</li>\n<li>A tasty cookie containing antidotes</li>\n<li>A tasty cookie containing poison</li>\n<li>An untasty cookie containing antidotes</li>\n<li>A tasty cookie containing poison</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 2 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 8 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>9\n</pre></section>\n</div>\n</span>", "p03188": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For an <var>n \\times n</var> grid, let <var>(r, c)</var> denote the square at the <var>(r+1)</var>-th row from the top and the <var>(c+1)</var>-th column from the left.\nA <em>good</em> coloring of this grid using <var>K</var> colors is a coloring that satisfies the following:</p>\n<ul>\n<li>Each square is painted in one of the <var>K</var> colors.</li>\n<li>Each of the <var>K</var> colors is used for some squares.</li>\n<li>Let us number the <var>K</var> colors <var>1, 2, ..., K</var>. For any colors <var>i</var> and <var>j</var> (<var>1 \\leq i \\leq K, 1 \\leq j \\leq K</var>), every square in Color <var>i</var> has the same number of adjacent squares in Color <var>j</var>. Here, the squares adjacent to square <var>(r, c)</var> are <var>((r-1)\\; mod\\; n, c), ((r+1)\\; mod\\; n, c), (r, (c-1)\\; mod\\; n)</var> and <var>(r, (c+1)\\; mod\\; n)</var> (if the same square appears multiple times among these four, the square is counted that number of times).</li>\n</ul>\n<p>Given <var>K</var>, choose <strong><var>n</var> between <var>1</var> and <var>500</var></strong> (inclusive) freely and construct a good coloring of an <var>n \\times n</var> grid using <var>K</var> colors.\nIt can be proved that this is always possible under the constraints of this problem,</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 1000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Output should be in the following format:</p>\n<pre><var>n</var>\n<var>c_{0,0}</var> <var>c_{0,1}</var> <var>...</var> <var>c_{0,n-1}</var>\n<var>c_{1,0}</var> <var>c_{1,1}</var> <var>...</var> <var>c_{1,n-1}</var>\n<var>:</var>\n<var>c_{n-1,0}</var> <var>c_{n-1,1}</var> <var>...</var> <var>c_{n-1,n-1}</var>\n</pre>\n<p><var>n</var> should represent the size of the grid, and <var>1 \\leq n \\leq 500</var> must hold.\n<var>c_{r,c}</var> should be an integer such that <var>1 \\leq c_{r,c} \\leq K</var> and represent the color for the square <var>(r, c)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n1 1 1\n1 1 1\n2 2 2\n</pre>\n<ul>\n<li>Every square in Color <var>1</var> has three adjacent squares in Color <var>1</var> and one adjacent square in Color <var>2</var>.</li>\n<li>Every square in Color <var>2</var> has two adjacent squares in Color <var>1</var> and two adjacent squares in Color <var>2</var>.</li>\n</ul>\n<p>Output such as the following will be judged incorrect:</p>\n<pre>2\n1 2\n2 2\n</pre>\n<pre>3\n1 1 1\n1 1 1\n1 1 1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n1 2 3\n4 5 6\n7 8 9\n</pre></section>\n</div>\n</span>", "p03183": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> blocks, numbered <var>1, 2, \\ldots, N</var>.\nFor each <var>i</var> (<var>1 \\leq i \\leq N</var>), Block <var>i</var> has a weight of <var>w_i</var>, a solidness of <var>s_i</var> and a value of <var>v_i</var>.</p>\n<p>Taro has decided to build a tower by choosing some of the <var>N</var> blocks and stacking them vertically in some order.\nHere, the tower must satisfy the following condition:</p>\n<ul>\n<li>For each Block <var>i</var> contained in the tower, the sum of the weights of the blocks stacked above it is not greater than <var>s_i</var>.</li>\n</ul>\n<p>Find the maximum possible sum of the values of the blocks contained in the tower.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^3</var></li>\n<li><var>1 \\leq w_i, s_i \\leq 10^4</var></li>\n<li><var>1 \\leq v_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>w_1</var> <var>s_1</var> <var>v_1</var>\n<var>w_2</var> <var>s_2</var> <var>v_2</var>\n<var>:</var>\n<var>w_N</var> <var>s_N</var> <var>v_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the values of the blocks contained in the tower.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 2 20\n2 1 30\n3 1 40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>50\n</pre>\n<p>If Blocks <var>2, 1</var> are stacked in this order from top to bottom, this tower will satisfy the condition, with the total value of <var>30 + 20 = 50</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2 10\n3 1 10\n2 4 10\n1 6 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>40\n</pre>\n<p>Blocks <var>1, 2, 3, 4</var> should be stacked in this order from top to bottom.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n1 10000 1000000000\n1 10000 1000000000\n1 10000 1000000000\n1 10000 1000000000\n1 10000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5000000000\n</pre>\n<p>The answer may not fit into a 32-bit integer type.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8\n9 5 7\n6 2 7\n5 7 3\n7 8 8\n1 9 6\n3 3 3\n4 1 7\n4 5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>22\n</pre>\n<p>We should, for example, stack Blocks <var>5, 6, 8, 4</var> in this order from top to bottom.</p></section>\n</div>\n</span>", "p03189": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer sequence of length <var>N</var>: <var>A_1,A_2,...,A_N</var>. Let us perform <var>Q</var> operations in order.\nThe <var>i</var>-th operation is described by two integers <var>X_i</var> and <var>Y_i</var>. In this operation, we will choose one of the following two actions and perform it:</p>\n<ul>\n<li>Swap the values of <var>A_{X_i}</var> and <var>A_{Y_i}</var></li>\n<li>Do nothing</li>\n</ul>\n<p>There are <var>2^Q</var> ways to perform these operations. Find the sum of the inversion numbers of the final sequences for all of these ways to perform operations, modulo <var>10^9+7</var>.</p>\n<p>Here, the inversion number of a sequence <var>P_1,P_2,...,P_M</var> is the number of pairs of integers <var>(i,j)</var> such that <var>1\\leq i &lt; j\\leq M</var> and <var>P_i &gt; P_j</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 3000</var></li>\n<li><var>0 \\leq Q \\leq 3000</var></li>\n<li><var>0 \\leq A_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li><var>1 \\leq X_i,Y_i \\leq N(1\\leq i\\leq Q)</var></li>\n<li><var>X_i\\neq Y_i(1\\leq i\\leq Q)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>A_1</var>\n<var>:</var>\n<var>A_N</var>\n<var>X_1</var> <var>Y_1</var>\n<var>:</var>\n<var>X_Q</var> <var>Y_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the inversion numbers of the final sequences, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n1\n2\n3\n1 2\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>There are four ways to perform operations, as follows:</p>\n<ul>\n<li>Do nothing, both in the first and second operations. The final sequence would be <var>1,2,3</var>, with the inversion number of <var>0</var>.</li>\n<li>Do nothing in the first operation, then perform the swap in the second. The final sequence would be <var>3,2,1</var>, with the inversion number of <var>3</var>.</li>\n<li>Perform the swap in the first operation, then do nothing in the second. The final sequence would be <var>2,1,3</var>, with the inversion number of <var>1</var>.</li>\n<li>Perform the swap, both in the first and second operations. The final sequence would be <var>3,1,2</var>, with the inversion number of <var>2</var>.</li>\n</ul>\n<p>The sum of these inversion numbers, <var>0+3+1+2=6</var>, should be printed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 3\n3\n2\n3\n1\n4\n1 5\n2 3\n4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>36\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9 5\n3\n1\n4\n1\n5\n9\n2\n6\n5\n3 5\n8 9\n7 9\n3 2\n3 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>425\n</pre></section>\n</div>\n</span>", "p03191": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a sequence of length <var>2N</var>: <var>A_1, A_2, ..., A_{2N}</var>.\nEach <var>A_i</var> is either <var>-1</var> or an integer between <var>1</var> and <var>2N</var> (inclusive). Any integer other than <var>-1</var> appears at most once in <var>{A_i}</var>.</p>\n<p>For each <var>i</var> such that <var>A_i = -1</var>, Snuke replaces <var>A_i</var> with an integer between <var>1</var> and <var>2N</var> (inclusive), so that <var>{A_i}</var> will be a permutation of <var>1, 2, ..., 2N</var>.\nThen, he finds a sequence of length <var>N</var>, <var>B_1, B_2, ..., B_N</var>, as <var>B_i = min(A_{2i-1}, A_{2i})</var>.</p>\n<p>Find the number of different sequences that <var>B_1, B_2, ..., B_N</var> can be, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 300</var></li>\n<li><var>A_i = -1</var> or <var>1 \\leq A_i \\leq 2N</var>.</li>\n<li>If <var>A_i \\neq -1, A_j \\neq -1</var>, then <var>A_i \\neq A_j</var>. (<var>i \\neq j</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_{2N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of different sequences that <var>B_1, B_2, ..., B_N</var> can be, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 -1 -1 3 6 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>There are six ways to make <var>{A_i}</var> a permutation of <var>1, 2, ..., 2N</var>; for each of them, <var>{B_i}</var> would be as follows:</p>\n<ul>\n<li><var>(A_1, A_2, A_3, A_4, A_5, A_6) = (1, 2, 4, 3, 6, 5)</var>: <var>(B_1, B_2, B_3) = (1, 3, 5)</var></li>\n<li><var>(A_1, A_2, A_3, A_4, A_5, A_6) = (1, 2, 5, 3, 6, 4)</var>: <var>(B_1, B_2, B_3) = (1, 3, 4)</var></li>\n<li><var>(A_1, A_2, A_3, A_4, A_5, A_6) = (1, 4, 2, 3, 6, 5)</var>: <var>(B_1, B_2, B_3) = (1, 2, 5)</var></li>\n<li><var>(A_1, A_2, A_3, A_4, A_5, A_6) = (1, 4, 5, 3, 6, 2)</var>: <var>(B_1, B_2, B_3) = (1, 3, 2)</var></li>\n<li><var>(A_1, A_2, A_3, A_4, A_5, A_6) = (1, 5, 2, 3, 6, 4)</var>: <var>(B_1, B_2, B_3) = (1, 2, 4)</var></li>\n<li><var>(A_1, A_2, A_3, A_4, A_5, A_6) = (1, 5, 4, 3, 6, 2)</var>: <var>(B_1, B_2, B_3) = (1, 3, 2)</var></li>\n</ul>\n<p>Thus, there are five different sequences that <var>B_1, B_2, B_3</var> can be.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n7 1 8 3 5 2 6 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n7 -1 -1 -1 -1 -1 -1 6 14 12 13 -1 15 -1 -1 -1 -1 20 -1 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>9540576\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>20\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 6 -1 -1 -1 -1 -1 7 -1 -1 -1 -1 -1 -1 -1 -1 -1 34 -1 -1 -1 -1 31 -1 -1 -1 -1 -1 -1 -1 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>374984201\n</pre></section>\n</div>\n</span>", "p03192": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var> that has exactly four digits in base ten.\nHow many times does <code>2</code> occur in the base-ten representation of <var>N</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1000 \\leq N \\leq 9999</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1222\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><code>2</code> occurs three times in <code>1222</code>. By the way, this contest is held on December <var>22</var> (JST).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3456\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9592\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre></section>\n</div>\n</span>", "p03195": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an apple tree that bears apples of <var>N</var> colors. The <var>N</var> colors of these apples are numbered <var>1</var> to <var>N</var>, and there are <var>a_i</var> apples of Color <var>i</var>.</p>\n<p>You and Lunlun the dachshund alternately perform the following operation (starting from you):</p>\n<ul>\n<li>Choose one or more apples from the tree and eat them. Here, the apples chosen at the same time must all have different colors.</li>\n</ul>\n<p>The one who eats the last apple from the tree will be declared winner. If both you and Lunlun play optimally, which will win?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq a_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var>\n<var>a_2</var>\n<var>:</var>\n<var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If you will win, print <code>first</code>; if Lunlun will win, print <code>second</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>first\n</pre>\n<p>Let Color <var>1</var> be red, and Color <var>2</var> be blue. In this case, the tree bears one red apple and two blue apples.</p>\n<p>You should eat the red apple in your first turn. Lunlun is then forced to eat one of the blue apples, and you can win by eating the other in your next turn.</p>\n<p>Note that you are also allowed to eat two apples in your first turn, one red and one blue (not a winning move, though).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n100000\n30000\n20000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>second\n</pre></section>\n</div>\n</span>", "p03193": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> rectangular plate materials made of special metal called AtCoder Alloy.\nThe dimensions of the <var>i</var>-th material are <var>A_i \\times B_i</var> (<var>A_i</var> vertically and <var>B_i</var> horizontally).</p>\n<p>Takahashi wants a rectangular plate made of AtCoder Alloy whose dimensions are exactly <var>H \\times W</var>.\nHe is trying to obtain such a plate by choosing one of the <var>N</var> materials and cutting it if necessary.\nWhen cutting a material, the cuts must be parallel to one of the sides of the material.\nAlso, the materials have fixed directions and cannot be rotated.\nFor example, a <var>5 \\times 3</var> material cannot be used as a <var>3 \\times 5</var> plate.</p>\n<p>Out of the <var>N</var> materials, how many can produce an <var>H \\times W</var> plate if properly cut?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>1 \\leq H \\leq 10^9</var></li>\n<li><var>1 \\leq W \\leq 10^9</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>1 \\leq B_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>H</var> <var>W</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 5 2\n10 3\n5 2\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Takahashi wants a <var>5 \\times 2</var> plate.</p>\n<ul>\n<li>The dimensions of the first material are <var>10 \\times 3</var>. We can obtain a <var>5 \\times 2</var> plate by properly cutting it.</li>\n<li>The dimensions of the second material are <var>5 \\times 2</var>. We can obtain a <var>5 \\times 2</var> plate without cutting it.</li>\n<li>The dimensions of the third material are <var>2 \\times 5</var>. We cannot obtain a <var>5 \\times 2</var> plate, whatever cuts are made. Note that the material cannot be rotated and used as a <var>5 \\times 2</var> plate.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 587586158 185430194\n894597290 708587790\n680395892 306946994\n590262034 785368612\n922328576 106880540\n847058850 326169610\n936315062 193149191\n702035777 223363392\n11672949 146832978\n779291680 334178158\n615808191 701464268\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03196": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> integers <var>a_1, a_2, ..., a_N</var> not less than <var>1</var>.\nThe values of <var>a_1, a_2, ..., a_N</var> are not known, but it is known that <var>a_1 \\times a_2 \\times ... \\times a_N = P</var>.</p>\n<p>Find the maximum possible greatest common divisor of <var>a_1, a_2, ..., a_N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^{12}</var></li>\n<li><var>1 \\leq P \\leq 10^{12}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>P</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 24\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The greatest common divisor would be <var>2</var> when, for example, <var>a_1=2, a_2=6</var> and <var>a_3=2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>As <var>a_i</var> are positive integers, the only possible case is <var>a_1 = a_2 = a_3 = a_4 = a_5 = 1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>111\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4 972439611840\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>206\n</pre></section>\n</div>\n</span>", "p03194": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> integers <var>a_1, a_2, ..., a_N</var> not less than <var>1</var>.\nThe values of <var>a_1, a_2, ..., a_N</var> are not known, but it is known that <var>a_1 \\times a_2 \\times ... \\times a_N = P</var>.</p>\n<p>Find the maximum possible greatest common divisor of <var>a_1, a_2, ..., a_N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^{12}</var></li>\n<li><var>1 \\leq P \\leq 10^{12}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>P</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 24\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The greatest common divisor would be <var>2</var> when, for example, <var>a_1=2, a_2=6</var> and <var>a_3=2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>As <var>a_i</var> are positive integers, the only possible case is <var>a_1 = a_2 = a_3 = a_4 = a_5 = 1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>111\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4 972439611840\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>206\n</pre></section>\n</div>\n</span>", "p03198": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> positive integers <var>A_1, A_2, ..., A_N</var>.\nTakahashi can perform the following operation on these integers any number of times:</p>\n<ul>\n<li>Choose <var>1 \\leq i \\leq N</var> and multiply the value of <var>A_i</var> by <var>-2</var>.</li>\n</ul>\n<p>Notice that he multiplies it by <strong>minus</strong> two.</p>\n<p>He would like to make <var>A_1 \\leq A_2 \\leq ... \\leq A_N</var> holds.\nFind the minimum number of operations required. If it is impossible, print <code>-1</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 200000</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n3 1 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>One possible solution is:</p>\n<ul>\n<li>Choose <var>i=4</var> and multiply the value of <var>A_4</var> by <var>-2</var>. <var>A_1, A_2, A_3, A_4</var> are now <var>3, 1, 4, -2</var>.</li>\n<li>Choose <var>i=1</var> and multiply the value of <var>A_1</var> by <var>-2</var>. <var>A_1, A_2, A_3, A_4</var> are now <var>-6, 1, 4, -2</var>.</li>\n<li>Choose <var>i=4</var> and multiply the value of <var>A_4</var> by <var>-2</var>. <var>A_1, A_2, A_3, A_4</var> are now <var>-6, 1, 4, 4</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p><var>A_1 \\leq A_2 \\leq ... \\leq A_N</var> holds before any operation is performed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\n657312726 129662684 181537270 324043958 468214806 916875077 825989291 319670097\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7\n</pre></section>\n</div>\n</span>", "p03200": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> Reversi pieces arranged in a row. (A <em>Reversi piece</em> is a disc with a black side and a white side.)\nThe state of each piece is represented by a string <var>S</var> of length <var>N</var>.\nIf <var>S_i=</var><code>B</code>, the <var>i</var>-th piece from the left is showing black;\nIf <var>S_i=</var><code>W</code>, the <var>i</var>-th piece from the left is showing white.</p>\n<p>Consider performing the following operation:</p>\n<ul>\n<li>Choose <var>i</var> (<var>1 \\leq i &lt; N</var>) such that the <var>i</var>-th piece from the left is showing black and the <var>(i+1)</var>-th piece from the left is showing white, then flip both of those pieces. That is, the <var>i</var>-th piece from the left is now showing white and the <var>(i+1)</var>-th piece from the left is now showing black.</li>\n</ul>\n<p>Find the maximum possible number of times this operation can be performed.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 2\\times 10^5</var></li>\n<li><var>S_i=</var><code>B</code> or <code>W</code></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of times the operation can be performed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>BBW\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The operation can be performed twice, as follows:</p>\n<ul>\n<li>Flip the second and third pieces from the left.</li>\n<li>Flip the first and second pieces from the left.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>BWBWBW\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre></section>\n</div>\n</span>", "p03197": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an apple tree that bears apples of <var>N</var> colors. The <var>N</var> colors of these apples are numbered <var>1</var> to <var>N</var>, and there are <var>a_i</var> apples of Color <var>i</var>.</p>\n<p>You and Lunlun the dachshund alternately perform the following operation (starting from you):</p>\n<ul>\n<li>Choose one or more apples from the tree and eat them. Here, the apples chosen at the same time must all have different colors.</li>\n</ul>\n<p>The one who eats the last apple from the tree will be declared winner. If both you and Lunlun play optimally, which will win?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq a_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var>\n<var>a_2</var>\n<var>:</var>\n<var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If you will win, print <code>first</code>; if Lunlun will win, print <code>second</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>first\n</pre>\n<p>Let Color <var>1</var> be red, and Color <var>2</var> be blue. In this case, the tree bears one red apple and two blue apples.</p>\n<p>You should eat the red apple in your first turn. Lunlun is then forced to eat one of the blue apples, and you can win by eating the other in your next turn.</p>\n<p>Note that you are also allowed to eat two apples in your first turn, one red and one blue (not a winning move, though).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n100000\n30000\n20000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>second\n</pre></section>\n</div>\n</span>", "p03199": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has an <var>N \\times N</var> grid. The square at the <var>i</var>-th row and the <var>j</var>-th column of the grid is denoted by <var>(i,j)</var>.\nParticularly, the top-left square of the grid is <var>(1,1)</var>, and the bottom-right square is <var>(N,N)</var>.</p>\n<p>An integer, <var>0</var> or <var>1</var>, is written on <var>M</var> of the squares in the Takahashi's grid.\nThree integers <var>a_i,b_i</var> and <var>c_i</var> describe the <var>i</var>-th of those squares with integers written on them: the integer <var>c_i</var> is written on the square <var>(a_i,b_i)</var>.</p>\n<p>Takahashi decides to write an integer, <var>0</var> or <var>1</var>, on each of the remaining squares so that the condition below is satisfied.\nFind the number of such ways to write integers, modulo <var>998244353</var>.</p>\n<ul>\n<li>For all <var>1\\leq i &lt; j\\leq N</var>, there are even number of <var>1</var>s in the square region whose top-left square is <var>(i,i)</var> and whose bottom-right square is <var>(j,j)</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq M \\leq min(5 \\times 10^4,N^2)</var></li>\n<li><var>1 \\leq a_i,b_i \\leq N(1\\leq i\\leq M)</var></li>\n<li><var>0 \\leq c_i \\leq 1(1\\leq i\\leq M)</var></li>\n<li>If <var>i \\neq j</var>, then <var>(a_i,b_i) \\neq (a_j,b_j)</var>.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>b_1</var> <var>c_1</var>\n<var>:</var>\n<var>a_M</var> <var>b_M</var> <var>c_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible ways to write integers, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 1 1\n3 1 0\n2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>For example, the following ways to write integers satisfy the condition:</p>\n<pre>101   111\n011   111\n000   011\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 5\n1 3 1\n2 4 0\n2 3 1\n4 2 1\n4 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>32\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 5\n1 3 1\n3 3 0\n3 1 0\n2 3 1\n3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4 8\n1 1 1\n1 2 0\n3 2 1\n1 4 0\n2 1 1\n1 3 0\n3 4 1\n4 4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>100000 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>342016343\n</pre></section>\n</div>\n</span>", "p03202": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> strings arranged in a row.\nIt is known that, for any two adjacent strings, the string to the left is lexicographically smaller than the string to the right.\nThat is, <var>S_1&lt;S_2&lt;...&lt;S_N</var> holds lexicographically, where <var>S_i</var> is the <var>i</var>-th string from the left.</p>\n<p>At least how many different characters are contained in <var>S_1,S_2,...,S_N</var>, if the length of <var>S_i</var> is known to be <var>A_i</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>A_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Note</h3><p>The strings do not necessarily consist of English alphabet; there can be arbitrarily many different characters (and the lexicographic order is defined for those characters).</p>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible number of different characters contained in the strings.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The number of different characters contained in <var>S_1,S_2,...,S_N</var> would be <var>3</var> when, for example, <var>S_1=</var><code>abc</code>, <var>S_2=</var><code>bb</code> and <var>S_3=</var><code>c</code>.</p>\n<p>However, if we choose the strings properly, the number of different characters can be <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n2 3 2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre></section>\n</div>\n</span>", "p03201": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has <var>N</var> balls with positive integers written on them. The integer written on the <var>i</var>-th ball is <var>A_i</var>.\nHe would like to form some number of pairs such that the sum of the integers written on each pair of balls is a power of <var>2</var>.\nNote that a ball cannot belong to multiple pairs.\nFind the maximum possible number of pairs that can be formed.</p>\n<p>Here, a positive integer is said to be a power of <var>2</var> when it can be written as <var>2^t</var> using some non-negative integer <var>t</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>A_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of pairs such that the sum of the integers written on each pair of balls is a power of <var>2</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>We can form one pair whose sum of the written numbers is <var>4</var> by pairing the first and third balls.\nNote that we cannot pair the second ball with itself.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n3 11 14 5 13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre></section>\n</div>\n</span>", "p03204": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi's office has <var>N</var> rooms. Each room has an ID from <var>1</var> to <var>N</var>.\nThere are also <var>N-1</var> corridors, and the <var>i</var>-th corridor connects Room <var>a_i</var> and Room <var>b_i</var>.\nIt is known that we can travel between any two rooms using only these corridors.</p>\n<p>Takahashi has got lost in one of the rooms. Let this room be <var>r</var>.\nHe decides to get back to his room, Room <var>1</var>, by repeatedly traveling in the following manner:</p>\n<ul>\n<li>Travel to the room with the smallest ID among the rooms that are adjacent to the rooms already visited, but not visited yet.</li>\n</ul>\n<p>Let <var>c_r</var> be the number of travels required to get back to Room <var>1</var>.\nFind all of <var>c_2,c_3,...,c_N</var>.\nNote that, no matter how many corridors he passes through in a travel, it still counts as one travel.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq a_i,b_i \\leq N</var></li>\n<li><var>a_i \\neq b_i</var></li>\n<li>The graph given as input is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>c_r</var> for each <var>r</var>, in the following format:</p>\n<pre><var>c_2</var> <var>c_3</var> <var>...</var> <var>c_N</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 5\n5 6\n6 2\n6 3\n6 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5 5 5 1 5\n</pre>\n<p>For example, if Takahashi was lost in Room <var>2</var>, he will travel as follows:</p>\n<ul>\n<li>Travel to Room <var>6</var>.</li>\n<li>Travel to Room <var>3</var>.</li>\n<li>Travel to Room <var>4</var>.</li>\n<li>Travel to Room <var>5</var>.</li>\n<li>Travel to Room <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n1 2\n2 3\n3 4\n4 5\n5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 2 3 4 5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n1 5\n5 6\n6 10\n6 4\n10 3\n10 8\n8 2\n4 7\n4 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7 5 3 1 3 4 7 4 5\n</pre></section>\n</div>\n</span>", "p03203": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi and Aoki will play a game using a grid with <var>H</var> rows and <var>W</var> columns of square cells.\nThere are <var>N</var> obstacles on this grid; the <var>i</var>-th obstacle is at <var>(X_i,Y_i)</var>.\nHere, we represent the cell at the <var>i</var>-th row and <var>j</var>-th column <var>(1 \\leq i \\leq H, 1 \\leq j \\leq W)</var> by <var>(i,j)</var>.\nThere is no obstacle at <var>(1,1)</var>, and there is a piece placed there at <var>(1,1)</var>.</p>\n<p>Starting from Takahashi, he and Aoki alternately perform one of the following actions:</p>\n<ul>\n<li>Move the piece to an adjacent cell.\n    Here, let the position of the piece be <var>(x,y)</var>. Then Takahashi can only move the piece to <var>(x+1,y)</var>, and Aoki can only move the piece to <var>(x,y+1)</var>.\n    If the destination cell does not exist or it is occupied by an obstacle, this action cannot be taken.</li>\n<li>Do not move the piece, and end his turn without affecting the grid.</li>\n</ul>\n<p>The game ends when the piece does not move twice in a row.</p>\n<p>Takahashi would like to perform as many actions (including not moving the piece) as possible before the game ends, while Aoki would like to perform as few actions as possible before the game ends.\nHow many actions will Takahashi end up performing?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 2\\times 10^5</var></li>\n<li><var>0 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq X_i \\leq H</var></li>\n<li><var>1 \\leq Y_i \\leq W</var></li>\n<li>If <var>i \\neq j</var>, <var>(X_i,Y_i) \\neq (X_j,Y_j)</var></li>\n<li><var>(X_i,Y_i) \\neq (1,1)</var></li>\n<li><var>X_i</var> and <var>Y_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var> <var>N</var>\n<var>X_1</var> <var>Y_1</var>\n<var>:</var>\n<var>X_N</var> <var>Y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of actions Takahashi will end up performing.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3 1\n3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, the game proceeds as follows:</p>\n<ul>\n<li>Takahashi moves the piece to (2,1).</li>\n<li>Aoki does not move the piece.</li>\n<li>Takahashi moves the piece to (3,1).</li>\n<li>Aoki does not move the piece.</li>\n<li>Takahashi does not move the piece.</li>\n</ul>\n<p>Takahashi performs three actions in this case, but if both players play optimally, Takahashi will perform only two actions before the game ends.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 10 14\n4 3\n2 2\n7 3\n9 10\n7 7\n8 1\n10 10\n5 4\n3 4\n2 8\n6 4\n4 4\n5 8\n9 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100000 100000 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100000\n</pre></section>\n</div>\n</span>", "p03206": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In some other world, today is December <var>D</var>-th.</p>\n<p>Write a program that prints <code>Christmas</code> if <var>D = 25</var>, <code>Christmas Eve</code> if <var>D = 24</var>, <code>Christmas Eve Eve</code> if <var>D = 23</var> and <code>Christmas Eve Eve Eve</code> if <var>D = 22</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>22 \\leq D \\leq 25</var></li>\n<li><var>D</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the specified string (case-sensitive).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>25\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Christmas\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>22\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Christmas Eve Eve Eve\n</pre>\n<p>Be sure to print spaces between the words.</p></section>\n</div>\n</span>", "p03208": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In some other world, today is Christmas Eve.</p>\n<p>There are <var>N</var> trees planted in Mr. Takaha's garden. The height of the <var>i</var>-th tree <var>(1 \\leq i \\leq N)</var> is <var>h_i</var> meters.</p>\n<p>He decides to choose <var>K</var> trees from these trees and decorate them with electric lights. To make the scenery more beautiful, the heights of the decorated trees should be as close to each other as possible.</p>\n<p>More specifically, let the height of the tallest decorated tree be <var>h_{max}</var> meters, and the height of the shortest decorated tree be <var>h_{min}</var> meters. The smaller the value <var>h_{max} - h_{min}</var> is, the better. What is the minimum possible value of <var>h_{max} - h_{min}</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq K &lt; N \\leq 10^5</var></li>\n<li><var>1 \\leq h_i \\leq 10^9</var></li>\n<li><var>h_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>h_1</var>\n<var>h_2</var>\n<var>:</var>\n<var>h_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible value of <var>h_{max} - h_{min}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n10\n15\n11\n14\n12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If we decorate the first, third and fifth trees, <var>h_{max} = 12, h_{min} = 10</var> so <var>h_{max} - h_{min} = 2</var>. This is optimal.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 3\n5\n7\n5\n7\n7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>If we decorate the second, fourth and fifth trees, <var>h_{max} = 7, h_{min} = 7</var> so <var>h_{max} - h_{min} = 0</var>. This is optimal.</p>\n<p>There are not too many trees in these sample inputs, but note that there can be at most one hundred thousand trees (we just can't put a sample with a hundred thousand lines here).</p></section>\n</div>\n</span>", "p03205": "<span class=\"lang-en\">\n<p>Score : <var>2200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N-1</var> subsets of <var>\\{1,2,...,N\\}</var>. Let the <var>i</var>-th set be <var>E_i</var>.</p>\n<p>Let us choose two distinct elements <var>u_i</var> and <var>v_i</var> from each set <var>E_i</var>, and consider a graph <var>T</var> with <var>N</var> vertices and <var>N-1</var> edges, whose vertex set is <var>\\{1,2,..,N\\}</var> and whose edge set is <var>(u_1,v_1),(u_2,v_2),...,(u_{N-1},v_{N-1})</var>.\nDetermine if <var>T</var> can be a tree by properly deciding <var>u_i</var> and <var>v_i</var>.\nIf it can, additionally find one instance of <var>(u_1,v_1),(u_2,v_2),...,(u_{N-1},v_{N-1})</var> such that <var>T</var> is actually a tree.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>E_i</var> is a subset of <var>\\{1,2,..,N\\}</var>.</li>\n<li><var>|E_i| \\geq 2</var></li>\n<li>The sum of <var>|E_i|</var> is at most <var>2 \\times 10^5</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>c_1</var> <var>w_{1,1}</var> <var>w_{1,2}</var> <var>...</var> <var>w_{1,c_1}</var>\n<var>:</var>\n<var>c_{N-1}</var> <var>w_{N-1,1}</var> <var>w_{N-1,2}</var> <var>...</var> <var>w_{N-1,c_{N-1}}</var>\n</pre>\n<p>Here, <var>c_i</var> stands for the number of elements in <var>E_i</var>, and <var>w_{i,1},...,w_{i,c_i}</var> are the <var>c_i</var> elements in <var>c_i</var>.\nHere, <var>2 \\leq c_i \\leq N</var>, <var>1 \\leq w_{i,j} \\leq N</var>, and <var>w_{i,j} \\neq w_{i,k}</var> (<var>1 \\leq j &lt; k \\leq c_i</var>) hold.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>T</var> cannot be a tree, print <code>-1</code>; otherwise, print the choices of <var>(u_i,v_i)</var> that satisfy the condition, in the following format:</p>\n<pre><var>u_1</var> <var>v_1</var>\n<var>:</var>\n<var>u_{N-1}</var> <var>v_{N-1}</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n2 1 2\n3 1 2 3\n3 3 4 5\n2 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 2\n1 3\n3 4\n4 5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n3 1 2 3\n3 2 3 4\n3 1 3 4\n3 1 2 4\n3 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n5 1 2 3 4 5\n5 2 3 4 5 6\n5 3 4 5 6 7\n5 4 5 6 7 8\n5 5 6 7 8 9\n5 6 7 8 9 10\n5 7 8 9 10 1\n5 8 9 10 1 2\n5 9 10 1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n</pre></section>\n</div>\n</span>", "p03209": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In some other world, today is Christmas.</p>\n<p>Mr. Takaha decides to make a multi-dimensional burger in his party. A <em>level-<var>L</var> burger</em> (<var>L</var> is an integer greater than or equal to <var>0</var>) is the following thing:</p>\n<ul>\n<li>A level-<var>0</var> burger is a patty.</li>\n<li>A level-<var>L</var> burger <var>(L \\geq 1)</var> is a bun, a level-<var>(L-1)</var> burger, a patty, another level-<var>(L-1)</var> burger and another bun, stacked vertically in this order from the bottom.</li>\n</ul>\n<p>For example, a level-<var>1</var> burger and a level-<var>2</var> burger look like <code>BPPPB</code> and <code>BBPPPBPBPPPBB</code> (rotated <var>90</var> degrees), where <code>B</code> and <code>P</code> stands for a bun and a patty.</p>\n<p>The burger Mr. Takaha will make is a level-<var>N</var> burger. Lunlun the Dachshund will eat <var>X</var> layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq X \\leq (</var> the total number of layers in a level-<var>N</var> burger <var>)</var></li>\n<li><var>N</var> and <var>X</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of patties in the bottom-most <var>X</var> layers from the bottom of a level-<var>N</var> burger.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>There are <var>4</var> patties in the bottom-most <var>7</var> layers of a level-<var>2</var> burger (<code>BBPPPBPBPPPBB</code>).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>The bottom-most layer of a level-<var>1</var> burger is a bun.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>50 4321098765432109\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2160549382716056\n</pre>\n<p>A level-<var>50</var> burger is rather thick, to the extent that the number of its layers does not fit into a <var>32</var>-bit integer.</p></section>\n</div>\n</span>", "p03207": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In some other world, today is the day before Christmas Eve.</p>\n<p>Mr. Takaha is buying <var>N</var> items at a department store. The regular price of the <var>i</var>-th item <var>(1 \\leq i \\leq N)</var> is <var>p_i</var> yen (the currency of Japan).</p>\n<p>He has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining <var>N-1</var> items cost their regular prices. What is the total amount he will pay?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10</var></li>\n<li><var>100 \\leq p_i \\leq 10000</var></li>\n<li><var>p_i</var> is an even number.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>p_1</var>\n<var>p_2</var>\n<var>:</var>\n<var>p_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the total amount Mr. Takaha will pay.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n4980\n7980\n6980\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>15950\n</pre>\n<p>The <var>7980</var>-yen item gets the discount and the total is <var>4980 + 7980 / 2 + 6980 = 15950</var> yen.</p>\n<p>Note that outputs such as <code>15950.0</code> will be judged as Wrong Answer.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n4320\n4320\n4320\n4320\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>15120\n</pre>\n<p>Only one of the four items gets the discount and the total is <var>4320 / 2 + 4320 + 4320 + 4320 = 15120</var> yen.</p></section>\n</div>\n</span>", "p03211": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a string <var>S</var> consisting of digits <code>1</code>, <code>2</code>, <var>...</var>, <code>9</code>.\nLunlun, the Dachshund, will take out three consecutive digits from <var>S</var>, treat them as a single integer <var>X</var> and bring it to her master. (She cannot rearrange the digits.)</p>\n<p>The master's favorite number is <var>753</var>. The closer to this number, the better.\nWhat is the minimum possible (absolute) difference between <var>X</var> and <var>753</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is a string of length between <var>4</var> and <var>10</var> (inclusive).</li>\n<li>Each character in <var>S</var> is <code>1</code>, <code>2</code>, <var>...</var>, or <code>9</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible difference between <var>X</var> and <var>753</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1234567876\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>34\n</pre>\n<p>Taking out the seventh to ninth characters results in <var>X = 787</var>, and the difference between this and <var>753</var> is <var>787 - 753 = 34</var>. The difference cannot be made smaller, no matter where <var>X</var> is taken from.</p>\n<p>Note that the digits cannot be rearranged. For example, taking out <code>567</code> and rearranging it to <code>765</code> is not allowed.</p>\n<p>We cannot take out three digits that are not consecutive from <var>S</var>, either. For example, taking out the seventh digit <code>7</code>, the ninth digit <code>7</code> and the tenth digit <code>6</code> to obtain <code>776</code> is not allowed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>35753\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>If <code>753</code> itself can be taken out, the answer is <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1111111111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>642\n</pre>\n<p>No matter where <var>X</var> is taken from, <var>X = 111</var>, with the difference <var>753 - 111 = 642</var>.</p></section>\n</div>\n</span>", "p03213": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>. Among the divisors of <var>N!</var> <var>(= 1 \\times 2 \\times ... \\times N)</var>, how many <em>Shichi-Go numbers</em> (literally \"Seven-Five numbers\") are there?</p>\n<p>Here, a Shichi-Go number is a positive integer that has exactly <var>75</var> divisors.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Note</h3><p>When a positive integer <var>A</var> divides a positive integer <var>B</var>, <var>A</var> is said to a <em>divisor</em> of <var>B</var>.\nFor example, <var>6</var> has four divisors: <var>1, 2, 3</var> and <var>6</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the Shichi-Go numbers that are divisors of <var>N!</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n</pre>\n<p>There are no Shichi-Go numbers among the divisors of <var>9! = 1 \\times 2 \\times ... \\times 9 = 362880</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>There is one Shichi-Go number among the divisors of <var>10! = 3628800</var>: <var>32400</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>543\n</pre></section>\n</div>\n</span>", "p03212": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>. Among the integers between <var>1</var> and <var>N</var> (inclusive), how many <em>Shichi-Go-San numbers</em> (literally \"Seven-Five-Three numbers\") are there?</p>\n<p>Here, a Shichi-Go-San number is a positive integer that satisfies the following condition:</p>\n<ul>\n<li>When the number is written in base ten, each of the digits <code>7</code>, <code>5</code> and <code>3</code> appears at least once, and the other digits never appear.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N &lt; 10^9</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the Shichi-Go-San numbers between <var>1</var> and <var>N</var> (inclusive).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>575\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>There are four Shichi-Go-San numbers not greater than <var>575</var>: <var>357, 375, 537</var> and <var>573</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3600\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>13\n</pre>\n<p>There are <var>13</var> Shichi-Go-San numbers not greater than <var>3600</var>: the above four numbers, <var>735, 753, 3357, 3375, 3537, 3557, 3573, 3575</var> and <var>3577</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>999999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>26484\n</pre></section>\n</div>\n</span>", "p03215": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>One day, Niwango-kun, an employee of Dwango Co., Ltd., found an integer sequence <var>(a_1, ..., a_N)</var> of length <var>N</var>.\nHe is interested in properties of the sequence <var>a</var>.</p>\n<p>For a nonempty contiguous subsequence <var>a_l, ..., a_r</var> <var>(1 \\leq l \\leq r \\leq N)</var> of the sequence <var>a</var>, its <em>beauty</em> is defined as <var>a_l + ... + a_r</var>. Niwango-kun wants to know the maximum possible value of the bitwise AND of the beauties of <var>K</var> nonempty contiguous subsequences among all <var>N(N+1)/2</var> nonempty contiguous subsequences. (Subsequences may share elements.)</p>\n<p>Find the maximum possible value for him.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>2 \\leq N \\leq 1000</var></li>\n<li><var>1 \\leq a_i \\leq 10^9</var></li>\n<li><var>1 \\leq K \\leq N(N+1)/2</var></li>\n<li>All numbers given in input are integers</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>4 2\n2 5 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>12\n</pre>\n<p>There are <var>10</var> nonempty contiguous subsequences of <var>a</var>. Let us enumerate them:</p>\n<ul>\n<li>contiguous subsequences starting from the first element: <var>\\{2\\}, \\{2, 5\\}, \\{2, 5, 2\\}, \\{2, 5, 2, 5\\}</var></li>\n<li>contiguous subsequences starting from the second element: <var>\\{5\\}, \\{5, 2\\}, \\{5, 2, 5\\}</var></li>\n<li>contiguous subsequences starting from the third element: <var>\\{2\\}, \\{2, 5\\}</var></li>\n<li>contiguous subsequences starting from the fourth element: <var>\\{5\\}</var></li>\n</ul>\n<p>(Note that even if the elements of subsequences are equal, subsequences that have different starting indices are considered to be different.)</p>\n<p>The maximum possible bitwise AND of the beauties of two different contiguous subsequences is <var>12</var>.\nThis can be achieved by choosing <var>\\{5, 2, 5\\}</var> (with beauty <var>12</var>) and <var>\\{2, 5, 2, 5\\}</var> (with beauty <var>14</var>).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>8 4\n9 1 8 2 7 5 6 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>32\n</pre></section>\n</div>\n</span>", "p03214": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Niwango-kun is an employee of Dwango Co., Ltd.<br/>\nOne day, he is asked to generate a thumbnail from a video a user submitted.<br/>\nTo generate a thumbnail, he needs to select a frame of the video according to the following procedure:</p>\n<ul>\n<li>Get an integer <var>N</var> and <var>N</var> integers <var>a_0, a_1, ..., a_{N-1}</var> as inputs. <var>N</var> denotes the number of the frames of the video, and each <var>a_i</var> denotes the representation of the <var>i</var>-th frame of the video.</li>\n<li>Select <var>t</var>-th frame whose representation <var>a_t</var> is nearest to the average of all frame representations.</li>\n<li>If there are multiple such frames, select the frame with the smallest index.</li>\n</ul>\n<p>Find the index <var>t</var> of the frame he should select to generate a thumbnail.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq a_i \\leq 100</var></li>\n<li>All numbers given in input are integers</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_{0}</var> <var>a_{1}</var> <var>...</var> <var>a_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>1\n</pre>\n<p>Since the average of frame representations is <var>2</var>, Niwango-kun needs to select the index <var>1</var>, whose representation is <var>2</var>, that is, the nearest value to the average.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>4\n2 5 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>0\n</pre>\n<p>The average of frame representations is <var>3.5</var>.<br/>\nIn this case, every frame has the same distance from its representation to the average.<br/>\nTherefore, Niwango-kun should select index <var>0</var>, the smallest index among them.</p></section>\n</div>\n</span>", "p03217": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Niwango-kun, an employee of Dwango Co., Ltd., likes Niconico TV-chan, so he collected a lot of soft toys of her and spread them on the floor.</p>\n<p>Niwango-kun has <var>N</var> black rare soft toys of Niconico TV-chan and they are spread together with ordinary ones. He wanted these black rare soft toys to be close together, so he decided to rearrange them.</p>\n<p>In an infinitely large two-dimensional plane, every lattice point has a soft toy on it. The coordinates <var>(x_i,y_i)</var> of <var>N</var> black rare soft toys are given. All soft toys are considered to be points (without a length, area, or volume).</p>\n<p>He may perform the following operation arbitrarily many times:</p>\n<ul>\n<li>Put an axis-aligned square with side length <var>D</var>, rotate the square by <var>90</var> degrees with four soft toys on the four corners of the square. More specifically, if the left bottom corner's coordinate is <var>(x, y)</var>, rotate four points <var>(x,y) \\rightarrow (x+D,y) \\rightarrow (x+D,y+D) \\rightarrow (x,y+D) \\rightarrow (x,y)</var> in this order. Each of the four corners of the square must be on a lattice point.</li>\n</ul>\n<p>Let's define the <em>scatteredness</em> of an arrangement by the minimum side length of an axis-aligned square enclosing all black rare soft toys. Black rare soft toys on the edges or the vertices of a square are considered to be enclosed by the square.</p>\n<p>Find the minimum scatteredness after he performs arbitrarily many operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq D \\leq 1000</var></li>\n<li><var>0 \\leq x_i, y_i \\leq 10^9</var></li>\n<li>Given coordinates are pairwise distinct</li>\n<li>All numbers given in input are integers</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Scores</h3>\n<ul>\n<li><var>500</var> points will be awarded for passing the test set satisfying <var>1 \\leq D \\leq 30</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>D</var>\n<var>x_1</var> <var>y_1</var>\n<var>:</var>\n<var>x_N</var> <var>y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>3 1\n0 0\n1 0\n2 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>19 2\n1 3\n2 3\n0 1\n1 1\n2 1\n3 1\n4 4\n5 4\n6 4\n7 4\n8 4\n8 3\n8 2\n8 1\n8 0\n7 0\n6 0\n5 0\n4 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3>\n<pre>8 3\n0 0\n0 3\n3 0\n3 3\n2 2\n2 5\n5 2\n5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3>\n<pre>4\n</pre></section>\n</div>\n</span>", "p03216": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>In Dwango Co., Ltd., there is a content distribution system named 'Dwango Media Cluster', and it is called 'DMC' for short.<br/>\nThe name 'DMC' sounds cool for Niwango-kun, so he starts to define DMC-ness of a string.</p>\n<p>Given a string <var>S</var> of length <var>N</var> and an integer <var>k</var> <var>(k \\geq 3)</var>,\nhe defines the <em><var>k</var>-DMC number</em> of <var>S</var> as the number of triples <var>(a, b, c)</var> of integers that satisfy the following conditions:</p>\n<ul>\n<li><var>0 \\leq a &lt; b &lt; c \\leq N - 1</var></li>\n<li><var>S[a]</var> = <code>D</code></li>\n<li><var>S[b]</var> = <code>M</code></li>\n<li><var>S[c]</var> = <code>C</code></li>\n<li><var>c-a &lt; k</var></li>\n</ul>\n<p>Here <var>S[a]</var> is the <var>a</var>-th character of the string <var>S</var>. Indexing is zero-based, that is, <var>0 \\leq a \\leq N - 1</var> holds.</p>\n<p>For a string <var>S</var> and <var>Q</var> integers <var>k_0, k_1, ..., k_{Q-1}</var>, calculate the <var>k_i</var>-DMC number of <var>S</var> for each <var>i</var> <var>(0 \\leq i \\leq Q-1)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>3 \\leq N \\leq 10^6</var></li>\n<li><var>S</var> consists of uppercase English letters</li>\n<li><var>1 \\leq Q \\leq 75</var></li>\n<li><var>3 \\leq k_i \\leq N</var></li>\n<li>All numbers given in input are integers</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n<var>Q</var>\n<var>k_{0}</var> <var>k_{1}</var> <var>...</var> <var>k_{Q-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print <var>Q</var> lines.\nThe <var>i</var>-th line should contain the <var>k_i</var>-DMC number of the string <var>S</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>18\nDWANGOMEDIACLUSTER\n1\n18\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>1\n</pre>\n<p><var>(a,b,c) = (0, 6, 11)</var> satisfies the conditions.<br/>\nStrangely, Dwango Media Cluster does not have so much DMC-ness by his definition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>18\nDDDDDDMMMMMCCCCCCC\n1\n18\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>210\n</pre>\n<p>The number of triples can be calculated as <var>6\\times 5\\times 7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3>\n<pre>54\nDIALUPWIDEAREANETWORKGAMINGOPERATIONCORPORATIONLIMITED\n3\n20 30 40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3>\n<pre>0\n1\n2\n</pre>\n<p><var>(a, b, c) = (0, 23, 36), (8, 23, 36)</var> satisfy the conditions except the last one, namely, <var>c-a &lt; k_i</var>.<br/>\nBy the way, DWANGO is an acronym for \"Dial-up Wide Area Network Gaming Operation\".</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3>\n<pre>30\nDMCDMCDMCDMCDMCDMCDMCDMCDMCDMC\n4\n5 10 15 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3>\n<pre>10\n52\n110\n140\n</pre></section>\n</div>\n</span>", "p03220": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A country decides to build a palace.</p>\n<p>In this country, the average temperature of a point at an elevation of <var>x</var> meters is <var>T-x \\times 0.006</var> degrees Celsius.</p>\n<p>There are <var>N</var> places proposed for the place. The elevation of Place <var>i</var> is <var>H_i</var> meters.</p>\n<p>Among them, Princess Joisino orders you to select the place whose average temperature is the closest to <var>A</var> degrees Celsius, and build the palace there.</p>\n<p>Print the index of the place where the palace should be built.</p>\n<p>It is guaranteed that the solution is unique.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>0 \\leq T \\leq 50</var></li>\n<li><var>-60 \\leq A \\leq T</var></li>\n<li><var>0 \\leq H_i \\leq 10^5</var></li>\n<li>All values in input are integers.</li>\n<li>The solution is unique.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>T</var> <var>A</var>\n<var>H_1</var> <var>H_2</var> <var>...</var> <var>H_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the index of the place where the palace should be built.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n12 5\n1000 2000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<ul>\n<li>The average temperature of Place <var>1</var> is <var>12-1000 \\times 0.006=6</var> degrees Celsius.</li>\n<li>The average temperature of Place <var>2</var> is <var>12-2000 \\times 0.006=0</var> degrees Celsius.</li>\n</ul>\n<p>Thus, the palace should be built at Place <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n21 -11\n81234 94124 52141\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03221": "<span class=\"lang-en\">\n<p>Score: <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In Republic of Atcoder, there are <var>N</var> prefectures, and a total of <var>M</var> cities that belong to those prefectures.</p>\n<p>City <var>i</var> is established in year <var>Y_i</var> and belongs to Prefecture <var>P_i</var>.</p>\n<p>You can assume that there are no multiple cities that are established in the same year.</p>\n<p>It is decided to allocate a <var>12</var>-digit ID number to each city.</p>\n<p>If City <var>i</var> is the <var>x</var>-th established city among the cities that belong to Prefecture <var>i</var>, the first six digits of the ID number of City <var>i</var> is <var>P_i</var>, and the last six digits of the ID number is <var>x</var>.</p>\n<p>Here, if <var>P_i</var> or <var>x</var> (or both) has less than six digits, zeros are added to the left until it has six digits.</p>\n<p>Find the ID numbers for all the cities.</p>\n<p>Note that there can be a prefecture with no cities.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq P_i \\leq N</var></li>\n<li><var>1 \\leq Y_i \\leq 10^9</var></li>\n<li><var>Y_i</var> are all different.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>P_1</var> <var>Y_1</var>\n<var>:</var>\n<var>P_M</var> <var>Y_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the ID numbers for all the cities, in ascending order of indices (City <var>1</var>, City <var>2</var>, <var>...</var>).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n1 32\n2 63\n1 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>000001000002\n000002000001\n000001000001\n</pre>\n<ul>\n<li>As City <var>1</var> is the second established city among the cities that belong to Prefecture <var>1</var>, its ID number is <var>000001000002</var>.</li>\n<li>As City <var>2</var> is the first established city among the cities that belong to Prefecture <var>2</var>, its ID number is <var>000002000001</var>.</li>\n<li>As City <var>3</var> is the first established city among the cities that belong to Prefecture <var>1</var>, its ID number is <var>000001000001</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3\n2 55\n2 77\n2 99\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>000002000001\n000002000002\n000002000003\n</pre></section>\n</div>\n</span>", "p03223": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N</var> integers; the <var>i</var>-th of them is <var>A_i</var>.\nFind the maximum possible sum of the absolute differences between the adjacent elements after arranging these integers in a row in any order you like.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var>\n<var>:</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the absolute differences between the adjacent elements after arranging the given integers in a row in any order you like.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n6\n8\n1\n2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>21\n</pre>\n<p>When the integers are arranged as <var>3,8,1,6,2</var>, the sum of the absolute differences between the adjacent elements is <var>|3 - 8| + |8 - 1| + |1 - 6| + |6 - 2| = 21</var>. This is the maximum possible sum.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n3\n1\n4\n1\n5\n9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>25\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n5\n5\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03224": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>. Determine if there exists a tuple of subsets of <var>\\{1,2,...N\\}</var>, <var>(S_1,S_2,...,S_k)</var>, that satisfies the following conditions:</p>\n<ul>\n<li>Each of the integers <var>1,2,...,N</var> is contained in exactly two of the sets <var>S_1,S_2,...,S_k</var>.</li>\n<li>Any two of the sets <var>S_1,S_2,...,S_k</var> have exactly one element in common.</li>\n</ul>\n<p>If such a tuple exists, construct one such tuple.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If a tuple of subsets of <var>\\{1,2,...N\\}</var> that satisfies the conditions does not exist, print <code>No</code>.\nIf such a tuple exists, print <code>Yes</code> first, then print such subsets in the following format:</p>\n<pre><var>k</var>\n<var>|S_1|</var> <var>S_{1,1}</var> <var>S_{1,2}</var> <var>...</var> <var>S_{1,|S_1|}</var>\n<var>:</var>\n<var>|S_k|</var> <var>S_{k,1}</var> <var>S_{k,2}</var> <var>...</var> <var>S_{k,|S_k|}</var>\n</pre>\n<p>where <var>S_i={S_{i,1},S_{i,2},...,S_{i,|S_i|}}</var>.</p>\n<p>If there are multiple such tuples, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n3\n2 1 2\n2 3 1\n2 2 3\n</pre>\n<p>It can be seen that <var>(S_1,S_2,S_3)=(\\{1,2\\},\\{3,1\\},\\{2,3\\})</var> satisfies the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03225": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are some coins in the <var>xy</var>-plane.\nThe positions of the coins are represented by a grid of characters with <var>H</var> rows and <var>W</var> columns.\nIf the character at the <var>i</var>-th row and <var>j</var>-th column, <var>s_{ij}</var>, is <code>#</code>, there is one coin at point <var>(i,j)</var>; if that character is <code>.</code>, there is no coin at point <var>(i,j)</var>. There are no other coins in the <var>xy</var>-plane.</p>\n<p>There is no coin at point <var>(x,y)</var> where <var>1\\leq i\\leq H,1\\leq j\\leq W</var> does not hold.\nThere is also no coin at point <var>(x,y)</var> where <var>x</var> or <var>y</var> (or both) is not an integer.\nAdditionally, two or more coins never exist at the same point.</p>\n<p>Find the number of triples of different coins that satisfy the following condition:</p>\n<ul>\n<li>Choosing any two of the three coins would result in the same Manhattan distance between the points where they exist.</li>\n</ul>\n<p>Here, the Manhattan distance between points <var>(x,y)</var> and <var>(x',y')</var> is <var>|x-x'|+|y-y'|</var>.\nTwo triples are considered the same if the only difference between them is the order of the coins.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 300</var></li>\n<li><var>s_{ij}</var> is <code>#</code> or <code>.</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>s_{11}...s_{1W}</var>\n<var>:</var>\n<var>s_{H1}...s_{HW}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of triples that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 4\n#.##\n.##.\n#...\n..##\n...#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><var>((1,1),(1,3),(2,2)),((1,1),(2,2),(3,1))</var> and <var>((1,3),(3,1),(4,4))</var> satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>13 27\n......#.........#.......#..\n#############...#.....###..\n..............#####...##...\n...#######......#...#######\n...#.....#.....###...#...#.\n...#######....#.#.#.#.###.#\n..............#.#.#...#.#..\n#############.#.#.#...###..\n#...........#...#...#######\n#..#######..#...#...#.....#\n#..#.....#..#...#...#.###.#\n#..#######..#...#...#.#.#.#\n#..........##...#...#.#####\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>870\n</pre></section>\n</div>\n</span>", "p03227": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>2</var> or <var>3</var> consisting of lowercase English letters. If the length of the string is <var>2</var>, print it as is; if the length is <var>3</var>, print the string after reversing it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The length of <var>S</var> is <var>2</var> or <var>3</var>.</li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the length of <var>S</var> is <var>2</var>, print <var>S</var> as is; if the length is <var>3</var>, print <var>S</var> after reversing it.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>cba\n</pre>\n<p>As the length of <var>S</var> is <var>3</var>, we print it after reversing it.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>ac\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>ac\n</pre>\n<p>As the length of <var>S</var> is <var>2</var>, we print it as is.</p></section>\n</div>\n</span>", "p03228": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In the beginning, Takahashi has <var>A</var> cookies, and Aoki has <var>B</var> cookies.\nThey will perform the following operation alternately, starting from Takahashi:</p>\n<ul>\n<li>If the number of cookies in his hand is odd, eat one of those cookies; if the number is even, do nothing. Then, give one-half of the cookies in his hand to the other person.</li>\n</ul>\n<p>Find the numbers of cookies Takahashi and Aoki respectively have after performing <var>K</var> operations in total.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A,B \\leq 10^9</var></li>\n<li><var>1 \\leq K \\leq 100</var></li>\n<li><var>A,B</var> and <var>K</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of cookies Takahashi has, and the number of cookies Aoki has, in this order, after performing <var>K</var> operations in total.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5 3\n</pre>\n<p>The process will go as follows:</p>\n<ul>\n<li>In the beginning, Takahashi and Aoki have <var>5</var> and <var>4</var> cookies, respectively.</li>\n<li>Takahashi eats one cookie and gives two cookies to Aoki. They now have <var>2</var> and <var>6</var> cookies, respectively.</li>\n<li>Aoki gives three cookies to Takahashi. They now have <var>5</var> and <var>3</var> cookies, respectively.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159265 358979323 84\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>448759046 224379523\n</pre></section>\n</div>\n</span>", "p03229": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N</var> integers; the <var>i</var>-th of them is <var>A_i</var>.\nFind the maximum possible sum of the absolute differences between the adjacent elements after arranging these integers in a row in any order you like.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var>\n<var>:</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the absolute differences between the adjacent elements after arranging the given integers in a row in any order you like.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n6\n8\n1\n2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>21\n</pre>\n<p>When the integers are arranged as <var>3,8,1,6,2</var>, the sum of the absolute differences between the adjacent elements is <var>|3 - 8| + |8 - 1| + |1 - 6| + |6 - 2| = 21</var>. This is the maximum possible sum.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n3\n1\n4\n1\n5\n9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>25\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n5\n5\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03230": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>. Determine if there exists a tuple of subsets of <var>\\{1,2,...N\\}</var>, <var>(S_1,S_2,...,S_k)</var>, that satisfies the following conditions:</p>\n<ul>\n<li>Each of the integers <var>1,2,...,N</var> is contained in exactly two of the sets <var>S_1,S_2,...,S_k</var>.</li>\n<li>Any two of the sets <var>S_1,S_2,...,S_k</var> have exactly one element in common.</li>\n</ul>\n<p>If such a tuple exists, construct one such tuple.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If a tuple of subsets of <var>\\{1,2,...N\\}</var> that satisfies the conditions does not exist, print <code>No</code>.\nIf such a tuple exists, print <code>Yes</code> first, then print such subsets in the following format:</p>\n<pre><var>k</var>\n<var>|S_1|</var> <var>S_{1,1}</var> <var>S_{1,2}</var> <var>...</var> <var>S_{1,|S_1|}</var>\n<var>:</var>\n<var>|S_k|</var> <var>S_{k,1}</var> <var>S_{k,2}</var> <var>...</var> <var>S_{k,|S_k|}</var>\n</pre>\n<p>where <var>S_i={S_{i,1},S_{i,2},...,S_{i,|S_i|}}</var>.</p>\n<p>If there are multiple such tuples, any of them will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n3\n2 1 2\n2 3 1\n2 2 3\n</pre>\n<p>It can be seen that <var>(S_1,S_2,S_3)=(\\{1,2\\},\\{3,1\\},\\{2,3\\})</var> satisfies the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03232": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> blocks arranged in a row, numbered <var>1</var> to <var>N</var> from left to right.\nEach block has a weight, and the weight of Block <var>i</var> is <var>A_i</var>.\nSnuke will perform the following operation on these blocks <var>N</var> times:</p>\n<ul>\n<li>Choose one block that is still not removed, and remove it.\nThe cost of this operation is the sum of the weights of the blocks that are connected to the block being removed (including itself).\nHere, two blocks <var>x</var> and <var>y</var> ( <var>x \\leq y</var> ) are <em>connected</em> when, for all <var>z</var> ( <var>x \\leq z \\leq y</var> ), Block <var>z</var> is still not removed.</li>\n</ul>\n<p>There are <var>N!</var> possible orders in which Snuke removes the blocks.\nFor all of those <var>N!</var> orders, find the total cost of the <var>N</var> operations, and calculate the sum of those <var>N!</var> total costs.\nAs the answer can be extremely large, compute the sum modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For all of the <var>N!</var> orders, find the total cost of the <var>N</var> operations, and print the sum of those <var>N!</var> total costs, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>First, we will consider the order \"Block <var>1</var> -&gt; Block <var>2</var>\".\nIn the first operation, the cost of the operation is <var>1+2=3</var>, as Block <var>1</var> and <var>2</var> are connected.\nIn the second operation, the cost of the operation is <var>2</var>, as only Block <var>2</var> remains.\nThus, the total cost of the two operations for this order is <var>3+2=5</var>.</p>\n<p>Then, we will consider the order \"Block <var>2</var> -&gt; Block <var>1</var>\".\nIn the first operation, the cost of the operation is <var>1+2=3</var>, as Block <var>1</var> and <var>2</var> are connected.\nIn the second operation, the cost of the operation is <var>1</var>, as only Block <var>1</var> remains.\nThus, the total cost of the two operations for this order is <var>3+1=4</var>.</p>\n<p>Therefore, the answer is <var>5+4=9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>212\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n1 2 4 8 16 32 64 128 256 512\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>880971923\n</pre></section>\n</div>\n</span>", "p03231": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>N</var> and another string <var>T</var> of length <var>M</var>.\nThese strings consist of lowercase English letters.</p>\n<p>A string <var>X</var> is called a <strong>good string</strong> when the following conditions are all met:</p>\n<ul>\n<li>Let <var>L</var> be the length of <var>X</var>. <var>L</var> is divisible by both <var>N</var> and <var>M</var>.</li>\n<li>Concatenating the <var>1</var>-st, <var>(\\frac{L}{N}+1)</var>-th, <var>(2 \\times \\frac{L}{N}+1)</var>-th, <var>...</var>, <var>((N-1)\\times\\frac{L}{N}+1)</var>-th characters of <var>X</var>, without changing the order, results in <var>S</var>.</li>\n<li>Concatenating the <var>1</var>-st, <var>(\\frac{L}{M}+1)</var>-th, <var>(2 \\times \\frac{L}{M}+1)</var>-th, <var>...</var>, <var>((M-1)\\times\\frac{L}{M}+1)</var>-th characters of <var>X</var>, without changing the order, results in <var>T</var>.</li>\n</ul>\n<p>Determine if there exists a good string. If it exists, find the length of the shortest such string.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 10^5</var></li>\n<li><var>S</var> and <var>T</var> consist of lowercase English letters.</li>\n<li><var>|S|=N</var></li>\n<li><var>|T|=M</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>S</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If a good string does not exist, print <code>-1</code>; if it exists, print the length of the shortest such string.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\nacp\nae\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>For example, the string <code>accept</code> is a good string.\nThere is no good string shorter than this, so the answer is <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 3\nabcdef\nabc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15 9\ndnsusrayukuaiia\ndujrunuma\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>45\n</pre></section>\n</div>\n</span>", "p03235": "<span class=\"lang-en\">\n<p>Score : <var>1400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>P</var>, a permutation of <var>(1,\\ 2,\\ ...\\ N)</var>.</p>\n<p>A string <var>S</var> of length <var>N</var> consisting of <code>0</code> and <code>1</code> is a <em>good string</em> when it meets the following criterion:</p>\n<ul>\n<li>The sequences <var>X</var> and <var>Y</var> are constructed as follows:<ul>\n<li>First, let <var>X</var> and <var>Y</var> be empty sequences.</li>\n<li>For each <var>i=1,\\ 2,\\ ...\\ N</var>, in this order, append <var>P_i</var> to the end of <var>X</var> if <var>S_i=</var> <code>0</code>, and append it to the end of <var>Y</var> if <var>S_i=</var> <code>1</code>.</li>\n</ul>\n</li>\n<li>If <var>X</var> and <var>Y</var> have the same number of <em>high</em> elements, <var>S</var> is a good string.\nHere, the <var>i</var>-th element of a sequence is called <em>high</em> when that element is the largest among the elements from the <var>1</var>-st to <var>i</var>-th element in the sequence.</li>\n</ul>\n<p>Determine if there exists a good string. If it exists, find the lexicographically smallest such string.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq P_i \\leq N</var></li>\n<li><var>P_1,\\ P_2,\\ ...\\ P_N</var> are all distinct.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_1</var> <var>P_2</var> <var>...</var> <var>P_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If a good string does not exist, print <code>-1</code>.\nIf it exists, print the lexicographically smallest such string.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n3 1 4 6 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>001001\n</pre>\n<p>Let <var>S=</var> <code>001001</code>. Then, <var>X=(3,\\ 1,\\ 6,\\ 2)</var> and <var>Y=(4,\\ 5)</var>.\nThe high elements in <var>X</var> is the first and third elements, and the high elements in <var>Y</var> is the first and second elements.\nAs they have the same number of high elements, <code>001001</code> is a good string.\nThere is no good string that is lexicographically smaller than this, so the answer is <code>001001</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n1 3 2 5 6 4 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0001101\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>30\n1 2 6 3 5 7 9 8 11 12 10 13 16 23 15 18 14 24 22 26 19 21 28 17 4 27 29 25 20 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>000000000001100101010010011101\n</pre></section>\n</div>\n</span>", "p03236": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><strong>Problem F and F2 are the same problem, but with different constraints and time limits.</strong></p>\n<p>We have a board divided into <var>N</var> horizontal rows and <var>N</var> vertical columns of square cells.\nThe cell at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left is called Cell <var>(i,j)</var>.\nEach cell is either empty or occupied by an obstacle.\nAlso, each empty cell has a digit written on it.\nIf <var>A_{i,j}=</var> <code>1</code>, <code>2</code>, ..., or <code>9</code>, Cell <var>(i,j)</var> is empty and the digit <var>A_{i,j}</var> is written on it.\nIf <var>A_{i,j}=</var> <code>#</code>, Cell <var>(i,j)</var> is occupied by an obstacle.</p>\n<p>Cell <var>Y</var> is <em>reachable</em> from cell <var>X</var> when the following conditions are all met:</p>\n<ul>\n<li>Cells <var>X</var> and <var>Y</var> are different.</li>\n<li>Cells <var>X</var> and <var>Y</var> are both empty.</li>\n<li>One can reach from Cell <var>X</var> to Cell <var>Y</var> by repeatedly moving right or down to an adjacent empty cell.</li>\n</ul>\n<p>Consider all pairs of cells <var>(X,Y)</var> such that cell <var>Y</var> is reachable from cell <var>X</var>.\nFind the sum of the products of the digits written on cell <var>X</var> and cell <var>Y</var> for all of those pairs.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 500</var></li>\n<li><var>A_{i,j}</var> is one of the following characters: <code>1</code>, <code>2</code>, ... <code>9</code> and <code>#</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_{1,1}A_{1,2}...A_{1,N}</var>\n<var>A_{2,1}A_{2,2}...A_{2,N}</var>\n<var>:</var>\n<var>A_{N,1}A_{N,2}...A_{N,N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the products of the digits written on cell <var>X</var> and cell <var>Y</var> for all pairs <var>(X,Y)</var> such that cell <var>Y</var> is reachable from cell <var>X</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n11\n11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>There are five pairs of cells <var>(X,Y)</var> such that cell <var>Y</var> is reachable from cell <var>X</var>, as follows:</p>\n<ul>\n<li><var>X=(1,1)</var>, <var>Y=(1,2)</var></li>\n<li><var>X=(1,1)</var>, <var>Y=(2,1)</var></li>\n<li><var>X=(1,1)</var>, <var>Y=(2,2)</var></li>\n<li><var>X=(1,2)</var>, <var>Y=(2,2)</var></li>\n<li><var>X=(2,1)</var>, <var>Y=(2,2)</var></li>\n</ul>\n<p>The product of the digits written on cell <var>X</var> and cell <var>Y</var> is <var>1</var> for all of those pairs, so the answer is <var>5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1111\n11#1\n1#11\n1111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>47\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n76##63##3#\n8445669721\n75#9542133\n3#285##445\n749632##89\n2458##9515\n5952578#77\n1#3#44196#\n4355#99#1#\n#298#63587\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>36065\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10\n4177143673\n7#########\n5#1716155#\n6#4#####5#\n2#3#597#6#\n6#9#8#3#5#\n5#2#899#9#\n1#6#####6#\n6#5359657#\n5#########\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>6525\n</pre></section>\n</div>\n</span>", "p03237": "<span class=\"lang-en\">\n<p>Score : <var>1500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><strong>Problem F and F2 are the same problem, but with different constraints and time limits.</strong></p>\n<p>We have a board divided into <var>N</var> horizontal rows and <var>N</var> vertical columns of square cells.\nThe cell at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left is called Cell <var>(i,j)</var>.\nEach cell is either empty or occupied by an obstacle.\nAlso, each empty cell has a digit written on it.\nIf <var>A_{i,j}=</var> <code>1</code>, <code>2</code>, ..., or <code>9</code>, Cell <var>(i,j)</var> is empty and the digit <var>A_{i,j}</var> is written on it.\nIf <var>A_{i,j}=</var> <code>#</code>, Cell <var>(i,j)</var> is occupied by an obstacle.</p>\n<p>Cell <var>Y</var> is <em>reachable</em> from cell <var>X</var> when the following conditions are all met:</p>\n<ul>\n<li>Cells <var>X</var> and <var>Y</var> are different.</li>\n<li>Cells <var>X</var> and <var>Y</var> are both empty.</li>\n<li>One can reach from Cell <var>X</var> to Cell <var>Y</var> by repeatedly moving right or down to an adjacent empty cell.</li>\n</ul>\n<p>Consider all pairs of cells <var>(X,Y)</var> such that cell <var>Y</var> is reachable from cell <var>X</var>.\nFind the sum of the products of the digits written on cell <var>X</var> and cell <var>Y</var> for all of those pairs.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1500</var></li>\n<li><var>A_{i,j}</var> is one of the following characters: <code>1</code>, <code>2</code>, ... <code>9</code> and <code>#</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_{1,1}A_{1,2}...A_{1,N}</var>\n<var>A_{2,1}A_{2,2}...A_{2,N}</var>\n<var>:</var>\n<var>A_{N,1}A_{N,2}...A_{N,N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the products of the digits written on cell <var>X</var> and cell <var>Y</var> for all pairs <var>(X,Y)</var> such that cell <var>Y</var> is reachable from cell <var>X</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n11\n11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>There are five pairs of cells <var>(X,Y)</var> such that cell <var>Y</var> is reachable from cell <var>X</var>, as follows:</p>\n<ul>\n<li><var>X=(1,1)</var>, <var>Y=(1,2)</var></li>\n<li><var>X=(1,1)</var>, <var>Y=(2,1)</var></li>\n<li><var>X=(1,1)</var>, <var>Y=(2,2)</var></li>\n<li><var>X=(1,2)</var>, <var>Y=(2,2)</var></li>\n<li><var>X=(2,1)</var>, <var>Y=(2,2)</var></li>\n</ul>\n<p>The product of the digits written on cell <var>X</var> and cell <var>Y</var> is <var>1</var> for all of those pairs, so the answer is <var>5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1111\n11#1\n1#11\n1111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>47\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n76##63##3#\n8445669721\n75#9542133\n3#285##445\n749632##89\n2458##9515\n5952578#77\n1#3#44196#\n4355#99#1#\n#298#63587\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>36065\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10\n4177143673\n7#########\n5#1716155#\n6#4#####5#\n2#3#597#6#\n6#9#8#3#5#\n5#2#899#9#\n1#6#####6#\n6#5359657#\n5#########\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>6525\n</pre></section>\n</div>\n</span>", "p03239": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>When Mr. X is away from home, he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.</p>\n<p>You, the smartwatch, has found <var>N</var> routes to his home.</p>\n<p>If Mr. X uses the <var>i</var>-th of these routes, he will get home in time <var>t_i</var> at cost <var>c_i</var>.</p>\n<p>Find the smallest cost of a route that takes not longer than time <var>T</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq T \\leq 1000</var></li>\n<li><var>1 \\leq c_i \\leq 1000</var></li>\n<li><var>1 \\leq t_i \\leq 1000</var></li>\n<li>The pairs <var>(c_i, t_i)</var> are distinct.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>T</var>\n<var>c_1</var> <var>t_1</var>\n<var>c_2</var> <var>t_2</var>\n<var>:</var>\n<var>c_N</var> <var>t_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the smallest cost of a route that takes not longer than time <var>T</var>.</p>\n<p>If there is no route that takes not longer than time <var>T</var>, print <code>TLE</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 70\n7 60\n1 80\n4 50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<ul>\n<li>The first route gets him home at cost <var>7</var>.</li>\n<li>The second route takes longer than time <var>T = 70</var>.</li>\n<li>The third route gets him home at cost <var>4</var>.</li>\n</ul>\n<p>Thus, the cost <var>4</var> of the third route is the minimum.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n1 1000\n2 4\n3 1000\n4 500\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>TLE\n</pre>\n<p>There is no route that takes not longer than time <var>T = 3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 9\n25 8\n5 9\n4 10\n1000 1000\n6 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03240": "<span class=\"lang-en\">\n<p>Score: <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>In the Ancient Kingdom of Snuke, there was a pyramid to strengthen the authority of Takahashi, the president of AtCoder Inc.<br/>\nThe pyramid had <em>center coordinates</em> <var>(C_X, C_Y)</var> and <em>height</em> <var>H</var>. The altitude of coordinates <var>(X, Y)</var> is <var>max(H - |X - C_X| - |Y - C_Y|, 0)</var>.  </p>\n<p>Aoki, an explorer, conducted a survey to identify the center coordinates and height of this pyramid. As a result, he obtained the following information:  </p>\n<ul>\n<li><var>C_X, C_Y</var> was integers between <var>0</var> and <var>100</var> (inclusive), and <var>H</var> was an integer not less than <var>1</var>.  </li>\n<li>Additionally, he obtained <var>N</var> pieces of information. The <var>i</var>-th of them is: \"the altitude of point <var>(x_i, y_i)</var> is <var>h_i</var>.\"  </li>\n</ul>\n<p>This was enough to identify the center coordinates and the height of the pyramid. Find these values with the clues above.  </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> is an integer between <var>1</var> and <var>100</var> (inclusive).</li>\n<li><var>x_i</var> and <var>y_i</var> are integers between <var>0</var> and <var>100</var> (inclusive).</li>\n<li><var>h_i</var> is an integer between <var>0</var> and <var>10^9</var> (inclusive).</li>\n<li>The <var>N</var> coordinates <var>(x_1, y_1), (x_2, y_2), (x_3, y_3), ..., (x_N, y_N)</var> are all different.</li>\n<li>The center coordinates and the height of the pyramid can be uniquely identified.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:  </p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var> <var>h_1</var>\n<var>x_2</var> <var>y_2</var> <var>h_2</var>\n<var>x_3</var> <var>y_3</var> <var>h_3</var>\n<var>:</var>\n<var>x_N</var> <var>y_N</var> <var>h_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print values <var>C_X, C_Y</var> and <var>H</var> representing the center coordinates and the height of the pyramid in one line, with spaces in between.  </p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 2 6\n</pre>\n<p>In this case, the center coordinates and the height can be identified as <var>(2, 2)</var> and <var>6</var>.  </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n0 0 100\n1 1 98\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 0 100\n</pre>\n<p>In this case, the center coordinates and the height can be identified as <var>(0, 0)</var> and <var>100</var>.<br/>\nNote that <var>C_X</var> and <var>C_Y</var> are known to be integers between <var>0</var> and <var>100</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n99 1 191\n100 1 192\n99 0 192\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100 0 193\n</pre>\n<p>In this case, the center coordinates and the height can be identified as <var>(100, 0)</var> and <var>193</var>.  </p></section>\n</div>\n</span>", "p03241": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given integers <var>N</var> and <var>M</var>.</p>\n<p>Consider a sequence <var>a</var> of length <var>N</var> consisting of positive integers such that <var>a_1 + a_2 + ... + a_N</var> = <var>M</var>. Find the maximum possible value of the greatest common divisor of <var>a_1, a_2, ..., a_N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>N \\leq M \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible value of the greatest common divisor of a sequence <var>a_1, a_2, ..., a_N</var> that satisfies the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Consider the sequence <var>(a_1, a_2, a_3) = (2, 4, 8)</var>. Their greatest common divisor is <var>2</var>, and this is the maximum value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 123\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>10000\n</pre></section>\n</div>\n</span>", "p03243": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Kurohashi has never participated in AtCoder Beginner Contest (ABC).</p>\n<p>The next ABC to be held is ABC <var>N</var> (the <var>N</var>-th ABC ever held).\nKurohashi wants to make his debut in some ABC <var>x</var> such that all the digits of <var>x</var> in base ten are the same.</p>\n<p>What is the earliest ABC where Kurohashi can make his debut?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>100 \\leq N \\leq 999</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the earliest ABC where Kurohashi can make his debut is ABC <var>n</var>, print <var>n</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>111\n</pre>\n<p>The next ABC to be held is ABC <var>111</var>, where Kurohashi can make his debut.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>112\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>222\n</pre>\n<p>The next ABC to be held is ABC <var>112</var>, which means Kurohashi can no longer participate in ABC <var>111</var>.\nAmong the ABCs where Kurohashi can make his debut, the earliest one is ABC <var>222</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>750\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>777\n</pre></section>\n</div>\n</span>", "p03242": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Cat Snuke is learning to write characters.\nToday, he practiced writing digits <code>1</code> and <code>9</code>, but he did it the other way around.</p>\n<p>You are given a three-digit integer <var>n</var> written by Snuke.\nPrint the integer obtained by replacing each digit <code>1</code> with <code>9</code> and each digit <code>9</code> with <code>1</code> in <var>n</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>111 \\leq n \\leq 999</var></li>\n<li><var>n</var> is an integer consisting of digits <code>1</code> and <code>9</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the integer obtained by replacing each occurrence of <code>1</code> with <code>9</code> and each occurrence of <code>9</code> with <code>1</code> in <var>n</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>119\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>991\n</pre>\n<p>Replace the <code>9</code> in the ones place with <code>1</code>, the <code>1</code> in the tens place with <code>9</code> and the <code>1</code> in the hundreds place with <code>9</code>. The answer is <code>991</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>111\n</pre></section>\n</div>\n</span>", "p03244": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A sequence <var>a_1,a_2,... ,a_n</var> is said to be /\\/\\/\\/ when the following conditions are satisfied:</p>\n<ul>\n<li>For each <var>i = 1,2,..., n-2</var>, <var>a_i = a_{i+2}</var>.</li>\n<li>Exactly two different numbers appear in the sequence.</li>\n</ul>\n<p>You are given a sequence <var>v_1,v_2,...,v_n</var> whose length is even.\nWe would like to make this sequence /\\/\\/\\/ by replacing some of its elements.\nFind the minimum number of elements that needs to be replaced.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq n \\leq 10^5</var></li>\n<li><var>n</var> is even.</li>\n<li><var>1 \\leq v_i \\leq 10^5</var></li>\n<li><var>v_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>v_1</var> <var>v_2</var> <var>...</var> <var>v_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of elements that needs to be replaced.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n3 1 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The sequence <var>3,1,3,2</var> is not /\\/\\/\\/, but we can make it /\\/\\/\\/ by replacing one of its elements: for example, replace the fourth element to make it <var>3,1,3,1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n105 119 105 119 105 119\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>The sequence <var>105,119,105,119,105,119</var> is /\\/\\/\\/.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre>\n<p>The elements of the sequence <var>1,1,1,1</var> are all the same, so it is not /\\/\\/\\/.</p></section>\n</div>\n</span>", "p03245": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke is introducing a <strong>robot arm</strong> with the following properties to his factory:</p>\n<ul>\n<li>The robot arm consists of <var>m</var> <strong>sections</strong> and <var>m+1</var> <strong>joints</strong>. The sections are numbered <var>1</var>, <var>2</var>, ..., <var>m</var>, and the joints are numbered <var>0</var>, <var>1</var>, ..., <var>m</var>. Section <var>i</var> connects Joint <var>i-1</var> and Joint <var>i</var>. The length of Section <var>i</var> is <var>d_i</var>.</li>\n<li>For each section, its <strong>mode</strong> can be specified individually. There are four modes: <code>L</code>, <code>R</code>, <code>D</code> and <code>U</code>. The mode of a section decides the direction of that section. If we consider the factory as a coordinate plane, the position of Joint <var>i</var> will be determined as follows (we denote its coordinates as <var>(x_i, y_i)</var>):<ul>\n<li><var>(x_0, y_0) = (0, 0)</var>.</li>\n<li>If the mode of Section <var>i</var> is <code>L</code>, <var>(x_{i}, y_{i}) = (x_{i-1} - d_{i}, y_{i-1})</var>.</li>\n<li>If the mode of Section <var>i</var> is <code>R</code>, <var>(x_{i}, y_{i}) = (x_{i-1} + d_{i}, y_{i-1})</var>.</li>\n<li>If the mode of Section <var>i</var> is <code>D</code>, <var>(x_{i}, y_{i}) = (x_{i-1}, y_{i-1} - d_{i})</var>.</li>\n<li>If the mode of Section <var>i</var> is <code>U</code>, <var>(x_{i}, y_{i}) = (x_{i-1}, y_{i-1} + d_{i})</var>.</li>\n</ul>\n</li>\n</ul>\n<p>Snuke would like to introduce a robot arm so that the position of Joint <var>m</var> can be matched with all of the <var>N</var> points <var>(X_1, Y_1), (X_2, Y_2), ..., (X_N, Y_N)</var> by properly specifying the modes of the sections.\nIs this possible?\nIf so, find such a robot arm and how to bring Joint <var>m</var> to each point <var>(X_j, Y_j)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>-10^9 \\leq X_i \\leq 10^9</var></li>\n<li><var>-10^9 \\leq Y_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li>In the test cases worth <var>300</var> points, <var>-10 \\leq X_i \\leq 10</var> and <var>-10 \\leq Y_i \\leq 10</var> hold.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>Y_1</var>\n<var>X_2</var> <var>Y_2</var>\n<var>:</var>\n<var>X_N</var> <var>Y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the condition can be satisfied, follow the following format. If the condition cannot be satisfied, print <code>-1</code>.</p>\n<pre><var>m</var>\n<var>d_1</var> <var>d_2</var> <var>...</var> <var>d_m</var>\n<var>w_1</var>\n<var>w_2</var>\n<var>:</var>\n<var>w_N</var>\n</pre>\n<p><var>m</var> and <var>d_i</var> are the configurations of the robot arm. Refer to the problem statement for what each of them means.\nHere, <var>1 \\leq m \\leq 40</var> and <var>1 \\leq d_i \\leq 10^{12}</var> must hold. Also, <var>m</var> and <var>d_i</var> must all be integers.</p>\n<p><var>w_j</var> is a string of length <var>m</var> that represents the way to bring Joint <var>m</var> of the robot arm to point <var>(X_j, Y_j)</var>.\nThe <var>i</var>-th character of <var>w_j</var> should be one of the letters <code>L</code>, <code>R</code>, <code>D</code> and <code>U</code>, representing the mode of Section <var>i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n-1 0\n0 3\n2 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n1 2\nRL\nUU\nDR\n</pre>\n<p>In the given way to bring Joint <var>m</var> of the robot arm to each <var>(X_j, Y_j)</var>, the positions of the joints will be as follows:</p>\n<ul>\n<li>To <var>(X_1, Y_1) = (-1, 0)</var>: First, the position of Joint <var>0</var> is <var>(x_0, y_0) = (0, 0)</var>. As the mode of Section <var>1</var> is <code>R</code>, the position of Joint <var>1</var> is <var>(x_1, y_1) = (1, 0)</var>. Then, as the mode of Section <var>2</var> is <code>L</code>, the position of Joint <var>2</var> is <var>(x_2, y_2) = (-1, 0)</var>.</li>\n<li>To <var>(X_2, Y_2) = (0, 3)</var>: <var>(x_0, y_0) = (0, 0), (x_1, y_1) = (0, 1), (x_2, y_2) = (0, 3)</var>.</li>\n<li>To <var>(X_3, Y_3) = (2, -1)</var>: <var>(x_0, y_0) = (0, 0), (x_1, y_1) = (0, -1), (x_2, y_2) = (2, -1)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n0 0\n1 0\n2 0\n3 0\n4 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1 1\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n1 1\nRU\nUR\n</pre>\n<p>There may be duplicated points among <var>(X_j, Y_j)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3\n-7 -3\n7 3\n-3 -7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n3 1 4 1 5\nLRDUL\nRDULR\nDULRD\n</pre></section>\n</div>\n</span>", "p03246": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A sequence <var>a_1,a_2,... ,a_n</var> is said to be /\\/\\/\\/ when the following conditions are satisfied:</p>\n<ul>\n<li>For each <var>i = 1,2,..., n-2</var>, <var>a_i = a_{i+2}</var>.</li>\n<li>Exactly two different numbers appear in the sequence.</li>\n</ul>\n<p>You are given a sequence <var>v_1,v_2,...,v_n</var> whose length is even.\nWe would like to make this sequence /\\/\\/\\/ by replacing some of its elements.\nFind the minimum number of elements that needs to be replaced.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq n \\leq 10^5</var></li>\n<li><var>n</var> is even.</li>\n<li><var>1 \\leq v_i \\leq 10^5</var></li>\n<li><var>v_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>v_1</var> <var>v_2</var> <var>...</var> <var>v_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of elements that needs to be replaced.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n3 1 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The sequence <var>3,1,3,2</var> is not /\\/\\/\\/, but we can make it /\\/\\/\\/ by replacing one of its elements: for example, replace the fourth element to make it <var>3,1,3,1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n105 119 105 119 105 119\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>The sequence <var>105,119,105,119,105,119</var> is /\\/\\/\\/.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre>\n<p>The elements of the sequence <var>1,1,1,1</var> are all the same, so it is not /\\/\\/\\/.</p></section>\n</div>\n</span>", "p03247": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke is introducing a <strong>robot arm</strong> with the following properties to his factory:</p>\n<ul>\n<li>The robot arm consists of <var>m</var> <strong>sections</strong> and <var>m+1</var> <strong>joints</strong>. The sections are numbered <var>1</var>, <var>2</var>, ..., <var>m</var>, and the joints are numbered <var>0</var>, <var>1</var>, ..., <var>m</var>. Section <var>i</var> connects Joint <var>i-1</var> and Joint <var>i</var>. The length of Section <var>i</var> is <var>d_i</var>.</li>\n<li>For each section, its <strong>mode</strong> can be specified individually. There are four modes: <code>L</code>, <code>R</code>, <code>D</code> and <code>U</code>. The mode of a section decides the direction of that section. If we consider the factory as a coordinate plane, the position of Joint <var>i</var> will be determined as follows (we denote its coordinates as <var>(x_i, y_i)</var>):<ul>\n<li><var>(x_0, y_0) = (0, 0)</var>.</li>\n<li>If the mode of Section <var>i</var> is <code>L</code>, <var>(x_{i}, y_{i}) = (x_{i-1} - d_{i}, y_{i-1})</var>.</li>\n<li>If the mode of Section <var>i</var> is <code>R</code>, <var>(x_{i}, y_{i}) = (x_{i-1} + d_{i}, y_{i-1})</var>.</li>\n<li>If the mode of Section <var>i</var> is <code>D</code>, <var>(x_{i}, y_{i}) = (x_{i-1}, y_{i-1} - d_{i})</var>.</li>\n<li>If the mode of Section <var>i</var> is <code>U</code>, <var>(x_{i}, y_{i}) = (x_{i-1}, y_{i-1} + d_{i})</var>.</li>\n</ul>\n</li>\n</ul>\n<p>Snuke would like to introduce a robot arm so that the position of Joint <var>m</var> can be matched with all of the <var>N</var> points <var>(X_1, Y_1), (X_2, Y_2), ..., (X_N, Y_N)</var> by properly specifying the modes of the sections.\nIs this possible?\nIf so, find such a robot arm and how to bring Joint <var>m</var> to each point <var>(X_j, Y_j)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>-10^9 \\leq X_i \\leq 10^9</var></li>\n<li><var>-10^9 \\leq Y_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li>In the test cases worth <var>300</var> points, <var>-10 \\leq X_i \\leq 10</var> and <var>-10 \\leq Y_i \\leq 10</var> hold.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>Y_1</var>\n<var>X_2</var> <var>Y_2</var>\n<var>:</var>\n<var>X_N</var> <var>Y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the condition can be satisfied, follow the following format. If the condition cannot be satisfied, print <code>-1</code>.</p>\n<pre><var>m</var>\n<var>d_1</var> <var>d_2</var> <var>...</var> <var>d_m</var>\n<var>w_1</var>\n<var>w_2</var>\n<var>:</var>\n<var>w_N</var>\n</pre>\n<p><var>m</var> and <var>d_i</var> are the configurations of the robot arm. Refer to the problem statement for what each of them means.\nHere, <var>1 \\leq m \\leq 40</var> and <var>1 \\leq d_i \\leq 10^{12}</var> must hold. Also, <var>m</var> and <var>d_i</var> must all be integers.</p>\n<p><var>w_j</var> is a string of length <var>m</var> that represents the way to bring Joint <var>m</var> of the robot arm to point <var>(X_j, Y_j)</var>.\nThe <var>i</var>-th character of <var>w_j</var> should be one of the letters <code>L</code>, <code>R</code>, <code>D</code> and <code>U</code>, representing the mode of Section <var>i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n-1 0\n0 3\n2 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n1 2\nRL\nUU\nDR\n</pre>\n<p>In the given way to bring Joint <var>m</var> of the robot arm to each <var>(X_j, Y_j)</var>, the positions of the joints will be as follows:</p>\n<ul>\n<li>To <var>(X_1, Y_1) = (-1, 0)</var>: First, the position of Joint <var>0</var> is <var>(x_0, y_0) = (0, 0)</var>. As the mode of Section <var>1</var> is <code>R</code>, the position of Joint <var>1</var> is <var>(x_1, y_1) = (1, 0)</var>. Then, as the mode of Section <var>2</var> is <code>L</code>, the position of Joint <var>2</var> is <var>(x_2, y_2) = (-1, 0)</var>.</li>\n<li>To <var>(X_2, Y_2) = (0, 3)</var>: <var>(x_0, y_0) = (0, 0), (x_1, y_1) = (0, 1), (x_2, y_2) = (0, 3)</var>.</li>\n<li>To <var>(X_3, Y_3) = (2, -1)</var>: <var>(x_0, y_0) = (0, 0), (x_1, y_1) = (0, -1), (x_2, y_2) = (2, -1)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n0 0\n1 0\n2 0\n3 0\n4 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1 1\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n1 1\nRU\nUR\n</pre>\n<p>There may be duplicated points among <var>(X_j, Y_j)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3\n-7 -3\n7 3\n-3 -7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n3 1 4 1 5\nLRDUL\nRDULR\nDULRD\n</pre></section>\n</div>\n</span>", "p03248": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>s</var> of length <var>n</var>.\nDoes a tree with <var>n</var> vertices that satisfies the following conditions exist?</p>\n<ul>\n<li>The vertices are numbered <var>1,2,..., n</var>.</li>\n<li>The edges are numbered <var>1,2,..., n-1</var>, and Edge <var>i</var> connects Vertex <var>u_i</var> and <var>v_i</var>.</li>\n<li>If the <var>i</var>-th character in <var>s</var> is <code>1</code>, we can have a connected component of size <var>i</var> by removing one edge from the tree.</li>\n<li>If the <var>i</var>-th character in <var>s</var> is <code>0</code>, we cannot have a connected component of size <var>i</var> by removing any one edge from the tree.</li>\n</ul>\n<p>If such a tree exists, construct one such tree.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq n \\leq 10^5</var></li>\n<li><var>s</var> is a string of length <var>n</var> consisting of <code>0</code> and <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If a tree with <var>n</var> vertices that satisfies the conditions does not exist, print <code>-1</code>.</p>\n<p>If a tree with <var>n</var> vertices that satisfies the conditions exist, print <var>n-1</var> lines.\nThe <var>i</var>-th line should contain <var>u_i</var> and <var>v_i</var> with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>-1\n</pre>\n<p>It is impossible to have a connected component of size <var>n</var> after removing one edge from a tree with <var>n</var> vertices.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1110\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 2\n2 3\n3 4\n</pre>\n<p>If Edge <var>1</var> or Edge <var>3</var> is removed, we will have a connected component of size <var>1</var> and another of size <var>3</var>. If Edge <var>2</var> is removed, we will have two connected components, each of size <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1010\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1 2\n1 3\n1 4\n</pre>\n<p>Removing any edge will result in a connected component of size <var>1</var> and another of size <var>3</var>.</p></section>\n</div>\n</span>", "p03250": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have decided to give an allowance to your child depending on the outcome of the game that he will play now.</p>\n<p>The game is played as follows:</p>\n<ul>\n<li>There are three \"integer panels\", each with a digit between <var>1</var> and <var>9</var> (inclusive) printed on it, and one \"operator panel\" with a <code>+</code> printed on it.</li>\n<li>The player should construct a formula of the form <var>X + Y</var>, by arranging the four panels from left to right. (The operator panel should not be placed at either end of the formula.)</li>\n<li>Then, the amount of the allowance will be equal to the resulting value of the formula.</li>\n</ul>\n<p>Given the values <var>A, B</var> and <var>C</var> printed on the integer panels used in the game, find the maximum possible amount of the allowance.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A, B, C \\leq 9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible amount of the allowance.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 5 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>53\n</pre>\n<p>The amount of the allowance will be <var>53</var> when the panels are arranged as <code>52+1</code>, and this is the maximum possible amount.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9 9 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>108\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 6 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>82\n</pre></section>\n</div>\n</span>", "p03251": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Our world is one-dimensional, and ruled by two empires called Empire A and Empire B.</p>\n<p>The capital of Empire A is located at coordinate <var>X</var>, and that of Empire B is located at coordinate <var>Y</var>.</p>\n<p>One day, Empire A becomes inclined to put the cities at coordinates <var>x_1, x_2, ..., x_N</var> under its control, and Empire B becomes inclined to put the cities at coordinates <var>y_1, y_2, ..., y_M</var> under its control.</p>\n<p>If there exists an integer <var>Z</var> that satisfies all of the following three conditions, they will come to an agreement, but otherwise war will break out.</p>\n<ul>\n<li><var>X &lt; Z \\leq Y</var></li>\n<li><var>x_1, x_2, ..., x_N &lt; Z</var></li>\n<li><var>y_1, y_2, ..., y_M \\geq Z</var></li>\n</ul>\n<p>Determine if war will break out.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N, M \\leq 100</var></li>\n<li><var>-100 \\leq X &lt; Y \\leq 100</var></li>\n<li><var>-100 \\leq x_i, y_i \\leq 100</var></li>\n<li><var>x_1, x_2, ..., x_N \\neq X</var></li>\n<li><var>x_i</var> are all different.</li>\n<li><var>y_1, y_2, ..., y_M \\neq Y</var></li>\n<li><var>y_i</var> are all different.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>X</var> <var>Y</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n<var>y_1</var> <var>y_2</var> <var>...</var> <var>y_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If war will break out, print <code>War</code>; otherwise, print <code>No War</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2 10 20\n8 15 13\n16 22\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>No War\n</pre>\n<p>The choice <var>Z = 16</var> satisfies all of the three conditions as follows, thus they will come to an agreement.</p>\n<ul>\n<li><var>X = 10 &lt; 16 \\leq 20 = Y</var></li>\n<li><var>8, 15, 13 &lt; 16</var></li>\n<li><var>16, 22 \\geq 16</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 2 -48 -1\n-20 -35 -91 -23\n-22 66\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>War\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 3 6 8\n-10 3 1 5 -100\n100 6 14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>War\n</pre></section>\n</div>\n</span>", "p03252": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given strings <var>S</var> and <var>T</var> consisting of lowercase English letters.</p>\n<p>You can perform the following operation on <var>S</var> any number of times:</p>\n<p>Operation: Choose two distinct lowercase English letters <var>c_1</var> and <var>c_2</var>, then replace every occurrence of <var>c_1</var> with <var>c_2</var>, and every occurrence of <var>c_2</var> with <var>c_1</var>.</p>\n<p>Determine if <var>S</var> and <var>T</var> can be made equal by performing the operation zero or more times.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 2 \\times 10^5</var></li>\n<li><var>|S| = |T|</var></li>\n<li><var>S</var> and <var>T</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> and <var>T</var> can be made equal, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>azzel\napple\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><code>azzel</code> can be changed to <code>apple</code>, as follows:</p>\n<ul>\n<li>Choose <code>e</code> as <var>c_1</var> and <code>l</code> as <var>c_2</var>. <code>azzel</code> becomes <code>azzle</code>.</li>\n<li>Choose <code>z</code> as <var>c_1</var> and <code>p</code> as <var>c_2</var>. <code>azzle</code> becomes <code>apple</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>chokudai\nredcoder\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>No sequences of operation can change <code>chokudai</code> to <code>redcoder</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>abcdefghijklmnopqrstuvwxyz\nibyhqfrekavclxjstdwgpzmonu\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p03254": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> children, numbered <var>1, 2, ..., N</var>.</p>\n<p>Snuke has decided to distribute <var>x</var> sweets among them.\nHe needs to give out all the <var>x</var> sweets, but some of the children may get zero sweets.</p>\n<p>For each <var>i</var> (<var>1 \\leq i \\leq N</var>), Child <var>i</var> will be <em>happy</em> if he/she gets exactly <var>a_i</var> sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq x \\leq 10^9</var></li>\n<li><var>1 \\leq a_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>x</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of happy children.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 70\n20 30 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>One optimal way to distribute sweets is <var>(20, 30, 20)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 10\n20 30 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>The optimal way to distribute sweets is <var>(0, 0, 10)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 1111\n1 10 100 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre>\n<p>The optimal way to distribute sweets is <var>(1, 10, 100, 1000)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>2 10\n20 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0\n</pre>\n<p>No children will be happy, no matter how the sweets are distributed.</p></section>\n</div>\n</span>", "p03253": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given positive integers <var>N</var> and <var>M</var>.</p>\n<p>How many sequences <var>a</var> of length <var>N</var> consisting of positive integers satisfy <var>a_1 \\times a_2 \\times ... \\times a_N = M</var>? Find the count modulo <var>10^9+7</var>.</p>\n<p>Here, two sequences <var>a'</var> and <var>a''</var> are considered different when there exists some <var>i</var> such that <var>a_i' \\neq a_i''</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the sequences consisting of positive integers that satisfy the condition, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Four sequences satisfy the condition: <var>\\{a_1, a_2\\} = \\{1, 6\\}, \\{2, 3\\}, \\{3, 2\\}</var> and <var>\\{6, 1\\}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>18\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>957870001\n</pre></section>\n</div>\n</span>", "p03255": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has decided to use a robot to clean his room.</p>\n<p>There are <var>N</var> pieces of trash on a number line.\nThe <var>i</var>-th piece from the left is at position <var>x_i</var>.\nWe would like to put all of them in a trash bin at position <var>0</var>.</p>\n<p>For the positions of the pieces of trash, <var>0 &lt; x_1 &lt; x_2 &lt; ... &lt; x_{N} \\leq 10^{9}</var> holds.</p>\n<p>The robot is initially at position <var>0</var>.\nIt can freely move left and right along the number line, pick up a piece of trash when it comes to the position of that piece, carry any number of pieces of trash and put them in the trash bin when it comes to position <var>0</var>. It is not allowed to put pieces of trash anywhere except in the trash bin.</p>\n<p>The robot consumes <var>X</var> points of energy when the robot picks up a piece of trash, or put pieces of trash in the trash bin. (Putting any number of pieces of trash in the trash bin consumes <var>X</var> points of energy.)\nAlso, the robot consumes <var>(k+1)^{2}</var> points of energy to travel by a distance of <var>1</var> when the robot is carrying <var>k</var> pieces of trash.</p>\n<p>Find the minimum amount of energy required to put all the <var>N</var> pieces of trash in the trash bin.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^{5}</var></li>\n<li><var>0 &lt; x_1 &lt; ... &lt; x_N \\leq 10^9</var></li>\n<li><var>1 \\leq X \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Scores</h3><ul>\n<li><var>400</var> points will be awarded for passing the test set satisfying <var>N \\leq 2000</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 100\n1 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>355\n</pre>\n<ul>\n<li>Travel to position <var>10</var> by consuming <var>10</var> points of energy.</li>\n<li>Pick up the piece of trash by consuming <var>100</var> points of energy.</li>\n<li>Travel to position <var>1</var> by consuming <var>36</var> points of energy.</li>\n<li>Pick up the piece of trash by consuming <var>100</var> points of energy.</li>\n<li>Travel to position <var>0</var> by consuming <var>9</var> points of energy.</li>\n<li>Put the two pieces of trash in the trash bin by consuming <var>100</var> points of energy.</li>\n</ul>\n<p>This strategy consumes a total of <var>10+100+36+100+9+100=355</var> points of energy.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 1\n1 999999997 999999998 999999999 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>19999999983\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 8851025\n38 87 668 3175 22601 65499 90236 790604 4290609 4894746\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>150710136\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>16 10\n1 7 12 27 52 75 731 13856 395504 534840 1276551 2356789 9384806 19108104 82684732 535447408\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>3256017715\n</pre></section>\n</div>\n</span>", "p03257": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>.</p>\n<p>Construct any one <var>N</var>-by-<var>N</var> matrix <var>a</var> that satisfies the conditions below. It can be proved that a solution always exists under the constraints of this problem.</p>\n<ul>\n<li><var>1 \\leq a_{i,j} \\leq 10^{15}</var></li>\n<li><var>a_{i,j}</var> are pairwise distinct integers.</li>\n<li>There exists a positive integer <var>m</var> such that the following holds: Let <var>x</var> and <var>y</var> be two elements of the matrix that are vertically or horizontally adjacent. Then, <var>{\\rm max}(x,y)</var> <var>{\\rm mod}</var> <var>{\\rm min}(x,y)</var> is always <var>m</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 500</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print your solution in the following format:</p>\n<pre><var>a_{1,1}</var> <var>...</var> <var>a_{1,N}</var>\n<var>:</var>\n<var>a_{N,1}</var> <var>...</var> <var>a_{N,N}</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4 7\n23 10\n</pre>\n<ul>\n<li>For any two elements <var>x</var> and <var>y</var> that are vertically or horizontally adjacent, <var>{\\rm max}(x,y)</var> <var>{\\rm mod}</var> <var>{\\rm min}(x,y)</var> is always <var>3</var>.</li>\n</ul></section>\n</div>\n</span>", "p03258": "<span class=\"lang-en\">\n<p>Score : <var>1300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a string <var>s</var> consisting of <code>a</code> and <code>b</code>.\nSnuke can perform the following two kinds of operation any number of times in any order:</p>\n<ul>\n<li>Choose an occurrence of <code>aa</code> as a substring, and replace it with <code>b</code>.</li>\n<li>Choose an occurrence of <code>bb</code> as a substring, and replace it with <code>a</code>.</li>\n</ul>\n<p>How many strings <var>s</var> can be obtained by this sequence of operations?\nFind the count modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |s| \\leq 10^5</var></li>\n<li><var>s</var> consists of <code>a</code> and <code>b</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of strings <var>s</var> that can be obtained, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>aaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>Six strings can be obtained:</p>\n<ul>\n<li><code>aaaa</code></li>\n<li><code>aab</code></li>\n<li><code>aba</code></li>\n<li><code>baa</code></li>\n<li><code>bb</code></li>\n<li><code>a</code></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>aabb\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>Five strings can be obtained:</p>\n<ul>\n<li><code>aabb</code></li>\n<li><code>aaa</code></li>\n<li><code>bbb</code></li>\n<li><code>ab</code></li>\n<li><code>ba</code></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>ababababa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n<p>Snuke cannot perform any operation.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>babbabaaba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>35\n</pre></section>\n</div>\n</span>", "p03260": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given integers <var>A</var> and <var>B</var>, each between <var>1</var> and <var>3</var> (inclusive).</p>\n<p>Determine if there is an integer <var>C</var> between <var>1</var> and <var>3</var> (inclusive) such that <var>A \\times B \\times C</var> is an odd number.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A, B \\leq 3</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is an integer <var>C</var> between <var>1</var> and <var>3</var> that satisfies the condition, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Let <var>C = 3</var>. Then, <var>A \\times B \\times C = 3 \\times 1 \\times 3 = 9</var>, which is an odd number.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03261": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is practicing <em>shiritori</em> alone again today.</p>\n<p>Shiritori is a game as follows:</p>\n<ul>\n<li>In the first turn, a player announces any one word.</li>\n<li>In the subsequent turns, a player announces a word that satisfies the following conditions:<ul>\n<li>That word is not announced before.</li>\n<li>The first character of that word is the same as the last character of the last word announced.</li>\n</ul>\n</li>\n</ul>\n<p>In this game, he is practicing to announce as many words as possible in ten seconds.</p>\n<p>You are given the number of words Takahashi announced, <var>N</var>, and the <var>i</var>-th word he announced, <var>W_i</var>, for each <var>i</var>. Determine if the rules of shiritori was observed, that is, every word announced by him satisfied the conditions.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var> is an integer satisfying <var>2 \\leq N \\leq 100</var>.</li>\n<li><var>W_i</var> is a string of length between <var>1</var> and <var>10</var> (inclusive) consisting of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>W_1</var>\n<var>W_2</var>\n<var>:</var>\n<var>W_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If every word announced by Takahashi satisfied the conditions, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\nhoge\nenglish\nhoge\nenigma\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>No\n</pre>\n<p>As <code>hoge</code> is announced multiple times, the rules of shiritori was not observed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9\nbasic\nc\ncpp\nphp\npython\nnadesico\nocaml\nlua\nassembly\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\na\naa\naaa\naaaa\naaaaa\naaaaaa\naaa\naaaaaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3\nabc\narc\nagc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03262": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> cities on a number line. The <var>i</var>-th city is located at coordinate <var>x_i</var>.</p>\n<p>Your objective is to visit all these cities at least once.</p>\n<p>In order to do so, you will first set a positive integer <var>D</var>.</p>\n<p>Then, you will depart from coordinate <var>X</var> and perform Move <var>1</var> and Move <var>2</var> below, as many times as you like:</p>\n<ul>\n<li>Move <var>1</var>: travel from coordinate <var>y</var> to coordinate <var>y + D</var>.</li>\n<li>Move <var>2</var>: travel from coordinate <var>y</var> to coordinate <var>y - D</var>.</li>\n</ul>\n<p>Find the maximum value of <var>D</var> that enables you to visit all the cities.</p>\n<p>Here, to visit a city is to travel to the coordinate where that city is located.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq X \\leq 10^9</var></li>\n<li><var>1 \\leq x_i \\leq 10^9</var></li>\n<li><var>x_i</var> are all different.</li>\n<li><var>x_1, x_2, ..., x_N \\neq X</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum value of <var>D</var> that enables you to visit all the cities.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 7 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Setting <var>D = 2</var> enables you to visit all the cities as follows, and this is the maximum value of such <var>D</var>.</p>\n<ul>\n<li>Perform Move <var>2</var> to travel to coordinate <var>1</var>.</li>\n<li>Perform Move <var>1</var> to travel to coordinate <var>3</var>.</li>\n<li>Perform Move <var>1</var> to travel to coordinate <var>5</var>.</li>\n<li>Perform Move <var>1</var> to travel to coordinate <var>7</var>.</li>\n<li>Perform Move <var>1</var> to travel to coordinate <var>9</var>.</li>\n<li>Perform Move <var>1</var> to travel to coordinate <var>11</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 81\n33 105 57\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>24\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>999999999\n</pre></section>\n</div>\n</span>", "p03264": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the number of ways to choose a pair of an even number and an odd number from the positive integers between <var>1</var> and <var>K</var> (inclusive). The order does not matter.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2\\leq K\\leq 100</var></li>\n<li><var>K</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to choose a pair of an even number and an odd number from the positive integers between <var>1</var> and <var>K</var> (inclusive).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Two pairs can be chosen: <var>(2,1)</var> and <var>(2,3)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>30\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>625\n</pre></section>\n</div>\n</span>", "p03263": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a grid of square cells with <var>H</var> horizontal rows and <var>W</var> vertical columns. The cell at the <var>i</var>-th row and the <var>j</var>-th column will be denoted as Cell <var>(i, j)</var>.</p>\n<p>In Cell <var>(i, j)</var>, <var>a_{ij}</var> coins are placed.</p>\n<p>You can perform the following operation any number of times:</p>\n<p>Operation: Choose a cell that was not chosen before and contains one or more coins, then move one of those coins to a vertically or horizontally adjacent cell.</p>\n<p>Maximize the number of cells containing an even number of coins.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq H, W \\leq 500</var></li>\n<li><var>0 \\leq a_{ij} \\leq 9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>a_{11}</var> <var>a_{12}</var> <var>...</var> <var>a_{1W}</var>\n<var>a_{21}</var> <var>a_{22}</var> <var>...</var> <var>a_{2W}</var>\n<var>:</var>\n<var>a_{H1}</var> <var>a_{H2}</var> <var>...</var> <var>a_{HW}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print a sequence of operations that maximizes the number of cells containing an even number of coins, in the following format:</p>\n<pre><var>N</var>\n<var>y_1</var> <var>x_1</var> <var>y_1'</var> <var>x_1'</var>\n<var>y_2</var> <var>x_2</var> <var>y_2'</var> <var>x_2'</var>\n<var>:</var>\n<var>y_N</var> <var>x_N</var> <var>y_N'</var> <var>x_N'</var>\n</pre>\n<p>That is, in the first line, print an integer <var>N</var> between <var>0</var> and <var>H \\times W</var> (inclusive), representing the number of operations.</p>\n<p>In the <var>(i+1)</var>-th line (<var>1 \\leq i \\leq N</var>), print four integers <var>y_i, x_i, y_i'</var> and <var>x_i'</var> (<var>1 \\leq y_i, y_i' \\leq H</var> and <var>1 \\leq x_i, x_i' \\leq W</var>), representing the <var>i</var>-th operation. These four integers represents the operation of moving one of the coins placed in Cell <var>(y_i, x_i)</var> to a vertically or horizontally adjacent cell, <var>(y_i', x_i')</var>.</p>\n<p>Note that if the specified operation violates the specification in the problem statement or the output format is invalid, it will result in <em>Wrong Answer</em>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n1 2 3\n0 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n2 2 2 3\n1 1 1 2\n1 3 1 2\n</pre>\n<p>Every cell contains an even number of coins after the following sequence of operations:</p>\n<ul>\n<li>Move the coin in Cell <var>(2, 2)</var> to Cell <var>(2, 3)</var>.</li>\n<li>Move the coin in Cell <var>(1, 1)</var> to Cell <var>(1, 2)</var>.</li>\n<li>Move one of the coins in Cell <var>(1, 3)</var> to Cell <var>(1, 2)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n1 0\n2 1\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n1 1 1 2\n1 2 2 2\n3 1 3 2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 5\n9 9 9 9 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n1 1 1 2\n1 3 1 4\n</pre></section>\n</div>\n</span>", "p03266": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given integers <var>N</var> and <var>K</var>. Find the number of triples <var>(a,b,c)</var> of positive integers not greater than <var>N</var> such that <var>a+b,b+c</var> and <var>c+a</var> are all multiples of <var>K</var>.\nThe order of <var>a,b,c</var> does matter, and some of them can be the same.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,K \\leq 2\\times 10^5</var></li>\n<li><var>N</var> and <var>K</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of triples <var>(a,b,c)</var> of positive integers not greater than <var>N</var> such that <var>a+b,b+c</var> and <var>c+a</var> are all multiples of <var>K</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p><var>(1,1,1),(1,1,3),(1,3,1),(1,3,3),(2,2,2),(3,1,1),(3,1,3),(3,3,1)</var> and <var>(3,3,3)</var> satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31415 9265\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>27\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>35897 932\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>114191\n</pre></section>\n</div>\n</span>", "p03268": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given integers <var>N</var> and <var>K</var>. Find the number of triples <var>(a,b,c)</var> of positive integers not greater than <var>N</var> such that <var>a+b,b+c</var> and <var>c+a</var> are all multiples of <var>K</var>.\nThe order of <var>a,b,c</var> does matter, and some of them can be the same.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,K \\leq 2\\times 10^5</var></li>\n<li><var>N</var> and <var>K</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of triples <var>(a,b,c)</var> of positive integers not greater than <var>N</var> such that <var>a+b,b+c</var> and <var>c+a</var> are all multiples of <var>K</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p><var>(1,1,1),(1,1,3),(1,3,1),(1,3,3),(2,2,2),(3,1,1),(3,1,3),(3,3,1)</var> and <var>(3,3,3)</var> satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31415 9265\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>27\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>35897 932\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>114191\n</pre></section>\n</div>\n</span>", "p03270": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi throws <var>N</var> dice, each having <var>K</var> sides with all integers from <var>1</var> to <var>K</var>. The dice are NOT pairwise distinguishable.\nFor each <var>i=2,3,...,2K</var>, find the following value modulo <var>998244353</var>:</p>\n<ul>\n<li>The number of combinations of <var>N</var> sides shown by the dice such that the sum of no two different sides is <var>i</var>.</li>\n</ul>\n<p>Note that the dice are NOT distinguishable, that is, two combinations are considered different when there exists an integer <var>k</var> such that the number of dice showing <var>k</var> is different in those two.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 2000</var></li>\n<li><var>2 \\leq N \\leq 2000</var></li>\n<li><var>K</var> and <var>N</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var> <var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>2K-1</var> integers. The <var>t</var>-th of them <var>(1\\leq t\\leq 2K-1)</var> should be the answer for <var>i=t+1</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n7\n4\n7\n7\n</pre>\n<ul>\n<li>For <var>i=2</var>, the combinations <var>(1,2,2),(1,2,3),(1,3,3),(2,2,2),(2,2,3),(2,3,3),(3,3,3)</var> satisfy the condition, so the answer is <var>7</var>.</li>\n<li>For <var>i=3</var>, the combinations <var>(1,1,1),(1,1,3),(1,3,3),(2,2,2),(2,2,3),(2,3,3),(3,3,3)</var> satisfy the condition, so the answer is <var>7</var>.</li>\n<li>For <var>i=4</var>, the combinations <var>(1,1,1),(1,1,2),(2,3,3),(3,3,3)</var> satisfy the condition, so the answer is <var>4</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>36\n36\n20\n20\n20\n36\n36\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>149393349\n149393349\n668669001\n668669001\n4000002\n4000002\n4000002\n668669001\n668669001\n149393349\n149393349\n</pre></section>\n</div>\n</span>", "p03272": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an <var>N</var>-car train.</p>\n<p>You are given an integer <var>i</var>. Find the value of <var>j</var> such that the following statement is true: \"the <var>i</var>-th car from the front of the train is the <var>j</var>-th car from the back.\"</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>i</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The second car from the front of a <var>4</var>-car train is the third car from the back.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03273": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a grid of squares with <var>H</var> horizontal rows and <var>W</var> vertical columns.\nThe square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left is represented as <var>(i, j)</var>.\nEach square is black or white.\nThe color of the square is given as an <var>H</var>-by-<var>W</var> matrix <var>(a_{i, j})</var>.\nIf <var>a_{i, j}</var> is <code>.</code>, the square <var>(i, j)</var> is white; if <var>a_{i, j}</var> is <code>#</code>, the square <var>(i, j)</var> is black.</p>\n<p>Snuke is compressing this grid.\nHe will do so by repeatedly performing the following operation while there is a row or column that consists only of white squares:</p>\n<ul>\n<li>Operation: choose any one row or column that consists only of white squares, remove it and delete the space between the rows or columns.</li>\n</ul>\n<p>It can be shown that the final state of the grid is uniquely determined regardless of what row or column is chosen in each operation.\nFind the final state of the grid.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H, W \\leq 100</var></li>\n<li><var>a_{i, j}</var> is <code>.</code> or <code>#</code>.</li>\n<li>There is at least one black square in the whole grid.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>a_{1, 1}...a_{1, W}</var>\n<var>:</var>\n<var>a_{H, 1}...a_{H, W}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the final state of the grid in the same format as input (without the numbers of rows and columns); see the samples for clarity.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 4\n##.#\n....\n##.#\n.#.#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>###\n###\n.##\n</pre>\n<p>The second row and the third column in the original grid will be removed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n#..\n.#.\n..#\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>#..\n.#.\n..#\n</pre>\n<p>As there is no row or column that consists only of white squares, no operation will be performed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 5\n.....\n.....\n..#..\n.....\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>#\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7 6\n......\n....#.\n.#....\n..#...\n..#...\n......\n.#..#.\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>..#\n#..\n.#.\n.#.\n#.#\n</pre></section>\n</div>\n</span>", "p03274": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> candles placed on a number line.\nThe <var>i</var>-th candle from the left is placed on coordinate <var>x_i</var>.\nHere, <var>x_1 &lt; x_2 &lt; ... &lt; x_N</var> holds.</p>\n<p>Initially, no candles are burning.\nSnuke decides to light <var>K</var> of the <var>N</var> candles.</p>\n<p>Now, he is at coordinate <var>0</var>.\nHe can move left and right along the line with speed <var>1</var>.\nHe can also light a candle when he is at the same position as the candle, in negligible time.</p>\n<p>Find the minimum time required to light <var>K</var> candles.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n<li><var>x_i</var> is an integer.</li>\n<li><var>|x_i| \\leq 10^8</var></li>\n<li><var>x_1 &lt; x_2 &lt; ... &lt; x_N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum time required to light <var>K</var> candles.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n-30 -10 10 20 50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>40\n</pre>\n<p>He should move and light candles as follows:</p>\n<ul>\n<li>Move from coordinate <var>0</var> to <var>-10</var>.</li>\n<li>Light the second candle from the left.</li>\n<li>Move from coordinate <var>-10</var> to <var>10</var>.</li>\n<li>Light the third candle from the left.</li>\n<li>Move from coordinate <var>10</var> to <var>20</var>.</li>\n<li>Light the fourth candle from the left.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n10 20 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>20\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<ul>\n<li>There may be a candle placed at coordinate <var>0</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8 5\n-9 -7 -4 -3 1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>10\n</pre></section>\n</div>\n</span>", "p03275": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will define the <strong>median</strong> of a sequence <var>b</var> of length <var>M</var>, as follows:</p>\n<ul>\n<li>Let <var>b'</var> be the sequence obtained by sorting <var>b</var> in non-decreasing order. Then, the value of the <var>(M / 2 + 1)</var>-th element of <var>b'</var> is the median of <var>b</var>. Here, <var>/</var> is integer division, rounding down.</li>\n</ul>\n<p>For example, the median of <var>(10, 30, 20)</var> is <var>20</var>; the median of <var>(10, 30, 20, 40)</var> is <var>30</var>; the median of <var>(10, 10, 10, 20, 30)</var> is <var>10</var>.</p>\n<p>Snuke comes up with the following problem.</p>\n<p>You are given a sequence <var>a</var> of length <var>N</var>.\nFor each pair <var>(l, r)</var> (<var>1 \\leq l \\leq r \\leq N</var>), let <var>m_{l, r}</var> be the median of the contiguous subsequence <var>(a_l, a_{l + 1}, ..., a_r)</var> of <var>a</var>.\nWe will list <var>m_{l, r}</var> for all pairs <var>(l, r)</var> to create a new sequence <var>m</var>.\nFind the median of <var>m</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>a_i</var> is an integer.</li>\n<li><var>1 \\leq a_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the median of <var>m</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n10 30 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>30\n</pre>\n<p>The median of each contiguous subsequence of <var>a</var> is as follows:</p>\n<ul>\n<li>The median of <var>(10)</var> is <var>10</var>.</li>\n<li>The median of <var>(30)</var> is <var>30</var>.</li>\n<li>The median of <var>(20)</var> is <var>20</var>.</li>\n<li>The median of <var>(10, 30)</var> is <var>30</var>.</li>\n<li>The median of <var>(30, 20)</var> is <var>30</var>.</li>\n<li>The median of <var>(10, 30, 20)</var> is <var>20</var>.</li>\n</ul>\n<p>Thus, <var>m = (10, 30, 20, 30, 30, 20)</var> and the median of <var>m</var> is <var>30</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n5 9 5 9 8 9 3 5 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03276": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> candles placed on a number line.\nThe <var>i</var>-th candle from the left is placed on coordinate <var>x_i</var>.\nHere, <var>x_1 &lt; x_2 &lt; ... &lt; x_N</var> holds.</p>\n<p>Initially, no candles are burning.\nSnuke decides to light <var>K</var> of the <var>N</var> candles.</p>\n<p>Now, he is at coordinate <var>0</var>.\nHe can move left and right along the line with speed <var>1</var>.\nHe can also light a candle when he is at the same position as the candle, in negligible time.</p>\n<p>Find the minimum time required to light <var>K</var> candles.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n<li><var>x_i</var> is an integer.</li>\n<li><var>|x_i| \\leq 10^8</var></li>\n<li><var>x_1 &lt; x_2 &lt; ... &lt; x_N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum time required to light <var>K</var> candles.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n-30 -10 10 20 50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>40\n</pre>\n<p>He should move and light candles as follows:</p>\n<ul>\n<li>Move from coordinate <var>0</var> to <var>-10</var>.</li>\n<li>Light the second candle from the left.</li>\n<li>Move from coordinate <var>-10</var> to <var>10</var>.</li>\n<li>Light the third candle from the left.</li>\n<li>Move from coordinate <var>10</var> to <var>20</var>.</li>\n<li>Light the fourth candle from the left.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 2\n10 20 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>20\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<ul>\n<li>There may be a candle placed at coordinate <var>0</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8 5\n-9 -7 -4 -3 1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>10\n</pre></section>\n</div>\n</span>", "p03277": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will define the <strong>median</strong> of a sequence <var>b</var> of length <var>M</var>, as follows:</p>\n<ul>\n<li>Let <var>b'</var> be the sequence obtained by sorting <var>b</var> in non-decreasing order. Then, the value of the <var>(M / 2 + 1)</var>-th element of <var>b'</var> is the median of <var>b</var>. Here, <var>/</var> is integer division, rounding down.</li>\n</ul>\n<p>For example, the median of <var>(10, 30, 20)</var> is <var>20</var>; the median of <var>(10, 30, 20, 40)</var> is <var>30</var>; the median of <var>(10, 10, 10, 20, 30)</var> is <var>10</var>.</p>\n<p>Snuke comes up with the following problem.</p>\n<p>You are given a sequence <var>a</var> of length <var>N</var>.\nFor each pair <var>(l, r)</var> (<var>1 \\leq l \\leq r \\leq N</var>), let <var>m_{l, r}</var> be the median of the contiguous subsequence <var>(a_l, a_{l + 1}, ..., a_r)</var> of <var>a</var>.\nWe will list <var>m_{l, r}</var> for all pairs <var>(l, r)</var> to create a new sequence <var>m</var>.\nFind the median of <var>m</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>a_i</var> is an integer.</li>\n<li><var>1 \\leq a_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the median of <var>m</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n10 30 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>30\n</pre>\n<p>The median of each contiguous subsequence of <var>a</var> is as follows:</p>\n<ul>\n<li>The median of <var>(10)</var> is <var>10</var>.</li>\n<li>The median of <var>(30)</var> is <var>30</var>.</li>\n<li>The median of <var>(20)</var> is <var>20</var>.</li>\n<li>The median of <var>(10, 30)</var> is <var>30</var>.</li>\n<li>The median of <var>(30, 20)</var> is <var>30</var>.</li>\n<li>The median of <var>(10, 30, 20)</var> is <var>20</var>.</li>\n</ul>\n<p>Thus, <var>m = (10, 30, 20, 30, 30, 20)</var> and the median of <var>m</var> is <var>30</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n5 9 5 9 8 9 3 5 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03279": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> robots and <var>M</var> exits on a number line.\nThe <var>N + M</var> coordinates of these are all integers and all distinct.\nFor each <var>i</var> (<var>1 \\leq i \\leq N</var>), the coordinate of the <var>i</var>-th robot from the left is <var>x_i</var>.\nAlso, for each <var>j</var> (<var>1 \\leq j \\leq M</var>), the coordinate of the <var>j</var>-th exit from the left is <var>y_j</var>.</p>\n<p>Snuke can repeatedly perform the following two kinds of operations in any order to move all the robots simultaneously:</p>\n<ul>\n<li>Increment the coordinates of all the robots on the number line by <var>1</var>.</li>\n<li>Decrement the coordinates of all the robots on the number line by <var>1</var>.</li>\n</ul>\n<p>Each robot will disappear from the number line when its position coincides with that of an exit, going through that exit.\nSnuke will continue performing operations until all the robots disappear.</p>\n<p>When all the robots disappear, how many combinations of exits can be used by the robots?\nFind the count modulo <var>10^9 + 7</var>.\nHere, two combinations of exits are considered different when there is a robot that used different exits in those two combinations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, M \\leq 10^5</var></li>\n<li><var>1 \\leq x_1 &lt; x_2 &lt; ... &lt; x_N \\leq 10^9</var></li>\n<li><var>1 \\leq y_1 &lt; y_2 &lt; ... &lt; y_M \\leq 10^9</var></li>\n<li>All given coordinates are integers.</li>\n<li>All given coordinates are distinct.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n<var>y_1</var> <var>y_2</var> <var>...</var> <var>y_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the combinations of exits that can be used by the robots when all the robots disappear, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n2 3\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The <var>i</var>-th robot from the left will be called Robot <var>i</var>, and the <var>j</var>-th exit from the left will be called Exit <var>j</var>.\nThere are three possible combinations of exits (the exit used by Robot <var>1</var>, the exit used by Robot <var>2</var>) as follows:</p>\n<ul>\n<li><var>(</var>Exit <var>1</var><var>,</var> Exit <var>1</var><var>)</var></li>\n<li><var>(</var>Exit <var>1</var><var>,</var> Exit <var>2</var><var>)</var></li>\n<li><var>(</var>Exit <var>2</var><var>,</var> Exit <var>2</var><var>)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4\n2 5 10\n1 3 7 13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre>\n<p>The exit for each robot can be chosen independently, so there are <var>2^3 = 8</var> possible combinations of exits.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 1\n1 2 4 5\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n<p>Every robot uses Exit <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4 5\n2 5 7 11\n1 3 6 9 13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>10 10\n4 13 15 18 19 20 21 22 25 27\n1 5 11 12 14 16 23 26 29 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>22\n</pre></section>\n</div>\n</span>", "p03281": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>The number <var>105</var> is quite special - it is odd but still it has eight divisors.\nNow, your task is this: how many odd numbers with exactly eight positive divisors are there between <var>1</var> and <var>N</var> (inclusive)?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> is an integer between <var>1</var> and <var>200</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the count.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>105\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Among the numbers between <var>1</var> and <var>105</var>, the only number that is odd and has exactly eight divisors is <var>105</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p><var>1</var> has one divisor. <var>3</var>, <var>5</var> and <var>7</var> are all prime and have two divisors. Thus, there is no number that satisfies the condition.</p></section>\n</div>\n</span>", "p03283": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>In Takahashi Kingdom, there is a east-west railroad and <var>N</var> cities along it, numbered <var>1</var>, <var>2</var>, <var>3</var>, ..., <var>N</var> from west to east.\nA company called <em>AtCoder Express</em> possesses <var>M</var> trains, and the train <var>i</var> runs from City <var>L_i</var> to City <var>R_i</var> (it is possible that <var>L_i = R_i</var>).\nTakahashi the king is interested in the following <var>Q</var> matters:</p>\n<ul>\n<li>The number of the trains that runs <strong>strictly within</strong> the section from City <var>p_i</var> to City <var>q_i</var>, that is, the number of trains <var>j</var> such that <var>p_i \\leq L_j</var> and <var>R_j \\leq q_i</var>.</li>\n</ul>\n<p>Although he is genius, this is too much data to process by himself. Find the answer for each of these <var>Q</var> queries to help him.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> is an integer between <var>1</var> and <var>500</var> (inclusive).</li>\n<li><var>M</var> is an integer between <var>1</var> and <var>200 \\ 000</var> (inclusive).</li>\n<li><var>Q</var> is an integer between <var>1</var> and <var>100 \\ 000</var> (inclusive).</li>\n<li><var>1 \\leq L_i \\leq R_i \\leq N</var> <var>(1 \\leq i \\leq M)</var></li>\n<li><var>1 \\leq p_i \\leq q_i \\leq N</var> <var>(1 \\leq i \\leq Q)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>Q</var>\n<var>L_1</var> <var>R_1</var>\n<var>L_2</var> <var>R_2</var>\n<var>:</var>\n<var>L_M</var> <var>R_M</var>\n<var>p_1</var> <var>q_1</var>\n<var>p_2</var> <var>q_2</var>\n<var>:</var>\n<var>p_Q</var> <var>q_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print <var>Q</var> lines. The <var>i</var>-th line should contain the number of the trains that runs <strong>strictly within</strong> the section from City <var>p_i</var> to City <var>q_i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 1\n1 1\n1 2\n2 2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>As all the trains runs within the section from City <var>1</var> to City <var>2</var>, the answer to the only query is <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 3 2\n1 5\n2 8\n7 10\n1 7\n3 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n1\n</pre>\n<p>The first query is on the section from City <var>1</var> to <var>7</var>. There is only one train that runs strictly within that section: Train <var>1</var>.\nThe second query is on the section from City <var>3</var> to <var>10</var>. There is only one train that runs strictly within that section: Train <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 10 10\n1 6\n2 9\n4 5\n4 7\n4 7\n5 8\n6 6\n6 7\n7 9\n10 10\n1 8\n1 9\n1 10\n2 8\n2 9\n2 10\n3 8\n3 9\n3 10\n1 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7\n9\n10\n6\n8\n9\n6\n7\n8\n10\n</pre></section>\n</div>\n</span>", "p03284": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has decided to distribute <var>N</var> AtCoder Crackers to <var>K</var> users of as evenly as possible.\nWhen all the crackers are distributed, find the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,K \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>When the users receive two, two and three crackers, respectively, the (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user, is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>The crackers can be distributed evenly.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03285": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><em>La Confiserie d'ABC</em> sells cakes at <var>4</var> dollars each and doughnuts at <var>7</var> dollars each.\nDetermine if there is a way to buy some of them for exactly <var>N</var> dollars. You can buy two or more doughnuts and two or more cakes, and you can also choose to buy zero doughnuts or zero cakes.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var> is an integer between <var>1</var> and <var>100</var>, inclusive.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there is a way to buy some cakes and some doughnuts for exactly <var>N</var> dollars, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>If you buy one cake and one doughnut, the total will be <var>4 + 7 = 11</var> dollars.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n<p>If you buy ten cakes, the total will be <var>4 \\times 10 = 40</var> dollars.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n<p>The prices of cakes (<var>4</var> dollars) and doughnuts (<var>7</var> dollars) are both higher than <var>3</var> dollars, so there is no such way.</p></section>\n</div>\n</span>", "p03286": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given an integer <var>N</var>, find the base <var>-2</var> representation of <var>N</var>.</p>\n<p>Here, <var>S</var> is the base <var>-2</var> representation of <var>N</var> when the following are all satisfied:</p>\n<ul>\n<li><var>S</var> is a string consisting of <code>0</code> and <code>1</code>.</li>\n<li>Unless <var>S =</var> <code>0</code>, the initial character of <var>S</var> is <code>1</code>.</li>\n<li>Let <var>S = S_k S_{k-1} ... S_0</var>, then <var>S_0 \\times (-2)^0 + S_1 \\times (-2)^1 + ... + S_k \\times (-2)^k = N</var>.</li>\n</ul>\n<p>It can be proved that, for any integer <var>M</var>, the base <var>-2</var> representation of <var>M</var> is uniquely determined.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>Every value in input is integer.</li>\n<li><var>-10^9 \\leq N \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the base <var>-2</var> representation of <var>N</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>-9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1011\n</pre>\n<p>As <var>(-2)^0 + (-2)^1 + (-2)^3 = 1 + (-2) + (-8) = -9</var>, <code>1011</code> is the base <var>-2</var> representation of <var>-9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>123456789\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>11000101011001101110100010101\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03287": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> boxes arranged in a row from left to right. The <var>i</var>-th box from the left contains <var>A_i</var> candies.</p>\n<p>You will take out the candies from some consecutive boxes and distribute them evenly to <var>M</var> children.</p>\n<p>Such being the case, find the number of the pairs <var>(l, r)</var> that satisfy the following:</p>\n<ul>\n<li><var>l</var> and <var>r</var> are both integers and satisfy <var>1 \\leq l \\leq r \\leq N</var>.</li>\n<li><var>A_l + A_{l+1} + ... + A_r</var> is a multiple of <var>M</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>2 \\leq M \\leq 10^9</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the pairs <var>(l, r)</var> that satisfy the conditions.</p>\n<p>Note that the number may not fit into a <var>32</var>-bit integer type.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2\n4 1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The sum <var>A_l + A_{l+1} + ... + A_r</var> for each pair <var>(l, r)</var> is as follows:</p>\n<ul>\n<li>Sum for <var>(1, 1)</var>: <var>4</var></li>\n<li>Sum for <var>(1, 2)</var>: <var>5</var></li>\n<li>Sum for <var>(1, 3)</var>: <var>10</var></li>\n<li>Sum for <var>(2, 2)</var>: <var>1</var></li>\n<li>Sum for <var>(2, 3)</var>: <var>6</var></li>\n<li>Sum for <var>(3, 3)</var>: <var>5</var></li>\n</ul>\n<p>Among these, three are multiples of <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>13 17\n29 7 5 7 9 51 7 13 8 55 42 9 81\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 400000000\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>25\n</pre></section>\n</div>\n</span>", "p03292": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have three tasks, all of which need to be completed.</p>\n<p>First, you can complete any one task at cost <var>0</var>.</p>\n<p>Then, just after completing the <var>i</var>-th task, you can complete the <var>j</var>-th task at cost <var>|A_j - A_i|</var>.</p>\n<p>Here, <var>|x|</var> denotes the absolute value of <var>x</var>.</p>\n<p>Find the minimum total cost required to complete all the task.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>1 \\leq A_1, A_2, A_3 \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A_1</var> <var>A_2</var> <var>A_3</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total cost required to complete all the task.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 6 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>When the tasks are completed in the following order, the total cost will be <var>5</var>, which is the minimum:</p>\n<ul>\n<li>Complete the first task at cost <var>0</var>.</li>\n<li>Complete the third task at cost <var>2</var>.</li>\n<li>Complete the second task at cost <var>3</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>11 5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03293": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given string <var>S</var> and <var>T</var> consisting of lowercase English letters.</p>\n<p>Determine if <var>S</var> equals <var>T</var> after <em>rotation</em>.</p>\n<p>That is, determine if <var>S</var> equals <var>T</var> after the following operation is performed some number of times:</p>\n<p>Operation: Let <var>S = S_1 S_2 ... S_{|S|}</var>. Change <var>S</var> to <var>S_{|S|} S_1 S_2 ... S_{|S|-1}</var>.</p>\n<p>Here, <var>|X|</var> denotes the length of the string <var>X</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq |S| \\leq 100</var></li>\n<li><var>|S| = |T|</var></li>\n<li><var>S</var> and <var>T</var> consist of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> equals <var>T</var> after <em>rotation</em>, print <code>Yes</code>; if it does not, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>kyoto\ntokyo\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<ul>\n<li>In the first operation, <code>kyoto</code> becomes <code>okyot</code>.</li>\n<li>In the second operation, <code>okyot</code> becomes <code>tokyo</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>abc\narc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p><code>abc</code> does not equal <code>arc</code> after any number of operations.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>aaaaaaaaaaaaaaab\naaaaaaaaaaaaaaab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p03294": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N</var> positive integers <var>a_1, a_2, ..., a_N</var>.</p>\n<p>For a non-negative integer <var>m</var>, let <var>f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) + ... + (m\\ mod\\ a_N)</var>.</p>\n<p>Here, <var>X\\ mod\\ Y</var> denotes the remainder of the division of <var>X</var> by <var>Y</var>.</p>\n<p>Find the maximum value of <var>f</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 3000</var></li>\n<li><var>2 \\leq a_i \\leq 10^5</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum value of <var>f</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 4 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p><var>f(11) = (11\\ mod\\ 3) + (11\\ mod\\ 4) + (11\\ mod\\ 6) = 10</var> is the maximum value of <var>f</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n7 46 11 20 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>90\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n994 518 941 851 647 2 581\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4527\n</pre></section>\n</div>\n</span>", "p03295": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> islands lining up from west to east, connected by <var>N-1</var> bridges.</p>\n<p>The <var>i</var>-th bridge connects the <var>i</var>-th island from the west and the <var>(i+1)</var>-th island from the west.</p>\n<p>One day, disputes took place between some islands, and there were <var>M</var> requests from the inhabitants of the islands:</p>\n<p>Request <var>i</var>: A dispute took place between the <var>a_i</var>-th island from the west and the <var>b_i</var>-th island from the west. Please make traveling between these islands with bridges impossible.</p>\n<p>You decided to remove some bridges to meet all these <var>M</var> requests.</p>\n<p>Find the minimum number of bridges that must be removed.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All values in input are integers.</li>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq a_i &lt; b_i \\leq N</var></li>\n<li>All pairs <var>(a_i, b_i)</var> are distinct.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>:</var>\n<var>a_M</var> <var>b_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of bridges that must be removed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2\n1 4\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The requests can be met by removing the bridge connecting the second and third islands from the west.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9 5\n1 8\n2 7\n3 5\n4 6\n7 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03296": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi lives in another world. There are slimes (creatures) of <var>10000</var> colors in this world. Let us call these colors Color <var>1, 2, ..., 10000</var>.</p>\n<p>Takahashi has <var>N</var> slimes, and they are standing in a row from left to right. The color of the <var>i</var>-th slime from the left is <var>a_i</var>.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.</p>\n<p>Takahashi can change the color of one slime to any of the <var>10000</var> colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq a_i \\leq N</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of spells required.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 1 2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, if we change the color of the second slime from the left to <var>4</var>, and the color of the fourth slime to <var>5</var>, the colors of the slimes will be <var>1, 4, 2, 5, 2</var>, which satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Although the colors of the first and third slimes are the same, they are not adjacent, so no spell is required.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n1 1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre>\n<p>For example, if we change the colors of the second and fourth slimes from the left to <var>2</var>, the colors of the slimes will be <var>1, 2, 1, 2, 1</var>, which satisfy the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>14\n1 2 2 3 3 3 4 4 4 4 1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03298": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>2N</var> consisting of lowercase English letters.</p>\n<p>There are <var>2^{2N}</var> ways to color each character in <var>S</var> red or blue. Among these ways, how many satisfy the following condition?</p>\n<ul>\n<li>The string obtained by reading the characters painted red <strong>from left to right</strong> is equal to the string obtained by reading the characters painted blue <strong>from right to left</strong>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 18</var></li>\n<li>The length of <var>S</var> is <var>2N</var>.</li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to paint the string that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\ncabaacba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>There are four ways to paint the string, as follows:</p>\n<ul>\n<li><span style=\"color:red\">c</span><span style=\"color:blue\">a</span><span style=\"color:blue\">b</span><span style=\"color:blue\">a</span><span style=\"color:red\">a</span><span style=\"color:blue\">c</span><span style=\"color:red\">b</span><span style=\"color:red\">a</span></li>\n<li><span style=\"color:red\">c</span><span style=\"color:blue\">a</span><span style=\"color:blue\">b</span><span style=\"color:red\">a</span><span style=\"color:blue\">a</span><span style=\"color:blue\">c</span><span style=\"color:red\">b</span><span style=\"color:red\">a</span></li>\n<li><span style=\"color:blue\">c</span><span style=\"color:red\">a</span><span style=\"color:red\">b</span><span style=\"color:red\">a</span><span style=\"color:blue\">a</span><span style=\"color:red\">c</span><span style=\"color:blue\">b</span><span style=\"color:blue\">a</span></li>\n<li><span style=\"color:blue\">c</span><span style=\"color:red\">a</span><span style=\"color:red\">b</span><span style=\"color:blue\">a</span><span style=\"color:red\">a</span><span style=\"color:red\">c</span><span style=\"color:blue\">b</span><span style=\"color:blue\">a</span></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>11\nmippiisssisssiipsspiim\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>504\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\nabcdefgh\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>18\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>9075135300\n</pre>\n<p>The answer may not be representable as a <var>32</var>-bit integer.</p></section>\n</div>\n</span>", "p03299": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let us consider a grid of squares with <var>10^9</var> rows and <var>N</var> columns. Let <var>(i, j)</var> be the square at the <var>i</var>-th column <var>(1 \\leq i \\leq N)</var> from the left and <var>j</var>-th row <var>(1 \\leq j \\leq 10^9)</var> from the bottom.</p>\n<p>Snuke has cut out some part of the grid so that, for each <var>i = 1, 2, ..., N</var>, the bottom-most <var>h_i</var> squares are remaining in the <var>i</var>-th column from the left.\nNow, he will paint the remaining squares in red and blue.\nFind the number of the ways to paint the squares so that the following condition is satisfied:</p>\n<ul>\n<li>Every remaining square is painted either red or blue.</li>\n<li>For all <var>1 \\leq i \\leq N-1</var> and <var>1 \\leq j \\leq min(h_i, h_{i+1})-1</var>, there are exactly two squares painted red and two squares painted blue among the following four squares: <var>(i, j), (i, j+1), (i+1, j)</var> and <var>(i+1, j+1)</var>.</li>\n</ul>\n<p>Since the number of ways can be extremely large, print the count modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq h_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>h_1</var> <var>h_2</var> <var>...</var> <var>h_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the ways to paint the squares, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>9\n2 3 5 4 1 2 4 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12800\n</pre>\n<p>One of the ways to paint the squares is shown below:</p>\n<pre>\n  <span style=\"color:blue\">#</span>\n  <span style=\"color:blue\">#</span><span style=\"color:red\">#</span>  <span style=\"color:blue\">#</span>\n <span style=\"color:red\">#</span><span style=\"color:blue\">#</span><span style=\"color:red\">#</span>  <span style=\"color:blue\">#</span>\n<span style=\"color:blue\">#</span><span style=\"color:red\">#</span><span style=\"color:blue\">#</span><span style=\"color:red\">#</span> <span style=\"color:blue\">#</span><span style=\"color:blue\">#</span><span style=\"color:red\">#</span>\n<span style=\"color:red\">#</span><span style=\"color:blue\">#</span><span style=\"color:red\">#</span><span style=\"color:blue\">#</span><span style=\"color:red\">#</span><span style=\"color:red\">#</span><span style=\"color:red\">#</span><span style=\"color:blue\">#</span><span style=\"color:blue\">#</span>\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n<p>There are six ways to paint the squares, as follows:</p>\n<pre>\n<span style=\"color:blue\">#</span><span style=\"color:blue\">#</span> <span style=\"color:blue\">#</span><span style=\"color:red\">#</span> <span style=\"color:red\">#</span><span style=\"color:red\">#</span> <span style=\"color:red\">#</span><span style=\"color:blue\">#</span> <span style=\"color:blue\">#</span><span style=\"color:red\">#</span> <span style=\"color:red\">#</span><span style=\"color:blue\">#</span>\n<span style=\"color:red\">#</span><span style=\"color:red\">#</span> <span style=\"color:blue\">#</span><span style=\"color:red\">#</span> <span style=\"color:blue\">#</span><span style=\"color:blue\">#</span> <span style=\"color:red\">#</span><span style=\"color:blue\">#</span> <span style=\"color:red\">#</span><span style=\"color:blue\">#</span> <span style=\"color:blue\">#</span><span style=\"color:red\">#</span>\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n2 1 2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>256\n</pre>\n<p>Every way to paint the squares satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>9\n27 18 28 18 28 45 90 45 23\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>844733013\n</pre>\n<p>Remember to print the number of ways modulo <var>10^9 + 7</var>.</p></section>\n</div>\n</span>", "p03300": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>2N</var>, containing <var>N</var> occurrences of <code>a</code> and <var>N</var> occurrences of <code>b</code>.</p>\n<p>You will choose some of the characters in <var>S</var>. Here, for each <var>i = 1,2,...,N</var>, it is not allowed to choose exactly one of the following two: the <var>i</var>-th occurrence of <code>a</code> and the <var>i</var>-th occurrence of <code>b</code>. (That is, you can only choose both or neither.) Then, you will concatenate the chosen characters (without changing the order).</p>\n<p>Find the lexicographically largest string that can be obtained in this way.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 3000</var></li>\n<li><var>S</var> is a string of length <var>2N</var> containing <var>N</var> occurrences of <code>a</code> and <var>N</var> occurrences of <code>b</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the lexicographically largest string that satisfies the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\naababb\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>abab\n</pre>\n<p>A subsequence of <var>T</var> obtained from taking the first, third, fourth and sixth characters in <var>S</var>, satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\nbbabaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>bbabaa\n</pre>\n<p>You can choose all the characters.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\nbbbaabbabaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>bbbabaaa\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>9\nabbbaababaababbaba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>bbaababababa\n</pre></section>\n</div>\n</span>", "p03301": "<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> boxes arranged in a row from left to right. The <var>i</var>-th box from the left contains <var>a_i</var> manju (buns stuffed with bean paste).\n<span style=\"color:#C06000\">Sugim</span> and <span style=\"color:red\">Sigma</span> play a game using these boxes.\nThey alternately perform the following operation. <span style=\"color:#C06000\">Sugim</span> goes first, and the game ends when a total of <var>N</var> operations are performed.</p>\n<ul>\n<li>Choose a box that still does not contain a piece and is adjacent to the box chosen in the other player's <strong>last</strong> operation, then put a piece in that box. If there are multiple such boxes, any of them can be chosen.</li>\n<li>If there is no box that satisfies the condition above, or this is <span style=\"color:#C06000\">Sugim</span>'s first operation, choose any one box that still does not contain a piece, then put a piece in that box.</li>\n</ul>\n<p>At the end of the game, each player can have the manju in the boxes in which he put his pieces.\nThey love manju, and each of them is wise enough to perform the optimal moves in order to have the maximum number of manju at the end of the game.</p>\n<p>Find the number of manju that each player will have at the end of the game.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 300</var> <var>000</var></li>\n<li><var>1 \\leq a_i \\leq 1000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the numbers of <span style=\"color:#C06000\">Sugim</span>'s manju and <span style=\"color:red\">Sigma</span>'s manju at the end of the game, in this order, with a space in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n20 100 10 1 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>120 21\n</pre>\n<p>If the two performs the optimal moves, the game proceeds as follows:</p>\n<ul>\n<li>First, <span style=\"color:#C06000\">Sugim</span> has to put his piece in the second box from the left.</li>\n<li>Then, <span style=\"color:red\">Sigma</span> has to put his piece in the leftmost box.</li>\n<li>Then, <span style=\"color:#C06000\">Sugim</span> puts his piece in the third or fifth box.</li>\n<li>Then, <span style=\"color:red\">Sigma</span> puts his piece in the fourth box.</li>\n<li>Finally, <span style=\"color:#C06000\">Sugim</span> puts his piece in the remaining box.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n4 5 1 1 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>11 9\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n1 10 100 10 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>102 20\n</pre>\n<!-- {sample example_3}\nThe answer may not be representable as a <var>32</var>-bit integer. --></section>\n</div>\n</span>", "p03302": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given two integers <var>a</var> and <var>b</var>.\nDetermine if <var>a+b=15</var> or <var>a\\times b=15</var> or neither holds.</p>\n<p>Note that <var>a+b=15</var> and <var>a\\times b=15</var> do not hold at the same time.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq a,b \\leq 15</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>a+b=15</var>, print <code>+</code>;\nif <var>a\\times b=15</var>, print <code>*</code>;\nif neither holds, print <code>x</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>+\n</pre>\n<p><var>4+11=15</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>*\n</pre>\n<p><var>3\\times 5=15</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>x\n</pre>\n<p><var>1+1=2</var> and <var>1\\times 1=1</var>, neither of which is <var>15</var>.</p></section>\n</div>\n</span>", "p03303": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> consisting of lowercase English letters.\nWe will write down this string, starting a new line after every <var>w</var> letters. Print the string obtained by concatenating the letters at the beginnings of these lines from top to bottom.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq w \\leq |S| \\leq 1000</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n<li><var>w</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>w</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the desired string in one line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abcdefgh\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>adg\n</pre>\n<p>When we write down <code>abcdefgh</code>, starting a new line after every three letters, we get the following:</p>\n<p>abc<br/>\ndef<br/>\ngh</p>\n<p>Concatenating the letters at the beginnings of these lines, we obtain <code>adg</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>lllll\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>lllll\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>souuundhound\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>suudon\n</pre></section>\n</div>\n</span>", "p03304": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let us define the <em>beauty</em> of a sequence <var>(a_1,... ,a_n)</var> as the number of pairs of two adjacent elements in it whose absolute differences are <var>d</var>.\nFor example, when <var>d=1</var>, the beauty of the sequence <var>(3, 2, 3, 10, 9)</var> is <var>3</var>.</p>\n<p>There are a total of <var>n^m</var> sequences of length <var>m</var> where each element is an integer between <var>1</var> and <var>n</var> (inclusive).\nFind the beauty of each of these <var>n^m</var> sequences, and print the average of those values.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq d &lt; n \\leq 10^9</var></li>\n<li><var>2 \\leq m \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var> <var>m</var> <var>d</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the average of the beauties of the sequences of length <var>m</var> where each element is an integer between <var>1</var> and <var>n</var>.\nThe output will be judged correct if the absolute or relative error is at most <var>10^{-6}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1.0000000000\n</pre>\n<p>The beauty of <var>(1,1,1)</var> is <var>0</var>.<br/>\nThe beauty of <var>(1,1,2)</var> is <var>1</var>.<br/>\nThe beauty of <var>(1,2,1)</var> is <var>2</var>.<br/>\nThe beauty of <var>(1,2,2)</var> is <var>1</var>.<br/>\nThe beauty of <var>(2,1,1)</var> is <var>1</var>.<br/>\nThe beauty of <var>(2,1,2)</var> is <var>2</var>.<br/>\nThe beauty of <var>(2,2,1)</var> is <var>1</var>.<br/>\nThe beauty of <var>(2,2,2)</var> is <var>0</var>.<br/>\nThe answer is the average of these values: <var>(0+1+2+1+1+2+1+0)/8=1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000000000 180707 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0.0001807060\n</pre></section>\n</div>\n</span>", "p03305": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Kenkoooo is planning a trip in Republic of Snuke.\nIn this country, there are <var>n</var> cities and <var>m</var> trains running.\nThe cities are numbered <var>1</var> through <var>n</var>, and the <var>i</var>-th train connects City <var>u_i</var> and <var>v_i</var> bidirectionally.\nAny city can be reached from any city by changing trains.</p>\n<p>Two currencies are used in the country: yen and snuuk.\nAny train fare can be paid by both yen and snuuk.\nThe fare of the <var>i</var>-th train is <var>a_i</var> yen if paid in yen, and <var>b_i</var> snuuk if paid in snuuk.</p>\n<p>In a city with a money exchange office, you can change <var>1</var> yen into <var>1</var> snuuk.\nHowever, when you do a money exchange, you have to change all your yen into snuuk.\nThat is, if Kenkoooo does a money exchange when he has <var>X</var> yen, he will then have <var>X</var> snuuk.\nCurrently, there is a money exchange office in every city, but the office in City <var>i</var> will shut down in <var>i</var> years and can never be used in and after that year.</p>\n<p>Kenkoooo is planning to depart City <var>s</var> with <var>10^{15}</var> yen in his pocket and head for City <var>t</var>, and change his yen into snuuk in some city while traveling.\nIt is acceptable to do the exchange in City <var>s</var> or City <var>t</var>.</p>\n<p>Kenkoooo would like to have as much snuuk as possible when he reaches City <var>t</var> by making the optimal choices for the route to travel and the city to do the exchange.\nFor each <var>i=0,...,n-1</var>, find the maximum amount of snuuk that Kenkoooo has when he reaches City <var>t</var> if he goes on a trip from City <var>s</var> to City <var>t</var> after <var>i</var> years.\nYou can assume that the trip finishes within the year.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq n \\leq 10^5</var></li>\n<li><var>1 \\leq m \\leq 10^5</var></li>\n<li><var>1 \\leq s,t \\leq n</var></li>\n<li><var>s \\neq t</var></li>\n<li><var>1 \\leq u_i &lt; v_i \\leq n</var></li>\n<li><var>1 \\leq a_i,b_i \\leq 10^9</var></li>\n<li>If <var>i\\neq j</var>, then <var>u_i \\neq u_j </var> or <var>v_i \\neq v_j</var>.</li>\n<li>Any city can be reached from any city by changing trains.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var> <var>m</var> <var>s</var> <var>t</var>\n<var>u_1</var> <var>v_1</var> <var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>u_m</var> <var>v_m</var> <var>a_m</var> <var>b_m</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>n</var> lines.\nIn the <var>i</var>-th line, print the maximum amount of snuuk that Kenkoooo has when he reaches City <var>t</var> if he goes on a trip from City <var>s</var> to City <var>t</var> after <var>i-1</var> years.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3 2 3\n1 4 1 100\n1 2 1 10\n1 3 20 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>999999999999998\n999999999999989\n999999999999979\n999999999999897\n</pre>\n<p>After <var>0</var> years, it is optimal to do the exchange in City <var>1</var>.<br/>\nAfter <var>1</var> years, it is optimal to do the exchange in City <var>2</var>.<br/>\nNote that City <var>1</var> can still be visited even after the exchange office is closed.\nAlso note that, if it was allowed to keep <var>1</var> yen when do the exchange in City <var>2</var> and change the remaining yen into snuuk, we could reach City <var>3</var> with <var>999999999999998</var> snuuk, but this is NOT allowed.<br/>\nAfter <var>2</var> years, it is optimal to do the exchange in City <var>3</var>.<br/>\nAfter <var>3</var> years, it is optimal to do the exchange in City <var>4</var>.\nNote that the same train can be used multiple times.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8 12 3 8\n2 8 685087149 857180777\n6 7 298270585 209942236\n2 4 346080035 234079976\n2 5 131857300 22507157\n4 8 30723332 173476334\n2 6 480845267 448565596\n1 4 181424400 548830121\n4 5 57429995 195056405\n7 8 160277628 479932440\n1 6 475692952 203530153\n3 5 336869679 160714712\n2 7 389775999 199123879\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>999999574976994\n999999574976994\n999999574976994\n999999574976994\n999999574976994\n999999574976994\n999999574976994\n999999574976994\n</pre></section>\n</div>\n</span>", "p03306": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Kenkoooo found a simple connected graph.\nThe vertices are numbered <var>1</var> through <var>n</var>.\nThe <var>i</var>-th edge connects Vertex <var>u_i</var> and <var>v_i</var>, and has a fixed integer <var>s_i</var>.</p>\n<p>Kenkoooo is trying to write a <em>positive integer</em> in each vertex so that the following condition is satisfied:</p>\n<ul>\n<li>For every edge <var>i</var>, the sum of the positive integers written in Vertex <var>u_i</var> and <var>v_i</var> is equal to <var>s_i</var>.</li>\n</ul>\n<p>Find the number of such ways to write positive integers in the vertices.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq n \\leq 10^5</var></li>\n<li><var>1 \\leq m \\leq 10^5</var></li>\n<li><var>1 \\leq u_i &lt; v_i \\leq n</var></li>\n<li><var>2 \\leq s_i \\leq 10^9</var></li>\n<li>If <var>i\\neq j</var>, then <var>u_i \\neq u_j </var> or <var>v_i \\neq v_j</var>.</li>\n<li>The graph is connected.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var> <var>m</var>\n<var>u_1</var> <var>v_1</var> <var>s_1</var>\n<var>:</var>\n<var>u_m</var> <var>v_m</var> <var>s_m</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to write positive integers in the vertices so that the condition is satisfied.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 2 3\n2 3 5\n1 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The condition will be satisfied if we write <var>1,2</var> and <var>3</var> in vertices <var>1,2</var> and <var>3</var>, respectively.\nThere is no other way to satisfy the condition, so the answer is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n1 2 6\n2 3 7\n3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>Let <var>a,b,c</var> and <var>d</var> be the numbers to write in vertices <var>1,2,3</var> and <var>4</var>, respectively.\nThere are three quadruples <var>(a,b,c,d)</var> that satisfy the condition:</p>\n<ul>\n<li><var>(a,b,c,d)=(1,5,2,3)</var></li>\n<li><var>(a,b,c,d)=(2,4,3,2)</var></li>\n<li><var>(a,b,c,d)=(3,3,4,1)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 7\n1 2 1000000000\n2 3 2\n3 4 1000000000\n4 5 2\n5 6 1000000000\n6 7 2\n7 8 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03307": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a positive integer <var>N</var>.\nFind the minimum positive integer divisible by both <var>2</var> and <var>N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum positive integer divisible by both <var>2</var> and <var>N</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p><var>6</var> is divisible by both <var>2</var> and <var>3</var>.\nAlso, there is no positive integer less than <var>6</var> that is divisible by both <var>2</var> and <var>3</var>.\nThus, the answer is <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>999999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1999999998\n</pre></section>\n</div>\n</span>", "p03308": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer sequence <var>A</var> of length <var>N</var>.\nFind the maximum absolute difference of two elements (with different indices) in <var>A</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum absolute difference of two elements (with different indices) in <var>A</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 4 6 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>The maximum absolute difference of two elements is <var>A_3-A_1=6-1=5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n1000000000 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>999999999\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n1 1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03309": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has an integer sequence <var>A</var> of length <var>N</var>.</p>\n<p>He will freely choose an integer <var>b</var>.\nHere, he will get sad if <var>A_i</var> and <var>b+i</var> are far from each other.\nMore specifically, the <em>sadness</em> of Snuke is calculated as follows:</p>\n<ul>\n<li><var>abs(A_1 - (b+1)) + abs(A_2 - (b+2)) + ... + abs(A_N - (b+N))</var></li>\n</ul>\n<p>Here, <var>abs(x)</var> is a function that returns the absolute value of <var>x</var>.</p>\n<p>Find the minimum possible sadness of Snuke.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible sadness of Snuke.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n2 2 3 5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If we choose <var>b=0</var>, the sadness of Snuke would be <var>abs(2-(0+1))+abs(2-(0+2))+abs(3-(0+3))+abs(5-(0+4))+abs(5-(0+5))=2</var>.\nAny choice of <var>b</var> does not make the sadness of Snuke less than <var>2</var>, so the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9\n1 2 3 4 5 6 7 8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n6 5 4 3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>18\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7\n1 1 1 1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>6\n</pre></section>\n</div>\n</span>", "p03310": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has an integer sequence <var>A</var> of length <var>N</var>.</p>\n<p>He will make three cuts in <var>A</var> and divide it into four (non-empty) contiguous subsequences <var>B, C, D</var> and <var>E</var>.\nThe positions of the cuts can be freely chosen.</p>\n<p>Let <var>P,Q,R,S</var> be the sums of the elements in <var>B,C,D,E</var>, respectively.\nSnuke is happier when the absolute difference of the maximum and the minimum among <var>P,Q,R,S</var> is smaller.\nFind the minimum possible absolute difference of the maximum and the minimum among <var>P,Q,R,S</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>4 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the minimum possible absolute difference of the maximum and the minimum among <var>P,Q,R,S</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n3 2 4 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If we divide <var>A</var> as <var>B,C,D,E=(3),(2),(4),(1,2)</var>, then <var>P=3,Q=2,R=4,S=1+2=3</var>.\nHere, the maximum and the minimum among <var>P,Q,R,S</var> are <var>4</var> and <var>2</var>, with the absolute difference of <var>2</var>.\nWe cannot make the absolute difference of the maximum and the minimum less than <var>2</var>, so the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n10 71 84 33 6 47 23 25 52 64\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>36\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n1 2 3 1000000000 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>999999994\n</pre></section>\n</div>\n</span>", "p03311": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has an integer sequence <var>A</var> of length <var>N</var>.</p>\n<p>He will freely choose an integer <var>b</var>.\nHere, he will get sad if <var>A_i</var> and <var>b+i</var> are far from each other.\nMore specifically, the <em>sadness</em> of Snuke is calculated as follows:</p>\n<ul>\n<li><var>abs(A_1 - (b+1)) + abs(A_2 - (b+2)) + ... + abs(A_N - (b+N))</var></li>\n</ul>\n<p>Here, <var>abs(x)</var> is a function that returns the absolute value of <var>x</var>.</p>\n<p>Find the minimum possible sadness of Snuke.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible sadness of Snuke.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n2 2 3 5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If we choose <var>b=0</var>, the sadness of Snuke would be <var>abs(2-(0+1))+abs(2-(0+2))+abs(3-(0+3))+abs(5-(0+4))+abs(5-(0+5))=2</var>.\nAny choice of <var>b</var> does not make the sadness of Snuke less than <var>2</var>, so the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9\n1 2 3 4 5 6 7 8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n6 5 4 3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>18\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7\n1 1 1 1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>6\n</pre></section>\n</div>\n</span>", "p03312": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has an integer sequence <var>A</var> of length <var>N</var>.</p>\n<p>He will make three cuts in <var>A</var> and divide it into four (non-empty) contiguous subsequences <var>B, C, D</var> and <var>E</var>.\nThe positions of the cuts can be freely chosen.</p>\n<p>Let <var>P,Q,R,S</var> be the sums of the elements in <var>B,C,D,E</var>, respectively.\nSnuke is happier when the absolute difference of the maximum and the minimum among <var>P,Q,R,S</var> is smaller.\nFind the minimum possible absolute difference of the maximum and the minimum among <var>P,Q,R,S</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>4 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the minimum possible absolute difference of the maximum and the minimum among <var>P,Q,R,S</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n3 2 4 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If we divide <var>A</var> as <var>B,C,D,E=(3),(2),(4),(1,2)</var>, then <var>P=3,Q=2,R=4,S=1+2=3</var>.\nHere, the maximum and the minimum among <var>P,Q,R,S</var> are <var>4</var> and <var>2</var>, with the absolute difference of <var>2</var>.\nWe cannot make the absolute difference of the maximum and the minimum less than <var>2</var>, so the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n10 71 84 33 6 47 23 25 52 64\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>36\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n1 2 3 1000000000 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>999999994\n</pre></section>\n</div>\n</span>", "p03313": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an integer sequence of length <var>2^N</var>: <var>A_0, A_1, ..., A_{2^N-1}</var>. (Note that the sequence is <var>0</var>-indexed.)</p>\n<p>For every integer <var>K</var> satisfying <var>1 \\leq K \\leq 2^N-1</var>, solve the following problem:</p>\n<ul>\n<li>Let <var>i</var> and <var>j</var> be integers. Find the maximum value of <var>A_i + A_j</var> where <var>0 \\leq i &lt; j \\leq 2^N-1</var> and <var>(i</var> <var>or</var> <var>j) \\leq K</var>.\nHere, <var>or</var> denotes the bitwise OR.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 18</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_0</var> <var>A_1</var> <var>...</var> <var>A_{2^N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>2^N-1</var> lines.\nIn the <var>i</var>-th line, print the answer of the problem above for <var>K=i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n4\n5\n</pre>\n<p>For <var>K=1</var>, the only possible pair of <var>i</var> and <var>j</var> is <var>(i,j)=(0,1)</var>, so the answer is <var>A_0+A_1=1+2=3</var>.</p>\n<p>For <var>K=2</var>, the possible pairs of <var>i</var> and <var>j</var> are <var>(i,j)=(0,1),(0,2)</var>.\nWhen <var>(i,j)=(0,2)</var>, <var>A_i+A_j=1+3=4</var>. This is the maximum value, so the answer is <var>4</var>.</p>\n<p>For <var>K=3</var>, the possible pairs of <var>i</var> and <var>j</var> are <var>(i,j)=(0,1),(0,2),(0,3),(1,2),(1,3),(2,3)</var> .\nWhen <var>(i,j)=(1,2)</var>, <var>A_i+A_j=2+3=5</var>. This is the maximum value, so the answer is <var>5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n10 71 84 33 6 47 23 25\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>81\n94\n155\n155\n155\n155\n155\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n75 26 45 72 81 47 97 97 2 2 25 82 84 17 56 32\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>101\n120\n147\n156\n156\n178\n194\n194\n194\n194\n194\n194\n194\n194\n194\n</pre></section>\n</div>\n</span>", "p03314": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given integers <var>N, K</var>, and an integer sequence <var>A</var> of length <var>M</var>.</p>\n<p>An integer sequence where each element is between <var>1</var> and <var>K</var> (inclusive) is said to be <em>colorful</em> when there exists a contiguous subsequence of length <var>K</var> of the sequence that contains one occurrence of each integer between <var>1</var> and <var>K</var> (inclusive).</p>\n<p>For every colorful integer sequence of length <var>N</var>, count the number of the contiguous subsequences of that sequence which coincide with <var>A</var>, then find the sum of all the counts.\nHere, the answer can be extremely large, so find the sum modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 25000</var></li>\n<li><var>1 \\leq K \\leq 400</var></li>\n<li><var>1 \\leq M \\leq N</var></li>\n<li><var>1 \\leq A_i \\leq K</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var> <var>M</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For every colorful integer sequence of length <var>N</var>, count the number of the contiguous subsequences of that sequence which coincide with <var>A</var>, then print the sum of all the counts modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 2 1\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>There are six colorful sequences of length <var>3</var>: <var>(1,1,2)</var>, <var>(1,2,1)</var>, <var>(1,2,2)</var>, <var>(2,1,1)</var>, <var>(2,1,2)</var> and <var>(2,2,1)</var>.\nThe numbers of the contiguous subsequences of these sequences that coincide with <var>A=(1)</var> are <var>2</var>, <var>2</var>, <var>1</var>, <var>2</var>, <var>1</var> and <var>1</var>, respectively.\nThus, the answer is their sum, <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 2 2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>12\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7 4 5\n1 2 3 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>17\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5 4 3\n1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>10 3 5\n1 1 2 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>1458\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>25000 400 4\n3 7 31 127\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>923966268\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 7</h3><pre>9954 310 12\n267 193 278 294 6 63 86 166 157 193 168 43\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 7</h3><pre>979180369\n</pre></section>\n</div>\n</span>", "p03315": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is always an integer in Takahashi's mind.</p>\n<p>Initially, the integer in Takahashi's mind is <var>0</var>. Takahashi is now going to eat four symbols, each of which is <code>+</code> or <code>-</code>. When he eats <code>+</code>, the integer in his mind increases by <var>1</var>; when he eats <code>-</code>, the integer in his mind decreases by <var>1</var>.</p>\n<p>The symbols Takahashi is going to eat are given to you as a string <var>S</var>. The <var>i</var>-th character in <var>S</var> is the <var>i</var>-th symbol for him to eat.</p>\n<p>Find the integer in Takahashi's mind after he eats all the symbols.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The length of <var>S</var> is <var>4</var>.</li>\n<li>Each character in <var>S</var> is <code>+</code> or <code>-</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the integer in Takahashi's mind after he eats all the symbols.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>+-++\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<ul>\n<li>Initially, the integer in Takahashi's mind is <var>0</var>.</li>\n<li>The first integer for him to eat is <code>+</code>. After eating it, the integer in his mind becomes <var>1</var>.</li>\n<li>The second integer to eat is <code>-</code>. After eating it, the integer in his mind becomes <var>0</var>.</li>\n<li>The third integer to eat is <code>+</code>. After eating it, the integer in his mind becomes <var>1</var>.</li>\n<li>The fourth integer to eat is <code>+</code>. After eating it, the integer in his mind becomes <var>2</var>.</li>\n</ul>\n<p>Thus, the integer in Takahashi's mind after he eats all the symbols is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>-+--\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>----\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-4\n</pre></section>\n</div>\n</span>", "p03316": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>S(n)</var> denote the sum of the digits in the decimal notation of <var>n</var>.\nFor example, <var>S(101) = 1 + 0 + 1 = 2</var>.</p>\n<p>Given an integer <var>N</var>, determine if <var>S(N)</var> divides <var>N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S(N)</var> divides <var>N</var>, print <code>Yes</code>; if it does not, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>In this input, <var>N=12</var>.\nAs <var>S(12) = 1 + 2 = 3</var>, <var>S(N)</var> divides <var>N</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>As <var>S(101) = 1 + 0 + 1 = 2</var>, <var>S(N)</var> does not divide <var>N</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>999999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p03317": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a sequence of length <var>N</var>: <var>A_1, A_2, ..., A_N</var>. Initially, this sequence is a permutation of <var>1, 2, ..., N</var>.</p>\n<p>On this sequence, Snuke can perform the following operation:</p>\n<ul>\n<li>Choose <var>K</var> consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.</li>\n</ul>\n<p>Snuke would like to make all the elements in this sequence equal by repeating the operation above some number of times.\nFind the minimum number of operations required.\nIt can be proved that, Under the constraints of this problem, this objective is always achievable.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq K \\leq N \\leq 100000</var></li>\n<li><var>A_1, A_2, ..., A_N</var> is a permutation of <var>1, 2, ..., N</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n2 3 1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>One optimal strategy is as follows:</p>\n<ul>\n<li>\n<p>In the first operation, choose the first, second and third elements. The sequence <var>A</var> becomes <var>1, 1, 1, 4</var>.</p>\n</li>\n<li>\n<p>In the second operation, choose the second, third and fourth elements. The sequence <var>A</var> becomes <var>1, 1, 1, 1</var>.</p>\n</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 3\n7 3 1 8 4 6 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03318": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>S(n)</var> denote the sum of the digits in the decimal notation of <var>n</var>.\nFor example, <var>S(123) = 1 + 2 + 3 = 6</var>.</p>\n<p>We will call an integer <var>n</var> a <strong>Snuke number</strong> when, for all positive integers <var>m</var> such that <var>m &gt; n</var>, <var>\\frac{n}{S(n)} \\leq \\frac{m}{S(m)}</var> holds.</p>\n<p>Given an integer <var>K</var>, list the <var>K</var> smallest Snuke numbers.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K</var></li>\n<li>The <var>K</var>-th smallest Snuke number is not greater than <var>10^{15}</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>K</var> lines. The <var>i</var>-th line should contain the <var>i</var>-th smallest Snuke number.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n19\n</pre></section>\n</div>\n</span>", "p03319": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a sequence of length <var>N</var>: <var>A_1, A_2, ..., A_N</var>. Initially, this sequence is a permutation of <var>1, 2, ..., N</var>.</p>\n<p>On this sequence, Snuke can perform the following operation:</p>\n<ul>\n<li>Choose <var>K</var> consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.</li>\n</ul>\n<p>Snuke would like to make all the elements in this sequence equal by repeating the operation above some number of times.\nFind the minimum number of operations required.\nIt can be proved that, Under the constraints of this problem, this objective is always achievable.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq K \\leq N \\leq 100000</var></li>\n<li><var>A_1, A_2, ..., A_N</var> is a permutation of <var>1, 2, ..., N</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3\n2 3 1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>One optimal strategy is as follows:</p>\n<ul>\n<li>\n<p>In the first operation, choose the first, second and third elements. The sequence <var>A</var> becomes <var>1, 1, 1, 4</var>.</p>\n</li>\n<li>\n<p>In the second operation, choose the second, third and fourth elements. The sequence <var>A</var> becomes <var>1, 1, 1, 1</var>.</p>\n</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 3\n7 3 1 8 4 6 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03320": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>S(n)</var> denote the sum of the digits in the decimal notation of <var>n</var>.\nFor example, <var>S(123) = 1 + 2 + 3 = 6</var>.</p>\n<p>We will call an integer <var>n</var> a <strong>Snuke number</strong> when, for all positive integers <var>m</var> such that <var>m &gt; n</var>, <var>\\frac{n}{S(n)} \\leq \\frac{m}{S(m)}</var> holds.</p>\n<p>Given an integer <var>K</var>, list the <var>K</var> smallest Snuke numbers.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K</var></li>\n<li>The <var>K</var>-th smallest Snuke number is not greater than <var>10^{15}</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>K</var> lines. The <var>i</var>-th line should contain the <var>i</var>-th smallest Snuke number.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n19\n</pre></section>\n</div>\n</span>", "p03321": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In the State of Takahashi in AtCoderian Federation, there are <var>N</var> cities, numbered <var>1, 2, ..., N</var>.\n<var>M</var> bidirectional roads connect these cities.\nThe <var>i</var>-th road connects City <var>A_i</var> and City <var>B_i</var>.\nEvery road connects two distinct cities.\nAlso, for any two cities, there is at most one road that <strong>directly</strong> connects them.</p>\n<p>One day, it was decided that the State of Takahashi would be divided into two states, Taka and Hashi.\nAfter the division, each city in Takahashi would belong to either Taka or Hashi.\nIt is acceptable for all the cities to belong Taka, or for all the cities to belong Hashi.\nHere, the following condition should be satisfied:</p>\n<ul>\n<li>Any two cities in the same state, Taka or Hashi, are directly connected by a road.</li>\n</ul>\n<p>Find the minimum possible number of roads whose endpoint cities belong to the same state.\nIf it is impossible to divide the cities into Taka and Hashi so that the condition is satisfied, print <code>-1</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 700</var></li>\n<li><var>0 \\leq M \\leq N(N-1)/2</var></li>\n<li><var>1 \\leq A_i \\leq N</var></li>\n<li><var>1 \\leq B_i \\leq N</var></li>\n<li><var>A_i \\neq B_i</var></li>\n<li>If <var>i \\neq j</var>, at least one of the following holds: <var>A_i \\neq A_j</var> and <var>B_i \\neq B_j</var>.</li>\n<li>If <var>i \\neq j</var>, at least one of the following holds: <var>A_i \\neq B_j</var> and <var>B_i \\neq A_j</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>:</var>\n<var>A_M</var> <var>B_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 5\n1 2\n1 3\n3 4\n3 5\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>For example, if the cities <var>1, 2</var> belong to Taka and the cities <var>3, 4, 5</var> belong to Hashi, the condition is satisfied.\nHere, the number of roads whose endpoint cities belong to the same state, is <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 1\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>In this sample, the condition cannot be satisfied regardless of which cities belong to each state.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 3\n1 2\n1 3\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 39\n7 2\n7 1\n5 6\n5 8\n9 10\n2 8\n8 7\n3 10\n10 1\n8 10\n2 3\n7 4\n3 9\n4 10\n3 4\n6 1\n6 7\n9 5\n9 7\n6 9\n9 4\n4 6\n7 5\n8 3\n2 5\n9 2\n10 7\n8 6\n8 9\n7 3\n5 3\n4 5\n6 3\n2 10\n5 10\n4 2\n6 2\n8 4\n10 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>21\n</pre></section>\n</div>\n</span>", "p03322": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In Takahashi's mind, there is always an integer sequence of length <var>2 \\times 10^9 + 1</var>: <var>A = (A_{-10^9}, A_{-10^9 + 1}, ..., A_{10^9 - 1}, A_{10^9})</var> and an integer <var>P</var>.</p>\n<p>Initially, all the elements in the sequence <var>A</var> in Takahashi's mind are <var>0</var>, and the value of the integer <var>P</var> is <var>0</var>.</p>\n<p>When Takahashi eats symbols <code>+</code>, <code>-</code>, <code>&gt;</code> and <code>&lt;</code>, the sequence <var>A</var> and the integer <var>P</var> will change as follows:</p>\n<ul>\n<li>When he eats <code>+</code>, the value of <var>A_P</var> increases by <var>1</var>;</li>\n<li>When he eats <code>-</code>, the value of <var>A_P</var> decreases by <var>1</var>;</li>\n<li>When he eats <code>&gt;</code>, the value of <var>P</var> increases by <var>1</var>;</li>\n<li>When he eats <code>&lt;</code>, the value of <var>P</var> decreases by <var>1</var>.</li>\n</ul>\n<p>Takahashi has a string <var>S</var> of length <var>N</var>. Each character in <var>S</var> is one of the symbols <code>+</code>, <code>-</code>, <code>&gt;</code> and <code>&lt;</code>.\nHe chose a pair of integers <var>(i, j)</var> such that <var>1 \\leq i \\leq j \\leq N</var> and ate the symbols that are the <var>i</var>-th, <var>(i+1)</var>-th, <var>...</var>, <var>j</var>-th characters in <var>S</var>, in this order.\nWe heard that, after he finished eating, the sequence <var>A</var> became the same as if he had eaten all the symbols in <var>S</var> from first to last.\nHow many such possible pairs <var>(i, j)</var> are there?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 250000</var></li>\n<li><var>|S| = N</var></li>\n<li>Each character in <var>S</var> is <code>+</code>, <code>-</code>, <code>&gt;</code> or <code>&lt;</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n+&gt;+&lt;-\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>If Takahashi eats all the symbols in <var>S</var>, <var>A_1 = 1</var> and all other elements would be <var>0</var>.\nThe pairs <var>(i, j)</var> that leads to the same sequence <var>A</var> are as follows:</p>\n<ul>\n<li><var>(1, 5)</var></li>\n<li><var>(2, 3)</var></li>\n<li><var>(2, 4)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n+&gt;+-&lt;\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>Note that the value of <var>P</var> may be different from the value when Takahashi eats all the symbols in <var>S</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>48\n-+&gt;&lt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&gt;&gt;+-&lt;&lt;&gt;-&gt;&gt;&gt;&lt;&lt;&gt;&lt;&lt;-+&lt;&gt;&gt;&lt;+&lt;&lt;&gt;+&gt;&lt;-+-&gt;&gt;&lt;&lt;\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>475\n</pre></section>\n</div>\n</span>", "p03324": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Today, the memorable AtCoder Beginner Contest 100 takes place. On this occasion, Takahashi would like to give an integer to Ringo.<br/>\nAs the name of the contest is AtCoder Beginner Contest 100, Ringo would be happy if he is given a positive integer that can be divided by <var>100</var> <strong>exactly</strong> <var>D</var> times.</p>\n<p>Find the <var>N</var>-th smallest integer that would make Ringo happy.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>D</var> is <var>0</var>, <var>1</var> or <var>2</var>.</li>\n<li><var>N</var> is an integer between <var>1</var> and <var>100</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>D</var> <var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the <var>N</var>-th smallest integer that can be divided by <var>100</var> exactly <var>D</var> times.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>0 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>The integers that can be divided by <var>100</var> exactly <var>0</var> times (that is, not divisible by <var>100</var>) are as follows: <var>1</var>, <var>2</var>, <var>3</var>, <var>4</var>, <var>5</var>, <var>6</var>, <var>7</var>, ...<br/>\nThus, the <var>5</var>-th smallest integer that would make Ringo happy is <var>5</var>.  </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1100\n</pre>\n<p>The integers that can be divided by <var>100</var> exactly once are as follows: <var>100</var>, <var>200</var>, <var>300</var>, <var>400</var>, <var>500</var>, <var>600</var>, <var>700</var>, <var>800</var>, <var>900</var>, <var>1 \\ 000</var>, <var>1 \\ 100</var>, ...<br/>\nThus, the integer we are seeking is <var>1 \\ 100</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 85\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>850000\n</pre>\n<p>The integers that can be divided by <var>100</var> exactly twice are as follows: <var>10 \\ 000</var>, <var>20 \\ 000</var>, <var>30 \\ 000</var>, ...<br/>\nThus, the integer we are seeking is <var>850 \\ 000</var>.</p></section>\n</div>\n</span>", "p03325": "<span class=\"lang-en\">\n<p>Score: <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>As AtCoder Beginner Contest 100 is taking place, the office of AtCoder, Inc. is decorated with a sequence of length <var>N</var>, <var>a = </var>{<var>a_1, a_2, a_3, ..., a_N</var>}.<br/>\nSnuke, an employee, would like to play with this sequence.</p>\n<p>Specifically, he would like to repeat the following operation as many times as possible:</p>\n<pre>For every <var>i</var> satisfying <var>1 \\leq i \\leq N</var>, perform one of the following: \"divide <var>a_i</var> by <var>2</var>\" and \"multiply <var>a_i</var> by <var>3</var>\".  \nHere, choosing \"multiply <var>a_i</var> by <var>3</var>\" for every <var>i</var> is not allowed, and the value of <var>a_i</var> after the operation must be an integer.\n</pre>\n<p>At most how many operations can be performed?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> is an integer between <var>1</var> and <var>10 \\ 000</var> (inclusive).</li>\n<li><var>a_i</var> is an integer between <var>1</var> and <var>1 \\ 000 \\ 000 \\ 000</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>a_3</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the maximum number of operations that Snuke can perform.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n5 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The sequence is initially <var>{5, 2, 4}</var>. Three operations can be performed as follows:</p>\n<ul>\n<li>First, multiply <var>a_1</var> by <var>3</var>, multiply <var>a_2</var> by <var>3</var> and divide <var>a_3</var> by <var>2</var>. The sequence is now <var>{15, 6, 2}</var>.</li>\n<li>Next, multiply <var>a_1</var> by <var>3</var>, divide <var>a_2</var> by <var>2</var> and multiply <var>a_3</var> by <var>3</var>. The sequence is now <var>{45, 3, 6}</var>.</li>\n<li>Finally, multiply <var>a_1</var> by <var>3</var>, multiply <var>a_2</var> by <var>3</var> and divide <var>a_3</var> by <var>2</var>. The sequence is now <var>{135, 9, 3}</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n631 577 243 199\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>No operation can be performed since all the elements are odd. Thus, the answer is <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n2184 2126 1721 1800 1024 2528 3360 1945 1280 1776\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>39\n</pre></section>\n</div>\n</span>", "p03326": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Takahashi became a pastry chef and opened a shop <em>La Confiserie d'ABC</em> to celebrate AtCoder Beginner Contest 100.</p>\n<p>The shop sells <var>N</var> kinds of cakes.<br/>\nEach kind of cake has three parameters \"beauty\", \"tastiness\" and \"popularity\". The <var>i</var>-th kind of cake has the beauty of <var>x_i</var>, the tastiness of <var>y_i</var> and the popularity of <var>z_i</var>.<br/>\nThese values may be zero or negative.</p>\n<p>Ringo has decided to have <var>M</var> pieces of cakes here. He will choose the set of cakes as follows:</p>\n<ul>\n<li>Do not have two or more pieces of the same kind of cake.</li>\n<li>Under the condition above, choose the set of cakes to maximize (the absolute value of the total beauty) + (the absolute value of the total tastiness)  + (the absolute value of the total popularity).</li>\n</ul>\n<p>Find the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> is an integer between <var>1</var> and <var>1 \\ 000</var> (inclusive).</li>\n<li><var>M</var> is an integer between <var>0</var> and <var>N</var> (inclusive).</li>\n<li><var>x_i, y_i, z_i \\ (1 \\leq i \\leq N)</var> are integers between <var>-10 \\ 000 \\ 000 \\ 000</var> and <var>10 \\ 000 \\ 000 \\ 000</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>x_1</var> <var>y_1</var> <var>z_1</var>\n<var>x_2</var> <var>y_2</var> <var>z_2</var>\n <var>:</var>  <var>:</var>\n<var>x_N</var> <var>y_N</var> <var>z_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>56\n</pre>\n<p>Consider having the <var>2</var>-nd, <var>4</var>-th and <var>5</var>-th kinds of cakes. The total beauty, tastiness and popularity will be as follows:</p>\n<ul>\n<li>Beauty: <var>1 + 3 + 9 = 13</var></li>\n<li>Tastiness: <var>5 + 5 + 7 = 17</var></li>\n<li>Popularity: <var>9 + 8 + 9 = 26</var></li>\n</ul>\n<p>The value (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) here is <var>13 + 17 + 26 = 56</var>. This is the maximum value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 3\n1 -2 3\n-4 5 -6\n7 -8 -9\n-10 11 -12\n13 -14 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>54\n</pre>\n<p>Consider having the <var>1</var>-st, <var>3</var>-rd and <var>5</var>-th kinds of cakes. The total beauty, tastiness and popularity will be as follows:</p>\n<ul>\n<li>Beauty: <var>1 + 7 + 13 = 21</var></li>\n<li>Tastiness: <var>(-2) + (-8) + (-14) = -24</var></li>\n<li>Popularity: <var>3 + (-9) + 15 = 9</var></li>\n</ul>\n<p>The value (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) here is <var>21 + 24 + 9 = 54</var>. This is the maximum value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 5\n10 -80 21\n23 8 38\n-94 28 11\n-26 -2 18\n-69 72 79\n-26 -86 -54\n-72 -50 59\n21 65 -32\n40 -94 87\n-62 18 82\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>638\n</pre>\n<p>If we have the <var>3</var>-rd, <var>4</var>-th, <var>5</var>-th, <var>7</var>-th and <var>10</var>-th kinds of cakes, the total beauty, tastiness and popularity will be <var>-323</var>, <var>66</var> and <var>249</var>, respectively.<br/>\nThe value (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) here is <var>323 + 66 + 249 = 638</var>. This is the maximum value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3 2\n2000000000 -9000000000 4000000000\n7000000000 -5000000000 3000000000\n6000000000 -1000000000 8000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>30000000000\n</pre>\n<p>The values of the beauty, tastiness and popularity of the cakes and the value to be printed may not fit into 32-bit integers.</p></section>\n</div>\n</span>", "p03327": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Decades have passed since the beginning of AtCoder Beginner Contest.</p>\n<p>The contests are labeled as <code>ABC001</code>, <code>ABC002</code>, <var>...</var> from the first round, but after the <var>999</var>-th round <code>ABC999</code>, a problem occurred: how the future rounds should be labeled?</p>\n<p>In the end, the labels for the rounds from the <var>1000</var>-th to the <var>1998</var>-th are decided: <code>ABD001</code>, <code>ABD002</code>, <var>...</var>, <code>ABD999</code>.</p>\n<p>You are given an integer <var>N</var> between <var>1</var> and <var>1998</var> (inclusive). Print the first three characters of the label of the <var>N</var>-th round of AtCoder Beginner Contest.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1998</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the first three characters of the label of the <var>N</var>-th round of AtCoder Beginner Contest.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>ABC\n</pre>\n<p>The <var>999</var>-th round of AtCoder Beginner Contest is labeled as <code>ABC999</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>ABD\n</pre>\n<p>The <var>1000</var>-th round of AtCoder Beginner Contest is labeled as <code>ABD001</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1481\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>ABD\n</pre>\n<p>The <var>1481</var>-th round of AtCoder Beginner Contest is labeled as <code>ABD482</code>.</p></section>\n</div>\n</span>", "p03328": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In some village, there are <var>999</var> towers that are <var>1,(1+2),(1+2+3),...,(1+2+3+...+999)</var> meters high from west to east, at intervals of <var>1</var> meter.</p>\n<p>It had been snowing for a while before it finally stopped. For some two adjacent towers located <var>1</var> meter apart, we measured the lengths of the parts of those towers that are not covered with snow, and the results are <var>a</var> meters for the west tower, and <var>b</var> meters for the east tower.</p>\n<p>Assuming that the depth of snow cover and the altitude are the same everywhere in the village, find the amount of the snow cover.</p>\n<p>Assume also that the depth of the snow cover is always at least <var>1</var> meter.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq a &lt; b &lt; 499500(=1+2+3+...+999)</var></li>\n<li>All values in input are integers.</li>\n<li>There is no input that contradicts the assumption.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the depth of the snow cover is <var>x</var> meters, print <var>x</var> as an integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8 13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The heights of the two towers are <var>10</var> meters and <var>15</var> meters, respectively.\nThus, we can see that the depth of the snow cover is <var>2</var> meters.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>54 65\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre></section>\n</div>\n</span>", "p03329": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>To make it difficult to withdraw money, a certain bank allows its customers to withdraw only one of the following amounts in one operation:</p>\n<ul>\n<li>\n<p><var>1</var> yen (the currency of Japan)</p>\n</li>\n<li>\n<p><var>6</var> yen, <var>6^2(=36)</var> yen, <var>6^3(=216)</var> yen, ...</p>\n</li>\n<li>\n<p><var>9</var> yen, <var>9^2(=81)</var> yen, <var>9^3(=729)</var> yen, ...</p>\n</li>\n</ul>\n<p>At least how many operations are required to withdraw exactly <var>N</var> yen in total?</p>\n<p>It is not allowed to re-deposit the money you withdrew.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100000</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If at least <var>x</var> operations are required to withdraw exactly <var>N</var> yen in total, print <var>x</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>127\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>By withdrawing <var>1</var> yen, <var>9</var> yen, <var>36(=6^2)</var> yen and <var>81(=9^2)</var> yen, we can withdraw <var>127</var> yen in four operations.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>By withdrawing <var>1</var> yen three times, we can withdraw <var>3</var> yen in three operations.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>44852\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>16\n</pre></section>\n</div>\n</span>", "p03330": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a grid with <var>N</var> rows and <var>N</var> columns of squares. Let <var>(i,j)</var> be the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left.</p>\n<p>These squares have to be painted in one of the <var>C</var> colors from Color <var>1</var> to Color <var>C</var>. Initially, <var>(i,j)</var> is painted in Color <var>c_{i,j}</var>.</p>\n<p>We say the grid is a <em>good</em> grid when the following condition is met for all <var>i,j,x,y</var> satisfying <var>1 \\leq i,j,x,y \\leq N</var>:</p>\n<ul>\n<li>If <var>(i+j) \\% 3=(x+y) \\% 3</var>, the color of <var>(i,j)</var> and the color of <var>(x,y)</var> are the same.</li>\n<li>If <var>(i+j) \\%  3 \\neq (x+y) \\% 3</var>, the color of <var>(i,j)</var> and the color of <var>(x,y)</var> are different.</li>\n</ul>\n<p>Here, <var>X \\% Y</var> represents <var>X</var> modulo <var>Y</var>.</p>\n<p>We will repaint zero or more squares so that the grid will be a good grid.</p>\n<p>For a square, the <em>wrongness</em> when the color of the square is <var>X</var> before repainting and <var>Y</var> after repainting, is <var>D_{X,Y}</var>.</p>\n<p>Find the minimum possible sum of the wrongness of all the squares.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 500</var></li>\n<li><var>3 \\leq C \\leq 30</var></li>\n<li><var>1 \\leq D_{i,j} \\leq 1000 (i \\neq j),D_{i,j}=0 (i=j)</var></li>\n<li><var>1 \\leq c_{i,j} \\leq C</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>C</var>\n<var>D_{1,1}</var> <var>...</var> <var>D_{1,C}</var>\n<var>:</var>\n<var>D_{C,1}</var> <var>...</var> <var>D_{C,C}</var>\n<var>c_{1,1}</var> <var>...</var> <var>c_{1,N}</var>\n<var>:</var>\n<var>c_{N,1}</var> <var>...</var> <var>c_{N,N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the minimum possible sum of the wrongness of all the squares is <var>x</var>, print <var>x</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n0 1 1\n1 0 1\n1 4 0\n1 2\n3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<ul>\n<li>Repaint <var>(1,1)</var> to Color <var>2</var>. The wrongness of <var>(1,1)</var> becomes <var>D_{1,2}=1</var>.</li>\n<li>Repaint <var>(1,2)</var> to Color <var>3</var>. The wrongness of <var>(1,2)</var> becomes <var>D_{2,3}=1</var>.</li>\n<li>Repaint <var>(2,2)</var> to Color <var>1</var>. The wrongness of <var>(2,2)</var> becomes <var>D_{3,1}=1</var>.</li>\n</ul>\n<p>In this case, the sum of the wrongness of all the squares is <var>3</var>.</p>\n<p>Note that <var>D_{i,j} \\neq D_{j,i}</var> is possible.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n0 12 71\n81 0 53\n14 92 0\n1 1 2 1\n2 1 1 2\n2 2 1 3\n1 1 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>428\n</pre></section>\n</div>\n</span>", "p03337": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given two integers <var>A</var> and <var>B</var>.\nFind the largest value among <var>A+B</var>, <var>A-B</var> and <var>A \\times B</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>-1000 \\leq A,B \\leq 1000</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the largest value among <var>A+B</var>, <var>A-B</var> and <var>A \\times B</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p><var>3+1=4</var>, <var>3-1=2</var> and <var>3 \\times 1=3</var>. The largest among them is <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 -2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n<p>The largest is <var>4 - (-2) = 6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03338": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>N</var> consisting of lowercase English letters.\nWe will cut this string at one position into two strings <var>X</var> and <var>Y</var>.\nHere, we would like to maximize the number of different letters contained in both <var>X</var> and <var>Y</var>.\nFind the largest possible number of different letters contained in both <var>X</var> and <var>Y</var> when we cut the string at the optimal position.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>|S| = N</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the largest possible number of different letters contained in both <var>X</var> and <var>Y</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\naabbca\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>If we cut the string between the third and fourth letters into <var>X =</var> <code>aab</code> and <var>Y =</var> <code>bca</code>, the letters contained in both <var>X</var> and <var>Y</var> are <code>a</code> and <code>b</code>.\nThere will never be three or more different letters contained in both <var>X</var> and <var>Y</var>, so the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\naaaaaaaaaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>However we divide <var>S</var>, only <code>a</code> will be contained in both <var>X</var> and <var>Y</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>45\ntgxgdqkyjzhyputjjtllptdfxocrylqfqjynmfbfucbir\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>9\n</pre></section>\n</div>\n</span>", "p03339": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> people standing in a row from west to east.\nEach person is facing east or west.\nThe directions of the people is given as a string <var>S</var> of length <var>N</var>.\nThe <var>i</var>-th person from the west is facing east if <var>S_i =</var> <code>E</code>, and west if <var>S_i =</var> <code>W</code>.</p>\n<p>You will appoint one of the <var>N</var> people as the leader, then command the rest of them to face in the direction of the leader.\nHere, we do not care which direction the leader is facing.</p>\n<p>The people in the row hate to change their directions, so you would like to select the leader so that the number of people who have to change their directions is minimized.\nFind the minimum number of people who have to change their directions.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 3 \\times 10^5</var></li>\n<li><var>|S| = N</var></li>\n<li><var>S_i</var> is <code>E</code> or <code>W</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of people who have to change their directions.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\nWEEWW\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Assume that we appoint the third person from the west as the leader.\nThen, the first person from the west needs to face east and has to turn around.\nThe other people do not need to change their directions, so the number of people who have to change their directions is <var>1</var> in this case.\nIt is not possible to have <var>0</var> people who have to change their directions, so the answer is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>12\nWEWEWEEEWWWE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\nWWWWWEEE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03340": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an integer sequence <var>A</var> of length <var>N</var>.</p>\n<p>Find the number of the pairs of integers <var>l</var> and <var>r</var> (<var>1 \\leq l \\leq r \\leq N</var>) that satisfy the following condition:</p>\n<ul>\n<li><var>A_l\\ xor\\ A_{l+1}\\ xor\\ ...\\ xor\\ A_r = A_l\\ +\\ A_{l+1}\\ +\\ ...\\ +\\ A_r</var></li>\n</ul>\n<p>Here, <var>xor</var> denotes the bitwise exclusive OR.</p>\n<p><details>\n<summary style=\"display:list-item\">Definition of XOR</summary></details></p>\n<p>The XOR of integers <var>c_1, c_2, ..., c_m</var> is defined as follows:</p>\n<ul>\n<li>Let the XOR be <var>X</var>. In the binary representation of <var>X</var>, the digit in the <var>2^k</var>'s place (<var>0 \\leq k</var>; <var>k</var> is an integer) is <var>1</var> if there are an odd number of integers among <var>c_1, c_2, ...c_m</var> whose binary representation has <var>1</var> in the <var>2^k</var>'s place, and <var>0</var> if that number is even.</li>\n</ul>\n<p>For example, let us compute the XOR of <var>3</var> and <var>5</var>. The binary representation of <var>3</var> is <var>011</var>, and the binary representation of <var>5</var> is <var>101</var>, thus the XOR has the binary representation <var>110</var>, that is, the XOR is <var>6</var>.</p>\n<p></p></section></div></span>", "p03341": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> people standing in a row from west to east.\nEach person is facing east or west.\nThe directions of the people is given as a string <var>S</var> of length <var>N</var>.\nThe <var>i</var>-th person from the west is facing east if <var>S_i =</var> <code>E</code>, and west if <var>S_i =</var> <code>W</code>.</p>\n<p>You will appoint one of the <var>N</var> people as the leader, then command the rest of them to face in the direction of the leader.\nHere, we do not care which direction the leader is facing.</p>\n<p>The people in the row hate to change their directions, so you would like to select the leader so that the number of people who have to change their directions is minimized.\nFind the minimum number of people who have to change their directions.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 3 \\times 10^5</var></li>\n<li><var>|S| = N</var></li>\n<li><var>S_i</var> is <code>E</code> or <code>W</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of people who have to change their directions.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\nWEEWW\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>Assume that we appoint the third person from the west as the leader.\nThen, the first person from the west needs to face east and has to turn around.\nThe other people do not need to change their directions, so the number of people who have to change their directions is <var>1</var> in this case.\nIt is not possible to have <var>0</var> people who have to change their directions, so the answer is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>12\nWEWEWEEEWWWE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\nWWWWWEEE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03342": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is an integer sequence <var>A</var> of length <var>N</var>.</p>\n<p>Find the number of the pairs of integers <var>l</var> and <var>r</var> (<var>1 \\leq l \\leq r \\leq N</var>) that satisfy the following condition:</p>\n<ul>\n<li><var>A_l\\ xor\\ A_{l+1}\\ xor\\ ...\\ xor\\ A_r = A_l\\ +\\ A_{l+1}\\ +\\ ...\\ +\\ A_r</var></li>\n</ul>\n<p>Here, <var>xor</var> denotes the bitwise exclusive OR.</p>\n<p><details>\n<summary style=\"display:list-item\">Definition of XOR</summary></details></p>\n<p>The XOR of integers <var>c_1, c_2, ..., c_m</var> is defined as follows:</p>\n<ul>\n<li>Let the XOR be <var>X</var>. In the binary representation of <var>X</var>, the digit in the <var>2^k</var>'s place (<var>0 \\leq k</var>; <var>k</var> is an integer) is <var>1</var> if there are an odd number of integers among <var>c_1, c_2, ...c_m</var> whose binary representation has <var>1</var> in the <var>2^k</var>'s place, and <var>0</var> if that number is even.</li>\n</ul>\n<p>For example, let us compute the XOR of <var>3</var> and <var>5</var>. The binary representation of <var>3</var> is <var>011</var>, and the binary representation of <var>5</var> is <var>101</var>, thus the XOR has the binary representation <var>110</var>, that is, the XOR is <var>6</var>.</p>\n<p></p></section></div></span>", "p03343": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer sequence <var>A</var> of length <var>N</var> and an integer <var>K</var>.\nYou will perform the following operation on this sequence <var>Q</var> times:</p>\n<ul>\n<li>Choose a contiguous subsequence of length <var>K</var>, then remove the smallest element among the <var>K</var> elements contained in the chosen subsequence (if there are multiple such elements, choose one of them as you like).</li>\n</ul>\n<p>Let <var>X</var> and <var>Y</var> be the values of the largest and smallest element removed in the <var>Q</var> operations. You would like <var>X-Y</var> to be as small as possible.\nFind the smallest possible value of <var>X-Y</var> when the <var>Q</var> operations are performed optimally.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2000</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n<li><var>1 \\leq Q \\leq N-K+1</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var> <var>Q</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the smallest possible value of <var>X-Y</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3 2\n4 3 1 5 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>In the first operation, whichever contiguous subsequence of length <var>3</var> we choose, the minimum element in it is <var>1</var>.\nThus, the first operation removes <var>A_3=1</var> and now we have <var>A=(4,3,5,2)</var>.\nIn the second operation, it is optimal to choose <var>(A_2,A_3,A_4)=(3,5,2)</var> as the contiguous subsequence of length <var>3</var> and remove <var>A_4=2</var>.\nIn this case, the largest element removed is <var>2</var>, and the smallest is <var>1</var>, so their difference is <var>2-1=1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 1 6\n1 1 2 3 5 8 13 21 34 55\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11 7 5\n24979445 861648772 623690081 433933447 476190629 262703497 211047202 971407775 628894325 731963982 822804784\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>451211184\n</pre></section>\n</div>\n</span>", "p03344": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a simple undirected graph with <var>N</var> vertices and <var>M</var> edges.\nThe vertices are numbered <var>1</var> through <var>N</var>, and the edges are numbered <var>1</var> through <var>M</var>.\nEdge <var>i</var> connects Vertex <var>U_i</var> and <var>V_i</var>.\nAlso, Vertex <var>i</var> has two predetermined integers <var>A_i</var> and <var>B_i</var>.\nYou will play the following game on this graph.</p>\n<p>First, choose one vertex and stand on it, with <var>W</var> yen (the currency of Japan) in your pocket.\nHere, <var>A_s \\leq W</var> must hold, where <var>s</var> is the vertex you choose.\nThen, perform the following two kinds of operations any number of times in any order:</p>\n<ul>\n<li>Choose one vertex <var>v</var> that is directly connected by an edge to the vertex you are standing on, and move to vertex <var>v</var>. Here, you need to have at least <var>A_v</var> yen in your pocket when you perform this move.</li>\n<li>Donate <var>B_v</var> yen to the vertex <var>v</var> you are standing on. Here, the amount of money in your pocket must not become less than <var>0</var> yen.</li>\n</ul>\n<p>You win the game when you donate once to every vertex.\nFind the smallest initial amount of money <var>W</var> that enables you to win the game.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>N-1 \\leq M \\leq 10^5</var></li>\n<li><var>1 \\leq A_i,B_i \\leq 10^9</var></li>\n<li><var>1 \\leq U_i &lt; V_i \\leq N</var></li>\n<li>The given graph is connected and simple (there is at most one edge between any pair of vertices).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n<var>U_1</var> <var>V_1</var>\n<var>U_2</var> <var>V_2</var>\n<var>:</var>\n<var>U_M</var> <var>V_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the smallest initial amount of money <var>W</var> that enables you to win the game.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n3 1\n1 2\n4 1\n6 2\n1 2\n2 3\n2 4\n1 4\n3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>If you have <var>6</var> yen initially, you can win the game as follows:</p>\n<ul>\n<li>Stand on Vertex <var>4</var>. This is possible since you have not less than <var>6</var> yen.</li>\n<li>Donate <var>2</var> yen to Vertex <var>4</var>. Now you have <var>4</var> yen.</li>\n<li>Move to Vertex <var>3</var>. This is possible since you have not less than <var>4</var> yen.</li>\n<li>Donate <var>1</var> yen to Vertex <var>3</var>. Now you have <var>3</var> yen.</li>\n<li>Move to Vertex <var>2</var>. This is possible since you have not less than <var>1</var> yen.</li>\n<li>Move to Vertex <var>1</var>. This is possible since you have not less than <var>3</var> yen.</li>\n<li>Donate <var>1</var> yen to Vertex <var>1</var>. Now you have <var>2</var> yen.</li>\n<li>Move to Vertex <var>2</var>. This is possible since you have not less than <var>1</var> yen.</li>\n<li>Donate <var>2</var> yen to Vertex <var>2</var>. Now you have <var>0</var> yen.</li>\n</ul>\n<p>If you have less than <var>6</var> yen initially, you cannot win the game. Thus, the answer is <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 8\n6 4\n15 13\n15 19\n15 1\n20 7\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 5\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>44\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9 10\n131 2\n98 79\n242 32\n231 38\n382 82\n224 22\n140 88\n209 70\n164 64\n6 8\n1 6\n1 4\n1 3\n4 7\n4 9\n3 7\n3 9\n5 9\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>582\n</pre></section>\n</div>\n</span>", "p03345": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi, Nakahashi and Hikuhashi have integers <var>A</var>, <var>B</var> and <var>C</var>, respectively.\nAfter repeating the following operation <var>K</var> times, find the integer Takahashi will get minus the integer Nakahashi will get:</p>\n<ul>\n<li>Each of them simultaneously calculate the sum of the integers that the other two people have, then replace his own integer with the result.</li>\n</ul>\n<p>However, if the absolute value of the answer exceeds <var>10^{18}</var>, print <code>Unfair</code> instead.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A,B,C \\leq 10^9</var></li>\n<li><var>0 \\leq K \\leq 10^{18}</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the integer Takahashi will get minus the integer Nakahashi will get, after repeating the following operation <var>K</var> times.\nIf the absolute value of the answer exceeds <var>10^{18}</var>, print <code>Unfair</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>After one operation, Takahashi, Nakahashi and Hikuhashi have <var>5</var>, <var>4</var> and <var>3</var>, respectively. We should print <var>5-4=1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3 2 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1000000000 1000000000 1000000000 1000000000000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03346": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a sequence <var>(P_1,P_2,...,P_N)</var> which is a permutation of the integers from <var>1</var> through <var>N</var>.\nYou would like to sort this sequence in ascending order by repeating the following operation:</p>\n<ul>\n<li>Choose an element in the sequence and move it to the beginning or the end of the sequence.</li>\n</ul>\n<p>Find the minimum number of operations required.\nIt can be proved that it is actually possible to sort the sequence using this operation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5</var></li>\n<li><var>(P_1,P_2,...,P_N)</var> is a permutation of  <var>(1,2,...,N)</var>.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_1</var>\n<var>:</var>\n<var>P_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1\n3\n2\n4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, the sequence can be sorted in ascending order as follows:</p>\n<ul>\n<li>Move <var>2</var> to the beginning. The sequence is now <var>(2,1,3,4)</var>.</li>\n<li>Move <var>1</var> to the beginning. The sequence is now <var>(1,2,3,4)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n3\n2\n5\n1\n4\n6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\n6\n3\n1\n2\n7\n4\n8\n5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03347": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a sequence <var>X</var> of length <var>N</var>, where every element is initially <var>0</var>. Let <var>X_i</var> denote the <var>i</var>-th element of <var>X</var>.</p>\n<p>You are given a sequence <var>A</var> of length <var>N</var>. The <var>i</var>-th element of <var>A</var> is <var>A_i</var>. Determine if we can make <var>X</var> equal to <var>A</var> by repeating the operation below. If we can, find the minimum number of operations required.</p>\n<ul>\n<li>Choose an integer <var>i</var> such that <var>1\\leq i\\leq N-1</var>. Replace the value of <var>X_{i+1}</var> with the value of <var>X_i</var> plus <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>0 \\leq A_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var>\n<var>:</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If we can make <var>X</var> equal to <var>A</var> by repeating the operation, print the minimum number of operations required. If we cannot, print <var>-1</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n0\n1\n1\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>We can make <var>X</var> equal to <var>A</var> as follows:</p>\n<ul>\n<li>Choose <var>i=2</var>. <var>X</var> becomes <var>(0,0,1,0)</var>.</li>\n<li>Choose <var>i=1</var>. <var>X</var> becomes <var>(0,1,1,0)</var>.</li>\n<li>Choose <var>i=3</var>. <var>X</var> becomes <var>(0,1,1,2)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1\n2\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9\n0\n1\n1\n0\n1\n2\n2\n1\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03348": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Coloring of the vertices of a tree <var>G</var> is called a <em>good coloring</em> when, for every pair of two vertices <var>u</var> and <var>v</var> painted in the same color, picking <var>u</var> as the root and picking <var>v</var> as the root would result in isomorphic rooted trees.</p>\n<p>Also, the <em>colorfulness</em> of <var>G</var> is defined as the minimum possible number of different colors used in a good coloring of <var>G</var>.</p>\n<p>You are given a tree with <var>N</var> vertices. The vertices are numbered <var>1</var> through <var>N</var>, and the <var>i</var>-th edge connects Vertex <var>a_i</var> and Vertex <var>b_i</var>. We will construct a new tree <var>T</var> by repeating the following operation on this tree some number of times:</p>\n<ul>\n<li>Add a new vertex to the tree by connecting it to one of the vertices in the current tree with an edge.</li>\n</ul>\n<p>Find the minimum possible colorfulness of <var>T</var>.\nAdditionally, print the minimum number of leaves (vertices with degree <var>1</var>) in a tree <var>T</var> that achieves the minimum colorfulness.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>The phrase \"picking <var>u</var> as the root and picking <var>v</var> as the root would result in isomorphic rooted trees\" for a tree <var>G</var> means that there exists a bijective function <var>f_{uv}</var> from the vertex set of <var>G</var> to itself such that both of the following conditions are met:</p>\n<ul>\n<li><var>f_{uv}(u)=v</var></li>\n<li>For every pair of two vertices <var>(a,b)</var>, edge <var>(a,b)</var> exists if and only if edge <var>(f_{uv}(a),f_{uv}(b))</var> exists.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq a_i,b_i \\leq N(1\\leq i\\leq N-1)</var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print two integers with a space in between.\nFirst, print the minimum possible colorfulness of a tree <var>T</var> that can be constructed.\nSecond, print the minimum number of leaves in a tree that achieves it.</p>\n<p>It can be shown that, under the constraints of this problem, the values that should be printed fit into <var>64</var>-bit signed integers.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 2\n2 3\n3 4\n3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 4\n</pre>\n<p>If we connect a new vertex <var>6</var> to vertex <var>2</var>, painting the vertices <var>(1,4,5,6)</var> red and painting the vertices <var>(2,3)</var> blue is a good coloring.\nSince painting all the vertices in a single color is not a good coloring, we can see that the colorfulness of this tree is <var>2</var>.\nThis is actually the optimal solution. There are four leaves, so we should print <var>2</var> and <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>8\n1 2\n2 3\n4 3\n5 4\n6 7\n6 8\n3 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3 4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n3 8\n5 9\n3 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4 6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>13\n5 6\n6 4\n2 8\n4 7\n8 9\n3 2\n10 4\n11 10\n2 4\n13 10\n1 8\n12 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>4 12\n</pre></section>\n</div>\n</span>", "p03349": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the number of the possible tuples of sequences <var>(A_0,A_1,...,A_N)</var> that satisfy all of the following conditions, modulo <var>M</var>:</p>\n<ul>\n<li>For every <var>i</var> <var>(0\\leq i\\leq N)</var>, <var>A_i</var> is a sequence of length <var>i</var> consisting of integers between <var>1</var> and <var>K</var> (inclusive);</li>\n<li>For every <var>i</var> <var>(1\\leq i\\leq N)</var>, <var>A_{i-1}</var> is a subsequence of <var>A_i</var>, that is, there exists <var>1\\leq x_i\\leq i</var> such that the removal of the <var>x_i</var>-th element of <var>A_i</var> would result in a sequence equal to <var>A_{i-1}</var>;</li>\n<li>For every <var>i</var> <var>(1\\leq i\\leq N)</var>, <var>A_i</var> is lexicographically larger than <var>A_{i-1}</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,K \\leq 300</var></li>\n<li><var>2 \\leq M \\leq 10^9</var></li>\n<li><var>N</var>, <var>K</var> and <var>M</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the possible tuples of sequences <var>(A_0,A_1,...,A_N)</var>, modulo <var>M</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>Five tuples below satisfy the conditions:</p>\n<ul>\n<li><var>(),(1),(1,1)</var></li>\n<li><var>(),(1),(1,2)</var></li>\n<li><var>(),(1),(2,1)</var></li>\n<li><var>(),(2),(2,1)</var></li>\n<li><var>(),(2),(2,2)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3 999999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>358\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>150 150 998244353\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>186248260\n</pre></section>\n</div>\n</span>", "p03350": "<span class=\"lang-en\">\n<p>Score : <var>2300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a set <var>S</var> of strings consisting of <code>0</code> and <code>1</code>, and an integer <var>K</var>.</p>\n<p>Find the longest string that is a subsequence of <var>K</var> or more different strings in <var>S</var>.\nIf there are multiple strings that satisfy this condition, find the lexicographically smallest such string.</p>\n<p>Here, <var>S</var> is given in the format below:</p>\n<ul>\n<li>The data directly given to you is an integer <var>N</var>, and <var>N+1</var> strings <var>X_0,X_1,...,X_N</var>. For every <var>i</var> <var>(0\\leq i\\leq N)</var>, the length of <var>X_i</var> is <var>2^i</var>.</li>\n<li>For every pair of two integers <var>(i,j)</var> <var>(0\\leq i\\leq N,0\\leq j\\leq 2^i-1)</var>, the <var>j</var>-th character of <var>X_i</var> is <code>1</code> if and only if the binary representation of <var>j</var> with <var>i</var> digits (possibly with leading zeros) belongs to <var>S</var>. Here, the first and last characters in <var>X_i</var> are called the <var>0</var>-th and <var>(2^i-1)</var>-th characters, respectively.</li>\n<li><var>S</var> does not contain a string with length <var>N+1</var> or more.</li>\n</ul>\n<p>Here, a string <var>A</var> is a subsequence of another string <var>B</var> when there exists a sequence of integers <var>t_1 &lt; ... &lt; t_{|A|}</var> such that, for every <var>i</var> <var>(1\\leq i\\leq |A|)</var>, the <var>i</var>-th character of <var>A</var> and the <var>t_i</var>-th character of <var>B</var> is equal.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq N \\leq 20</var></li>\n<li><var>X_i(0\\leq i\\leq N)</var> is a string of length <var>2^i</var> consisting of <code>0</code> and <code>1</code>.</li>\n<li><var>1 \\leq K \\leq |S|</var></li>\n<li><var>K</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>X_0</var>\n<var>:</var>\n<var>X_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the lexicographically smallest string among the longest strings that are subsequences of <var>K</var> or more different strings in <var>S</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4\n1\n01\n1011\n01001110\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>The following strings belong to <var>S</var>: the empty string, <code>1</code>, <code>00</code>, <code>10</code>, <code>11</code>, <code>001</code>, <code>100</code>, <code>101</code> and <code>110</code>.\nThe lexicographically smallest string among the longest strings that are subsequences of four or more of them is <code>10</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 6\n1\n01\n1011\n10111010\n1101110011111101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 5\n0\n11\n1111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>\n</pre>\n<p>The answer is the empty string.</p></section>\n</div>\n</span>", "p03359": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>In AtCoder Kingdom, Gregorian calendar is used, and dates are written in the \"year-month-day\" order, or the \"month-day\" order without the year.<br/>\nFor example, May <var>3</var>, <var>2018</var> is written as <var>2018</var>-<var>5</var>-<var>3</var>, or <var>5</var>-<var>3</var> without the year.  </p>\n<p>In this country, a date is called <em>Takahashi</em> when the month and the day are equal as numbers. For example, <var>5</var>-<var>5</var> is Takahashi.<br/>\nHow many days from <var>2018</var>-<var>1</var>-<var>1</var> through <var>2018</var>-<var>a</var>-<var>b</var> are Takahashi?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>a</var> is an integer between <var>1</var> and <var>12</var> (inclusive).</li>\n<li><var>b</var> is an integer between <var>1</var> and <var>31</var> (inclusive).</li>\n<li><var>2018</var>-<var>a</var>-<var>b</var> is a valid date in Gregorian calendar.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of days from <var>2018</var>-<var>1</var>-<var>1</var> through <var>2018</var>-<var>a</var>-<var>b</var> that are Takahashi.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>There are five days that are Takahashi: <var>1</var>-<var>1</var>, <var>2</var>-<var>2</var>, <var>3</var>-<var>3</var>, <var>4</var>-<var>4</var> and <var>5</var>-<var>5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>There is only one day that is Takahashi: <var>1</var>-<var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11 30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>11\n</pre>\n<p>There are eleven days that are Takahashi: <var>1</var>-<var>1</var>, <var>2</var>-<var>2</var>, <var>3</var>-<var>3</var>, <var>4</var>-<var>4</var>, <var>5</var>-<var>5</var>, <var>6</var>-<var>6</var>, <var>7</var>-<var>7</var>, <var>8</var>-<var>8</var>, <var>9</var>-<var>9</var>, <var>10</var>-<var>10</var> and <var>11</var>-<var>11</var>.</p></section>\n</div>\n</span>", "p03360": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>There are three positive integers <var>A</var>, <var>B</var> and <var>C</var> written on a blackboard. E869120 performs the following operation <var>K</var> times:</p>\n<ul>\n<li>Choose one integer written on the blackboard and let the chosen integer be <var>n</var>. Replace the chosen integer with <var>2n</var>.</li>\n</ul>\n<p>What is the largest possible sum of the integers written on the blackboard after <var>K</var> operations?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>A, B</var> and <var>C</var> are integers between <var>1</var> and <var>50</var> (inclusive).</li>\n<li><var>K</var> is an integer between <var>1</var> and <var>10</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n<var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the largest possible sum of the integers written on the blackboard after <var>K</var> operations by E869220.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3 11\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>30\n</pre>\n<p>In this sample, <var>5, 3, 11</var> are initially written on the blackboard, and E869120 can perform the operation once.<br/>\nThere are three choices:  </p>\n<ol>\n<li>Double <var>5</var>: The integers written on the board after the operation are <var>10, 3, 11</var>.</li>\n<li>Double <var>3</var>: The integers written on the board after the operation are <var>5, 6, 11</var>.</li>\n<li>Double <var>11</var>: The integers written on the board after the operation are <var>5, 3, 22</var>.</li>\n</ol>\n<p>If he chooses 3., the sum of the integers written on the board afterwards is <var>5 + 3 + 22 = 30</var>, which is the largest among 1. through 3.  </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3 4\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>22\n</pre>\n<p>E869120 can perform the operation twice. The sum of the integers eventually written on the blackboard is maximized as follows:  </p>\n<ul>\n<li>First, double <var>4</var>. The integers written on the board are now <var>3, 3, 8</var>.  </li>\n<li>Next, double <var>8</var>. The integers written on the board are now <var>3, 3, 16</var>.  </li>\n</ul>\n<p>Then, the sum of the integers eventually written on the blackboard is <var>3 + 3 + 16 = 22</var>.</p></section>\n</div>\n</span>", "p03362": "<span class=\"lang-en\">\n<p>Score: <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>Print a sequence <var>a_1, a_2, ..., a_N</var> whose length is <var>N</var> that satisfies the following conditions:</p>\n<ul>\n<li><var>a_i</var> <var>(1 \\leq i \\leq N)</var> is a prime number at most <var>55</var> <var>555</var>.</li>\n<li>The values of <var>a_1, a_2, ..., a_N</var> are all different.</li>\n<li>In every choice of five different integers from <var>a_1, a_2, ..., a_N</var>, the sum of those integers is a composite number.</li>\n</ul>\n<p>If there are multiple such sequences, printing any of them is accepted.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3>\n<p>An integer <var>N</var> not less than <var>2</var> is called a prime number if it cannot be divided evenly by any integers except <var>1</var> and <var>N</var>, and called a composite number otherwise.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> is an integer between <var>5</var> and <var>55</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print <var>N</var> numbers <var>a_1, a_2, a_3, ..., a_N</var> in a line, with spaces in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3 5 7 11 31\n</pre>\n<p>Let us see if this output actually satisfies the conditions.<br/>\nFirst, <var>3</var>, <var>5</var>, <var>7</var>, <var>11</var> and <var>31</var> are all different, and all of them are prime numbers.<br/>\nThe only way to choose five among them is to choose all of them, whose sum is <var>a_1+a_2+a_3+a_4+a_5=57</var>, which is a composite number.<br/>\nThere are also other possible outputs, such as <code>2 3 5 7 13</code>, <code>11 13 17 19 31</code> and <code>7 11 5 31 3</code>.  </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2 3 5 7 11 13\n</pre>\n<ul>\n<li><var>2</var>, <var>3</var>, <var>5</var>, <var>7</var>, <var>11</var>, <var>13</var> are all different prime numbers.</li>\n<li><var>2+3+5+7+11=28</var> is a composite number.</li>\n<li><var>2+3+5+7+13=30</var> is a composite number.</li>\n<li><var>2+3+5+11+13=34</var> is a composite number.</li>\n<li><var>2+3+7+11+13=36</var> is a composite number.</li>\n<li><var>2+5+7+11+13=38</var> is a composite number.</li>\n<li><var>3+5+7+11+13=39</var> is a composite number.</li>\n</ul>\n<p>Thus, the sequence <code>2 3 5 7 11 13</code> satisfies the conditions.  </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2 5 7 13 19 37 67 79\n</pre></section>\n</div>\n</span>", "p03363": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have an integer sequence <var>A</var>, whose length is <var>N</var>.</p>\n<p>Find the number of the non-empty <strong>contiguous</strong> subsequences of <var>A</var> whose sums are <var>0</var>.\nNote that we are counting <strong>the ways to take out subsequences</strong>.\nThat is, even if the contents of some two subsequences are the same, they are counted individually if they are taken from different positions.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>-10^9 \\leq A_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the number of the non-empty contiguous subsequences of <var>A</var> whose sum is <var>0</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 3 -4 2 2 -2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>There are three contiguous subsequences whose sums are <var>0</var>: <var>(1,3,-4)</var>, <var>(-4,2,2)</var> and <var>(2,-2)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7\n1 -1 1 -1 1 -1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>12\n</pre>\n<p>In this case, some subsequences that have the same contents but are taken from different positions are counted individually.\nFor example, three occurrences of <var>(1, -1)</var> are counted.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n1 -2 3 -4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>There are no contiguous subsequences whose sums are <var>0</var>.</p></section>\n</div>\n</span>", "p03365": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> squares lining up in a row, numbered <var>1</var> through <var>N</var> from left to right.\nInitially, all squares are white.\nWe also have <var>N-1</var> painting machines, numbered <var>1</var> through <var>N-1</var>.\nWhen operated, Machine <var>i</var> paints Square <var>i</var> and <var>i+1</var> black.</p>\n<p>Snuke will operate these machines one by one.\nThe order in which he operates them is represented by a permutation of <var>(1, 2, ..., N-1)</var>, <var>P</var>, which means that the <var>i</var>-th operated machine is Machine <var>P_i</var>.</p>\n<p>Here, the <em>score</em> of a permutation <var>P</var> is defined as the number of machines that are operated before all the squares are painted black for the first time, when the machines are operated in the order specified by <var>P</var>.\nSnuke has not decided what permutation <var>P</var> to use, but he is interested in the scores of possible permutations.\nFind the sum of the scores over all possible permutations for him.\nSince this can be extremely large, compute the sum modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the scores over all possible permutations, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>16\n</pre>\n<p>There are six possible permutations as <var>P</var>.\nAmong them, <var>P = (1, 3, 2)</var> and <var>P = (3, 1, 2)</var> have a score of <var>2</var>, and the others have a score of <var>3</var>.\nThus, the answer is <var>2 \\times 2 + 3 \\times 4 = 16</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>There is only one possible permutation: <var>P = (1)</var>, which has a score of <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>84\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>100000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>341429644\n</pre></section>\n</div>\n</span>", "p03367": "<span class=\"lang-en\">\n<p>Score : <var>1700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has an integer sequence <var>A</var> whose length is <var>N</var>.\nHe likes permutations of <var>(1, 2, ..., N)</var>, <var>P</var>, that satisfy the following condition:</p>\n<ul>\n<li><var>P_i \\leq A_i</var> for all <var>i</var> ( <var>1 \\leq i \\leq N</var> ).</li>\n</ul>\n<p>Snuke is interested in the inversion numbers of such permutations.\nFind the sum of the inversion numbers over all permutations that satisfy the condition.\nSince this can be extremely large, compute the sum modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>The <em>inversion number</em> of a sequence <var>Z</var> whose length <var>N</var> is the number of pairs of integers <var>i</var> and <var>j</var> ( <var>1 \\leq i &lt; j \\leq N</var> ) such that <var>Z_i &gt; Z_j</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq A_i \\leq N</var> ( <var>1 \\leq i \\leq N</var> )</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the inversion numbers over all permutations that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>There are four permutations that satisfy the condition: <var>(1,2,3)</var>, <var>(1,3,2)</var>, <var>(2,1,3)</var> and <var>(2,3,1)</var>.\nThe inversion numbers of these permutations are <var>0</var>, <var>1</var>, <var>1</var> and <var>2</var>, respectively, for a total of <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n4 2 5 1 6 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n<p>Only one permutation <var>(4,2,5,1,6,3)</var> satisfies the condition.\nThe inversion number of this permutation is <var>7</var>, so the answer is <var>7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n4 4 4 4 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>No permutation satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>30\n22 30 15 20 10 29 11 29 28 11 26 10 18 28 22 5 29 16 24 24 27 10 21 30 29 19 28 27 18 23\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>848414012\n</pre></section>\n</div>\n</span>", "p03368": "<span class=\"lang-en\">\n<p>Score : <var>1700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a rooted tree with <var>N</var> vertices, numbered <var>1</var> through <var>N</var>.\nVertex <var>1</var> is the root of the tree, and the parent of Vertex <var>i</var> ( <var>2\\leq i \\leq N</var> ) is Vertex <var>P_i</var> ( <var>P_i &lt; i</var> ).\nThere is a number, <var>0</var> or <var>1</var>, written on each vertex. The number written on Vertex <var>i</var> is <var>V_i</var>.</p>\n<p>Snuke would like to arrange the vertices of this tree in a horizontal row.\nHere, for every vertex, there should be no ancestor of that vertex to the right of that vertex.</p>\n<p>After arranging the vertices, let <var>X</var> be the sequence obtained by reading the numbers written on the vertices from left to right in the arrangement.\nSnuke would like to minimize the inversion number of <var>X</var>.\nFind the minimum possible inversion number of <var>X</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>The <em>inversion number</em> of a sequence <var>Z</var> whose length <var>N</var> is the number of pairs of integers <var>i</var> and <var>j</var> ( <var>1 \\leq i &lt; j \\leq N</var> ) such that <var>Z_i &gt; Z_j</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>1 \\leq P_i &lt; i</var> ( <var>2 \\leq i \\leq N</var> )</li>\n<li><var>0 \\leq V_i \\leq 1</var> ( <var>1 \\leq i \\leq N</var> )</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_2</var> <var>P_3</var> <var>...</var> <var>P_N</var>\n<var>V_1</var> <var>V_2</var> <var>...</var> <var>V_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible inversion number of <var>X</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 1 2 3 3\n0 1 1 0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>When the vertices are arranged in the order <var>1, 3, 5, 6, 2, 4</var>, <var>X</var> will be <var>(0, 1, 0, 0, 1, 0)</var>, whose inversion number is <var>4</var>.\nIt is impossible to have fewer inversions, so the answer is <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p><var>X = (0)</var>, whose inversion number is <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>15\n1 2 3 2 5 6 2 2 9 10 1 12 13 12\n1 1 1 0 1 1 0 0 1 0 0 1 1 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>31\n</pre></section>\n</div>\n</span>", "p03369": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In \"Takahashi-ya\", a ramen restaurant, a bowl of ramen costs <var>700</var> yen (the currency of Japan), plus <var>100</var> yen for each kind of topping (boiled egg, sliced pork, green onions).</p>\n<p>A customer ordered a bowl of ramen and told which toppings to put on his ramen to a clerk. The clerk took a memo of the order as a string <var>S</var>. <var>S</var> is three characters long, and if the first character in <var>S</var> is <code>o</code>, it means the ramen should be topped with boiled egg; if that character is <code>x</code>, it means the ramen should not be topped with boiled egg. Similarly, the second and third characters in <var>S</var> mean the presence or absence of sliced pork and green onions on top of the ramen.</p>\n<p>Write a program that, when <var>S</var> is given, prints the price of the corresponding bowl of ramen.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is a string of length <var>3</var>.</li>\n<li>Each character in <var>S</var> is <code>o</code> or <code>x</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the price of the bowl of ramen corresponding to <var>S</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>oxo\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>900\n</pre>\n<p>The price of a ramen topped with two kinds of toppings, boiled egg and green onions, is <var>700 + 100 \\times 2 = 900</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>ooo\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1000\n</pre>\n<p>The price of a ramen topped with all three kinds of toppings is <var>700 + 100 \\times 3 = 1000</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>xxx\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>700\n</pre>\n<p>The price of a ramen without any toppings is <var>700</var> yen.</p></section>\n</div>\n</span>", "p03377": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are a total of <var>A + B</var> cats and dogs.\nAmong them, <var>A</var> are known to be cats, but the remaining <var>B</var> are not known to be either cats or dogs.</p>\n<p>Determine if it is possible that there are exactly <var>X</var> cats among these <var>A + B</var> animals.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A \\leq 100</var></li>\n<li><var>1 \\leq B \\leq 100</var></li>\n<li><var>1 \\leq X \\leq 200</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible that there are exactly <var>X</var> cats, print <code>YES</code>; if it is impossible, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 5 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>If there are one cat and four dogs among the <var>B = 5</var> animals, there are <var>X = 4</var> cats in total.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n<p>Even if all of the <var>B = 2</var> animals are cats, there are less than <var>X = 6</var> cats in total.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre>\n<p>Even if all of the <var>B = 3</var> animals are dogs, there are more than <var>X = 2</var> cats in total.</p></section>\n</div>\n</span>", "p03378": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N + 1</var> squares arranged in a row, numbered <var>0, 1, ..., N</var> from left to right.</p>\n<p>Initially, you are in Square <var>X</var>.\nYou can freely travel between adjacent squares. Your goal is to reach Square <var>0</var> or Square <var>N</var>.\nHowever, for each <var>i = 1, 2, ..., M</var>, there is a toll gate in Square <var>A_i</var>, and traveling to Square <var>A_i</var> incurs a cost of <var>1</var>.\nIt is guaranteed that there is no toll gate in Square <var>0</var>, Square <var>X</var> and Square <var>N</var>.</p>\n<p>Find the minimum cost incurred before reaching the goal.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq M \\leq 100</var></li>\n<li><var>1 \\leq X \\leq N - 1</var></li>\n<li><var>1 \\leq A_1 &lt; A_2 &lt; ... &lt; A_M \\leq N</var></li>\n<li><var>A_i \\neq X</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>X</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum cost incurred before reaching the goal.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3 3\n1 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>The optimal solution is as follows:</p>\n<ul>\n<li>First, travel from Square <var>3</var> to Square <var>4</var>. Here, there is a toll gate in Square <var>4</var>, so the cost of <var>1</var> is incurred.</li>\n<li>Then, travel from Square <var>4</var> to Square <var>5</var>. This time, no cost is incurred.</li>\n<li>Now, we are in Square <var>5</var> and we have reached the goal.</li>\n</ul>\n<p>In this case, the total cost incurred is <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 3 2\n4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>We may be able to reach the goal at no cost.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 7 5\n1 2 3 4 6 8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03379": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>When <var>l</var> is an odd number, the median of <var>l</var> numbers <var>a_1, a_2, ..., a_l</var> is the <var>(\\frac{l+1}{2})</var>-th largest value among <var>a_1, a_2, ..., a_l</var>.</p>\n<p>You are given <var>N</var> numbers <var>X_1, X_2, ..., X_N</var>, where <var>N</var> is an even number.\nFor each <var>i = 1, 2, ..., N</var>, let the median of <var>X_1, X_2, ..., X_N</var> excluding <var>X_i</var>, that is, the median of <var>X_1, X_2, ..., X_{i-1}, X_{i+1}, ..., X_N</var> be <var>B_i</var>.</p>\n<p>Find <var>B_i</var> for each <var>i = 1, 2, ..., N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200000</var></li>\n<li><var>N</var> is even.</li>\n<li><var>1 \\leq X_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>X_2</var> ... <var>X_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines.\nThe <var>i</var>-th line should contain <var>B_i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 4 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n3\n3\n4\n</pre>\n<ul>\n<li>Since the median of <var>X_2, X_3, X_4</var> is <var>4</var>, <var>B_1 = 4</var>.</li>\n<li>Since the median of <var>X_1, X_3, X_4</var> is <var>3</var>, <var>B_2 = 3</var>.</li>\n<li>Since the median of <var>X_1, X_2, X_4</var> is <var>3</var>, <var>B_3 = 3</var>.</li>\n<li>Since the median of <var>X_1, X_2, X_3</var> is <var>4</var>, <var>B_4 = 4</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n5 5 4 4 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n4\n4\n4\n4\n4\n</pre></section>\n</div>\n</span>", "p03380": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>{\\rm comb}(n,r)</var> be the number of ways to choose <var>r</var> objects from among <var>n</var> objects, disregarding order.\nFrom <var>n</var> non-negative integers <var>a_1, a_2, ..., a_n</var>, select two numbers <var>a_i &gt; a_j</var> so that <var>{\\rm comb}(a_i,a_j)</var> is maximized.\nIf there are multiple pairs that maximize the value, any of them is accepted.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq n \\leq 10^5</var></li>\n<li><var>0 \\leq a_i \\leq 10^9</var></li>\n<li><var>a_1,a_2,...,a_n</var> are pairwise distinct.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>a_i</var> and <var>a_j</var> that you selected, with a space in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n6 9 4 2 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11 6\n</pre>\n<p><var>\\rm{comb}(a_i,a_j)</var> for each possible selection is as follows:</p>\n<ul>\n<li><var>\\rm{comb}(4,2)=6</var> </li>\n<li><var>\\rm{comb}(6,2)=15</var> </li>\n<li><var>\\rm{comb}(6,4)=15</var> </li>\n<li><var>\\rm{comb}(9,2)=36</var> </li>\n<li><var>\\rm{comb}(9,4)=126</var> </li>\n<li><var>\\rm{comb}(9,6)=84</var> </li>\n<li><var>\\rm{comb}(11,2)=55</var> </li>\n<li><var>\\rm{comb}(11,4)=330</var> </li>\n<li><var>\\rm{comb}(11,6)=462</var> </li>\n<li><var>\\rm{comb}(11,9)=55</var></li>\n</ul>\n<p>Thus, we should print <var>11</var> and <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n100 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100 0\n</pre></section>\n</div>\n</span>", "p03381": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>When <var>l</var> is an odd number, the median of <var>l</var> numbers <var>a_1, a_2, ..., a_l</var> is the <var>(\\frac{l+1}{2})</var>-th largest value among <var>a_1, a_2, ..., a_l</var>.</p>\n<p>You are given <var>N</var> numbers <var>X_1, X_2, ..., X_N</var>, where <var>N</var> is an even number.\nFor each <var>i = 1, 2, ..., N</var>, let the median of <var>X_1, X_2, ..., X_N</var> excluding <var>X_i</var>, that is, the median of <var>X_1, X_2, ..., X_{i-1}, X_{i+1}, ..., X_N</var> be <var>B_i</var>.</p>\n<p>Find <var>B_i</var> for each <var>i = 1, 2, ..., N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200000</var></li>\n<li><var>N</var> is even.</li>\n<li><var>1 \\leq X_i \\leq 10^9</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>X_2</var> ... <var>X_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines.\nThe <var>i</var>-th line should contain <var>B_i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n2 4 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n3\n3\n4\n</pre>\n<ul>\n<li>Since the median of <var>X_2, X_3, X_4</var> is <var>4</var>, <var>B_1 = 4</var>.</li>\n<li>Since the median of <var>X_1, X_3, X_4</var> is <var>3</var>, <var>B_2 = 3</var>.</li>\n<li>Since the median of <var>X_1, X_2, X_4</var> is <var>3</var>, <var>B_3 = 3</var>.</li>\n<li>Since the median of <var>X_1, X_2, X_3</var> is <var>4</var>, <var>B_4 = 4</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n5 5 4 4 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n4\n4\n4\n4\n4\n</pre></section>\n</div>\n</span>", "p03382": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>{\\rm comb}(n,r)</var> be the number of ways to choose <var>r</var> objects from among <var>n</var> objects, disregarding order.\nFrom <var>n</var> non-negative integers <var>a_1, a_2, ..., a_n</var>, select two numbers <var>a_i &gt; a_j</var> so that <var>{\\rm comb}(a_i,a_j)</var> is maximized.\nIf there are multiple pairs that maximize the value, any of them is accepted.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq n \\leq 10^5</var></li>\n<li><var>0 \\leq a_i \\leq 10^9</var></li>\n<li><var>a_1,a_2,...,a_n</var> are pairwise distinct.</li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>a_i</var> and <var>a_j</var> that you selected, with a space in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n6 9 4 2 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11 6\n</pre>\n<p><var>\\rm{comb}(a_i,a_j)</var> for each possible selection is as follows:</p>\n<ul>\n<li><var>\\rm{comb}(4,2)=6</var> </li>\n<li><var>\\rm{comb}(6,2)=15</var> </li>\n<li><var>\\rm{comb}(6,4)=15</var> </li>\n<li><var>\\rm{comb}(9,2)=36</var> </li>\n<li><var>\\rm{comb}(9,4)=126</var> </li>\n<li><var>\\rm{comb}(9,6)=84</var> </li>\n<li><var>\\rm{comb}(11,2)=55</var> </li>\n<li><var>\\rm{comb}(11,4)=330</var> </li>\n<li><var>\\rm{comb}(11,6)=462</var> </li>\n<li><var>\\rm{comb}(11,9)=55</var></li>\n</ul>\n<p>Thus, we should print <var>11</var> and <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n100 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100 0\n</pre></section>\n</div>\n</span>", "p03385": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> of length <var>3</var> consisting of <code>a</code>, <code>b</code> and <code>c</code>. Determine if <var>S</var> can be obtained by permuting <code>abc</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>|S|=3</var></li>\n<li><var>S</var> consists of <code>a</code>, <code>b</code> and <code>c</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> can be obtained by permuting <code>abc</code>, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>bac\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Swapping the first and second characters in <code>bac</code> results in <code>abc</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>bab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>abc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>aaa\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03386": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Print all the integers that satisfies the following in ascending order:</p>\n<ul>\n<li>Among the integers between <var>A</var> and <var>B</var> (inclusive), it is either within the <var>K</var> smallest integers or within the <var>K</var> largest integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A \\leq B \\leq 10^9</var></li>\n<li><var>1 \\leq K \\leq 100</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print all the integers that satisfies the condition above in ascending order.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 8 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n4\n7\n8\n</pre>\n<ul>\n<li><var>3</var> is the first smallest integer among the integers between <var>3</var> and <var>8</var>.</li>\n<li><var>4</var> is the second smallest integer among the integers between <var>3</var> and <var>8</var>.</li>\n<li><var>7</var> is the second largest integer among the integers between <var>3</var> and <var>8</var>.</li>\n<li><var>8</var> is the first largest integer among the integers between <var>3</var> and <var>8</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 8 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n5\n6\n7\n8\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 9 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n3\n4\n5\n6\n7\n8\n9\n</pre></section>\n</div>\n</span>", "p03387": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given three integers <var>A</var>, <var>B</var> and <var>C</var>. Find the minimum number of operations required to make <var>A</var>, <var>B</var> and <var>C</var> all equal by repeatedly performing the following two kinds of operations in any order:</p>\n<ul>\n<li>Choose two among <var>A</var>, <var>B</var> and <var>C</var>, then increase both by <var>1</var>.</li>\n<li>Choose one among <var>A</var>, <var>B</var> and <var>C</var>, then increase it by <var>2</var>.</li>\n</ul>\n<p>It can be proved that we can always make <var>A</var>, <var>B</var> and <var>C</var> all equal by repeatedly performing these operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq A,B,C \\leq 50</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required to make <var>A</var>, <var>B</var> and <var>C</var> all equal.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 5 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>We can make <var>A</var>, <var>B</var> and <var>C</var> all equal by the following operations:</p>\n<ul>\n<li>Increase <var>A</var> and <var>C</var> by <var>1</var>. Now, <var>A</var>, <var>B</var>, <var>C</var> are <var>3</var>, <var>5</var>, <var>5</var>, respectively.</li>\n<li>Increase <var>A</var> by <var>2</var>. Now, <var>A</var>, <var>B</var>, <var>C</var> are <var>5</var>, <var>5</var>, <var>5</var>, respectively.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 6 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31 41 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>23\n</pre></section>\n</div>\n</span>", "p03388": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>10^{10^{10}}</var> participants, including Takahashi, competed in two programming contests.\nIn each contest, all participants had distinct ranks from first through <var>10^{10^{10}}</var>-th.</p>\n<p>The <em>score</em> of a participant is the product of his/her ranks in the two contests.</p>\n<p>Process the following <var>Q</var> queries:</p>\n<ul>\n<li>In the <var>i</var>-th query, you are given two positive integers <var>A_i</var> and <var>B_i</var>. Assuming that Takahashi was ranked <var>A_i</var>-th in the first contest and <var>B_i</var>-th in the second contest, find the maximum possible number of participants whose scores are smaller than Takahashi's.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq Q \\leq 100</var></li>\n<li><var>1\\leq A_i,B_i\\leq 10^9(1\\leq i\\leq Q)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>Q</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_Q</var> <var>B_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each query, print the maximum possible number of participants whose scores are smaller than Takahashi's.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8\n1 4\n10 5\n3 3\n4 11\n8 9\n22 40\n8 36\n314159265 358979323\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n12\n4\n11\n14\n57\n31\n671644785\n</pre>\n<p>Let us denote a participant who was ranked <var>x</var>-th in the first contest and <var>y</var>-th in the second contest as <var>(x,y)</var>.</p>\n<p>In the first query, <var>(2,1)</var> is a possible candidate of a participant whose score is smaller than Takahashi's. There are never two or more participants whose scores are smaller than Takahashi's, so we should print <var>1</var>.</p></section>\n</div>\n</span>", "p03389": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given three integers <var>A</var>, <var>B</var> and <var>C</var>. Find the minimum number of operations required to make <var>A</var>, <var>B</var> and <var>C</var> all equal by repeatedly performing the following two kinds of operations in any order:</p>\n<ul>\n<li>Choose two among <var>A</var>, <var>B</var> and <var>C</var>, then increase both by <var>1</var>.</li>\n<li>Choose one among <var>A</var>, <var>B</var> and <var>C</var>, then increase it by <var>2</var>.</li>\n</ul>\n<p>It can be proved that we can always make <var>A</var>, <var>B</var> and <var>C</var> all equal by repeatedly performing these operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq A,B,C \\leq 50</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of operations required to make <var>A</var>, <var>B</var> and <var>C</var> all equal.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 5 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>We can make <var>A</var>, <var>B</var> and <var>C</var> all equal by the following operations:</p>\n<ul>\n<li>Increase <var>A</var> and <var>C</var> by <var>1</var>. Now, <var>A</var>, <var>B</var>, <var>C</var> are <var>3</var>, <var>5</var>, <var>5</var>, respectively.</li>\n<li>Increase <var>A</var> by <var>2</var>. Now, <var>A</var>, <var>B</var>, <var>C</var> are <var>5</var>, <var>5</var>, <var>5</var>, respectively.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 6 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31 41 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>23\n</pre></section>\n</div>\n</span>", "p03390": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>10^{10^{10}}</var> participants, including Takahashi, competed in two programming contests.\nIn each contest, all participants had distinct ranks from first through <var>10^{10^{10}}</var>-th.</p>\n<p>The <em>score</em> of a participant is the product of his/her ranks in the two contests.</p>\n<p>Process the following <var>Q</var> queries:</p>\n<ul>\n<li>In the <var>i</var>-th query, you are given two positive integers <var>A_i</var> and <var>B_i</var>. Assuming that Takahashi was ranked <var>A_i</var>-th in the first contest and <var>B_i</var>-th in the second contest, find the maximum possible number of participants whose scores are smaller than Takahashi's.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq Q \\leq 100</var></li>\n<li><var>1\\leq A_i,B_i\\leq 10^9(1\\leq i\\leq Q)</var></li>\n<li>All values in input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>Q</var>\n<var>A_1</var> <var>B_1</var>\n<var>:</var>\n<var>A_Q</var> <var>B_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each query, print the maximum possible number of participants whose scores are smaller than Takahashi's.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8\n1 4\n10 5\n3 3\n4 11\n8 9\n22 40\n8 36\n314159265 358979323\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n12\n4\n11\n14\n57\n31\n671644785\n</pre>\n<p>Let us denote a participant who was ranked <var>x</var>-th in the first contest and <var>y</var>-th in the second contest as <var>(x,y)</var>.</p>\n<p>In the first query, <var>(2,1)</var> is a possible candidate of a participant whose score is smaller than Takahashi's. There are never two or more participants whose scores are smaller than Takahashi's, so we should print <var>1</var>.</p></section>\n</div>\n</span>", "p03393": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Gotou just received a dictionary. However, he doesn't recognize the language used in the dictionary. He did some analysis on the dictionary and realizes that the dictionary contains all possible <strong>diverse</strong> words in lexicographical order.</p>\n<p>A word is called <strong>diverse</strong> if and only if it is a nonempty string of English lowercase letters and all letters in the word are distinct. For example, <code>atcoder</code>, <code>zscoder</code> and <code>agc</code> are diverse words while <code>gotou</code> and <code>connect</code> aren't diverse words.</p>\n<p>Given a diverse word <var>S</var>, determine the next word that appears after <var>S</var> in the dictionary, i.e. the lexicographically smallest diverse word that is lexicographically larger than <var>S</var>, or determine that it doesn't exist.</p>\n<p>Let <var>X = x_{1}x_{2}...x_{n}</var> and <var>Y = y_{1}y_{2}...y_{m}</var> be two distinct strings. <var>X</var> is lexicographically larger than <var>Y</var> if and only if <var>Y</var> is a prefix of <var>X</var> or <var>x_{j} &gt; y_{j}</var> where <var>j</var> is the smallest integer such that <var>x_{j} \\neq y_{j}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 26</var></li>\n<li><var>S</var> is a diverse word.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the next word that appears after <var>S</var> in the dictionary, or <code>-1</code> if it doesn't exist.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>atcoder\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>atcoderb\n</pre>\n<p><code>atcoderb</code> is the lexicographically smallest diverse word that is lexicographically larger than <code>atcoder</code>. Note that <code>atcoderb</code> is lexicographically smaller than <code>b</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>abc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>abcd\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>zyxwvutsrqponmlkjihgfedcba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n<p>This is the lexicographically largest diverse word, so the answer is <code>-1</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>abcdefghijklmnopqrstuvwzyx\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>abcdefghijklmnopqrstuvx\n</pre></section>\n</div>\n</span>", "p03394": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Nagase is a top student in high school. One day, she's analyzing some properties of special sets of positive integers.  </p>\n<p>She thinks that a set <var>S = \\{a_{1}, a_{2}, ..., a_{N}\\}</var> of <strong>distinct</strong> positive integers is called <strong>special</strong> if for all <var>1 \\leq i \\leq N</var>, the gcd (greatest common divisor) of <var>a_{i}</var> and the sum of the remaining elements of <var>S</var> is <strong>not</strong> <var>1</var>.</p>\n<p>Nagase wants to find a <strong>special</strong> set of size <var>N</var>. However, this task is too easy, so she decided to ramp up the difficulty. Nagase challenges you to find a <strong>special</strong> set of size <var>N</var> such that the gcd of all elements are <var>1</var> and the elements of the set does not exceed <var>30000</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 20000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Output <var>N</var> space-separated integers, denoting the elements of the set <var>S</var>. <var>S</var> must satisfy the following conditions :</p>\n<ul>\n<li>The elements must be <strong>distinct</strong> positive integers not exceeding <var>30000</var>.</li>\n<li>The gcd of all elements of <var>S</var> is <var>1</var>, i.e. there does not exist an integer <var>d &gt; 1</var> that divides all elements of <var>S</var>.</li>\n<li><var>S</var> is a <strong>special</strong> set.</li>\n</ul>\n<p>If there are multiple solutions, you may output any of them. The elements of <var>S</var> may be printed in any order. It is guaranteed that at least one solution exist under the given contraints.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 5 63\n</pre>\n<p><var>\\{2, 5, 63\\}</var> is special because <var>gcd(2, 5 + 63) = 2, gcd(5, 2 + 63) = 5, gcd(63, 2 + 5) = 7</var>. Also, <var>gcd(2, 5, 63) = 1</var>. Thus, this set satisfies all the criteria.</p>\n<p>Note that <var>\\{2, 4, 6\\}</var> is not a valid solution because <var>gcd(2, 4, 6) = 2 &gt; 1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2 5 20 63\n</pre>\n<p><var>\\{2, 5, 20, 63\\}</var> is special because <var>gcd(2, 5 + 20 + 63) = 2, gcd(5, 2 + 20 + 63) = 5, gcd(20, 2 + 5 + 63) = 10, gcd(63, 2 + 5 + 20) = 9</var>. Also, <var>gcd(2, 5, 20, 63) = 1</var>. Thus, this set satisfies all the criteria.</p></section>\n</div>\n</span>", "p03395": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Aoki is playing with a sequence of numbers <var>a_{1}, a_{2}, ..., a_{N}</var>. Every second, he performs the following operation :</p>\n<ul>\n<li>Choose a positive integer <var>k</var>. For each element of the sequence <var>v</var>, Aoki may choose to replace <var>v</var> with its remainder when divided by <var>k</var>, or do nothing with <var>v</var>. The cost of this operation is <var>2^{k}</var> (regardless of how many elements he changes).</li>\n</ul>\n<p>Aoki wants to turn the sequence into <var>b_{1}, b_{2}, ..., b_{N}</var> (the order of the elements is important). Determine if it is possible for Aoki to perform this task and if yes, find the minimum cost required.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>0 \\leq a_{i}, b_{i} \\leq 50</var></li>\n<li>All values in the input are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_{1}</var> <var>a_{2}</var> <var>...</var> <var>a_{N}</var>\n<var>b_{1}</var> <var>b_{2}</var> <var>...</var> <var>b_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum cost required to turn the original sequence into <var>b_{1}, b_{2}, ..., b_{N}</var>. If the task is impossible, output <var>-1</var> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n19 10 14\n0 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>160\n</pre>\n<p>Here's a possible sequence of operations :</p>\n<ul>\n<li>\n<p>Choose <var>k = 7</var>. Replace <var>19</var> with <var>5</var>, <var>10</var> with <var>3</var> and do nothing to <var>14</var>. The sequence is now <var>5, 3, 14</var>.</p>\n</li>\n<li>\n<p>Choose <var>k = 5</var>. Replace <var>5</var> with <var>0</var>, do nothing to <var>3</var> and replace <var>14</var> with <var>4</var>. The sequence is now <var>0, 3, 4</var>.</p>\n</li>\n</ul>\n<p>The total cost is <var>2^{7} + 2^{5} = 160</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n19 15 14\n0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p>Aoki can just choose <var>k = 1</var> and turn everything into <var>0</var>. The cost is <var>2^{1} = 2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n8 13\n5 13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n<p>The task is impossible because we can never turn <var>8</var> into <var>5</var> using the given operation.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4\n2 0 1 8\n2 0 1 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0\n</pre>\n<p>Aoki doesn't need to do anything here. The cost is <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>1\n50\n13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>137438953472\n</pre>\n<p>Beware of overflow issues.</p></section>\n</div>\n</span>", "p03396": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Yui loves shopping. She lives in Yamaboshi City and there is a train service in the city. The city can be modelled as a very long number line. Yui's house is at coordinate <var>0</var>.</p>\n<p>There are <var>N</var> shopping centres in the city, located at coordinates <var>x_{1}, x_{2}, ..., x_{N}</var> respectively. There are <var>N + 2</var> train stations, one located at coordinate <var>0</var>, one located at coordinate <var>L</var>, and one located at each shopping centre.</p>\n<p>At time <var>0</var>, the train departs from position <var>0</var> to the positive direction. The train travels at a constant speed of <var>1</var> unit per second. At time <var>L</var>, the train will reach the last station, the station at coordinate <var>L</var>. The train immediately moves in the opposite direction at the same speed. At time <var>2L</var>, the train will reach the station at coordinate <var>0</var> and it immediately moves in the opposite direction again. The process repeats indefinitely.</p>\n<p>When the train arrives at a station where Yui is located, Yui can board or leave the train immediately. At time <var>0</var>, Yui is at the station at coordinate <var>0</var>. </p>\n<p>Yui wants to go shopping in all <var>N</var> shopping centres, in any order, and return home after she finishes her shopping. She needs to shop for <var>t_{i}</var> seconds in the shopping centre at coordinate <var>x_{i}</var>. <strong>She must finish her shopping in one shopping centre before moving to the next shopping centre.</strong> Yui can immediately start shopping when she reaches a station with a shopping centre and she can immediately board the train when she finishes shopping.</p>\n<p>Yui wants to spend the minimum amount of time to finish her shopping. Can you help her determine the minimum number of seconds required to complete her shopping?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 300000</var></li>\n<li><var>1 \\leq L \\leq 10^{9}</var></li>\n<li><var>0 &lt; x_{1} &lt; x_{2} &lt; ... &lt; x_{N} &lt; L</var></li>\n<li><var>1 \\leq t_{i} \\leq 10^{9}</var></li>\n<li>All values in the input are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>1000</var> points will be awarded for passing the testset satisfying <var>1 \\leq N \\leq 3000</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>L</var>\n<var>x_{1}</var> <var>x_{2}</var> <var>...</var> <var>x_{N}</var>\n<var>t_{1}</var> <var>t_{2}</var> <var>...</var> <var>t_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum time (in seconds) required for Yui to finish shopping at all <var>N</var> shopping centres and return home.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 10\n5 8\n10 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>40\n</pre>\n<p>Here's one possible way for Yui to finish her shopping :</p>\n<ul>\n<li>\n<p>Travel to the station at coordinate <var>8</var> with the train. She arrives at coordinate <var>8</var> at time <var>8</var>.</p>\n</li>\n<li>\n<p>Shop in the shopping centre at coordinate <var>8</var>. She finishes her shopping at time <var>12</var>.</p>\n</li>\n<li>\n<p>The train arrives at coordinate <var>8</var> at time <var>12</var>. She boards the train which is currently moving in the negative direction.</p>\n</li>\n<li>\n<p>She arrives at coordinate <var>5</var> at time <var>15</var>. She finishes her shopping at time <var>25</var>.</p>\n</li>\n<li>\n<p>The train arrives at coordinate <var>5</var> at time <var>25</var>. She boards the train which is currently moving in the positive direction.</p>\n</li>\n<li>\n<p>She arrives at coordinate <var>L = 10</var> at time <var>30</var>. The train starts moving in the negative direction immediately.</p>\n</li>\n<li>\n<p>She arrives at coordinate <var>0</var> at time <var>40</var>, ending the trip.</p>\n</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 10\n5 8\n10 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>60\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 100\n10 19 28 47 68\n200 200 200 200 200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1200\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8 1000000000\n2018 123456 1719128 1929183 9129198 10100101 77777777 120182018\n99999999 1000000000 1000000000 11291341 1 200 1 123812831\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>14000000000\n</pre>\n<p>Beware of overflow issues.</p></section>\n</div>\n</span>", "p03397": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Taichi thinks a binary string <var>X</var> of odd length <var>N</var> is <strong>beautiful</strong> if it is possible to apply the following operation <var>\\frac{N-1}{2}</var> times so that the only character of the resulting string is <code>1</code> :</p>\n<ul>\n<li>Choose three <strong>consecutive</strong> bits of <var>X</var> and replace them by their median. For example, we can turn <code>00110</code> into <code>010</code> by applying the operation to the middle three bits.</li>\n</ul>\n<p>Taichi has a string <var>S</var> consisting of characters <code>0</code>, <code>1</code> and <code>?</code>. Taichi wants to know the number of ways to replace the question marks with <code>1</code> or <code>0</code> so that the resulting string is beautiful, modulo <var>10^{9} + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 300000</var></li>\n<li><var>|S|</var> is odd.</li>\n<li>All characters of <var>S</var> are either <code>0</code>, <code>1</code> or <code>?</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to replace the question marks so that the resulting string is beautiful, modulo <var>10^{9} + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1??00\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>There are <var>4</var> ways to replace the question marks with <code>0</code> or <code>1</code> :</p>\n<ul>\n<li>\n<p><code>11100</code> : This string is beautiful because we can first perform the operation on the last <var>3</var> bits to get <code>110</code> and then on the only <var>3</var> bits to get <code>1</code>.</p>\n</li>\n<li>\n<p><code>11000</code> : This string is beautiful because we can first perform the operation on the last <var>3</var> bits to get <code>110</code> and then on the only <var>3</var> bits to get <code>1</code>.</p>\n</li>\n<li>\n<p><code>10100</code> : This string is not beautiful because there is no sequence of operations such that the final string is <code>1</code>.</p>\n</li>\n<li>\n<p><code>10000</code> :  This string is not beautiful because there is no sequence of operations such that the final string is <code>1</code>.</p>\n</li>\n</ul>\n<p>Thus, there are <var>2</var> ways to form a beautiful string.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>?\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>In this case, <code>1</code> is the only beautiful string.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>?0101???10???00?1???????????????0????????????1????0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>402589311\n</pre>\n<p>Remember to output your answer modulo <var>10^{9} + 7</var>.</p></section>\n</div>\n</span>", "p03398": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>X = 10^{100}</var>. Inaba has <var>N</var> checker pieces on the number line, where the <var>i</var>-th checker piece is at coordinate <var>X^{i}</var> for all <var>1 \\leq i \\leq N</var>.</p>\n<p>Every second, Inaba chooses two checker pieces, <var>A</var> and <var>B</var>, and move <var>A</var> to the symmetric point of its current position with respect to <var>B</var>. After that, <var>B</var> is removed. (It is possible that <var>A</var> and <var>B</var> occupy the same position, and it is also possible for <var>A</var> to occupy the same position as another checker piece after the move).</p>\n<p>After <var>N - 1</var> seconds, only one checker piece will remain. Find the number of distinct possible positions of that checker piece, modulo <var>10^{9} + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of distinct possible positions of the final checker piece, modulo <var>10^{9} + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>There are <var>3</var> checker pieces, positioned at <var>10^{100}, 10^{200}, 10^{300}</var> respectively. Call them <var>A, B, C</var> respectively.</p>\n<p>Here are two (of the <var>12</var>) possible sequence of moves :</p>\n<ul>\n<li>\n<p>Let <var>A</var> jump over <var>B</var> in the first second, and let <var>A</var> jump over <var>C</var> in the second second. The final position of <var>A</var> is <var>2 \\times 10^{300} - 2 \\times 10^{200} + 10^{100}</var>.</p>\n</li>\n<li>\n<p>Let <var>C</var> jump over <var>A</var> in the first second, and let <var>B</var> jump over <var>C</var> in the second second. The final position of <var>B</var> is <var>-2 \\times 10^{300} - 10^{200} + 4 \\times 10^{100}</var>.</p>\n</li>\n</ul>\n<p>There are a total of <var>3 \\times 2 \\times 2 = 12</var> possible sequence of moves, and the final piece are in different positions in all of them.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>84\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>22\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>487772376\n</pre>\n<p>Remember to output your answer modulo <var>10^{9} + 7</var>.</p></section>\n</div>\n</span>", "p03399": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You planned a trip using trains and buses.\nThe train fare will be <var>A</var> yen (the currency of Japan) if you buy ordinary tickets along the way, and <var>B</var> yen if you buy an unlimited ticket.\nSimilarly, the bus fare will be <var>C</var> yen if you buy ordinary tickets along the way, and <var>D</var> yen if you buy an unlimited ticket.</p>\n<p>Find the minimum total fare when the optimal choices are made for trains and buses.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A \\leq 1</var> <var>000</var></li>\n<li><var>1 \\leq B \\leq 1</var> <var>000</var></li>\n<li><var>1 \\leq C \\leq 1</var> <var>000</var></li>\n<li><var>1 \\leq D \\leq 1</var> <var>000</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var>\n<var>B</var>\n<var>C</var>\n<var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total fare.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>600\n300\n220\n420\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>520\n</pre>\n<p>The train fare will be <var>600</var> yen if you buy ordinary tickets, and <var>300</var> yen if you buy an unlimited ticket.\nThus, the optimal choice for trains is to buy an unlimited ticket for <var>300</var> yen.\nOn the other hand, the optimal choice for buses is to buy ordinary tickets for <var>220</var> yen.</p>\n<p>Therefore, the minimum total fare is <var>300 + 220 = 520</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>555\n555\n400\n200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>755\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>549\n817\n715\n603\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1152\n</pre></section>\n</div>\n</span>", "p03400": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Some number of chocolate pieces were prepared for a training camp.\nThe camp had <var>N</var> participants and lasted for <var>D</var> days.\nThe <var>i</var>-th participant (<var>1 \\leq i \\leq N</var>) ate one chocolate piece on each of the following days in the camp: the <var>1</var>-st day, the <var>(A_i + 1)</var>-th day, the <var>(2A_i + 1)</var>-th day, and so on.\nAs a result, there were <var>X</var> chocolate pieces remaining at the end of the camp. During the camp, nobody except the participants ate chocolate pieces.</p>\n<p>Find the number of chocolate pieces prepared at the beginning of the camp.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq D \\leq 100</var></li>\n<li><var>1 \\leq X \\leq 100</var></li>\n<li><var>1 \\leq A_i \\leq 100</var> (<var>1 \\leq i \\leq N</var>)</li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>D</var> <var>X</var>\n<var>A_1</var>\n<var>A_2</var>\n<var>:</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Find the number of chocolate pieces prepared at the beginning of the camp.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n7 1\n2\n5\n10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>The camp has <var>3</var> participants and lasts for <var>7</var> days.\nEach participant eats chocolate pieces as follows:</p>\n<ul>\n<li>The first participant eats one chocolate piece on Day <var>1</var>, <var>3</var>, <var>5</var> and <var>7</var>, for a total of four.</li>\n<li>The second participant eats one chocolate piece on Day <var>1</var> and <var>6</var>, for a total of two.</li>\n<li>The third participant eats one chocolate piece only on Day <var>1</var>, for a total of one.</li>\n</ul>\n<p>Since the number of pieces remaining at the end of the camp is one, the number of pieces prepared at the beginning of the camp is <var>1 + 4 + 2 + 1 = 8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n8 20\n1\n10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>29\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n30 44\n26\n18\n81\n18\n6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>56\n</pre></section>\n</div>\n</span>", "p03401": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> sightseeing spots on the <var>x</var>-axis, numbered <var>1, 2, ..., N</var>.\nSpot <var>i</var> is at the point with coordinate <var>A_i</var>.\nIt costs <var>|a - b|</var> yen (the currency of Japan) to travel from a point with coordinate <var>a</var> to another point with coordinate <var>b</var> along the axis.</p>\n<p>You planned a trip along the axis.\nIn this plan, you first depart from the point with coordinate <var>0</var>, then visit the <var>N</var> spots in the order they are numbered, and finally return to the point with coordinate <var>0</var>.</p>\n<p>However, something came up just before the trip, and you no longer have enough time to visit all the <var>N</var> spots, so you decided to choose some <var>i</var> and cancel the visit to Spot <var>i</var>.\nYou will visit the remaining spots as planned in the order they are numbered.\nYou will also depart from and return to the point with coordinate <var>0</var> at the beginning and the end, as planned.</p>\n<p>For each <var>i = 1, 2, ..., N</var>, find the total cost of travel during the trip when the visit to Spot <var>i</var> is canceled.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>-5000 \\leq A_i \\leq 5000</var> (<var>1 \\leq i \\leq N</var>)</li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines.\nIn the <var>i</var>-th line, print the total cost of travel during the trip when the visit to Spot <var>i</var> is canceled.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 5 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n8\n10\n</pre>\n<p>Spot <var>1</var>, <var>2</var> and <var>3</var> are at the points with coordinates <var>3</var>, <var>5</var> and <var>-1</var>, respectively.\nFor each <var>i</var>, the course of the trip and the total cost of travel when the visit to Spot <var>i</var> is canceled, are as follows:</p>\n<ul>\n<li>For <var>i = 1</var>, the course of the trip is <var>0 \\rightarrow 5 \\rightarrow -1 \\rightarrow 0</var> and the total cost of travel is <var>5 + 6 + 1 = 12</var> yen.</li>\n<li>For <var>i = 2</var>, the course of the trip is <var>0 \\rightarrow 3 \\rightarrow -1 \\rightarrow 0</var> and the total cost of travel is <var>3 + 4 + 1 = 8</var> yen.</li>\n<li>For <var>i = 3</var>, the course of the trip is <var>0 \\rightarrow 3 \\rightarrow 5 \\rightarrow 0</var> and the total cost of travel is <var>3 + 2 + 5 = 10</var> yen.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 1 1 2 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n4\n4\n2\n4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n-679 -2409 -3258 3095 -3291 -4462\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>21630\n21630\n19932\n8924\n21630\n19288\n</pre></section>\n</div>\n</span>", "p03403": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> sightseeing spots on the <var>x</var>-axis, numbered <var>1, 2, ..., N</var>.\nSpot <var>i</var> is at the point with coordinate <var>A_i</var>.\nIt costs <var>|a - b|</var> yen (the currency of Japan) to travel from a point with coordinate <var>a</var> to another point with coordinate <var>b</var> along the axis.</p>\n<p>You planned a trip along the axis.\nIn this plan, you first depart from the point with coordinate <var>0</var>, then visit the <var>N</var> spots in the order they are numbered, and finally return to the point with coordinate <var>0</var>.</p>\n<p>However, something came up just before the trip, and you no longer have enough time to visit all the <var>N</var> spots, so you decided to choose some <var>i</var> and cancel the visit to Spot <var>i</var>.\nYou will visit the remaining spots as planned in the order they are numbered.\nYou will also depart from and return to the point with coordinate <var>0</var> at the beginning and the end, as planned.</p>\n<p>For each <var>i = 1, 2, ..., N</var>, find the total cost of travel during the trip when the visit to Spot <var>i</var> is canceled.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>-5000 \\leq A_i \\leq 5000</var> (<var>1 \\leq i \\leq N</var>)</li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines.\nIn the <var>i</var>-th line, print the total cost of travel during the trip when the visit to Spot <var>i</var> is canceled.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n3 5 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n8\n10\n</pre>\n<p>Spot <var>1</var>, <var>2</var> and <var>3</var> are at the points with coordinates <var>3</var>, <var>5</var> and <var>-1</var>, respectively.\nFor each <var>i</var>, the course of the trip and the total cost of travel when the visit to Spot <var>i</var> is canceled, are as follows:</p>\n<ul>\n<li>For <var>i = 1</var>, the course of the trip is <var>0 \\rightarrow 5 \\rightarrow -1 \\rightarrow 0</var> and the total cost of travel is <var>5 + 6 + 1 = 12</var> yen.</li>\n<li>For <var>i = 2</var>, the course of the trip is <var>0 \\rightarrow 3 \\rightarrow -1 \\rightarrow 0</var> and the total cost of travel is <var>3 + 4 + 1 = 8</var> yen.</li>\n<li>For <var>i = 3</var>, the course of the trip is <var>0 \\rightarrow 3 \\rightarrow 5 \\rightarrow 0</var> and the total cost of travel is <var>3 + 2 + 5 = 10</var> yen.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 1 1 2 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n4\n4\n2\n4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n-679 -2409 -3258 3095 -3291 -4462\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>21630\n21630\n19932\n8924\n21630\n19288\n</pre></section>\n</div>\n</span>", "p03405": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have an undirected weighted graph with <var>N</var> vertices and <var>M</var> edges.\nThe <var>i</var>-th edge in the graph connects Vertex <var>U_i</var> and Vertex <var>V_i</var>, and has a weight of <var>W_i</var>.\nAdditionally, you are given an integer <var>X</var>.</p>\n<p>Find the number of ways to paint each edge in this graph either white or black such that the following condition is met, modulo <var>10^9 + 7</var>:</p>\n<ul>\n<li>The graph has a spanning tree that contains both an edge painted white and an edge painted black. Furthermore, among such spanning trees, the one with the smallest weight has a weight of <var>X</var>.</li>\n</ul>\n<p>Here, the weight of a spanning tree is the sum of the weights of the edges contained in the spanning tree.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1</var> <var>000</var></li>\n<li><var>1 \\leq M \\leq 2</var> <var>000</var></li>\n<li><var>1 \\leq U_i, V_i \\leq N</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li><var>1 \\leq W_i \\leq 10^9</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li>If <var>i \\neq j</var>, then <var>(U_i, V_i) \\neq (U_j, V_j)</var> and <var>(U_i, V_i) \\neq (V_j, U_j)</var>.</li>\n<li><var>U_i \\neq V_i</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li>The given graph is connected.</li>\n<li><var>1 \\leq X \\leq 10^{12}</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>X</var>\n<var>U_1</var> <var>V_1</var> <var>W_1</var>\n<var>U_2</var> <var>V_2</var> <var>W_2</var>\n<var>:</var>\n<var>U_M</var> <var>V_M</var> <var>W_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n2\n1 2 1\n2 3 1\n3 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n3\n1 2 1\n2 3 1\n3 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 4\n1\n1 2 3\n1 3 3\n2 4 6\n2 5 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8 10\n49\n4 6 10\n8 4 11\n5 8 9\n1 8 10\n3 8 128773450\n7 8 10\n4 2 4\n3 4 1\n3 1 13\n5 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03406": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>2^N</var> players, numbered <var>1, 2, ..., 2^N</var>.\nThey decided to hold a tournament.</p>\n<p>The tournament proceeds as follows:</p>\n<ul>\n<li>Choose a permutation of <var>1, 2, ..., 2^N</var>: <var>p_1, p_2, ..., p_{2^N}</var>.</li>\n<li>The players stand in a row in the order of Player <var>p_1</var>, Player <var>p_2</var>, <var>...</var>, Player <var>p_{2^N}</var>.</li>\n<li>Repeat the following until there is only one player remaining in the row:<ul>\n<li>Play the following matches: the first player in the row versus the second player in the row, the third player versus the fourth player, and so on. The players who lose leave the row. The players who win stand in a row again, preserving the relative order of the players.</li>\n</ul>\n</li>\n<li>The last player who remains in the row is the champion.</li>\n</ul>\n<p>It is known that, the result of the match between two players can be written as follows, using <var>M</var> integers <var>A_1, A_2, ..., A_M</var> given as input:</p>\n<ul>\n<li>When <var>y = A_i</var> for some <var>i</var>, the winner of the match between Player <var>1</var> and Player <var>y</var> (<var>2 \\leq y \\leq 2^N</var>) will be Player <var>y</var>.</li>\n<li>When <var>y \\neq A_i</var> for every <var>i</var>, the winner of the match between Player <var>1</var> and Player <var>y</var> (<var>2 \\leq y \\leq 2^N</var>) will be Player <var>1</var>.</li>\n<li>When <var>2 \\leq x &lt; y \\leq 2^N</var>, the winner of the match between Player <var>x</var> and Player <var>y</var> will be Player <var>x</var>.</li>\n</ul>\n<p>The champion of this tournament depends only on the permutation <var>p_1, p_2, ..., p_{2^N}</var> chosen at the beginning.\nFind the number of permutation <var>p_1, p_2, ..., p_{2^N}</var> chosen at the beginning of the tournament that would result in Player <var>1</var> becoming the champion, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 16</var></li>\n<li><var>0 \\leq M \\leq 16</var></li>\n<li><var>2 \\leq A_i \\leq 2^N</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li><var>A_i &lt; A_{i + 1}</var> (<var>1 \\leq i &lt; M</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 1\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>Examples of <var>p</var> that satisfy the condition are: <var>[1, 4, 2, 3]</var> and <var>[3, 2, 1, 4]</var>. Examples of <var>p</var> that do not satisfy the condition are: <var>[1, 2, 3, 4]</var> and <var>[1, 3, 2, 4]</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n2 4 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 0\n\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>40320\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3 3\n3 4 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>2688\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>16 16\n5489 5490 5491 5492 5493 5494 5495 5497 18993 18995 18997 18999 19000 19001 19002 19003\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>816646464\n</pre></section>\n</div>\n</span>", "p03407": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>An elementary school student Takahashi has come to a variety store.</p>\n<p>He has two coins, <var>A</var>-yen and <var>B</var>-yen coins (yen is the currency of Japan), and wants to buy a toy that costs <var>C</var> yen. Can he buy it?</p>\n<p>Note that he lives in Takahashi Kingdom, and may have coins that do not exist in Japan.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq A, B \\leq 500</var></li>\n<li><var>1 \\leq C \\leq 1000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Takahashi can buy the toy, print <code>Yes</code>; if he cannot, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>50 100 120\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>He has <var>50 + 100 = 150</var> yen, so he can buy the <var>120</var>-yen toy.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>500 100 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>He has <var>500 + 100 = 600</var> yen, but he cannot buy the <var>1000</var>-yen toy.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>19 123 143\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n<p>There are <var>19</var>-yen and <var>123</var>-yen coins in Takahashi Kingdom, which are rather hard to use.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>19 123 142\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p03408": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has <var>N</var> blue cards and <var>M</var> red cards.\nA string is written on each card. The string written on the <var>i</var>-th blue card is <var>s_i</var>, and the string written on the <var>i</var>-th red card is <var>t_i</var>.</p>\n<p>Takahashi will now announce a string, and then check every card. Each time he finds a blue card with the string announced by him, he will earn <var>1</var> yen (the currency of Japan); each time he finds a red card with that string, he will lose <var>1</var> yen.</p>\n<p>Here, we only consider the case where the string announced by Takahashi and the string on the card are exactly the same. For example, if he announces <code>atcoder</code>, he will not earn money even if there are blue cards with <code>atcoderr</code>, <code>atcode</code>, <code>btcoder</code>, and so on. (On the other hand, he will not lose money even if there are red cards with such strings, either.)</p>\n<p>At most how much can he earn on balance?</p>\n<p>Note that the same string may be written on multiple cards.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>N</var> and <var>M</var> are integers.</li>\n<li><var>1 \\leq N, M \\leq 100</var></li>\n<li><var>s_1, s_2, ..., s_N, t_1, t_2, ..., t_M</var> are all strings of lengths between <var>1</var> and <var>10</var> (inclusive) consisting of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s_1</var>\n<var>s_2</var>\n<var>:</var>\n<var>s_N</var>\n<var>M</var>\n<var>t_1</var>\n<var>t_2</var>\n<var>:</var>\n<var>t_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Takahashi can earn at most <var>X</var> yen on balance, print <var>X</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\napple\norange\napple\n1\ngrape\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>He can earn <var>2</var> yen by announcing <code>apple</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\napple\norange\napple\n5\napple\napple\napple\napple\napple\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>If he announces <code>apple</code>, he will lose <var>3</var> yen. If he announces <code>orange</code>, he can earn <var>1</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\nvoldemort\n10\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>If he announces <code>voldemort</code>, he will lose <var>9</var> yen. If he announces <code>orange</code>, for example, he can avoid losing a yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>6\nred\nred\nblue\nyellow\nyellow\nred\n5\nred\nred\nyellow\ngreen\nblue\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>1\n</pre></section>\n</div>\n</span>", "p03409": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>On a two-dimensional plane, there are <var>N</var> red points and <var>N</var> blue points.\nThe coordinates of the <var>i</var>-th red point are <var>(a_i, b_i)</var>, and the coordinates of the <var>i</var>-th blue point are <var>(c_i, d_i)</var>.</p>\n<p>A red point and a blue point can form a <em>friendly pair</em> when, the <var>x</var>-coordinate of the red point is smaller than that of the blue point, and the <var>y</var>-coordinate of the red point is also smaller than that of the blue point.</p>\n<p>At most how many friendly pairs can you form? Note that a point cannot belong to multiple pairs.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq a_i, b_i, c_i, d_i &lt; 2N</var></li>\n<li><var>a_1, a_2, ..., a_N, c_1, c_2, ..., c_N</var> are all different.</li>\n<li><var>b_1, b_2, ..., b_N, d_1, d_2, ..., d_N</var> are all different.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>:</var>\n<var>a_N</var> <var>b_N</var>\n<var>c_1</var> <var>d_1</var>\n<var>c_2</var> <var>d_2</var>\n<var>:</var>\n<var>c_N</var> <var>d_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of friendly pairs.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, you can pair <var>(2, 0)</var> and <var>(4, 2)</var>, then <var>(3, 1)</var> and <var>(5, 5)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n0 0\n1 1\n5 2\n2 3\n3 4\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p>For example, you can pair <var>(0, 0)</var> and <var>(2, 3)</var>, then <var>(1, 1)</var> and <var>(3, 4)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n2 2\n3 3\n0 0\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>It is possible that no pair can be formed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5\n0 0\n7 3\n2 2\n4 8\n1 6\n8 5\n6 9\n5 4\n9 1\n3 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>5\n0 0\n1 1\n5 5\n6 6\n7 7\n2 2\n3 3\n4 4\n8 8\n9 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03410": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given two integer sequences, each of length <var>N</var>: <var>a_1, ..., a_N</var> and <var>b_1, ..., b_N</var>.</p>\n<p>There are <var>N^2</var> ways to choose two integers <var>i</var> and <var>j</var> such that <var>1 \\leq i, j \\leq N</var>. For each of these <var>N^2</var> pairs, we will compute <var>a_i + b_j</var> and write it on a sheet of paper.\nThat is, we will write <var>N^2</var> integers in total.</p>\n<p>Compute the XOR of these <var>N^2</var> integers.</p>\n<p><details>\n<summary style=\"display:list-item\">Definition of XOR</summary></details></p>\n<p>The XOR of integers <var>c_1, c_2, ..., c_m</var> is defined as follows:</p>\n<ul>\n<li>Let the XOR be <var>X</var>. In the binary representation of <var>X</var>, the digit in the <var>2^k</var>'s place (<var>0 \\leq k</var>; <var>k</var> is an integer) is <var>1</var> if there are an odd number of integers among <var>c_1, c_2, ...c_m</var> whose binary representation has <var>1</var> in the <var>2^k</var>'s place, and <var>0</var> if that number is even.</li>\n</ul>\n<p>For example, let us compute the XOR of <var>3</var> and <var>5</var>. The binary representation of <var>3</var> is <var>011</var>, and the binary representation of <var>5</var> is <var>101</var>, thus the XOR has the binary representation <var>110</var>, that is, the XOR is <var>6</var>.</p>\n<p></p></section></div></span>", "p03411": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>On a two-dimensional plane, there are <var>N</var> red points and <var>N</var> blue points.\nThe coordinates of the <var>i</var>-th red point are <var>(a_i, b_i)</var>, and the coordinates of the <var>i</var>-th blue point are <var>(c_i, d_i)</var>.</p>\n<p>A red point and a blue point can form a <em>friendly pair</em> when, the <var>x</var>-coordinate of the red point is smaller than that of the blue point, and the <var>y</var>-coordinate of the red point is also smaller than that of the blue point.</p>\n<p>At most how many friendly pairs can you form? Note that a point cannot belong to multiple pairs.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq a_i, b_i, c_i, d_i &lt; 2N</var></li>\n<li><var>a_1, a_2, ..., a_N, c_1, c_2, ..., c_N</var> are all different.</li>\n<li><var>b_1, b_2, ..., b_N, d_1, d_2, ..., d_N</var> are all different.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>:</var>\n<var>a_N</var> <var>b_N</var>\n<var>c_1</var> <var>d_1</var>\n<var>c_2</var> <var>d_2</var>\n<var>:</var>\n<var>c_N</var> <var>d_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of friendly pairs.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, you can pair <var>(2, 0)</var> and <var>(4, 2)</var>, then <var>(3, 1)</var> and <var>(5, 5)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n0 0\n1 1\n5 2\n2 3\n3 4\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p>For example, you can pair <var>(0, 0)</var> and <var>(2, 3)</var>, then <var>(1, 1)</var> and <var>(3, 4)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n2 2\n3 3\n0 0\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>It is possible that no pair can be formed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5\n0 0\n7 3\n2 2\n4 8\n1 6\n8 5\n6 9\n5 4\n9 1\n3 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>5\n0 0\n1 1\n5 5\n6 6\n7 7\n2 2\n3 3\n4 4\n8 8\n9 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03412": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given two integer sequences, each of length <var>N</var>: <var>a_1, ..., a_N</var> and <var>b_1, ..., b_N</var>.</p>\n<p>There are <var>N^2</var> ways to choose two integers <var>i</var> and <var>j</var> such that <var>1 \\leq i, j \\leq N</var>. For each of these <var>N^2</var> pairs, we will compute <var>a_i + b_j</var> and write it on a sheet of paper.\nThat is, we will write <var>N^2</var> integers in total.</p>\n<p>Compute the XOR of these <var>N^2</var> integers.</p>\n<p><details>\n<summary style=\"display:list-item\">Definition of XOR</summary></details></p>\n<p>The XOR of integers <var>c_1, c_2, ..., c_m</var> is defined as follows:</p>\n<ul>\n<li>Let the XOR be <var>X</var>. In the binary representation of <var>X</var>, the digit in the <var>2^k</var>'s place (<var>0 \\leq k</var>; <var>k</var> is an integer) is <var>1</var> if there are an odd number of integers among <var>c_1, c_2, ...c_m</var> whose binary representation has <var>1</var> in the <var>2^k</var>'s place, and <var>0</var> if that number is even.</li>\n</ul>\n<p>For example, let us compute the XOR of <var>3</var> and <var>5</var>. The binary representation of <var>3</var> is <var>011</var>, and the binary representation of <var>5</var> is <var>101</var>, thus the XOR has the binary representation <var>110</var>, that is, the XOR is <var>6</var>.</p>\n<p></p></section></div></span>", "p03413": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have an integer sequence of length <var>N</var>: <var>a_1, a_2, ..., a_N</var>.</p>\n<p>You repeatedly perform the following operation until the length of the sequence becomes <var>1</var>:</p>\n<ul>\n<li>First, choose an element of the sequence.</li>\n<li>If that element is at either end of the sequence, delete the element.</li>\n<li>If that element is not at either end of the sequence, replace the element with the sum of the two elements that are adjacent to it. Then, delete those two elements.</li>\n</ul>\n<p>You would like to maximize the final element that remains in the sequence.</p>\n<p>Find the maximum possible value of the final element, and the way to achieve it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>2 \\leq N \\leq 1000</var></li>\n<li><var>|a_i| \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><ul>\n<li>In the first line, print the maximum possible value of the final element in the sequence.</li>\n<li>In the second line, print the number of operations that you perform.</li>\n<li>In the <var>(2+i)</var>-th line, if the element chosen in the <var>i</var>-th operation is the <var>x</var>-th element from the left in the sequence at that moment, print <var>x</var>.</li>\n<li>If there are multiple ways to achieve the maximum value of the final element, any of them may be printed.</li>\n</ul>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 4 3 7 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>11\n3\n1\n4\n2\n</pre>\n<p>The sequence would change as follows:</p>\n<ul>\n<li>After the first operation: <var>4, 3, 7, 5</var></li>\n<li>After the second operation: <var>4, 3, 7</var></li>\n<li>After the third operation: <var>11(4+7)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n100 100 -1 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>200\n2\n3\n1\n</pre>\n<ul>\n<li>After the first operation: <var>100, 200(100+100)</var></li>\n<li>After the second operation: <var>200</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n-1 -2 -3 1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n3\n2\n1\n2\n</pre>\n<ul>\n<li>After the first operation: <var>-4, 1, 2, 3</var></li>\n<li>After the second operation: <var>1, 2, 3</var></li>\n<li>After the third operation: <var>4</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>9\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5000000000\n4\n2\n2\n2\n2\n</pre></section>\n</div>\n</span>", "p03414": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a directed graph with <var>N</var> vertices and <var>M</var> edges.\nThe vertices are numbered <var>1, 2, ..., N</var>, and the edges are numbered <var>1, 2, ..., M</var>.\nEdge <var>i</var> points from Vertex <var>a_i</var> to Vertex <var>b_i</var>.</p>\n<p>For each edge, determine whether the reversion of that edge would change the number of the strongly connected components in the graph.</p>\n<p>Here, the reversion of Edge <var>i</var> means deleting Edge <var>i</var> and then adding a new edge that points from Vertex <var>b_i</var> to Vertex <var>a_i</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 1000</var></li>\n<li><var>1 \\leq M \\leq 200,000</var></li>\n<li><var>1 \\leq a_i, b_i \\leq N</var></li>\n<li><var>a_i \\neq b_i</var></li>\n<li>If <var>i \\neq j</var>, then <var>a_i \\neq a_j</var> or <var>b_i \\neq b_j</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n<var>:</var>\n<var>a_M</var> <var>b_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>M</var> lines. In the <var>i</var>-th line, if the reversion of Edge <var>i</var> would change the number of the strongly connected components in the graph, print <code>diff</code>; if it would not, print <code>same</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 2\n1 3\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>same\ndiff\nsame\n</pre>\n<p>The number of the strongly connected components is <var>3</var> without reversion of edges, but it will become <var>1</var> if Edge <var>2</var> is reversed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2\n1 2\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>diff\ndiff\n</pre>\n<p>Reversion of an edge may result in multiple edges in the graph.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 9\n3 2\n3 1\n4 1\n4 2\n3 5\n5 3\n3 4\n1 2\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>same\nsame\nsame\nsame\nsame\ndiff\ndiff\ndiff\ndiff\n</pre></section>\n</div>\n</span>", "p03416": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the number of <em>palindromic numbers</em> among the integers between <var>A</var> and <var>B</var> (inclusive).\nHere, a palindromic number is a positive integer whose string representation in base <var>10</var> (without leading zeros) reads the same forward and backward.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>10000 \\leq A \\leq B \\leq 99999</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of <em>palindromic numbers</em> among the integers between <var>A</var> and <var>B</var> (inclusive).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>11009 11332\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>There are four integers that satisfy the conditions: <var>11011</var>, <var>11111</var>, <var>11211</var> and <var>11311</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>31415 92653\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>612\n</pre></section>\n</div>\n</span>", "p03417": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a grid with infinitely many rows and columns. In this grid, there is a rectangular region with consecutive <var>N</var> rows and <var>M</var> columns, and a card is placed in each square in this region.\nThe front and back sides of these cards can be distinguished, and initially every card faces up.</p>\n<p>We will perform the following operation once for each square contains a card:</p>\n<ul>\n<li>For each of the following nine squares, flip the card in it if it exists: the target square itself and the eight squares that shares a corner or a side with the target square.</li>\n</ul>\n<p>It can be proved that, whether each card faces up or down after all the operations does not depend on the order the operations are performed.\nFind the number of cards that face down after all the operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 10^9</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of cards that face down after all the operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n</pre>\n<p>We will flip every card in any of the four operations. Thus, after all the operations, all cards face up.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>After all the operations, all cards except at both ends face down.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314 1592\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>496080\n</pre></section>\n</div>\n</span>", "p03418": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi had a pair of two positive integers not exceeding <var>N</var>, <var>(a,b)</var>, which he has forgotten.\nHe remembers that the remainder of <var>a</var> divided by <var>b</var> was greater than or equal to <var>K</var>.\nFind the number of possible pairs that he may have had.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq K \\leq N-1</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible pairs that he may have had.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>There are seven possible pairs: <var>(2,3),(5,3),(2,4),(3,4),(2,5),(3,5)</var> and <var>(4,5)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31415 9265\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>287927211\n</pre></section>\n</div>\n</span>", "p03419": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a grid with infinitely many rows and columns. In this grid, there is a rectangular region with consecutive <var>N</var> rows and <var>M</var> columns, and a card is placed in each square in this region.\nThe front and back sides of these cards can be distinguished, and initially every card faces up.</p>\n<p>We will perform the following operation once for each square contains a card:</p>\n<ul>\n<li>For each of the following nine squares, flip the card in it if it exists: the target square itself and the eight squares that shares a corner or a side with the target square.</li>\n</ul>\n<p>It can be proved that, whether each card faces up or down after all the operations does not depend on the order the operations are performed.\nFind the number of cards that face down after all the operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 10^9</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of cards that face down after all the operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n</pre>\n<p>We will flip every card in any of the four operations. Thus, after all the operations, all cards face up.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>After all the operations, all cards except at both ends face down.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314 1592\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>496080\n</pre></section>\n</div>\n</span>", "p03420": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi had a pair of two positive integers not exceeding <var>N</var>, <var>(a,b)</var>, which he has forgotten.\nHe remembers that the remainder of <var>a</var> divided by <var>b</var> was greater than or equal to <var>K</var>.\nFind the number of possible pairs that he may have had.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq K \\leq N-1</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of possible pairs that he may have had.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>There are seven possible pairs: <var>(2,3),(5,3),(2,4),(3,4),(2,5),(3,5)</var> and <var>(4,5)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31415 9265\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>287927211\n</pre></section>\n</div>\n</span>", "p03421": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Determine if there exists a sequence obtained by permuting <var>1,2,...,N</var> that satisfies the following conditions:</p>\n<ul>\n<li>The length of its longest increasing subsequence is <var>A</var>.</li>\n<li>The length of its longest decreasing subsequence is <var>B</var>.</li>\n</ul>\n<p>If it exists, construct one such sequence.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>A subsequence of a sequence <var>P</var> is a sequence that can be obtained by extracting some of the elements in <var>P</var> without changing the order.</p>\n<p>A longest increasing subsequence of a sequence <var>P</var> is a sequence with the maximum length among the subsequences of <var>P</var> that are monotonically increasing.</p>\n<p>Similarly, a longest decreasing subsequence of a sequence <var>P</var> is a sequence with the maximum length among the subsequences of <var>P</var> that are monotonically decreasing.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,A,B \\leq 3\\times 10^5</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there are no sequences that satisfy the conditions, print <code>-1</code>.</p>\n<p>Otherwise, print <var>N</var> integers. The <var>i</var>-th integer should be the <var>i</var>-th element of the sequence that you constructed.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 4 1 5 3\n</pre>\n<p>One longest increasing subsequence of this sequence is <var>{2,4,5}</var>, and one longest decreasing subsequence of it is <var>{4,3}</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 7 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 2 3 4 5 6 7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>300000 300000 300000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p03422": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi and Aoki are playing a stone-taking game. Initially, there are <var>N</var> piles of stones, and the <var>i</var>-th pile contains <var>A_i</var> stones and has an associated integer <var>K_i</var>.</p>\n<p>Starting from Takahashi, Takahashi and Aoki take alternate turns to perform the following operation:</p>\n<ul>\n<li>Choose a pile. If the <var>i</var>-th pile is selected and there are <var>X</var> stones left in the pile, remove some number of stones between <var>1</var> and <var>floor(X/K_i)</var> (inclusive) from the pile.</li>\n</ul>\n<p>The player who first becomes unable to perform the operation loses the game. Assuming that both players play optimally, determine the winner of the game.\nHere, <var>floor(x)</var> represents the largest integer not greater than <var>x</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 200</var></li>\n<li><var>1 \\leq A_i,K_i \\leq 10^9</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>K_1</var>\n<var>:</var>\n<var>A_N</var> <var>K_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Takahashi will win, print <code>Takahashi</code>; if Aoki will win, print <code>Aoki</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n5 2\n3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Aoki\n</pre>\n<p>Initially, from the first pile at most <var>floor(5/2)=2</var> stones can be removed at a time, and from the second pile at most <var>floor(3/3)=1</var> stone can be removed at a time.</p>\n<ul>\n<li>If Takahashi first takes two stones from the first pile, from the first pile at most <var>floor(3/2)=1</var> stone can now be removed at a time, and from the second pile at most <var>floor(3/3)=1</var> stone can be removed at a time.</li>\n<li>Then, if Aoki takes one stone from the second pile, from the first pile at most <var>floor(3/2)=1</var> stone can be removed at a time, and from the second pile no more stones can be removed (since <var>floor(2/3)=0</var>).</li>\n<li>Then, if Takahashi takes one stone from the first pile, from the first pile at most <var>floor(2/2)=1</var> stone can now be removed at a time, and from the second pile no more stones can be removed.</li>\n<li>Then, if Aoki takes one stone from the first pile, from the first pile at most <var>floor(1/2)=0</var> stones can now be removed at a time, and from the second pile no more stones can be removed.</li>\n</ul>\n<p>No more operation can be performed, thus Aoki wins. If Takahashi plays differently, Aoki can also win by play accordingly.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n3 2\n4 3\n5 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Takahashi\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n28 3\n16 4\n19 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Aoki\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>4\n3141 59\n26535 897\n93 23\n8462 64\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Takahashi\n</pre></section>\n</div>\n</span>", "p03423": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> students in a school.</p>\n<p>We will divide these students into some groups, and in each group they will discuss some themes.</p>\n<p>You think that groups consisting of two or less students cannot have an effective discussion, so you want to have as many groups consisting of three or more students as possible.</p>\n<p>Divide the students so that the number of groups consisting of three or more students is maximized.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If you can form at most <var>x</var> groups consisting of three or more students, print <var>x</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, you can form a group of three students and another of five students.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Sometimes you cannot form any group consisting of three or more students, regardless of how you divide the students.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03424": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In Japan, people make offerings called <em>hina arare</em>, colorful crackers, on March <var>3</var>.</p>\n<p>We have a bag that contains <var>N</var> hina arare. (From here, we call them arare.)</p>\n<p>It is known that the bag either contains arare in three colors: pink, white and green, or contains arare in four colors: pink, white, green and yellow.</p>\n<p>We have taken out the arare in the bag one by one, and the color of the <var>i</var>-th arare was <var>S_i</var>, where colors are represented as follows - pink: <code>P</code>, white: <code>W</code>, green: <code>G</code>, yellow: <code>Y</code>.</p>\n<p>If the number of colors of the arare in the bag was three, print <code>Three</code>; if the number of colors was four, print <code>Four</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>S_i</var> is <code>P</code>, <code>W</code>, <code>G</code> or <code>Y</code>.</li>\n<li>There always exist <var>i</var>, <var>j</var> and <var>k</var> such that <var>S_i=</var><code>P</code>, <var>S_j=</var><code>W</code> and <var>S_k=</var><code>G</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_1</var> <var>S_2</var> <var>...</var> <var>S_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the number of colors of the arare in the bag was three, print <code>Three</code>; if the number of colors was four, print <code>Four</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\nG W Y P Y W\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Four\n</pre>\n<p>The bag contained arare in four colors, so you should print <code>Four</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9\nG W W G P W P G G\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Three\n</pre>\n<p>The bag contained arare in three colors, so you should print <code>Three</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\nP Y W G Y W Y Y\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Four\n</pre></section>\n</div>\n</span>", "p03425": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> people. The name of the <var>i</var>-th person is <var>S_i</var>.</p>\n<p>We would like to choose three people so that the following conditions are met:</p>\n<ul>\n<li>The name of every chosen person begins with <code>M</code>, <code>A</code>, <code>R</code>, <code>C</code> or <code>H</code>.</li>\n<li>There are no multiple people whose names begin with the same letter.</li>\n</ul>\n<p>How many such ways are there to choose three people, disregarding order?</p>\n<p>Note that the answer may not fit into a <var>32</var>-bit integer type.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>S_i</var> consists of uppercase English letters.</li>\n<li><var>1 \\leq |S_i| \\leq 10</var></li>\n<li><var>S_i \\neq S_j (i \\neq j)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_1</var>\n<var>:</var>\n<var>S_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there are <var>x</var> ways to choose three people so that the given conditions are met, print <var>x</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>We can choose three people with the following names:</p>\n<ul>\n<li>\n<p><code>MASHIKE</code>, <code>RUMOI</code>, <code>HABORO</code></p>\n</li>\n<li>\n<p><code>MASHIKE</code>, <code>RUMOI</code>, <code>HOROKANAI</code></p>\n</li>\n</ul>\n<p>Thus, we have two ways.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\nZZ\nZZZ\nZ\nZZZZZZZZZZ\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Note that there may be no ways to choose three people so that the given conditions are met.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\nCHOKUDAI\nRNG\nMAKOTO\nAOKI\nRINGO\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7\n</pre></section>\n</div>\n</span>", "p03427": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the maximum possible sum of the digits (in base <var>10</var>) of a positive integer not greater than <var>N</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq N \\leq 10^{16}</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible sum of the digits (in base <var>10</var>) of a positive integer not greater than <var>N</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>18\n</pre>\n<p>For example, the sum of the digits in <var>99</var> is <var>18</var>, which turns out to be the maximum value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9995\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>35\n</pre>\n<p>For example, the sum of the digits in <var>9989</var> is <var>35</var>, which turns out to be the maximum value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3141592653589793\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>137\n</pre></section>\n</div>\n</span>", "p03428": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> holes in a two-dimensional plane. The coordinates of the <var>i</var>-th hole are <var>(x_i,y_i)</var>.</p>\n<p>Let <var>R=10^{10^{10^{10}}}</var>. Ringo performs the following operation:</p>\n<ul>\n<li>Randomly choose a point from the interior of a circle of radius <var>R</var> centered at the origin, and put Snuke there. Snuke will move to the hole with the smallest Euclidean distance from the point, and fall into that hole. If there are multiple such holes, the hole with the smallest index will be chosen.</li>\n</ul>\n<p>For every <var>i</var> <var>(1 \\leq i \\leq N)</var>, find the probability that Snuke falls into the <var>i</var>-th hole.</p>\n<p>Here, the operation of randomly choosing a point from the interior of a circle of radius <var>R</var> is defined as follows:</p>\n<ul>\n<li>Pick two real numbers <var>x</var> and <var>y</var> independently according to uniform distribution on <var>[-R,R]</var>.</li>\n<li>If <var>x^2+y^2\\leq R^2</var>, the point <var>(x,y)</var> is chosen. Otherwise, repeat picking the real numbers <var>x,y</var> until the condition is met.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>|x_i|,|y_i| \\leq 10^6(1\\leq i\\leq N)</var></li>\n<li>All given points are pairwise distinct.</li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>:</var>\n<var>x_N</var> <var>y_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> real numbers. The <var>i</var>-th real number must represent the probability that Snuke falls into the <var>i</var>-th hole.</p>\n<p>The output will be judged correct when, for all output values, the absolute or relative error is at most <var>10^{-5}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n0 0\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0.5\n0.5\n</pre>\n<p>If Ringo put Snuke in the region <var>x+y\\leq 1</var>, Snuke will fall into the first hole. The probability of this happening is very close to <var>0.5</var>.\nOtherwise, Snuke will fall into the second hole, the probability of which happening is also very close to <var>0.5</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n0 0\n2 8\n4 5\n2 6\n3 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0.43160120892732328768\n0.03480224363653196956\n0.13880483535586193855\n0.00000000000000000000\n0.39479171208028279727\n</pre></section>\n</div>\n</span>", "p03429": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has an <var>N \\times M</var> grid, with <var>N</var> horizontal rows and <var>M</var> vertical columns.\nDetermine if we can place <var>A</var> <var>1 \\times 2</var> tiles (<var>1</var> vertical, <var>2</var> horizontal) and <var>B</var> <var>2 \\times 1</var> tiles (<var>2</var> vertical, <var>1</var> horizontal) satisfying the following conditions, and construct one arrangement of the tiles if it is possible:</p>\n<ul>\n<li>All the tiles must be placed on the grid.</li>\n<li>Tiles must not stick out of the grid, and no two different tiles may intersect.</li>\n<li>Neither the grid nor the tiles may be rotated.</li>\n<li>Every tile completely covers exactly two squares.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 1000</var></li>\n<li><var>0 \\leq A,B \\leq 500000</var></li>\n<li><var>N</var>, <var>M</var>, <var>A</var> and <var>B</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is impossible to place all the tiles, print <code>NO</code>.\nOtherwise, print the following:</p>\n<pre>YES\n<var>c_{11}...c_{1M}</var>\n<var>:</var>\n<var>c_{N1}...c_{NM}</var>\n</pre>\n<p>Here, <var>c_{ij}</var> must be one of the following characters: <code>.</code>, <code>&lt;</code>, <code>&gt;</code>, <code>^</code> and <code>v</code>. Represent an arrangement by using each of these characters as follows:</p>\n<ul>\n<li>When <var>c_{ij}</var> is <code>.</code>, it indicates that the square at the <var>i</var>-th row and <var>j</var>-th column is empty;</li>\n<li>When <var>c_{ij}</var> is <code>&lt;</code>, it indicates that the square at the <var>i</var>-th row and <var>j</var>-th column is covered by the left half of a <var>1 \\times 2</var> tile;</li>\n<li>When <var>c_{ij}</var> is <code>&gt;</code>, it indicates that the square at the <var>i</var>-th row and <var>j</var>-th column is covered by the right half of a <var>1 \\times 2</var> tile;</li>\n<li>When <var>c_{ij}</var> is <code>^</code>, it indicates that the square at the <var>i</var>-th row and <var>j</var>-th column is covered by the top half of a <var>2 \\times 1</var> tile;</li>\n<li>When <var>c_{ij}</var> is <code>v</code>, it indicates that the square at the <var>i</var>-th row and <var>j</var>-th column is covered by the bottom half of a <var>2 \\times 1</var> tile.</li>\n</ul>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 4 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n&lt;&gt;&lt;&gt;\n^&lt;&gt;^\nv&lt;&gt;v\n</pre>\n<p>This is one example of a way to place four <var>1 \\times 2</var> tiles and three <var>2 \\times 1</var> tiles on a <var>3 \\times 4</var> grid.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 5 5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>YES\n&lt;&gt;..^\n^.&lt;&gt;v\nv&lt;&gt;.^\n&lt;&gt;&lt;&gt;v\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7 9 20 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p03430": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has decided to give a string to his mother.</p>\n<p>The <em>value</em> of a string <var>T</var> is the length of the longest common subsequence of <var>T</var> and <var>T'</var>, where <var>T'</var> is the string obtained by reversing <var>T</var>.\nThat is, the value is the longest length of the following two strings that are equal: a subsequence of <var>T</var> (possibly non-contiguous), and a subsequence of <var>T'</var> (possibly non-contiguous).</p>\n<p>Takahashi has a string <var>S</var>. He wants to give her mother a string of the highest possible value, so he would like to change at most <var>K</var> characters in <var>S</var> to any other characters in order to obtain a string of the highest possible value.\nFind the highest possible value achievable.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 300</var></li>\n<li><var>0 \\leq K \\leq |S|</var></li>\n<li><var>S</var> consists of lowercase English letters.</li>\n<li><var>K</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the highest possible value achievable.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abcabcabc\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>Changing the first character to <code>c</code> results in <code>cbcabcabc</code>.\nLet this tring be <var>T</var>, then one longest common subsequence of <var>T</var> and <var>T'</var> is <code>cbabcbc</code>, whose length is <var>7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>atcodergrandcontest\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>15\n</pre></section>\n</div>\n</span>", "p03431": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In Republic of AtCoder, Snuke Chameleons (Family: Chamaeleonidae, Genus: Bartaberia) are very popular pets.\nRingo keeps <var>N</var> Snuke Chameleons in a cage.</p>\n<p>A Snuke Chameleon that has not eaten anything is blue. It changes its color according to the following rules:</p>\n<ul>\n<li>A Snuke Chameleon that is blue will change its color to red when the number of red balls it has eaten becomes strictly larger than the number of blue balls it has eaten.</li>\n<li>A Snuke Chameleon that is red will change its color to blue when the number of blue balls it has eaten becomes strictly larger than the number of red balls it has eaten.</li>\n</ul>\n<p>Initially, every Snuke Chameleon had not eaten anything. Ringo fed them by repeating the following process <var>K</var> times:</p>\n<ul>\n<li>Grab either a red ball or a blue ball.</li>\n<li>Throw that ball into the cage. Then, one of the chameleons eats it.</li>\n</ul>\n<p>After Ringo threw in <var>K</var> balls, all the chameleons were red. We are interested in the possible ways Ringo could have thrown in <var>K</var> balls. How many such ways are there? Find the count modulo <var>998244353</var>. Here, two ways to throw in balls are considered different when there exists <var>i</var> such that the color of the ball that are thrown in the <var>i</var>-th throw is different.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,K \\leq 5 \\times 10^5</var></li>\n<li><var>N</var> and <var>K</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the possible ways Ringo could have thrown in <var>K</var> balls, modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>We will use <code>R</code> to represent a red ball, and <code>B</code> to represent a blue ball. There are seven ways to throw in balls that satisfy the condition: <code>BRRR</code>, <code>RBRB</code>, <code>RBRR</code>, <code>RRBB</code>, <code>RRBR</code>, <code>RRRB</code> and <code>RRRR</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>57\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>46\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>123456 234567\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>857617983\n</pre></section>\n</div>\n</span>", "p03432": "<span class=\"lang-en\">\n<p>Score : <var>1800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have an <var>N \\times M</var> grid. The square at the <var>i</var>-th row and <var>j</var>-th column will be denoted as <var>(i,j)</var>.\nParticularly, the top-left square will be denoted as <var>(1,1)</var>, and the bottom-right square will be denoted as <var>(N,M)</var>.\nTakahashi painted some of the squares (possibly zero) black, and painted the other squares white.</p>\n<p>We will define an integer sequence <var>A</var> of length <var>N</var>, and two integer sequences <var>B</var> and <var>C</var> of length <var>M</var> each, as follows:</p>\n<ul>\n<li><var>A_i(1\\leq i\\leq N)</var> is the minimum <var>j</var> such that <var>(i,j)</var> is painted black, or <var>M+1</var> if it does not exist.</li>\n<li><var>B_i(1\\leq i\\leq M)</var> is the minimum <var>k</var> such that <var>(k,i)</var> is painted black, or <var>N+1</var> if it does not exist.</li>\n<li><var>C_i(1\\leq i\\leq M)</var> is the maximum <var>k</var> such that <var>(k,i)</var> is painted black, or <var>0</var> if it does not exist.</li>\n</ul>\n<p>How many triples <var>(A,B,C)</var> can occur? Find the count modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notice</h3><p><font color=\"Red\">In this problem, the length of your source code must be at most <var>20000</var> B.\nNote that we will invalidate submissions that exceed the maximum length.</font></p>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 8000</var></li>\n<li><var>1 \\leq M \\leq 200</var></li>\n<li><var>N</var> and <var>M</var> are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>1500</var> points will be awarded for passing the test set satisfying <var>N\\leq 300</var>.</li>\n</ul>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of triples <var>(A,B,C)</var>, modulo <var>998244353</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>64\n</pre>\n<p>Since <var>N=2</var>, given <var>B_i</var> and <var>C_i</var>, we can uniquely determine the arrangement of black squares in each column.\nFor each <var>i</var>, there are four possible pairs <var>(B_i,C_i)</var>: <var>(1,1)</var>, <var>(1,2)</var>, <var>(2,2)</var> and <var>(3,0)</var>. Thus, the answer is <var>4^M=64</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2588\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>17 13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>229876268\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5000 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>57613837\n</pre></section>\n</div>\n</span>", "p03433": "<span class=\"lang-en\">\n<p>Score: <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>E869120 has <var>A</var> <var>1</var>-yen coins and infinitely many <var>500</var>-yen coins.<br/>\nDetermine if he can pay exactly <var>N</var> yen using only these coins.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> is an integer between <var>1</var> and <var>10000</var> (inclusive).</li>\n<li><var>A</var> is an integer between <var>0</var> and <var>1000</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If E869120 can pay exactly <var>N</var> yen using only his <var>1</var>-yen and <var>500</var>-yen coins, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2018\n218\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>We can pay <var>2018</var> yen with four <var>500</var>-yen coins and <var>18</var> <var>1</var>-yen coins, so the answer is <code>Yes</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2763\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>When we have no <var>1</var>-yen coins, we can only pay a multiple of <var>500</var> yen using only <var>500</var>-yen coins. Since <var>2763</var> is not a multiple of <var>500</var>, we cannot pay this amount.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>37\n514\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p03434": "<span class=\"lang-en\">\n<p>Score: <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have <var>N</var> cards. A number <var>a_i</var> is written on the <var>i</var>-th card.<br/>\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.<br/>\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>N</var> is an integer between <var>1</var> and <var>100</var> (inclusive).</li>\n<li><var>a_i \\ (1 \\leq i \\leq N)</var> is an integer between <var>1</var> and <var>100</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:  </p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>a_3</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>First, Alice will take the card with <var>3</var>. Then, Bob will take the card with <var>1</var>.\nThe difference of their scores will be <var>3</var> - <var>1</var> = <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n2 7 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>First, Alice will take the card with <var>7</var>. Then, Bob will take the card with <var>4</var>. Lastly, Alice will take the card with <var>2</var>. The difference of their scores will be <var>7</var> - <var>4</var> + <var>2</var> = <var>5</var>. The difference of their scores will be <var>3</var> - <var>1</var> = <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\n20 18 2 18\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>18\n</pre></section>\n</div>\n</span>", "p03435": "<span class=\"lang-en\">\n<p>Score: <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>We have a <var>3 \\times 3</var> grid. A number <var>c_{i, j}</var> is written in the square <var>(i, j)</var>, where <var>(i, j)</var> denotes the square at the <var>i</var>-th row from the top and the <var>j</var>-th column from the left.<br/>\nAccording to Takahashi, there are six integers <var>a_1, a_2, a_3, b_1, b_2, b_3</var> whose values are fixed, and the number written in the square <var>(i, j)</var> is equal to <var>a_i + b_j</var>.<br/>\nDetermine if he is correct.  </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>c_{i, j} \\ (1 \\leq i \\leq 3, 1 \\leq j \\leq 3)</var> is an integer between <var>0</var> and <var>100</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Input is given from Standard Input in the following format:</p>\n<pre><var>c_{1,1}</var> <var>c_{1,2}</var> <var>c_{1,3}</var>\n<var>c_{2,1}</var> <var>c_{2,2}</var> <var>c_{2,3}</var>\n<var>c_{3,1}</var> <var>c_{3,2}</var> <var>c_{3,3}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>If Takahashi's statement is correct, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 0 1\n2 1 2\n1 0 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Takahashi is correct, since there are possible sets of integers such as: <var>a_1=0,a_2=1,a_3=0,b_1=1,b_2=0,b_3=1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2 2\n2 1 2\n2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>Takahashi is incorrect in this case.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>0 8 8\n0 8 8\n0 8 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1 8 6\n2 9 7\n0 7 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03444": "<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a rooted tree with <var>N</var> vertices.\nThe vertices are numbered <var>0, 1, ..., N-1</var>.\nThe root is Vertex <var>0</var>, and the parent of Vertex <var>i</var> <var>(i = 1, 2, ..., N-1)</var> is Vertex <var>p_i</var>.</p>\n<p>Initially, an integer <var>a_i</var> is written in Vertex <var>i</var>.\nHere, <var>(a_0, a_1, ..., a_{N-1})</var> is a permutation of <var>(0, 1, ..., N-1)</var>.</p>\n<p>You can execute the following operation at most <var>25</var> <var>000</var> times. Do it so that the value written in Vertex <var>i</var> becomes <var>i</var>.</p>\n<ul>\n<li>Choose a vertex and call it <var>v</var>. Consider the path connecting Vertex <var>0</var> and <var>v</var>.</li>\n<li>Rotate the values written on the path. That is, For each edge <var>(i, p_i)</var> along the path, replace the value written in Vertex <var>p_i</var> with the value written in Vertex <var>i</var> (just before this operation), and replace the value of <var>v</var> with the value written in Vertex <var>0</var> (just before this operation).</li>\n<li>You may choose Vertex <var>0</var>, in which case the operation does nothing.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2000</var></li>\n<li><var>0 \\leq p_i \\leq i-1</var></li>\n<li><var>(a_0, a_1, ..., a_{N-1})</var> is a permutation of <var>(0, 1, ..., N-1)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>p_1</var> <var>p_2</var> ... <var>p_{N-1}</var>\n<var>a_0</var> <var>a_1</var> ... <var>a_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>In the first line, print the number of operations, <var>Q</var>.\nIn the second through <var>(Q+1)</var>-th lines, print the chosen vertices in order.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n0 1 2 3\n2 4 0 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n3\n4\n</pre>\n<ul>\n<li>After the first operation, the values written in Vertex <var>0, 1, .., 4</var> are <var>4, 0, 1, 2, 3</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n0 1 2 2\n4 3 1 2 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n4\n3\n1\n</pre>\n<ul>\n<li>After the first operation, the values written in Vertex <var>0, 1, .., 4</var> are <var>3, 1, 0, 2, 4</var>.</li>\n<li>After the second operation, the values written in Vertex <var>0, 1, .., 4</var> are <var>1, 0, 2, 3, 4</var>.</li>\n</ul></section>\n</div>\n</span>", "p03447": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You went shopping to buy cakes and donuts with <var>X</var> yen (the currency of Japan).</p>\n<p>First, you bought one cake for <var>A</var> yen at a cake shop.\nThen, you bought as many donuts as possible for <var>B</var> yen each, at a donut shop.</p>\n<p>How much do you have left after shopping?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A, B \\leq 1</var> <var>000</var></li>\n<li><var>A + B \\leq X \\leq 10</var> <var>000</var></li>\n<li><var>X</var>, <var>A</var> and <var>B</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n<var>A</var>\n<var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the amount you have left after shopping.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1234\n150\n100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>84\n</pre>\n<p>You have <var>1234 - 150 = 1084</var> yen left after buying a cake.\nWith this amount, you can buy <var>10</var> donuts, after which you have <var>84</var> yen left.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000\n108\n108\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>28\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>579\n123\n456\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7477\n549\n593\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>405\n</pre></section>\n</div>\n</span>", "p03448": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have <var>A</var> <var>500</var>-yen coins, <var>B</var> <var>100</var>-yen coins and <var>C</var> <var>50</var>-yen coins (yen is the currency of Japan).\nIn how many ways can we select some of these coins so that they are <var>X</var> yen in total?</p>\n<p>Coins of the same kind cannot be distinguished. Two ways to select coins are distinguished when, for some kind of coin, the numbers of that coin are different.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq A, B, C \\leq 50</var></li>\n<li><var>A + B + C \\geq 1</var></li>\n<li><var>50 \\leq X \\leq 20</var> <var>000</var></li>\n<li><var>A</var>, <var>B</var> and <var>C</var> are integers.</li>\n<li><var>X</var> is a multiple of <var>50</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var>\n<var>B</var>\n<var>C</var>\n<var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to select coins.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n2\n2\n100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>There are two ways to satisfy the condition:</p>\n<ul>\n<li>Select zero <var>500</var>-yen coins, one <var>100</var>-yen coin and zero <var>50</var>-yen coins.</li>\n<li>Select zero <var>500</var>-yen coins, zero <var>100</var>-yen coins and two <var>50</var>-yen coins.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1\n0\n150\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Note that the total must be exactly <var>X</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>30\n40\n50\n6000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>213\n</pre></section>\n</div>\n</span>", "p03449": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a <var>2 \\times N</var> grid. We will denote the square at the <var>i</var>-th row and <var>j</var>-th column (<var>1 \\leq i \\leq 2</var>, <var>1 \\leq j \\leq N</var>) as <var>(i, j)</var>.</p>\n<p>You are initially in the top-left square, <var>(1, 1)</var>.\nYou will travel to the bottom-right square, <var>(2, N)</var>, by repeatedly moving right or down.</p>\n<p>The square <var>(i, j)</var> contains <var>A_{i, j}</var> candies.\nYou will collect all the candies you visit during the travel.\nThe top-left and bottom-right squares also contain candies, and you will also collect them.</p>\n<p>At most how many candies can you collect when you choose the best way to travel?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq A_{i, j} \\leq 100</var> (<var>1 \\leq i \\leq 2</var>, <var>1 \\leq j \\leq N</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_{1, 1}</var> <var>A_{1, 2}</var> <var>...</var> <var>A_{1, N}</var>\n<var>A_{2, 1}</var> <var>A_{2, 2}</var> <var>...</var> <var>A_{2, N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of candies that can be collected.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n3 2 2 4 1\n1 2 2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>14\n</pre>\n<p>The number of collected candies will be maximized when you:</p>\n<ul>\n<li>move right three times, then move down once, then move right once.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 1 1 1\n1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>You will always collect the same number of candies, regardless of how you travel.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n3 3 4 5 4 5 3\n5 3 4 4 2 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>29\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1\n2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03450": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> people standing on the <var>x</var>-axis.\nLet the coordinate of Person <var>i</var> be <var>x_i</var>.\nFor every <var>i</var>, <var>x_i</var> is an integer between <var>0</var> and <var>10^9</var> (inclusive).\nIt is possible that more than one person is standing at the same coordinate.</p>\n<p>You will given <var>M</var> pieces of information regarding the positions of these people.\nThe <var>i</var>-th piece of information has the form <var>(L_i, R_i, D_i)</var>.\nThis means that Person <var>R_i</var> is to the right of Person <var>L_i</var> by <var>D_i</var> units of distance, that is, <var>x_{R_i} - x_{L_i} = D_i</var> holds.</p>\n<p>It turns out that some of these <var>M</var> pieces of information may be incorrect.\nDetermine if there exists a set of values <var>(x_1, x_2, ..., x_N)</var> that is consistent with the given pieces of information.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var> <var>000</var></li>\n<li><var>0 \\leq M \\leq 200</var> <var>000</var></li>\n<li><var>1 \\leq L_i, R_i \\leq N</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li><var>0 \\leq D_i \\leq 10</var> <var>000</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li><var>L_i \\neq R_i</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li>If <var>i \\neq j</var>, then <var>(L_i, R_i) \\neq (L_j, R_j)</var> and <var>(L_i, R_i) \\neq (R_j, L_j)</var>.</li>\n<li><var>D_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>L_1</var> <var>R_1</var> <var>D_1</var>\n<var>L_2</var> <var>R_2</var> <var>D_2</var>\n<var>:</var>\n<var>L_M</var> <var>R_M</var> <var>D_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there exists a set of values <var>(x_1, x_2, ..., x_N)</var> that is consistent with all given pieces of information, print <code>Yes</code>; if it does not exist, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 2 1\n2 3 1\n1 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Some possible sets of values <var>(x_1, x_2, x_3)</var> are <var>(0, 1, 2)</var> and <var>(101, 102, 103)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n1 2 1\n2 3 1\n1 3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>If the first two pieces of information are correct, <var>x_3 - x_1 = 2</var> holds, which is contradictory to the last piece of information.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 3\n2 1 1\n2 3 5\n3 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 3\n8 7 100\n7 9 100\n9 8 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>100 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p03451": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a <var>2 \\times N</var> grid. We will denote the square at the <var>i</var>-th row and <var>j</var>-th column (<var>1 \\leq i \\leq 2</var>, <var>1 \\leq j \\leq N</var>) as <var>(i, j)</var>.</p>\n<p>You are initially in the top-left square, <var>(1, 1)</var>.\nYou will travel to the bottom-right square, <var>(2, N)</var>, by repeatedly moving right or down.</p>\n<p>The square <var>(i, j)</var> contains <var>A_{i, j}</var> candies.\nYou will collect all the candies you visit during the travel.\nThe top-left and bottom-right squares also contain candies, and you will also collect them.</p>\n<p>At most how many candies can you collect when you choose the best way to travel?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq A_{i, j} \\leq 100</var> (<var>1 \\leq i \\leq 2</var>, <var>1 \\leq j \\leq N</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_{1, 1}</var> <var>A_{1, 2}</var> <var>...</var> <var>A_{1, N}</var>\n<var>A_{2, 1}</var> <var>A_{2, 2}</var> <var>...</var> <var>A_{2, N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of candies that can be collected.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n3 2 2 4 1\n1 2 2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>14\n</pre>\n<p>The number of collected candies will be maximized when you:</p>\n<ul>\n<li>move right three times, then move down once, then move right once.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 1 1 1\n1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n<p>You will always collect the same number of candies, regardless of how you travel.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n3 3 4 5 4 5 3\n5 3 4 4 2 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>29\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1\n2\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03452": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> people standing on the <var>x</var>-axis.\nLet the coordinate of Person <var>i</var> be <var>x_i</var>.\nFor every <var>i</var>, <var>x_i</var> is an integer between <var>0</var> and <var>10^9</var> (inclusive).\nIt is possible that more than one person is standing at the same coordinate.</p>\n<p>You will given <var>M</var> pieces of information regarding the positions of these people.\nThe <var>i</var>-th piece of information has the form <var>(L_i, R_i, D_i)</var>.\nThis means that Person <var>R_i</var> is to the right of Person <var>L_i</var> by <var>D_i</var> units of distance, that is, <var>x_{R_i} - x_{L_i} = D_i</var> holds.</p>\n<p>It turns out that some of these <var>M</var> pieces of information may be incorrect.\nDetermine if there exists a set of values <var>(x_1, x_2, ..., x_N)</var> that is consistent with the given pieces of information.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var> <var>000</var></li>\n<li><var>0 \\leq M \\leq 200</var> <var>000</var></li>\n<li><var>1 \\leq L_i, R_i \\leq N</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li><var>0 \\leq D_i \\leq 10</var> <var>000</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li><var>L_i \\neq R_i</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li>If <var>i \\neq j</var>, then <var>(L_i, R_i) \\neq (L_j, R_j)</var> and <var>(L_i, R_i) \\neq (R_j, L_j)</var>.</li>\n<li><var>D_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>L_1</var> <var>R_1</var> <var>D_1</var>\n<var>L_2</var> <var>R_2</var> <var>D_2</var>\n<var>:</var>\n<var>L_M</var> <var>R_M</var> <var>D_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there exists a set of values <var>(x_1, x_2, ..., x_N)</var> that is consistent with all given pieces of information, print <code>Yes</code>; if it does not exist, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n1 2 1\n2 3 1\n1 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Some possible sets of values <var>(x_1, x_2, x_3)</var> are <var>(0, 1, 2)</var> and <var>(101, 102, 103)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n1 2 1\n2 3 1\n1 3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>If the first two pieces of information are correct, <var>x_3 - x_1 = 2</var> holds, which is contradictory to the last piece of information.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 3\n2 1 1\n2 3 5\n3 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 3\n8 7 100\n7 9 100\n9 8 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>100 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>Yes\n</pre></section>\n</div>\n</span>", "p03453": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a graph with <var>N</var> vertices and <var>M</var> edges, and there are two people on the graph: Takahashi and Aoki.</p>\n<p>The <var>i</var>-th edge connects Vertex <var>U_i</var> and Vertex <var>V_i</var>.\nThe time it takes to traverse this edge is <var>D_i</var> minutes, regardless of direction and who traverses the edge (Takahashi or Aoki).</p>\n<p>Takahashi departs Vertex <var>S</var> and Aoki departs Vertex <var>T</var> at the same time. Takahashi travels to Vertex <var>T</var> and Aoki travels to Vertex <var>S</var>, both in the shortest time possible.\nFind the number of the pairs of ways for Takahashi and Aoki to choose their shortest paths such that they never meet (at a vertex or on an edge) during the travel, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var> <var>000</var></li>\n<li><var>1 \\leq M \\leq 200</var> <var>000</var></li>\n<li><var>1 \\leq S, T \\leq N</var></li>\n<li><var>S \\neq T</var></li>\n<li><var>1 \\leq U_i, V_i \\leq N</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li><var>1 \\leq D_i \\leq 10^9</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li>If <var>i \\neq j</var>, then <var>(U_i, V_i) \\neq (U_j, V_j)</var> and <var>(U_i, V_i) \\neq (V_j, U_j)</var>.</li>\n<li><var>U_i \\neq V_i</var> (<var>1 \\leq i \\leq M</var>)</li>\n<li><var>D_i</var> are integers.</li>\n<li>The given graph is connected.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>S</var> <var>T</var>\n<var>U_1</var> <var>V_1</var> <var>D_1</var>\n<var>U_2</var> <var>V_2</var> <var>D_2</var>\n<var>:</var>\n<var>U_M</var> <var>V_M</var> <var>D_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 4\n1 3\n1 2 1\n2 3 1\n3 4 1\n4 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>There are two ways to choose shortest paths that satisfies the condition:</p>\n<ul>\n<li>Takahashi chooses the path <var>1 \\rightarrow 2 \\rightarrow 3</var>, and Aoki chooses the path <var>3 \\rightarrow 4 \\rightarrow 1</var>.</li>\n<li>Takahashi chooses the path <var>1 \\rightarrow 4 \\rightarrow 3</var>, and Aoki chooses the path <var>3 \\rightarrow 2 \\rightarrow 1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n1 3\n1 2 1\n2 3 1\n3 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 3\n1 3\n1 2 1\n2 3 1\n3 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>8 13\n4 2\n7 3 9\n6 2 3\n1 6 4\n7 6 9\n3 8 9\n1 2 2\n2 8 12\n8 6 9\n2 5 5\n4 2 18\n5 3 7\n5 1 515371567\n4 8 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>6\n</pre></section>\n</div>\n</span>", "p03454": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For a positive integer <var>n</var>, let us define <var>f(n)</var> as the number of digits in base <var>10</var>.</p>\n<p>You are given an integer <var>S</var>.\nCount the number of the pairs of positive integers <var>(l, r)</var> (<var>l \\leq r</var>) such that <var>f(l) + f(l + 1) + ... + f(r) = S</var>, and find the count modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq S \\leq 10^8</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>There are nine pairs <var>(l, r)</var> that satisfies the condition: <var>(1, 1)</var>, <var>(2, 2)</var>, <var>...</var>, <var>(9, 9)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>98\n</pre>\n<p>There are <var>98</var> pairs <var>(l, r)</var> that satisfies the condition, such as <var>(1, 2)</var> and <var>(33, 33)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>123\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>460191684\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>36018\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>966522825\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>184984484\n</pre></section>\n</div>\n</span>", "p03463": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A game is played on a strip consisting of <var>N</var> cells consecutively numbered from 1 to <var>N</var>. </p>\n<p>Alice has her token on cell <var>A</var>. Borys has his token on a different cell <var>B</var>.</p>\n<p>Players take turns, Alice moves first.\nThe moving player must shift his or her token from its current cell <var>X</var> to the neighboring cell on the left, cell <var>X-1</var>, or on the right, cell <var>X+1</var>.\nNote that it's disallowed to move the token outside the strip or to the cell with the other player's token.\nIn one turn, the token of the moving player must be shifted exactly once.</p>\n<p>The player who can't make a move loses, and the other player wins.</p>\n<p>Both players want to win. Who wins if they play optimally?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq A &lt; B \\leq N</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Alice</code> if Alice wins, <code>Borys</code> if Borys wins, and <code>Draw</code> if nobody wins.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Alice\n</pre>\n<p>Alice can move her token to cell 3. \nAfter that, Borys will be unable to move his token to cell 3, so he will have to move his token to cell 5. \nThen, Alice moves her token to cell 4. Borys can't make a move and loses. </p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Borys\n</pre>\n<p>Alice can't make the very first move and loses.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>58 23 42\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Borys\n</pre></section>\n</div>\n</span>", "p03464": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>An adult game master and <var>N</var> children are playing a game on an ice rink.\nThe game consists of <var>K</var> rounds.\nIn the <var>i</var>-th round, the game master announces:</p>\n<ul>\n<li>Form groups consisting of <var>A_i</var> children each!</li>\n</ul>\n<p>Then the children who are still in the game form as many groups of <var>A_i</var> children as possible.\nOne child may belong to at most one group.\nThose who are left without a group leave the game. The others proceed to the next round.\nNote that it's possible that nobody leaves the game in some round.</p>\n<p>In the end, after the <var>K</var>-th round, there are exactly two children left, and they are declared the winners.</p>\n<p>You have heard the values of <var>A_1</var>, <var>A_2</var>, ..., <var>A_K</var>. You don't know <var>N</var>, but you want to estimate it.</p>\n<p>Find the smallest and the largest possible number of children in the game before the start, or determine that no valid values of <var>N</var> exist.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq 10^5</var></li>\n<li><var>2 \\leq A_i \\leq 10^9</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>K</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print two integers representing the smallest and the largest possible value of <var>N</var>, respectively,\nor a single integer <var>-1</var> if the described situation is impossible.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n3 4 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6 8\n</pre>\n<p>For example, if the game starts with <var>6</var> children, then it proceeds as follows:</p>\n<ul>\n<li>In the first round, <var>6</var> children form <var>2</var> groups of <var>3</var> children, and nobody leaves the game.</li>\n<li>In the second round, <var>6</var> children form <var>1</var> group of <var>4</var> children, and <var>2</var> children leave the game.</li>\n<li>In the third round, <var>4</var> children form <var>1</var> group of <var>3</var> children, and <var>1</var> child leaves the game.</li>\n<li>In the fourth round, <var>3</var> children form <var>1</var> group of <var>2</var> children, and <var>1</var> child leaves the game.</li>\n</ul>\n<p>The last <var>2</var> children are declared the winners.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n3 4 100 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>This situation is impossible.\nIn particular, if the game starts with less than <var>100</var> children, everyone leaves after the third round.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n2 2 2 2 2 2 2 2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2 3\n</pre></section>\n</div>\n</span>", "p03465": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N</var> integers <var>A_1</var>, <var>A_2</var>, ..., <var>A_N</var>.</p>\n<p>Consider the sums of all non-empty subsequences of <var>A</var>. There are <var>2^N - 1</var> such sums, an odd number.</p>\n<p>Let the list of these sums in non-decreasing order be <var>S_1</var>, <var>S_2</var>, ..., <var>S_{2^N - 1}</var>.</p>\n<p>Find the median of this list, <var>S_{2^{N-1}}</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 2000</var></li>\n<li><var>1 \\leq A_i \\leq 2000</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the median of the sorted list of the sums of all non-empty subsequences of <var>A</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>In this case, <var>S = (1, 1, 2, 2, 3, 3, 4)</var>. Its median is <var>S_4 = 2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n58\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>58\n</pre>\n<p>In this case, <var>S = (58)</var>.</p></section>\n</div>\n</span>", "p03466": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>f(A, B)</var>, where <var>A</var> and <var>B</var> are positive integers, be the string satisfying the following conditions:</p>\n<ul>\n<li><var>f(A, B)</var> has length <var>A + B</var>;</li>\n<li><var>f(A, B)</var> contains exactly <var>A</var> letters <code>A</code> and exactly <var>B</var> letters <code>B</code>;</li>\n<li>The length of the longest substring of <var>f(A, B)</var> consisting of equal letters (ex., <code>AAAAA</code> or <code>BBBB</code>) is as small as possible under the conditions above;</li>\n<li><var>f(A, B)</var> is the lexicographically smallest string satisfying the conditions above.</li>\n</ul>\n<p>For example, <var>f(2, 3)</var> = <code>BABAB</code>, and <var>f(6, 4)</var> = <code>AABAABAABB</code>.</p>\n<p>Answer <var>Q</var> queries: find the substring of <var>f(A_i, B_i)</var> from position <var>C_i</var> to position <var>D_i</var> (1-based).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq Q \\leq 10^3</var></li>\n<li><var>1 \\leq A_i, B_i \\leq 5 \\times 10^8</var></li>\n<li><var>1 \\leq C_i \\leq D_i \\leq A_i + B_i</var></li>\n<li><var>D_i - C_i + 1 \\leq 100</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>500</var> points will be awarded for passing the testset satisfying <var>1 \\leq A_i, B_i \\leq 10^3</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>Q</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var> <var>D_1</var>\n<var>A_2</var> <var>B_2</var> <var>C_2</var> <var>D_2</var>\n<var>:</var>\n<var>A_Q</var> <var>B_Q</var> <var>C_Q</var> <var>D_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each query <var>i</var> in order of input, print a line containing the substring of <var>f(A_i, B_i)</var> from position <var>C_i</var> to position <var>D_i</var> (1-based).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n2 3 1 5\n6 4 1 10\n2 3 4 4\n6 4 3 7\n8 10 5 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>BABAB\nAABAABAABB\nA\nBAABA\nABAB\n</pre></section>\n</div>\n</span>", "p03467": "<span class=\"lang-en\">\n<p>Score : <var>1400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Consider the following set of rules for encoding strings consisting of <code>0</code> and <code>1</code>:</p>\n<ul>\n<li>Strings <code>0</code> and <code>1</code> can be encoded as <code>0</code> and <code>1</code>, respectively. </li>\n<li>If strings <var>A</var> and <var>B</var> can be encoded as <var>P</var> and <var>Q</var>, respectively, then string <var>AB</var> can be encoded as <var>PQ</var>.</li>\n<li>If string <var>A</var> can be encoded as <var>P</var> and <var>K \\geq 2</var> is a positive integer, then string <var>AA...A</var> (<var>A</var> repeated <var>K</var> times) can be encoded as <code>(</code><var>P</var><code>x</code><var>K</var><code>)</code>.</li>\n</ul>\n<p>For example, string <code>001001001</code>, among other possibilities, can be encoded as <code>001001001</code>, <code>00(1(0x2)x2)1</code> and <code>(001x3)</code>.</p>\n<p>Let's call string <var>A</var> a subset of string <var>B</var> if:</p>\n<ul>\n<li><var>A</var> and <var>B</var> are equal in length and consist of <code>0</code> and <code>1</code>;</li>\n<li>for all indices <var>i</var> such that <var>A_i</var> = <code>1</code>, it's also true that <var>B_i</var> = <code>1</code>.</li>\n</ul>\n<p>You are given string <var>S</var> consisting of <code>0</code> and <code>1</code>. Find the total number of distinct encodings of all subsets of <var>S</var>, modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 100</var></li>\n<li><var>S</var> consists of <code>0</code> and <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the total number of distinct encodings of all subsets of <var>S</var> modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>011\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>9\n</pre>\n<p>There are four subsets of <var>S</var>:</p>\n<ul>\n<li><code>011</code> can be encoded as <code>011</code> and <code>0(1x2)</code>;</li>\n<li><code>010</code> can be encoded as <code>010</code>;</li>\n<li><code>001</code> can be encoded as <code>001</code> and <code>(0x2)1</code>;</li>\n<li><code>000</code> can be encoded as <code>000</code>, <code>0(0x2)</code>, <code>(0x2)0</code> and <code>(0x3)</code>.</li>\n</ul>\n<p>Thus, the total number of encodings of all subsets of <var>S</var> is <var>2 + 1 + 2 + 4 = 9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>0000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre>\n<p>This time <var>S</var> has only one subset, but it can be encoded in <var>10</var> different ways.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>101110\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>156\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>001110111010110001100000100111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>363383189\n</pre>\n<p>Don't forget to take the result modulo <var>998244353</var>.</p></section>\n</div>\n</span>", "p03468": "<span class=\"lang-en\">\n<p>Score : <var>2100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have a circle of length <var>C</var>, and you are placing <var>N</var> arcs on it. Arc <var>i</var> has length <var>L_i</var>.</p>\n<p>Every arc <var>i</var> is placed on the circle uniformly at random:\na random real point on the circle is chosen, then an arc of length <var>L_i</var> centered at this point appears.</p>\n<p>Note that the arcs are placed independently. For example, they may intersect or contain each other.</p>\n<p>What is the probability that every real point of the circle will be covered by at least one arc?\nAssume that an arc covers its ends.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 6</var></li>\n<li><var>2 \\leq C \\leq 50</var></li>\n<li><var>1 \\leq L_i &lt; C</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>C</var>\n<var>L_1</var> <var>L_2</var> <var>...</var> <var>L_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the probability that every real point of the circle will be covered by at least one arc.\nYour answer will be considered correct if its absolute error doesn't exceed <var>10^{-11}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0.3333333333333333\n</pre>\n<p>The centers of the two arcs must be at distance at least <var>1</var>. The probability of this on a circle of length <var>3</var> is <var>1 / 3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 10\n1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0.0000000000000000\n</pre>\n<p>Even though the total length of the arcs is exactly <var>C</var> and it's possible that every real point of the circle is covered by at least one arc,\nthe probability of this event is <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 2\n1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0.5000000000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>3 5\n2 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0.4000000000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>4 6\n4 1 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>0.3148148148148148\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>6 49\n22 13 27 8 2 19\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>0.2832340720702695\n</pre></section>\n</div>\n</span>", "p03469": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>On some day in January <var>2018</var>, Takaki is writing a document. The document has a column where the current date is written in <code>yyyy/mm/dd</code> format. For example, January <var>23</var>, <var>2018</var> should be written as <code>2018/01/23</code>.</p>\n<p>After finishing the document, she noticed that she had mistakenly wrote <code>2017</code> at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, <var>S</var>, is given as input, modifies the first four characters in <var>S</var> to <code>2018</code> and prints it.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is a string of length <var>10</var>.</li>\n<li>The first eight characters in <var>S</var> are <code>2017/01/</code>.</li>\n<li>The last two characters in <var>S</var> are digits and represent an integer between <var>1</var> and <var>31</var> (inclusive).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Replace the first four characters in <var>S</var> with <code>2018</code> and print it.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2017/01/07\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2018/01/07\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2017/01/31\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2018/01/31\n</pre></section>\n</div>\n</span>", "p03477": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A balance scale tips to the left if <var>L&gt;R</var>, where <var>L</var> is the total weight of the masses on the left pan and <var>R</var> is the total weight of the masses on the right pan. Similarly, it balances if <var>L=R</var>, and tips to the right if <var>L&lt;R</var>.</p>\n<p>Takahashi placed a mass of weight <var>A</var> and a mass of weight <var>B</var> on the left pan of a balance scale, and placed a mass of weight <var>C</var> and a mass of weight <var>D</var> on the right pan.</p>\n<p>Print <code>Left</code> if the balance scale tips to the left; print <code>Balanced</code> if it balances; print <code>Right</code> if it tips to the right.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq A,B,C,D \\leq 10</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Left</code> if the balance scale tips to the left; print <code>Balanced</code> if it balances; print <code>Right</code> if it tips to the right.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 8 7 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Left\n</pre>\n<p>The total weight of the masses on the left pan is <var>11</var>, and the total weight of the masses on the right pan is <var>8</var>. Since <var>11&gt;8</var>, we should print <code>Left</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4 5 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Balanced\n</pre>\n<p>The total weight of the masses on the left pan is <var>7</var>, and the total weight of the masses on the right pan is <var>7</var>. Since <var>7=7</var>, we should print <code>Balanced</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 7 6 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Right\n</pre>\n<p>The total weight of the masses on the left pan is <var>8</var>, and the total weight of the masses on the right pan is <var>10</var>. Since <var>8&lt;10</var>, we should print <code>Right</code>.</p></section>\n</div>\n</span>", "p03478": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Find the sum of the integers between <var>1</var> and <var>N</var> (inclusive), whose sum of digits written in base <var>10</var> is between <var>A</var> and <var>B</var> (inclusive).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^4</var></li>\n<li><var>1 \\leq A \\leq B \\leq 36</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the integers between <var>1</var> and <var>N</var> (inclusive), whose sum of digits written in base <var>10</var> is between <var>A</var> and <var>B</var> (inclusive).</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>20 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>84\n</pre>\n<p>Among the integers not greater than <var>20</var>, the ones whose sums of digits are between <var>2</var> and <var>5</var>, are: <var>2,3,4,5,11,12,13,14</var> and <var>20</var>. We should print the sum of these, <var>84</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>13\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 4 16\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4554\n</pre></section>\n</div>\n</span>", "p03479": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>As a token of his gratitude, Takahashi has decided to give his mother an integer sequence.\nThe sequence <var>A</var> needs to satisfy the conditions below:</p>\n<ul>\n<li><var>A</var> consists of integers between <var>X</var> and <var>Y</var> (inclusive).</li>\n<li>For each <var>1\\leq i \\leq |A|-1</var>, <var>A_{i+1}</var> is a multiple of <var>A_i</var> and strictly greater than <var>A_i</var>.</li>\n</ul>\n<p>Find the maximum possible length of the sequence.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X \\leq Y \\leq 10^{18}</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible length of the sequence.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The sequence <var>3,6,18</var> satisfies the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>25 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159265 358979323846264338\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>31\n</pre></section>\n</div>\n</span>", "p03480": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> consisting of <code>0</code> and <code>1</code>.\nFind the maximum integer <var>K</var> not greater than <var>|S|</var> such that we can turn all the characters of <var>S</var> into <code>0</code> by repeating the following operation some number of times.</p>\n<ul>\n<li>Choose a contiguous segment <var>[l,r]</var> in <var>S</var> whose length is at least <var>K</var> (that is, <var>r-l+1\\geq K</var> must be satisfied). For each integer <var>i</var> such that <var>l\\leq i\\leq r</var>, do the following: if <var>S_i</var> is <code>0</code>, replace it with <code>1</code>; if <var>S_i</var> is <code>1</code>, replace it with <code>0</code>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq |S|\\leq 10^5</var></li>\n<li><var>S_i(1\\leq i\\leq N)</var> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum integer <var>K</var> such that we can turn all the characters of <var>S</var> into <code>0</code> by repeating the operation some number of times.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>010\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>We can turn all the characters of <var>S</var> into <code>0</code> by the following operations:</p>\n<ul>\n<li>Perform the operation on the segment <var>S[1,3]</var> with length <var>3</var>. <var>S</var> is now <code>101</code>.</li>\n<li>Perform the operation on the segment <var>S[1,2]</var> with length <var>2</var>. <var>S</var> is now <code>011</code>.</li>\n<li>Perform the operation on the segment <var>S[2,3]</var> with length <var>2</var>. <var>S</var> is now <code>000</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>00001111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03481": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>As a token of his gratitude, Takahashi has decided to give his mother an integer sequence.\nThe sequence <var>A</var> needs to satisfy the conditions below:</p>\n<ul>\n<li><var>A</var> consists of integers between <var>X</var> and <var>Y</var> (inclusive).</li>\n<li>For each <var>1\\leq i \\leq |A|-1</var>, <var>A_{i+1}</var> is a multiple of <var>A_i</var> and strictly greater than <var>A_i</var>.</li>\n</ul>\n<p>Find the maximum possible length of the sequence.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X \\leq Y \\leq 10^{18}</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible length of the sequence.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The sequence <var>3,6,18</var> satisfies the conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>25 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>314159265 358979323846264338\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>31\n</pre></section>\n</div>\n</span>", "p03482": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> consisting of <code>0</code> and <code>1</code>.\nFind the maximum integer <var>K</var> not greater than <var>|S|</var> such that we can turn all the characters of <var>S</var> into <code>0</code> by repeating the following operation some number of times.</p>\n<ul>\n<li>Choose a contiguous segment <var>[l,r]</var> in <var>S</var> whose length is at least <var>K</var> (that is, <var>r-l+1\\geq K</var> must be satisfied). For each integer <var>i</var> such that <var>l\\leq i\\leq r</var>, do the following: if <var>S_i</var> is <code>0</code>, replace it with <code>1</code>; if <var>S_i</var> is <code>1</code>, replace it with <code>0</code>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1\\leq |S|\\leq 10^5</var></li>\n<li><var>S_i(1\\leq i\\leq N)</var> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum integer <var>K</var> such that we can turn all the characters of <var>S</var> into <code>0</code> by repeating the operation some number of times.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>010\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>We can turn all the characters of <var>S</var> into <code>0</code> by the following operations:</p>\n<ul>\n<li>Perform the operation on the segment <var>S[1,3]</var> with length <var>3</var>. <var>S</var> is now <code>101</code>.</li>\n<li>Perform the operation on the segment <var>S[1,2]</var> with length <var>2</var>. <var>S</var> is now <code>011</code>.</li>\n<li>Perform the operation on the segment <var>S[2,3]</var> with length <var>2</var>. <var>S</var> is now <code>000</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>00001111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre></section>\n</div>\n</span>", "p03485": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given two positive integers <var>a</var> and <var>b</var>.\nLet <var>x</var> be the average of <var>a</var> and <var>b</var>.\nPrint <var>x</var> rounded up to the nearest integer.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>a</var> and <var>b</var> are integers.</li>\n<li><var>1 \\leq a, b \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>x</var> rounded up to the nearest integer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The average of <var>1</var> and <var>3</var> is <var>2.0</var>, and it will be rounded up to the nearest integer, <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>6\n</pre>\n<p>The average of <var>7</var> and <var>4</var> is <var>5.5</var>, and it will be rounded up to the nearest integer, <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03486": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given strings <var>s</var> and <var>t</var>, consisting of lowercase English letters.\nYou will create a string <var>s'</var> by freely rearranging the characters in <var>s</var>.\nYou will also create a string <var>t'</var> by freely rearranging the characters in <var>t</var>.\nDetermine whether it is possible to satisfy <var>s' &lt; t'</var> for the lexicographic order.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><p>For a string <var>a = a_1 a_2 ... a_N</var> of length <var>N</var> and a string <var>b = b_1 b_2 ... b_M</var> of length <var>M</var>, we say <var>a &lt; b</var> for the lexicographic order if either one of the following two conditions holds true:</p>\n<ul>\n<li><var>N &lt; M</var> and <var>a_1 = b_1</var>, <var>a_2 = b_2</var>, ..., <var>a_N = b_N</var>.</li>\n<li>There exists <var>i</var> (<var>1 \\leq i \\leq N, M</var>) such that <var>a_1 = b_1</var>, <var>a_2 = b_2</var>, ..., <var>a_{i - 1} = b_{i - 1}</var> and <var>a_i &lt; b_i</var>. Here, letters are compared using alphabetical order.</li>\n</ul>\n<p>For example, <code>xy</code> <var>&lt;</var> <code>xya</code> and <code>atcoder</code> <var>&lt;</var> <code>atlas</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The lengths of <var>s</var> and <var>t</var> are between <var>1</var> and <var>100</var> (inclusive).</li>\n<li><var>s</var> and <var>t</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n<var>t</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to satisfy <var>s' &lt; t'</var>, print <code>Yes</code>; if it is not, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>yx\naxy\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>We can, for example, rearrange <code>yx</code> into <code>xy</code> and <code>axy</code> into <code>yxa</code>. Then, <code>xy</code> <var>&lt;</var> <code>yxa</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>ratcode\natlas\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n<p>We can, for example, rearrange <code>ratcode</code> into <code>acdeort</code> and <code>atlas</code> into <code>tslaa</code>. Then, <code>acdeort</code> <var>&lt;</var> <code>tslaa</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>cd\nabc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n<p>No matter how we rearrange <code>cd</code> and <code>abc</code>, we cannot achieve our objective.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>w\nww\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>zzz\nzzz\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03487": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a sequence of positive integers of length <var>N</var>, <var>a = (a_1, a_2, ..., a_N)</var>.\nYour objective is to remove some of the elements in <var>a</var> so that <var>a</var> will be a <strong>good sequence</strong>.</p>\n<p>Here, an sequence <var>b</var> is a <strong>good sequence</strong> when the following condition holds true:</p>\n<ul>\n<li>For each element <var>x</var> in <var>b</var>, the value <var>x</var> occurs exactly <var>x</var> times in <var>b</var>.</li>\n</ul>\n<p>For example, <var>(3, 3, 3)</var>, <var>(4, 2, 4, 1, 4, 2, 4)</var> and <var>()</var> (an empty sequence) are good sequences, while <var>(3, 3, 3, 3)</var> and <var>(2, 4, 1, 4, 2)</var> are not.</p>\n<p>Find the minimum number of elements that needs to be removed so that <var>a</var> will be a good sequence.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>a_i</var> is an integer.</li>\n<li><var>1 \\leq a_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of elements that needs to be removed so that <var>a</var> will be a good sequence.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n3 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>We can, for example, remove one occurrence of <var>3</var>. Then, <var>(3, 3, 3)</var> is a good sequence.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n2 4 1 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p>We can, for example, remove two occurrences of <var>4</var>. Then, <var>(2, 1, 2)</var> is a good sequence.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n1 2 2 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>1\n</pre>\n<p>Remove one occurrence of <var>10^9</var>. Then, <var>()</var> is a good sequence.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>8\n2 7 1 8 2 8 1 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03488": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A robot is put at the origin in a two-dimensional plane.\nInitially, the robot is facing in the positive <var>x</var>-axis direction.</p>\n<p>This robot will be given an instruction sequence <var>s</var>.\n<var>s</var> consists of the following two kinds of letters, and will be executed in order from front to back.</p>\n<ul>\n<li><code>F</code> : Move in the current direction by distance <var>1</var>.</li>\n<li><code>T</code> : Turn <var>90</var> degrees, either clockwise or counterclockwise.</li>\n</ul>\n<p>The objective of the robot is to be at coordinates <var>(x, y)</var> after all the instructions are executed.\nDetermine whether this objective is achievable.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>s</var> consists of <code>F</code> and <code>T</code>.</li>\n<li><var>1 \\leq |s| \\leq 8</var> <var>000</var></li>\n<li><var>x</var> and <var>y</var> are integers.</li>\n<li><var>|x|, |y| \\leq |s|</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n<var>x</var> <var>y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the objective is achievable, print <code>Yes</code>; if it is not, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>FTFFTFFF\n4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>The objective can be achieved by, for example, turning counterclockwise in the first <code>T</code> and turning clockwise in the second <code>T</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>FTFFTFFF\n-2 -2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n<p>The objective can be achieved by, for example, turning clockwise in the first <code>T</code> and turning clockwise in the second <code>T</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>FF\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>TF\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>FFTTFF\n0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>Yes\n</pre>\n<p>The objective can be achieved by, for example, turning counterclockwise in the first <code>T</code> and turning counterclockwise in the second <code>T</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>TTTT\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03489": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a sequence of positive integers of length <var>N</var>, <var>a = (a_1, a_2, ..., a_N)</var>.\nYour objective is to remove some of the elements in <var>a</var> so that <var>a</var> will be a <strong>good sequence</strong>.</p>\n<p>Here, an sequence <var>b</var> is a <strong>good sequence</strong> when the following condition holds true:</p>\n<ul>\n<li>For each element <var>x</var> in <var>b</var>, the value <var>x</var> occurs exactly <var>x</var> times in <var>b</var>.</li>\n</ul>\n<p>For example, <var>(3, 3, 3)</var>, <var>(4, 2, 4, 1, 4, 2, 4)</var> and <var>()</var> (an empty sequence) are good sequences, while <var>(3, 3, 3, 3)</var> and <var>(2, 4, 1, 4, 2)</var> are not.</p>\n<p>Find the minimum number of elements that needs to be removed so that <var>a</var> will be a good sequence.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>a_i</var> is an integer.</li>\n<li><var>1 \\leq a_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of elements that needs to be removed so that <var>a</var> will be a good sequence.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n3 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>We can, for example, remove one occurrence of <var>3</var>. Then, <var>(3, 3, 3)</var> is a good sequence.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n2 4 1 4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<p>We can, for example, remove two occurrences of <var>4</var>. Then, <var>(2, 1, 2)</var> is a good sequence.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n1 2 2 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>1\n</pre>\n<p>Remove one occurrence of <var>10^9</var>. Then, <var>()</var> is a good sequence.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>8\n2 7 1 8 2 8 1 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03490": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A robot is put at the origin in a two-dimensional plane.\nInitially, the robot is facing in the positive <var>x</var>-axis direction.</p>\n<p>This robot will be given an instruction sequence <var>s</var>.\n<var>s</var> consists of the following two kinds of letters, and will be executed in order from front to back.</p>\n<ul>\n<li><code>F</code> : Move in the current direction by distance <var>1</var>.</li>\n<li><code>T</code> : Turn <var>90</var> degrees, either clockwise or counterclockwise.</li>\n</ul>\n<p>The objective of the robot is to be at coordinates <var>(x, y)</var> after all the instructions are executed.\nDetermine whether this objective is achievable.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>s</var> consists of <code>F</code> and <code>T</code>.</li>\n<li><var>1 \\leq |s| \\leq 8</var> <var>000</var></li>\n<li><var>x</var> and <var>y</var> are integers.</li>\n<li><var>|x|, |y| \\leq |s|</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n<var>x</var> <var>y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the objective is achievable, print <code>Yes</code>; if it is not, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>FTFFTFFF\n4 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>The objective can be achieved by, for example, turning counterclockwise in the first <code>T</code> and turning clockwise in the second <code>T</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>FTFFTFFF\n-2 -2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Yes\n</pre>\n<p>The objective can be achieved by, for example, turning clockwise in the first <code>T</code> and turning clockwise in the second <code>T</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>FF\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>TF\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>FFTTFF\n0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>Yes\n</pre>\n<p>The objective can be achieved by, for example, turning counterclockwise in the first <code>T</code> and turning counterclockwise in the second <code>T</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>TTTT\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03491": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For strings <var>s</var> and <var>t</var>, we will say that <var>s</var> and <var>t</var> are <em>prefix-free</em> when neither is a prefix of the other.</p>\n<p>Let <var>L</var> be a positive integer. A set of strings <var>S</var> is a <em>good string set</em> when the following conditions hold true:</p>\n<ul>\n<li>Each string in <var>S</var> has a length between <var>1</var> and <var>L</var> (inclusive) and consists of the characters <code>0</code> and <code>1</code>.</li>\n<li>Any two distinct strings in <var>S</var> are prefix-free.</li>\n</ul>\n<p>We have a good string set <var>S = \\{ s_1, s_2, ..., s_N \\}</var>. Alice and Bob will play a game against each other. They will alternately perform the following operation, starting from Alice:</p>\n<ul>\n<li>Add a new string to <var>S</var>. After addition, <var>S</var> must still be a good string set.</li>\n</ul>\n<p>The first player who becomes unable to perform the operation loses the game. Determine the winner of the game when both players play optimally.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq L \\leq 10^{18}</var></li>\n<li><var>s_1</var>, <var>s_2</var>, ..., <var>s_N</var> are all distinct.</li>\n<li>{ <var>s_1</var>, <var>s_2</var>, ..., <var>s_N</var> } is a good string set.</li>\n<li><var>|s_1| + |s_2| + ... + |s_N| \\leq 10^5</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>L</var>\n<var>s_1</var>\n<var>s_2</var>\n<var>:</var>\n<var>s_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Alice will win, print <code>Alice</code>; if Bob will win, print <code>Bob</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n00\n01\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Alice\n</pre>\n<p>If Alice adds <code>1</code>, Bob will be unable to add a new string.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2\n00\n11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Bob\n</pre>\n<p>There are two strings that Alice can add on the first turn: <code>01</code> and <code>10</code>.\nIn case she adds <code>01</code>, if Bob add <code>10</code>, she will be unable to add a new string.\nAlso, in case she adds <code>10</code>, if Bob add <code>01</code>, she will be unable to add a new string.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 3\n0\n10\n110\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Alice\n</pre>\n<p>If Alice adds <code>111</code>, Bob will be unable to add a new string.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>2 1\n0\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Bob\n</pre>\n<p>Alice is unable to add a new string on the first turn.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>1 2\n11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>Alice\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>2 3\n101\n11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>Bob\n</pre></section>\n</div>\n</span>", "p03492": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a tree with <var>N</var> vertices. The vertices are numbered <var>1</var> through <var>N</var>. The <var>i</var>-th edge (<var>1 \\leq i \\leq N - 1</var>) connects Vertex <var>x_i</var> and <var>y_i</var>. For vertices <var>v</var> and <var>w</var> (<var>1 \\leq v, w \\leq N</var>), we will define the distance between <var>v</var> and <var>w</var> <var>d(v, w)</var> as \"the number of edges contained in the path <var>v</var>-<var>w</var>\".</p>\n<p>A squirrel lives in each vertex of the tree. They are planning to move, as follows. First, they will freely choose a permutation of <var>(1, 2, ..., N)</var>, <var>p = (p_1, p_2, ..., p_N)</var>. Then, for each <var>1 \\leq i \\leq N</var>, the squirrel that lived in Vertex <var>i</var> will move to Vertex <var>p_i</var>.</p>\n<p>Since they like long travels, they have decided to maximize the total distance they traveled during the process. That is, they will choose <var>p</var> so that <var>d(1, p_1) + d(2, p_2) + ... + d(N, p_N)</var> will be maximized. How many such ways are there to choose <var>p</var>, modulo <var>10^9 + 7</var>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 5,000</var></li>\n<li><var>1 \\leq x_i, y_i \\leq N</var></li>\n<li>The input graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>x_2</var> <var>y_2</var>\n<var>:</var>\n<var>x_{N - 1}</var> <var>y_{N - 1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the ways to choose <var>p</var> so that the condition is satisfied, modulo <var>10^9 + 7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The maximum possible distance traveled by squirrels is <var>4</var>.\nThere are three choices of <var>p</var> that achieve it, as follows:</p>\n<ul>\n<li><var>(2, 3, 1)</var></li>\n<li><var>(3, 1, 2)</var></li>\n<li><var>(3, 2, 1)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2\n1 3\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>11\n</pre>\n<p>The maximum possible distance traveled by squirrels is <var>6</var>.\nFor example, <var>p = (2, 1, 4, 3)</var> achieves it.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n1 2\n1 3\n1 4\n2 5\n2 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>36\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7\n1 2\n6 3\n4 5\n1 7\n1 5\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>396\n</pre></section>\n</div>\n</span>", "p03493": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a grid consisting of three squares numbered <var>1</var>, <var>2</var> and <var>3</var>.\nIn each square, either <code>0</code> or <code>1</code> is written. The number written in Square <var>i</var> is <var>s_i</var>.</p>\n<p>Snuke will place a marble on each square that says <code>1</code>.\nFind the number of squares on which Snuke will place a marble.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>Each of <var>s_1</var>, <var>s_2</var> and <var>s_3</var> is either <code>1</code> or <code>0</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s_{1}s_{2}s_{3}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<ul>\n<li>A marble will be placed on Square <var>1</var> and <var>3</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<ul>\n<li>No marble will be placed on any square.</li>\n</ul></section>\n</div>\n</span>", "p03494": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> positive integers written on a blackboard: <var>A_1, ..., A_N</var>.</p>\n<p>Snuke can perform the following operation when all integers on the blackboard are even:</p>\n<ul>\n<li>Replace each integer <var>X</var> on the blackboard by <var>X</var> divided by <var>2</var>.</li>\n</ul>\n<p>Find the maximum possible number of operations that Snuke can perform.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 200</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of operations that Snuke can perform.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n8 12 40\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Initially, <var>[8, 12, 40]</var> are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.</p>\n<p>After the operation is performed once, <var>[4, 6, 20]</var> are written on the blackboard.\nSince all those integers are again even, he can perform the operation.</p>\n<p>After the operation is performed twice, <var>[2, 3, 10]</var> are written on the blackboard.\nNow, there is an odd number <var>3</var> on the blackboard, so he cannot perform the operation any more.</p>\n<p>Thus, Snuke can perform the operation at most twice.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n5 6 8 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Since there is an odd number <var>5</var> on the blackboard already in the beginning, Snuke cannot perform the operation at all.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n382253568 723152896 37802240 379425024 404894720 471526144\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03495": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has <var>N</var> balls. Initially, an integer <var>A_i</var> is written on the <var>i</var>-th ball.</p>\n<p>He would like to rewrite the integer on some balls so that there are at most <var>K</var> different integers written on the <var>N</var> balls.</p>\n<p>Find the minimum number of balls that Takahashi needs to rewrite the integers on them.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N \\leq 200000</var></li>\n<li><var>1 \\leq A_i \\leq N</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of balls that Takahashi needs to rewrite the integers on them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2\n1 1 2 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>For example, if we rewrite the integer on the fifth ball to <var>2</var>, there are two different integers written on the balls: <var>1</var> and <var>2</var>.\nOn the other hand, it is not possible to rewrite the integers on zero balls so that there are at most two different integers written on the balls, so we should print <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4\n1 1 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Already in the beginning, there are two different integers written on the balls, so we do not need to rewrite anything.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 3\n5 1 3 2 4 1 1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03496": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has an integer sequence, <var>a</var>, of length <var>N</var>. The <var>i</var>-th element of <var>a</var> (<var>1</var>-indexed) is <var>a_{i}</var>.</p>\n<p>He can perform the following operation any number of times:</p>\n<ul>\n<li>Operation: Choose integers <var>x</var> and <var>y</var> between <var>1</var> and <var>N</var> (inclusive), and add <var>a_x</var> to <var>a_y</var>.</li>\n</ul>\n<p>He would like to perform this operation between <var>0</var> and <var>2N</var> times (inclusive) so that <var>a</var> satisfies the condition below. Show one such sequence of operations.\nIt can be proved that such a sequence of operations always exists under the constraints in this problem.</p>\n<ul>\n<li>Condition: <var>a_1 \\leq a_2 \\leq ...  \\leq a_{N}</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 50</var></li>\n<li><var>-10^{6} \\leq a_i \\leq 10^{6}</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>m</var> be the number of operations in your solution. In the first line, print <var>m</var>.\nIn the <var>i</var>-th of the subsequent <var>m</var> lines, print the numbers <var>x</var> and <var>y</var> chosen in the <var>i</var>-th operation, with a space in between.\nThe output will be considered correct if <var>m</var> is between <var>0</var> and <var>2N</var> (inclusive) and <var>a</var> satisfies the condition after the <var>m</var> operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n-2 5 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n2 3\n3 3\n</pre>\n<ul>\n<li>After the first operation, <var>a = (-2,5,4)</var>.</li>\n<li>After the second operation, <var>a = (-2,5,8)</var>, and the condition is now satisfied.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n-1 -3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n2 1\n</pre>\n<ul>\n<li>After the first operation, <var>a = (-4,-3)</var> and the condition is now satisfied.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n0 0 0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<ul>\n<li>The condition is satisfied already in the beginning.</li>\n</ul></section>\n</div>\n</span>", "p03497": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has <var>N</var> balls. Initially, an integer <var>A_i</var> is written on the <var>i</var>-th ball.</p>\n<p>He would like to rewrite the integer on some balls so that there are at most <var>K</var> different integers written on the <var>N</var> balls.</p>\n<p>Find the minimum number of balls that Takahashi needs to rewrite the integers on them.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N \\leq 200000</var></li>\n<li><var>1 \\leq A_i \\leq N</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of balls that Takahashi needs to rewrite the integers on them.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2\n1 1 2 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>For example, if we rewrite the integer on the fifth ball to <var>2</var>, there are two different integers written on the balls: <var>1</var> and <var>2</var>.\nOn the other hand, it is not possible to rewrite the integers on zero balls so that there are at most two different integers written on the balls, so we should print <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4\n1 1 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Already in the beginning, there are two different integers written on the balls, so we do not need to rewrite anything.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 3\n5 1 3 2 4 1 1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03498": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has an integer sequence, <var>a</var>, of length <var>N</var>. The <var>i</var>-th element of <var>a</var> (<var>1</var>-indexed) is <var>a_{i}</var>.</p>\n<p>He can perform the following operation any number of times:</p>\n<ul>\n<li>Operation: Choose integers <var>x</var> and <var>y</var> between <var>1</var> and <var>N</var> (inclusive), and add <var>a_x</var> to <var>a_y</var>.</li>\n</ul>\n<p>He would like to perform this operation between <var>0</var> and <var>2N</var> times (inclusive) so that <var>a</var> satisfies the condition below. Show one such sequence of operations.\nIt can be proved that such a sequence of operations always exists under the constraints in this problem.</p>\n<ul>\n<li>Condition: <var>a_1 \\leq a_2 \\leq ...  \\leq a_{N}</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 50</var></li>\n<li><var>-10^{6} \\leq a_i \\leq 10^{6}</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>m</var> be the number of operations in your solution. In the first line, print <var>m</var>.\nIn the <var>i</var>-th of the subsequent <var>m</var> lines, print the numbers <var>x</var> and <var>y</var> chosen in the <var>i</var>-th operation, with a space in between.\nThe output will be considered correct if <var>m</var> is between <var>0</var> and <var>2N</var> (inclusive) and <var>a</var> satisfies the condition after the <var>m</var> operations.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n-2 5 -1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n2 3\n3 3\n</pre>\n<ul>\n<li>After the first operation, <var>a = (-2,5,4)</var>.</li>\n<li>After the second operation, <var>a = (-2,5,8)</var>, and the condition is now satisfied.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n-1 -3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n2 1\n</pre>\n<ul>\n<li>After the first operation, <var>a = (-4,-3)</var> and the condition is now satisfied.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n0 0 0 0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<ul>\n<li>The condition is satisfied already in the beginning.</li>\n</ul></section>\n</div>\n</span>", "p03499": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a rooted tree with <var>N+1</var> vertices.\nThe vertices are numbered <var>0</var> through <var>N</var>, and Vertex <var>0</var> is the root of the tree.\nThe parent of Vertex <var>i</var> <var>(1 \\leq i \\leq N)</var> is Vertex <var>p_i</var>.</p>\n<p>Besides this tree, Snuke also has an box which is initially empty and many marbles, and playing with them.\nThe play begins with placing one marble on some of the vertices, then proceeds as follows:</p>\n<ol>\n<li>If there is a marble on Vertex <var>0</var>, move the marble into the box.</li>\n<li>Move each marble from the vertex to its parent (all at once).</li>\n<li>For each vertex occupied by two or more marbles, remove all the marbles from the vertex.</li>\n<li>If there exists a vertex with some marbles, go to Step 1. Otherwise, end the play.</li>\n</ol>\n<p>There are <var>2^{N+1}</var> ways to place marbles on some of the vertices.\nFor each of them, find <strong>the number of marbles that will be in the box at the end of the play</strong>, and compute the sum of all those numbers modulo <var>1,000,000,007</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N &lt; 2 \\times 10^{5}</var></li>\n<li><var>0 \\leq p_i &lt; i</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Scores</h3><ul>\n<li>In the test set worth <var>400</var> points, <var>N &lt; 2{,}000</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>p_1</var> <var>p_2</var> <var>...</var> <var>p_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n0 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>When we place a marble on both Vertex <var>1</var> and <var>2</var>, there will be multiple marbles on Vertex <var>0</var> by step 2. In such a case, these marbles will be removed instead of being moved to the box.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n0 1 1 0 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>96\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>31\n0 1 0 2 4 0 4 1 6 4 3 9 7 3 7 2 15 6 12 10 12 16 5 3 20 1 25 20 23 24 23\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>730395550\n</pre>\n<p>Be sure to compute the sum modulo <var>1,000,000,007</var>.</p></section>\n</div>\n</span>", "p03500": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> non-negative integers written on the blackboard: <var>A_1, ..., A_N</var>.</p>\n<p>Snuke can perform the following two operations at most <var>K</var> times in total in any order:</p>\n<ul>\n<li>Operation A: Replace each integer <var>X</var> on the blackboard with <var>X</var> divided by <var>2</var>, rounded down to the nearest integer.</li>\n<li>Operation B: Replace each integer <var>X</var> on the blackboard with <var>X</var> minus <var>1</var>. This operation cannot be performed if one or more <var>0</var>s are written on the blackboard.</li>\n</ul>\n<p>Find the number of the different possible combinations of integers written on the blackboard after Snuke performs the operations, modulo <var>1,000,000,007</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 200</var></li>\n<li><var>1 \\leq A_i \\leq 10^{18}</var></li>\n<li><var>1 \\leq K \\leq 10^{18}</var></li>\n<li><var>A_i</var> and <var>K</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the different possible combinations of integers written on the blackboard after Snuke performs the operations, modulo <var>1,000,000,007</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n5 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<p>There are six possible combinations of integers on the blackboard: <var>(1, 1)</var>, <var>(1, 2)</var>, <var>(2, 3)</var>, <var>(3, 5)</var>, <var>(4, 6)</var> and <var>(5, 7)</var>.\nFor example, <var>(1, 2)</var> can be obtained by performing Operation A and Operation B in this order.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4\n10 13 22\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>20\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1 100\n10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>11\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 123456789012345678\n228344079825412349 478465001534875275 398048921164061989 329102208281783917 779698519704384319 617456682030809556 561259383338846380 254083246422083141 458181156833851984 502254767369499613\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>164286011\n</pre></section>\n</div>\n</span>", "p03502": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>An integer <var>X</var> is called a Harshad number if <var>X</var> is divisible by <var>f(X)</var>, where <var>f(X)</var> is the sum of the digits in <var>X</var> when written in base <var>10</var>.</p>\n<p>Given an integer <var>N</var>, determine whether it is a Harshad number.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1?N?10^8</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Yes</code> if <var>N</var> is a Harshad number; print <code>No</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><var>f(12)=1+2=3</var>. Since <var>12</var> is divisible by <var>3</var>, <var>12</var> is a Harshad number.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>57\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p><var>f(57)=5+7=12</var>. Since <var>57</var> is not divisible by <var>12</var>, <var>12</var> is not a Harshad number.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>148\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03517": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Ringo has an undirected graph <var>G</var> with <var>N</var> vertices numbered <var>1,2,...,N</var> and <var>M</var> edges numbered <var>1,2,...,M</var>.\nEdge <var>i</var> connects Vertex <var>a_{i}</var> and <var>b_{i}</var> and has a length of <var>w_i</var>.</p>\n<p>Now, he is in the middle of painting these <var>N</var> vertices in <var>K</var> colors numbered <var>1,2,...,K</var>. Vertex <var>i</var> is already painted in Color <var>c_i</var>, except when <var>c_i = 0</var>, in which case Vertex <var>i</var> is not yet painted.</p>\n<p>After he paints each vertex that is not yet painted in one of the <var>K</var> colors, he will give <var>G</var> to Snuke.</p>\n<p>Based on <var>G</var>, Snuke will make another undirected graph <var>G'</var> with <var>K</var> vertices numbered <var>1,2,...,K</var> and <var>M</var> edges.\nInitially, there is no edge in <var>G'</var>. The <var>i</var>-th edge will be added as follows:</p>\n<ul>\n<li>Let <var>x</var> and <var>y</var> be the colors of the two vertices connected by Edge <var>i</var> in <var>G</var>.</li>\n<li>Add an edge of length <var>w_i</var> connecting Vertex <var>x</var> and <var>y</var> in <var>G'</var>.</li>\n</ul>\n<p>What is the minimum possible sum of the lengths of the edges in the minimum spanning tree of <var>G'</var>? If <var>G'</var> will not be connected regardless of how Ringo paints the vertices, print <var>-1</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 10^{5}</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n<li><var>0 \\leq c_i \\leq K</var></li>\n<li><var>1 \\leq a_i,b_i \\leq N</var></li>\n<li><var>1 \\leq w_i \\leq 10^{9}</var></li>\n<li>The given graph may NOT be simple or connected.</li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Scores</h3><ul>\n<li>In the test set worth <var>100</var> points, <var>N = K</var> and <var>c_i = i</var>.</li>\n<li>In the test set worth another <var>100</var> points, <var>c_i \\neq 0</var>.</li>\n<li>In the test set worth another <var>200</var> points, <var>c_i = 0</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>K</var>\n<var>c_1</var> <var>c_2</var> <var>...</var> <var>c_{N}</var>\n<var>a_1</var> <var>b_1</var> <var>w_1</var>\n<var>:</var>\n<var>a_M</var> <var>b_M</var> <var>w_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 3 3\n1 0 1 2\n1 2 10\n2 3 20\n2 4 50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>60\n</pre>\n<p><var>G'</var> will only be connected when Vertex <var>2</var> is painted in Color <var>3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 2 4\n0 0 0 0 0\n1 2 10\n2 3 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>Regardless of how Ringo paints the vertices, two edges is not enough to connect four vertices as one.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9 12 9\n1 2 3 4 5 6 7 8 9\n6 9 9\n8 9 6\n6 7 85\n9 5 545631016\n2 1 321545\n1 6 33562944\n7 3 84946329\n9 7 15926167\n4 7 53386480\n5 8 70476\n4 6 4549\n4 8 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>118901402\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>18 37 12\n5 0 4 10 8 7 2 10 6 0 9 12 12 11 11 11 0 1\n17 1 1\n11 16 7575\n11 15 9\n10 10 289938980\n5 10 17376\n18 4 1866625\n8 11 959154208\n18 13 200\n16 13 2\n2 7 982223\n12 12 9331\n13 12 8861390\n14 13 743\n2 10 162440\n2 4 981849\n7 9 1\n14 17 2800\n2 7 7225452\n3 7 85\n5 17 4\n2 13 1\n10 3 45\n1 15 973\n14 7 56553306\n16 17 70476\n7 18 9\n9 13 27911\n18 14 7788322\n11 11 8925\n9 13 654295\n2 10 9\n10 1 545631016\n3 4 5\n17 12 1929\n2 11 57\n1 5 4\n1 17 7807368\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>171\n</pre></section>\n</div>\n</span>", "p03519": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given two sequences <var>a</var> and <var>b</var>, both of length <var>2N</var>. The <var>i</var>-th elements in <var>a</var> and <var>b</var> are <var>a_i</var> and <var>b_i</var>, respectively.\nUsing these sequences, Snuke is doing the job of calculating the <em>beauty</em> of pairs of <strong>balanced sequences of parentheses</strong> (defined below) of length <var>2N</var>.\nThe beauty of a pair <var>(s,t)</var> is calculated as follows:</p>\n<ul>\n<li>Let <var>X=0</var>.</li>\n<li>For each <var>i</var> between <var>1</var> and <var>2N</var> (inclusive), increment <var>X</var> by <var>a_i</var> if <var>s_i = t_i</var>, and increment <var>X</var> by <var>b_i</var> otherwise.</li>\n<li>The beauty of <var>(s,t)</var> is the final value of <var>X</var>.</li>\n</ul>\n<p>You will be given <var>Q</var> queries. Process them in order.\nIn the <var>i</var>-th query, update the value of <var>a_{p_i}</var> to <var>x_i</var>, and the value of <var>b_{p_i}</var> to <var>y_i</var>. Then, find the maximum possible beauty of a pair of balanced sequences of parentheses.</p>\n<p>In this problem, only the sequences below are defined to be balanced sequences of parentheses.</p>\n<ul>\n<li>An empty string</li>\n<li>The concatenation of <code>(</code>, <var>s</var>, <code>)</code> in this order, where <var>s</var> is a balanced sequence of parentheses</li>\n<li>The concatenation of <var>s</var>, <var>t</var> in this order, where <var>s</var> and <var>t</var> are balanced sequences of parentheses</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,Q \\leq 10^{5}</var></li>\n<li><var>-10^{9} \\leq a_i,b_i,x_i,y_i \\leq 10^{9}</var></li>\n<li><var>1 \\leq p_i \\leq 2N</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Scores</h3><ul>\n<li>In the test set worth <var>200</var> points, <var>N \\leq 5</var> and <var>Q \\leq 10</var>.</li>\n<li>In the test set worth <var>300</var> points, <var>Q = 1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_{2N}</var>\n<var>b_1</var> <var>b_2</var> <var>...</var> <var>b_{2N}</var>\n<var>p_1</var> <var>x_1</var> <var>y_1</var>\n<var>:</var>\n<var>p_Q</var> <var>x_Q</var> <var>y_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines. The <var>i</var>-th line should contain the response to the <var>i</var>-th query.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n1 1 7 3\n4 2 3 3\n2 4 6\n3 2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>15\n15\n</pre>\n<ul>\n<li>The first query updates <var>a</var> and <var>b</var> to <var>a=(1,4,7,3),b=(4,6,3,3)</var>. The maximum possible beauty is <var>15</var> for <var>(s,t) =(</var><code>()()</code>,<code>()()</code><var>)</var>.</li>\n<li>The second query updates <var>a</var> and <var>b</var> to <var>a=(1,4,2,3),b=(4,6,5,3)</var>. The maximum possible beauty is <var>15</var> for <var>(s,t) =(</var><code>()()</code>,<code>(())</code><var>)</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7 7\n34 -20 -27 42 44 29 9 11 20 44 27 19 -31 -29\n46 -50 -11 20 28 46 12 13 33 -22 -48 -27 35 -17\n7 27 34\n12 -2 22\n4 -50 -12\n3 -32 15\n8 -7 23\n3 -30 11\n4 -2 23\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>311\n312\n260\n286\n296\n292\n327\n</pre></section>\n</div>\n</span>", "p03523": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var>.</p>\n<p>Takahashi can insert the character <code>A</code> at any position in this string any number of times.</p>\n<p>Can he change <var>S</var> into <code>AKIHABARA</code>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 50</var></li>\n<li><var>S</var> consists of uppercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to change <var>S</var> into <code>AKIHABARA</code>, print <code>YES</code>; otherwise, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>KIHBR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>Insert one <code>A</code> at each of the four positions: the beginning, immediately after <code>H</code>, immediately after <code>B</code> and the end.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>AKIBAHARA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n<p>The correct spell is <code>AKIHABARA</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>AAKIAHBAARA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p03524": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a string <var>S</var> consisting of three kinds of letters: <code>a</code>, <code>b</code> and <code>c</code>.</p>\n<p>He has a phobia for palindromes, and wants to permute the characters in <var>S</var> so that <var>S</var> will not contain a palindrome of length <var>2</var> or more as a substring. Determine whether this is possible.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10^5</var></li>\n<li><var>S</var> consists of <code>a</code>, <code>b</code> and <code>c</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the objective is achievable, print <code>YES</code>; if it is unachievable, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abac\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>As it stands now, <var>S</var> contains a palindrome <code>aba</code>, but we can permute the characters to get <code>acba</code>, for example, that does not contain a palindrome of length <var>2</var> or more.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>aba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>babacccabab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>YES\n</pre></section>\n</div>\n</span>", "p03525": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In CODE FESTIVAL XXXX, there are <var>N+1</var> participants from all over the world, including Takahashi.</p>\n<p>Takahashi checked and found that the <em>time gap</em> (defined below) between the local times in his city and the <var>i</var>-th person's city was <var>D_i</var> hours.\nThe time gap between two cities is defined as follows. For two cities A and B, if the local time in city B is <var>d</var> o'clock at the moment when the local time in city A is <var>0</var> o'clock, then the time gap between these two cities is defined to be <var>min(d,24-d)</var> hours.\nHere, we are using <var>24</var>-hour notation.\nThat is, the local time in the <var>i</var>-th person's city is either <var>d</var> o'clock or <var>24-d</var> o'clock at the moment when the local time in Takahashi's city is <var>0</var> o'clock, for example.</p>\n<p>Then, for each pair of two people chosen from the <var>N+1</var> people, he wrote out the time gap between their cities. Let the smallest time gap among them be <var>s</var> hours.</p>\n<p>Find the maximum possible value of <var>s</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>0 \\leq D_i \\leq 12</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>D_1</var> <var>D_2</var> <var>...</var> <var>D_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible value of <var>s</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n7 12 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>For example, consider the situation where it is <var>7</var>, <var>12</var> and <var>16</var> o'clock in each person's city at the moment when it is <var>0</var> o'clock in Takahashi's city. In this case, the time gap between the second and third persons' cities is <var>4</var> hours.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n11 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>Note that Takahashi himself is also a participant.</p></section>\n</div>\n</span>", "p03526": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In the final of CODE FESTIVAL in some year, there are <var>N</var> participants.\nThe <em>height</em> and <em>power</em> of Participant <var>i</var> is <var>H_i</var> and <var>P_i</var>, respectively.</p>\n<p>Ringo is hosting a game of stacking zabuton (cushions).</p>\n<p>The participants will line up in a row in some order, and they will in turn try to add zabuton to the stack of zabuton.\nInitially, the stack is empty.\nWhen it is Participant <var>i</var>'s turn, if there are <var>H_i</var> or less zabuton already stacked, he/she will add exactly <var>P_i</var> zabuton to the stack. Otherwise, he/she will give up and do nothing.</p>\n<p>Ringo wants to maximize the number of participants who can add zabuton to the stack.\nHow many participants can add zabuton to the stack in the optimal order of participants?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 5000</var></li>\n<li><var>0 \\leq H_i \\leq 10^9</var></li>\n<li><var>1 \\leq P_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>H_1</var> <var>P_1</var>\n<var>H_2</var> <var>P_2</var>\n<var>:</var>\n<var>H_N</var> <var>P_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of participants who can add zabuton to the stack.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n0 2\n1 3\n3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>When the participants line up in the same order as the input, Participants <var>1</var> and <var>3</var> will be able to add zabuton.</p>\n<p>On the other hand, there is no order such that all three participants can add zabuton. Thus, the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n2 4\n3 1\n4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>When the participants line up in the order <var>2</var>, <var>3</var>, <var>1</var>, all of them will be able to add zabuton.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n1 3\n8 4\n8 3\n9 1\n6 4\n2 3\n4 2\n9 2\n8 3\n0 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03528": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Select any integer <var>N</var> between <var>1000</var> and <var>2000</var> (inclusive), and any integer <var>K</var> not less than <var>1</var>, then solve the problem below.</p>\n<h4>Problem</h4>\n<p>We have <var>N</var> sheets of paper.\nWrite <var>K</var> integers on each of them to satisfy the following conditions:</p>\n<ul>\n<li>Each integer written must be between <var>1</var> and <var>N</var> (inclusive).</li>\n<li>The <var>K</var> integers written on the same sheet must be all different.</li>\n<li>Each of the integers between <var>1</var> and <var>N</var> must be written on exactly <var>K</var> sheets.</li>\n<li>For any two sheet, there is exactly one integer that appears on both.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>There is no input in this problem.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>In the first line, print <var>N</var> and <var>K</var> separated by a space.</p>\n<p>In the subsequent <var>N</var> lines, print your solution.\nThe <var>i</var>-th of these lines must contain the <var>K</var> integers written on the <var>i</var>-th sheet, with spaces in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Output</h3><pre>3 2\n1 2\n2 3\n3 1\n</pre>\n<p>This is an example of a solution for <var>N = 3</var> and <var>K = 2</var>.</p>\n<p>Note that this output will be judged as incorrect, since the constraint on <var>N</var> is not satisfied.</p></section>\n</div>\n</span>", "p03529": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Consider the following game:</p>\n<ul>\n<li>The game is played using a row of <var>N</var> squares and many stones.</li>\n<li>First, <var>a_i</var> stones are put in Square <var>i\\ (1 \\leq i \\leq N)</var>.</li>\n<li>A player can perform the following operation as many time as desired: \"Select an integer <var>i</var> such that Square <var>i</var> contains exactly <var>i</var> stones. Remove all the stones from Square <var>i</var>, and add one stone to each of the <var>i-1</var> squares from Square <var>1</var> to Square <var>i-1</var>.\"</li>\n<li>The final score of the player is the total number of the stones remaining in the squares.</li>\n</ul>\n<p>For a sequence <var>a</var> of length <var>N</var>, let <var>f(a)</var> be the minimum score that can be obtained when the game is played on <var>a</var>.</p>\n<p>Find the sum of <var>f(a)</var> over all sequences <var>a</var> of length <var>N</var> where each element is between <var>0</var> and <var>K</var> (inclusive).\nSince it can be extremely large, find the answer modulo <var>1000000007 (= 10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of <var>f(a)</var> modulo <var>1000000007 (= 10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>There are nine sequences of length <var>2</var> where each element is between <var>0</var> and <var>2</var>. For each of them, the value of <var>f(a)</var> and how to achieve it is as follows:</p>\n<ul>\n<li><var>f(\\{0,0\\})</var>: <var>0</var> (Nothing can be done)</li>\n<li><var>f(\\{0,1\\})</var>: <var>1</var> (Nothing can be done)</li>\n<li><var>f(\\{0,2\\})</var>: <var>0</var> (Select Square <var>2</var>, then Square <var>1</var>)</li>\n<li><var>f(\\{1,0\\})</var>: <var>0</var> (Select Square <var>1</var>)</li>\n<li><var>f(\\{1,1\\})</var>: <var>1</var> (Select Square <var>1</var>)</li>\n<li><var>f(\\{1,2\\})</var>: <var>0</var> (Select Square <var>1</var>, Square <var>2</var>, then Square <var>1</var>)</li>\n<li><var>f(\\{2,0\\})</var>: <var>2</var> (Nothing can be done)</li>\n<li><var>f(\\{2,1\\})</var>: <var>3</var> (Nothing can be done)</li>\n<li><var>f(\\{2,2\\})</var>: <var>3</var> (Select Square <var>2</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>20 17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>983853488\n</pre></section>\n</div>\n</span>", "p03530": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In some place in the Arctic Ocean, there are <var>H</var> rows and <var>W</var> columns of ice pieces floating on the sea.\nWe regard this area as a grid, and denote the square at the <var>i</var>-th row and <var>j</var>-th column as Square <var>(i,j)</var>.\nThe ice piece floating in each square is either thin ice or an iceberg, and a penguin lives in one of the squares that contain thin ice.\nThere are no ice pieces floating outside the grid.</p>\n<p>The ice piece at Square <var>(i,j)</var> is represented by the character <var>S_{i,j}</var>.\n<var>S_{i,j}</var> is <code>+</code>, <code>#</code> or <code>P</code>, each of which means the following:</p>\n<ul>\n<li><code>+</code>: Occupied by thin ice.</li>\n<li><code>#</code>: Occupied by an iceberg.</li>\n<li><code>P</code>: Occupied by thin ice. The penguin lives here.</li>\n</ul>\n<p>When summer comes, unstable thin ice that is not held between some pieces of ice collapses one after another.\nFormally, thin ice at Square <var>(i,j)</var> will collapse when it does NOT satisfy either of the following conditions:</p>\n<ul>\n<li>Both Square <var>(i-1,j)</var> and Square <var>(i+1,j)</var> are occupied by an iceberg or uncollapsed thin ice.</li>\n<li>Both Square <var>(i,j-1)</var> and Square <var>(i,j+1)</var> are occupied by an iceberg or uncollapsed thin ice.</li>\n</ul>\n<p>When a collapse happens, it may cause another. Note that icebergs do not collapse.</p>\n<p>Now, a mischievous tourist comes here. He will do a little work so that, when summer comes, the thin ice inhabited by the penguin will collapse.\nHe can smash an iceberg with a hammer to turn it to thin ice.\nAt least how many icebergs does he need to smash?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 40</var></li>\n<li><var>S_{i,j}</var> is <code>+</code>, <code>#</code> or <code>P</code>.</li>\n<li><var>S</var> contains exactly one <code>P</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>S_{1,1}</var><var>S_{1,2}</var><var>...</var><var>S_{1,W}</var>\n<var>S_{2,1}</var><var>S_{2,2}</var><var>...</var><var>S_{2,W}</var>\n<var>:</var>\n<var>S_{H,1}</var><var>S_{H,2}</var><var>...</var><var>S_{H,W}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of icebergs that needs to be changed to thin ice in order to cause the collapse of the thin ice inhabited by the penguin when summer comes.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n+#+\n#P#\n+#+\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, when the right and bottom icebergs are changed to thin ice, collapses happen as follows:</p>\n<pre>+#+    .#.    .#.    .#.\n#P+ -&gt; #P+ -&gt; #P. -&gt; #..\n+++    .+.    ...    ...\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 6\n#+++++\n+++#++\n#+++++\n+++P+#\n+##+++\n++++#+\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>40 40\n#++#+++++#+#+#+##+++++++##+#+++#++##++##\n+##++++++++++#+###+##++++#+++++++++#++##\n+++#+++++#++#++####+++#+#+###+++##+++#++\n+++#+######++##+#+##+#+++#+++++++++#++#+\n+++##+#+#++#+++#++++##+++++++++#++#+#+#+\n#++#+++#+#++++##+#+#+++##+#+##+#++++##++\n++#+##+++#++####+#++##++#+++#+#+#++++#++\n+#+###++++++##++++++#++##+#####++#++##++\n##+##+#+++#+#+##++#+###+######++++#+###+\n+++#+++##+#####+#+#++++#+#+++++#+##++##+\n#+++#+##+++++++#++#++++++++++###+#++#+#+\n##+++##++#+++++#++++#++#+##++#+#+#++##+#\n##+++#+###+++++##++#+#+++####+#+++++#+++\n+++#++#++#+++++++++#++###++++++++###+##+\n++#+++#++++++#####++##++#+++#+++++#++++#\n++#++#+##++++#####+###+++####+#+#+######\n++++++##+++++##+++++#++###++#++##+++++++\n+#++++##++++++#++++#+#++++#++++##+++##+#\n+++++++#+#++##+##+#+++++++###+###++##+++\n++++++#++###+#+#+++##+#++++++#++#+#++#+#\n##+##++++++#+++++#++#+#++##+++#+#+++##+#\n#+++#+#+##+#+##++#P#++#++++++##++#+#++##\n#+++#++##+##+#++++#++#++##++++++#+#+#+++\n++++####+#++#####+++#+###+#++###++++#++#\n#+#++####++##++#+#+#+##+#+#+##++++##++#+\n+###+###+#+##+++#++++++#+#++++###+#+++++\n+++#+++++#+++#+++++##++++++++###++#+#+++\n+#+#++#+#++++++###+#++##+#+##+##+#+#####\n#++++++++#+#+###+######++#++#+++++++++++\n##+++##+#+#++#++#++#++++++#++##+#+#++###\n+#+#+#+++++++#+++++++######+##++#++##+##\n++#+++#+###+#++###+++#+++#+#++++#+###+++\n#+#+###++#+#####+++++#+####++#++#+###+++\n+#+##+#++#++##+++++++######++#++++++++++\n+####+#+#+++++##+#+#++#+#++#+++##++++#+#\n#++##++#+#+++++##+#++++####+++++###+#+#+\n##+#++#++#+##+#+#++##++###+###+#+++++##+\n##++###+###+#+#++#++#########+++###+#+##\n+++#+++#++++++++++#+#+++#++#++###+####+#\n++##+###+++++++##+++++#++#++++++++++++++\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>151\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1 1\nP\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03533": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var>.</p>\n<p>Takahashi can insert the character <code>A</code> at any position in this string any number of times.</p>\n<p>Can he change <var>S</var> into <code>AKIHABARA</code>?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 50</var></li>\n<li><var>S</var> consists of uppercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to change <var>S</var> into <code>AKIHABARA</code>, print <code>YES</code>; otherwise, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>KIHBR\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>Insert one <code>A</code> at each of the four positions: the beginning, immediately after <code>H</code>, immediately after <code>B</code> and the end.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>AKIBAHARA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n<p>The correct spell is <code>AKIHABARA</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>AAKIAHBAARA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p03532": "<span class=\"lang-en\">\n<p>Score : <var>1900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Ringo has a tree with <var>N</var> vertices.\nThe <var>i</var>-th of the <var>N-1</var> edges in this tree connects Vertex <var>A_i</var> and Vertex <var>B_i</var> and has a weight of <var>C_i</var>.\nAdditionally, Vertex <var>i</var> has a weight of <var>X_i</var>.</p>\n<p>Here, we define <var>f(u,v)</var> as the distance between Vertex <var>u</var> and Vertex <var>v</var>, plus <var>X_u + X_v</var>.</p>\n<p>We will consider a complete graph <var>G</var> with <var>N</var> vertices.\nThe cost of its edge that connects Vertex <var>u</var> and Vertex <var>v</var> is <var>f(u,v)</var>.\nFind the minimum spanning tree of <var>G</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200,000</var></li>\n<li><var>1 \\leq X_i \\leq 10^9</var></li>\n<li><var>1 \\leq A_i,B_i \\leq N</var></li>\n<li><var>1 \\leq C_i \\leq 10^9</var></li>\n<li>The given graph is a tree.</li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>X_2</var> <var>...</var> <var>X_N</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var>\n<var>A_2</var> <var>B_2</var> <var>C_2</var>\n<var>:</var>\n<var>A_{N-1}</var> <var>B_{N-1}</var> <var>C_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the cost of the minimum spanning tree of <var>G</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 3 5 1\n1 2 1\n2 3 2\n3 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>22\n</pre>\n<p>We connect the following pairs: Vertex <var>1</var> and <var>2</var>, Vertex <var>1</var> and <var>4</var>, Vertex <var>3</var> and <var>4</var>. The costs are <var>5</var>, <var>8</var> and <var>9</var>, respectively, for a total of <var>22</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n44 23 31 29 32 15\n1 2 10\n1 3 12\n1 4 16\n4 5 8\n4 6 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>359\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1000000000 1000000000\n2 1 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3000000000\n</pre></section>\n</div>\n</span>", "p03534": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has a string <var>S</var> consisting of three kinds of letters: <code>a</code>, <code>b</code> and <code>c</code>.</p>\n<p>He has a phobia for palindromes, and wants to permute the characters in <var>S</var> so that <var>S</var> will not contain a palindrome of length <var>2</var> or more as a substring. Determine whether this is possible.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10^5</var></li>\n<li><var>S</var> consists of <code>a</code>, <code>b</code> and <code>c</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the objective is achievable, print <code>YES</code>; if it is unachievable, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abac\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>As it stands now, <var>S</var> contains a palindrome <code>aba</code>, but we can permute the characters to get <code>acba</code>, for example, that does not contain a palindrome of length <var>2</var> or more.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>aba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>babacccabab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>YES\n</pre></section>\n</div>\n</span>", "p03535": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In CODE FESTIVAL XXXX, there are <var>N+1</var> participants from all over the world, including Takahashi.</p>\n<p>Takahashi checked and found that the <em>time gap</em> (defined below) between the local times in his city and the <var>i</var>-th person's city was <var>D_i</var> hours.\nThe time gap between two cities is defined as follows. For two cities A and B, if the local time in city B is <var>d</var> o'clock at the moment when the local time in city A is <var>0</var> o'clock, then the time gap between these two cities is defined to be <var>min(d,24-d)</var> hours.\nHere, we are using <var>24</var>-hour notation.\nThat is, the local time in the <var>i</var>-th person's city is either <var>d</var> o'clock or <var>24-d</var> o'clock at the moment when the local time in Takahashi's city is <var>0</var> o'clock, for example.</p>\n<p>Then, for each pair of two people chosen from the <var>N+1</var> people, he wrote out the time gap between their cities. Let the smallest time gap among them be <var>s</var> hours.</p>\n<p>Find the maximum possible value of <var>s</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>0 \\leq D_i \\leq 12</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>D_1</var> <var>D_2</var> <var>...</var> <var>D_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible value of <var>s</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n7 12 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>For example, consider the situation where it is <var>7</var>, <var>12</var> and <var>16</var> o'clock in each person's city at the moment when it is <var>0</var> o'clock in Takahashi's city. In this case, the time gap between the second and third persons' cities is <var>4</var> hours.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n11 11\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>Note that Takahashi himself is also a participant.</p></section>\n</div>\n</span>", "p03536": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In the final of CODE FESTIVAL in some year, there are <var>N</var> participants.\nThe <em>height</em> and <em>power</em> of Participant <var>i</var> is <var>H_i</var> and <var>P_i</var>, respectively.</p>\n<p>Ringo is hosting a game of stacking zabuton (cushions).</p>\n<p>The participants will line up in a row in some order, and they will in turn try to add zabuton to the stack of zabuton.\nInitially, the stack is empty.\nWhen it is Participant <var>i</var>'s turn, if there are <var>H_i</var> or less zabuton already stacked, he/she will add exactly <var>P_i</var> zabuton to the stack. Otherwise, he/she will give up and do nothing.</p>\n<p>Ringo wants to maximize the number of participants who can add zabuton to the stack.\nHow many participants can add zabuton to the stack in the optimal order of participants?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 5000</var></li>\n<li><var>0 \\leq H_i \\leq 10^9</var></li>\n<li><var>1 \\leq P_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>H_1</var> <var>P_1</var>\n<var>H_2</var> <var>P_2</var>\n<var>:</var>\n<var>H_N</var> <var>P_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum number of participants who can add zabuton to the stack.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n0 2\n1 3\n3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>When the participants line up in the same order as the input, Participants <var>1</var> and <var>3</var> will be able to add zabuton.</p>\n<p>On the other hand, there is no order such that all three participants can add zabuton. Thus, the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n2 4\n3 1\n4 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>When the participants line up in the order <var>2</var>, <var>3</var>, <var>1</var>, all of them will be able to add zabuton.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n1 3\n8 4\n8 3\n9 1\n6 4\n2 3\n4 2\n9 2\n8 3\n0 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03538": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Select any integer <var>N</var> between <var>1000</var> and <var>2000</var> (inclusive), and any integer <var>K</var> not less than <var>1</var>, then solve the problem below.</p>\n<h4>Problem</h4>\n<p>We have <var>N</var> sheets of paper.\nWrite <var>K</var> integers on each of them to satisfy the following conditions:</p>\n<ul>\n<li>Each integer written must be between <var>1</var> and <var>N</var> (inclusive).</li>\n<li>The <var>K</var> integers written on the same sheet must be all different.</li>\n<li>Each of the integers between <var>1</var> and <var>N</var> must be written on exactly <var>K</var> sheets.</li>\n<li>For any two sheet, there is exactly one integer that appears on both.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>There is no input in this problem.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>In the first line, print <var>N</var> and <var>K</var> separated by a space.</p>\n<p>In the subsequent <var>N</var> lines, print your solution.\nThe <var>i</var>-th of these lines must contain the <var>K</var> integers written on the <var>i</var>-th sheet, with spaces in between.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Output</h3><pre>3 2\n1 2\n2 3\n3 1\n</pre>\n<p>This is an example of a solution for <var>N = 3</var> and <var>K = 2</var>.</p>\n<p>Note that this output will be judged as incorrect, since the constraint on <var>N</var> is not satisfied.</p></section>\n</div>\n</span>", "p03539": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Consider the following game:</p>\n<ul>\n<li>The game is played using a row of <var>N</var> squares and many stones.</li>\n<li>First, <var>a_i</var> stones are put in Square <var>i\\ (1 \\leq i \\leq N)</var>.</li>\n<li>A player can perform the following operation as many time as desired: \"Select an integer <var>i</var> such that Square <var>i</var> contains exactly <var>i</var> stones. Remove all the stones from Square <var>i</var>, and add one stone to each of the <var>i-1</var> squares from Square <var>1</var> to Square <var>i-1</var>.\"</li>\n<li>The final score of the player is the total number of the stones remaining in the squares.</li>\n</ul>\n<p>For a sequence <var>a</var> of length <var>N</var>, let <var>f(a)</var> be the minimum score that can be obtained when the game is played on <var>a</var>.</p>\n<p>Find the sum of <var>f(a)</var> over all sequences <var>a</var> of length <var>N</var> where each element is between <var>0</var> and <var>K</var> (inclusive).\nSince it can be extremely large, find the answer modulo <var>1000000007 (= 10^9+7)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq K \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of <var>f(a)</var> modulo <var>1000000007 (= 10^9+7)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>There are nine sequences of length <var>2</var> where each element is between <var>0</var> and <var>2</var>. For each of them, the value of <var>f(a)</var> and how to achieve it is as follows:</p>\n<ul>\n<li><var>f(\\{0,0\\})</var>: <var>0</var> (Nothing can be done)</li>\n<li><var>f(\\{0,1\\})</var>: <var>1</var> (Nothing can be done)</li>\n<li><var>f(\\{0,2\\})</var>: <var>0</var> (Select Square <var>2</var>, then Square <var>1</var>)</li>\n<li><var>f(\\{1,0\\})</var>: <var>0</var> (Select Square <var>1</var>)</li>\n<li><var>f(\\{1,1\\})</var>: <var>1</var> (Select Square <var>1</var>)</li>\n<li><var>f(\\{1,2\\})</var>: <var>0</var> (Select Square <var>1</var>, Square <var>2</var>, then Square <var>1</var>)</li>\n<li><var>f(\\{2,0\\})</var>: <var>2</var> (Nothing can be done)</li>\n<li><var>f(\\{2,1\\})</var>: <var>3</var> (Nothing can be done)</li>\n<li><var>f(\\{2,2\\})</var>: <var>3</var> (Select Square <var>2</var>)</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>20 17\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>983853488\n</pre></section>\n</div>\n</span>", "p03540": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In some place in the Arctic Ocean, there are <var>H</var> rows and <var>W</var> columns of ice pieces floating on the sea.\nWe regard this area as a grid, and denote the square at the <var>i</var>-th row and <var>j</var>-th column as Square <var>(i,j)</var>.\nThe ice piece floating in each square is either thin ice or an iceberg, and a penguin lives in one of the squares that contain thin ice.\nThere are no ice pieces floating outside the grid.</p>\n<p>The ice piece at Square <var>(i,j)</var> is represented by the character <var>S_{i,j}</var>.\n<var>S_{i,j}</var> is <code>+</code>, <code>#</code> or <code>P</code>, each of which means the following:</p>\n<ul>\n<li><code>+</code>: Occupied by thin ice.</li>\n<li><code>#</code>: Occupied by an iceberg.</li>\n<li><code>P</code>: Occupied by thin ice. The penguin lives here.</li>\n</ul>\n<p>When summer comes, unstable thin ice that is not held between some pieces of ice collapses one after another.\nFormally, thin ice at Square <var>(i,j)</var> will collapse when it does NOT satisfy either of the following conditions:</p>\n<ul>\n<li>Both Square <var>(i-1,j)</var> and Square <var>(i+1,j)</var> are occupied by an iceberg or uncollapsed thin ice.</li>\n<li>Both Square <var>(i,j-1)</var> and Square <var>(i,j+1)</var> are occupied by an iceberg or uncollapsed thin ice.</li>\n</ul>\n<p>When a collapse happens, it may cause another. Note that icebergs do not collapse.</p>\n<p>Now, a mischievous tourist comes here. He will do a little work so that, when summer comes, the thin ice inhabited by the penguin will collapse.\nHe can smash an iceberg with a hammer to turn it to thin ice.\nAt least how many icebergs does he need to smash?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq H,W \\leq 40</var></li>\n<li><var>S_{i,j}</var> is <code>+</code>, <code>#</code> or <code>P</code>.</li>\n<li><var>S</var> contains exactly one <code>P</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>S_{1,1}</var><var>S_{1,2}</var><var>...</var><var>S_{1,W}</var>\n<var>S_{2,1}</var><var>S_{2,2}</var><var>...</var><var>S_{2,W}</var>\n<var>:</var>\n<var>S_{H,1}</var><var>S_{H,2}</var><var>...</var><var>S_{H,W}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of icebergs that needs to be changed to thin ice in order to cause the collapse of the thin ice inhabited by the penguin when summer comes.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n+#+\n#P#\n+#+\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, when the right and bottom icebergs are changed to thin ice, collapses happen as follows:</p>\n<pre>+#+    .#.    .#.    .#.\n#P+ -&gt; #P+ -&gt; #P. -&gt; #..\n+++    .+.    ...    ...\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 6\n#+++++\n+++#++\n#+++++\n+++P+#\n+##+++\n++++#+\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>40 40\n#++#+++++#+#+#+##+++++++##+#+++#++##++##\n+##++++++++++#+###+##++++#+++++++++#++##\n+++#+++++#++#++####+++#+#+###+++##+++#++\n+++#+######++##+#+##+#+++#+++++++++#++#+\n+++##+#+#++#+++#++++##+++++++++#++#+#+#+\n#++#+++#+#++++##+#+#+++##+#+##+#++++##++\n++#+##+++#++####+#++##++#+++#+#+#++++#++\n+#+###++++++##++++++#++##+#####++#++##++\n##+##+#+++#+#+##++#+###+######++++#+###+\n+++#+++##+#####+#+#++++#+#+++++#+##++##+\n#+++#+##+++++++#++#++++++++++###+#++#+#+\n##+++##++#+++++#++++#++#+##++#+#+#++##+#\n##+++#+###+++++##++#+#+++####+#+++++#+++\n+++#++#++#+++++++++#++###++++++++###+##+\n++#+++#++++++#####++##++#+++#+++++#++++#\n++#++#+##++++#####+###+++####+#+#+######\n++++++##+++++##+++++#++###++#++##+++++++\n+#++++##++++++#++++#+#++++#++++##+++##+#\n+++++++#+#++##+##+#+++++++###+###++##+++\n++++++#++###+#+#+++##+#++++++#++#+#++#+#\n##+##++++++#+++++#++#+#++##+++#+#+++##+#\n#+++#+#+##+#+##++#P#++#++++++##++#+#++##\n#+++#++##+##+#++++#++#++##++++++#+#+#+++\n++++####+#++#####+++#+###+#++###++++#++#\n#+#++####++##++#+#+#+##+#+#+##++++##++#+\n+###+###+#+##+++#++++++#+#++++###+#+++++\n+++#+++++#+++#+++++##++++++++###++#+#+++\n+#+#++#+#++++++###+#++##+#+##+##+#+#####\n#++++++++#+#+###+######++#++#+++++++++++\n##+++##+#+#++#++#++#++++++#++##+#+#++###\n+#+#+#+++++++#+++++++######+##++#++##+##\n++#+++#+###+#++###+++#+++#+#++++#+###+++\n#+#+###++#+#####+++++#+####++#++#+###+++\n+#+##+#++#++##+++++++######++#++++++++++\n+####+#+#+++++##+#+#++#+#++#+++##++++#+#\n#++##++#+#+++++##+#++++####+++++###+#+#+\n##+#++#++#+##+#+#++##++###+###+#+++++##+\n##++###+###+#+#++#++#########+++###+#+##\n+++#+++#++++++++++#+#+++#++#++###+####+#\n++##+###+++++++##+++++#++#++++++++++++++\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>151\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1 1\nP\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03542": "<span class=\"lang-en\">\n<p>Score : <var>1900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Ringo has a tree with <var>N</var> vertices.\nThe <var>i</var>-th of the <var>N-1</var> edges in this tree connects Vertex <var>A_i</var> and Vertex <var>B_i</var> and has a weight of <var>C_i</var>.\nAdditionally, Vertex <var>i</var> has a weight of <var>X_i</var>.</p>\n<p>Here, we define <var>f(u,v)</var> as the distance between Vertex <var>u</var> and Vertex <var>v</var>, plus <var>X_u + X_v</var>.</p>\n<p>We will consider a complete graph <var>G</var> with <var>N</var> vertices.\nThe cost of its edge that connects Vertex <var>u</var> and Vertex <var>v</var> is <var>f(u,v)</var>.\nFind the minimum spanning tree of <var>G</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 200,000</var></li>\n<li><var>1 \\leq X_i \\leq 10^9</var></li>\n<li><var>1 \\leq A_i,B_i \\leq N</var></li>\n<li><var>1 \\leq C_i \\leq 10^9</var></li>\n<li>The given graph is a tree.</li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>X_1</var> <var>X_2</var> <var>...</var> <var>X_N</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var>\n<var>A_2</var> <var>B_2</var> <var>C_2</var>\n<var>:</var>\n<var>A_{N-1}</var> <var>B_{N-1}</var> <var>C_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the cost of the minimum spanning tree of <var>G</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 3 5 1\n1 2 1\n2 3 2\n3 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>22\n</pre>\n<p>We connect the following pairs: Vertex <var>1</var> and <var>2</var>, Vertex <var>1</var> and <var>4</var>, Vertex <var>3</var> and <var>4</var>. The costs are <var>5</var>, <var>8</var> and <var>9</var>, respectively, for a total of <var>22</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n44 23 31 29 32 15\n1 2 10\n1 3 12\n1 4 16\n4 5 8\n4 6 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>359\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2\n1000000000 1000000000\n2 1 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3000000000\n</pre></section>\n</div>\n</span>", "p03547": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In programming, hexadecimal notation is often used.</p>\n<p>In hexadecimal notation, besides the ten digits <var>0, 1, ..., 9</var>, the six letters <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code> and <code>F</code> are used to represent the values <var>10, 11, 12, 13, 14</var> and <var>15</var>, respectively.</p>\n<p>In this problem, you are given two letters <var>X</var> and <var>Y</var>. Each <var>X</var> and <var>Y</var> is <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code> or <code>F</code>.</p>\n<p>When <var>X</var> and <var>Y</var> are seen as hexadecimal numbers, which is larger?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>Each <var>X</var> and <var>Y</var> is <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code> or <code>F</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>X</var> is smaller, print <code>&lt;</code>; if <var>Y</var> is smaller, print <code>&gt;</code>; if they are equal, print <code>=</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>A B\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>&lt;\n</pre>\n<p><var>10 &lt; 11</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>E C\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>&gt;\n</pre>\n<p><var>14 &gt; 12</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>F F\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>=\n</pre>\n<p><var>15 = 15</var>.</p></section>\n</div>\n</span>", "p03549": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is now competing in a programming contest, but he received TLE in a problem where the answer is <code>YES</code> or <code>NO</code>.</p>\n<p>When he checked the detailed status of the submission, there were <var>N</var> test cases in the problem, and the code received TLE in <var>M</var> of those cases.</p>\n<p>Then, he rewrote the code to correctly solve each of those <var>M</var> cases with <var>1/2</var> probability in <var>1900</var> milliseconds, and correctly solve each of the other <var>N-M</var> cases without fail in <var>100</var> milliseconds.</p>\n<p>Now, he goes through the following process:</p>\n<ul>\n<li>Submit the code.</li>\n<li>Wait until the code finishes execution on all the cases.</li>\n<li>If the code fails to correctly solve some of the <var>M</var> cases, submit it again.</li>\n<li>Repeat until the code correctly solve all the cases in one submission.</li>\n</ul>\n<p>Let the expected value of the total execution time of the code be <var>X</var> milliseconds. Print <var>X</var> (as an integer).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq M \\leq {\\rm min}(N, 5)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>X</var>, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, <var>X</var> is an integer not exceeding <var>10^9</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3800\n</pre>\n<p>In this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with <var>1/2</var> probability in <var>1900</var> milliseconds.</p>\n<p>The code will succeed in one attempt with <var>1/2</var> probability, in two attempts with <var>1/4</var> probability, and in three attempts with <var>1/8</var> probability, and so on.</p>\n<p>Thus, the answer is <var>1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 + ... = 3800</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>18400\n</pre>\n<p>The code will take <var>1900</var> milliseconds in each of the <var>2</var> cases, and <var>100</var> milliseconds in each of the <var>10-2=8</var> cases. The probability of the code correctly solving all the cases is <var>1/2 \\times 1/2 = 1/4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>608000\n</pre></section>\n</div>\n</span>", "p03550": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a deck consisting of <var>N</var> cards. Each card has an integer written on it. The integer on the <var>i</var>-th card from the top is <var>a_i</var>.</p>\n<p>Two people X and Y will play a game using this deck. Initially, X has a card with <var>Z</var> written on it in his hand, and Y has a card with <var>W</var> written on it in his hand. Then, starting from X, they will alternately perform the following action:</p>\n<ul>\n<li>Draw some number of cards from the top of the deck. Then, discard the card in his hand and keep the last drawn card instead. Here, at least one card must be drawn.</li>\n</ul>\n<p>The game ends when there is no more card in the deck. The score of the game is the absolute difference of the integers written on the cards in the two players' hand.</p>\n<p>X will play the game so that the score will be maximized, and Y will play the game so that the score will be minimized. What will be the score of the game?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq N \\leq 2000</var></li>\n<li><var>1 \\leq Z, W, a_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Z</var> <var>W</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the score.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 100 100\n10 1000 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>900\n</pre>\n<p>If X draws two cards first, Y will draw the last card, and the score will be <var>|1000 - 100| = 900</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 100 1000\n10 100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>900\n</pre>\n<p>If X draws all the cards first, the score will be <var>|1000 - 100| = 900</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 1 1\n1 1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1 1 1\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>999999999\n</pre></section>\n</div>\n</span>", "p03551": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is now competing in a programming contest, but he received TLE in a problem where the answer is <code>YES</code> or <code>NO</code>.</p>\n<p>When he checked the detailed status of the submission, there were <var>N</var> test cases in the problem, and the code received TLE in <var>M</var> of those cases.</p>\n<p>Then, he rewrote the code to correctly solve each of those <var>M</var> cases with <var>1/2</var> probability in <var>1900</var> milliseconds, and correctly solve each of the other <var>N-M</var> cases without fail in <var>100</var> milliseconds.</p>\n<p>Now, he goes through the following process:</p>\n<ul>\n<li>Submit the code.</li>\n<li>Wait until the code finishes execution on all the cases.</li>\n<li>If the code fails to correctly solve some of the <var>M</var> cases, submit it again.</li>\n<li>Repeat until the code correctly solve all the cases in one submission.</li>\n</ul>\n<p>Let the expected value of the total execution time of the code be <var>X</var> milliseconds. Print <var>X</var> (as an integer).</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq M \\leq {\\rm min}(N, 5)</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>X</var>, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, <var>X</var> is an integer not exceeding <var>10^9</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3800\n</pre>\n<p>In this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with <var>1/2</var> probability in <var>1900</var> milliseconds.</p>\n<p>The code will succeed in one attempt with <var>1/2</var> probability, in two attempts with <var>1/4</var> probability, and in three attempts with <var>1/8</var> probability, and so on.</p>\n<p>Thus, the answer is <var>1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 + ... = 3800</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>18400\n</pre>\n<p>The code will take <var>1900</var> milliseconds in each of the <var>2</var> cases, and <var>100</var> milliseconds in each of the <var>10-2=8</var> cases. The probability of the code correctly solving all the cases is <var>1/2 \\times 1/2 = 1/4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>100 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>608000\n</pre></section>\n</div>\n</span>", "p03552": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a deck consisting of <var>N</var> cards. Each card has an integer written on it. The integer on the <var>i</var>-th card from the top is <var>a_i</var>.</p>\n<p>Two people X and Y will play a game using this deck. Initially, X has a card with <var>Z</var> written on it in his hand, and Y has a card with <var>W</var> written on it in his hand. Then, starting from X, they will alternately perform the following action:</p>\n<ul>\n<li>Draw some number of cards from the top of the deck. Then, discard the card in his hand and keep the last drawn card instead. Here, at least one card must be drawn.</li>\n</ul>\n<p>The game ends when there is no more card in the deck. The score of the game is the absolute difference of the integers written on the cards in the two players' hand.</p>\n<p>X will play the game so that the score will be maximized, and Y will play the game so that the score will be minimized. What will be the score of the game?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq N \\leq 2000</var></li>\n<li><var>1 \\leq Z, W, a_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Z</var> <var>W</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the score.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 100 100\n10 1000 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>900\n</pre>\n<p>If X draws two cards first, Y will draw the last card, and the score will be <var>|1000 - 100| = 900</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 100 1000\n10 100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>900\n</pre>\n<p>If X draws all the cards first, the score will be <var>|1000 - 100| = 900</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 1 1\n1 1 1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1 1 1\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>999999999\n</pre></section>\n</div>\n</span>", "p03553": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> gemstones labeled <var>1</var> through <var>N</var>.</p>\n<p>You can perform the following operation any number of times (possibly zero).</p>\n<ul>\n<li>Select a positive integer <var>x</var>, and smash all the gems labeled with multiples of <var>x</var>.</li>\n</ul>\n<p>Then, for each <var>i</var>, if the gem labeled <var>i</var> remains without getting smashed, you will receive <var>a_i</var> yen (the currency of Japan).\nHowever, <var>a_i</var> may be negative, in which case you will be charged money.</p>\n<p>By optimally performing the operation, how much yen can you earn?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>|a_i| \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum amount of money that can be earned.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 2 -6 4 5 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>It is optimal to smash Gem <var>3</var> and <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n100 -100 -100 -100 100 -100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>200\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n-1 -2 -3 -4 -5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre>\n<p>It is optimal to smash all the gems.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>2\n-1000 100000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>99000\n</pre></section>\n</div>\n</span>", "p03554": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a sequence <var>a = \\{a_1, ..., a_N\\}</var> with all zeros, and a sequence <var>b = \\{b_1, ..., b_N\\}</var> consisting of <var>0</var> and <var>1</var>. The length of both is <var>N</var>.</p>\n<p>You can perform <var>Q</var> kinds of operations. The <var>i</var>-th operation is as follows:</p>\n<ul>\n<li>Replace each of <var>a_{l_i}, a_{l_i + 1}, ..., a_{r_i}</var> with <var>1</var>.</li>\n</ul>\n<p>Minimize the hamming distance between <var>a</var> and <var>b</var>, that is, the number of <var>i</var> such that <var>a_i \\neq b_i</var>, by performing some of the <var>Q</var> operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 200,000</var></li>\n<li><var>b</var> consists of <var>0</var> and <var>1</var>.</li>\n<li><var>1 \\leq Q \\leq 200,000</var></li>\n<li><var>1 \\leq l_i \\leq r_i \\leq N</var></li>\n<li>If <var>i \\neq j</var>, either <var>l_i \\neq l_j</var> or <var>r_i \\neq r_j</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>b_1</var> <var>b_2</var> <var>...</var> <var>b_N</var>\n<var>Q</var>\n<var>l_1</var> <var>r_1</var>\n<var>l_2</var> <var>r_2</var>\n<var>:</var>\n<var>l_Q</var> <var>r_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible hamming distance.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 0 1\n1\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>If you choose to perform the operation, <var>a</var> will become <var>\\{1, 1, 1\\}</var>, for a hamming distance of <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 0 1\n2\n1 1\n3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>If both operations are performed, <var>a</var> will become <var>\\{1, 0, 1\\}</var>, for a hamming distance of <var>0</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n1 0 1\n2\n1 1\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5\n0 1 0 1 0\n1\n1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>2\n</pre>\n<p>It may be optimal to perform no operation.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>9\n0 1 0 1 1 1 0 1 0\n3\n1 4\n5 8\n6 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 6</h3><pre>15\n1 1 0 0 0 0 0 0 1 0 1 1 1 0 0\n9\n4 10\n13 14\n1 7\n4 14\n9 11\n2 6\n7 8\n3 12\n7 13\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 6</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 7</h3><pre>10\n0 0 0 1 0 0 1 1 1 0\n7\n1 4\n2 5\n1 3\n6 7\n9 9\n1 5\n7 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 7</h3><pre>1\n</pre></section>\n</div>\n</span>", "p03555": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a grid with <var>2</var> rows and <var>3</var> columns of squares.\nThe color of the square at the <var>i</var>-th row and <var>j</var>-th column is represented by the character <var>C_{ij}</var>.</p>\n<p>Write a program that prints <code>YES</code> if this grid remains the same when rotated <var>180</var> degrees, and prints <code>NO</code> otherwise.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>C_{i,j}(1 \\leq i \\leq 2, 1 \\leq j \\leq 3)</var> is a lowercase English letter.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>C_{11}C_{12}C_{13}</var>\n<var>C_{21}C_{22}C_{23}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>YES</code> if this grid remains the same when rotated <var>180</var> degrees; print <code>NO</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>pot\ntop\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>This grid remains the same when rotated <var>180</var> degrees.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>tab\nbet\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n<p>This grid does not remain the same when rotated <var>180</var> degrees.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>eye\neel\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre></section>\n</div>\n</span>", "p03557": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>The season for Snuke Festival has come again this year. First of all, Ringo will perform a ritual to summon Snuke. For the ritual, he needs an altar, which consists of three parts, one in each of the three categories: upper, middle and lower.</p>\n<p>He has <var>N</var> parts for each of the three categories. The size of the <var>i</var>-th upper part is <var>A_i</var>, the size of the <var>i</var>-th middle part is <var>B_i</var>, and the size of the <var>i</var>-th lower part is <var>C_i</var>.</p>\n<p>To build an altar, the size of the middle part must be strictly greater than that of the upper part, and the size of the lower part must be strictly greater than that of the middle part. On the other hand, any three parts that satisfy these conditions can be combined to form an altar.</p>\n<p>How many different altars can Ringo build? Here, two altars are considered different when at least one of the three parts used is different.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li><var>1 \\leq B_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li><var>1 \\leq C_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>...</var> <var>A_N</var>\n<var>B_1</var> <var>...</var> <var>B_N</var>\n<var>C_1</var> <var>...</var> <var>C_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of different altars that Ringo can build.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 5\n2 4\n3 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The following three altars can be built:</p>\n<ul>\n<li>Upper: <var>1</var>-st part, Middle: <var>1</var>-st part, Lower: <var>1</var>-st part</li>\n<li>Upper: <var>1</var>-st part, Middle: <var>1</var>-st part, Lower: <var>2</var>-nd part</li>\n<li>Upper: <var>1</var>-st part, Middle: <var>2</var>-nd part, Lower: <var>2</var>-nd part</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1 1\n2 2 2\n3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>27\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n3 14 159 2 6 53\n58 9 79 323 84 6\n2643 383 2 79 50 288\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>87\n</pre></section>\n</div>\n</span>", "p03559": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>The season for Snuke Festival has come again this year. First of all, Ringo will perform a ritual to summon Snuke. For the ritual, he needs an altar, which consists of three parts, one in each of the three categories: upper, middle and lower.</p>\n<p>He has <var>N</var> parts for each of the three categories. The size of the <var>i</var>-th upper part is <var>A_i</var>, the size of the <var>i</var>-th middle part is <var>B_i</var>, and the size of the <var>i</var>-th lower part is <var>C_i</var>.</p>\n<p>To build an altar, the size of the middle part must be strictly greater than that of the upper part, and the size of the lower part must be strictly greater than that of the middle part. On the other hand, any three parts that satisfy these conditions can be combined to form an altar.</p>\n<p>How many different altars can Ringo build? Here, two altars are considered different when at least one of the three parts used is different.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li><var>1 \\leq B_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li><var>1 \\leq C_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>...</var> <var>A_N</var>\n<var>B_1</var> <var>...</var> <var>B_N</var>\n<var>C_1</var> <var>...</var> <var>C_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of different altars that Ringo can build.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 5\n2 4\n3 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>The following three altars can be built:</p>\n<ul>\n<li>Upper: <var>1</var>-st part, Middle: <var>1</var>-st part, Lower: <var>1</var>-st part</li>\n<li>Upper: <var>1</var>-st part, Middle: <var>1</var>-st part, Lower: <var>2</var>-nd part</li>\n<li>Upper: <var>1</var>-st part, Middle: <var>2</var>-nd part, Lower: <var>2</var>-nd part</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 1 1\n2 2 2\n3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>27\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n3 14 159 2 6 53\n58 9 79 323 84 6\n2643 383 2 79 50 288\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>87\n</pre></section>\n</div>\n</span>", "p03562": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> non-negative integers written on a blackboard. The <var>i</var>-th integer is <var>A_i</var>.</p>\n<p>Takahashi can perform the following two kinds of operations any number of times in any order:</p>\n<ul>\n<li>Select one integer written on the board (let this integer be <var>X</var>). Write <var>2X</var> on the board, without erasing the selected integer.</li>\n<li>Select two integers, possibly the same, written on the board (let these integers be <var>X</var> and <var>Y</var>). Write <var>X</var> XOR <var>Y</var> (XOR stands for bitwise xor) on the blackboard, without erasing the selected integers.</li>\n</ul>\n<p>How many different integers not exceeding <var>X</var> can be written on the blackboard? We will also count the integers that are initially written on the board.\nSince the answer can be extremely large, find the count modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 6</var></li>\n<li><var>1 \\leq X &lt; 2^{4000}</var></li>\n<li><var>1 \\leq A_i &lt; 2^{4000}(1\\leq i\\leq N)</var></li>\n<li>All input values are integers.</li>\n<li><var>X</var> and <var>A_i(1\\leq i\\leq N)</var> are given in binary notation, with the most significant digit in each of them being <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>X</var>\n<var>A_1</var>\n<var>:</var>\n<var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of different integers not exceeding <var>X</var> that can be written on the blackboard.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 111\n1111\n10111\n10010\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>Initially, <var>15</var>, <var>23</var> and <var>18</var> are written on the blackboard. Among the integers not exceeding <var>7</var>, four integers, <var>0</var>, <var>3</var>, <var>5</var> and <var>6</var>, can be written.\nFor example, <var>6</var> can be written as follows:</p>\n<ul>\n<li>Double <var>15</var> to write <var>30</var>.</li>\n<li>Take XOR of <var>30</var> and <var>18</var> to write <var>12</var>.</li>\n<li>Double <var>12</var> to write <var>24</var>.</li>\n<li>Take XOR of <var>30</var> and <var>24</var> to write <var>6</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 100100\n1011\n1110\n110101\n1010110\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>37\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 111001100101001\n10111110\n1001000110\n100000101\n11110000011\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1843\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1 111111111111111111111111111111111111111111111111111111111111111\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>466025955\n</pre>\n<p>Be sure to find the count modulo <var>998244353</var>.</p></section>\n</div>\n</span>", "p03563": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is a user of a site that hosts programming contests.<br/>\nWhen a user competes in a contest, the <em>rating</em> of the user (not necessarily an integer) changes according to the <em>performance</em> of the user, as follows:  </p>\n<ul>\n<li>Let the current rating of the user be <var>a</var>.</li>\n<li>Suppose that the performance of the user in the contest is <var>b</var>.</li>\n<li>Then, the new rating of the user will be the avarage of <var>a</var> and <var>b</var>.</li>\n</ul>\n<p>For example, if a user with rating <var>1</var> competes in a contest and gives performance <var>1000</var>, his/her new rating will be <var>500.5</var>, the average of <var>1</var> and <var>1000</var>.</p>\n<p>Takahashi's current rating is <var>R</var>, and he wants his rating to be exactly <var>G</var> after the next contest.<br/>\nFind the performance required to achieve it.  </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq R, G \\leq 4500</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>R</var>\n<var>G</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the performance required to achieve the objective.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2002\n2017\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2032\n</pre>\n<p>Takahashi's current rating is <var>2002</var>.<br/>\nIf his performance in the contest is <var>2032</var>, his rating will be the average of <var>2002</var> and <var>2032</var>, which is equal to the desired rating, <var>2017</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4500\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-4500\n</pre>\n<p>Although the current and desired ratings are between <var>0</var> and <var>4500</var>, the performance of a user can be below <var>0</var>.</p></section>\n</div>\n</span>", "p03565": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>E869120 found a chest which is likely to contain treasure.<br/>\nHowever, the chest is locked. In order to open it, he needs to enter a string <var>S</var> consisting of lowercase English letters.<br/>\nHe also found a string <var>S'</var>, which turns out to be the string <var>S</var> with some of its letters (possibly all or none) replaced with <code>?</code>.  </p>\n<p>One more thing he found is a sheet of paper with the following facts written on it:  </p>\n<ul>\n<li>Condition 1: The string <var>S</var> contains a string <var>T</var> as a contiguous substring.</li>\n<li>Condition 2: <var>S</var> is the lexicographically smallest string among the ones that satisfy Condition 1.</li>\n</ul>\n<p>Print the string <var>S</var>.<br/>\nIf such a string does not exist, print <code>UNRESTORABLE</code>.  </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S'|, |T| \\leq 50</var></li>\n<li><var>S'</var> consists of lowercase English letters and <code>?</code>.</li>\n<li><var>T</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>T'</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the string <var>S</var>.<br/>\nIf such a string does not exist, print <code>UNRESTORABLE</code> instead.  </p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>?tc????\ncoder\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>atcoder\n</pre>\n<p>There are <var>26</var> strings that satisfy Condition 1: <code>atcoder</code>, <code>btcoder</code>, <code>ctcoder</code>,..., <code>ztcoder</code>.\nAmong them, the lexicographically smallest is <code>atcoder</code>, so we can say <var>S = </var><code>atcoder</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>??p??d??\nabc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>UNRESTORABLE\n</pre>\n<p>There is no string that satisfies Condition 1, so the string <var>S</var> does not exist.</p></section>\n</div>\n</span>", "p03567": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke built an online judge to hold a programming contest.</p>\n<p>When a program is submitted to the judge, the judge returns a verdict, which is a two-character string that appears in the string <var>S</var> as a contiguous substring.\n(The judge can return any two-character substring of <var>S</var>.)</p>\n<p>Determine whether the judge can return the string <code>AC</code> as the verdict to a program.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq |S| \\leq 5</var></li>\n<li><var>S</var> consists of uppercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If the judge can return the string <code>AC</code> as a verdict to a program, print <code>Yes</code>; if it cannot, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>BACD\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>The string <code>AC</code> appears in <code>BACD</code> as a contiguous substring (the second and third characters).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>ABCD\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p>Although the string <code>ABCD</code> contains both <code>A</code> and <code>C</code> (the first and third characters), the string <code>AC</code> does not appear in <code>ABCD</code> as a contiguous substring.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>CABD\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>ACACA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>XX\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03568": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will say that two integer sequences of length <var>N</var>, <var>x_1, x_2, ..., x_N</var> and <var>y_1, y_2, ..., y_N</var>, are <em>similar</em> when <var>|x_i - y_i| \\leq 1</var> holds for all <var>i</var> (<var>1 \\leq i \\leq N</var>).</p>\n<p>In particular, any integer sequence is similar to itself.</p>\n<p>You are given an integer <var>N</var> and an integer sequence of length <var>N</var>, <var>A_1, A_2, ..., A_N</var>.</p>\n<p>How many integer sequences <var>b_1, b_2, ..., b_N</var> are there such that <var>b_1, b_2, ..., b_N</var> is similar to <var>A</var> and the product of all elements, <var>b_1 b_2 ... b_N</var>, is even?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10</var></li>\n<li><var>1 \\leq A_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of integer sequences that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>There are seven integer sequences that satisfy the condition:</p>\n<ul>\n<li><var>1, 2</var></li>\n<li><var>1, 4</var></li>\n<li><var>2, 2</var></li>\n<li><var>2, 3</var></li>\n<li><var>2, 4</var></li>\n<li><var>3, 2</var></li>\n<li><var>3, 4</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>26\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10\n90 52 56 71 44 8 13 30 57 84\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>58921\n</pre></section>\n</div>\n</span>", "p03570": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a string <var>s</var> consisting of lowercase English letters.\nSnuke is partitioning <var>s</var> into some number of non-empty substrings.\nLet the subtrings obtained be <var>s_1</var>, <var>s_2</var>, <var>...</var>, <var>s_N</var> from left to right. (Here, <var>s = s_1 + s_2 + ... + s_N</var> holds.)\nSnuke wants to satisfy the following condition:</p>\n<ul>\n<li>For each <var>i</var> (<var>1 \\leq i \\leq N</var>), it is possible to permute the characters in <var>s_i</var> and obtain a palindrome.</li>\n</ul>\n<p>Find the minimum possible value of <var>N</var> when the partition satisfies the condition.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |s| \\leq 2 \\times 10^5</var></li>\n<li><var>s</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible value of <var>N</var> when the partition satisfies the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>aabxyyzz\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The solution is to partition <var>s</var> as <code>aabxyyzz</code> = <code>aab</code> + <code>xyyzz</code>.\nHere, <code>aab</code> can be permuted to form a palindrome <code>aba</code>, and <code>xyyzz</code> can be permuted to form a palindrome <code>zyxyz</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>byebye\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p><code>byebye</code> can be permuted to form a palindrome <code>byeeyb</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>abcdefghijklmnopqrstuvwxyz\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>26\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>abcabcxabcx\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>3\n</pre>\n<p>The solution is to partition <var>s</var> as <code>abcabcxabcx</code> = <code>a</code> + <code>b</code> + <code>cabcxabcx</code>.</p></section>\n</div>\n</span>", "p03572": "<span class=\"lang-en\">\n<p>Score : <var>1800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Three men, A, B and C, are eating sushi together.\nInitially, there are <var>N</var> pieces of sushi, numbered <var>1</var> through <var>N</var>.\nHere, <var>N</var> is a multiple of <var>3</var>.</p>\n<p>Each of the three has likes and dislikes in sushi.\nA's preference is represented by <var>(a_1,\\ ...,\\ a_N)</var>, a permutation of integers from <var>1</var> to <var>N</var>.\nFor each <var>i</var> (<var>1 \\leq i \\leq N</var>), A's <var>i</var>-th favorite sushi is Sushi <var>a_i</var>.\nSimilarly, B's and C's preferences are represented by <var>(b_1,\\ ...,\\ b_N)</var> and <var>(c_1,\\ ...,\\ c_N)</var>, permutations of integers from <var>1</var> to <var>N</var>.</p>\n<p>The three repeats the following action until all pieces of sushi are consumed or a fight brakes out (described later):</p>\n<ul>\n<li>Each of the three A, B and C finds his most favorite piece of sushi among the remaining pieces. Let these pieces be Sushi <var>x</var>, <var>y</var> and <var>z</var>, respectively. If <var>x</var>, <var>y</var> and <var>z</var> are all different, A, B and C eats Sushi <var>x</var>, <var>y</var> and <var>z</var>, respectively. Otherwise, a fight brakes out.</li>\n</ul>\n<p>You are given A's and B's preferences, <var>(a_1,\\ ...,\\ a_N)</var> and <var>(b_1,\\ ...,\\ b_N)</var>.\nHow many preferences of C, <var>(c_1,\\ ...,\\ c_N)</var>, leads to all the pieces of sushi being consumed without a fight?\nFind the count modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 399</var></li>\n<li><var>N</var> is a multiple of <var>3</var>.</li>\n<li><var>(a_1,\\ ...,\\ a_N)</var> and <var>(b_1,\\ ...,\\ b_N)</var> are permutations of integers from <var>1</var> to <var>N</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>...</var> <var>a_N</var>\n<var>b_1</var> <var>...</var> <var>b_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the preferences of C that leads to all the pieces of sushi being consumed without a fight, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 3\n2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The answer is two, <var>(c_1,\\ c_2,\\ c_3) = (3,\\ 1,\\ 2),\\ (3,\\ 2,\\ 1)</var>.\nIn both cases, A, B and C will eat Sushi <var>1</var>, <var>2</var> and <var>3</var>, respectively, and there will be no more sushi.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 2 3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>Regardless of what permutation <var>(c_1,\\ c_2,\\ c_3)</var> is, A and B will try to eat Sushi <var>1</var>, resulting in a fight.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n1 2 3 4 5 6\n2 1 4 3 6 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>80\n</pre>\n<p>For example, if <var>(c_1,\\ c_2,\\ c_3,\\ c_4,\\ c_5,\\ c_6) = (5,\\ 1,\\ 2,\\ 6,\\ 3,\\ 4)</var>, A, B and C will first eat Sushi <var>1</var>, <var>2</var> and <var>5</var>, respectively, then they will eat Sushi <var>3</var>, <var>4</var> and <var>6</var>, respectively, and there will be no more sushi.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>6\n1 2 3 4 5 6\n6 5 4 3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>160\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>9\n4 5 6 7 8 9 1 2 3\n7 8 9 1 2 3 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>33600\n</pre></section>\n</div>\n</span>", "p03573": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given three integers, <var>A</var>, <var>B</var> and <var>C</var>.<br/>\nAmong them, two are the same, but the remaining one is different from the rest.<br/>\nFor example, when <var>A=5,B=7,C=5</var>, <var>A</var> and <var>C</var> are the same, but <var>B</var> is different.<br/>\nFind the one that is different from the rest among the given three integers.  </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>-100 \\leq A,B,C \\leq 100</var> </li>\n<li><var>A</var>, <var>B</var> and <var>C</var> are integers.</li>\n<li>The input satisfies the condition in the statement.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:  </p>\n<pre><var>A</var> <var>B</var> <var>C</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Among <var>A</var>, <var>B</var> and <var>C</var>, print the integer that is different from the rest.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 7 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n<p>This is the same case as the one in the statement.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n<p>In this case, <var>C</var> is the one we seek.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>-100 100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-100\n</pre></section>\n</div>\n</span>", "p03577": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Rng is going to a festival.</p>\n<p>The name of the festival is given to you as a string <var>S</var>, which ends with <code>FESTIVAL</code>, from input. Answer the question: \"Rng is going to a festival of what?\" Output the answer.</p>\n<p>Here, assume that the name of \"a festival of <var>s</var>\" is a string obtained by appending <code>FESTIVAL</code> to the end of <var>s</var>.\nFor example, <code>CODEFESTIVAL</code> is a festival of <code>CODE</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>9 \\leq |S| \\leq 50</var></li>\n<li><var>S</var> consists of uppercase English letters.</li>\n<li><var>S</var> ends with <code>FESTIVAL</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer to the question: \"Rng is going to a festival of what?\"</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>CODEFESTIVAL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>CODE\n</pre>\n<p>This is the same as the example in the statement.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>CODEFESTIVALFESTIVAL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>CODEFESTIVAL\n</pre>\n<p>This string is obtained by appending <code>FESTIVAL</code> to the end of <code>CODEFESTIVAL</code>, so it is a festival of <code>CODEFESTIVAL</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>YAKINIKUFESTIVAL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>YAKINIKU\n</pre></section>\n</div>\n</span>", "p03578": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Rng is preparing a problem set for a qualification round of CODEFESTIVAL.</p>\n<p>He has <var>N</var> candidates of problems. The difficulty of the <var>i</var>-th candidate is <var>D_i</var>.</p>\n<p>There must be <var>M</var> problems in the problem set, and the difficulty of the <var>i</var>-th problem must be <var>T_i</var>. Here, one candidate of a problem cannot be used as multiple problems.</p>\n<p>Determine whether Rng can complete the problem set without creating new candidates of problems.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 200,000</var></li>\n<li><var>1 \\leq D_i \\leq 10^9</var></li>\n<li><var>1 \\leq M \\leq 200,000</var></li>\n<li><var>1 \\leq T_i \\leq 10^9</var></li>\n<li>All numbers in the input are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>100</var> points will be awarded for passing the test set satisfying <var>N \\leq 100</var> and <var>M \\leq 100</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>D_1</var> <var>D_2</var> <var>...</var> <var>D_N</var>\n<var>M</var>\n<var>T_1</var> <var>T_2</var> <var>...</var> <var>T_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>YES</code> if Rng can complete the problem set without creating new candidates of problems; print <code>NO</code> if he cannot.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n3 1 4 1 5\n3\n5 4 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>7\n100 200 500 700 1200 1600 2000\n6\n100 200 500 700 1600 1600\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n<p>Not enough <var>1600</var>s.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n800\n5\n100 100 100 100 100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>15\n1 2 2 3 3 3 4 4 4 4 5 5 5 5 5\n9\n5 4 3 2 1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>YES\n</pre></section>\n</div>\n</span>", "p03580": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> cells are arranged in a row.\nSome of them may contain tokens.\nYou are given a string <var>s</var> that consists of <code>0</code>s and <code>1</code>s.\nIf the <var>i</var>-th character of <var>s</var> is <code>1</code>, the <var>i</var>-th cell (from left) contains a token.\nOtherwise, it doesn't contain a token.</p>\n<p>Snuke wants to perform the following operation as many times as possible.\nIn each operation, he chooses three consecutive cells.\nLet's call the cells <var>X, Y, Z</var> from left to right.\nIn order for the operation to be valid, both <var>X</var> and <var>Z</var> must contain tokens and <var>Y</var> must not contain a token.\nThen, he removes these two tokens and puts a new token on <var>Y</var>.</p>\n<p>How many operations can he perform if he performs operations in the optimal way?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 500,000</var></li>\n<li><var>|s| = N</var></li>\n<li>Each character in <var>s</var> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n1010101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>For example, he can perform two operations in the following way:</p>\n<ul>\n<li>Perform an operation on the last three cells. Now the string that represents tokens becomes <code>1010010</code>.</li>\n<li>Perform an operation on the first three cells. Now the string that represents tokens becomes <code>0100010</code>.</li>\n</ul>\n<p>Note that the choice of operations matters.\nFor example, if he chooses three cells in the middle first, he can perform no more operations.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>50\n10101000010011011110001001111110000101010111100110\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>10\n</pre></section>\n</div>\n</span>", "p03582": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For a string <var>S</var>, let <var>f(S)</var> be the lexicographically smallest cyclic shift of <var>S</var>.\nFor example, if <var>S = </var><code>babca</code>, <var>f(S) = </var><code>ababc</code> because this is the smallest among all cyclic shifts (<code>babca</code>, <code>abcab</code>, <code>bcaba</code>, <code>cabab</code>, <code>ababc</code>).</p>\n<p>You are given three integers <var>X, Y</var>, and <var>Z</var>.\nYou want to construct a string <var>T</var> that consists of exactly <var>X</var> <code>a</code>s, exactly <var>Y</var> <code>b</code>s, and exactly <var>Z</var> <code>c</code>s.\nIf there are multiple such strings, you want to choose one that maximizes <var>f(T)</var> lexicographically.</p>\n<p>Compute the lexicographically largest possible value of <var>f(T)</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X + Y + Z \\leq 50</var></li>\n<li><var>X, Y, Z</var> are non-negative integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var> <var>Z</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>abab\n</pre>\n<p><var>T</var> must consist of two <code>a</code>s and two <code>b</code>s.</p>\n<ul>\n<li>If <var>T = </var><code>aabb</code>, <var>f(T) = </var><code>aabb</code>.</li>\n<li>If <var>T = </var><code>abab</code>, <var>f(T) = </var><code>abab</code>.</li>\n<li>If <var>T = </var><code>abba</code>, <var>f(T) = </var><code>aabb</code>.</li>\n<li>If <var>T = </var><code>baab</code>, <var>f(T) = </var><code>aabb</code>.</li>\n<li>If <var>T = </var><code>baba</code>, <var>f(T) = </var><code>abab</code>.</li>\n<li>If <var>T = </var><code>bbaa</code>, <var>f(T) = </var><code>aabb</code>.</li>\n</ul>\n<p>Thus, the largest possible <var>f(T)</var> is <code>abab</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>acb\n</pre></section>\n</div>\n</span>", "p03581": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>A + B</var> balls are arranged in a row.\nThe leftmost <var>A</var> balls are colored red, and the rightmost <var>B</var> balls are colored blue.</p>\n<p>You perform the following operation:</p>\n<ul>\n<li>First, you choose two integers <var>s, t</var> such that <var>1 \\leq s, t \\leq A + B</var>.</li>\n<li>Then, you repeat the following step <var>A + B</var> times:\nIn each step, you remove the first ball or the <var>s</var>-th ball (if it exists) or the <var>t</var>-th ball (if it exists, all indices are 1-based) from left in the row, and give it to Snuke.</li>\n</ul>\n<p>In how many ways can you give the balls to Snuke?\nCompute the answer modulo <var>10^9 + 7</var>.</p>\n<p>Here, we consider two ways to be different if for some <var>k</var>, the <var>k</var>-th ball given to Snuke has different colors.\nIn particular, the choice of <var>s, t</var> doesn't matter.\nAlso, we don't distinguish two balls of the same color.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A, B \\leq 2000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>20\n</pre>\n<p>There are <var>20</var> ways to give <var>3</var> red balls and <var>3</var> blue balls.\nIt turns out that all of them are possible.</p>\n<p>Here is an example of the operation (<code>r</code> stands for red, <code>b</code> stands for blue):</p>\n<ul>\n<li>You choose <var>s = 3, t = 4</var>.</li>\n<li>Initially, the row looks like <code>rrrbbb</code>.</li>\n<li>You remove <var>3</var>rd ball (<code>r</code>) and give it to Snuke. Now the row looks like <code>rrbbb</code>.</li>\n<li>You remove <var>4</var>th ball (<code>b</code>) and give it to Snuke. Now the row looks like <code>rrbb</code>.</li>\n<li>You remove <var>1</var>st ball (<code>r</code>) and give it to Snuke. Now the row looks like <code>rbb</code>.</li>\n<li>You remove <var>3</var>rd ball (<code>b</code>) and give it to Snuke. Now the row looks like <code>rb</code>.</li>\n<li>You remove <var>1</var>st ball (<code>r</code>) and give it to Snuke. Now the row looks like <code>b</code>.</li>\n<li>You remove <var>1</var>st ball (<code>b</code>) and give it to Snuke. Now the row is empty.</li>\n</ul>\n<p>This way, Snuke receives balls in the order <code>rbrbrb</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>67\n</pre>\n<p>There are <var>70</var> ways to give <var>4</var> red balls and <var>4</var> blue balls.\nAmong them, only <code>bbrrbrbr</code>, <code>brbrbrbr</code>, and <code>brrbbrbr</code> are impossible.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7772\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1987 1789\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>456315553\n</pre></section>\n</div>\n</span>", "p03584": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><em>Seisu-ya</em>, a store specializing in non-negative integers, sells <var>N</var> non-negative integers. The <var>i</var>-th integer is <var>A_i</var> and has a <em>utility</em> of <var>B_i</var>.\nThere may be multiple equal integers with different utilities.</p>\n<p>Takahashi will buy some integers in this store. He can buy a combination of integers whose <em>bitwise OR</em> is less than or equal to <var>K</var>. He wants the sum of utilities of purchased integers to be as large as possible.</p>\n<p>Find the maximum possible sum of utilities of purchased integers.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq K &lt; 2^{30}</var></li>\n<li><var>0 \\leq A_i &lt; 2^{30}(1\\leq i\\leq N)</var></li>\n<li><var>1 \\leq B_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>B_1</var>\n:\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>Print the maximum possible sum of utilities of purchased integers.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 5\n3 3\n4 4\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>Buy <var>2</var> and <var>3</var> to achieve the maximum possible total utility, <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 6\n3 3\n4 4\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9\n</pre>\n<p>Buy <var>2</var> and <var>4</var> to achieve the maximum possible total utility, <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7 14\n10 5\n7 4\n11 4\n9 8\n3 6\n6 2\n8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>32\n</pre></section>\n</div>\n</span>", "p03587": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke prepared <var>6</var> problems for a upcoming programming contest.\nFor each of those problems, Rng judged whether it can be used in the contest or not.</p>\n<p>You are given a string <var>S</var> of length <var>6</var>.\nIf the <var>i</var>-th character of <var>s</var> is <code>1</code>, it means that the <var>i</var>-th problem prepared by Snuke is accepted to be used; <code>0</code> means that the problem is not accepted.</p>\n<p>How many problems prepared by Snuke are accepted to be used in the contest?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The length of <var>S</var> is <var>6</var>.</li>\n<li><var>S</var> consists of <code>0</code> and <code>1</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>Print the number of problems prepared by Snuke that are accepted to be used in the contest.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>111100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>The first, second, third and fourth problems are accepted, for a total of four.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>001001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>0\n</pre></section>\n</div>\n</span>", "p03583": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>.</p>\n<p>Find a triple of positive integers <var>h</var>, <var>n</var> and <var>w</var> such that <var>4/N = 1/h + 1/n + 1/w</var>.</p>\n<p>If there are multiple solutions, any of them will be accepted.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>It is guaranteed that, for the given integer <var>N</var>, there exists a solution such that <var>h,n,w \\leq 3500</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>Print a triple of positive integers <var>h</var>, <var>n</var> and <var>w</var> that satisfies the condition, in the following format:</p>\n<pre><var>h</var> <var>n</var> <var>w</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 2 2\n</pre>\n<p><var>4/2 = 1/1 + 1/2 + 1/2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3485\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>872 1012974 1539173474040\n</pre>\n<p>It is allowed to use an integer exceeding <var>3500</var> in a solution.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4664\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3498 3498 3498\n</pre></section>\n</div>\n</span>", "p03589": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>.</p>\n<p>Find a triple of positive integers <var>h</var>, <var>n</var> and <var>w</var> such that <var>4/N = 1/h + 1/n + 1/w</var>.</p>\n<p>If there are multiple solutions, any of them will be accepted.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>It is guaranteed that, for the given integer <var>N</var>, there exists a solution such that <var>h,n,w \\leq 3500</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>Print a triple of positive integers <var>h</var>, <var>n</var> and <var>w</var> that satisfies the condition, in the following format:</p>\n<pre><var>h</var> <var>n</var> <var>w</var>\n</pre>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 2 2\n</pre>\n<p><var>4/2 = 1/1 + 1/2 + 1/2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3485\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>872 1012974 1539173474040\n</pre>\n<p>It is allowed to use an integer exceeding <var>3500</var> in a solution.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4664\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3498 3498 3498\n</pre></section>\n</div>\n</span>", "p03592": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a grid with <var>N</var> rows and <var>M</var> columns of squares. Initially, all the squares are white.</p>\n<p>There is a button attached to each row and each column.\nWhen a button attached to a row is pressed, the colors of all the squares in that row are inverted; that is, white squares become black and vice versa.\nWhen a button attached to a column is pressed, the colors of all the squares in that column are inverted.</p>\n<p>Takahashi can freely press the buttons any number of times. Determine whether he can have exactly <var>K</var> black squares in the grid.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 1000</var></li>\n<li><var>0 \\leq K \\leq NM</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var> <var>K</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Takahashi can have exactly <var>K</var> black squares in the grid, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p>Press the buttons in the order of the first row, the first column.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 5 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Yes\n</pre>\n<p>Press the buttons in the order of the first column, third column, second row, fifth column.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7 9 20\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03591": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Ringo is giving a present to Snuke.</p>\n<p>Ringo has found out that Snuke loves <em>yakiniku</em> (a Japanese term meaning grilled meat. <em>yaki</em>: grilled, <em>niku</em>: meat). He supposes that Snuke likes grilled things starting with <code>YAKI</code> in Japanese, and does not like other things.</p>\n<p>You are given a string <var>S</var> representing the Japanese name of Ringo's present to Snuke. Determine whether <var>S</var> starts with <code>YAKI</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10</var></li>\n<li><var>S</var> consists of uppercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> starts with <code>YAKI</code>, print <code>Yes</code>; otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>YAKINIKU\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><code>YAKINIKU</code> starts with <code>YAKI</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>TAKOYAKI\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre>\n<p><code>TAKOYAKI</code> (a Japanese snack. <em>tako</em>: octopus) does not start with <code>YAKI</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>YAK\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03590": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><em>Seisu-ya</em>, a store specializing in non-negative integers, sells <var>N</var> non-negative integers. The <var>i</var>-th integer is <var>A_i</var> and has a <em>utility</em> of <var>B_i</var>.\nThere may be multiple equal integers with different utilities.</p>\n<p>Takahashi will buy some integers in this store. He can buy a combination of integers whose <em>bitwise OR</em> is less than or equal to <var>K</var>. He wants the sum of utilities of purchased integers to be as large as possible.</p>\n<p>Find the maximum possible sum of utilities of purchased integers.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>0 \\leq K &lt; 2^{30}</var></li>\n<li><var>0 \\leq A_i &lt; 2^{30}(1\\leq i\\leq N)</var></li>\n<li><var>1 \\leq B_i \\leq 10^9(1\\leq i\\leq N)</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>B_1</var>\n:\n<var>A_N</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>Print the maximum possible sum of utilities of purchased integers.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 5\n3 3\n4 4\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>8\n</pre>\n<p>Buy <var>2</var> and <var>3</var> to achieve the maximum possible total utility, <var>8</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 6\n3 3\n4 4\n2 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>9\n</pre>\n<p>Buy <var>2</var> and <var>4</var> to achieve the maximum possible total utility, <var>9</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7 14\n10 5\n7 4\n11 4\n9 8\n3 6\n6 2\n8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>32\n</pre></section>\n</div>\n</span>", "p03598": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> balls in the <var>xy</var>-plane. The coordinates of the <var>i</var>-th of them is <var>(x_i, i)</var>.\nThus, we have one ball on each of the <var>N</var> lines <var>y = 1</var>, <var>y = 2</var>, <var>...</var>, <var>y = N</var>.</p>\n<p>In order to collect these balls, Snuke prepared <var>2N</var> robots, <var>N</var> of type A and <var>N</var> of type B.\nThen, he placed the <var>i</var>-th type-A robot at coordinates <var>(0, i)</var>, and the <var>i</var>-th type-B robot at coordinates <var>(K, i)</var>.\nThus, now we have one type-A robot and one type-B robot on each of the <var>N</var> lines <var>y = 1</var>, <var>y = 2</var>, <var>...</var>, <var>y = N</var>.</p>\n<p>When activated, each type of robot will operate as follows.</p>\n<ul>\n<li>\n<p>When a type-A robot is activated at coordinates <var>(0, a)</var>, it will move to the position of the ball on the line <var>y = a</var>, collect the ball, move back to its original position <var>(0, a)</var> and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.</p>\n</li>\n<li>\n<p>When a type-B robot is activated at coordinates <var>(K, b)</var>, it will move to the position of the ball on the line <var>y = b</var>, collect the ball, move back to its original position <var>(K, b)</var> and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.</p>\n</li>\n</ul>\n<p>Snuke will activate some of the <var>2N</var> robots to collect all of the balls. Find the minimum possible total distance covered by robots.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>1 \\leq K \\leq 100</var></li>\n<li><var>0 &lt; x_i &lt; K</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>K</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>Print the minimum possible total distance covered by robots.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1\n10\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>There are just one ball, one type-A robot and one type-B robot.</p>\n<p>If the type-A robot is used to collect the ball, the distance from the robot to the ball is <var>2</var>, and the distance from the ball to the original position of the robot is also <var>2</var>, for a total distance of <var>4</var>.</p>\n<p>Similarly, if the type-B robot is used, the total distance covered will be <var>16</var>.</p>\n<p>Thus, the total distance covered will be minimized when the type-A robot is used. The output should be <var>4</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n9\n3 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>12\n</pre>\n<p>The total distance covered will be minimized when the first ball is collected by the type-A robot, and the second ball by the type-B robot.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5\n20\n11 12 9 17 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>74\n</pre></section>\n</div>\n</span>", "p03599": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke is making sugar water in a beaker.\nInitially, the beaker is empty. Snuke can perform the following four types of operations any number of times. He may choose not to perform some types of operations.</p>\n<ul>\n<li>Operation 1: Pour <var>100A</var> grams of water into the beaker.</li>\n<li>Operation 2: Pour <var>100B</var> grams of water into the beaker.</li>\n<li>Operation 3: Put <var>C</var> grams of sugar into the beaker.</li>\n<li>Operation 4: Put <var>D</var> grams of sugar into the beaker.</li>\n</ul>\n<p>In our experimental environment, <var>E</var> grams of sugar can dissolve into <var>100</var> grams of water.</p>\n<p>Snuke will make sugar water with the highest possible density.</p>\n<p>The beaker can contain at most <var>F</var> grams of substances (water and sugar combined), and there must not be any undissolved sugar in the beaker.\nFind the mass of the sugar water Snuke will make, and the mass of sugar dissolved in it.\nIf there is more than one candidate, any of them will be accepted.</p>\n<p>We remind you that the sugar water that contains <var>a</var> grams of water and <var>b</var> grams of sugar is <var>\\frac{100b}{a + b}</var> percent.\nAlso, in this problem, pure water that does not contain any sugar is regarded as <var>0</var> percent density sugar water.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A &lt; B \\leq 30</var></li>\n<li><var>1 \\leq C &lt; D \\leq 30</var></li>\n<li><var>1 \\leq E \\leq 100</var></li>\n<li><var>100A \\leq F \\leq 3</var> <var>000</var></li>\n<li><var>A</var>, <var>B</var>, <var>C</var>, <var>D</var>, <var>E</var> and <var>F</var> are all integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>D</var> <var>E</var> <var>F</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>Print two integers separated by a space.\nThe first integer should be the mass of the desired sugar water, and the second should be the mass of the sugar dissolved in it.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2 10 20 15 200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>110 10\n</pre>\n<p>In this environment, <var>15</var> grams of sugar can dissolve into <var>100</var> grams of water, and the beaker can contain at most <var>200</var> grams of substances.</p>\n<p>We can make <var>110</var> grams of sugar water by performing Operation 1 once and Operation 3 once.\nIt is not possible to make sugar water with higher density.\nFor example, the following sequences of operations are infeasible:</p>\n<ul>\n<li>If we perform Operation 1 once and Operation 4 once, there will be undissolved sugar in the beaker.</li>\n<li>If we perform Operation 2 once and Operation 3 three times, the mass of substances in the beaker will exceed <var>200</var> grams.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 2 1 2 100 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>200 100\n</pre>\n<p>There are other acceptable outputs, such as:</p>\n<pre>400 200\n</pre>\n<p>However, the output below is not acceptable:</p>\n<pre>300 150\n</pre>\n<p>This is because, in order to make <var>300</var> grams of sugar water containing <var>150</var> grams of sugar, we need to pour exactly <var>150</var> grams of water into the beaker, which is impossible.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>17 19 22 26 55 2802\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2634 934\n</pre></section>\n</div>\n</span>", "p03597": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have an <var>N \\times N</var> square grid.</p>\n<p>We will paint each square in the grid either black or white.</p>\n<p>If we paint exactly <var>A</var> squares white, how many squares will be painted black?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100</var></li>\n<li><var>0 \\leq A \\leq N^2</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>Print the number of squares that will be painted black.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>There are nine squares in a <var>3 \\times 3</var> square grid.\nFour of them will be painted white, so the remaining five squares will be painted black.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>19\n100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>261\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>100\n</pre>\n<p>As zero squares will be painted white, all the squares will be painted black.</p></section>\n</div>\n</span>", "p03601": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke is making sugar water in a beaker.\nInitially, the beaker is empty. Snuke can perform the following four types of operations any number of times. He may choose not to perform some types of operations.</p>\n<ul>\n<li>Operation 1: Pour <var>100A</var> grams of water into the beaker.</li>\n<li>Operation 2: Pour <var>100B</var> grams of water into the beaker.</li>\n<li>Operation 3: Put <var>C</var> grams of sugar into the beaker.</li>\n<li>Operation 4: Put <var>D</var> grams of sugar into the beaker.</li>\n</ul>\n<p>In our experimental environment, <var>E</var> grams of sugar can dissolve into <var>100</var> grams of water.</p>\n<p>Snuke will make sugar water with the highest possible density.</p>\n<p>The beaker can contain at most <var>F</var> grams of substances (water and sugar combined), and there must not be any undissolved sugar in the beaker.\nFind the mass of the sugar water Snuke will make, and the mass of sugar dissolved in it.\nIf there is more than one candidate, any of them will be accepted.</p>\n<p>We remind you that the sugar water that contains <var>a</var> grams of water and <var>b</var> grams of sugar is <var>\\frac{100b}{a + b}</var> percent.\nAlso, in this problem, pure water that does not contain any sugar is regarded as <var>0</var> percent density sugar water.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A &lt; B \\leq 30</var></li>\n<li><var>1 \\leq C &lt; D \\leq 30</var></li>\n<li><var>1 \\leq E \\leq 100</var></li>\n<li><var>100A \\leq F \\leq 3</var> <var>000</var></li>\n<li><var>A</var>, <var>B</var>, <var>C</var>, <var>D</var>, <var>E</var> and <var>F</var> are all integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>D</var> <var>E</var> <var>F</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>Print two integers separated by a space.\nThe first integer should be the mass of the desired sugar water, and the second should be the mass of the sugar dissolved in it.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2 10 20 15 200\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>110 10\n</pre>\n<p>In this environment, <var>15</var> grams of sugar can dissolve into <var>100</var> grams of water, and the beaker can contain at most <var>200</var> grams of substances.</p>\n<p>We can make <var>110</var> grams of sugar water by performing Operation 1 once and Operation 3 once.\nIt is not possible to make sugar water with higher density.\nFor example, the following sequences of operations are infeasible:</p>\n<ul>\n<li>If we perform Operation 1 once and Operation 4 once, there will be undissolved sugar in the beaker.</li>\n<li>If we perform Operation 2 once and Operation 3 three times, the mass of substances in the beaker will exceed <var>200</var> grams.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 2 1 2 100 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>200 100\n</pre>\n<p>There are other acceptable outputs, such as:</p>\n<pre>400 200\n</pre>\n<p>However, the output below is not acceptable:</p>\n<pre>300 150\n</pre>\n<p>This is because, in order to make <var>300</var> grams of sugar water containing <var>150</var> grams of sugar, we need to pour exactly <var>150</var> grams of water into the beaker, which is impossible.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>17 19 22 26 55 2802\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2634 934\n</pre></section>\n</div>\n</span>", "p03603": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a tree with <var>N</var> vertices. Vertex <var>1</var> is the root of the tree, and the parent of Vertex <var>i</var> (<var>2 \\leq i \\leq N</var>) is Vertex <var>P_i</var>.</p>\n<p>To each vertex in the tree, Snuke will allocate a color, either black or white, and a non-negative integer weight.</p>\n<p>Snuke has a favorite integer sequence, <var>X_1, X_2, ..., X_N</var>, so he wants to allocate colors and weights so that the following condition is satisfied for all <var>v</var>.</p>\n<ul>\n<li>The total weight of the vertices with the same color as <var>v</var> among the vertices contained in the subtree whose root is <var>v</var>, is <var>X_v</var>.</li>\n</ul>\n<p>Here, <em>the subtree whose root is</em> <var>v</var> is the tree consisting of Vertex <var>v</var> and all of its descendants.</p>\n<p>Determine whether it is possible to allocate colors and weights in this way.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1</var> <var>000</var></li>\n<li><var>1 \\leq P_i \\leq i - 1</var></li>\n<li><var>0 \\leq X_i \\leq 5</var> <var>000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Inputs</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>P_2</var> <var>P_3</var> <var>...</var> <var>P_N</var>\n<var>X_1</var> <var>X_2</var> <var>...</var> <var>X_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Outputs</h3><p>If it is possible to allocate colors and weights to the vertices so that the condition is satisfied, print <code>POSSIBLE</code>; otherwise, print <code>IMPOSSIBLE</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 1\n4 3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>POSSIBLE\n</pre>\n<p>For example, the following allocation satisfies the condition:</p>\n<ul>\n<li>Set the color of Vertex <var>1</var> to white and its weight to <var>2</var>.</li>\n<li>Set the color of Vertex <var>2</var> to black and its weight to <var>3</var>.</li>\n<li>Set the color of Vertex <var>3</var> to white and its weight to <var>2</var>.</li>\n</ul>\n<p>There are also other possible allocations.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 2\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>IMPOSSIBLE\n</pre>\n<p>If the same color is allocated to Vertex <var>2</var> and Vertex <var>3</var>, Vertex <var>2</var> cannot be allocated a non-negative weight.</p>\n<p>If different colors are allocated to Vertex <var>2</var> and <var>3</var>, no matter which color is allocated to Vertex <var>1</var>, it cannot be allocated a non-negative weight.</p>\n<p>Thus, there exists no allocation of colors and weights that satisfies the condition.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\n1 1 1 3 4 5 5\n4 1 6 2 2 1 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>POSSIBLE\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1\n\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>POSSIBLE\n</pre></section>\n</div>\n</span>", "p03617": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You've come to your favorite store Infinitesco to buy some ice tea.</p>\n<p>The store sells ice tea in bottles of different volumes at different costs.\nSpecifically, a <var>0.25</var>-liter bottle costs <var>Q</var> yen, a <var>0.5</var>-liter bottle costs <var>H</var> yen, a <var>1</var>-liter bottle costs <var>S</var> yen, and a <var>2</var>-liter bottle costs <var>D</var> yen.\nThe store has an infinite supply of bottles of each type.</p>\n<p>You want to buy exactly <var>N</var> liters of ice tea. How many yen do you have to spend?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq Q, H, S, D \\leq 10^8</var></li>\n<li><var>1 \\leq N \\leq 10^9</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>Q</var> <var>H</var> <var>S</var> <var>D</var>\n<var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the smallest number of yen you have to spend to buy exactly <var>N</var> liters of ice tea.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>20 30 70 90\n3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>150\n</pre>\n<p>Buy one <var>2</var>-liter bottle and two <var>0.5</var>-liter bottles. You'll get <var>3</var> liters for <var>90 + 30 + 30 = 150</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10000 1000 100 10\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100\n</pre>\n<p>Even though a <var>2</var>-liter bottle costs just <var>10</var> yen, you need only <var>1</var> liter.\nThus, you have to buy a <var>1</var>-liter bottle for <var>100</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 100 1000 10000\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>40\n</pre>\n<p>Now it's better to buy four <var>0.25</var>-liter bottles for <var>10 + 10 + 10 + 10 = 40</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>12345678 87654321 12345678 87654321\n123456789\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>1524157763907942\n</pre></section>\n</div>\n</span>", "p03618": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have a string <var>A = A_1 A_2 ... A_n</var> consisting of lowercase English letters.</p>\n<p>You can choose any two indices <var>i</var> and <var>j</var> such that <var>1 \\leq i \\leq j \\leq n</var> and reverse substring <var>A_i A_{i+1} ... A_j</var>.</p>\n<p>You can perform this operation at most once.</p>\n<p>How many different strings can you obtain?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |A| \\leq 200,000</var></li>\n<li><var>A</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of different strings you can obtain by reversing any substring in <var>A</var> at most once.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>aatt\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<p>You can obtain <code>aatt</code> (don't do anything), <code>atat</code> (reverse <var>A[2..3]</var>), <code>atta</code> (reverse <var>A[2..4]</var>), <code>ttaa</code> (reverse <var>A[1..4]</var>) and <code>taat</code> (reverse <var>A[1..3]</var>).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>xxxxxxxxxx\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p>Whatever substring you reverse, you'll always get <code>xxxxxxxxxx</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>abracadabra\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>44\n</pre></section>\n</div>\n</span>", "p03620": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have two strings <var>A = A_1 A_2 ... A_n</var> and <var>B = B_1 B_2 ... B_n</var> of the same length consisting of <var>0</var> and <var>1</var>.</p>\n<p>You can transform <var>A</var> using the following operations in any order and as many times as you want:</p>\n<ul>\n<li>Shift <var>A</var> by one character to the left (i.e., if <var>A = A_1 A_2 ... A_n</var>, replace <var>A</var> with <var>A_2 A_3 ... A_n A_1</var>).</li>\n<li>Shift <var>A</var> by one character to the right (i.e., if <var>A = A_1 A_2 ... A_n</var>, replace <var>A</var> with <var>A_n A_1 A_2 ... A_{n-1}</var>).</li>\n<li>Choose any <var>i</var> such that <var>B_i = 1</var>. Flip <var>A_i</var> (i.e., set <var>A_i = 1 - A_i</var>).</li>\n</ul>\n<p>You goal is to make strings <var>A</var> and <var>B</var> equal.</p>\n<p>Print the smallest number of operations required to achieve this, or <var>-1</var> if the goal is unreachable.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |A| = |B| \\leq 2,000</var></li>\n<li><var>A</var> and <var>B</var> consist of <var>0</var> and <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var>\n<var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the smallest number of operations required to make strings <var>A</var> and <var>B</var> equal, or <var>-1</var> if the goal is unreachable.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1010\n1100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>Here is one fastest way to achieve the goal:</p>\n<ul>\n<li>Flip <var>A_1</var>: <var>A = 0010</var></li>\n<li>Shift <var>A</var> to the left: <var>A = 0100</var></li>\n<li>Flip <var>A_1</var> again: <var>A = 1100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre>\n<p>There is no way to flip the only bit in <var>A</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>11010\n10001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre>\n<p>Here is one fastest way to achieve the goal:</p>\n<ul>\n<li>Shift <var>A</var> to the right: <var>A = 01101</var></li>\n<li>Flip <var>A_5</var>: <var>A = 01100</var></li>\n<li>Shift <var>A</var> to the left: <var>A = 11000</var></li>\n<li>Shift <var>A</var> to the left again: <var>A = 10001</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>0100100\n1111111\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>5\n</pre>\n<p>Flip <var>A_1</var>, <var>A_3</var>, <var>A_4</var>, <var>A_6</var> and <var>A_7</var> in any order.</p></section>\n</div>\n</span>", "p03621": "<span class=\"lang-en\">\n<p>Score : <var>1700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have two strings <var>A = A_1 A_2 ... A_n</var> and <var>B = B_1 B_2 ... B_n</var> of the same length consisting of <var>0</var> and <var>1</var>.\nThe number of <var>1</var>'s in <var>A</var> and <var>B</var> is equal.</p>\n<p>You've decided to transform <var>A</var> using the following algorithm:</p>\n<ul>\n<li>Let <var>a_1</var>, <var>a_2</var>, ..., <var>a_k</var> be the indices of <var>1</var>'s in <var>A</var>.</li>\n<li>Let <var>b_1</var>, <var>b_2</var>, ..., <var>b_k</var> be the indices of <var>1</var>'s in <var>B</var>.</li>\n<li>Replace <var>a</var> and <var>b</var> with their random permutations, chosen independently and uniformly.</li>\n<li>For each <var>i</var> from <var>1</var> to <var>k</var>, in order, swap <var>A_{a_i}</var> and <var>A_{b_i}</var>.</li>\n</ul>\n<p>Let <var>P</var> be the probability that strings <var>A</var> and <var>B</var> become equal after the procedure above.</p>\n<p>Let <var>Z = P \\times (k!)^2</var>. Clearly, <var>Z</var> is an integer.</p>\n<p>Find <var>Z</var> modulo <var>998244353</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |A| = |B| \\leq 10,000</var></li>\n<li><var>A</var> and <var>B</var> consist of <var>0</var> and <var>1</var>.</li>\n<li><var>A</var> and <var>B</var> contain the same number of <var>1</var>'s.</li>\n<li><var>A</var> and <var>B</var> contain at least one <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>1200</var> points will be awarded for passing the testset satisfying <var>1 \\leq |A| = |B| \\leq 500</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var>\n<var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value of <var>Z</var> modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1010\n1100\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>After the first two steps, <var>a = [1, 3]</var> and <var>b = [1, 2]</var>. There are <var>4</var> possible scenarios after shuffling <var>a</var> and <var>b</var>:</p>\n<ul>\n<li><var>a = [1, 3]</var>, <var>b = [1, 2]</var>. Initially, <var>A = 1010</var>. After swap(<var>A_1</var>, <var>A_1</var>), <var>A = 1010</var>. After swap(<var>A_3</var>, <var>A_2</var>), <var>A = 1100</var>.</li>\n<li><var>a = [1, 3]</var>, <var>b = [2, 1]</var>. Initially, <var>A = 1010</var>. After swap(<var>A_1</var>, <var>A_2</var>), <var>A = 0110</var>. After swap(<var>A_3</var>, <var>A_1</var>), <var>A = 1100</var>.</li>\n<li><var>a = [3, 1]</var>, <var>b = [1, 2]</var>. Initially, <var>A = 1010</var>. After swap(<var>A_3</var>, <var>A_1</var>), <var>A = 1010</var>. After swap(<var>A_1</var>, <var>A_2</var>), <var>A = 0110</var>.</li>\n<li><var>a = [3, 1]</var>, <var>b = [2, 1]</var>. Initially, <var>A = 1010</var>. After swap(<var>A_3</var>, <var>A_2</var>), <var>A = 1100</var>. After swap(<var>A_1</var>, <var>A_1</var>), <var>A = 1100</var>.</li>\n</ul>\n<p>Out of <var>4</var> scenarios, <var>3</var> of them result in <var>A = B</var>. Therefore, <var>P = 3</var> / <var>4</var>, and <var>Z = 3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>01001\n01001\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n</pre>\n<p>No swap ever changes <var>A</var>, so we'll always have <var>A = B</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>101010\n010101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>36\n</pre>\n<p>Every possible sequence of three swaps puts the <var>1</var>'s in <var>A</var> into the right places.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>1101011011110\n0111101011101\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>932171449\n</pre></section>\n</div>\n</span>", "p03622": "<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are participating in a quiz with <var>N + M</var> questions and Yes/No answers.</p>\n<p>It's known in advance that there are <var>N</var> questions with answer Yes and <var>M</var> questions with answer No, but the questions are given to you in random order.</p>\n<p>You have no idea about correct answers to any of the questions.\nYou answer questions one by one, and for each question you answer, you get to know the correct answer immediately after answering.</p>\n<p>Suppose you follow a strategy maximizing the expected number of correct answers you give.</p>\n<p>Let this expected number be <var>P/Q</var>, an irreducible fraction. Let <var>M = 998244353</var>.\nIt can be proven that a unique integer <var>R</var> between <var>0</var> and <var>M - 1</var> exists such that <var>P = Q \\times R</var> modulo <var>M</var>,\nand it is equal to <var>P \\times Q^{-1}</var> modulo <var>M</var>, where <var>Q^{-1}</var> is the modular inverse of <var>Q</var>.\nFind <var>R</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, M \\leq 500,000</var></li>\n<li>Both <var>N</var> and <var>M</var> are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>1500</var> points will be awarded for passing the testset satisfying <var>N = M</var> and <var>1 \\leq N, M \\leq 10^5</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Let <var>P/Q</var> be the expected number of correct answers you give if you follow an optimal strategy, represented as an irreducible fraction.\nPrint <var>P \\times Q^{-1}</var> modulo <var>998244353</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>499122178\n</pre>\n<p>There are two questions.\nYou may answer randomly to the first question, and you'll succeed with 50% probability.\nThen, since you know the second answer is different from the first one, you'll succeed with 100% probability.</p>\n<p>The expected number of your correct answers is <var>3</var> / <var>2</var>.\nThus, <var>P = 3</var>, <var>Q = 2</var>, <var>Q^{-1} = 499122177</var> (modulo <var>998244353</var>), and <var>P \\times Q^{-1} = 499122178</var> (again, modulo <var>998244353</var>).</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>831870297\n</pre>\n<p>The expected number of your correct answers is <var>17</var> / <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>770074220\n</pre>\n<p>The expected number of your correct answers is <var>169</var> / <var>35</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>10 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>208827570\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>42 23\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>362936761\n</pre></section>\n</div>\n</span>", "p03623": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke lives at position <var>x</var> on a number line.\nOn this line, there are two stores <var>A</var> and <var>B</var>, respectively at position <var>a</var> and <var>b</var>, that offer food for delivery.</p>\n<p>Snuke decided to get food delivery from the closer of stores <var>A</var> and <var>B</var>.\nFind out which store is closer to Snuke's residence.</p>\n<p>Here, the distance between two points <var>s</var> and <var>t</var> on a number line is represented by <var>|s-t|</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq x \\leq 1000</var></li>\n<li><var>1 \\leq a \\leq 1000</var></li>\n<li><var>1 \\leq b \\leq 1000</var></li>\n<li><var>x, a</var> and <var>b</var> are pairwise distinct.</li>\n<li>The distances between Snuke's residence and stores <var>A</var> and <var>B</var> are different.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>x</var> <var>a</var> <var>b</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If store <var>A</var> is closer, print <code>A</code>; if store <var>B</var> is closer, print <code>B</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>B\n</pre>\n<p>The distances between Snuke's residence and stores <var>A</var> and <var>B</var> are <var>3</var> and <var>2</var>, respectively.\nSince store <var>B</var> is closer, print <code>B</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 999 1000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>A\n</pre></section>\n</div>\n</span>", "p03624": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> consisting of lowercase English letters.\nFind the lexicographically (alphabetically) smallest lowercase English letter that does not occur in <var>S</var>.\nIf every lowercase English letter occurs in <var>S</var>, print <code>None</code> instead.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10^5</var> (<var>|S|</var> is the length of string <var>S</var>.)</li>\n<li><var>S</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the lexicographically smallest lowercase English letter that does not occur in <var>S</var>.\nIf every lowercase English letter occurs in <var>S</var>, print <code>None</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>atcoderregularcontest\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>b\n</pre>\n<p>The string <code>atcoderregularcontest</code> contains <code>a</code>, but does not contain <code>b</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>abcdefghijklmnopqrstuvwxyz\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>None\n</pre>\n<p>This string contains every lowercase English letter.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>fajsonlslfepbjtsaayxbymeskptcumtwrmkkinjxnnucagfrg\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>d\n</pre></section>\n</div>\n</span>", "p03625": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> sticks with negligible thickness.\nThe length of the <var>i</var>-th stick is <var>A_i</var>.</p>\n<p>Snuke wants to select four different sticks from these sticks and form a rectangle (including a square), using the sticks as its sides.\nFind the maximum possible area of the rectangle.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>4 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>A_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible area of the rectangle.\nIf no rectangle can be formed, print <var>0</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n3 1 2 4 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p><var>1 \\times 2</var> rectangle can be formed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>No rectangle can be formed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n3 3 3 3 4 4 4 5 5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>20\n</pre></section>\n</div>\n</span>", "p03627": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have <var>N</var> sticks with negligible thickness.\nThe length of the <var>i</var>-th stick is <var>A_i</var>.</p>\n<p>Snuke wants to select four different sticks from these sticks and form a rectangle (including a square), using the sticks as its sides.\nFind the maximum possible area of the rectangle.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>4 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>A_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible area of the rectangle.\nIf no rectangle can be formed, print <var>0</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n3 1 2 4 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p><var>1 \\times 2</var> rectangle can be formed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n<p>No rectangle can be formed.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10\n3 3 3 3 4 4 4 5 5 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>20\n</pre></section>\n</div>\n</span>", "p03651": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a box containing <var>N</var> balls. The <var>i</var>-th ball has the integer <var>A_i</var> written on it.\nSnuke can perform the following operation any number of times:</p>\n<ul>\n<li>Take out two balls from the box. Then, return them to the box along with a new ball, on which the absolute difference of the integers written on the two balls is written.</li>\n</ul>\n<p>Determine whether it is possible for Snuke to reach the state where the box contains a ball on which the integer <var>K</var> is written.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible for Snuke to reach the state where the box contains a ball on which the integer <var>K</var> is written, print <code>POSSIBLE</code>; if it is not possible, print <code>IMPOSSIBLE</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 7\n9 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>POSSIBLE\n</pre>\n<p>First, take out the two balls <var>9</var> and <var>4</var>, and return them back along with a new ball, <var>abs(9-4)=5</var>.\nNext, take out <var>3</var> and <var>5</var>, and return them back along with <var>abs(3-5)=2</var>.\nFinally, take out <var>9</var> and <var>2</var>, and return them back along with <var>abs(9-2)=7</var>.\nNow we have <var>7</var> in the box, and the answer is therefore <code>POSSIBLE</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 5\n6 9 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>IMPOSSIBLE\n</pre>\n<p>No matter what we do, it is not possible to have <var>5</var> in the box. The answer is therefore <code>IMPOSSIBLE</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 11\n11 3 7 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>POSSIBLE\n</pre>\n<p>The box already contains <var>11</var> before we do anything. The answer is therefore <code>POSSIBLE</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5 12\n10 2 8 6 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>IMPOSSIBLE\n</pre></section>\n</div>\n</span>", "p03652": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is hosting an sports meet.\nThere are <var>N</var> people who will participate. These people are conveniently numbered <var>1</var> through <var>N</var>.\nAlso, there are <var>M</var> options of sports for this event. These sports are numbered <var>1</var> through <var>M</var>.\nAmong these options, Takahashi will select one or more sports (possibly all) to be played in the event.</p>\n<p>Takahashi knows that Person <var>i</var>'s <var>j</var>-th favorite sport is Sport <var>A_{ij}</var>.\nEach person will only participate in his/her most favorite sport among the ones that are actually played in the event, and will not participate in the other sports.</p>\n<p>Takahashi is worried that one of the sports will attract too many people.\nTherefore, he would like to carefully select sports to be played so that the number of the participants in the sport with the largest number of participants is minimized.\nFind the minimum possible number of the participants in the sport with the largest number of participants.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 300</var></li>\n<li><var>1 \\leq M \\leq 300</var></li>\n<li><var>A_{i1}</var> , <var>A_{i2}</var> , <var>...</var> , <var>A_{iM}</var> is a permutation of the integers from <var>1</var> to <var>M</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_{11}</var> <var>A_{12}</var> <var>...</var> <var>A_{1M}</var>\n<var>A_{21}</var> <var>A_{22}</var> <var>...</var> <var>A_{2M}</var>\n<var>:</var>\n<var>A_{N1}</var> <var>A_{N2}</var> <var>...</var> <var>A_{NM}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible number of the participants in the sport with the largest number of participants.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n5 1 3 4 2\n2 5 3 1 4\n2 3 1 4 5\n2 5 4 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>Assume that Sports <var>1</var>, <var>3</var> and <var>4</var> are selected to be played. In this case, Person <var>1</var> will participate in Sport <var>1</var>, Person <var>2</var> in Sport <var>3</var>, Person <var>3</var> in Sport <var>3</var> and Person <var>4</var> in Sport <var>4</var>.\nHere, the sport with the largest number of participants is Sport <var>3</var>, with two participants.\nThere is no way to reduce the number of participants in the sport with the largest number of participants to <var>1</var>. Therefore, the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3\n2 1 3\n2 1 3\n2 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre>\n<p>Since all the people have the same taste in sports, there will be a sport with three participants, no matter what sports are selected.\nTherefore, the answer is <var>3</var>.</p></section>\n</div>\n</span>", "p03653": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>X+Y+Z</var> people, conveniently numbered <var>1</var> through <var>X+Y+Z</var>.\nPerson <var>i</var> has <var>A_i</var> gold coins, <var>B_i</var> silver coins and <var>C_i</var> bronze coins.</p>\n<p>Snuke is thinking of getting gold coins from <var>X</var> of those people, silver coins from <var>Y</var> of the people and bronze coins from <var>Z</var> of the people.\nIt is not possible to get two or more different colors of coins from a single person.\nOn the other hand, a person will give all of his/her coins of the color specified by Snuke.</p>\n<p>Snuke would like to maximize the total number of coins of all colors he gets.\nFind the maximum possible number of coins.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X</var></li>\n<li><var>1 \\leq Y</var></li>\n<li><var>1 \\leq Z</var></li>\n<li><var>X+Y+Z \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>1 \\leq B_i \\leq 10^9</var></li>\n<li><var>1 \\leq C_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X</var> <var>Y</var> <var>Z</var>\n<var>A_1</var> <var>B_1</var> <var>C_1</var>\n<var>A_2</var> <var>B_2</var> <var>C_2</var>\n<var>:</var>\n<var>A_{X+Y+Z}</var> <var>B_{X+Y+Z}</var> <var>C_{X+Y+Z}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible total number of coins of all colors he gets.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 2 1\n2 4 4\n3 2 1\n7 6 7\n5 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>18\n</pre>\n<p>Get silver coins from Person <var>1</var>, silver coins from Person <var>2</var>, bronze coins from Person <var>3</var> and gold coins from Person <var>4</var>.\nIn this case, the total number of coins will be <var>4+2+7+5=18</var>.\nIt is not possible to get <var>19</var> or more coins, and the answer is therefore <var>18</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 3 2\n16 17 1\n2 7 5\n2 16 12\n17 7 7\n13 2 10\n12 18 3\n16 15 19\n5 6 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>110\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6 2 4\n33189 87907 277349742\n71616 46764 575306520\n8801 53151 327161251\n58589 4337 796697686\n66854 17565 289910583\n50598 35195 478112689\n13919 88414 103962455\n7953 69657 699253752\n44255 98144 468443709\n2332 42580 752437097\n39752 19060 845062869\n60126 74101 382963164\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3093929975\n</pre></section>\n</div>\n</span>", "p03655": "<span class=\"lang-en\">\n<p>Score : <var>1600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Joisino is planning on touring Takahashi Town.\nThe town is divided into square sections by north-south and east-west lines.\nWe will refer to the section that is the <var>x</var>-th from the west and the <var>y</var>-th from the north as <var>(x,y)</var>.</p>\n<p>Joisino thinks that a <em>touring plan</em> is good if it satisfies the following conditions:</p>\n<ul>\n<li>\n<p>Let <var>(p,q)</var> be the section where she starts the tour. Then, <var>X_1 \\leq p \\leq X_2</var> and <var>Y_1 \\leq q \\leq Y_2</var> hold.</p>\n</li>\n<li>\n<p>Let <var>(s,t)</var> be the section where she has lunch. Then, <var>X_3 \\leq s \\leq X_4</var> and <var>Y_3 \\leq t \\leq Y_4</var> hold.</p>\n</li>\n<li>\n<p>Let <var>(u,v)</var> be the section where she ends the tour. Then, <var>X_5 \\leq u \\leq X_6</var> and <var>Y_5 \\leq v \\leq Y_6</var> hold.</p>\n</li>\n<li>\n<p>By repeatedly moving to the adjacent section (sharing a side), she travels from the starting section to the ending section in the shortest distance, passing the lunch section on the way.</p>\n</li>\n</ul>\n<p>Two touring plans are considered different if at least one of the following is different: the starting section, the lunch section, the ending section, and the sections that are visited on the way.\nJoisino would like to know how many different good touring plans there are.\nFind the number of the different good touring plans.\nSince it may be extremely large, find the count modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X_1 \\leq X_2 &lt; X_3 \\leq X_4 &lt; X_5 \\leq X_6 \\leq 10^6</var></li>\n<li><var>1 \\leq Y_1 \\leq Y_2 &lt; Y_3 \\leq Y_4 &lt; Y_5 \\leq Y_6 \\leq 10^6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>X_1</var> <var>X_2</var> <var>X_3</var> <var>X_4</var> <var>X_5</var> <var>X_6</var>\n<var>Y_1</var> <var>Y_2</var> <var>Y_3</var> <var>Y_4</var> <var>Y_5</var> <var>Y_6</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the different good touring plans, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 1 2 2 3 4\n1 1 2 2 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n<p>The starting section will always be <var>(1,1)</var>, and the lunch section will always be <var>(2,2)</var>.\nThere are four good touring plans where <var>(3,3)</var> is the ending section, and six good touring plans where <var>(4,3)</var> is the ending section.\nTherefore, the answer is <var>6+4=10</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 2 3 4 5 6\n1 2 3 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2346\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>77523 89555 420588 604360 845669 973451\n2743 188053 544330 647651 709337 988194\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>137477680\n</pre></section>\n</div>\n</span>", "p03656": "<span class=\"lang-en\">\n<p>Score : <var>1700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are two rooted trees, each with <var>N</var> vertices.\nThe vertices of each tree are numbered <var>1</var> through <var>N</var>.\nIn the first tree, the parent of Vertex <var>i</var> is Vertex <var>A_i</var>.\nHere, <var>A_i=-1</var> if Vertex <var>i</var> is the root of the first tree.\nIn the second tree, the parent of Vertex <var>i</var> is Vertex <var>B_i</var>.\nHere, <var>B_i=-1</var> if Vertex <var>i</var> is the root of the second tree.</p>\n<p>Snuke would like to construct an integer sequence of length <var>N</var>, <var>X_1</var> , <var>X_2</var> , <var>...</var> , <var>X_N</var>, that satisfies the following condition:</p>\n<ul>\n<li>For each vertex on each tree, let the indices of its descendants including itself be <var>a_1</var> , <var>a_2</var> , <var>...</var>, <var>a_k</var>. Then, <var>abs(X_{a_1} + X_{a_2} + ... + X_{a_k})=1</var> holds.</li>\n</ul>\n<p>Determine whether it is possible to construct such a sequence. If the answer is possible, find one such sequence.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq N</var>, if Vertex <var>i</var> is not the root in the first tree.</li>\n<li><var>A_i = -1</var>, if Vertex <var>i</var> is the root in the first tree.</li>\n<li><var>1 \\leq B_i \\leq N</var>, if Vertex <var>i</var> is not the root in the second tree.</li>\n<li><var>B_i = -1</var>, if Vertex <var>i</var> is the root in the second tree.</li>\n<li>Input corresponds to valid rooted trees.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>..</var> <var>A_N</var>\n<var>B_1</var> <var>B_2</var> <var>..</var> <var>B_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is not possible to construct an integer sequence that satisfies the condition, print <code>IMPOSSIBLE</code>.\nIf it is possible, print <code>POSSIBLE</code> in the first line.\nThen, in the second line, print <var>X_1</var> , <var>X_2</var> , <var>...</var> , <var>X_N</var>, an integer sequence that satisfies the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n3 3 4 -1 4\n4 4 1 -1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>POSSIBLE\n1 -1 -1 3 -1\n</pre>\n<p>For example, the indices of the descendants of Vertex <var>3</var> of the first tree including itself, is <var>3,1,2</var>.\nIt can be seen that the sample output holds <var>abs(X_3+X_1+X_2)=abs((-1)+(1)+(-1))=abs(-1)=1</var>.\nSimilarly, the condition is also satisfied for other vertices.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6\n-1 5 1 5 1 3\n6 5 5 3 -1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>IMPOSSIBLE\n</pre>\n<p>In this case, constructing a sequence that satisfies the condition is <code>IMPOSSIBLE</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8\n2 7 1 2 2 1 -1 4\n4 -1 4 7 4 4 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>POSSIBLE\n1 2 -1 0 -1 1 0 -1\n</pre></section>\n</div>\n</span>", "p03657": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke is giving cookies to his three goats.</p>\n<p>He has two cookie tins. One contains <var>A</var> cookies, and the other contains <var>B</var> cookies. He can thus give <var>A</var> cookies, <var>B</var> cookies or <var>A+B</var> cookies to his goats (he cannot open the tins).</p>\n<p>Your task is to determine whether Snuke can give cookies to his three goats so that each of them can have the same number of cookies.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A,B \\leq 100</var></li>\n<li>Both <var>A</var> and <var>B</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible to give cookies so that each of the three goats can have the same number of cookies, print <code>Possible</code>; otherwise, print <code>Impossible</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Possible\n</pre>\n<p>If Snuke gives nine cookies, each of the three goats can have three cookies.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Impossible\n</pre>\n<p>Since there are only two cookies, the three goats cannot have the same number of cookies no matter what Snuke gives to them.</p></section>\n</div>\n</span>", "p03658": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke has <var>N</var> sticks.\nThe length of the <var>i</var>-th stick is <var>l_i</var>.</p>\n<p>Snuke is making a snake toy by joining <var>K</var> of the sticks together.</p>\n<p>The length of the toy is represented by the sum of the individual sticks that compose it.\nFind the maximum possible length of the toy.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq K \\leq N \\leq 50</var></li>\n<li><var>1 \\leq l_i \\leq 50</var></li>\n<li><var>l_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>l_1</var> <var>l_2</var> <var>l_3</var> <var>...</var> <var>l_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>You can make a toy of length <var>12</var> by joining the sticks of lengths <var>3</var>, <var>4</var> and <var>5</var>, which is the maximum possible length.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>15 14\n50 26 27 21 41 7 42 35 7 5 5 36 39 1 45\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>386\n</pre></section>\n</div>\n</span>", "p03660": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Fennec and Snuke are playing a board game.</p>\n<p>On the board, there are <var>N</var> cells numbered <var>1</var> through <var>N</var>, and <var>N-1</var> roads, each connecting two cells. Cell <var>a_i</var> is adjacent to Cell <var>b_i</var> through the <var>i</var>-th road. Every cell can be reached from every other cell by repeatedly traveling to an adjacent cell. In terms of graph theory, the graph formed by the cells and the roads is a tree.</p>\n<p>Initially, Cell <var>1</var> is painted black, and Cell <var>N</var> is painted white. The other cells are not yet colored.\nFennec (who goes first) and Snuke (who goes second) alternately paint an uncolored cell.\nMore specifically, each player performs the following action in her/his turn:</p>\n<ul>\n<li>Fennec: selects an uncolored cell that is adjacent to a <strong>black</strong> cell, and paints it <strong>black</strong>.</li>\n<li>Snuke: selects an uncolored cell that is adjacent to a <strong>white</strong> cell, and paints it <strong>white</strong>.</li>\n</ul>\n<p>A player loses when she/he cannot paint a cell. Determine the winner of the game when Fennec and Snuke play optimally.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq a_i, b_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Fennec wins, print <code>Fennec</code>; if Snuke wins, print <code>Snuke</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n3 6\n1 2\n3 1\n7 4\n5 7\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Fennec\n</pre>\n<p>For example, if Fennec first paints Cell <var>2</var> black, she will win regardless of Snuke's moves.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 4\n4 2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Snuke\n</pre></section>\n</div>\n</span>", "p03661": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke and Raccoon have a heap of <var>N</var> cards. The <var>i</var>-th card from the top has the integer <var>a_i</var> written on it.</p>\n<p>They will share these cards.\nFirst, Snuke will take some number of cards from the top of the heap, then Raccoon will take all the remaining cards.\nHere, both Snuke and Raccoon have to take at least one card.</p>\n<p>Let the sum of the integers on Snuke's cards and Raccoon's cards be <var>x</var> and <var>y</var>, respectively.\nThey would like to minimize <var>|x-y|</var>.\nFind the minimum possible value of <var>|x-y|</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>-10^{9} \\leq a_i \\leq 10^{9}</var></li>\n<li><var>a_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 2 3 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>If Snuke takes four cards from the top, and Raccoon takes the remaining two cards, <var>x=10</var>, <var>y=11</var>, and thus <var>|x-y|=1</var>. This is the minimum possible value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n10 -10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>20\n</pre>\n<p>Snuke can only take one card from the top, and Raccoon can only take the remaining one card. In this case, <var>x=10</var>, <var>y=-10</var>, and thus <var>|x-y|=20</var>.</p></section>\n</div>\n</span>", "p03663": "<span class=\"lang-en\">\n<p>Score : <var>800</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><font color=\"red\"><strong>This is an interactive task.</strong></font></p>\n<p>Snuke has a favorite positive integer, <var>N</var>. You can ask him the following type of question at most <var>64</var> times: \"Is <var>n</var> your favorite integer?\" Identify <var>N</var>.</p>\n<p>Snuke is twisted, and when asked \"Is <var>n</var> your favorite integer?\", he answers \"Yes\" if one of the two conditions below is satisfied, and answers \"No\" otherwise:</p>\n<ul>\n<li>Both <var>n \\leq N</var> and <var>str(n) \\leq str(N)</var> hold.</li>\n<li>Both <var>n &gt; N</var> and <var>str(n) &gt; str(N)</var> hold.</li>\n</ul>\n<p>Here, <var>str(x)</var> is the decimal representation of <var>x</var> (without leading zeros) as a string. For example, <var>str(123) =</var> <code>123</code> and <var>str(2000)</var> = <code>2000</code>.\nStrings are compared lexicographically. For example, <code>11111</code> <var>&lt;</var> <code>123</code> and <code>123456789</code> <var>&lt;</var> <code>9</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^{9}</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Input and Output</h3><p>Write your question to Standard Output in the following format:</p>\n<pre>? <var>n</var>\n</pre>\n<p>Here, <var>n</var> must be an integer between <var>1</var> and <var>10^{18}</var> (inclusive).</p>\n<p>Then, the response to the question shall be given from Standard Input in the following format:</p>\n<pre><var>ans</var>\n</pre>\n<p>Here, <var>ans</var> is either <code>Y</code> or <code>N</code>. <code>Y</code> represents \"Yes\"; <code>N</code> represents \"No\".</p>\n<p>Finally, write your answer in the following format:</p>\n<pre>! <var>n</var>\n</pre>\n<p>Here, <var>n=N</var> must hold.</p>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Judging</h3><ul>\n<li><font color=\"red\"><strong>After each output, you must flush Standard Output.</strong></font> Otherwise you may get <code>TLE</code>.</li>\n<li>After you print the answer, the program must be terminated immediately. Otherwise, the behavior of the judge is undefined.</li>\n<li>When your output is invalid or incorrect, the behavior of the judge is undefined (it does not necessarily give <code>WA</code>).</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample</h3><p>Below is a sample communication for the case <var>N=123</var>:</p>\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th>Input</th>\n<th>Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code>? 1</code></td>\n</tr>\n<tr>\n<td><code>Y</code></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>? 32</code></td>\n</tr>\n<tr>\n<td><code>N</code></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>? 1010</code></td>\n</tr>\n<tr>\n<td><code>N</code></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>? 999</code></td>\n</tr>\n<tr>\n<td><code>Y</code></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>! 123</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Since <var>1 \\leq 123</var> and <var>str(1) \\leq str(123)</var>, the first response is \"Yes\".</li>\n<li>Since <var>32 \\leq 123</var> but <var>str(32) &gt; str(123)</var>, the second response is \"No\".</li>\n<li>Since <var>1010 &gt; 123</var> but <var>str(1010) \\leq str(123)</var>, the third response is \"No\".</li>\n<li>Since <var>999 \\geq 123</var> and <var>str(999) &gt; str(123)</var>, the fourth response is \"Yes\".</li>\n<li>The program successfully identifies <var>N=123</var> in four questions, and thus passes the case.</li>\n</ul></section>\n</div>\n</div>\n</span>", "p03662": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Fennec and Snuke are playing a board game.</p>\n<p>On the board, there are <var>N</var> cells numbered <var>1</var> through <var>N</var>, and <var>N-1</var> roads, each connecting two cells. Cell <var>a_i</var> is adjacent to Cell <var>b_i</var> through the <var>i</var>-th road. Every cell can be reached from every other cell by repeatedly traveling to an adjacent cell. In terms of graph theory, the graph formed by the cells and the roads is a tree.</p>\n<p>Initially, Cell <var>1</var> is painted black, and Cell <var>N</var> is painted white. The other cells are not yet colored.\nFennec (who goes first) and Snuke (who goes second) alternately paint an uncolored cell.\nMore specifically, each player performs the following action in her/his turn:</p>\n<ul>\n<li>Fennec: selects an uncolored cell that is adjacent to a <strong>black</strong> cell, and paints it <strong>black</strong>.</li>\n<li>Snuke: selects an uncolored cell that is adjacent to a <strong>white</strong> cell, and paints it <strong>white</strong>.</li>\n</ul>\n<p>A player loses when she/he cannot paint a cell. Determine the winner of the game when Fennec and Snuke play optimally.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq a_i, b_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>\n<var>a_{N-1}</var> <var>b_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If Fennec wins, print <code>Fennec</code>; if Snuke wins, print <code>Snuke</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n3 6\n1 2\n3 1\n7 4\n5 7\n1 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Fennec\n</pre>\n<p>For example, if Fennec first paints Cell <var>2</var> black, she will win regardless of Snuke's moves.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4\n1 4\n4 2\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Snuke\n</pre></section>\n</div>\n</span>", "p03665": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> bags of biscuits. The <var>i</var>-th bag contains <var>A_i</var> biscuits.</p>\n<p>Takaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.</p>\n<p>He would like to select bags so that the total number of biscuits inside is congruent to <var>P</var> modulo <var>2</var>.\nHow many such ways to select bags there are?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>P = 0</var> or <var>1</var></li>\n<li><var>1 \\leq A_i \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>P</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to select bags so that the total number of biscuits inside is congruent to <var>P</var> modulo <var>2</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 0\n1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>There are two ways to select bags so that the total number of biscuits inside is congruent to <var>0</var> modulo <var>2</var>:</p>\n<ul>\n<li>Select neither bag. The total number of biscuits is <var>0</var>.</li>\n<li>Select both bags. The total number of biscuits is <var>4</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1 1\n50\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 0\n1 1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre>\n<p>Two bags are distinguished even if they contain the same number of biscuits.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>45 1\n17 55 85 55 74 20 90 67 40 70 39 89 91 50 16 24 14 43 24 66 25 9 89 71 41 16 53 13 61 15 85 72 62 67 42 26 36 66 4 87 59 91 4 25 26\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>17592186044416\n</pre></section>\n</div>\n</span>", "p03666": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> squares in a row.\nThe leftmost square contains the integer <var>A</var>, and the rightmost contains the integer <var>B</var>. The other squares are empty.</p>\n<p>Aohashi would like to fill the empty squares with integers so that the following condition is satisfied:</p>\n<ul>\n<li>For any two adjacent squares, the (absolute) difference of the two integers in those squares is between <var>C</var> and <var>D</var> (inclusive).</li>\n</ul>\n<p>As long as the condition is satisfied, it is allowed to use arbitrarily large or small integers to fill the squares.\nDetermine whether it is possible to fill the squares under the condition.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>3 \\leq N \\leq 500000</var></li>\n<li><var>0 \\leq A \\leq 10^9</var></li>\n<li><var>0 \\leq B \\leq 10^9</var></li>\n<li><var>0 \\leq C \\leq D \\leq 10^9</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var> <var>C</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>YES</code> if it is possible to fill the squares under the condition; print <code>NO</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 1 5 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>For example, fill the squares with the following integers: <var>1</var>, <var>-1</var>, <var>3</var>, <var>7</var>, <var>5</var>, from left to right.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 7 6 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>48792 105960835 681218449 90629745 90632170\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>NO\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>491995 412925347 825318103 59999126 59999339\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>YES\n</pre></section>\n</div>\n</span>", "p03667": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> balls in a row.\nInitially, the <var>i</var>-th ball from the left has the integer <var>A_i</var> written on it.</p>\n<p>When Snuke cast a spell, the following happens:</p>\n<ul>\n<li>Let the current number of balls be <var>k</var>. All the balls with <var>k</var> written on them disappear at the same time.</li>\n</ul>\n<p>Snuke's objective is to vanish all the balls by casting the spell some number of times.\nThis may not be possible as it is. If that is the case, he would like to modify the integers on the minimum number of balls to make his objective achievable.</p>\n<p>By the way, the integers on these balls sometimes change by themselves.\nThere will be <var>M</var> such changes. In the <var>j</var>-th change, the integer on the <var>X_j</var>-th ball from the left will change into <var>Y_j</var>.</p>\n<p>After each change, find the minimum number of modifications of integers on the balls Snuke needs to make if he wishes to achieve his objective before the next change occurs. We will assume that he is quick enough in modifying integers. Here, note that he does not actually perform those necessary modifications and leaves them as they are.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 200000</var></li>\n<li><var>1 \\leq M \\leq 200000</var></li>\n<li><var>1 \\leq A_i \\leq N</var></li>\n<li><var>1 \\leq X_j \\leq N</var></li>\n<li><var>1 \\leq Y_j \\leq N</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Subscore</h3><ul>\n<li>In the test set worth <var>500</var> points, <var>N \\leq 200</var> and <var>M \\leq 200</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_N</var>\n<var>X_1</var> <var>Y_1</var>\n<var>X_2</var> <var>Y_2</var>\n:\n<var>X_M</var> <var>Y_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>M</var> lines.\nThe <var>j</var>-th line should contain the minimum necessary number of modifications of integers on the balls to make Snuke's objective achievable.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3\n1 1 3 4 5\n1 2\n2 5\n5 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n1\n1\n</pre>\n<ul>\n<li>After the first change, the integers on the balls become <var>2</var>, <var>1</var>, <var>3</var>, <var>4</var>, <var>5</var>, from left to right. Here, all the balls can be vanished by casting the spell five times. Thus, no modification is necessary.</li>\n<li>After the second change, the integers on the balls become <var>2</var>, <var>5</var>, <var>3</var>, <var>4</var>, <var>5</var>, from left to right. In this case, at least one modification must be made. One optimal solution is to modify the integer on the fifth ball from the left to <var>2</var>, and cast the spell four times.</li>\n<li>After the third change, the integers on the balls become <var>2</var>, <var>5</var>, <var>3</var>, <var>4</var>, <var>4</var>, from left to right. Also in this case, at least one modification must be made. One optimal solution is to modify the integer on the third ball from the left to <var>2</var>, and cast the spell three times.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 4\n4 4 4 4\n4 1\n3 1\n1 1\n2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n1\n2\n3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>10 10\n8 7 2 9 10 6 6 5 5 4\n8 1\n6 3\n6 2\n7 10\n9 7\n9 9\n2 4\n8 1\n1 8\n7 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n0\n1\n2\n2\n3\n3\n3\n3\n2\n</pre></section>\n</div>\n</span>", "p03668": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a tree with <var>N</var> vertices numbered <var>1, 2, ..., N</var>.\nThe edges of the tree are denoted by <var>(x_i, y_i)</var>.</p>\n<p>On this tree, Alice and Bob play a game against each other.\nStarting from Alice, they alternately perform the following operation:</p>\n<ul>\n<li>Select an existing edge and remove it from the tree, disconnecting it into two separate connected components. Then, remove the component that does not contain Vertex <var>1</var>.</li>\n</ul>\n<p>A player loses the game when he/she is unable to perform the operation.\nDetermine the winner of the game assuming that both players play optimally.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100000</var></li>\n<li><var>1 \\leq x_i, y_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>y_1</var>\n<var>x_2</var> <var>y_2</var>\n:\n<var>x_{N-1}</var> <var>y_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Alice</code> if Alice wins; print <code>Bob</code> if Bob wins.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n1 2\n2 3\n2 4\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Alice\n</pre>\n<p>If Alice first removes the edge connecting Vertices <var>1</var> and <var>2</var>, the tree becomes a single vertex tree containing only Vertex <var>1</var>.\nSince there is no edge anymore, Bob cannot perform the operation and Alice wins.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n1 2\n2 3\n1 4\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Bob\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>6\n1 2\n2 4\n5 1\n6 3\n3 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Alice\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7\n1 2\n3 7\n4 6\n2 3\n2 4\n1 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>Bob\n</pre></section>\n</div>\n</span>", "p03671": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke is buying a bicycle.\nThe bicycle of his choice does not come with a bell, so he has to buy one separately.</p>\n<p>He has very high awareness of safety, and decides to buy two bells, one for each hand.</p>\n<p>The store sells three kinds of bells for the price of <var>a</var>, <var>b</var> and <var>c</var> yen (the currency of Japan), respectively.\nFind the minimum total price of two different bells.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq a,b,c \\leq 10000</var></li>\n<li><var>a</var>, <var>b</var> and <var>c</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var> <var>c</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum total price of two different bells.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>700 600 780\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1300\n</pre>\n<ul>\n<li>Buying a <var>700</var>-yen bell and a <var>600</var>-yen bell costs <var>1300</var> yen.</li>\n<li>Buying a <var>700</var>-yen bell and a <var>780</var>-yen bell costs <var>1480</var> yen.</li>\n<li>Buying a <var>600</var>-yen bell and a <var>780</var>-yen bell costs <var>1380</var> yen.</li>\n</ul>\n<p>The minimum among these is <var>1300</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10000 10000 10000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>20000\n</pre>\n<p>Buying any two bells costs <var>20000</var> yen.</p></section>\n</div>\n</span>", "p03672": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will call a string that can be obtained by concatenating two equal strings an <em>even</em> string.\nFor example, <code>xyzxyz</code> and <code>aaaaaa</code> are even, while <code>ababab</code> and <code>xyzxy</code> are not.</p>\n<p>You are given an even string <var>S</var> consisting of lowercase English letters.\nFind the length of the longest even string that can be obtained by deleting one or more characters from the end of <var>S</var>.\nIt is guaranteed that such a non-empty string exists for a given input.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq |S| \\leq 200</var></li>\n<li><var>S</var> is an even string consisting of lowercase English letters.</li>\n<li>There exists a non-empty even string that can be obtained by deleting one or more characters from the end of <var>S</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the length of the longest even string that can be obtained.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abaababaab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>6\n</pre>\n<ul>\n<li><code>abaababaab</code> itself is even, but we need to delete at least one character.</li>\n<li><code>abaababaa</code> is not even.</li>\n<li><code>abaababa</code> is not even.</li>\n<li><code>abaabab</code> is not even.</li>\n<li><code>abaaba</code> is even. Thus, we should print its length, <var>6</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>xxxx\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre>\n<ul>\n<li><code>xxx</code> is not even.</li>\n<li><code>xx</code> is even.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>abcabcabcabc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n</pre>\n<p>The longest even string that can be obtained is <code>abcabc</code>, whose length is <var>6</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>akasakaakasakasakaakas\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>14\n</pre>\n<p>The longest even string that can be obtained is <code>akasakaakasaka</code>, whose length is <var>14</var>.</p></section>\n</div>\n</span>", "p03659": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke and Raccoon have a heap of <var>N</var> cards. The <var>i</var>-th card from the top has the integer <var>a_i</var> written on it.</p>\n<p>They will share these cards.\nFirst, Snuke will take some number of cards from the top of the heap, then Raccoon will take all the remaining cards.\nHere, both Snuke and Raccoon have to take at least one card.</p>\n<p>Let the sum of the integers on Snuke's cards and Raccoon's cards be <var>x</var> and <var>y</var>, respectively.\nThey would like to minimize <var>|x-y|</var>.\nFind the minimum possible value of <var>|x-y|</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 2 \\times 10^5</var></li>\n<li><var>-10^{9} \\leq a_i \\leq 10^{9}</var></li>\n<li><var>a_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_{N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 2 3 4 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n</pre>\n<p>If Snuke takes four cards from the top, and Raccoon takes the remaining two cards, <var>x=10</var>, <var>y=11</var>, and thus <var>|x-y|=1</var>. This is the minimum possible value.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n10 -10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>20\n</pre>\n<p>Snuke can only take one card from the top, and Raccoon can only take the remaining one card. In this case, <var>x=10</var>, <var>y=-10</var>, and thus <var>|x-y|=20</var>.</p></section>\n</div>\n</span>", "p03673": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer sequence of length <var>n</var>, <var>a_1, ..., a_n</var>.\nLet us consider performing the following <var>n</var> operations on an empty sequence <var>b</var>.</p>\n<p>The <var>i</var>-th operation is as follows:</p>\n<ol>\n<li>Append <var>a_i</var> to the end of <var>b</var>.</li>\n<li>Reverse the order of the elements in <var>b</var>.</li>\n</ol>\n<p>Find the sequence <var>b</var> obtained after these <var>n</var> operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq n \\leq 2\\times 10^5</var></li>\n<li><var>0 \\leq a_i \\leq 10^9</var></li>\n<li><var>n</var> and <var>a_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>n</var> integers in a line with spaces in between.\nThe <var>i</var>-th integer should be <var>b_i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4 2 1 3\n</pre>\n<ul>\n<li>After step 1 of the first operation, <var>b</var> becomes: <var>1</var>.</li>\n<li>After step 2 of the first operation, <var>b</var> becomes: <var>1</var>.</li>\n<li>After step 1 of the second operation, <var>b</var> becomes: <var>1, 2</var>.</li>\n<li>After step 2 of the second operation, <var>b</var> becomes: <var>2, 1</var>.</li>\n<li>After step 1 of the third operation, <var>b</var> becomes: <var>2, 1, 3</var>.</li>\n<li>After step 2 of the third operation, <var>b</var> becomes: <var>3, 1, 2</var>.</li>\n<li>After step 1 of the fourth operation, <var>b</var> becomes: <var>3, 1, 2, 4</var>.</li>\n<li>After step 2 of the fourth operation, <var>b</var> becomes: <var>4, 2, 1, 3</var>.</li>\n</ul>\n<p>Thus, the answer is <code>4 2 1 3</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3 1 2\n</pre>\n<p>As shown above in Sample Output 1, <var>b</var> becomes <var>3, 1, 2</var> after step 2 of the third operation. Thus, the answer is <code>3 1 2</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>6\n0 6 7 6 7 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0 6 6 0 7 7\n</pre></section>\n</div>\n</span>", "p03674": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer sequence of length <var>n+1</var>, <var>a_1,a_2,...,a_{n+1}</var>, which consists of the <var>n</var> integers <var>1,...,n</var>.\nIt is known that each of the <var>n</var> integers <var>1,...,n</var> appears at least once in this sequence.</p>\n<p>For each integer <var>k=1,...,n+1</var>, find the number of the different subsequences (not necessarily contiguous) of the given sequence with length <var>k</var>, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><ul>\n<li>\n<p>If the contents of two subsequences are the same, they are not separately counted even if they originate from different positions in the original sequence.</p>\n</li>\n<li>\n<p>A subsequence of a sequence <var>a</var> with length <var>k</var> is a sequence obtained by selecting <var>k</var> of the elements of <var>a</var> and arranging them without changing their relative order. For example, the sequences <var>1,3,5</var> and <var>1,2,3</var> are subsequences of <var>1,2,3,4,5</var>, while <var>3,1,2</var> and <var>1,10,100</var> are not.</p>\n</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq n \\leq 10^5</var></li>\n<li><var>1 \\leq a_i \\leq n</var></li>\n<li>Each of the integers <var>1,...,n</var> appears in the sequence.</li>\n<li><var>n</var> and <var>a_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>a_1</var> <var>a_2</var> ... <var>a_{n+1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>n+1</var> lines.\nThe <var>k</var>-th line should contain the number of the different subsequences of the given sequence with length <var>k</var>, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n5\n4\n1\n</pre>\n<p>There are three subsequences with length <var>1</var>: <var>1</var> and <var>2</var> and <var>3</var>.</p>\n<p>There are five subsequences with length <var>2</var>: <var>1,1</var> and <var>1,2</var> and <var>1,3</var> and <var>2,1</var> and <var>2,3</var>.</p>\n<p>There are four subsequences with length <var>3</var>: <var>1,1,3</var> and <var>1,2,1</var> and <var>1,2,3</var> and <var>2,1,3</var>.</p>\n<p>There is one subsequence with length <var>4</var>: <var>1,2,1,3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n1\n</pre>\n<p>There is one subsequence with length <var>1</var>: <var>1</var>.</p>\n<p>There is one subsequence with length <var>2</var>: <var>1,1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>32\n29 19 7 10 26 32 27 4 11 20 2 8 16 23 5 14 6 12 17 22 18 30 28 24 15 1 25 3 13 21 19 31 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>32\n525\n5453\n40919\n237336\n1107568\n4272048\n13884156\n38567100\n92561040\n193536720\n354817320\n573166440\n818809200\n37158313\n166803103\n166803103\n37158313\n818809200\n573166440\n354817320\n193536720\n92561040\n38567100\n13884156\n4272048\n1107568\n237336\n40920\n5456\n528\n33\n1\n</pre>\n<p>Be sure to print the numbers modulo <var>10^9+7</var>.</p></section>\n</div>\n</span>", "p03675": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer sequence of length <var>n</var>, <var>a_1, ..., a_n</var>.\nLet us consider performing the following <var>n</var> operations on an empty sequence <var>b</var>.</p>\n<p>The <var>i</var>-th operation is as follows:</p>\n<ol>\n<li>Append <var>a_i</var> to the end of <var>b</var>.</li>\n<li>Reverse the order of the elements in <var>b</var>.</li>\n</ol>\n<p>Find the sequence <var>b</var> obtained after these <var>n</var> operations.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq n \\leq 2\\times 10^5</var></li>\n<li><var>0 \\leq a_i \\leq 10^9</var></li>\n<li><var>n</var> and <var>a_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>a_1</var> <var>a_2</var> <var>...</var> <var>a_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>n</var> integers in a line with spaces in between.\nThe <var>i</var>-th integer should be <var>b_i</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 2 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4 2 1 3\n</pre>\n<ul>\n<li>After step 1 of the first operation, <var>b</var> becomes: <var>1</var>.</li>\n<li>After step 2 of the first operation, <var>b</var> becomes: <var>1</var>.</li>\n<li>After step 1 of the second operation, <var>b</var> becomes: <var>1, 2</var>.</li>\n<li>After step 2 of the second operation, <var>b</var> becomes: <var>2, 1</var>.</li>\n<li>After step 1 of the third operation, <var>b</var> becomes: <var>2, 1, 3</var>.</li>\n<li>After step 2 of the third operation, <var>b</var> becomes: <var>3, 1, 2</var>.</li>\n<li>After step 1 of the fourth operation, <var>b</var> becomes: <var>3, 1, 2, 4</var>.</li>\n<li>After step 2 of the fourth operation, <var>b</var> becomes: <var>4, 2, 1, 3</var>.</li>\n</ul>\n<p>Thus, the answer is <code>4 2 1 3</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3 1 2\n</pre>\n<p>As shown above in Sample Output 1, <var>b</var> becomes <var>3, 1, 2</var> after step 2 of the third operation. Thus, the answer is <code>3 1 2</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1\n1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>6\n0 6 7 6 7 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>0 6 6 0 7 7\n</pre></section>\n</div>\n</span>", "p03676": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer sequence of length <var>n+1</var>, <var>a_1,a_2,...,a_{n+1}</var>, which consists of the <var>n</var> integers <var>1,...,n</var>.\nIt is known that each of the <var>n</var> integers <var>1,...,n</var> appears at least once in this sequence.</p>\n<p>For each integer <var>k=1,...,n+1</var>, find the number of the different subsequences (not necessarily contiguous) of the given sequence with length <var>k</var>, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Notes</h3><ul>\n<li>\n<p>If the contents of two subsequences are the same, they are not separately counted even if they originate from different positions in the original sequence.</p>\n</li>\n<li>\n<p>A subsequence of a sequence <var>a</var> with length <var>k</var> is a sequence obtained by selecting <var>k</var> of the elements of <var>a</var> and arranging them without changing their relative order. For example, the sequences <var>1,3,5</var> and <var>1,2,3</var> are subsequences of <var>1,2,3,4,5</var>, while <var>3,1,2</var> and <var>1,10,100</var> are not.</p>\n</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq n \\leq 10^5</var></li>\n<li><var>1 \\leq a_i \\leq n</var></li>\n<li>Each of the integers <var>1,...,n</var> appears in the sequence.</li>\n<li><var>n</var> and <var>a_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>a_1</var> <var>a_2</var> ... <var>a_{n+1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>n+1</var> lines.\nThe <var>k</var>-th line should contain the number of the different subsequences of the given sequence with length <var>k</var>, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n1 2 1 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n5\n4\n1\n</pre>\n<p>There are three subsequences with length <var>1</var>: <var>1</var> and <var>2</var> and <var>3</var>.</p>\n<p>There are five subsequences with length <var>2</var>: <var>1,1</var> and <var>1,2</var> and <var>1,3</var> and <var>2,1</var> and <var>2,3</var>.</p>\n<p>There are four subsequences with length <var>3</var>: <var>1,1,3</var> and <var>1,2,1</var> and <var>1,2,3</var> and <var>2,1,3</var>.</p>\n<p>There is one subsequence with length <var>4</var>: <var>1,2,1,3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1\n1 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n1\n</pre>\n<p>There is one subsequence with length <var>1</var>: <var>1</var>.</p>\n<p>There is one subsequence with length <var>2</var>: <var>1,1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>32\n29 19 7 10 26 32 27 4 11 20 2 8 16 23 5 14 6 12 17 22 18 30 28 24 15 1 25 3 13 21 19 31 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>32\n525\n5453\n40919\n237336\n1107568\n4272048\n13884156\n38567100\n92561040\n193536720\n354817320\n573166440\n818809200\n37158313\n166803103\n166803103\n37158313\n818809200\n573166440\n354817320\n193536720\n92561040\n38567100\n13884156\n4272048\n1107568\n237336\n40920\n5456\n528\n33\n1\n</pre>\n<p>Be sure to print the numbers modulo <var>10^9+7</var>.</p></section>\n</div>\n</span>", "p03678": "<span class=\"lang-en\">\n<p>Score : <var>1100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will call a string that can be obtained by concatenating two equal strings an <em>even</em> string.\nFor example, <code>xyzxyz</code> and <code>aaaaaa</code> are even, while <code>ababab</code> and <code>xyzxy</code> are not.</p>\n<p>For a non-empty string <var>S</var>, we will define <var>f(S)</var> as the shortest even string that can be obtained by appending one or more characters to the end of <var>S</var>.\nFor example, <var>f(</var><code>abaaba</code><var>)=</var><code>abaababaab</code>.\nIt can be shown that <var>f(S)</var> is uniquely determined for a non-empty string <var>S</var>.</p>\n<p>You are given an even string <var>S</var> consisting of lowercase English letters.\nFor each letter in the lowercase English alphabet, find the number of its occurrences from the <var>l</var>-th character through the <var>r</var>-th character of <var>f^{10^{100}} (S)</var>.</p>\n<p>Here, <var>f^{10^{100}} (S)</var> is the string <var>f(f(f( ... f(S) ... )))</var> obtained by applying <var>f</var> to <var>S</var> <var>10^{100}</var> times.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq |S| \\leq 2\\times 10^5</var></li>\n<li><var>1 \\leq l \\leq r \\leq 10^{18}</var></li>\n<li><var>S</var> is an even string consisting of lowercase English letters.</li>\n<li><var>l</var> and <var>r</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>l</var> <var>r</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>26</var> integers in a line with spaces in between.\nThe <var>i</var>-th integer should be the number of the occurrences of the <var>i</var>-th letter in the lowercase English alphabet from the <var>l</var>-th character through the <var>r</var>-th character of <var>f^{10^{100}} (S)</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abaaba\n6 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n</pre>\n<p>Since <var>f(</var><code>abaaba</code><var>)=</var><code>abaababaab</code>, the first ten characters in <var>f^{10^{100}}(S)</var> is also <code>abaababaab</code>. Thus, the sixth through the tenth characters are <code>abaab</code>. In this string, <code>a</code> appears three times, <code>b</code> appears twice and no other letters appear, and thus the output should be <var>3</var> and <var>2</var> followed by twenty-four <var>0</var>s.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>xx\n1 1000000000000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1000000000000000000 0 0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>vgxgpuamkvgxgvgxgpuamkvgxg\n1 1000000000000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>87167725689669676 0 0 0 0 0 282080685775825810 0 0 0 87167725689669676 0 87167725689669676 0 0 87167725689669676 0 0 0 0 87167725689669676 141040342887912905 0 141040342887912905 0 0\n</pre></section>\n</div>\n</span>", "p03745": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an array <var>A</var> of length <var>N</var>.\nYour task is to divide it into several contiguous subarrays.\nHere, all subarrays obtained must be sorted in either non-decreasing or non-increasing order.\nAt least how many subarrays do you need to divide <var>A</var> into?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li>Each <var>A_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> <var>...</var> <var>A_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum possible number of subarrays after division of <var>A</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>6\n1 2 3 2 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>One optimal solution is to divide the array into <var>[1,2,3]</var> and <var>[2,2,1]</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9\n1 2 1 2 1 2 1 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>7\n1 2 3 2 1 999999999 1000000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03747": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a circle with a circumference of <var>L</var>.\nEach point on the circumference has a coordinate value, which represents the arc length from a certain reference point clockwise to the point.\nOn this circumference, there are <var>N</var> ants.\nThese ants are numbered <var>1</var> through <var>N</var> in order of increasing coordinate, and ant <var>i</var> is at coordinate <var>X_i</var>.</p>\n<p>The <var>N</var> ants have just started walking.\nFor each ant <var>i</var>, you are given the initial direction <var>W_i</var>. Ant <var>i</var> is initially walking clockwise if <var>W_i</var> is <var>1</var>; counterclockwise if <var>W_i</var> is <var>2</var>.\nEvery ant walks at a constant speed of <var>1</var> per second.\nSometimes, two ants bump into each other.\nEach of these two ants will then turn around and start walking in the opposite direction.</p>\n<p>For each ant, find its position after <var>T</var> seconds.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq L \\leq 10^9</var></li>\n<li><var>1 \\leq T \\leq 10^9</var></li>\n<li><var>0 \\leq X_1 &lt; X_2 &lt; ... &lt; X_N \\leq L - 1</var></li>\n<li><var>1 \\leq W_i \\leq 2</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>L</var> <var>T</var>\n<var>X_1</var> <var>W_1</var>\n<var>X_2</var> <var>W_2</var>\n<var>:</var>\n<var>X_N</var> <var>W_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines.\nThe <var>i</var>-th line should contain the coordinate of ant <var>i</var> after <var>T</var> seconds. Here, each coordinate must be between <var>0</var> and <var>L-1</var>, inclusive.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 8 3\n0 1\n3 2\n6 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n3\n0\n</pre>\n<p><var>1.5</var> seconds after the ants start walking, ant <var>1</var> and <var>2</var> bump into each other at coordinate <var>1.5</var>.\n<var>1</var> second after that, ant <var>1</var> and <var>3</var> bump into each other at coordinate <var>0.5</var>.\n<var>0.5</var> seconds after that, that is, <var>3</var> seconds after the ants start walking, ants <var>1</var>, <var>2</var> and <var>3</var> are at coordinates <var>1</var>, <var>3</var> and <var>0</var>, respectively.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 20 9\n7 2\n9 1\n12 1\n18 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n18\n18\n1\n</pre></section>\n</div>\n</span>", "p03748": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Joisino has a lot of red and blue bricks and a large box.\nShe will build a tower of these bricks in the following manner.</p>\n<p>First, she will pick a total of <var>N</var> bricks and put them into the box.\nHere, there may be any number of bricks of each color in the box, as long as there are <var>N</var> bricks in total.\nParticularly, there may be zero red bricks or zero blue bricks.\nThen, she will repeat an operation <var>M</var> times, which consists of the following three steps:</p>\n<ul>\n<li>Take out an arbitrary brick from the box.</li>\n<li>Put one red brick and one blue brick into the box.</li>\n<li>Take out another arbitrary brick from the box.</li>\n</ul>\n<p>After the <var>M</var> operations, Joisino will build a tower by stacking the <var>2 \\times M</var> bricks removed from the box, in the order they are taken out.\nShe is interested in the following question: how many different sequences of colors of these <var>2 \\times M</var> bricks are possible?\nWrite a program to find the answer.\nSince it can be extremely large, print the count modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 3000</var></li>\n<li><var>1 \\leq M \\leq 3000</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the count of the different possible sequences of colors of <var>2 \\times M</var> bricks that will be stacked, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>56\n</pre>\n<p>A total of six bricks will be removed from the box. The only impossible sequences of colors of these bricks are the ones where the colors of the second, third, fourth and fifth bricks are all the same. Therefore, there are <var>2^6 - 2 \\times 2 \\times 2 = 56</var> possible sequences of colors.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1048576\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>1000 3000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>693347555\n</pre></section>\n</div>\n</span>", "p03750": "<span class=\"lang-en\">\n<p>Score : <var>2000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> cards. The two sides of each of these cards are distinguishable.\nThe <var>i</var>-th of these cards has an integer <var>A_i</var> printed on the front side, and another integer <var>B_i</var> printed on the back side.\nWe will call the deck of these cards <var>X</var>.\nThere are also <var>N+1</var> cards of another kind.\nThe <var>i</var>-th of these cards has an integer <var>C_i</var> printed on the front side, and nothing is printed on the back side.\nWe will call this another deck of cards <var>Y</var>.</p>\n<p>You will play <var>Q</var> rounds of a game.\nEach of these rounds is played independently.\nIn the <var>i</var>-th round, you are given a new card. The two sides of this card are distinguishable.\nIt has an integer <var>D_i</var> printed on the front side, and another integer <var>E_i</var> printed on the back side.\nA new deck of cards <var>Z</var> is created by adding this card to <var>X</var>.\nThen, you are asked to form <var>N+1</var> pairs of cards, each consisting of one card from <var>Z</var> and one card from <var>Y</var>.\nEach card must belong to exactly one of the pairs.\nAdditionally, for each card from <var>Z</var>, you need to specify which side to <em>use</em>.\nFor each pair, the following condition must be met:</p>\n<ul>\n<li>(The integer printed on the used side of the card from <var>Z</var>) <var> \\leq </var> (The integer printed on the card from <var>Y</var>)</li>\n</ul>\n<p>If it is not possible to satisfy this condition regardless of how the pairs are formed and which sides are used, the score for the round will be <var>-1</var>.\nOtherwise, the score for the round will be the count of the cards from <var>Z</var> whose front side is used.</p>\n<p>Find the maximum possible score for each round.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>All input values are integers.</li>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>1 \\leq A_i ,B_i ,C_i ,D_i ,E_i \\leq 10^9</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n<var>:</var>\n<var>A_N</var> <var>B_N</var>\n<var>C_1</var> <var>C_2</var> <var>..</var> <var>C_{N+1}</var>\n<var>Q</var>\n<var>D_1</var> <var>E_1</var>\n<var>D_2</var> <var>E_2</var>\n<var>:</var>\n<var>D_Q</var> <var>E_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>For each round, print the maximum possible score in its own line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n4 1\n5 3\n3 1\n1 2 3 4\n3\n5 4\n4 3\n2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>0\n1\n2\n</pre>\n<p>For example, in the third round, the cards in <var>Z</var> are <var>(4,1),(5,3),(3,1),(2,3)</var>.\nThe score of <var>2</var> can be obtained by using front, back, back and front sides of them, and pair them with the fourth, third, first and second cards in <var>Y</var>, respectively.\nIt is not possible to obtain a score of <var>3</var> or greater, and thus the answer is <var>2</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\n7 1\n9 7\n13 13\n11 8\n12 9\n16 7 8 6 9 11\n7\n6 11\n7 10\n9 3\n12 9\n18 16\n8 9\n10 15\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>4\n3\n3\n1\n-1\n3\n2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9\n89 67\n37 14\n6 1\n42 25\n61 22\n23 1\n63 60\n93 62\n14 2\n67 96 26 17 1 62 56 92 13 38\n11\n93 97\n17 93\n61 57\n88 62\n98 29\n49 1\n5 1\n1 77\n34 1\n63 27\n22 66\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>7\n9\n8\n7\n7\n9\n9\n10\n9\n7\n9\n</pre></section>\n</div>\n</span>", "p03759": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Three poles stand evenly spaced along a line. Their heights are <var>a</var>, <var>b</var> and <var>c</var> meters, from left to right.\nWe will call the arrangement of the poles <em>beautiful</em> if the tops of the poles lie on the same line, that is, <var>b-a = c-b</var>.</p>\n<p>Determine whether the arrangement of the poles is beautiful.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq a,b,c \\leq 100</var></li>\n<li><var>a</var>, <var>b</var> and <var>c</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var> <var>c</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>YES</code> if the arrangement of the poles is beautiful; print <code>NO</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 4 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\n</pre>\n<p>Since <var>4-2 = 6-4</var>, this arrangement of poles is beautiful.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 5 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>NO\n</pre>\n<p>Since <var>5-2 \\neq 6-5</var>, this arrangement of poles is not beautiful.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>YES\n</pre>\n<p>Since <var>1-2 = 2-3</var>, this arrangement of poles is beautiful.</p></section>\n</div>\n</span>", "p03760": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke signed up for a new website which holds programming competitions.\nHe worried that he might forget his password, and he took notes of it.\nSince directly recording his password would cause him trouble if stolen,\nhe took two notes: one contains the characters at the odd-numbered positions, and the other contains the characters at the even-numbered positions.</p>\n<p>You are given two strings <var>O</var> and <var>E</var>. <var>O</var> contains the characters at the odd-numbered positions retaining their relative order, and <var>E</var> contains the characters at the even-numbered positions retaining their relative order.\nRestore the original password.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>O</var> and <var>E</var> consists of lowercase English letters (<code>a</code> - <code>z</code>).</li>\n<li><var>1 \\leq |O|,|E| \\leq 50</var></li>\n<li><var>|O| - |E|</var> is either <var>0</var> or <var>1</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>O</var>\n<var>E</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the original password.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>xyz\nabc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>xaybzc\n</pre>\n<p>The original password is <code>xaybzc</code>. Extracting the characters at the odd-numbered positions results in <code>xyz</code>, and extracting the characters at the even-numbered positions results in <code>abc</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>atcoderbeginnercontest\natcoderregularcontest\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>aattccooddeerrbreeggiunlnaerrccoonntteesstt\n</pre></section>\n</div>\n</span>", "p03761": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke loves \"paper cutting\": he cuts out characters from a newspaper headline and rearranges them to form another string.</p>\n<p>He will receive a headline which contains one of the strings <var>S_1,...,S_n</var> tomorrow.\nHe is excited and already thinking of what string he will create.\nSince he does not know the string on the headline yet, he is interested in strings that can be created regardless of which string the headline contains.</p>\n<p>Find the longest string that can be created regardless of which string among <var>S_1,...,S_n</var> the headline contains.\nIf there are multiple such strings, find the lexicographically smallest one among them.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq n \\leq 50</var></li>\n<li><var>1 \\leq |S_i| \\leq 50</var> for every <var>i = 1, ..., n</var>.</li>\n<li><var>S_i</var> consists of lowercase English letters (<code>a</code> - <code>z</code>) for every <var>i = 1, ..., n</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>S_1</var>\n<var>...</var>\n<var>S_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the lexicographically smallest string among the longest strings that satisfy the condition.\nIf the answer is an empty string, print an empty line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\ncbaa\ndaacc\nacacac\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>aac\n</pre>\n<p>The strings that can be created from each of <code>cbaa</code>, <code>daacc</code> and <code>acacac</code>, are <code>aa</code>, <code>aac</code>, <code>aca</code>, <code>caa</code> and so forth.\nAmong them, <code>aac</code>, <code>aca</code> and <code>caa</code> are the longest, and the lexicographically smallest of these three is <code>aac</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\na\naa\nb\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>\n</pre>\n<p>The answer is an empty string.</p></section>\n</div>\n</span>", "p03763": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke loves \"paper cutting\": he cuts out characters from a newspaper headline and rearranges them to form another string.</p>\n<p>He will receive a headline which contains one of the strings <var>S_1,...,S_n</var> tomorrow.\nHe is excited and already thinking of what string he will create.\nSince he does not know the string on the headline yet, he is interested in strings that can be created regardless of which string the headline contains.</p>\n<p>Find the longest string that can be created regardless of which string among <var>S_1,...,S_n</var> the headline contains.\nIf there are multiple such strings, find the lexicographically smallest one among them.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq n \\leq 50</var></li>\n<li><var>1 \\leq |S_i| \\leq 50</var> for every <var>i = 1, ..., n</var>.</li>\n<li><var>S_i</var> consists of lowercase English letters (<code>a</code> - <code>z</code>) for every <var>i = 1, ..., n</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>S_1</var>\n<var>...</var>\n<var>S_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the lexicographically smallest string among the longest strings that satisfy the condition.\nIf the answer is an empty string, print an empty line.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\ncbaa\ndaacc\nacacac\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>aac\n</pre>\n<p>The strings that can be created from each of <code>cbaa</code>, <code>daacc</code> and <code>acacac</code>, are <code>aa</code>, <code>aac</code>, <code>aca</code>, <code>caa</code> and so forth.\nAmong them, <code>aac</code>, <code>aca</code> and <code>caa</code> are the longest, and the lexicographically smallest of these three is <code>aac</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\na\naa\nb\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>\n</pre>\n<p>The answer is an empty string.</p></section>\n</div>\n</span>", "p03765": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let us consider the following operations on a string consisting of <code>A</code> and <code>B</code>:</p>\n<ol>\n<li>Select a character in a string. If it is <code>A</code>, replace it with <code>BB</code>. If it is <code>B</code>, replace with <code>AA</code>.</li>\n<li>Select a substring that is equal to either <code>AAA</code> or <code>BBB</code>, and delete it from the string.</li>\n</ol>\n<p>For example, if the first operation is performed on <code>ABA</code> and the first character is selected, the string becomes <code>BBBA</code>.\nIf the second operation is performed on <code>BBBAAAA</code> and the fourth through sixth characters are selected, the string becomes <code>BBBA</code>.</p>\n<p>These operations can be performed any number of times, in any order.</p>\n<p>You are given two string <var>S</var> and <var>T</var>, and <var>q</var> queries <var>a_i, b_i, c_i, d_i</var>.\nFor each query, determine whether <var>S_{a_i} S_{{a_i}+1} ... S_{b_i}</var>, a substring of <var>S</var>, can be made into <var>T_{c_i} T_{{c_i}+1} ... T_{d_i}</var>, a substring of <var>T</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S|, |T| \\leq 10^5</var></li>\n<li><var>S</var> and <var>T</var> consist of letters <code>A</code> and <code>B</code>.</li>\n<li><var>1 \\leq q \\leq 10^5</var></li>\n<li><var>1 \\leq a_i \\leq b_i \\leq |S|</var></li>\n<li><var>1 \\leq c_i \\leq d_i \\leq |T|</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n<var>T</var>\n<var>q</var>\n<var>a_1</var> <var>b_1</var> <var>c_1</var> <var>d_1</var>\n<var>...</var>\n<var>a_q</var> <var>b_q</var> <var>c_q</var> <var>d_q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>q</var> lines. The <var>i</var>-th line should contain the response to the <var>i</var>-th query. If <var>S_{a_i} S_{{a_i}+1} ... S_{b_i}</var> can be made into <var>T_{c_i} T_{{c_i}+1} ... T_{d_i}</var>, print <code>YES</code>. Otherwise, print <code>NO</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>BBBAAAABA\nBBBBA\n4\n7 9 2 5\n7 9 1 4\n1 7 2 5\n1 7 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>YES\nNO\nYES\nNO\n</pre>\n<p>The first query asks whether the string <code>ABA</code> can be made into <code>BBBA</code>.\nAs explained in the problem statement, it can be done by the first operation.</p>\n<p>The second query asks whether <code>ABA</code> can be made into <code>BBBB</code>, and the fourth query asks whether <code>BBBAAAA</code> can be made into <code>BBB</code>.\nNeither is possible.</p>\n<p>The third query asks whether the string <code>BBBAAAA</code> can be made into <code>BBBA</code>.\nAs explained in the problem statement, it can be done by the second operation.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>AAAAABBBBAAABBBBAAAA\nBBBBAAABBBBBBAAAAABB\n10\n2 15 2 13\n2 13 6 16\n1 13 2 20\n4 20 3 20\n1 18 9 19\n2 14 1 11\n3 20 3 15\n6 16 1 17\n4 18 8 20\n7 20 3 14\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>YES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n</pre></section>\n</div>\n</span>", "p03766": "<span class=\"lang-en\">\n<p>Score : <var>1000</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>How many infinite sequences <var>a_1, a_2, ...</var> consisting of {<var>{1, ... ,n}</var>} satisfy the following conditions?</p>\n<ul>\n<li>The <var>n</var>-th and subsequent elements are all equal. That is, if <var>n \\leq i,j</var>, <var>a_i = a_j</var>.</li>\n<li>For every integer <var>i</var>, the <var>a_i</var> elements immediately following the <var>i</var>-th element are all equal. That is, if <var>i &lt; j &lt; k\\leq i+a_i</var>, <var>a_j = a_k</var>.</li>\n</ul>\n<p>Find the count modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq n \\leq 10^6</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print how many sequences satisfy the conditions, modulo <var>10^9+7</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n<p>The four sequences that satisfy the conditions are:</p>\n<ul>\n<li><var>1, 1, 1, ...</var></li>\n<li><var>1, 2, 2, ...</var></li>\n<li><var>2, 1, 1, ...</var></li>\n<li><var>2, 2, 2, ...</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>654321\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>968545283\n</pre></section>\n</div>\n</span>", "p03773": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Dolphin loves programming contests. Today, he will take part in a contest in AtCoder.<br/>\nIn this country, 24-hour clock is used. For example, <var>9:00</var> p.m. is referred to as \"<var>21</var> o'clock\".<br/>\nThe current time is <var>A</var> o'clock, and a contest will begin in exactly <var>B</var> hours.\nWhen will the contest begin? Answer in 24-hour time.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>0 \\leq A,B \\leq 23</var></li>\n<li><var>A</var> and <var>B</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the hour of the starting time of the contest in 24-hour time.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>9 12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>21\n</pre>\n<p>In this input, the current time is <var>9</var> o'clock, and <var>12</var> hours later it will be <var>21</var> o'clock in 24-hour time.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>19 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>19\n</pre>\n<p>The contest has just started.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>23 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1\n</pre>\n<p>The contest will begin at <var>1</var> o'clock the next day.</p></section>\n</div>\n</span>", "p03774": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> students and <var>M</var> checkpoints on the <var>xy</var>-plane.<br/>\nThe coordinates of the <var>i</var>-th student <var>(1 \\leq i \\leq N)</var> is <var>(a_i,b_i)</var>, and the coordinates of the checkpoint numbered <var>j</var> <var>(1 \\leq j \\leq M)</var> is <var>(c_j,d_j)</var>.<br/>\nWhen the teacher gives a signal, each student has to go to the nearest checkpoint measured in <em>Manhattan distance</em>. <br/>\nThe Manhattan distance between two points <var>(x_1,y_1)</var> and <var>(x_2,y_2)</var> is <var>|x_1-x_2|+|y_1-y_2|</var>.<br/>\nHere, <var>|x|</var> denotes the absolute value of <var>x</var>.<br/>\nIf there are multiple nearest checkpoints for a student, he/she will select the checkpoint with the smallest index.<br/>\nWhich checkpoint will each student go to?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N,M \\leq 50</var></li>\n<li><var>-10^8 \\leq a_i,b_i,c_j,d_j \\leq 10^8</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>M</var>\n<var>a_1</var> <var>b_1</var>\n<var>:</var>  \n<var>a_N</var> <var>b_N</var>\n<var>c_1</var> <var>d_1</var>\n<var>:</var>  \n<var>c_M</var> <var>d_M</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>N</var> lines.<br/>\nThe <var>i</var>-th line <var>(1 \\leq i \\leq N)</var> should contain the index of the checkpoint for the <var>i</var>-th student to go.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 2\n2 0\n0 0\n-1 0\n1 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n1\n</pre>\n<p>The Manhattan distance between the first student and each checkpoint is:</p>\n<ul>\n<li>For checkpoint <var>1</var>: <var>|2-(-1)|+|0-0|=3</var></li>\n<li>For checkpoint <var>2</var>: <var>|2-1|+|0-0|=1</var></li>\n</ul>\n<p>The nearest checkpoint is checkpoint <var>2</var>. Thus, the first line in the output should contain <var>2</var>.</p>\n<p>The Manhattan distance between the second student and each checkpoint is:</p>\n<ul>\n<li>For checkpoint <var>1</var>: <var>|0-(-1)|+|0-0|=1</var></li>\n<li>For checkpoint <var>2</var>: <var>|0-1|+|0-0|=1</var></li>\n</ul>\n<p>When there are multiple nearest checkpoints, the student will go to the checkpoint with the smallest index. Thus, the second line in the output should contain <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 4\n10 10\n-10 -10\n3 3\n1 2\n2 3\n3 5\n3 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n1\n2\n</pre>\n<p>There can be multiple checkpoints at the same coordinates.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 5\n-100000000 -100000000\n-100000000 100000000\n100000000 -100000000\n100000000 100000000\n0 0\n0 0\n100000000 100000000\n100000000 -100000000\n-100000000 100000000\n-100000000 -100000000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5\n4\n3\n2\n1\n</pre></section>\n</div>\n</span>", "p03775": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given an integer <var>N</var>.<br/>\nFor two positive integers <var>A</var> and <var>B</var>, we will define <var>F(A,B)</var> as the larger of the following: the number of digits in the decimal notation of <var>A</var>, and the number of digits in the decimal notation of <var>B</var>.<br/>\nFor example, <var>F(3,11) = 2</var> since <var>3</var> has one digit and <var>11</var> has two digits.<br/>\nFind the minimum value of <var>F(A,B)</var> as <var>(A,B)</var> ranges over all pairs of positive integers such that <var>N = A \\times B</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^{10}</var></li>\n<li><var>N</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum value of <var>F(A,B)</var> as <var>(A,B)</var> ranges over all pairs of positive integers such that <var>N = A \\times B</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p><var>F(A,B)</var> has a minimum value of <var>3</var> at <var>(A,B)=(100,100)</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>1000003\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>7\n</pre>\n<p>There are two pairs <var>(A,B)</var> that satisfy the condition: <var>(1,1000003)</var> and <var>(1000003,1)</var>. For these pairs, <var>F(1,1000003)=F(1000003,1)=7</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>9876543210\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>6\n</pre></section>\n</div>\n</span>", "p03776": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given <var>N</var> items.<br/>\nThe <em>value</em> of the <var>i</var>-th item <var>(1 \\leq i \\leq N)</var> is <var>v_i</var>.<br/>\nYour have to select at least <var>A</var> and at most <var>B</var> of these items.<br/>\nUnder this condition, find the maximum possible arithmetic mean of the values of selected items.<br/>\nAdditionally, find the number of ways to select items so that the mean of the values of selected items is maximized.  </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq A,B \\leq N</var></li>\n<li><var>1 \\leq v_i \\leq 10^{15}</var></li>\n<li>Each <var>v_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var> <var>B</var>\n<var>v_1</var>\n<var>v_2</var>\n...\n<var>v_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print two lines.<br/>\nThe first line should contain the maximum possible arithmetic mean of the values of selected items. The output should be considered correct if the absolute or relative error is at most <var>10^{-6}</var>.<br/>\nThe second line should contain the number of ways to select items so that the mean of the values of selected items is maximized.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 2 2\n1 2 3 4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4.500000\n1\n</pre>\n<p>The mean of the values of selected items will be maximized when selecting the fourth and fifth items. Hence, the first line of the output should contain <var>4.5</var>.<br/>\nThere is no other way to select items so that the mean of the values will be <var>4.5</var>, and thus the second line of the output should contain <var>1</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>4 2 3\n10 20 10 10\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>15.000000\n3\n</pre>\n<p>There can be multiple ways to select items so that the mean of the values will be maximized.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>5 1 5\n1000000000000000 999999999999999 999999999999998 999999999999997 999999999999996\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>1000000000000000.000000\n1\n</pre></section>\n</div>\n</span>", "p03777": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Two deer, AtCoDeer and TopCoDeer, are playing a game called <em>Honest or Dishonest</em>.\nIn this game, an honest player always tells the truth, and an dishonest player always tell lies.\nYou are given two characters <var>a</var> and <var>b</var> as the input. Each of them is either <code>H</code> or <code>D</code>, and carries the following information:</p>\n<p>If <var>a</var>=<code>H</code>, AtCoDeer is honest; if <var>a</var>=<code>D</code>, AtCoDeer is dishonest.\nIf <var>b</var>=<code>H</code>, AtCoDeer is saying that TopCoDeer is honest; if <var>b</var>=<code>D</code>, AtCoDeer is saying that TopCoDeer is dishonest.</p>\n<p>Given this information, determine whether TopCoDeer is honest.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>a</var>=<code>H</code> or <var>a</var>=<code>D</code>.</li>\n<li><var>b</var>=<code>H</code> or <var>b</var>=<code>D</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>a</var> <var>b</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If TopCoDeer is honest, print <code>H</code>. If he is dishonest, print <code>D</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>H H\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>H\n</pre>\n<p>In this input, AtCoDeer is honest. Hence, as he says, TopCoDeer is honest.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>D H\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>D\n</pre>\n<p>In this input, AtCoDeer is dishonest. Hence, contrary to what he says, TopCoDeer is dishonest.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>D D\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>H\n</pre></section>\n</div>\n</span>", "p03785": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Every day, <var>N</var> passengers arrive at Takahashi Airport.\nThe <var>i</var>-th passenger arrives at time <var>T_i</var>.</p>\n<p>Every passenger arrived at Takahashi airport travels to the city by bus. Each bus can accommodate up to <var>C</var> passengers.\nNaturally, a passenger cannot take a bus that departs earlier than the airplane arrives at the airport.\nAlso, a passenger will get angry if he/she is still unable to take a bus <var>K</var> units of time after the arrival of the airplane.\nFor that reason, it is necessary to arrange buses so that the <var>i</var>-th passenger can take a bus departing at time between <var>T_i</var> and <var>T_i + K</var> (inclusive).</p>\n<p>When setting the departure times for buses under this condition, find the minimum required number of buses.\nHere, the departure time for each bus does not need to be an integer, and there may be multiple buses that depart at the same time.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100000</var></li>\n<li><var>1 \\leq C \\leq 10^9</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>1 \\leq T_i \\leq 10^9</var></li>\n<li><var>C</var>, <var>K</var> and <var>T_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>C</var> <var>K</var>\n<var>T_1</var>\n<var>T_2</var>\n<var>:</var>\n<var>T_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum required number of buses.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 3 5\n1\n2\n3\n6\n12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n<p>For example, the following three buses are enough:</p>\n<ul>\n<li>A bus departing at time <var>4.5</var>, that carries the passengers arriving at time <var>2</var> and <var>3</var>.</li>\n<li>A bus departing at time <var>6</var>, that carries the passengers arriving at time <var>1</var> and <var>6</var>.</li>\n<li>A bus departing at time <var>12</var>, that carries the passenger arriving at time <var>12</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>6 3 3\n7\n6\n2\n8\n10\n6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>3\n</pre></section>\n</div>\n</span>", "p03788": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi has a lot of peculiar devices.\nThese cylindrical devices receive balls from left and right.\nEach device is in one of the two states A and B, and for each state, the device operates as follows:</p>\n<ul>\n<li>When a device in state A receives a ball from either side (left or right), the device throws out the ball from the same side, then immediately goes into state B.</li>\n<li>When a device in state B receives a ball from either side, the device throws out the ball from the other side, then immediately goes into state A.</li>\n</ul>\n<p>The transition of the state of a device happens momentarily and always completes before it receives another ball.</p>\n<p>Takahashi built a contraption by concatenating <var>N</var> of these devices. In this contraption,</p>\n<ul>\n<li>A ball that was thrown out from the right side of the <var>i</var>-th device from the left (<var>1 \\leq i \\leq N-1</var>) immediately enters the <var>(i+1)</var>-th device from the left side.</li>\n<li>A ball that was thrown out from the left side of the <var>i</var>-th device from the left (<var>2 \\leq i \\leq N</var>) immediately enters the <var>(i-1)</var>-th device from the right side.</li>\n</ul>\n<p>The initial state of the <var>i</var>-th device from the left is represented by the <var>i</var>-th character in a string <var>S</var>.\nFrom this situation, Takahashi performed the following <var>K</var> times: put a ball into the leftmost device from the left side, then wait until the ball comes out of the contraption from either end.\nHere, it can be proved that the ball always comes out of the contraption after a finite time.\nFind the state of each device after <var>K</var> balls are processed.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 200,000</var></li>\n<li><var>1 \\leq K \\leq 10^9</var></li>\n<li><var>|S|=N</var></li>\n<li>Each character in <var>S</var> is either <code>A</code> or <code>B</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>K</var>\n<var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print a string that represents the state of each device after <var>K</var> balls are processed.\nThe string must be <var>N</var> characters long, and the <var>i</var>-th character must correspond to the state of the <var>i</var>-th device from the left.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5 1\nABAAA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>BBAAA\n</pre>\n<p>In this input, we put a ball into the leftmost device from the left side, then it is returned from the same place.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 2\nABAAA\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>ABBBA\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 123456789\nAABB\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>BABA\n</pre></section>\n</div>\n</span>", "p03789": "<span class=\"lang-en\">\n<p>Score : <var>1300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We will call a non-negative integer <em>increasing</em> if, for any two adjacent digits in its decimal representation, the digit to the right is greater than or equal to the digit to the left.\nFor example, <var>1558</var>, <var>11</var>, <var>3</var> and <var>0</var> are all increasing; <var>10</var> and <var>20170312</var> are not.</p>\n<p>Snuke has an integer <var>N</var>. Find the minimum number of increasing integers that can represent <var>N</var> as their sum.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^{500000}</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the minimum number of increasing integers that can represent <var>N</var> as their sum.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>80\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>One possible representation is <var>80 = 77 + 3</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>123456789\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1\n</pre>\n<p><var>123456789</var> in itself is increasing, and thus it can be represented as the sum of one increasing integer.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>20170312\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>7204647845201772120166980358816078279571541735614841625060678056933503\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>31\n</pre></section>\n</div>\n</span>", "p03629": "<span class=\"lang-en\">\n<p>Score : <var>600</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>A subsequence of a string <var>S</var> is a string that can be obtained by deleting zero or more characters from <var>S</var> without changing the order of the remaining characters.\nFor example, <code>arc</code>, <code>artistic</code> and (an empty string) are all subsequences of <code>artistic</code>; <code>abc</code> and <code>ci</code> are not.</p>\n<p>You are given a string <var>A</var> consisting of lowercase English letters.\nFind the shortest string among the strings consisting of lowercase English letters that are not subsequences of <var>A</var>.\nIf there are more than one such string, find the lexicographically smallest one among them.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |A| \\leq 2 \\times 10^5</var></li>\n<li><var>A</var> consists of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Input is given from Standard Input in the following format:</p>\n<pre><var>A</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the lexicographically smallest string among the shortest strings consisting of lowercase English letters that are not subsequences of <var>A</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>atcoderregularcontest\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>b\n</pre>\n<p>The string <code>atcoderregularcontest</code> contains <code>a</code> as a subsequence, but not <code>b</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>abcdefghijklmnopqrstuvwxyz\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>aa\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>frqnvhydscshfcgdemurlfrutcpzhopfotpifgepnqjxupnskapziurswqazdwnwbgdhyktfyhqqxpoidfhjdakoxraiedxskywuepzfniuyskxiyjpjlxuqnfgmnjcvtlpnclfkpervxmdbvrbrdn\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>aca\n</pre></section>\n</div>\n</span>", "p03834": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>As a New Year's gift, Dolphin received a string <var>s</var> of length <var>19</var>.<br/>\nThe string <var>s</var> has the following format: <code>[five lowercase English letters],[seven lowercase English letters],[five lowercase English letters]</code>.<br/>\nDolphin wants to convert the comma-separated string <var>s</var> into a space-separated string.<br/>\nWrite a program to perform the conversion for him.  </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The length of <var>s</var> is <var>19</var>.</li>\n<li>The sixth and fourteenth characters in <var>s</var> are <code>,</code>.</li>\n<li>The other characters in <var>s</var> are lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the string after the conversion.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>happy,newyear,enjoy\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>happy newyear enjoy\n</pre>\n<p>Replace all the commas in <code>happy,newyear,enjoy</code> with spaces to obtain <code>happy newyear enjoy</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>haiku,atcoder,tasks\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>haiku atcoder tasks\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>abcde,fghihgf,edcba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>abcde fghihgf edcba\n</pre></section>\n</div>\n</span>", "p03852": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Given a lowercase English letter <var>c</var>, determine whether it is a vowel. Here, there are five vowels in the English alphabet: <code>a</code>, <code>e</code>, <code>i</code>, <code>o</code> and <code>u</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>c</var> is a lowercase English letter.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>c</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>c</var> is a vowel, print <code>vowel</code>. Otherwise, print <code>consonant</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>a\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>vowel\n</pre>\n<p>Since <code>a</code> is a vowel, print <code>vowel</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>z\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>consonant\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>s\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>consonant\n</pre></section>\n</div>\n</span>", "p03860": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Snuke is going to open a contest named \"AtCoder <var>s</var> Contest\".\nHere, <var>s</var> is a string of length <var>1</var> or greater, where the first character is an uppercase English letter, and the second and subsequent characters are lowercase English letters.</p>\n<p>Snuke has decided to abbreviate the name of the contest as \"A<var>x</var>C\".\nHere, <var>x</var> is the uppercase English letter at the beginning of <var>s</var>.</p>\n<p>Given the name of the contest, print the abbreviation of the name.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li>The length of <var>s</var> is between <var>1</var> and <var>100</var>, inclusive.</li>\n<li>The first character in <var>s</var> is an uppercase English letter.</li>\n<li>The second and subsequent characters in <var>s</var> are lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre>AtCoder <var>s</var> Contest\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the abbreviation of the name of the contest.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>AtCoder Beginner Contest\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>ABC\n</pre>\n<p>The contest in which you are participating now.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>AtCoder Snuke Contest\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>ASC\n</pre>\n<p>This contest does not actually exist.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>AtCoder X Contest\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>AXC\n</pre></section>\n</div>\n</span>", "p03888": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>In an electric circuit, when two resistors <var>R_1</var> and <var>R_2</var> are connected in parallel, the equivalent resistance <var>R_3</var> can be derived from the following formula:</p>\n<ul>\n<li><var>\\frac{1}{R_1} + \\frac{1}{R_2} = \\frac{1}{R_3}</var></li>\n</ul>\n<p>Given <var>R_1</var> and <var>R_2</var>, find <var>R_3</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq R_1, R_2 \\leq 100</var></li>\n<li><var>R_1</var> and <var>R_2</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>R_1</var> <var>R_2</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value of <var>R_3</var>.</p>\n<p>The output is considered correct if the absolute or relative error is at most <var>10^{-6}</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1.2000000000\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>100 99\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>49.7487437186\n</pre></section>\n</div>\n</span>", "p03889": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> consisting of letters <code>b</code>, <code>d</code>, <code>p</code> and <code>q</code>.\nDetermine whether <var>S</var> is a <em>mirror string</em>.</p>\n<p>Here, a mirror string is a string <var>S</var> such that the following sequence of operations on <var>S</var> results in the same string <var>S</var>:</p>\n<ol>\n<li>\n<p>Reverse the order of the characters in <var>S</var>.</p>\n</li>\n<li>\n<p>Replace each occurrence of <code>b</code> by <code>d</code>, <code>d</code> by <code>b</code>, <code>p</code> by <code>q</code>, and <code>q</code> by <code>p</code>, simultaneously.</p>\n</li>\n</ol>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10^5</var></li>\n<li><var>S</var> consists of letters <code>b</code>, <code>d</code>, <code>p</code>, and <code>q</code>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If <var>S</var> is a mirror string, print <code>Yes</code>. Otherwise, print <code>No</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>pdbq\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>ppqb\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre></section>\n</div>\n</span>", "p03890": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><em>Kode Festival</em> is an anual contest where the hardest stone in the world is determined. (Kode is a Japanese word for \"hardness\".)</p>\n<p>This year, <var>2^N</var> stones participated. The hardness of the <var>i</var>-th stone is <var>A_i</var>.</p>\n<p>In the contest, stones are thrown at each other in a knockout tournament.</p>\n<p>When two stones with hardness <var>X</var> and <var>Y</var> are thrown at each other, the following will happen:</p>\n<ul>\n<li>\n<p>When <var>X</var> &gt; <var>Y</var>:\n  The stone with hardness <var>Y</var> will be destroyed and eliminated.\n  The hardness of the stone with hardness <var>X</var> will become <var>X-Y</var>.</p>\n</li>\n<li>\n<p>When <var>X</var> = <var>Y</var>:\n  One of the stones will be destroyed and eliminated.\n  The hardness of the other stone will remain the same.</p>\n</li>\n<li>\n<p>When <var>X</var> &lt; <var>Y</var>:\n  The stone with hardness <var>X</var> will be destroyed and eliminated.\n  The hardness of the stone with hardness <var>Y</var> will become <var>Y-X</var>.</p>\n</li>\n</ul>\n<p>The <var>2^N</var> stones will fight in a knockout tournament as follows:</p>\n<ol>\n<li>\n<p>The following pairs will fight: (the <var>1</var>-st stone versus the <var>2</var>-nd stone), (the <var>3</var>-rd stone versus the <var>4</var>-th stone), ...</p>\n</li>\n<li>\n<p>The following pairs will fight: (the winner of (<var>1</var>-st versus <var>2</var>-nd) versus the winner of (<var>3</var>-rd versus <var>4</var>-th)), (the winner of (<var>5</var>-th versus <var>6</var>-th) versus the winner of (<var>7</var>-th versus <var>8</var>-th)), ...</p>\n</li>\n<li>\n<p>And so forth, until there is only one stone remaining.</p>\n</li>\n</ol>\n<p>Determine the eventual hardness of the last stone remaining.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 18</var></li>\n<li><var>1 \\leq A_i \\leq 10^9</var></li>\n<li><var>A_i</var> is an integer.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>A_1</var>\n<var>A_2</var>\n:\n<var>A_{2^N}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the eventual hardness of the last stone remaining.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1\n3\n10\n19\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>7\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n1\n3\n2\n4\n6\n8\n100\n104\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n</pre></section>\n</div>\n</span>", "p03892": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi is drawing a segment on grid paper.</p>\n<p>From a certain square, a square that is <var>x</var> squares to the right and <var>y</var> squares above, is denoted as square <var>(x, y)</var>.</p>\n<p>When Takahashi draws a segment connecting the lower left corner of square <var>(A, B)</var> and the lower left corner of square <var>(C, D)</var>, find the number of the squares crossed by the segment.</p>\n<p>Here, the segment is said to <em>cross</em> a square if the segment has non-empty intersection with the region within the square, excluding the boundary.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq A, B, C, D \\leq 10^9</var></li>\n<li>At least one of <var>A \\neq C</var> and <var>B \\neq D</var> holds.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>A</var> <var>B</var> <var>C</var> <var>D</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of the squares crossed by the segment.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>1 1 3 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2 3 10 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03893": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>We have a cord whose length is a positive integer. We will perform the following condition until the length of the cord becomes at most <var>2</var>:</p>\n<ul>\n<li>Operation:\n  Cut the rope at two positions to obtain three cords, each with a length of a positive integer.\n  Among these, discard one with the longest length and one with the shortest length, and keep the remaining one.</li>\n</ul>\n<p>Let <var>f(N)</var> be the maximum possible number of times to perform this operation, starting with a cord with the length <var>N</var>.</p>\n<p>You are given a positive integer <var>X</var>. Find the maximum integer <var>N</var> such that <var>f(N)=X</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq X \\leq 40</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>X</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the value of the maximum integer <var>N</var> such that <var>f(N)=X</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>14\n</pre></section>\n</div>\n</span>", "p03894": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You have <var>N</var> cups and <var>1</var> ball.</p>\n<p>The cups are arranged in a row, from left to right.</p>\n<p>You turned down all the cups, then inserted the ball into the leftmost cup.</p>\n<p>Then, you will perform the following <var>Q</var> operations:</p>\n<ul>\n<li>The <var>i</var>-th operation: swap the positions of the <var>A_i</var>-th and <var>B_i</var>-th cups from the left. If one of these cups contains the ball, the ball will also move.</li>\n</ul>\n<p>Since you are a magician, you can cast a magic described below:</p>\n<ul>\n<li>Magic: When the ball is contained in the <var>i</var>-th cup from the left, teleport the ball into the adjacent cup (that is, the <var>(i-1)</var>-th or <var>(i+1)</var>-th cup, if they exist).</li>\n</ul>\n<p>The magic can be cast before the first operation, between two operations, or after the last operation, but you are allowed to cast it at most once during the whole process.</p>\n<p>Find the number of cups with a possibility of containing the ball after all the operations and possibly casting the magic.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>1 \\leq A_i &lt; B_i \\leq N</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>Q</var>\n<var>A_1</var> <var>B_1</var>\n<var>A_2</var> <var>B_2</var>\n:          \n<var>A_Q</var> <var>B_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of cups with a possibility of eventually containing the ball.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>10 3\n1 3\n2 4\n4 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>20 3\n1 7\n8 20\n1 19\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03895": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Takahashi recorded his daily life for the last few days as a integer sequence of length <var>2N</var>, as follows:</p>\n<ul>\n<li><var>a_1, b_1, a_2, b_2, ... , a_N, b_N</var></li>\n</ul>\n<p>This means that, starting from a certain time <var>T</var>, he was:</p>\n<ul>\n<li>sleeping for exactly <var>a_1</var> seconds</li>\n<li>then awake for exactly <var>b_1</var> seconds</li>\n<li>then sleeping for exactly <var>a_2</var> seconds</li>\n<li>:</li>\n<li>then sleeping for exactly <var>a_N</var> seconds</li>\n<li>then awake for exactly <var>b_N</var> seconds</li>\n</ul>\n<p>In this record, he waked up <var>N</var> times.</p>\n<p>Takahashi is wondering how many times he waked up early during the recorded period.</p>\n<p>Here, he is said to <em>wake up early</em> if he wakes up between <var>4:00</var> AM and <var>7:00</var> AM, inclusive.</p>\n<p>If he wakes up more than once during this period, each of these awakenings is counted as waking up early.</p>\n<p>Unfortunately, he forgot the time <var>T</var>.</p>\n<p>Find the maximum possible number of times he waked up early during the recorded period.</p>\n<p>For your information, a day consists of <var>86400</var> seconds, and the length of the period between <var>4:00</var> AM and <var>7:00</var> AM is <var>10800</var> seconds.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq a_i, b_i \\leq 10^5</var></li>\n<li><var>a_i</var> and <var>b_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n:\n<var>a_N</var> <var>b_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum possible number of times he waked up early during the recorded period.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3\n28800 57600\n28800 57600\n57600 28800\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n28800 57600\n4800 9600\n6000 1200\n600 600\n300 600\n5400 600\n6000 5760\n6760 2880\n6000 12000\n9000 600\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>5\n</pre></section>\n</div>\n</span>", "p03896": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There are <var>N</var> persons, conveniently numbered <var>1</var> through <var>N</var>. They will take <em>3y3s Challenge</em> for <var>N-1</var> seconds.</p>\n<p>During the challenge, each person must look at each of the <var>N-1</var> other persons for <var>1</var> seconds, in some order.</p>\n<p>If any two persons look at each other during the challenge, the challenge ends in failure.</p>\n<p>Find the order in which each person looks at each of the <var>N-1</var> other persons, to be successful in the challenge.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 100</var></li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there exists no way to be successful in the challenge, print <code>-1</code>.</p>\n<p>If there exists a way to be successful in the challenge, print any such way in the following format:</p>\n<pre><var>A_{1,1}</var> <var>A_{1,2}</var> <var>...</var> <var>A_{1, N-1}</var>\n<var>A_{2,1}</var> <var>A_{2,2}</var> <var>...</var> <var>A_{2, N-1}</var>\n:\n<var>A_{N,1}</var> <var>A_{N,2}</var> <var>...</var> <var>A_{N, N-1}</var>\n</pre>\n<p>where <var>A_{i, j}</var> is the index of the person that the person numbered <var>i</var> looks at during the <var>j</var>-th second.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Judging</h3><p>The output is considered correct only if all of the following conditions are satisfied:</p>\n<ul>\n<li><var>1 \\leq A_{i,j} \\leq N</var></li>\n<li>For each <var>i</var>, <var>A_{i,1}, A_{i,2}, ... , A_{i, N-1}</var> are pairwise distinct.</li>\n<li>Let <var>X = A_{i, j}</var>, then <var>A_{X, j} \\neq i</var> always holds.</li>\n</ul>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2 3 4 5 6 7\n5 3 1 6 4 7\n2 7 4 1 5 6\n2 1 7 5 3 6\n1 4 3 7 6 2\n2 5 7 3 4 1\n2 6 1 4 5 3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p03898": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a tree with <var>N</var> vertices, numbered <var>1</var> through <var>N</var>.</p>\n<p>The <var>i</var>-th of the <var>N-1</var> edges connects the vertices <var>p_i</var> and <var>q_i</var>.</p>\n<p>Among the sequences of distinct vertices <var>v_1, v_2, ..., v_M</var> that satisfy the following condition, find the maximum value of <var>M</var>.</p>\n<ul>\n<li>For every <var>1 \\leq i &lt; M</var>, the path connecting the vertices <var>v_i</var> and <var>v_{i+1}</var> do not contain any vertex in <var>v</var>, except for <var>v_i</var> and <var>v_{i+1}</var>.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq p_i, q_i \\leq N</var></li>\n<li>The given graph is a tree.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>p_1</var> <var>q_1</var>\n<var>p_2</var> <var>q_2</var>\n:\n<var>p_{N-1}</var> <var>q_{N-1}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the maximum value of <var>M</var>, the number of elements, among the sequences of vertices that satisfy the condition.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4\n1 2\n2 3\n2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>3\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>10\n7 9\n1 2\n6 4\n8 1\n3 7\n6 5\n2 10\n9 6\n2 6\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>8\n</pre></section>\n</div>\n</span>", "p03929": "<span class=\"lang-en lang-child hidden-lang\">\n<div class=\"part\">\n\t\t\t\tMax Score: $250$ Points <br/>\n<section>\n<h3>Problem Statement</h3>\n\t\t\t\t\tSnuke has a very long calendar. It has a grid with $n$ rows and $7$ columns. One day, he noticed that calendar has a following regularity. <br/>\n<ul>\n<li>The cell at the $i$-th row and $j$-th column contains the integer $7i+j-7$.</li>\n</ul>\n\t\t\t\t\tA good sub-grid is a $3 \\times 3$ sub-grid and the sum of integers in this sub-grid mod $11$ is $k$. <br/>\n\t\t\t\t\tHow many good sub-grid are there? Write a program and help him. <br/>\n</section>\n</div>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n\t\t\t\t\t\tThe input is given from standard input in the following format. <br/>\n<br/>\n<blockquote>$n \\quad k$\n</blockquote>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<ul>\n<li>Print the number of good sub-grid. If there are no solution exists, print <code>0</code>.</li>\n</ul>\n</section>\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>$1 \\le n \\le 10^9$</li>\n<li>$0 \\le k \\le 10$</li>\n</ul>\n</section>\n<section>\n<h3>Subtasks</h3>\n<p>Subtask 1 [ $150$ points ]</p>\n<ul>\n<li>The testcase in the subtask satisfies $1 \\le n \\le 100$.</li>\n</ul>\n<br/>\n<p>Subtask 2 [ $100$ points ]</p>\n<ul>\n<li>There are no additional constraints.</li>\n</ul>\n<br/>\n</section>\n</div>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>\n7 7\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n\t\t\t\t\tIn this case, the calendar likes this matrix.<br/>\n<table class=\"table-striped table-bordered table-condensed\">\n<tr align=\"center\">\n<th></th>\n<td width=\"75\">Sun.</td>\n<td width=\"75\">Mon.</td>\n<td width=\"75\">Tue.</td>\n<td width=\"75\">Wed.</td>\n<td width=\"75\">Thu.</td>\n<td width=\"75\">Fri.</td>\n<td width=\"75\">Sat.</td>\n</tr>\n<tr align=\"center\">\n<th>Week 1</th>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr align=\"center\">\n<th>Week 2</th>\n<td>8</td>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n<td>12</td>\n<td>13</td>\n<td>14</td>\n</tr>\n<tr align=\"center\">\n<th>Week 3</th>\n<td>15</td>\n<td>16</td>\n<td>17</td>\n<td>18</td>\n<td>19</td>\n<td>20</td>\n<td>21</td>\n</tr>\n<tr align=\"center\">\n<th>Week 4</th>\n<td>22</td>\n<td>23</td>\n<td>24</td>\n<td>25</td>\n<td>26</td>\n<td>27</td>\n<td>28</td>\n</tr>\n<tr align=\"center\">\n<th>Week 5</th>\n<td>29</td>\n<td>30</td>\n<td>31</td>\n<td>32</td>\n<td>33</td>\n<td>34</td>\n<td>35</td>\n</tr>\n<tr align=\"center\">\n<th>Week 6</th>\n<td>36</td>\n<td>37</td>\n<td>38</td>\n<td>39</td>\n<td>40</td>\n<td>41</td>\n<td>42</td>\n</tr>\n<tr align=\"center\">\n<th>Week 7</th>\n<td>43</td>\n<td>44</td>\n<td>45</td>\n<td>46</td>\n<td>47</td>\n<td>48</td>\n<td>49</td>\n</tr>\n</table>\n<br/>\n\t\t\t\t\tThe cell at $i$-th row and $j$-th column is denoted $(i, j)$. <br/>\n<ul>\n<li>If upper-left is $(1, 5)$, the sum of integers is $5+6+7+12+13+14+19+20+21=117$.</li>\n<li>If upper-left is $(3, 2)$, the sum of integers is $16+17+18+23+24+25+30+31+32=216$.</li>\n</ul>\n\t\t\t\t\tTherefore, there are 2 good sub-grids.<br/>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>\n6 0\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>\n2\n</pre>\n\t\t\t\t\tIf upper-left is $(1, 3)$ or $(4, 4)$, it is a good sub-grid.<br/>\n</section>\n</div>\n<div class=\"part\">\n<section></section>\n</div>\n<div class=\"part\">\n<h3>Sample Input 3</h3>\n<pre>\n18 10\n</pre>\n</div></span>", "p03930": "<span class=\"lang-en lang-child hidden-lang\">\n<div id=\"task-statement\">\n<div class=\"part\">\n\t\t\t\t\tMax Score: $300$ Points <br/>\n<section>\n<h3>Problem Statement</h3>\n\t\t\t\t\t\tWe are playing a puzzle. An upright board with $H$ rows by $W$ columns of cells, is used in this puzzle. <br/>\n\t\t\t\t\t\tA stone in $i$-th row and $j$-th column engraved with a digit, one of 1 through 9, is placed in each of the cells. <br/>\n\t\t\t\t\t\tYou can erase 1 cell in the board. <br/>\n<br/>\n\t\t\t\t\t\tThe game process is following: <br/>\n<ol class=\"simple\">\n<li>When $K$ or more stones in horizontally adjacent cells are engraved with the same digit, the stones will disappear. Disappearances of all such groups of stones take place simultaneously.</li>\n<li>When stones are in the cells above the emptied cells, these stones drop down so that the emptied cells are filled.</li>\n<li>After the completion of all stone drops, if one or more groups of stones satisfy the disappearance condition, repeat by returning to the step 1.</li>\n<li>Score is $\\sum_i 2^i \\times \\left(\\text{Sum of numbers in the stones which disappeared in the $i$-th chain (0-indexed)}\\right)$.</li>\n</ol>\n\t\t\t\t\t\tPlease answer the points if he erased the optimal place.<br/>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n\t\t\t\t\t\t\tThe input is given from standard input in the following format. </section></div></div></div></span>", "p03931": "<span class=\"lang-en lang-child hidden-lang\">\n<div id=\"task-statement\">\n<div class=\"part\">\n\t\t\t\t\tMax Score: $400$ Points\n\t\t\t\t\t<section>\n<h3>Problem Statement</h3>\n<h3>Sample testcase 3 has a mistake, so we erased this case and rejudged all solutions of this problem. (21:01)</h3>\n\t\t\t\t\t\tSnuke got a sequence $a$ of length $n$ from AtCoder company. All elements in $a$ are distinct.<br/>\n\t\t\t\t\t\tHe made a sequence $b$, but actually, he is not remembered it. <br/>\n\t\t\t\t\t\tHowever, he is remembered a few things about sequence $b$. <br/>\n<ul class=\"simple\">\n<li>All elements in $b$ are distinct. </li>\n<li>All elements in $b$ is in $a$.</li>\n<li>$b_1 \\oplus b_2 \\oplus \\cdots \\oplus b_r = k$. ($r$ is length of sequence $b$) [$\\oplus$ means XOR]</li>\n</ul>\n<br/>\n\t\t\t\t\t\tFor example, if $a = { 1, 2, 3 }$ and $k = 1$, he can make $b = { 1 }, { 2, 3 }, { 3, 2 }$. <br/>\n\t\t\t\t\t\tHe wants to restore sequence $b$, but he says that there are too many ways and he can't restore it.\n\t\t\t\t\t\tPlease calculate the ways to make $b$ and help him. <br/>\n\t\t\t\t\t\tSince the answer can be large, print the answer modulo $1,000,000,007$. <br/>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n\t\t\t\t\t\tThe input is given from Standard Input in the following format:<br/>\n<blockquote>$n \\ k$\n$a_1 \\ a_2 \\ \\cdots \\ a_n$\n</blockquote>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<ul>\n<li>Print the number of ways to make sequence $b$. </li>\n<li>Print the answer modulo $1,000,000,007$. </li>\n</ul>\n</section>\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>$1 \\le n \\le 100$</li>\n<li>$1 \\le a_i, k \\le 255$</li>\n<li>$i \\neq j \\Rightarrow a_i \\neq a_j$</li>\n</ul>\n</section>\n<section>\n<h3>Subtasks</h3>\n\t\t\t\t\t\tSubtask 1 [ $50$ points ] <br/>\n<ul>\n<li>$1 \\le n \\le 4$</li>\n</ul>\n\t\t\t\t\t\tSubtask 2 [ $170$ points ] <br/>\n<ul>\n<li>$1 \\le n \\le 20$</li>\n</ul>\n\t\t\t\t\t\tSubtask 3 [ $180$ points ] <br/>\n<ul>\n<li>There are no additional constraints.</li>\n</ul>\n</section>\n</div>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>\n3 1\n1 2 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>\n3\n</pre>\n\t\t\t\t\tYou can make 3 patterns: $b = \\{ 1 \\}, \\{ 2, 3 \\}, \\{ 3, 2 \\}$<br/>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>\n3 10\n8 7 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>\n6\n</pre>\n\t\t\t\t\tYou can make 6 patterns: $b = \\{ 5, 7, 8 \\}, \\{ 5, 8, 7 \\}, \\{ 7, 5, 8 \\}, \\{ 7, 8, 5 \\}, \\{ 8, 5, 7 \\}, \\{ 8, 7, 5 \\}$.<br/>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3>\n<pre>\n25 127\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120 125\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3>\n<pre>\n235924722\n</pre>\n<p>Please output answer mod $1,000,000,007$.</p>\n</section>\n\n\t\t\t\twriter: E869120 <br/>\n</div>\n</span>", "p03932": "<span class=\"lang-en lang-child hidden-lang\">\n<div id=\"task-statement\">\n\t\t\t\tMax Score: $600$ Points <br/>\n<section>\n<h3>Problem Statement</h3>\n\t\t\t\t\tSigma and his brother Sugim are in the $H \\times W$ grid. They wants to buy some souvenirs. <br/>\n\t\t\t\t\tTheir start position is upper-left cell, and the goal position is lower-right cell. <br/>\n\t\t\t\t\tSome cells has a souvenir shop. At $i$-th row and $j$-th column, there is $a_{i, j}$ souvenirs. <br/>\n\t\t\t\t\tIn one move, they can go left, right, down, and up cell. <br/>\n\t\t\t\t\tBut they have little time, so they can move only $H+W-2$ times. <br/>\n\t\t\t\t\tThey wanted to buy souvenirs as many as possible, but they had no computer, so they couldn't get the maximal numbers of souvenirs. <br/>\n\t\t\t\t\tWrite a program and calculate the maximum souvenirs they can get, and help them. <br/>\n</section>\n</div>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n\t\t\t\t\t\tThe input is given from standard input in the following format. <br/>\n<blockquote>$H \\ W$\n$a_{1, 1} \\ a_{1, 2} \\ \\cdots \\ a_{1, W}$\n$a_{2, 1} \\ a_{2, 2} \\ \\cdots \\ a_{2, W}$\n$\\vdots \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\vdots \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\vdots$\n$a_{H, 1} \\ a_{H, 2} \\ \\cdots \\ a_{H, W}$\n</blockquote>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<ul>\n<li>Print the maximum number of souvenirs they can get.</li>\n</ul>\n</section>\n<section>\n<h3>Constraints</h3>\n<ul>\n<li>$1 \\le H, W \\le 200$</li>\n<li>$0 \\le a_{i, j} \\le 10^5$</li>\n</ul>\n</section>\n<section>\n<h3>Subtasks</h3>\n\t\t\t\t\t\tSubtask 1 [ 50 points ] <br/>\n<ul>\n<li>The testcase in the subtask satisfies $1 \\le H \\le 2$.</li>\n</ul>\n\t\t\t\t\t\tSubtask 2 [ 80 points ] <br/>\n<ul>\n<li>The testcase in the subtask satisfies $1 \\le H \\le 3$.</li>\n</ul>\n\t\t\t\t\t\tSubtask 3 [ 120 points ] <br/>\n<ul>\n<li>The testcase in the subtask satisfies $1 \\le H, W \\le 7$.</li>\n</ul>\n\t\t\t\t\t\tSubtask 4 [ 150 points ] <br/>\n<ul>\n<li>The testcase in the subtask satisfies $1 \\le H, W \\le 30$.</li>\n</ul>\n\t\t\t\t\t\tSubtask 5 [ 200 points ] <br/>\n<ul>\n<li>There are no additional constraints.</li>\n</ul>\n</section>\n</div>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>\n3 3\n1 0 5\n2 2 3\n4 2 4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>\n21\n</pre>\n\t\t\t\t\tThe cell at $i$-th row and $j$-th column is denoted $(i, j)$. <br/>\n\t\t\t\t\tIn this case, one of the optimal solution is this:<br/>\n<ul>\n<li>Sigma moves $(1, 1) -&gt; (1, 2) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3)$.</li>\n<li>Sugim moves $(1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (3, 2) -&gt; (3, 3)$.</li>\n</ul>\n\t\t\t\t\tThen, they can get $21$ souvernirs. <br/>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>\n6 6\n1 2 3 4 5 6\n8 6 9 1 2 0\n3 1 4 1 5 9\n2 6 5 3 5 8\n1 4 1 4 2 1\n2 7 1 8 2 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>\n97\n</pre>\n</section>\n</div>\n\n\t\t\tWriter : square1001<br/>\n</span>", "p03937": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><style>\n   #nck {\n      width: 30px;\n      height: auto;\n   }\n</style>\n<p>We have a grid of <var>H</var> rows and <var>W</var> columns. Initially, there is a stone in the top left cell. Shik is trying to move the stone to the bottom right cell. In each step, he can move the stone one cell to its left, up, right, or down (if such cell exists). It is possible that the stone visits a cell multiple times (including the bottom right and the top left cell).</p>\n<p>You are given a matrix of characters <var>a_{ij}</var> (<var>1 \\leq i \\leq H</var>, <var>1 \\leq j \\leq W</var>). After Shik completes all moving actions, <var>a_{ij}</var> is <code>#</code> if the stone had ever located at the <var>i</var>-th row and the <var>j</var>-th column during the process of moving. Otherwise, <var>a_{ij}</var> is <code>.</code>. Please determine whether it is possible that Shik only uses right and down moves in all steps.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq H, W \\leq 8</var></li>\n<li><var>a_{i,j}</var> is either <code>#</code> or <code>.</code>.</li>\n<li>There exists a valid sequence of moves for Shik to generate the map <var>a</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>H</var> <var>W</var>\n<var>a_{11}a_{12}</var><var>...</var><var>a_{1W}</var>\n<var>:</var>\n<var>a_{H1}a_{H2}</var><var>...</var><var>a_{HW}</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If it is possible that Shik only uses right and down moves, print <code>Possible</code>. Otherwise, print <code>Impossible</code>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 5\n##...\n.##..\n..##.\n...##\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Possible\n</pre>\n<p>The matrix can be generated by a <var>7</var>-move sequence: right, down, right, down, right, down, and right.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5 3\n###\n..#\n###\n#..\n###\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>Impossible\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4 5\n##...\n.###.\n.###.\n...##\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>Impossible\n</pre></section>\n</div>\n</span>", "p03938": "<span class=\"lang-en\">\n<p>Score : <var>400</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><style>\n   #nck {\n      width: 30px;\n      height: auto;\n   }\n</style>\n<p>You are given a permutation <var>p</var> of the set {<var>1, 2, ..., N</var>}. Please construct two sequences of positive integers <var>a_1</var>, <var>a_2</var>, ..., <var>a_N</var> and <var>b_1</var>, <var>b_2</var>, ..., <var>b_N</var> satisfying the following conditions:</p>\n<ul>\n<li><var>1 \\leq a_i, b_i \\leq 10^9</var> for all <var>i</var></li>\n<li><var>a_1 &lt; a_2 &lt; ... &lt; a_N</var></li>\n<li><var>b_1 &gt; b_2 &gt; ... &gt; b_N</var></li>\n<li><var>a_{p_1}+b_{p_1} &lt; a_{p_2}+b_{p_2} &lt; ... &lt; a_{p_N}+b_{p_N}</var></li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 20,000</var></li>\n<li><var>p</var> is a permutation of the set {<var>1, 2, ..., N</var>}</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>p_1</var> <var>p_2</var> <var>...</var> <var>p_N</var> \n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>The output consists of two lines. The first line contains <var>a_1</var>, <var>a_2</var>, ..., <var>a_N</var> seperated by a space. The second line contains <var>b_1</var>, <var>b_2</var>, ..., <var>b_N</var> seperated by a space. </p>\n<p>It can be shown that there always exists a solution for any input satisfying the constraints.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>2\n1 2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1 4\n5 4\n</pre>\n<p><var>a_1 + b_1 = 6</var> and <var>a_2 + b_2 = 8</var>. So this output satisfies all conditions.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3\n3 2 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>1 2 3\n5 3 1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>3\n2 3 1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>5 10 100\n100 10 1\n</pre></section>\n</div>\n</span>", "p03940": "<span class=\"lang-en\">\n<p>Score : <var>1200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><style>\n   #nck {\n      width: 30px;\n      height: auto;\n   }\n</style>\n<p>Imagine a game played on a line. Initially, the player is located at position <var>0</var> with <var>N</var> candies in his possession, and the exit is at position <var>E</var>. There are also <var>N</var> bears in the game. The <var>i</var>-th bear is located at <var>x_i</var>. The maximum moving speed of the player is <var>1</var> while the bears do not move at all.</p>\n<p>When the player gives a candy to a bear, it will provide a coin after <var>T</var> units of time. More specifically, if the <var>i</var>-th bear is given a candy at time <var>t</var>, it will put a coin at its position at time <var>t+T</var>. The purpose of this game is to give candies to all the bears, pick up all the coins, and go to the exit. Note that the player can only give a candy to a bear if the player is at the exact same position of the bear. Also, each bear will only produce a coin once. If the player visits the position of a coin after or at the exact same time that the coin is put down, the player can pick up the coin. Coins do not disappear until collected by the player.</p>\n<p>Shik is an expert of this game. He can give candies to bears and pick up coins instantly. You are given the configuration of the game. Please calculate the minimum time Shik needs to collect all the coins and go to the exit.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 100,000</var></li>\n<li><var>1 \\leq T, E \\leq 10^9</var></li>\n<li><var>0 &lt; x_i &lt; E</var></li>\n<li><var>x_i &lt; x_{i+1}</var> for <var>1 \\leq i &lt; N</var></li>\n<li>All input values are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Scores</h3><ul>\n<li>In test cases worth <var>600</var> points, <var>N \\leq 2,000</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>E</var> <var>T</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print an integer denoting the answer.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>3 9 1\n1 3 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>12\n</pre>\n<p>The optimal strategy is to wait for the coin after treating each bear. The total time spent on waiting is <var>3</var> and moving is <var>9</var>. So the answer is <var>3 + 9 = 12</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 9 3\n1 3 8\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>16\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>2 1000000000 1000000000\n1 999999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2999999996\n</pre></section>\n</div>\n</span>", "p03942": "<span class=\"lang-en\">\n<p>Score : <var>1500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><style>\n   #nck {\n      width: 30px;\n      height: auto;\n   }\n</style>\n<p>Shik's job is very boring. At day <var>0</var>, his boss gives him a string <var>S_0</var> of length <var>N</var> which consists of only lowercase English letters. In the <var>i</var>-th day after day <var>0</var>, Shik's job is to copy the string <var>S_{i-1}</var> to a string <var>S_i</var>. We denote the <var>j</var>-th letter of <var>S_i</var> as <var>S_i[j]</var>.</p>\n<p>Shik is inexperienced in this job. In each day, when he is copying letters one by one from the first letter to the last letter, he would make mistakes. That is, he sometimes accidentally writes down the same letter that he wrote previously instead of the correct one. More specifically, <var>S_i[j]</var> is equal to either <var>S_{i-1}[j]</var> or <var>S_{i}[j-1]</var>. (Note that <var>S_i[1]</var> always equals to <var>S_{i-1}[1]</var>.)</p>\n<p>You are given the string <var>S_0</var> and another string <var>T</var>.\nPlease determine the smallest integer <var>i</var> such that <var>S_i</var> could be equal to <var>T</var>. If no such <var>i</var> exists, please print <code>-1</code>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 1,000,000</var></li>\n<li>The lengths of <var>S_0</var> and <var>T</var> are both <var>N</var>.</li>\n<li>Both <var>S_0</var> and <var>T</var> consist of lowercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>S_0</var>\n<var>T</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the smallest integer <var>i</var> such that <var>S_i</var> could be equal to <var>T</var>. If no such <var>i</var> exists, print <code>-1</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\nabcde\naaacc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p><var>S_0</var> = <code>abcde</code>, <var>S_1</var> = <code>aaccc</code> and <var>S_2</var> = <code>aaacc</code> is a possible sequence such that <var>S_2 = T</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>5\nabcde\nabcde\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>4\nacaa\naaca\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>2\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>5\nabcde\nbbbbb\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p03970": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>CODE FESTIVAL 2016 is going to be held. For the occasion, Mr. Takahashi decided to make a signboard.</p>\n<p>He intended to write <code>CODEFESTIVAL2016</code> on it, but he mistakenly wrote a different string <var>S</var>. Fortunately, the string he wrote was the correct length.</p>\n<p>So Mr. Takahashi decided to perform an operation that replaces a certain character with another in the minimum number of iterations, changing the string to <code>CODEFESTIVAL2016</code>.</p>\n<p>Find the minimum number of iterations for the rewrite operation.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>S</var> is <var>16</var> characters long.</li>\n<li><var>S</var> consists of uppercase and lowercase alphabet letters and numerals.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>Inputs are provided from Standard Input in the following form.</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Output an integer representing the minimum number of iterations needed for the rewrite operation.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>C0DEFESTIVAL2O16\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>2\n</pre>\n<p>The second character <code>0</code> must be changed to <code>O</code> and the <var>14</var>th character <code>O</code> changed to <code>0</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>FESTIVAL2016CODE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>16\n</pre></section>\n</div>\n</span>", "p03975": "<span class=\"lang-en\">\n<p>Score : <var>66</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>\n  Summer vacation ended at last and the second semester has begun.\n  You, a Kyoto University student, came to university and heard a rumor that somebody will barricade the entrance of your classroom.\n  The barricade will be built just before the start of the <var>A</var>-th class and removed by Kyoto University students just before the start of the <var>B</var>-th class.\n  All the classes conducted when the barricade is blocking the entrance will be cancelled and you will not be able to attend them.\n  Today you take <var>N</var> classes and class <var>i</var> is conducted in the <var>t_i</var>-th period.\n  You take at most one class in each period.\n  Find the number of classes you can attend.\n</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 1000</var></li>\n<li><var>1 \\leq A &lt; B \\leq 10^9 </var></li>\n<li><var>1 \\leq t_i \\leq 10^9</var></li>\n<li>All <var>t_i</var> values are distinct.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p><var>N</var>, <var>A</var> and <var>B</var> are given on the first line and <var>t_i</var> is given on the <var>(i+1)</var>-th line. </p>\n<pre>\n<var>N</var> <var>A</var> <var>B</var>\n<var>t<sub>1</sub></var>\n:\n<var>t<sub>N</sub></var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Print the number of classes you can attend. </p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>\n5 5 9\n4\n3\n6\n9\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>\n4\n</pre>\n<p>You can not only attend the third class. </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>\n5 4 9\n5\n6\n7\n8\n9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>\n1\n</pre>\n<p>You can only attend the fifth class. </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3>\n<pre>\n4 3 6\n9\n6\n8\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3>\n<pre>\n4\n</pre>\n<p>You can attend all the classes. </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3>\n<pre>\n2 1 2\n1\n2\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3>\n<pre>\n1\n</pre>\n<p>You can not attend the first class, but can attend the second. </p>\n</section>\n</div>\n</span>", "p03978": "<span class=\"lang-en\">\n<p>Score : <var>150</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>\n  There is a long blackboard with <var>2</var> rows and <var>N</var> columns in a classroom of Kyoto University. \n  This blackboard is so long that it is impossible to tell which cells are already used and which unused. \n</p>\n<p>\n  Recently, a blackboard retrieval device was installed at the classroom. \n  To use this device, you type a search query that forms a rectangle with 2 rows and any length of columns, where each cell is used or unused. \n  When you input a query, the decive answers whether the rectangle that corresponds to the query exists in the blackboard. \n  Here, for a rectangle that corresponds to a search query, if two integer <var>i, j</var> ( <var>i &lt; j</var> ) exist\n  and the rectangle equals to the partial blackboard between column <var>i</var> and <var>j</var> ,\n  the rectangle is called a sub-blackboard of the blackboard. \n</p>\n<p>\n  You are currently preparing for a presentation at this classroom.\n  To make the presentation go well, you decided to write a program to detect the status of the whole blackboard using the retrieval device. \n  Since it takes time to use the device, you want to use it as few times as possible. \n</p>\n<p>\n  The status of the whole blackboard is already determined at the beginning and does not change while you are using the device. \n</p>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>The first input is given in the following format:</p>\n<pre>\n<var>N</var>\n</pre>\n<p> <var>N</var> <var>(1 \\leq N \\leq 100)</var> is an integer that represents the length of the blackboard. </p>\n<p>\n  After this input value, your program must print search queries. \n  A search query has the following format. \n</p>\n<pre>\n<var>s_1</var>\n<var>s_2</var>\n</pre>\n<p>\n  Here, <var>s_1</var> represents the upper part of the blackboard and <var>s_2</var> represents the lower. \n  <code>#</code> in <var>s_1</var> and <var>s_2</var> represents the cell is already used and <code>.</code> represents the cell is still unused. \n  The lengths of <var>s_1</var> and <var>s_2</var> are arbitrary, but they must be the same. \n  Make sure to insert a line break at the end of the lines. \n</p>\n<p>\n  Every time your program prints a search query, a string that represents the search result of the device is returned in the followin format. \n</p>\n<pre>\n<var>r</var>\n</pre>\n<p>\n<var>r</var> is either <code>T</code> or <code>F</code> . \n  The meaning of each character is as follows. \n</p>\n<ul>\n<li> <code>T</code> represents that the sub-blackboard that corresponds to the search query exists in the blackboard. </li>\n<li> <code>F</code> represents that the sub-blackboard that corresponds to the search query does not exist in the blackboard. </li>\n</ul>\n<p>\n  If the search query equals to the whole blackboard or the number of the search queries exceeds the limit, string <code>end</code> is given instead of <var>r</var> .\n  Once you receive this string, exit your program immediately. \n  If your program prints the whole blackboard as a search query before exceedin the limit, it is judged as <em>Accepted</em>. Note that the search query that represents the whole blackboard is also counted as the number of search queries. \n</p>\n</section>\n</div>\n</div>\n<p>\n  Note that the output needs to be flushed every time the output is printed. \n  For example, In C/C++, search query <code>s1</code>, <code>s2</code> can be printed as follows. \n</p>\n<pre class=\"prettyprint\">printf(\"%s\\n%s\\n\", s1, s2); fflush(stdout);</pre>\n<p>\n  Make sure your program receive all the input from the device. Otherwise, the result may be <em>Time Limit Exceeded</em> . \n</p>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Query Limit</h3>\n<p>\n  The maximun number of search queries is <var>420</var>.\n  If the number of queries exceeds the limit, the result will be <em>Query Limit Exceeded</em> . \n</p>\n<hr/>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input and Output</h3>\n<p>The following is an example where <var>N=3</var> and the blackboard is as follows. </p>\n<pre>\n.#.\n...\n</pre>\n<p>Note that your program does not know the state of the blackboard. </p>\n<pre>\n<table class=\"table table-striped table-bordered table-condensed\">\n  <tr>\n    <th>Output of your program</th>\n    <th>Input to your program</th>\n    <th>Explanation</th>\n  </tr>\n  <tr>\n    <td></td>\n    <td>3</td>\n    <td>The length of the blackboard is given</td>\n  </tr>\n  <tr>\n    <td>..<br/>##</td>\n    <td></td>\n    <td>Output a search query</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>F</td>\n    <td>The sub-blackboard does not exist</td>\n  </tr>\n  <tr>\n    <td>.<br/>.</td>\n    <td></td>\n    <td>Output a search query</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>T</td>\n    <td>The sub-blackboard exists</td>\n  </tr>\n  <tr>\n    <td>..<br/>..</td>\n    <td></td>\n    <td>Output a search query</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>F</td>\n    <td>The sub-blackboard does not exist</td>\n  </tr>\n  <tr>\n    <td>.#<br/>..</td>\n    <td></td>\n    <td>Output a search query</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>T</td>\n    <td>The sub-blackboard exists</td>\n  </tr>\n  <tr>\n    <td>.#.<br/>...</td>\n    <td></td>\n    <td>Output a search query</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>end</td>\n    <td>Exit your program because the above sub-blackboard equals to the whole blackboard. </td>\n  </tr>\n</table>\n</pre>\n</section>\n</div>\n</span>", "p03979": "<span class=\"lang-en\">\n<p>Score : <var>150</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>\n  There are some goats on a grid with <var>H</var> rows and <var>W</var> columns. \n  Alice wants to put some fences at some cells where goats do not exist so that no goat can get outside the grid. \n  Goats can move in the four directions, that is, up, down, right and left.\n  Goats can not move onto the cells where fences are placed. \n  If a goat exists at one of the outermost cells in the grid, it can move outside.\n  Goats do not move until all fences are placed.  \n  Find the minimum number of fences to be placed. \n</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li> <var>1 \\leq H \\leq 100</var> </li>\n<li> <var>1 \\leq W \\leq 100</var> </li>\n<li> There is at least one goat on the given grid. </li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>The input is given from the Standart Input in the following format:</p>\n<pre>\n<var>H</var> <var>W</var>\n<var>S_1</var>\n:\n<var>S_H</var>\n</pre>\n<p>\n  The <var>j</var>-th <var>(1 \\leq j \\leq W)</var> character in <var>S_i</var> <var>(1 \\leq i \\leq H)</var> represents \n  whether a goat exists at the cell located at row <var>i</var> and column <var>j</var>. \n  Character <code>.</code> represents there is no goat, and <code>X</code> represents there is one goat at the cell. </p>\n</section></div></div></span>", "p03980": "<span class=\"lang-en\">\n<p>Score : <var>150</var> points</p>\n<div id=\"task-statement\">\n<script src=\"http://atcoder.jp/js/varmath.js\"></script>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>\n            Gorillas in Kyoto University are good at math.\n            They are currently trying to solve problems to find the value of an expression that contains two functions, <code>_</code> , <code>^</code>.\n            Each of these functions takes two input values. <code>_</code> function returns the smaller of the two input values and <code>^</code> function returns the larger.\n            Gorillas know that integers in the expression are non-negative and less than or equal to <var>99</var>,\n            but can not find out the length of the expression until they read a terminal symbol <code>?</code> that represents the end of the expression. The number of characters included in each expression is less than or equal to 1000, but they do not even know this fact.\n            Ai, a smart gorilla, noticed that she may be able to know the value of the expression even if they don't read the whole expression.\n          </p>\n<p>\n            For example,\n          </p>\n<p>Assume you read the following sentence from the left.</p>\n<pre>^(41,3)?</pre>\n<p>When you read the sixth character, that is, when you read the following expression,</p>\n<pre>^(41,3</pre>\n<p>you can tell the second input value of the funcion is whether <var>3</var> or an integer between <var>30</var> and <var>39</var>, and the value turns out <var>41</var>. </p>\n<p>\n            Since Ai wants to solve problems earlier than other gorillas, she decided to solve the problems such that she reads as fewer characters as possible from the left.\n            For each expression, Find the value of the expression and the minimum number of characters Ai needs to read to know the value.\n          </p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq Q \\leq 200</var></li>\n<li>The number of characters each expression contains is less than or equal to <var>1000</var>. </li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>The input consists of multiple test cases and is given from Standard Input in the following format:</p>\n<pre>\n<var>Q</var>\n<var>statement_1</var>\n...\n<var>statement_Q</var>\n</pre>\n</section>\n</div>\n</div>\n<p>Each <var>statement_i</var> <var>(1 \\leq i \\leq Q)</var> is given in the following BNF format.</p>\n<pre>\n<var>&lt;statement&gt;</var> ::= <var>&lt;expression&gt;</var> <code>?</code>\n<var>&lt;expression&gt;</var> ::= (<code>^</code> | <code>_</code>)  <code>(</code> <var>&lt;expression&gt;</var> <code>,</code> <var>&lt;expression&gt;</var> <code>)</code> | <var>&lt;number&gt; </var>\n<var>&lt;number&gt;</var> :: = <code>0</code> | <code>1</code> | <code>2</code> | ... | <code>98</code> | <code>99</code>\n</pre>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>\n              Output consists of <var>Q</var> lines.\n              On line <var>i</var> <var>(1 \\leq i \\leq Q)</var>, print the value of the expression and the number of character Ai needs to read for the test case <var>i</var> separated by space.\n            </p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>\n4\n_(4,51)?\n^(99,_(3,67))?\n_(0,87)?\n3?\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>\n4 5\n99 4\n0 3\n3 2\n</pre>\n<ul>\n<li>For the first test case, when you read the fifth character, that is, when you read <code>_(4,5</code>, you will know the value is <var>4</var>. </li>\n<li>For the second test case, when you read the fourth character, that is, when you read <code>^(99</code>, you will know the value is <var>99</var>. </li>\n<li>For the third test case, when you read the third character, that is, when you read <code>_(0</code>, you will know the value is <var>0</var>. </li>\n<li>For the fourth test case, you will not know the value is <var>3</var> untill you read the terminal symbol.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>\n7\n_(23,^(_(22,40),4))?\n_(0,99)?\n^(99,_(^(19,2),5))?\n_(^(43,20),^(30,29))?\n^(_(20,3),_(50,41))?\n^(_(20,3),_(3,41))?\n^(_(20,3),_(4,41))?\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>\n22 18\n0 3\n99 4\n30 17\n41 17\n3 14\n4 15\n</pre>\n</section>\n</div>\n</div>\n</span>", "p03982": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\"><section>\n<h3>Problem Statement</h3>\n<p>\n            Kyoto University decided to build a straight wall on the west side of the university to protect against gorillas that attack the university from the west every night.\n            Since it is difficult to protect the university at some points along the wall where gorillas attack violently, reinforcement materials are also built at those points.\n            Although the number of the materials is limited, the state-of-the-art technology can make a prediction about the points where gorillas will attack next and the number of gorillas that will attack at each point.\n            The materials are moved along the wall everyday according to the prediction.\n            You, a smart student majoring in computer science, are called to find the way to move the materials more efficiently.\n        </p>\n<p>\n            Theare are <var>N</var> points where reinforcement materials can be build along the straight wall. They are numbered <var>1</var> through <var>N</var>.\n            Because of the protection against the last attack of gorillas, <var>A_i</var> materials are build at point <var>i</var> (<var>1 \\leq i \\leq N</var>).\n            For the next attack, the materials need to be rearranged such that at least <var>B_i</var> materials are built at point <var>i</var> (<var>1 \\leq i \\leq N</var>).\n            It costs <var>|i - j|</var> to move <var>1</var> material from point <var>i</var> to point <var>j</var>.\n            Find the minimum total cost required to satisfy the condition by moving materials.\n            You do not need to consider the attack after the next.\n        </p>\n</section></div>\n<div class=\"part\"><section>\n<h3>Constraints</h3>\n<ul>\n<li><var>1 \\leq N \\leq 10^5</var></li>\n<li><var>A_i \\geq 1</var></li>\n<li><var>B_i \\geq 1</var></li>\n<li><var>A_1 + A_2 + ... + A_N \\leq 10^{12}</var></li>\n<li><var>B_1 + B_2 + ... + B_N \\leq A_1 + A_2 + ... + A_N</var></li>\n<li>There is at least one way to satisfy the condition. </li>\n</ul>\n</section></div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\"><section>\n<h3>Input</h3>\n<p>The input is given from Standard Input in the following format: </p>\n<pre><var>N</var>\n<var>A_1</var> <var>A_2</var> ... <var>A_N</var>\n<var>B_1</var> <var>B_2</var> ... <var>B_N</var></pre>\n</section></div>\n<div class=\"part\"><section>\n<h3>Output</h3>\n<p>Print the minimum total cost required to satisfy the condition. </p>\n<h3>Partial Scores</h3>\n<p>\n<var>30</var> points will be awarded for passing the test set satisfying the following:\n                <ul>\n<li><var>N \\leq 100</var></li>\n<li><var>A_1 + A_2 + ... + A_N \\leq 400</var></li>\n</ul>\n</p>\n<p>\n                Another <var>30</var> points will be awarded for passing the test set satisfying the following:\n                <ul>\n<li><var>N \\leq 10^3</var></li>\n</ul>\n</p>\n<p>\n                Another <var>140</var> points will be awarded for passing the test set without addtional constraints and you can get <var>200</var> points in total.\n            </p>\n</section></div>\n</div>\n<hr/>\n<div class=\"part\"><section>\n<h3>Sample Input 1</h3>\n<pre>2\n1 5\n3 1</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>2</pre>\n<p>It costs least to move <var>2</var> materials from point <var>2</var> to point <var>1</var>. </p>\n</section></div>\n<div class=\"part\"><section>\n<h3>Sample Input 2</h3>\n<pre>5\n1 2 3 4 5\n3 3 1 1 1</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>6</pre>\n</section></div>\n<div class=\"part\"><section>\n<h3>Sample Input 3</h3>\n<pre>27\n46 3 4 2 10 2 5 2 6 7 20 13 9 49 3 8 4 3 19 9 3 5 4 13 9 5 7\n10 2 5 6 2 6 3 2 2 5 3 11 13 2 2 7 7 3 9 5 13 4 17 2 2 2 4</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3>\n<pre>48</pre>\n<p>The input of this test case satisfies both the first and second additional constraints. </p>\n</section></div>\n<div class=\"part\"><section>\n<h3>Sample Input 4</h3>\n<pre>18\n3878348 423911 8031742 1035156 24256 10344593 19379 3867285 4481365 1475384 1959412 1383457 164869 4633165 6674637 9732852 10459147 2810788\n1236501 770807 4003004 131688 1965412 266841 3980782 565060 816313 192940 541896 250801 217586 3806049 1220252 1161079 31168 2008961</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3>\n<pre>6302172</pre>\n<p>The input of this test case satisfies the second additional constraint. </p>\n</section></div>\n<div class=\"part\"><section>\n<h3>Sample Input 5</h3>\n<pre>2\n1 99999999999\n1234567891 1</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3>\n<pre>1234567890</pre>\n<p>The input and output values may exceed the range of 32-bit integer. </p>\n</section></div>\n</span>", "p03984": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3>\n<p>\nMikan's birthday is coming soon. Since Mikan likes graphs very much, Aroma decided to give her a undirected graph this year too. \n</p>\n<p>\nAroma bought a connected undirected graph, which consists of <var>n</var> vertices and <var>n</var> edges. \nThe vertices are numbered from 1 to n and for each <var>i</var><var>(1 \\leq i \\leq n)</var>, vertex <var>i</var> and vartex <var>a_i</var> are connected with an undirected edge. \nAroma thinks it is not interesting only to give the ready-made graph and decided to paint it. \nCount the number of ways to paint the vertices of the purchased graph in <var>k</var> colors modulo <var>10^9 + 7</var>. \n<strong>Two ways are considered to be the same if the graph painted in one way can be identical to the graph painted in the other way by permutating the numbers of the vertices. </strong>\n</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3>\n<ul>\n<li> <var>1 \\leq n \\leq 10^5</var> </li>\n<li> <var>1 \\leq k \\leq 10^5</var> </li>\n<li> <var>1 \\leq a_i \\leq n</var> <var>(1 \\leq i \\leq n)</var> </li>\n<li> The given graph is connected</li>\n<li> The given graph contains no self-loops or multiple edges.\n</li></ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3>\n<p>Each data set is given in the following format from the standard input.</p>\n<pre>\n<var>n</var> <var>k</var>\n<var>a_1</var>\n:\n<var>a_n</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3>\n<p>Output the number of ways to paint the vertices of the given graph in k colors modulo <var>10^9 + 7</var> in one line. </p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3>\n<pre>\n4 2\n2\n3\n1\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3>\n<pre>\n12\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3>\n<pre>\n4 4\n2\n3\n4\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3>\n<pre>\n55\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3>\n<pre>\n10 5\n2\n3\n4\n1\n1\n1\n2\n3\n3\n4\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3>\n<pre>\n926250\n</pre>\n</section>\n</div>\n</span>", "p03992": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>This contest is <code>CODE FESTIVAL</code>.\nHowever, Mr. Takahashi always writes it <code>CODEFESTIVAL</code>, omitting the single space between <code>CODE</code> and <code>FESTIVAL</code>.</p>\n<p>So he has decided to make a program that puts the single space he omitted.</p>\n<p>You are given a string <var>s</var> with <var>12</var> letters.\nOutput the string putting a single space between the first <var>4</var> letters and last <var>8</var> letters in the string <var>s</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>s</var> contains exactly <var>12</var> letters.</li>\n<li>All letters in <var>s</var> are uppercase English letters.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the string putting a single space between the first <var>4</var> letters and last <var>8</var> letters in the string <var>s</var>.\nPut a line break at the end.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>CODEFESTIVAL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>CODE FESTIVAL\n</pre>\n<p>Putting a single space between the first <var>4</var> letters and last <var>8</var> letters in <code>CODEFESTIVAL</code> makes it <code>CODE FESTIVAL</code>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>POSTGRADUATE\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>POST GRADUATE\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>ABCDEFGHIJKL\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>ABCD EFGHIJKL\n</pre></section>\n</div>\n</span>", "p03999": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> consisting of digits between <code>1</code> and <code>9</code>, inclusive.\nYou can insert the letter <code>+</code> into some of the positions (possibly none) between two letters in this string.\nHere, <code>+</code> must not occur consecutively after insertion.</p>\n<p>All strings that can be obtained in this way can be evaluated as formulas.</p>\n<p>Evaluate all possible formulas, and print the sum of the results.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10</var></li>\n<li>All letters in <var>S</var> are digits between <code>1</code> and <code>9</code>, inclusive.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the evaluated value over all possible formulas.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>125\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>176\n</pre>\n<p>There are <var>4</var> formulas that can be obtained: <code>125</code>, <code>1+25</code>, <code>12+5</code> and <code>1+2+5</code>. When each formula is evaluated,</p>\n<ul>\n<li><var>125</var></li>\n<li><var>1+25=26</var></li>\n<li><var>12+5=17</var></li>\n<li><var>1+2+5=8</var></li>\n</ul>\n<p>Thus, the sum is <var>125+26+17+8=176</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9999999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>12656242944\n</pre></section>\n</div>\n</span>", "p04001": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>You are given a string <var>S</var> consisting of digits between <code>1</code> and <code>9</code>, inclusive.\nYou can insert the letter <code>+</code> into some of the positions (possibly none) between two letters in this string.\nHere, <code>+</code> must not occur consecutively after insertion.</p>\n<p>All strings that can be obtained in this way can be evaluated as formulas.</p>\n<p>Evaluate all possible formulas, and print the sum of the results.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |S| \\leq 10</var></li>\n<li>All letters in <var>S</var> are digits between <code>1</code> and <code>9</code>, inclusive.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>S</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the sum of the evaluated value over all possible formulas.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>125\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>176\n</pre>\n<p>There are <var>4</var> formulas that can be obtained: <code>125</code>, <code>1+25</code>, <code>12+5</code> and <code>1+2+5</code>. When each formula is evaluated,</p>\n<ul>\n<li><var>125</var></li>\n<li><var>1+25=26</var></li>\n<li><var>12+5=17</var></li>\n<li><var>1+2+5=8</var></li>\n</ul>\n<p>Thus, the sum is <var>125+26+17+8=176</var>.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>9999999999\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>12656242944\n</pre></section>\n</div>\n</span>", "p04011": "<span class=\"lang-en\">\n<p>Score : <var>100</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>There is a hotel with the following accommodation fee:</p>\n<ul>\n<li><var>X</var> yen (the currency of Japan) per night, for the first <var>K</var> nights</li>\n<li><var>Y</var> yen per night, for the <var>(K+1)</var>-th and subsequent nights</li>\n</ul>\n<p>Tak is staying at this hotel for <var>N</var> consecutive nights.\nFind his total accommodation fee.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N, K \\leq 10000</var></li>\n<li><var>1 \\leq Y &lt; X \\leq 10000</var></li>\n<li><var>N,\\,K,\\,X,\\,Y</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>K</var>\n<var>X</var>\n<var>Y</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print Tak's total accommodation fee.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>5\n3\n10000\n9000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>48000\n</pre>\n<p>The accommodation fee is as follows:</p>\n<ul>\n<li><var>10000</var> yen for the <var>1</var>-st night</li>\n<li><var>10000</var> yen for the <var>2</var>-nd night</li>\n<li><var>10000</var> yen for the <var>3</var>-rd night</li>\n<li><var>9000</var> yen for the <var>4</var>-th night</li>\n<li><var>9000</var> yen for the <var>5</var>-th night</li>\n</ul>\n<p>Thus, the total is <var>48000</var> yen.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>2\n3\n10000\n9000\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>20000\n</pre></section>\n</div>\n</span>", "p04012": "<span class=\"lang-en\">\n<p>Score : <var>200</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>w</var> be a string consisting of lowercase letters.\nWe will call <var>w</var> <em>beautiful</em> if the following condition is satisfied:</p>\n<ul>\n<li>Each lowercase letter of the English alphabet occurs even number of times in <var>w</var>.</li>\n</ul>\n<p>You are given the string <var>w</var>. Determine if <var>w</var> is beautiful.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |w| \\leq 100</var></li>\n<li><var>w</var> consists of lowercase letters (<code>a</code>-<code>z</code>).</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>w</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <code>Yes</code> if <var>w</var> is beautiful. Print <code>No</code> otherwise.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>abaccaba\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>Yes\n</pre>\n<p><code>a</code> occurs four times, <code>b</code> occurs twice, <code>c</code> occurs twice and the other letters occur zero times.</p>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>hthth\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>No\n</pre></section>\n</div>\n</span>", "p04013": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Tak has <var>N</var> cards. On the <var>i</var>-th <var>(1 \\leq i \\leq N)</var> card is written an integer <var>x_i</var>.\nHe is selecting one or more cards from these <var>N</var> cards, so that the average of the integers written on the selected cards is exactly <var>A</var>.\nIn how many ways can he make his selection?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq A \\leq 50</var></li>\n<li><var>1 \\leq x_i \\leq 50</var></li>\n<li><var>N,\\,A,\\,x_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>200</var> points will be awarded for passing the test set satisfying <var>1 \\leq N \\leq 16</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to select cards such that the average of the written integers is exactly <var>A</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 8\n7 9 8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<ul>\n<li>The following are the <var>5</var> ways to select cards such that the average is <var>8</var>:<ul>\n<li>Select the <var>3</var>-rd card.</li>\n<li>Select the <var>1</var>-st and <var>2</var>-nd cards.</li>\n<li>Select the <var>1</var>-st and <var>4</var>-th cards.</li>\n<li>Select the <var>1</var>-st, <var>2</var>-nd and <var>3</var>-rd cards.</li>\n<li>Select the <var>1</var>-st, <var>3</var>-rd and <var>4</var>-th cards.</li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 8\n6 6 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 5\n3 6 2 8 7 6 5 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>19\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>33 3\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>8589934591\n</pre>\n<ul>\n<li>The answer may not fit into a <var>32</var>-bit integer.</li>\n</ul></section>\n</div>\n</span>", "p04014": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For integers <var>b (b \\geq 2)</var> and <var>n (n \\geq 1)</var>, let the function <var>f(b,n)</var> be defined as follows:</p>\n<ul>\n<li><var>f(b,n) = n</var>, when <var>n &lt; b</var></li>\n<li><var>f(b,n) = f(b,\\,{\\rm floor}(n / b)) + (n \\ {\\rm mod} \\ b)</var>, when <var>n \\geq b</var></li>\n</ul>\n<p>Here, <var>{\\rm floor}(n / b)</var> denotes the largest integer not exceeding <var>n / b</var>,\nand <var>n \\ {\\rm mod} \\ b</var> denotes the remainder of <var>n</var> divided by <var>b</var>.</p>\n<p>Less formally, <var>f(b,n)</var> is equal to the sum of the digits of <var>n</var> written in base <var>b</var>.\nFor example, the following hold:</p>\n<ul>\n<li><var>f(10,\\,87654)=8+7+6+5+4=30</var></li>\n<li><var>f(100,\\,87654)=8+76+54=138</var></li>\n</ul>\n<p>You are given integers <var>n</var> and <var>s</var>.\nDetermine if there exists an integer <var>b (b \\geq 2)</var> such that <var>f(b,n)=s</var>.\nIf the answer is positive, also find the smallest such <var>b</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq n \\leq 10^{11}</var></li>\n<li><var>1 \\leq s \\leq 10^{11}</var></li>\n<li><var>n,\\,s</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there exists an integer <var>b (b \\geq 2)</var> such that <var>f(b,n)=s</var>, print the smallest such <var>b</var>.\nIf such <var>b</var> does not exist, print <code>-1</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>87654\n30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>87654\n138\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>87654\n45678\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>31415926535\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>31415926535\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>1\n31415926535\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p04015": "<span class=\"lang-en\">\n<p>Score : <var>300</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Tak has <var>N</var> cards. On the <var>i</var>-th <var>(1 \\leq i \\leq N)</var> card is written an integer <var>x_i</var>.\nHe is selecting one or more cards from these <var>N</var> cards, so that the average of the integers written on the selected cards is exactly <var>A</var>.\nIn how many ways can he make his selection?</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq N \\leq 50</var></li>\n<li><var>1 \\leq A \\leq 50</var></li>\n<li><var>1 \\leq x_i \\leq 50</var></li>\n<li><var>N,\\,A,\\,x_i</var> are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>200</var> points will be awarded for passing the test set satisfying <var>1 \\leq N \\leq 16</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var> <var>A</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print the number of ways to select cards such that the average of the written integers is exactly <var>A</var>.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>4 8\n7 9 8 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>5\n</pre>\n<ul>\n<li>The following are the <var>5</var> ways to select cards such that the average is <var>8</var>:<ul>\n<li>Select the <var>3</var>-rd card.</li>\n<li>Select the <var>1</var>-st and <var>2</var>-nd cards.</li>\n<li>Select the <var>1</var>-st and <var>4</var>-th cards.</li>\n<li>Select the <var>1</var>-st, <var>2</var>-nd and <var>3</var>-rd cards.</li>\n<li>Select the <var>1</var>-st, <var>3</var>-rd and <var>4</var>-th cards.</li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>3 8\n6 6 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>0\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>8 5\n3 6 2 8 7 6 5 9\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>19\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>33 3\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>8589934591\n</pre>\n<ul>\n<li>The answer may not fit into a <var>32</var>-bit integer.</li>\n</ul></section>\n</div>\n</span>", "p04016": "<span class=\"lang-en\">\n<p>Score : <var>500</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>For integers <var>b (b \\geq 2)</var> and <var>n (n \\geq 1)</var>, let the function <var>f(b,n)</var> be defined as follows:</p>\n<ul>\n<li><var>f(b,n) = n</var>, when <var>n &lt; b</var></li>\n<li><var>f(b,n) = f(b,\\,{\\rm floor}(n / b)) + (n \\ {\\rm mod} \\ b)</var>, when <var>n \\geq b</var></li>\n</ul>\n<p>Here, <var>{\\rm floor}(n / b)</var> denotes the largest integer not exceeding <var>n / b</var>,\nand <var>n \\ {\\rm mod} \\ b</var> denotes the remainder of <var>n</var> divided by <var>b</var>.</p>\n<p>Less formally, <var>f(b,n)</var> is equal to the sum of the digits of <var>n</var> written in base <var>b</var>.\nFor example, the following hold:</p>\n<ul>\n<li><var>f(10,\\,87654)=8+7+6+5+4=30</var></li>\n<li><var>f(100,\\,87654)=8+76+54=138</var></li>\n</ul>\n<p>You are given integers <var>n</var> and <var>s</var>.\nDetermine if there exists an integer <var>b (b \\geq 2)</var> such that <var>f(b,n)=s</var>.\nIf the answer is positive, also find the smallest such <var>b</var>.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq n \\leq 10^{11}</var></li>\n<li><var>1 \\leq s \\leq 10^{11}</var></li>\n<li><var>n,\\,s</var> are integers.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>n</var>\n<var>s</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>If there exists an integer <var>b (b \\geq 2)</var> such that <var>f(b,n)=s</var>, print the smallest such <var>b</var>.\nIf such <var>b</var> does not exist, print <code>-1</code> instead.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>87654\n30\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>10\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>87654\n138\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>100\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>87654\n45678\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>-1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4</h3><pre>31415926535\n1\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4</h3><pre>31415926535\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5</h3><pre>1\n31415926535\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5</h3><pre>-1\n</pre></section>\n</div>\n</span>", "p04017": "<span class=\"lang-en\">\n<p>Score : <var>700</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p><var>N</var> hotels are located on a straight line. The coordinate of the <var>i</var>-th hotel <var>(1 \\leq i \\leq N)</var> is <var>x_i</var>.</p>\n<p>Tak the traveler has the following two personal principles:</p>\n<ul>\n<li>He never travels a distance of more than <var>L</var> in a single day.</li>\n<li>He never sleeps in the open. That is, he must stay at a hotel at the end of a day.</li>\n</ul>\n<p>You are given <var>Q</var> queries. The <var>j</var>-th <var>(1 \\leq j \\leq Q)</var> query is described by two distinct integers <var>a_j</var> and <var>b_j</var>.\nFor each query, find the minimum number of days that Tak needs to travel from the <var>a_j</var>-th hotel to the <var>b_j</var>-th hotel following his principles.\nIt is guaranteed that he can always travel from the <var>a_j</var>-th hotel to the <var>b_j</var>-th hotel, in any given input.</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>2 \\leq N \\leq 10^5</var></li>\n<li><var>1 \\leq L \\leq 10^9</var></li>\n<li><var>1 \\leq Q \\leq 10^5</var></li>\n<li><var>1 \\leq x_i &lt; x_2 &lt; ... &lt; x_N \\leq 10^9</var></li>\n<li><var>x_{i+1} - x_i \\leq L</var></li>\n<li><var>1 \\leq a_j,b_j \\leq N</var></li>\n<li><var>a_j \\neq b_j</var></li>\n<li><var>N,\\,L,\\,Q,\\,x_i,\\,a_j,\\,b_j</var> are integers.</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>200</var> points will be awarded for passing the test set satisfying <var>N \\leq 10^3</var> and <var>Q \\leq 10^3</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>N</var>\n<var>x_1</var> <var>x_2</var> <var>...</var> <var>x_N</var>\n<var>L</var>\n<var>Q</var>\n<var>a_1</var> <var>b_1</var>\n<var>a_2</var> <var>b_2</var>\n:\n<var>a_Q</var> <var>b_Q</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>Q</var> lines.\nThe <var>j</var>-th line <var>(1 \\leq j \\leq Q)</var> should contain the minimum number of days that Tak needs to travel from the <var>a_j</var>-th hotel to the <var>b_j</var>-th hotel.</p>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>9\n1 3 6 13 15 18 19 29 31\n10\n4\n1 8\n7 3\n6 7\n8 5\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>4\n2\n1\n2\n</pre>\n<p>For the <var>1</var>-st query, he can travel from the <var>1</var>-st hotel to the <var>8</var>-th hotel in <var>4</var> days, as follows:</p>\n<ul>\n<li>Day <var>1</var>: Travel from the <var>1</var>-st hotel to the <var>2</var>-nd hotel. The distance traveled is <var>2</var>.</li>\n<li>Day <var>2</var>: Travel from the <var>2</var>-nd hotel to the <var>4</var>-th hotel. The distance traveled is <var>10</var>.</li>\n<li>Day <var>3</var>: Travel from the <var>4</var>-th hotel to the <var>7</var>-th hotel. The distance traveled is <var>6</var>.</li>\n<li>Day <var>4</var>: Travel from the <var>7</var>-th hotel to the <var>8</var>-th hotel. The distance traveled is <var>10</var>.</li>\n</ul></section>\n</div>\n</span>", "p04018": "<span class=\"lang-en\">\n<p>Score : <var>900</var> points</p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement</h3><p>Let <var>x</var> be a string of length at least <var>1</var>.\nWe will call <var>x</var> a <em>good</em> string, if for any string <var>y</var> and any integer <var>k (k \\geq 2)</var>, the string obtained by concatenating <var>k</var> copies of <var>y</var> is different from <var>x</var>.\nFor example, <code>a</code>, <code>bbc</code> and <code>cdcdc</code> are good strings, while <code>aa</code>, <code>bbbb</code> and <code>cdcdcd</code> are not.</p>\n<p>Let <var>w</var> be a string of length at least <var>1</var>.\nFor a sequence <var>F=(\\,f_1,\\,f_2,\\,...,\\,f_m)</var> consisting of <var>m</var> elements,\nwe will call <var>F</var> a <em>good representation</em> of <var>w</var>, if the following conditions are both satisfied:</p>\n<ul>\n<li>For any <var>i \\, (1 \\leq i \\leq m)</var>, <var>f_i</var> is a good string.</li>\n<li>The string obtained by concatenating <var>f_1,\\,f_2,\\,...,\\,f_m</var> in this order, is <var>w</var>.</li>\n</ul>\n<p>For example, when <var>w=</var><code>aabb</code>, there are five good representations of <var>w</var>:</p>\n<ul>\n<li><var>(</var><code>aabb</code><var>)</var></li>\n<li><var>(</var><code>a</code><var>,</var><code>abb</code><var>)</var></li>\n<li><var>(</var><code>aab</code><var>,</var><code>b</code><var>)</var></li>\n<li><var>(</var><code>a</code><var>,</var><code>ab</code><var>,</var><code>b</code><var>)</var></li>\n<li><var>(</var><code>a</code><var>,</var><code>a</code><var>,</var><code>b</code><var>,</var><code>b</code><var>)</var></li>\n</ul>\n<p>Among the good representations of <var>w</var>, the ones with the smallest number of elements are called the <em>best representations</em> of <var>w</var>.\nFor example, there are only one best representation of <var>w=</var><code>aabb</code>: <var>(</var><code>aabb</code><var>)</var>.</p>\n<p>You are given a string <var>w</var>. Find the following:</p>\n<ul>\n<li>the number of elements of a best representation of <var>w</var></li>\n<li>the number of the best representations of <var>w</var>, modulo <var>1000000007 \\, (=10^9+7)</var></li>\n</ul>\n<p>(It is guaranteed that a good representation of <var>w</var> always exists.)</p>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Constraints</h3><ul>\n<li><var>1 \\leq |w| \\leq 500000 \\, (=5 \\times 10^5)</var></li>\n<li><var>w</var> consists of lowercase letters (<code>a</code>-<code>z</code>).</li>\n</ul>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Partial Score</h3><ul>\n<li><var>400</var> points will be awarded for passing the test set satisfying <var>1 \\leq |w| \\leq 4000</var>.</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input</h3><p>The input is given from Standard Input in the following format:</p>\n<pre><var>w</var>\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Output</h3><p>Print <var>2</var> lines.</p>\n<ul>\n<li>In the first line, print the number of elements of a best representation of <var>w</var>.</li>\n<li>In the second line, print the number of the best representations of <var>w</var>, modulo <var>1000000007</var>.</li>\n</ul>\n</section>\n</div>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1</h3><pre>aab\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1</h3><pre>1\n1\n</pre>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2</h3><pre>bcbc\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2</h3><pre>2\n3\n</pre>\n<ul>\n<li>In this case, there are <var>3</var> best representations of <var>2</var> elements:<ul>\n<li><var>(</var><code>b</code><var>,</var><code>cbc</code><var>)</var></li>\n<li><var>(</var><code>bc</code><var>,</var><code>bc</code><var>)</var></li>\n<li><var>(</var><code>bcb</code><var>,</var><code>c</code><var>)</var></li>\n</ul>\n</li>\n</ul>\n</section>\n</div>\n<hr/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3</h3><pre>ddd\n</pre>\n</section>\n</div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3</h3><pre>3\n1\n</pre></section>\n</div>\n</span>"}